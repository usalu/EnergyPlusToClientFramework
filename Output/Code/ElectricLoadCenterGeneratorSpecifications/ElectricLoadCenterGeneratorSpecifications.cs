namespace BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("This generator model is the empirical model from the Building Loads and System Th" +
        "ermodynamics (BLAST) program. Engine performance curves are generated by fitting" +
        " catalog data to second order polynomial equations. Three sets of coefficients a" +
        "re required.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class Generator_InternalCombustionEngine : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[JsonProperty("rated_power_output")]
public System.Nullable<float> RatedPowerOutput { get; set; } = null;
        

[JsonProperty("electric_circuit_node_name")]
public string ElectricCircuitNodeName { get; set; } = "";
        

[JsonProperty("minimum_part_load_ratio")]
public System.Nullable<float> MinimumPartLoadRatio { get; set; } = null;
        

[JsonProperty("maximum_part_load_ratio")]
public System.Nullable<float> MaximumPartLoadRatio { get; set; } = null;
        

[JsonProperty("optimum_part_load_ratio")]
public System.Nullable<float> OptimumPartLoadRatio { get; set; } = null;
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty("shaft_power_curve_name")]
public string ShaftPowerCurveName { get; set; } = "";
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty("jacket_heat_recovery_curve_name")]
public string JacketHeatRecoveryCurveName { get; set; } = "";
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty("lube_heat_recovery_curve_name")]
public string LubeHeatRecoveryCurveName { get; set; } = "";
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty("total_exhaust_energy_curve_name")]
public string TotalExhaustEnergyCurveName { get; set; } = "";
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty("exhaust_temperature_curve_name")]
public string ExhaustTemperatureCurveName { get; set; } = "";
        

[Description("curve = C1 * Generator Rated Power Output**C2")]
[JsonProperty("coefficient_1_of_u_factor_times_area_curve")]
public System.Nullable<float> Coefficient1OfUFactorTimesAreaCurve { get; set; } = null;
        

[Description("curve = C1 * Generator Rated Power Output**C2 typical value .9")]
[JsonProperty("coefficient_2_of_u_factor_times_area_curve")]
public System.Nullable<float> Coefficient2OfUFactorTimesAreaCurve { get; set; } = null;
        

[JsonProperty("maximum_exhaust_flow_per_unit_of_power_output")]
public System.Nullable<float> MaximumExhaustFlowPerUnitOfPowerOutput { get; set; } = null;
        

[JsonProperty("design_minimum_exhaust_temperature")]
public System.Nullable<float> DesignMinimumExhaustTemperature { get; set; } = null;
        

[JsonProperty("fuel_higher_heating_value")]
public System.Nullable<float> FuelHigherHeatingValue { get; set; } = null;
        

[Description("if non-zero, then inlet, outlet nodes must be entered.")]
[JsonProperty("design_heat_recovery_water_flow_rate")]
public System.Nullable<float> DesignHeatRecoveryWaterFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_recovery_inlet_node_name")]
public string HeatRecoveryInletNodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_outlet_node_name")]
public string HeatRecoveryOutletNodeName { get; set; } = "";
        

[JsonProperty("fuel_type")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_InternalCombustionEngine_FuelType FuelType { get; set; } = (Generator_InternalCombustionEngine_FuelType)Enum.Parse(typeof(Generator_InternalCombustionEngine_FuelType), "Diesel");
        

[JsonProperty("heat_recovery_maximum_temperature")]
public System.Nullable<float> HeatRecoveryMaximumTemperature { get; set; } = (System.Nullable<float>)Single.Parse("80", CultureInfo.InvariantCulture);
    }
    
    public enum Generator_InternalCombustionEngine_FuelType
    {
        
        [System.Runtime.Serialization.EnumMember(Value="null")]
        Empty = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Diesel")]
        Diesel = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="FuelOilNo1")]
        FuelOilNo1 = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="FuelOilNo2")]
        FuelOilNo2 = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="Gasoline")]
        Gasoline = 4,
        
        [System.Runtime.Serialization.EnumMember(Value="NaturalGas")]
        NaturalGas = 5,
        
        [System.Runtime.Serialization.EnumMember(Value="OtherFuel1")]
        OtherFuel1 = 6,
        
        [System.Runtime.Serialization.EnumMember(Value="OtherFuel2")]
        OtherFuel2 = 7,
        
        [System.Runtime.Serialization.EnumMember(Value="Propane")]
        Propane = 8,
    }
    
    [Description(@"This generator model is the empirical model from the Building Loads and System Thermodynamics (BLAST) program. Generator performance curves are generated by fitting catalog data to second order polynomial equations. Three sets of coefficients are required.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class Generator_CombustionTurbine : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[JsonProperty("rated_power_output")]
public System.Nullable<float> RatedPowerOutput { get; set; } = null;
        

[JsonProperty("electric_circuit_node_name")]
public string ElectricCircuitNodeName { get; set; } = "";
        

[JsonProperty("minimum_part_load_ratio")]
public System.Nullable<float> MinimumPartLoadRatio { get; set; } = null;
        

[JsonProperty("maximum_part_load_ratio")]
public System.Nullable<float> MaximumPartLoadRatio { get; set; } = null;
        

[JsonProperty("optimum_part_load_ratio")]
public System.Nullable<float> OptimumPartLoadRatio { get; set; } = null;
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output " +
    "this curve is multiplied to the Temperature Based Fuel Input Curve to determine " +
    "Fuel Energy In")]
[JsonProperty("part_load_based_fuel_input_curve_name")]
public string PartLoadBasedFuelInputCurveName { get; set; } = "";
        

[Description("curve = a + b*AT + c*AT**2 AT = Ambient Delta T this curve is multiplied to the P" +
    "art Load Based Fuel Input Curve to determine Fuel Energy In")]
[JsonProperty("temperature_based_fuel_input_curve_name")]
public string TemperatureBasedFuelInputCurveName { get; set; } = "";
        

[Description("curve = a + b*AT + c*AT**2 AT = Ambient Delta T")]
[JsonProperty("exhaust_flow_curve_name")]
public string ExhaustFlowCurveName { get; set; } = "";
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output " +
    "this curve is multiplied to the Temperature Based Exhaust Temperature Curve to d" +
    "etermine Exhaust Temperature")]
[JsonProperty("part_load_based_exhaust_temperature_curve_name")]
public string PartLoadBasedExhaustTemperatureCurveName { get; set; } = "";
        

[Description("curve = a + b*AT + c*AT**2 AT = Ambient Delta T this curve is multiplied to the P" +
    "art Load Based Exhaust Temperature Curve to determine Exhaust Temperature")]
[JsonProperty("temperature_based_exhaust_temperature_curve_name")]
public string TemperatureBasedExhaustTemperatureCurveName { get; set; } = "";
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty("heat_recovery_lube_energy_curve_name")]
public string HeatRecoveryLubeEnergyCurveName { get; set; } = "";
        

[Description("curve = C1 * Rated Power Output**C2")]
[JsonProperty("coefficient_1_of_u_factor_times_area_curve")]
public System.Nullable<float> Coefficient1OfUFactorTimesAreaCurve { get; set; } = null;
        

[Description("curve = C1 * Rated Power Output**C2 typical value .9")]
[JsonProperty("coefficient_2_of_u_factor_times_area_curve")]
public System.Nullable<float> Coefficient2OfUFactorTimesAreaCurve { get; set; } = null;
        

[JsonProperty("maximum_exhaust_flow_per_unit_of_power_output")]
public System.Nullable<float> MaximumExhaustFlowPerUnitOfPowerOutput { get; set; } = null;
        

[JsonProperty("design_minimum_exhaust_temperature")]
public System.Nullable<float> DesignMinimumExhaustTemperature { get; set; } = null;
        

[JsonProperty("design_air_inlet_temperature")]
public System.Nullable<float> DesignAirInletTemperature { get; set; } = null;
        

[JsonProperty("fuel_higher_heating_value")]
public System.Nullable<float> FuelHigherHeatingValue { get; set; } = null;
        

[Description("if non-zero, then inlet, outlet nodes must be entered.")]
[JsonProperty("design_heat_recovery_water_flow_rate")]
public System.Nullable<float> DesignHeatRecoveryWaterFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_recovery_inlet_node_name")]
public string HeatRecoveryInletNodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_outlet_node_name")]
public string HeatRecoveryOutletNodeName { get; set; } = "";
        

[JsonProperty("fuel_type")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_CombustionTurbine_FuelType FuelType { get; set; } = (Generator_CombustionTurbine_FuelType)Enum.Parse(typeof(Generator_CombustionTurbine_FuelType), "NaturalGas");
        

[JsonProperty("heat_recovery_maximum_temperature")]
public System.Nullable<float> HeatRecoveryMaximumTemperature { get; set; } = (System.Nullable<float>)Single.Parse("80", CultureInfo.InvariantCulture);
        

[Description("Enter the name of an outdoor air node")]
[JsonProperty("outdoor_air_inlet_node_name")]
public string OutdoorAirInletNodeName { get; set; } = "";
    }
    
    public enum Generator_CombustionTurbine_FuelType
    {
        
        [System.Runtime.Serialization.EnumMember(Value="null")]
        Empty = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Coal")]
        Coal = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="Diesel")]
        Diesel = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="FuelOilNo1")]
        FuelOilNo1 = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="FuelOilNo2")]
        FuelOilNo2 = 4,
        
        [System.Runtime.Serialization.EnumMember(Value="Gasoline")]
        Gasoline = 5,
        
        [System.Runtime.Serialization.EnumMember(Value="NaturalGas")]
        NaturalGas = 6,
        
        [System.Runtime.Serialization.EnumMember(Value="OtherFuel1")]
        OtherFuel1 = 7,
        
        [System.Runtime.Serialization.EnumMember(Value="OtherFuel2")]
        OtherFuel2 = 8,
        
        [System.Runtime.Serialization.EnumMember(Value="Propane")]
        Propane = 9,
    }
    
    [Description("MicroTurbine generators are small combustion turbines (e.g., 25kW to 500kW). The " +
        "model calculates electrical power output, fuel use, standby and ancillary power." +
        " Energy recovery from exhaust air can be used to heat water.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class Generator_MicroTurbine : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[JsonProperty("reference_electrical_power_output")]
public System.Nullable<float> ReferenceElectricalPowerOutput { get; set; } = null;
        

[JsonProperty("minimum_full_load_electrical_power_output")]
public System.Nullable<float> MinimumFullLoadElectricalPowerOutput { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("If left blank, Maximum Full Load Electrical Power Output will be set equal to the" +
    " Reference Electrical Power Output.")]
[JsonProperty("maximum_full_load_electrical_power_output")]
public System.Nullable<float> MaximumFullLoadElectricalPowerOutput { get; set; } = null;
        

[Description("Electric power output divided by fuel energy input (LHV basis) at reference condi" +
    "tions.")]
[JsonProperty("reference_electrical_efficiency_using_lower_heating_value")]
public System.Nullable<float> ReferenceElectricalEfficiencyUsingLowerHeatingValue { get; set; } = null;
        

[JsonProperty("reference_combustion_air_inlet_temperature")]
public System.Nullable<float> ReferenceCombustionAirInletTemperature { get; set; } = (System.Nullable<float>)Single.Parse("15", CultureInfo.InvariantCulture);
        

[JsonProperty("reference_combustion_air_inlet_humidity_ratio")]
public System.Nullable<float> ReferenceCombustionAirInletHumidityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.00638", CultureInfo.InvariantCulture);
        

[JsonProperty("reference_elevation")]
public System.Nullable<float> ReferenceElevation { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev T = combustion air inlet" +
    " temperature (C) Elev = elevation (m)")]
[JsonProperty("electrical_power_function_of_temperature_and_elevation_curve_name")]
public string ElectricalPowerFunctionOfTemperatureAndElevationCurveName { get; set; } = "";
        

[Description("Quadratic curve = a + b*T + c*T**2 Cubic curve = a + b*T + c*T**2 + d*T**3 T = co" +
    "mbustion air inlet temperature (C)")]
[JsonProperty("electrical_efficiency_function_of_temperature_curve_name")]
public string ElectricalEfficiencyFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Quadratic curve = a + b*PLR + c*PLR**2 Cubic curve = a + b*PLR + c*PLR**2 + d*PLR" +
    "**3 PLR = ratio of Generator Load to steady state Electrical Power Output at cur" +
    "rent operating conditions")]
[JsonProperty("electrical_efficiency_function_of_part_load_ratio_curve_name")]
public string ElectricalEfficiencyFunctionOfPartLoadRatioCurveName { get; set; } = "";
        

[JsonProperty("fuel_type")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_MicroTurbine_FuelType FuelType { get; set; } = (Generator_MicroTurbine_FuelType)Enum.Parse(typeof(Generator_MicroTurbine_FuelType), "NaturalGas");
        

[JsonProperty("fuel_higher_heating_value")]
public System.Nullable<float> FuelHigherHeatingValue { get; set; } = (System.Nullable<float>)Single.Parse("50000", CultureInfo.InvariantCulture);
        

[JsonProperty("fuel_lower_heating_value")]
public System.Nullable<float> FuelLowerHeatingValue { get; set; } = (System.Nullable<float>)Single.Parse("45450", CultureInfo.InvariantCulture);
        

[Description("Electric power consumed when the generator is available but not being called by t" +
    "he Electric Load Center.")]
[JsonProperty("standby_power")]
public System.Nullable<float> StandbyPower { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Electric power consumed by ancillary equipment (e.g., external fuel pressurization pump). Set to zero if Reference Electrical Power Output is the 'net' value (ancillary power already deducted). Input value is positive, but indicates negative electric generation.")]
[JsonProperty("ancillary_power")]
public System.Nullable<float> AncillaryPower { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Quadratic curve = a + b*mdot + c*mdot**2 mdot = fuel mass flow rate (kg/s) If lef" +
    "t blank, model assumes ancillary power defined in previous field is constant whe" +
    "never the generator is operating.")]
[JsonProperty("ancillary_power_function_of_fuel_input_curve_name")]
public string AncillaryPowerFunctionOfFuelInputCurveName { get; set; } = "";
        

[JsonProperty("heat_recovery_water_inlet_node_name")]
public string HeatRecoveryWaterInletNodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_water_outlet_node_name")]
public string HeatRecoveryWaterOutletNodeName { get; set; } = "";
        

[Description("Reference thermal efficiency (heat recovery to water) based on the Lower Heating " +
    "Value (LHV) of the fuel.")]
[JsonProperty("reference_thermal_efficiency_using_lower_heat_value")]
public System.Nullable<float> ReferenceThermalEfficiencyUsingLowerHeatValue { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("reference_inlet_water_temperature")]
public System.Nullable<float> ReferenceInletWaterTemperature { get; set; } = null;
        

[Description(@"PlantControl means the heat recovery water flow rate is determined by the plant, but the user needs to supply a heat recovery water flow rate. InternalControl means the heat recovery water flow rate is controlled by this generator. If 'InternalControl' is selected, then the user needs to supply a reference heat recovery water flow rate and optionally the name of a heat recovery flow rate modifier curve.")]
[JsonProperty("heat_recovery_water_flow_operating_mode")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_MicroTurbine_HeatRecoveryWaterFlowOperatingMode HeatRecoveryWaterFlowOperatingMode { get; set; } = (Generator_MicroTurbine_HeatRecoveryWaterFlowOperatingMode)Enum.Parse(typeof(Generator_MicroTurbine_HeatRecoveryWaterFlowOperatingMode), "PlantControl");
        

[JsonProperty("reference_heat_recovery_water_flow_rate")]
public System.Nullable<float> ReferenceHeatRecoveryWaterFlowRate { get; set; } = null;
        

[Description(@"curve = a + b*T + c*T**2 + d*Pnet + e*Pnet + f*T*Pnet T = heat recovery inlet water temperature Pnet = net power output = electric power output - ancillary power If left blank, model assumes the heat recovery water flow rate is constant whenever the generator is operating, at the Reference HR Water Flow Rate defined in the previous field.")]
[JsonProperty("heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name")]
public string HeatRecoveryWaterFlowRateFunctionOfTemperatureAndPowerCurveName { get; set; } = "";
        

[Description(@"Bicubic curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev + g*T**3 + h*Elev**3 + i*T**2*Elev + j*T*Elev**2 Biquadratic curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev T = combustion air inlet temperature (C) Elev = elevation (m) If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
[JsonProperty("thermal_efficiency_function_of_temperature_and_elevation_curve_name")]
public string ThermalEfficiencyFunctionOfTemperatureAndElevationCurveName { get; set; } = "";
        

[Description(@"Quadratic curve = a + b*PLR + c*PLR**2 Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = ratio of Generator Load to steady state Electrical Power Output at current operating conditions If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
[JsonProperty("heat_recovery_rate_function_of_part_load_ratio_curve_name")]
public string HeatRecoveryRateFunctionOfPartLoadRatioCurveName { get; set; } = "";
        

[Description("Quadratic curve = a + b*T + c*T**2 T = inlet water temperature (C) If field is le" +
    "ft blank, model assumes this modifier equals 1 for entire simulation.")]
[JsonProperty("heat_recovery_rate_function_of_inlet_water_temperature_curve_name")]
public string HeatRecoveryRateFunctionOfInletWaterTemperatureCurveName { get; set; } = "";
        

[Description("Quadratic curve = a + b*Flow + c*Flow**2 Flow = flow rate of water through the he" +
    "at exchanger (m3/s) If field is left blank, model assumes this modifier equals 1" +
    " for entire simulation.")]
[JsonProperty("heat_recovery_rate_function_of_water_flow_rate_curve_name")]
public string HeatRecoveryRateFunctionOfWaterFlowRateCurveName { get; set; } = "";
        

[JsonProperty("minimum_heat_recovery_water_flow_rate")]
public System.Nullable<float> MinimumHeatRecoveryWaterFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_heat_recovery_water_flow_rate")]
public System.Nullable<float> MaximumHeatRecoveryWaterFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_heat_recovery_water_temperature")]
public System.Nullable<float> MaximumHeatRecoveryWaterTemperature { get; set; } = null;
        

[Description("Must be an outdoor air node.")]
[JsonProperty("combustion_air_inlet_node_name")]
public string CombustionAirInletNodeName { get; set; } = "";
        

[JsonProperty("combustion_air_outlet_node_name")]
public string CombustionAirOutletNodeName { get; set; } = "";
        

[JsonProperty("reference_exhaust_air_mass_flow_rate")]
public System.Nullable<float> ReferenceExhaustAirMassFlowRate { get; set; } = null;
        

[Description("Quadratic curve = a + b*T + c*T**2 Cubic curve = a + b*T + c*T**2 + d*T**3 T = co" +
    "mbustion air inlet temperature (C) If field is left blank, model assumes this mo" +
    "difier equals 1 for entire simulation.")]
[JsonProperty("exhaust_air_flow_rate_function_of_temperature_curve_name")]
public string ExhaustAirFlowRateFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"Quadratic curve = a + b*PLR + c*PLR**2 Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = ratio of Generator Load to steady state Electrical Power Output at current operating conditions. If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
[JsonProperty("exhaust_air_flow_rate_function_of_part_load_ratio_curve_name")]
public string ExhaustAirFlowRateFunctionOfPartLoadRatioCurveName { get; set; } = "";
        

[Description("Exhaust air outlet temperature at reference conditions.")]
[JsonProperty("nominal_exhaust_air_outlet_temperature")]
public System.Nullable<float> NominalExhaustAirOutletTemperature { get; set; } = null;
        

[Description("Quadratic curve = a + b*T + c*T**2 Cubic curve = a + b*T + c*T**2 + d*T**3 T = co" +
    "mbustion air inlet temperature (C) If field is left blank, model assumes this mo" +
    "difier equals 1 for entire simulation.")]
[JsonProperty("exhaust_air_temperature_function_of_temperature_curve_name")]
public string ExhaustAirTemperatureFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"Quadratic curve = a + b*PLR + c*PLR**2 Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = ratio of Generator Load to steady state Electrical Power Output at current operating conditions. If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
[JsonProperty("exhaust_air_temperature_function_of_part_load_ratio_curve_name")]
public string ExhaustAirTemperatureFunctionOfPartLoadRatioCurveName { get; set; } = "";
    }
    
    public enum Generator_MicroTurbine_FuelType
    {
        
        [System.Runtime.Serialization.EnumMember(Value="null")]
        Empty = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Coal")]
        Coal = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="Diesel")]
        Diesel = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="FuelOilNo1")]
        FuelOilNo1 = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="FuelOilNo2")]
        FuelOilNo2 = 4,
        
        [System.Runtime.Serialization.EnumMember(Value="Gasoline")]
        Gasoline = 5,
        
        [System.Runtime.Serialization.EnumMember(Value="NaturalGas")]
        NaturalGas = 6,
        
        [System.Runtime.Serialization.EnumMember(Value="OtherFuel1")]
        OtherFuel1 = 7,
        
        [System.Runtime.Serialization.EnumMember(Value="OtherFuel2")]
        OtherFuel2 = 8,
        
        [System.Runtime.Serialization.EnumMember(Value="Propane")]
        Propane = 9,
    }
    
    public enum Generator_MicroTurbine_HeatRecoveryWaterFlowOperatingMode
    {
        
        [System.Runtime.Serialization.EnumMember(Value="null")]
        Empty = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="InternalControl")]
        InternalControl = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="PlantControl")]
        PlantControl = 2,
    }
    
    [Description(@"Describes an array of photovoltaic (PV) modules. A series of different PV arrays can be connected to a single electric load center (and inverter) by listing them all in an ElectricLoadCenter:Generator object. PV performance is taken from the referenced PhotovoltaicPerformance:* object. Array tilt, azimuth, and gross area are taken from the referenced building surface or shading surface. The array surface participates normally in all shading calculations.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class Generator_Photovoltaic : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[JsonProperty("surface_name")]
public string SurfaceName { get; set; } = "";
        

[JsonProperty("photovoltaic_performance_object_type")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_Photovoltaic_PhotovoltaicPerformanceObjectType PhotovoltaicPerformanceObjectType { get; set; } = (Generator_Photovoltaic_PhotovoltaicPerformanceObjectType)Enum.Parse(typeof(Generator_Photovoltaic_PhotovoltaicPerformanceObjectType), "PhotovoltaicPerformanceEquivalentOneDiode");
        

[Description("PV array modeling details")]
[JsonProperty("module_performance_name")]
public string ModulePerformanceName { get; set; } = "";
        

[JsonProperty("heat_transfer_integration_mode")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_Photovoltaic_HeatTransferIntegrationMode HeatTransferIntegrationMode { get; set; } = (Generator_Photovoltaic_HeatTransferIntegrationMode)Enum.Parse(typeof(Generator_Photovoltaic_HeatTransferIntegrationMode), "Decoupled");
        

[Description("number of series-wired strings of PV modules that are in parallel")]
[JsonProperty("number_of_series_strings_in_parallel")]
public System.Nullable<float> NumberOfSeriesStringsInParallel { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Number of PV modules wired in series for each string.")]
[JsonProperty("number_of_modules_in_series")]
public System.Nullable<float> NumberOfModulesInSeries { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    public enum Generator_Photovoltaic_PhotovoltaicPerformanceObjectType
    {
        
        [System.Runtime.Serialization.EnumMember(Value="PhotovoltaicPerformance:EquivalentOne-Diode")]
        PhotovoltaicPerformanceEquivalentOneDiode = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="PhotovoltaicPerformance:Sandia")]
        PhotovoltaicPerformanceSandia = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="PhotovoltaicPerformance:Simple")]
        PhotovoltaicPerformanceSimple = 2,
    }
    
    public enum Generator_Photovoltaic_HeatTransferIntegrationMode
    {
        
        [System.Runtime.Serialization.EnumMember(Value="null")]
        Empty = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Decoupled")]
        Decoupled = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="DecoupledUllebergDynamic")]
        DecoupledUllebergDynamic = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="IntegratedExteriorVentedCavity")]
        IntegratedExteriorVentedCavity = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="IntegratedSurfaceOutsideFace")]
        IntegratedSurfaceOutsideFace = 4,
        
        [System.Runtime.Serialization.EnumMember(Value="IntegratedTranspiredCollector")]
        IntegratedTranspiredCollector = 5,
        
        [System.Runtime.Serialization.EnumMember(Value="PhotovoltaicThermalSolarCollector")]
        PhotovoltaicThermalSolarCollector = 6,
    }
    
    [Description(@"Describes a simple model of photovoltaics that may be useful for early phase design analysis. In this model the user has direct access to the efficiency with which surfaces convert incident solar radiation to electricity and need not specify arrays of specific modules.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class PhotovoltaicPerformance_Simple : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[JsonProperty("fraction_of_surface_area_with_active_solar_cells")]
public System.Nullable<float> FractionOfSurfaceAreaWithActiveSolarCells { get; set; } = null;
        

[JsonProperty("conversion_efficiency_input_mode")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode ConversionEfficiencyInputMode { get; set; } = (PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode)Enum.Parse(typeof(PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode), "Fixed");
        

[Description("Efficiency = (power generated [W])/(incident solar[W])")]
[JsonProperty("value_for_cell_efficiency_if_fixed")]
public System.Nullable<float> ValueForCellEfficiencyIfFixed { get; set; } = null;
        

[JsonProperty("efficiency_schedule_name")]
public string EfficiencyScheduleName { get; set; } = "";
    }
    
    public enum PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode
    {
        
        [System.Runtime.Serialization.EnumMember(Value="Fixed")]
        Fixed = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Scheduled")]
        Scheduled = 1,
    }
    
    [Description("Describes the performance characteristics of Photovoltaic (PV) modules to be mode" +
        "led using an equivalent one-diode circuit. This model is also known as the 4- or" +
        " 5-parameter TRNSYS model for photovoltaics.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class PhotovoltaicPerformance_EquivalentOneDiode : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[JsonProperty("cell_type")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public PhotovoltaicPerformance_EquivalentOneDiode_CellType CellType { get; set; } = (PhotovoltaicPerformance_EquivalentOneDiode_CellType)Enum.Parse(typeof(PhotovoltaicPerformance_EquivalentOneDiode_CellType), "AmorphousSilicon");
        

[JsonProperty("number_of_cells_in_series")]
public System.Nullable<float> NumberOfCellsInSeries { get; set; } = (System.Nullable<float>)Single.Parse("36", CultureInfo.InvariantCulture);
        

[Description("The total power output of the array is determined by the number of modules (see a" +
    "bove). The Active Area is only used to calculate the PV Array Efficiency output " +
    "variable.")]
[JsonProperty("active_area")]
public System.Nullable<float> ActiveArea { get; set; } = (System.Nullable<float>)Single.Parse("0.89", CultureInfo.InvariantCulture);
        

[JsonProperty("transmittance_absorptance_product")]
public System.Nullable<float> TransmittanceAbsorptanceProduct { get; set; } = (System.Nullable<float>)Single.Parse("0.95", CultureInfo.InvariantCulture);
        

[JsonProperty("semiconductor_bandgap")]
public System.Nullable<float> SemiconductorBandgap { get; set; } = (System.Nullable<float>)Single.Parse("1.12", CultureInfo.InvariantCulture);
        

[JsonProperty("shunt_resistance")]
public System.Nullable<float> ShuntResistance { get; set; } = (System.Nullable<float>)Single.Parse("1000000", CultureInfo.InvariantCulture);
        

[JsonProperty("short_circuit_current")]
public System.Nullable<float> ShortCircuitCurrent { get; set; } = (System.Nullable<float>)Single.Parse("6.5", CultureInfo.InvariantCulture);
        

[JsonProperty("open_circuit_voltage")]
public System.Nullable<float> OpenCircuitVoltage { get; set; } = (System.Nullable<float>)Single.Parse("21.6", CultureInfo.InvariantCulture);
        

[JsonProperty("reference_temperature")]
public System.Nullable<float> ReferenceTemperature { get; set; } = (System.Nullable<float>)Single.Parse("25", CultureInfo.InvariantCulture);
        

[JsonProperty("reference_insolation")]
public System.Nullable<float> ReferenceInsolation { get; set; } = (System.Nullable<float>)Single.Parse("1000", CultureInfo.InvariantCulture);
        

[Description("Single module current at the maximum power point and reference conditions. Module" +
    " Current, Module Voltage, Number of Modules in Parallel and Number of Modules in" +
    " Series determine the maximum power output of the array.")]
[JsonProperty("module_current_at_maximum_power")]
public System.Nullable<float> ModuleCurrentAtMaximumPower { get; set; } = (System.Nullable<float>)Single.Parse("5.9", CultureInfo.InvariantCulture);
        

[Description("Single module voltage at the maximum power point and reference conditions. Module" +
    " Current, Module Voltage, Number of Modules in Parallel and Number of Modules in" +
    " Series determine the maximum power output of the array.")]
[JsonProperty("module_voltage_at_maximum_power")]
public System.Nullable<float> ModuleVoltageAtMaximumPower { get; set; } = (System.Nullable<float>)Single.Parse("17", CultureInfo.InvariantCulture);
        

[JsonProperty("temperature_coefficient_of_short_circuit_current")]
public System.Nullable<float> TemperatureCoefficientOfShortCircuitCurrent { get; set; } = (System.Nullable<float>)Single.Parse("0.02", CultureInfo.InvariantCulture);
        

[JsonProperty("temperature_coefficient_of_open_circuit_voltage")]
public System.Nullable<float> TemperatureCoefficientOfOpenCircuitVoltage { get; set; } = (System.Nullable<float>)Single.Parse("-0.079", CultureInfo.InvariantCulture);
        

[JsonProperty("nominal_operating_cell_temperature_test_ambient_temperature")]
public System.Nullable<float> NominalOperatingCellTemperatureTestAmbientTemperature { get; set; } = (System.Nullable<float>)Single.Parse("20", CultureInfo.InvariantCulture);
        

[JsonProperty("nominal_operating_cell_temperature_test_cell_temperature")]
public System.Nullable<float> NominalOperatingCellTemperatureTestCellTemperature { get; set; } = (System.Nullable<float>)Single.Parse("40", CultureInfo.InvariantCulture);
        

[JsonProperty("nominal_operating_cell_temperature_test_insolation")]
public System.Nullable<float> NominalOperatingCellTemperatureTestInsolation { get; set; } = (System.Nullable<float>)Single.Parse("800", CultureInfo.InvariantCulture);
        

[JsonProperty("module_heat_loss_coefficient")]
public System.Nullable<float> ModuleHeatLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[JsonProperty("total_heat_capacity")]
public System.Nullable<float> TotalHeatCapacity { get; set; } = (System.Nullable<float>)Single.Parse("50000", CultureInfo.InvariantCulture);
    }
    
    public enum PhotovoltaicPerformance_EquivalentOneDiode_CellType
    {
        
        [System.Runtime.Serialization.EnumMember(Value="AmorphousSilicon")]
        AmorphousSilicon = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="CrystallineSilicon")]
        CrystallineSilicon = 1,
    }
    
    [Description("Describes performance input data needed for specific makes and models of producti" +
        "on PV panels using the empirical coefficients assembled by Sandia National Labor" +
        "atory.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class PhotovoltaicPerformance_Sandia : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[Description("(m2, single module)")]
[JsonProperty("active_area")]
public System.Nullable<float> ActiveArea { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("number_of_cells_in_series")]
public System.Nullable<float> NumberOfCellsInSeries { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("number_of_cells_in_parallel")]
public System.Nullable<float> NumberOfCellsInParallel { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("(Amps)")]
[JsonProperty("short_circuit_current")]
public System.Nullable<float> ShortCircuitCurrent { get; set; } = null;
        

[Description("(Volts)")]
[JsonProperty("open_circuit_voltage")]
public System.Nullable<float> OpenCircuitVoltage { get; set; } = null;
        

[Description("(Amps)")]
[JsonProperty("current_at_maximum_power_point")]
public System.Nullable<float> CurrentAtMaximumPowerPoint { get; set; } = null;
        

[Description("(Volts)")]
[JsonProperty("voltage_at_maximum_power_point")]
public System.Nullable<float> VoltageAtMaximumPowerPoint { get; set; } = null;
        

[Description("(1/degC)")]
[JsonProperty("sandia_database_parameter_aisc")]
public System.Nullable<float> SandiaDatabaseParameterAisc { get; set; } = null;
        

[Description("(1/degC)")]
[JsonProperty("sandia_database_parameter_aimp")]
public System.Nullable<float> SandiaDatabaseParameterAimp { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_c0")]
public System.Nullable<float> SandiaDatabaseParameterC0 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_c1")]
public System.Nullable<float> SandiaDatabaseParameterC1 { get; set; } = null;
        

[Description("(Volts/degC)")]
[JsonProperty("sandia_database_parameter_bvoc0")]
public System.Nullable<float> SandiaDatabaseParameterBvoc0 { get; set; } = null;
        

[Description("(Volts/degC)")]
[JsonProperty("sandia_database_parameter_mbvoc")]
public System.Nullable<float> SandiaDatabaseParameterMbvoc { get; set; } = null;
        

[Description("(Volts/degC)")]
[JsonProperty("sandia_database_parameter_bvmp0")]
public System.Nullable<float> SandiaDatabaseParameterBvmp0 { get; set; } = null;
        

[Description("(Volts/degC)")]
[JsonProperty("sandia_database_parameter_mbvmp")]
public System.Nullable<float> SandiaDatabaseParameterMbvmp { get; set; } = null;
        

[JsonProperty("diode_factor")]
public System.Nullable<float> DiodeFactor { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_c2")]
public System.Nullable<float> SandiaDatabaseParameterC2 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_c3")]
public System.Nullable<float> SandiaDatabaseParameterC3 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_a0")]
public System.Nullable<float> SandiaDatabaseParameterA0 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_a1")]
public System.Nullable<float> SandiaDatabaseParameterA1 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_a2")]
public System.Nullable<float> SandiaDatabaseParameterA2 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_a3")]
public System.Nullable<float> SandiaDatabaseParameterA3 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_a4")]
public System.Nullable<float> SandiaDatabaseParameterA4 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_b0")]
public System.Nullable<float> SandiaDatabaseParameterB0 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_b1")]
public System.Nullable<float> SandiaDatabaseParameterB1 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_b2")]
public System.Nullable<float> SandiaDatabaseParameterB2 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_b3")]
public System.Nullable<float> SandiaDatabaseParameterB3 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_b4")]
public System.Nullable<float> SandiaDatabaseParameterB4 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_b5")]
public System.Nullable<float> SandiaDatabaseParameterB5 { get; set; } = null;
        

[Description("(deg C)")]
[JsonProperty("sandia_database_parameter_delta_tc_")]
public System.Nullable<float> SandiaDatabaseParameterDeltaTc { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_fd")]
public System.Nullable<float> SandiaDatabaseParameterFd { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_a")]
public System.Nullable<float> SandiaDatabaseParameterA { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_b")]
public System.Nullable<float> SandiaDatabaseParameterB { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_c4")]
public System.Nullable<float> SandiaDatabaseParameterC4 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_c5")]
public System.Nullable<float> SandiaDatabaseParameterC5 { get; set; } = null;
        

[Description("(Amps)")]
[JsonProperty("sandia_database_parameter_ix0")]
public System.Nullable<float> SandiaDatabaseParameterIx0 { get; set; } = null;
        

[Description("(Amps)")]
[JsonProperty("sandia_database_parameter_ixx0")]
public System.Nullable<float> SandiaDatabaseParameterIxx0 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_c6")]
public System.Nullable<float> SandiaDatabaseParameterC6 { get; set; } = null;
        

[Description("(non-dimensional)")]
[JsonProperty("sandia_database_parameter_c7")]
public System.Nullable<float> SandiaDatabaseParameterC7 { get; set; } = null;
    }
    
    [Description(@"Describes a simple set of inputs for an array of photovoltaic (PV) modules as described in the PVWatts software. A series of different PVWatts arrays can be connected to a single electric load center (preferably through an ElectricLoadCenter:Inverter:PVWatts). Array tilt and azimuth can be either specified on this object or taken from a referenced building surface or shading surface. If a surface is specified, the array participates normally in all shading calculations.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class Generator_PVWatts : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[JsonProperty("pvwatts_version")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_PVWatts_PvwattsVersion PvwattsVersion { get; set; } = (Generator_PVWatts_PvwattsVersion)Enum.Parse(typeof(Generator_PVWatts_PvwattsVersion), "_5");
        

[Description("Nameplate rated DC system capacity in watts")]
[JsonProperty("dc_system_capacity")]
public System.Nullable<float> DcSystemCapacity { get; set; } = null;
        

[JsonProperty("module_type")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_PVWatts_ModuleType ModuleType { get; set; } = (Generator_PVWatts_ModuleType)Enum.Parse(typeof(Generator_PVWatts_ModuleType), "Premium");
        

[JsonProperty("array_type")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_PVWatts_ArrayType ArrayType { get; set; } = (Generator_PVWatts_ArrayType)Enum.Parse(typeof(Generator_PVWatts_ArrayType), "FixedOpenRack");
        

[JsonProperty("system_losses")]
public System.Nullable<float> SystemLosses { get; set; } = (System.Nullable<float>)Single.Parse("0.14", CultureInfo.InvariantCulture);
        

[Description("TiltAzimuth - The tilt and azimuth angles are specified in the next two fields. A" +
    "n unshaded array is assumed. Surface - The array geometry (tilt and azimuth) as " +
    "well as shading is determined from surface referenced.")]
[JsonProperty("array_geometry_type")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_PVWatts_ArrayGeometryType ArrayGeometryType { get; set; } = (Generator_PVWatts_ArrayGeometryType)Enum.Parse(typeof(Generator_PVWatts_ArrayGeometryType), "TiltAzimuth");
        

[Description("The tilt angle is the angle from horizontal of the photovoltaic modules in the ar" +
    "ray.")]
[JsonProperty("tilt_angle")]
public System.Nullable<float> TiltAngle { get; set; } = (System.Nullable<float>)Single.Parse("20", CultureInfo.InvariantCulture);
        

[Description("For a fixed array, the azimuth angle is the angle clockwise from true north descr" +
    "ibing the direction that the array faces. For an array with one-axis tracking, t" +
    "he azimuth angle is the angle clockwise from true north of the axis of rotation." +
    "")]
[JsonProperty("azimuth_angle")]
public System.Nullable<float> AzimuthAngle { get; set; } = (System.Nullable<float>)Single.Parse("180", CultureInfo.InvariantCulture);
        

[JsonProperty("surface_name")]
public string SurfaceName { get; set; } = "";
        

[Description("Applies only to arrays with one-axis tracking and is the ratio of module surface " +
    "area to area of the ground or roof occupied by the array.")]
[JsonProperty("ground_coverage_ratio")]
public System.Nullable<float> GroundCoverageRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.4", CultureInfo.InvariantCulture);
    }
    
    public enum Generator_PVWatts_PvwattsVersion
    {
        
        [System.Runtime.Serialization.EnumMember(Value="5")]
        _5 = 0,
    }
    
    public enum Generator_PVWatts_ModuleType
    {
        
        [System.Runtime.Serialization.EnumMember(Value="Premium")]
        Premium = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Standard")]
        Standard = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="ThinFilm")]
        ThinFilm = 2,
    }
    
    public enum Generator_PVWatts_ArrayType
    {
        
        [System.Runtime.Serialization.EnumMember(Value="FixedOpenRack")]
        FixedOpenRack = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="FixedRoofMounted")]
        FixedRoofMounted = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="OneAxis")]
        OneAxis = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="OneAxisBacktracking")]
        OneAxisBacktracking = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="TwoAxis")]
        TwoAxis = 4,
    }
    
    public enum Generator_PVWatts_ArrayGeometryType
    {
        
        [System.Runtime.Serialization.EnumMember(Value="null")]
        Empty = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Surface")]
        Surface = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="TiltAzimuth")]
        TiltAzimuth = 2,
    }
    
    [Description("Electric power inverter to convert from direct current (DC) to alternating curren" +
        "t (AC) in an electric load center that contains Generator:PVWatts objects. It im" +
        "plements the PVWatts inverter performance curves.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class ElectricLoadCenter_Inverter_PVWatts : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[JsonProperty("dc_to_ac_size_ratio")]
public System.Nullable<float> DcToAcSizeRatio { get; set; } = (System.Nullable<float>)Single.Parse("1.1", CultureInfo.InvariantCulture);
        

[JsonProperty("inverter_efficiency")]
public System.Nullable<float> InverterEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.96", CultureInfo.InvariantCulture);
    }
    
    [Description("This generator model is the FC model from IEA Annex 42")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class Generator_FuelCell : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[Description("Enter the name of a Generator:FuelCell:PowerModule object.")]
[JsonProperty("power_module_name")]
public string PowerModuleName { get; set; } = "";
        

[Description("Enter the name of a Generator:FuelCell:AirSupply object.")]
[JsonProperty("air_supply_name")]
public string AirSupplyName { get; set; } = "";
        

[Description("Enter the name of a Generator:FuelSupply object.")]
[JsonProperty("fuel_supply_name")]
public string FuelSupplyName { get; set; } = "";
        

[Description("Enter the name of a Generator:FuelCell:WaterSupply object.")]
[JsonProperty("water_supply_name")]
public string WaterSupplyName { get; set; } = "";
        

[Description("Enter the name of a Generator:FuelCell:AuxiliaryHeater object.")]
[JsonProperty("auxiliary_heater_name")]
public string AuxiliaryHeaterName { get; set; } = "";
        

[Description("Enter the name of a Generator:FuelCell:ExhaustGasToWaterHeatExchanger object.")]
[JsonProperty("heat_exchanger_name")]
public string HeatExchangerName { get; set; } = "";
        

[Description("Enter the name of a Generator:FuelCell:ElectricalStorage object.")]
[JsonProperty("electrical_storage_name")]
public string ElectricalStorageName { get; set; } = "";
        

[Description("Enter the name of a Generator:FuelCell:Inverter object.")]
[JsonProperty("inverter_name")]
public string InverterName { get; set; } = "";
        

[Description("Enter the name of a Generator:FuelCell:StackCooler object. optional, used for PEM" +
    "FC")]
[JsonProperty("stack_cooler_name")]
public string StackCoolerName { get; set; } = "";
    }
    
    [Description(@"Describe the core power module subsystem of a fuel cell power generator. This includes the fuel cell stack, fuel reformer, and whatever ancillary devices are included inside. If the model has multiple FC generators that are of the exact same type, then only one of these objects is needed and all the Generator:FuelCell objects can reference it.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class Generator_FuelCell_PowerModule : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[JsonProperty("efficiency_curve_mode")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelCell_PowerModule_EfficiencyCurveMode EfficiencyCurveMode { get; set; } = (Generator_FuelCell_PowerModule_EfficiencyCurveMode)Enum.Parse(typeof(Generator_FuelCell_PowerModule_EfficiencyCurveMode), "Annex42");
        

[JsonProperty("efficiency_curve_name")]
public string EfficiencyCurveName { get; set; } = "";
        

[Description("This field is not used.")]
[JsonProperty("nominal_efficiency")]
public System.Nullable<float> NominalEfficiency { get; set; } = null;
        

[Description("This field is not used")]
[JsonProperty("nominal_electrical_power")]
public System.Nullable<float> NominalElectricalPower { get; set; } = null;
        

[Description("this is Nstops in SOFC model specification")]
[JsonProperty("number_of_stops_at_start_of_simulation")]
public System.Nullable<float> NumberOfStopsAtStartOfSimulation { get; set; } = null;
        

[Description("this is D in SOFC model specification")]
[JsonProperty("cycling_performance_degradation_coefficient")]
public System.Nullable<float> CyclingPerformanceDegradationCoefficient { get; set; } = null;
        

[JsonProperty("number_of_run_hours_at_beginning_of_simulation")]
public System.Nullable<float> NumberOfRunHoursAtBeginningOfSimulation { get; set; } = null;
        

[Description("this is L in SOFC model specification")]
[JsonProperty("accumulated_run_time_degradation_coefficient")]
public System.Nullable<float> AccumulatedRunTimeDegradationCoefficient { get; set; } = null;
        

[JsonProperty("run_time_degradation_initiation_time_threshold")]
public System.Nullable<float> RunTimeDegradationInitiationTimeThreshold { get; set; } = null;
        

[Description("Maximum rate of change in electrical output [power increasing]")]
[JsonProperty("power_up_transient_limit")]
public System.Nullable<float> PowerUpTransientLimit { get; set; } = null;
        

[Description("Maximum rate of change in electrical output [power decreasing] Enter positive val" +
    "ue for rate of change")]
[JsonProperty("power_down_transient_limit")]
public System.Nullable<float> PowerDownTransientLimit { get; set; } = null;
        

[Description("Time from start up to normal operation")]
[JsonProperty("start_up_time")]
public System.Nullable<float> StartUpTime { get; set; } = null;
        

[JsonProperty("start_up_fuel")]
public System.Nullable<float> StartUpFuel { get; set; } = null;
        

[JsonProperty("start_up_electricity_consumption")]
public System.Nullable<float> StartUpElectricityConsumption { get; set; } = null;
        

[JsonProperty("start_up_electricity_produced")]
public System.Nullable<float> StartUpElectricityProduced { get; set; } = null;
        

[JsonProperty("shut_down_time")]
public System.Nullable<float> ShutDownTime { get; set; } = null;
        

[JsonProperty("shut_down_fuel")]
public System.Nullable<float> ShutDownFuel { get; set; } = null;
        

[JsonProperty("shut_down_electricity_consumption")]
public System.Nullable<float> ShutDownElectricityConsumption { get; set; } = null;
        

[JsonProperty("ancillary_electricity_constant_term")]
public System.Nullable<float> AncillaryElectricityConstantTerm { get; set; } = null;
        

[JsonProperty("ancillary_electricity_linear_term")]
public System.Nullable<float> AncillaryElectricityLinearTerm { get; set; } = null;
        

[JsonProperty("skin_loss_calculation_mode")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelCell_PowerModule_SkinLossCalculationMode SkinLossCalculationMode { get; set; } = (Generator_FuelCell_PowerModule_SkinLossCalculationMode)Enum.Parse(typeof(Generator_FuelCell_PowerModule_SkinLossCalculationMode), "ConstantRate");
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("skin_loss_radiative_fraction")]
public System.Nullable<float> SkinLossRadiativeFraction { get; set; } = null;
        

[JsonProperty("constant_skin_loss_rate")]
public System.Nullable<float> ConstantSkinLossRate { get; set; } = null;
        

[JsonProperty("skin_loss_u_factor_times_area_term")]
public System.Nullable<float> SkinLossUFactorTimesAreaTerm { get; set; } = null;
        

[Description("curve is function of fuel use rate")]
[JsonProperty("skin_loss_quadratic_curve_name")]
public string SkinLossQuadraticCurveName { get; set; } = "";
        

[JsonProperty("dilution_air_flow_rate")]
public System.Nullable<float> DilutionAirFlowRate { get; set; } = null;
        

[JsonProperty("stack_heat_loss_to_dilution_air")]
public System.Nullable<float> StackHeatLossToDilutionAir { get; set; } = null;
        

[JsonProperty("dilution_inlet_air_node_name")]
public string DilutionInletAirNodeName { get; set; } = "";
        

[JsonProperty("dilution_outlet_air_node_name")]
public string DilutionOutletAirNodeName { get; set; } = "";
        

[JsonProperty("minimum_operating_point")]
public System.Nullable<float> MinimumOperatingPoint { get; set; } = null;
        

[JsonProperty("maximum_operating_point")]
public System.Nullable<float> MaximumOperatingPoint { get; set; } = null;
    }
    
    public enum Generator_FuelCell_PowerModule_EfficiencyCurveMode
    {
        
        [System.Runtime.Serialization.EnumMember(Value="Annex42")]
        Annex42 = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Normalized")]
        Normalized = 1,
    }
    
    public enum Generator_FuelCell_PowerModule_SkinLossCalculationMode
    {
        
        [System.Runtime.Serialization.EnumMember(Value="ConstantRate")]
        ConstantRate = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="QuadraticFunctionOfFuelRate")]
        QuadraticFunctionOfFuelRate = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="UAForProcessGasTemperature")]
        UAForProcessGasTemperature = 2,
    }
    
    [Description("Used to define details of the air supply subsystem for a fuel cell power generato" +
        "r.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class Generator_FuelCell_AirSupply : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("blower_power_curve_name")]
public string BlowerPowerCurveName { get; set; } = "";
        

[JsonProperty("blower_heat_loss_factor")]
public System.Nullable<float> BlowerHeatLossFactor { get; set; } = null;
        

[JsonProperty("air_supply_rate_calculation_mode")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelCell_AirSupply_AirSupplyRateCalculationMode AirSupplyRateCalculationMode { get; set; } = (Generator_FuelCell_AirSupply_AirSupplyRateCalculationMode)Enum.Parse(typeof(Generator_FuelCell_AirSupply_AirSupplyRateCalculationMode), "AirRatiobyStoics");
        

[Description("This is the excess air \"stoics\" the value entered is incremented by 1 in the mode" +
    "l.")]
[JsonProperty("stoichiometric_ratio")]
public System.Nullable<float> StoichiometricRatio { get; set; } = null;
        

[JsonProperty("air_rate_function_of_electric_power_curve_name")]
public string AirRateFunctionOfElectricPowerCurveName { get; set; } = "";
        

[JsonProperty("air_rate_air_temperature_coefficient")]
public System.Nullable<float> AirRateAirTemperatureCoefficient { get; set; } = null;
        

[JsonProperty("air_rate_function_of_fuel_rate_curve_name")]
public string AirRateFunctionOfFuelRateCurveName { get; set; } = "";
        

[JsonProperty("air_intake_heat_recovery_mode")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelCell_AirSupply_AirIntakeHeatRecoveryMode AirIntakeHeatRecoveryMode { get; set; } = (Generator_FuelCell_AirSupply_AirIntakeHeatRecoveryMode)Enum.Parse(typeof(Generator_FuelCell_AirSupply_AirIntakeHeatRecoveryMode), "NoRecovery");
        

[JsonProperty("air_supply_constituent_mode")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelCell_AirSupply_AirSupplyConstituentMode AirSupplyConstituentMode { get; set; } = (Generator_FuelCell_AirSupply_AirSupplyConstituentMode)Enum.Parse(typeof(Generator_FuelCell_AirSupply_AirSupplyConstituentMode), "AmbientAir");
        

[JsonProperty("number_of_userdefined_constituents")]
public System.Nullable<float> NumberOfUserdefinedConstituents { get; set; } = null;
        

[JsonProperty("constituent_fractions")]
public string ConstituentFractions { get; set; } = "";
    }
    
    public enum Generator_FuelCell_AirSupply_AirSupplyRateCalculationMode
    {
        
        [System.Runtime.Serialization.EnumMember(Value="AirRatiobyStoics")]
        AirRatiobyStoics = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="QuadraticFunctionofElectricPower")]
        QuadraticFunctionofElectricPower = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="QuadraticFunctionofFuelRate")]
        QuadraticFunctionofFuelRate = 2,
    }
    
    public enum Generator_FuelCell_AirSupply_AirIntakeHeatRecoveryMode
    {
        
        [System.Runtime.Serialization.EnumMember(Value="NoRecovery")]
        NoRecovery = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="RecoverAuxiliaryBurner")]
        RecoverAuxiliaryBurner = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="RecoverBurnerInverterStorage")]
        RecoverBurnerInverterStorage = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="RecoverElectricalStorage")]
        RecoverElectricalStorage = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="RecoverInverter")]
        RecoverInverter = 4,
        
        [System.Runtime.Serialization.EnumMember(Value="RecoverInverterandStorage")]
        RecoverInverterandStorage = 5,
    }
    
    public enum Generator_FuelCell_AirSupply_AirSupplyConstituentMode
    {
        
        [System.Runtime.Serialization.EnumMember(Value="AmbientAir")]
        AmbientAir = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="UserDefinedConstituents")]
        UserDefinedConstituents = 1,
    }
    
    [Description("Used to provide details of the water supply subsystem for a fuel cell power gener" +
        "ator. This water is used for steam reforming of the fuel and is not the same as " +
        "the water used for thermal heat recovery.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class Generator_FuelCell_WaterSupply : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[JsonProperty("reformer_water_flow_rate_function_of_fuel_rate_curve_name")]
public string ReformerWaterFlowRateFunctionOfFuelRateCurveName { get; set; } = "";
        

[JsonProperty("reformer_water_pump_power_function_of_fuel_rate_curve_name")]
public string ReformerWaterPumpPowerFunctionOfFuelRateCurveName { get; set; } = "";
        

[JsonProperty("pump_heat_loss_factor")]
public System.Nullable<float> PumpHeatLossFactor { get; set; } = null;
        

[JsonProperty("water_temperature_modeling_mode")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelCell_WaterSupply_WaterTemperatureModelingMode WaterTemperatureModelingMode { get; set; } = (Generator_FuelCell_WaterSupply_WaterTemperatureModelingMode)Enum.Parse(typeof(Generator_FuelCell_WaterSupply_WaterTemperatureModelingMode), "MainsWaterTemperature");
        

[JsonProperty("water_temperature_reference_node_name")]
public string WaterTemperatureReferenceNodeName { get; set; } = "";
        

[JsonProperty("water_temperature_schedule_name")]
public string WaterTemperatureScheduleName { get; set; } = "";
    }
    
    public enum Generator_FuelCell_WaterSupply_WaterTemperatureModelingMode
    {
        
        [System.Runtime.Serialization.EnumMember(Value="MainsWaterTemperature")]
        MainsWaterTemperature = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="TemperatureFromAirNode")]
        TemperatureFromAirNode = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="TemperatureFromSchedule")]
        TemperatureFromSchedule = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="TemperatureFromWaterNode")]
        TemperatureFromWaterNode = 3,
    }
    
    [Description(@"Intended for modeling an auxiliary heater for a fuel cell power generator, however this portion of the model is not yet available. The program still requires one of these objects be included even though the data are not yet used (so that internal data structures can be allocated).")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class Generator_FuelCell_AuxiliaryHeater : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[JsonProperty("excess_air_ratio")]
public System.Nullable<float> ExcessAirRatio { get; set; } = null;
        

[JsonProperty("ancillary_power_constant_term")]
public System.Nullable<float> AncillaryPowerConstantTerm { get; set; } = null;
        

[JsonProperty("ancillary_power_linear_term")]
public System.Nullable<float> AncillaryPowerLinearTerm { get; set; } = null;
        

[JsonProperty("skin_loss_u_factor_times_area_value")]
public System.Nullable<float> SkinLossUFactorTimesAreaValue { get; set; } = null;
        

[JsonProperty("skin_loss_destination")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelCell_AuxiliaryHeater_SkinLossDestination SkinLossDestination { get; set; } = (Generator_FuelCell_AuxiliaryHeater_SkinLossDestination)Enum.Parse(typeof(Generator_FuelCell_AuxiliaryHeater_SkinLossDestination), "AirInletForFuelCell");
        

[JsonProperty("zone_name_to_receive_skin_losses")]
public string ZoneNameToReceiveSkinLosses { get; set; } = "";
        

[JsonProperty("heating_capacity_units")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelCell_AuxiliaryHeater_HeatingCapacityUnits HeatingCapacityUnits { get; set; } = (Generator_FuelCell_AuxiliaryHeater_HeatingCapacityUnits)Enum.Parse(typeof(Generator_FuelCell_AuxiliaryHeater_HeatingCapacityUnits), "Watts");
        

[JsonProperty("maximum_heating_capacity_in_watts")]
public System.Nullable<float> MaximumHeatingCapacityInWatts { get; set; } = null;
        

[JsonProperty("minimum_heating_capacity_in_watts")]
public System.Nullable<float> MinimumHeatingCapacityInWatts { get; set; } = null;
        

[JsonProperty("maximum_heating_capacity_in_kmol_per_second")]
public System.Nullable<float> MaximumHeatingCapacityInKmolPerSecond { get; set; } = null;
        

[JsonProperty("minimum_heating_capacity_in_kmol_per_second")]
public System.Nullable<float> MinimumHeatingCapacityInKmolPerSecond { get; set; } = null;
    }
    
    public enum Generator_FuelCell_AuxiliaryHeater_SkinLossDestination
    {
        
        [System.Runtime.Serialization.EnumMember(Value="AirInletForFuelCell")]
        AirInletForFuelCell = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="SurroundingZone")]
        SurroundingZone = 1,
    }
    
    public enum Generator_FuelCell_AuxiliaryHeater_HeatingCapacityUnits
    {
        
        [System.Runtime.Serialization.EnumMember(Value="Watts")]
        Watts = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="kmol/s")]
        Kmols = 1,
    }
    
    [Description("Describes the exhaust gas heat exchanger subsystem of a fuel cell power generator" +
        " used to recovery thermal energy")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class Generator_FuelCell_ExhaustGasToWaterHeatExchanger : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_water_inlet_node_name")]
public string HeatRecoveryWaterInletNodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_water_outlet_node_name")]
public string HeatRecoveryWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_water_maximum_flow_rate")]
public System.Nullable<float> HeatRecoveryWaterMaximumFlowRate { get; set; } = null;
        

[JsonProperty("exhaust_outlet_air_node_name")]
public string ExhaustOutletAirNodeName { get; set; } = "";
        

[JsonProperty("heat_exchanger_calculation_method")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelCell_ExhaustGasToWaterHeatExchanger_HeatExchangerCalculationMethod HeatExchangerCalculationMethod { get; set; } = (Generator_FuelCell_ExhaustGasToWaterHeatExchanger_HeatExchangerCalculationMethod)Enum.Parse(typeof(Generator_FuelCell_ExhaustGasToWaterHeatExchanger_HeatExchangerCalculationMethod), "Condensing");
        

[JsonProperty("method_1_heat_exchanger_effectiveness")]
public System.Nullable<float> Method1HeatExchangerEffectiveness { get; set; } = null;
        

[JsonProperty("method_2_parameter_hxs0")]
public System.Nullable<float> Method2ParameterHxs0 { get; set; } = null;
        

[JsonProperty("method_2_parameter_hxs1")]
public System.Nullable<float> Method2ParameterHxs1 { get; set; } = null;
        

[JsonProperty("method_2_parameter_hxs2")]
public System.Nullable<float> Method2ParameterHxs2 { get; set; } = null;
        

[JsonProperty("method_2_parameter_hxs3")]
public System.Nullable<float> Method2ParameterHxs3 { get; set; } = null;
        

[JsonProperty("method_2_parameter_hxs4")]
public System.Nullable<float> Method2ParameterHxs4 { get; set; } = null;
        

[JsonProperty("method_3_h0gas_coefficient")]
public System.Nullable<float> Method3H0gasCoefficient { get; set; } = null;
        

[JsonProperty("method_3_ndotgasref_coefficient")]
public System.Nullable<float> Method3NdotgasrefCoefficient { get; set; } = null;
        

[JsonProperty("method_3_n_coefficient")]
public System.Nullable<float> Method3NCoefficient { get; set; } = null;
        

[JsonProperty("method_3_gas_area")]
public System.Nullable<float> Method3GasArea { get; set; } = null;
        

[JsonProperty("method_3_h0_water_coefficient")]
public System.Nullable<float> Method3H0WaterCoefficient { get; set; } = null;
        

[JsonProperty("method_3_n_dot_water_ref_coefficient")]
public System.Nullable<float> Method3NDotWaterRefCoefficient { get; set; } = null;
        

[JsonProperty("method_3_m_coefficient")]
public System.Nullable<float> Method3MCoefficient { get; set; } = null;
        

[JsonProperty("method_3_water_area")]
public System.Nullable<float> Method3WaterArea { get; set; } = null;
        

[JsonProperty("method_3_f_adjustment_factor")]
public System.Nullable<float> Method3FAdjustmentFactor { get; set; } = null;
        

[JsonProperty("method_4_hxl1_coefficient")]
public System.Nullable<float> Method4Hxl1Coefficient { get; set; } = null;
        

[JsonProperty("method_4_hxl2_coefficient")]
public System.Nullable<float> Method4Hxl2Coefficient { get; set; } = null;
        

[JsonProperty("method_4_condensation_threshold")]
public System.Nullable<float> Method4CondensationThreshold { get; set; } = null;
    }
    
    public enum Generator_FuelCell_ExhaustGasToWaterHeatExchanger_HeatExchangerCalculationMethod
    {
        
        [System.Runtime.Serialization.EnumMember(Value="Condensing")]
        Condensing = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="EmpiricalUAeff")]
        EmpiricalUAeff = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="FixedEffectiveness")]
        FixedEffectiveness = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="FundementalUAeff")]
        FundementalUAeff = 3,
    }
    
    [Description("Used to describe the electrical storage subsystem for a fuel cell power generator" +
        ". The electrical storage model is a very simple \"constrained bucket\" model. Note" +
        " that this electrical storage is embedded within the FC device.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class Generator_FuelCell_ElectricalStorage : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[JsonProperty("choice_of_model")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelCell_ElectricalStorage_ChoiceOfModel ChoiceOfModel { get; set; } = (Generator_FuelCell_ElectricalStorage_ChoiceOfModel)Enum.Parse(typeof(Generator_FuelCell_ElectricalStorage_ChoiceOfModel), "SimpleEfficiencyWithConstraints");
        

[JsonProperty("nominal_charging_energetic_efficiency")]
public System.Nullable<float> NominalChargingEnergeticEfficiency { get; set; } = null;
        

[JsonProperty("nominal_discharging_energetic_efficiency")]
public System.Nullable<float> NominalDischargingEnergeticEfficiency { get; set; } = null;
        

[JsonProperty("simple_maximum_capacity")]
public System.Nullable<float> SimpleMaximumCapacity { get; set; } = null;
        

[JsonProperty("simple_maximum_power_draw")]
public System.Nullable<float> SimpleMaximumPowerDraw { get; set; } = null;
        

[JsonProperty("simple_maximum_power_store")]
public System.Nullable<float> SimpleMaximumPowerStore { get; set; } = null;
        

[JsonProperty("initial_charge_state")]
public System.Nullable<float> InitialChargeState { get; set; } = null;
    }
    
    public enum Generator_FuelCell_ElectricalStorage_ChoiceOfModel
    {
        
        [System.Runtime.Serialization.EnumMember(Value="SimpleEfficiencyWithConstraints")]
        SimpleEfficiencyWithConstraints = 0,
    }
    
    [Description("Used to describe the power condition unit subsystem of a fuel cell power generato" +
        "r. This object models an inverter system contained within a fuel cell system tha" +
        "t converts from direct current (DC) to alternating current (AC).")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class Generator_FuelCell_Inverter : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[JsonProperty("inverter_efficiency_calculation_mode")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelCell_Inverter_InverterEfficiencyCalculationMode InverterEfficiencyCalculationMode { get; set; } = (Generator_FuelCell_Inverter_InverterEfficiencyCalculationMode)Enum.Parse(typeof(Generator_FuelCell_Inverter_InverterEfficiencyCalculationMode), "Constant");
        

[JsonProperty("inverter_efficiency")]
public System.Nullable<float> InverterEfficiency { get; set; } = null;
        

[JsonProperty("efficiency_function_of_dc_power_curve_name")]
public string EfficiencyFunctionOfDcPowerCurveName { get; set; } = "";
    }
    
    public enum Generator_FuelCell_Inverter_InverterEfficiencyCalculationMode
    {
        
        [System.Runtime.Serialization.EnumMember(Value="Constant")]
        Constant = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Quadratic")]
        Quadratic = 1,
    }
    
    [Description("This object is optional and is used to define details needed to model the stack c" +
        "ooler on PEMFC.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class Generator_FuelCell_StackCooler : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_water_inlet_node_name")]
public string HeatRecoveryWaterInletNodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_water_outlet_node_name")]
public string HeatRecoveryWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("nominal_stack_temperature")]
public System.Nullable<float> NominalStackTemperature { get; set; } = null;
        

[JsonProperty("actual_stack_temperature")]
public System.Nullable<float> ActualStackTemperature { get; set; } = null;
        

[JsonProperty("coefficient_r0")]
public System.Nullable<float> CoefficientR0 { get; set; } = null;
        

[JsonProperty("coefficient_r1")]
public System.Nullable<float> CoefficientR1 { get; set; } = null;
        

[JsonProperty("coefficient_r2")]
public System.Nullable<float> CoefficientR2 { get; set; } = null;
        

[JsonProperty("coefficient_r3")]
public System.Nullable<float> CoefficientR3 { get; set; } = null;
        

[JsonProperty("stack_coolant_flow_rate")]
public System.Nullable<float> StackCoolantFlowRate { get; set; } = null;
        

[JsonProperty("stack_cooler_u_factor_times_area_value")]
public System.Nullable<float> StackCoolerUFactorTimesAreaValue { get; set; } = null;
        

[JsonProperty("fs_cogen_adjustment_factor")]
public System.Nullable<float> FsCogenAdjustmentFactor { get; set; } = null;
        

[JsonProperty("stack_cogeneration_exchanger_area")]
public System.Nullable<float> StackCogenerationExchangerArea { get; set; } = null;
        

[JsonProperty("stack_cogeneration_exchanger_nominal_flow_rate")]
public System.Nullable<float> StackCogenerationExchangerNominalFlowRate { get; set; } = null;
        

[JsonProperty("stack_cogeneration_exchanger_nominal_heat_transfer_coefficient")]
public System.Nullable<float> StackCogenerationExchangerNominalHeatTransferCoefficient { get; set; } = null;
        

[JsonProperty("stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent")]
public System.Nullable<float> StackCogenerationExchangerNominalHeatTransferCoefficientExponent { get; set; } = null;
        

[JsonProperty("stack_cooler_pump_power")]
public System.Nullable<float> StackCoolerPumpPower { get; set; } = null;
        

[JsonProperty("stack_cooler_pump_heat_loss_fraction")]
public System.Nullable<float> StackCoolerPumpHeatLossFraction { get; set; } = null;
        

[JsonProperty("stack_air_cooler_fan_coefficient_f0")]
public System.Nullable<float> StackAirCoolerFanCoefficientF0 { get; set; } = null;
        

[JsonProperty("stack_air_cooler_fan_coefficient_f1")]
public System.Nullable<float> StackAirCoolerFanCoefficientF1 { get; set; } = null;
        

[JsonProperty("stack_air_cooler_fan_coefficient_f2")]
public System.Nullable<float> StackAirCoolerFanCoefficientF2 { get; set; } = null;
    }
    
    [Description(@"Small-scale combined heat and power (micro CHP) electric generator using the model developed by IEA/ECBCS Annex 42 see www.cogen-sim.net. The model was developed for both internal combustion and Stirling cycle engines, but might be used for other types of residential CHP devices.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class Generator_MicroCHP : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[Description("Enter the name of a Generator:MicroCHP:NonNormalizedParameters object.")]
[JsonProperty("performance_parameters_name")]
public string PerformanceParametersName { get; set; } = "";
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("cooling_water_inlet_node_name")]
public string CoolingWaterInletNodeName { get; set; } = "";
        

[JsonProperty("cooling_water_outlet_node_name")]
public string CoolingWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Enter the name of a Generator:FuelSupply object.")]
[JsonProperty("generator_fuel_supply_name")]
public string GeneratorFuelSupplyName { get; set; } = "";
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
    }
    
    [Description("This object is referenced by a Generator:MicroCHP object and provides the non-nor" +
        "malized parameters for the MicroCHP generator model.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class Generator_MicroCHP_NonNormalizedParameters : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[JsonProperty("maximum_electric_power")]
public System.Nullable<float> MaximumElectricPower { get; set; } = null;
        

[JsonProperty("minimum_electric_power")]
public System.Nullable<float> MinimumElectricPower { get; set; } = null;
        

[JsonProperty("minimum_cooling_water_flow_rate")]
public System.Nullable<float> MinimumCoolingWaterFlowRate { get; set; } = null;
        

[JsonProperty("maximum_cooling_water_temperature")]
public System.Nullable<float> MaximumCoolingWaterTemperature { get; set; } = null;
        

[Description("TriQuadratic")]
[JsonProperty("electrical_efficiency_curve_name")]
public string ElectricalEfficiencyCurveName { get; set; } = "";
        

[Description("TriQuadratic")]
[JsonProperty("thermal_efficiency_curve_name")]
public string ThermalEfficiencyCurveName { get; set; } = "";
        

[JsonProperty("cooling_water_flow_rate_mode")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_MicroCHP_NonNormalizedParameters_CoolingWaterFlowRateMode CoolingWaterFlowRateMode { get; set; } = (Generator_MicroCHP_NonNormalizedParameters_CoolingWaterFlowRateMode)Enum.Parse(typeof(Generator_MicroCHP_NonNormalizedParameters_CoolingWaterFlowRateMode), "InternalControl");
        

[JsonProperty("cooling_water_flow_rate_curve_name")]
public string CoolingWaterFlowRateCurveName { get; set; } = "";
        

[JsonProperty("air_flow_rate_curve_name")]
public string AirFlowRateCurveName { get; set; } = "";
        

[JsonProperty("maximum_net_electrical_power_rate_of_change")]
public System.Nullable<float> MaximumNetElectricalPowerRateOfChange { get; set; } = null;
        

[JsonProperty("maximum_fuel_flow_rate_of_change")]
public System.Nullable<float> MaximumFuelFlowRateOfChange { get; set; } = null;
        

[JsonProperty("heat_exchanger_u_factor_times_area_value")]
public System.Nullable<float> HeatExchangerUFactorTimesAreaValue { get; set; } = null;
        

[JsonProperty("skin_loss_u_factor_times_area_value")]
public System.Nullable<float> SkinLossUFactorTimesAreaValue { get; set; } = null;
        

[JsonProperty("skin_loss_radiative_fraction")]
public System.Nullable<float> SkinLossRadiativeFraction { get; set; } = null;
        

[JsonProperty("aggregated_thermal_mass_of_energy_conversion_portion_of_generator")]
public System.Nullable<float> AggregatedThermalMassOfEnergyConversionPortionOfGenerator { get; set; } = null;
        

[JsonProperty("aggregated_thermal_mass_of_heat_recovery_portion_of_generator")]
public System.Nullable<float> AggregatedThermalMassOfHeatRecoveryPortionOfGenerator { get; set; } = null;
        

[JsonProperty("standby_power")]
public System.Nullable<float> StandbyPower { get; set; } = null;
        

[Description("Stirling engines use Nominal Engine Temperature Internal combustion engines use T" +
    "ime Delay")]
[JsonProperty("warm_up_mode")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_MicroCHP_NonNormalizedParameters_WarmUpMode WarmUpMode { get; set; } = (Generator_MicroCHP_NonNormalizedParameters_WarmUpMode)Enum.Parse(typeof(Generator_MicroCHP_NonNormalizedParameters_WarmUpMode), "NominalEngineTemperature");
        

[JsonProperty("warm_up_fuel_flow_rate_coefficient")]
public System.Nullable<float> WarmUpFuelFlowRateCoefficient { get; set; } = null;
        

[JsonProperty("nominal_engine_operating_temperature")]
public System.Nullable<float> NominalEngineOperatingTemperature { get; set; } = null;
        

[JsonProperty("warm_up_power_coefficient")]
public System.Nullable<float> WarmUpPowerCoefficient { get; set; } = null;
        

[JsonProperty("warm_up_fuel_flow_rate_limit_ratio")]
public System.Nullable<float> WarmUpFuelFlowRateLimitRatio { get; set; } = null;
        

[JsonProperty("warm_up_delay_time")]
public System.Nullable<float> WarmUpDelayTime { get; set; } = null;
        

[JsonProperty("cool_down_power")]
public System.Nullable<float> CoolDownPower { get; set; } = null;
        

[JsonProperty("cool_down_delay_time")]
public System.Nullable<float> CoolDownDelayTime { get; set; } = null;
        

[JsonProperty("restart_mode")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_MicroCHP_NonNormalizedParameters_RestartMode RestartMode { get; set; } = (Generator_MicroCHP_NonNormalizedParameters_RestartMode)Enum.Parse(typeof(Generator_MicroCHP_NonNormalizedParameters_RestartMode), "MandatoryCoolDown");
    }
    
    public enum Generator_MicroCHP_NonNormalizedParameters_CoolingWaterFlowRateMode
    {
        
        [System.Runtime.Serialization.EnumMember(Value="InternalControl")]
        InternalControl = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="PlantControl")]
        PlantControl = 1,
    }
    
    public enum Generator_MicroCHP_NonNormalizedParameters_WarmUpMode
    {
        
        [System.Runtime.Serialization.EnumMember(Value="NominalEngineTemperature")]
        NominalEngineTemperature = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="TimeDelay")]
        TimeDelay = 1,
    }
    
    public enum Generator_MicroCHP_NonNormalizedParameters_RestartMode
    {
        
        [System.Runtime.Serialization.EnumMember(Value="MandatoryCoolDown")]
        MandatoryCoolDown = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="OptionalCoolDown")]
        OptionalCoolDown = 1,
    }
    
    [Description("Used only with Generator:FuelCell and Generator:MicroCHP")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class Generator_FuelSupply : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[JsonProperty("fuel_temperature_modeling_mode")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelSupply_FuelTemperatureModelingMode FuelTemperatureModelingMode { get; set; } = (Generator_FuelSupply_FuelTemperatureModelingMode)Enum.Parse(typeof(Generator_FuelSupply_FuelTemperatureModelingMode), "Scheduled");
        

[JsonProperty("fuel_temperature_reference_node_name")]
public string FuelTemperatureReferenceNodeName { get; set; } = "";
        

[JsonProperty("fuel_temperature_schedule_name")]
public string FuelTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("compressor_power_multiplier_function_of_fuel_rate_curve_name")]
public string CompressorPowerMultiplierFunctionOfFuelRateCurveName { get; set; } = "";
        

[JsonProperty("compressor_heat_loss_factor")]
public System.Nullable<float> CompressorHeatLossFactor { get; set; } = null;
        

[JsonProperty("fuel_type")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelSupply_FuelType FuelType { get; set; } = (Generator_FuelSupply_FuelType)Enum.Parse(typeof(Generator_FuelSupply_FuelType), "GaseousConstituents");
        

[JsonProperty("liquid_generic_fuel_lower_heating_value")]
public System.Nullable<float> LiquidGenericFuelLowerHeatingValue { get; set; } = null;
        

[JsonProperty("liquid_generic_fuel_higher_heating_value")]
public System.Nullable<float> LiquidGenericFuelHigherHeatingValue { get; set; } = null;
        

[JsonProperty("liquid_generic_fuel_molecular_weight")]
public System.Nullable<float> LiquidGenericFuelMolecularWeight { get; set; } = null;
        

[JsonProperty("liquid_generic_fuel_co2_emission_factor")]
public System.Nullable<float> LiquidGenericFuelCo2EmissionFactor { get; set; } = null;
        

[JsonProperty("number_of_constituents_in_gaseous_constituent_fuel_supply")]
public System.Nullable<float> NumberOfConstituentsInGaseousConstituentFuelSupply { get; set; } = null;
        

[JsonProperty("constituent_1_name")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelSupply_Constituent1Name Constituent1Name { get; set; } = (Generator_FuelSupply_Constituent1Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent1Name), "Argon");
        

[JsonProperty("constituent_1_molar_fraction")]
public System.Nullable<float> Constituent1MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_2_name")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelSupply_Constituent2Name Constituent2Name { get; set; } = (Generator_FuelSupply_Constituent2Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent2Name), "Argon");
        

[JsonProperty("constituent_2_molar_fraction")]
public System.Nullable<float> Constituent2MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_3_name")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelSupply_Constituent3Name Constituent3Name { get; set; } = (Generator_FuelSupply_Constituent3Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent3Name), "Argon");
        

[JsonProperty("constituent_3_molar_fraction")]
public System.Nullable<float> Constituent3MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_4_name")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelSupply_Constituent4Name Constituent4Name { get; set; } = (Generator_FuelSupply_Constituent4Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent4Name), "Argon");
        

[JsonProperty("constituent_4_molar_fraction")]
public System.Nullable<float> Constituent4MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_5_name")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelSupply_Constituent5Name Constituent5Name { get; set; } = (Generator_FuelSupply_Constituent5Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent5Name), "Argon");
        

[JsonProperty("constituent_5_molar_fraction")]
public System.Nullable<float> Constituent5MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_6_name")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelSupply_Constituent6Name Constituent6Name { get; set; } = (Generator_FuelSupply_Constituent6Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent6Name), "Argon");
        

[JsonProperty("constituent_6_molar_fraction")]
public System.Nullable<float> Constituent6MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_7_name")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelSupply_Constituent7Name Constituent7Name { get; set; } = (Generator_FuelSupply_Constituent7Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent7Name), "Butane");
        

[JsonProperty("constituent_7_molar_fraction")]
public System.Nullable<float> Constituent7MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_8_name")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelSupply_Constituent8Name Constituent8Name { get; set; } = (Generator_FuelSupply_Constituent8Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent8Name), "Argon");
        

[JsonProperty("constituent_8_molar_fraction")]
public System.Nullable<float> Constituent8MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_9_name")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelSupply_Constituent9Name Constituent9Name { get; set; } = (Generator_FuelSupply_Constituent9Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent9Name), "Argon");
        

[JsonProperty("constituent_9_molar_fraction")]
public System.Nullable<float> Constituent9MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_10_name")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelSupply_Constituent10Name Constituent10Name { get; set; } = (Generator_FuelSupply_Constituent10Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent10Name), "Argon");
        

[JsonProperty("constituent_10_molar_fraction")]
public System.Nullable<float> Constituent10MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_11_name")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelSupply_Constituent11Name Constituent11Name { get; set; } = (Generator_FuelSupply_Constituent11Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent11Name), "Argon");
        

[JsonProperty("constituent_11_molar_fraction")]
public System.Nullable<float> Constituent11MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_12_name")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_FuelSupply_Constituent12Name Constituent12Name { get; set; } = (Generator_FuelSupply_Constituent12Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent12Name), "Argon");
        

[JsonProperty("constituent_12_molar_fraction")]
public System.Nullable<float> Constituent12MolarFraction { get; set; } = null;
    }
    
    public enum Generator_FuelSupply_FuelTemperatureModelingMode
    {
        
        [System.Runtime.Serialization.EnumMember(Value="Scheduled")]
        Scheduled = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="TemperatureFromAirNode")]
        TemperatureFromAirNode = 1,
    }
    
    public enum Generator_FuelSupply_FuelType
    {
        
        [System.Runtime.Serialization.EnumMember(Value="GaseousConstituents")]
        GaseousConstituents = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="LiquidGeneric")]
        LiquidGeneric = 1,
    }
    
    public enum Generator_FuelSupply_Constituent1Name
    {
        
        [System.Runtime.Serialization.EnumMember(Value="Argon")]
        Argon = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Butane")]
        Butane = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="CarbonDioxide")]
        CarbonDioxide = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethane")]
        Ethane = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethanol")]
        Ethanol = 4,
        
        [System.Runtime.Serialization.EnumMember(Value="Hexane")]
        Hexane = 5,
        
        [System.Runtime.Serialization.EnumMember(Value="Hydrogen")]
        Hydrogen = 6,
        
        [System.Runtime.Serialization.EnumMember(Value="Methane")]
        Methane = 7,
        
        [System.Runtime.Serialization.EnumMember(Value="Methanol")]
        Methanol = 8,
        
        [System.Runtime.Serialization.EnumMember(Value="Nitrogen")]
        Nitrogen = 9,
        
        [System.Runtime.Serialization.EnumMember(Value="Oxygen")]
        Oxygen = 10,
        
        [System.Runtime.Serialization.EnumMember(Value="Pentane")]
        Pentane = 11,
        
        [System.Runtime.Serialization.EnumMember(Value="Propane")]
        Propane = 12,
        
        [System.Runtime.Serialization.EnumMember(Value="Water")]
        Water = 13,
    }
    
    public enum Generator_FuelSupply_Constituent2Name
    {
        
        [System.Runtime.Serialization.EnumMember(Value="Argon")]
        Argon = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Butane")]
        Butane = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="CarbonDioxide")]
        CarbonDioxide = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethane")]
        Ethane = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethanol")]
        Ethanol = 4,
        
        [System.Runtime.Serialization.EnumMember(Value="Hexane")]
        Hexane = 5,
        
        [System.Runtime.Serialization.EnumMember(Value="Hydrogen")]
        Hydrogen = 6,
        
        [System.Runtime.Serialization.EnumMember(Value="Methane")]
        Methane = 7,
        
        [System.Runtime.Serialization.EnumMember(Value="Methanol")]
        Methanol = 8,
        
        [System.Runtime.Serialization.EnumMember(Value="Nitrogen")]
        Nitrogen = 9,
        
        [System.Runtime.Serialization.EnumMember(Value="Oxygen")]
        Oxygen = 10,
        
        [System.Runtime.Serialization.EnumMember(Value="Pentane")]
        Pentane = 11,
        
        [System.Runtime.Serialization.EnumMember(Value="Propane")]
        Propane = 12,
        
        [System.Runtime.Serialization.EnumMember(Value="Water")]
        Water = 13,
    }
    
    public enum Generator_FuelSupply_Constituent3Name
    {
        
        [System.Runtime.Serialization.EnumMember(Value="Argon")]
        Argon = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Butane")]
        Butane = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="CarbonDioxide")]
        CarbonDioxide = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethane")]
        Ethane = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethanol")]
        Ethanol = 4,
        
        [System.Runtime.Serialization.EnumMember(Value="Hexane")]
        Hexane = 5,
        
        [System.Runtime.Serialization.EnumMember(Value="Hydrogen")]
        Hydrogen = 6,
        
        [System.Runtime.Serialization.EnumMember(Value="Methane")]
        Methane = 7,
        
        [System.Runtime.Serialization.EnumMember(Value="Methanol")]
        Methanol = 8,
        
        [System.Runtime.Serialization.EnumMember(Value="Nitrogen")]
        Nitrogen = 9,
        
        [System.Runtime.Serialization.EnumMember(Value="Oxygen")]
        Oxygen = 10,
        
        [System.Runtime.Serialization.EnumMember(Value="Pentane")]
        Pentane = 11,
        
        [System.Runtime.Serialization.EnumMember(Value="Propane")]
        Propane = 12,
        
        [System.Runtime.Serialization.EnumMember(Value="Water")]
        Water = 13,
    }
    
    public enum Generator_FuelSupply_Constituent4Name
    {
        
        [System.Runtime.Serialization.EnumMember(Value="Argon")]
        Argon = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Butane")]
        Butane = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="CarbonDioxide")]
        CarbonDioxide = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethane")]
        Ethane = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethanol")]
        Ethanol = 4,
        
        [System.Runtime.Serialization.EnumMember(Value="Hexane")]
        Hexane = 5,
        
        [System.Runtime.Serialization.EnumMember(Value="Hydrogen")]
        Hydrogen = 6,
        
        [System.Runtime.Serialization.EnumMember(Value="Methane")]
        Methane = 7,
        
        [System.Runtime.Serialization.EnumMember(Value="Methanol")]
        Methanol = 8,
        
        [System.Runtime.Serialization.EnumMember(Value="Nitrogen")]
        Nitrogen = 9,
        
        [System.Runtime.Serialization.EnumMember(Value="Oxygen")]
        Oxygen = 10,
        
        [System.Runtime.Serialization.EnumMember(Value="Pentane")]
        Pentane = 11,
        
        [System.Runtime.Serialization.EnumMember(Value="Propane")]
        Propane = 12,
        
        [System.Runtime.Serialization.EnumMember(Value="Water")]
        Water = 13,
    }
    
    public enum Generator_FuelSupply_Constituent5Name
    {
        
        [System.Runtime.Serialization.EnumMember(Value="Argon")]
        Argon = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Butane")]
        Butane = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="CarbonDioxide")]
        CarbonDioxide = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethane")]
        Ethane = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethanol")]
        Ethanol = 4,
        
        [System.Runtime.Serialization.EnumMember(Value="Hexane")]
        Hexane = 5,
        
        [System.Runtime.Serialization.EnumMember(Value="Hydrogen")]
        Hydrogen = 6,
        
        [System.Runtime.Serialization.EnumMember(Value="Methane")]
        Methane = 7,
        
        [System.Runtime.Serialization.EnumMember(Value="Methanol")]
        Methanol = 8,
        
        [System.Runtime.Serialization.EnumMember(Value="Nitrogen")]
        Nitrogen = 9,
        
        [System.Runtime.Serialization.EnumMember(Value="Oxygen")]
        Oxygen = 10,
        
        [System.Runtime.Serialization.EnumMember(Value="Pentane")]
        Pentane = 11,
        
        [System.Runtime.Serialization.EnumMember(Value="Propane")]
        Propane = 12,
        
        [System.Runtime.Serialization.EnumMember(Value="Water")]
        Water = 13,
    }
    
    public enum Generator_FuelSupply_Constituent6Name
    {
        
        [System.Runtime.Serialization.EnumMember(Value="Argon")]
        Argon = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Butane")]
        Butane = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="CarbonDioxide")]
        CarbonDioxide = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethane")]
        Ethane = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethanol")]
        Ethanol = 4,
        
        [System.Runtime.Serialization.EnumMember(Value="Hexane")]
        Hexane = 5,
        
        [System.Runtime.Serialization.EnumMember(Value="Hydrogen")]
        Hydrogen = 6,
        
        [System.Runtime.Serialization.EnumMember(Value="Methane")]
        Methane = 7,
        
        [System.Runtime.Serialization.EnumMember(Value="Methanol")]
        Methanol = 8,
        
        [System.Runtime.Serialization.EnumMember(Value="Nitrogen")]
        Nitrogen = 9,
        
        [System.Runtime.Serialization.EnumMember(Value="Oxygen")]
        Oxygen = 10,
        
        [System.Runtime.Serialization.EnumMember(Value="Pentane")]
        Pentane = 11,
        
        [System.Runtime.Serialization.EnumMember(Value="Propane")]
        Propane = 12,
        
        [System.Runtime.Serialization.EnumMember(Value="Water")]
        Water = 13,
    }
    
    public enum Generator_FuelSupply_Constituent7Name
    {
        
        [System.Runtime.Serialization.EnumMember(Value="Butane")]
        Butane = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethane")]
        Ethane = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethanol")]
        Ethanol = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="Hexane")]
        Hexane = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="Hydrogen")]
        Hydrogen = 4,
        
        [System.Runtime.Serialization.EnumMember(Value="Methane")]
        Methane = 5,
        
        [System.Runtime.Serialization.EnumMember(Value="Methanol")]
        Methanol = 6,
        
        [System.Runtime.Serialization.EnumMember(Value="Pentane")]
        Pentane = 7,
        
        [System.Runtime.Serialization.EnumMember(Value="Propane")]
        Propane = 8,
    }
    
    public enum Generator_FuelSupply_Constituent8Name
    {
        
        [System.Runtime.Serialization.EnumMember(Value="Argon")]
        Argon = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Butane")]
        Butane = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="CarbonDioxide")]
        CarbonDioxide = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethane")]
        Ethane = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethanol")]
        Ethanol = 4,
        
        [System.Runtime.Serialization.EnumMember(Value="Hexane")]
        Hexane = 5,
        
        [System.Runtime.Serialization.EnumMember(Value="Hydrogen")]
        Hydrogen = 6,
        
        [System.Runtime.Serialization.EnumMember(Value="Methane")]
        Methane = 7,
        
        [System.Runtime.Serialization.EnumMember(Value="Methanol")]
        Methanol = 8,
        
        [System.Runtime.Serialization.EnumMember(Value="Nitrogen")]
        Nitrogen = 9,
        
        [System.Runtime.Serialization.EnumMember(Value="Oxygen")]
        Oxygen = 10,
        
        [System.Runtime.Serialization.EnumMember(Value="Pentane")]
        Pentane = 11,
        
        [System.Runtime.Serialization.EnumMember(Value="Propane")]
        Propane = 12,
        
        [System.Runtime.Serialization.EnumMember(Value="Water")]
        Water = 13,
    }
    
    public enum Generator_FuelSupply_Constituent9Name
    {
        
        [System.Runtime.Serialization.EnumMember(Value="Argon")]
        Argon = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Butane")]
        Butane = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="CarbonDioxide")]
        CarbonDioxide = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethane")]
        Ethane = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethanol")]
        Ethanol = 4,
        
        [System.Runtime.Serialization.EnumMember(Value="Hexane")]
        Hexane = 5,
        
        [System.Runtime.Serialization.EnumMember(Value="Hydrogen")]
        Hydrogen = 6,
        
        [System.Runtime.Serialization.EnumMember(Value="Methane")]
        Methane = 7,
        
        [System.Runtime.Serialization.EnumMember(Value="Methanol")]
        Methanol = 8,
        
        [System.Runtime.Serialization.EnumMember(Value="Nitrogen")]
        Nitrogen = 9,
        
        [System.Runtime.Serialization.EnumMember(Value="Oxygen")]
        Oxygen = 10,
        
        [System.Runtime.Serialization.EnumMember(Value="Pentane")]
        Pentane = 11,
        
        [System.Runtime.Serialization.EnumMember(Value="Propane")]
        Propane = 12,
        
        [System.Runtime.Serialization.EnumMember(Value="Water")]
        Water = 13,
    }
    
    public enum Generator_FuelSupply_Constituent10Name
    {
        
        [System.Runtime.Serialization.EnumMember(Value="Argon")]
        Argon = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Butane")]
        Butane = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="CarbonDioxide")]
        CarbonDioxide = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethane")]
        Ethane = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethanol")]
        Ethanol = 4,
        
        [System.Runtime.Serialization.EnumMember(Value="Hexane")]
        Hexane = 5,
        
        [System.Runtime.Serialization.EnumMember(Value="Hydrogen")]
        Hydrogen = 6,
        
        [System.Runtime.Serialization.EnumMember(Value="Methane")]
        Methane = 7,
        
        [System.Runtime.Serialization.EnumMember(Value="Methanol")]
        Methanol = 8,
        
        [System.Runtime.Serialization.EnumMember(Value="Nitrogen")]
        Nitrogen = 9,
        
        [System.Runtime.Serialization.EnumMember(Value="Oxygen")]
        Oxygen = 10,
        
        [System.Runtime.Serialization.EnumMember(Value="Pentane")]
        Pentane = 11,
        
        [System.Runtime.Serialization.EnumMember(Value="Propane")]
        Propane = 12,
        
        [System.Runtime.Serialization.EnumMember(Value="Water")]
        Water = 13,
    }
    
    public enum Generator_FuelSupply_Constituent11Name
    {
        
        [System.Runtime.Serialization.EnumMember(Value="Argon")]
        Argon = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Butane")]
        Butane = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="CarbonDioxide")]
        CarbonDioxide = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethane")]
        Ethane = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethanol")]
        Ethanol = 4,
        
        [System.Runtime.Serialization.EnumMember(Value="Hexane")]
        Hexane = 5,
        
        [System.Runtime.Serialization.EnumMember(Value="Hydrogen")]
        Hydrogen = 6,
        
        [System.Runtime.Serialization.EnumMember(Value="Methane")]
        Methane = 7,
        
        [System.Runtime.Serialization.EnumMember(Value="Methanol")]
        Methanol = 8,
        
        [System.Runtime.Serialization.EnumMember(Value="Nitrogen")]
        Nitrogen = 9,
        
        [System.Runtime.Serialization.EnumMember(Value="Oxygen")]
        Oxygen = 10,
        
        [System.Runtime.Serialization.EnumMember(Value="Pentane")]
        Pentane = 11,
        
        [System.Runtime.Serialization.EnumMember(Value="Propane")]
        Propane = 12,
        
        [System.Runtime.Serialization.EnumMember(Value="Water")]
        Water = 13,
    }
    
    public enum Generator_FuelSupply_Constituent12Name
    {
        
        [System.Runtime.Serialization.EnumMember(Value="Argon")]
        Argon = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Butane")]
        Butane = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="CarbonDioxide")]
        CarbonDioxide = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethane")]
        Ethane = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="Ethanol")]
        Ethanol = 4,
        
        [System.Runtime.Serialization.EnumMember(Value="Hexane")]
        Hexane = 5,
        
        [System.Runtime.Serialization.EnumMember(Value="Hydrogen")]
        Hydrogen = 6,
        
        [System.Runtime.Serialization.EnumMember(Value="Methane")]
        Methane = 7,
        
        [System.Runtime.Serialization.EnumMember(Value="Methanol")]
        Methanol = 8,
        
        [System.Runtime.Serialization.EnumMember(Value="Nitrogen")]
        Nitrogen = 9,
        
        [System.Runtime.Serialization.EnumMember(Value="Oxygen")]
        Oxygen = 10,
        
        [System.Runtime.Serialization.EnumMember(Value="Pentane")]
        Pentane = 11,
        
        [System.Runtime.Serialization.EnumMember(Value="Propane")]
        Propane = 12,
        
        [System.Runtime.Serialization.EnumMember(Value="Water")]
        Water = 13,
    }
    
    [Description("Wind turbine generator.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class Generator_WindTurbine : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("allowed values are: Horizontal Axis Wind Turbine or Vertical Axis Wind Turbine")]
[JsonProperty("rotor_type")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_WindTurbine_RotorType RotorType { get; set; } = (Generator_WindTurbine_RotorType)Enum.Parse(typeof(Generator_WindTurbine_RotorType), "HorizontalAxisWindTurbine");
        

[Description("Constant power output is obtained in the last three control types when the wind s" +
    "peed exceeds the rated wind speed. allowed values are: Fixed Speed Fixed Pitch, " +
    "Fixed Speed Variable Pitch, Variable Speed Fixed Pitch or Variable Speed Variabl" +
    "e Pitch")]
[JsonProperty("power_control")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_WindTurbine_PowerControl PowerControl { get; set; } = (Generator_WindTurbine_PowerControl)Enum.Parse(typeof(Generator_WindTurbine_PowerControl), "VariableSpeedVariablePitch");
        

[JsonProperty("rated_rotor_speed")]
public System.Nullable<float> RatedRotorSpeed { get; set; } = null;
        

[Description("This field is the diameter of the perpendicular circle of the Vertical Axis Wind " +
    "Turbine system from the upright pole on the ground.")]
[JsonProperty("rotor_diameter")]
public System.Nullable<float> RotorDiameter { get; set; } = null;
        

[Description("This field is the height of the hub for the Horizontal Axis Wind Turbines and of " +
    "the pole for the Vertical Axis Wind Turbines.")]
[JsonProperty("overall_height")]
public System.Nullable<float> OverallHeight { get; set; } = null;
        

[JsonProperty("number_of_blades")]
public System.Nullable<float> NumberOfBlades { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description("This field is the nominal power at the rated wind speed. Users should input maxim" +
    "um power in case of Fixed Speed Fixed Pitch control type.")]
[JsonProperty("rated_power")]
public System.Nullable<float> RatedPower { get; set; } = null;
        

[JsonProperty("rated_wind_speed")]
public System.Nullable<float> RatedWindSpeed { get; set; } = null;
        

[JsonProperty("cut_in_wind_speed")]
public System.Nullable<float> CutInWindSpeed { get; set; } = null;
        

[JsonProperty("cut_out_wind_speed")]
public System.Nullable<float> CutOutWindSpeed { get; set; } = null;
        

[JsonProperty("fraction_system_efficiency")]
public System.Nullable<float> FractionSystemEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.835", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_tip_speed_ratio")]
public System.Nullable<float> MaximumTipSpeedRatio { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[Description("This field should be input if the rotor type is Horizontal Axis Wind Turbine")]
[JsonProperty("maximum_power_coefficient")]
public System.Nullable<float> MaximumPowerCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0.25", CultureInfo.InvariantCulture);
        

[JsonProperty("annual_local_average_wind_speed")]
public System.Nullable<float> AnnualLocalAverageWindSpeed { get; set; } = null;
        

[JsonProperty("height_for_local_average_wind_speed")]
public System.Nullable<float> HeightForLocalAverageWindSpeed { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[JsonProperty("blade_chord_area")]
public System.Nullable<float> BladeChordArea { get; set; } = null;
        

[Description("This field is only for Vertical Axis Wind Turbine.. The user must input this fiel" +
    "d if the rotor type is Vertical Axis Wind Turbine.")]
[JsonProperty("blade_drag_coefficient")]
public System.Nullable<float> BladeDragCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("This field is only for Vertical Axis Wind Turbine.. The user must input this fiel" +
    "d if the rotor type is Vertical Axis Wind Turbine.")]
[JsonProperty("blade_lift_coefficient")]
public System.Nullable<float> BladeLiftCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0.05", CultureInfo.InvariantCulture);
        

[Description(@"This field is only available for Horizontal Axis Wind Turbine. The user should input all six parameters so that the analytic approximation is assumed. The simple approximation will be assumed, if any field C1 through C6 is not input. Leave this field blank, if the manufacturer's data is unavailable so that the simple approximation will be assumed.")]
[JsonProperty("power_coefficient_c1")]
public System.Nullable<float> PowerCoefficientC1 { get; set; } = (System.Nullable<float>)Single.Parse("0.5176", CultureInfo.InvariantCulture);
        

[JsonProperty("power_coefficient_c2")]
public System.Nullable<float> PowerCoefficientC2 { get; set; } = (System.Nullable<float>)Single.Parse("116", CultureInfo.InvariantCulture);
        

[JsonProperty("power_coefficient_c3")]
public System.Nullable<float> PowerCoefficientC3 { get; set; } = (System.Nullable<float>)Single.Parse("0.4", CultureInfo.InvariantCulture);
        

[JsonProperty("power_coefficient_c4")]
public System.Nullable<float> PowerCoefficientC4 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("power_coefficient_c5")]
public System.Nullable<float> PowerCoefficientC5 { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[JsonProperty("power_coefficient_c6")]
public System.Nullable<float> PowerCoefficientC6 { get; set; } = (System.Nullable<float>)Single.Parse("21", CultureInfo.InvariantCulture);
    }
    
    public enum Generator_WindTurbine_RotorType
    {
        
        [System.Runtime.Serialization.EnumMember(Value="null")]
        Empty = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="HorizontalAxisWindTurbine")]
        HorizontalAxisWindTurbine = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="VerticalAxisWindTurbine")]
        VerticalAxisWindTurbine = 2,
    }
    
    public enum Generator_WindTurbine_PowerControl
    {
        
        [System.Runtime.Serialization.EnumMember(Value="null")]
        Empty = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="FixedSpeedFixedPitch")]
        FixedSpeedFixedPitch = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="FixedSpeedVariablePitch")]
        FixedSpeedVariablePitch = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="VariableSpeedFixedPitch")]
        VariableSpeedFixedPitch = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="VariableSpeedVariablePitch")]
        VariableSpeedVariablePitch = 4,
    }
    
    [Description("List of electric power generators to include in the simulation including the name" +
        " and type of each generators along with availability schedule, rated power outpu" +
        "t, and thermal-to-electrical power ratio.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class ElectricLoadCenter_Generators : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[JsonProperty("generator_outputs")]
public string GeneratorOutputs { get; set; } = "";
    }
    
    [Description("Electric power inverter to convert from direct current (DC) to alternating curren" +
        "t (AC) in an electric load center that contains photovoltaic modules. This input" +
        " object is for the simplest inverter model and uses a fixed efficiency.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class ElectricLoadCenter_Inverter_Simple : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("enter name of zone to receive inverter losses as heat if blank then inverter is a" +
    "ssumed to be outdoors")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("radiative_fraction")]
public System.Nullable<float> RadiativeFraction { get; set; } = null;
        

[JsonProperty("inverter_efficiency")]
public System.Nullable<float> InverterEfficiency { get; set; } = null;
    }
    
    [Description("Electric power inverter to convert from direct current (DC) to alternating curren" +
        "t (AC) in an electric load center that contains photovoltaic modules. This input" +
        " object is for an inverter model where efficiency is a function of normalized po" +
        "wer.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class ElectricLoadCenter_Inverter_FunctionOfPower : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Enter name of zone to receive inverter losses as heat if blank then inverter is a" +
    "ssumed to be outdoors")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("radiative_fraction")]
public System.Nullable<float> RadiativeFraction { get; set; } = null;
        

[Description("curve describes efficiency as a function of power curve is normalized relative to" +
    " rated power in next field")]
[JsonProperty("efficiency_function_of_power_curve_name")]
public string EfficiencyFunctionOfPowerCurveName { get; set; } = "";
        

[JsonProperty("rated_maximum_continuous_input_power")]
public System.Nullable<float> RatedMaximumContinuousInputPower { get; set; } = null;
        

[JsonProperty("minimum_efficiency")]
public System.Nullable<float> MinimumEfficiency { get; set; } = null;
        

[JsonProperty("maximum_efficiency")]
public System.Nullable<float> MaximumEfficiency { get; set; } = null;
        

[JsonProperty("minimum_power_output")]
public System.Nullable<float> MinimumPowerOutput { get; set; } = null;
        

[JsonProperty("maximum_power_output")]
public System.Nullable<float> MaximumPowerOutput { get; set; } = null;
        

[JsonProperty("ancillary_power_consumed_in_standby")]
public System.Nullable<float> AncillaryPowerConsumedInStandby { get; set; } = null;
    }
    
    [Description("California Energy Commission tests and publishes data on inverters This inverter " +
        "model interpolates using CEC test data Input data are at http://www.gosolarcalif" +
        "ornia.org/equipment/inverter_tests/summaries")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class ElectricLoadCenter_Inverter_LookUpTable : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Enter name of zone to receive inverter losses as heat if blank then inverter is a" +
    "ssumed to be outdoors")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("radiative_fraction")]
public System.Nullable<float> RadiativeFraction { get; set; } = null;
        

[JsonProperty("rated_maximum_continuous_output_power")]
public System.Nullable<float> RatedMaximumContinuousOutputPower { get; set; } = null;
        

[JsonProperty("night_tare_loss_power")]
public System.Nullable<float> NightTareLossPower { get; set; } = null;
        

[JsonProperty("nominal_voltage_input")]
public System.Nullable<float> NominalVoltageInput { get; set; } = null;
        

[JsonProperty("efficiency_at_10_power_and_nominal_voltage")]
public System.Nullable<float> EfficiencyAt10PowerAndNominalVoltage { get; set; } = null;
        

[JsonProperty("efficiency_at_20_power_and_nominal_voltage")]
public System.Nullable<float> EfficiencyAt20PowerAndNominalVoltage { get; set; } = null;
        

[JsonProperty("efficiency_at_30_power_and_nominal_voltage")]
public System.Nullable<float> EfficiencyAt30PowerAndNominalVoltage { get; set; } = null;
        

[JsonProperty("efficiency_at_50_power_and_nominal_voltage")]
public System.Nullable<float> EfficiencyAt50PowerAndNominalVoltage { get; set; } = null;
        

[JsonProperty("efficiency_at_75_power_and_nominal_voltage")]
public System.Nullable<float> EfficiencyAt75PowerAndNominalVoltage { get; set; } = null;
        

[JsonProperty("efficiency_at_100_power_and_nominal_voltage")]
public System.Nullable<float> EfficiencyAt100PowerAndNominalVoltage { get; set; } = null;
    }
    
    [Description(@"Used to model storage of electricity in an electric load center. This is a simple model that does not attempt to represent any of the characteristics of a real storage device such as a battery. The type of power, AC or DC, depends on the configuration chosen as the Electrical Buss Type in the ElectricLoadCenter:Distribution object.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class ElectricLoadCenter_Storage_Simple : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Enter name of zone to receive storage losses as heat if blank then storage is ass" +
    "umed to be outdoors")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("radiative_fraction_for_zone_heat_gains")]
public System.Nullable<float> RadiativeFractionForZoneHeatGains { get; set; } = null;
        

[JsonProperty("nominal_energetic_efficiency_for_charging")]
public System.Nullable<float> NominalEnergeticEfficiencyForCharging { get; set; } = null;
        

[JsonProperty("nominal_discharging_energetic_efficiency")]
public System.Nullable<float> NominalDischargingEnergeticEfficiency { get; set; } = null;
        

[JsonProperty("maximum_storage_capacity")]
public System.Nullable<float> MaximumStorageCapacity { get; set; } = null;
        

[JsonProperty("maximum_power_for_discharging")]
public System.Nullable<float> MaximumPowerForDischarging { get; set; } = null;
        

[JsonProperty("maximum_power_for_charging")]
public System.Nullable<float> MaximumPowerForCharging { get; set; } = null;
        

[JsonProperty("initial_state_of_charge")]
public System.Nullable<float> InitialStateOfCharge { get; set; } = null;
    }
    
    [Description(@"Uses the kinetic battery model (KiBaM) to simulate rechargeable battery banks in an electrical load center. The battery bank is a collection of one or more individual battery modules. Given the surplus or deficit power from the electrical system and the state of charge from the previous time step, this object can model the voltage, current, and energy losses with charging and discharging during each time step. The cumulative battery damage can be also modeled and reported at the end of each simulation run.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class ElectricLoadCenter_Storage_Battery : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Enter name of zone to receive electrical storage losses as heat if blank then ele" +
    "ctrical storage losses are dissipated to outdoors")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("radiative_fraction")]
public System.Nullable<float> RadiativeFraction { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("A module usually consists of several cells. The total number of modules in the ba" +
    "ttery bank is equal to number of modules in parallel times number of modules in " +
    "series.")]
[JsonProperty("number_of_battery_modules_in_parallel")]
public System.Nullable<float> NumberOfBatteryModulesInParallel { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("A module usually consists of several cells. The total number of modules in the ba" +
    "ttery bank is equal to number of modules in parallel times number of modules in " +
    "series.")]
[JsonProperty("number_of_battery_modules_in_series")]
public System.Nullable<float> NumberOfBatteryModulesInSeries { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("The capacity is for each module. A model parameter from manufacturer\'s data or te" +
    "st data.")]
[JsonProperty("maximum_module_capacity")]
public System.Nullable<float> MaximumModuleCapacity { get; set; } = null;
        

[Description("The state of charge is evaluated based on the maximum capacity defined in the nex" +
    "t field.")]
[JsonProperty("initial_fractional_state_of_charge")]
public System.Nullable<float> InitialFractionalStateOfCharge { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("A model parameter usually derived from test data by curve fitting.")]
[JsonProperty("fraction_of_available_charge_capacity")]
public System.Nullable<float> FractionOfAvailableChargeCapacity { get; set; } = null;
        

[Description("A model parameter usually derived from test data by curve fitting.")]
[JsonProperty("change_rate_from_bound_charge_to_available_charge")]
public System.Nullable<float> ChangeRateFromBoundChargeToAvailableCharge { get; set; } = null;
        

[Description("The voltage is for each battery module.")]
[JsonProperty("fully_charged_module_open_circuit_voltage")]
public System.Nullable<float> FullyChargedModuleOpenCircuitVoltage { get; set; } = null;
        

[Description("The voltage is for each battery module.")]
[JsonProperty("fully_discharged_module_open_circuit_voltage")]
public System.Nullable<float> FullyDischargedModuleOpenCircuitVoltage { get; set; } = null;
        

[Description("Determines how the open circuit voltage change with state of charge relative to t" +
    "he fully discharged state.")]
[JsonProperty("voltage_change_curve_name_for_charging")]
public string VoltageChangeCurveNameForCharging { get; set; } = "";
        

[Description("Determines how the open circuit voltage change with state of charge relative to t" +
    "he fully charged state.")]
[JsonProperty("voltage_change_curve_name_for_discharging")]
public string VoltageChangeCurveNameForDischarging { get; set; } = "";
        

[Description("A model parameter from manufacture or derived from test data. Internal resistance" +
    " is assumed to be constant. The internal resistance is for each battery module.")]
[JsonProperty("module_internal_electrical_resistance")]
public System.Nullable<float> ModuleInternalElectricalResistance { get; set; } = null;
        

[Description("The constraint on discharging current is for each battery module.")]
[JsonProperty("maximum_module_discharging_current")]
public System.Nullable<float> MaximumModuleDischargingCurrent { get; set; } = null;
        

[Description("The voltage constraint is for each battery module.")]
[JsonProperty("module_cut_off_voltage")]
public System.Nullable<float> ModuleCutOffVoltage { get; set; } = null;
        

[Description("units 1/hr Charge rate limit is the division between charging current the remaini" +
    "ng capacity. The constraint on charging current is for each module.")]
[JsonProperty("module_charge_rate_limit")]
public System.Nullable<float> ModuleChargeRateLimit { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("battery_life_calculation")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public EmptyNoYes BatteryLifeCalculation { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Only required when battery life calculation is activated")]
[JsonProperty("number_of_cycle_bins")]
public System.Nullable<float> NumberOfCycleBins { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("Determines the number of cycles to failure in relation to cycle range. Only requi" +
    "red when battery life calculation is activated.")]
[JsonProperty("battery_life_curve_name")]
public string BatteryLifeCurveName { get; set; } = "";
    }
    
    [Description(@"Uses Lithium Ion NMC model to simulate rechargeable battery banks in an electrical load center. The battery bank is a collection of one or more individual battery modules. Given the surplus or deficit power from the electrical system and the state of charge from the previous time step, this object can model the voltage, current, and energy losses with charging and discharging during each time step. The cumulative battery damage can be also modeled and reported at the end of each simulation run.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class ElectricLoadCenter_Storage_LiIonNMCBattery : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Enter name of zone to receive electrical storage losses as heat if blank then ele" +
    "ctrical storage losses are dissipated to outdoors")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("radiative_fraction")]
public System.Nullable<float> RadiativeFraction { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("lifetime_model")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public ElectricLoadCenter_Storage_LiIonNMCBattery_LifetimeModel LifetimeModel { get; set; } = (ElectricLoadCenter_Storage_LiIonNMCBattery_LifetimeModel)Enum.Parse(typeof(ElectricLoadCenter_Storage_LiIonNMCBattery_LifetimeModel), "KandlerSmith");
        

[Description("Battery voltage is calculated by multiplying this field by the nominal cell volta" +
    "ge (N13, default 3.342V)")]
[JsonProperty("number_of_cells_in_series")]
public System.Nullable<float> NumberOfCellsInSeries { get; set; } = null;
        

[Description("Capacity (Ah) is determined by multiplying this field by the cell capacity (N14, " +
    "default 3.2 Ah)")]
[JsonProperty("number_of_strings_in_parallel")]
public System.Nullable<float> NumberOfStringsInParallel { get; set; } = null;
        

[Description("The state of charge is evaluated based on the maximum capacity defined in the nex" +
    "t field.")]
[JsonProperty("initial_fractional_state_of_charge")]
public System.Nullable<float> InitialFractionalStateOfCharge { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[JsonProperty("dc_to_dc_charging_efficiency")]
public System.Nullable<float> DcToDcChargingEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.95", CultureInfo.InvariantCulture);
        

[JsonProperty("battery_mass")]
public System.Nullable<float> BatteryMass { get; set; } = null;
        

[JsonProperty("battery_surface_area")]
public System.Nullable<float> BatterySurfaceArea { get; set; } = null;
        

[JsonProperty("battery_specific_heat_capacity")]
public System.Nullable<float> BatterySpecificHeatCapacity { get; set; } = (System.Nullable<float>)Single.Parse("1500", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_transfer_coefficient_between_battery_and_ambient")]
public System.Nullable<float> HeatTransferCoefficientBetweenBatteryAndAmbient { get; set; } = (System.Nullable<float>)Single.Parse("7.5", CultureInfo.InvariantCulture);
        

[Description("Most users should not need to change this value.")]
[JsonProperty("fully_charged_cell_voltage")]
public System.Nullable<float> FullyChargedCellVoltage { get; set; } = (System.Nullable<float>)Single.Parse("4.2", CultureInfo.InvariantCulture);
        

[Description("Most users should not need to change this value.")]
[JsonProperty("cell_voltage_at_end_of_exponential_zone")]
public System.Nullable<float> CellVoltageAtEndOfExponentialZone { get; set; } = (System.Nullable<float>)Single.Parse("3.53", CultureInfo.InvariantCulture);
        

[Description("Most users should not need to change this value.")]
[JsonProperty("cell_voltage_at_end_of_nominal_zone")]
public System.Nullable<float> CellVoltageAtEndOfNominalZone { get; set; } = (System.Nullable<float>)Single.Parse("3.342", CultureInfo.InvariantCulture);
        

[Description("Most users should not need to change this value.")]
[JsonProperty("default_nominal_cell_voltage")]
public System.Nullable<float> DefaultNominalCellVoltage { get; set; } = (System.Nullable<float>)Single.Parse("3.342", CultureInfo.InvariantCulture);
        

[Description("Most users should not need to change this value.")]
[JsonProperty("fully_charged_cell_capacity")]
public System.Nullable<float> FullyChargedCellCapacity { get; set; } = (System.Nullable<float>)Single.Parse("3.2", CultureInfo.InvariantCulture);
        

[Description("Most users should not need to change this value.")]
[JsonProperty("fraction_of_cell_capacity_removed_at_the_end_of_exponential_zone")]
public System.Nullable<float> FractionOfCellCapacityRemovedAtTheEndOfExponentialZone { get; set; } = (System.Nullable<float>)Single.Parse("0.8075", CultureInfo.InvariantCulture);
        

[Description("Most users should not need to change this value.")]
[JsonProperty("fraction_of_cell_capacity_removed_at_the_end_of_nominal_zone")]
public System.Nullable<float> FractionOfCellCapacityRemovedAtTheEndOfNominalZone { get; set; } = (System.Nullable<float>)Single.Parse("0.976875", CultureInfo.InvariantCulture);
        

[Description("Most users should not need to change this value.")]
[JsonProperty("charge_rate_at_which_voltage_vs_capacity_curve_was_generated")]
public System.Nullable<float> ChargeRateAtWhichVoltageVsCapacityCurveWasGenerated { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("for a single cell Most users should not need to change this value.")]
[JsonProperty("battery_cell_internal_electrical_resistance")]
public System.Nullable<float> BatteryCellInternalElectricalResistance { get; set; } = (System.Nullable<float>)Single.Parse("0.09", CultureInfo.InvariantCulture);
    }
    
    public enum ElectricLoadCenter_Storage_LiIonNMCBattery_LifetimeModel
    {
        
        [System.Runtime.Serialization.EnumMember(Value="null")]
        Empty = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="KandlerSmith")]
        KandlerSmith = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="None")]
        None = 2,
    }
    
    [Description("a list of meters that can be reported are available after a run on the meter dict" +
        "ionary file (.mdd) if the Output:VariableDictionary has been requested.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class ElectricLoadCenter_Transformer : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description(@"A transformer can be used to transfer electric energy from utility grid to building (PowerInFromGrid)or from building on-site generation to the grid (PowerOutToGrid) or within a load center to match generation to the facility service main panel (LoadCenterPowerConditioning)")]
[JsonProperty("transformer_usage")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public ElectricLoadCenter_Transformer_TransformerUsage TransformerUsage { get; set; } = (ElectricLoadCenter_Transformer_TransformerUsage)Enum.Parse(typeof(ElectricLoadCenter_Transformer_TransformerUsage), "PowerInFromGrid");
        

[Description("Enter name of zone to receive transformer losses as heat if blank then transforme" +
    "r losses are dissipated to outdoors")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("radiative_fraction")]
public System.Nullable<float> RadiativeFraction { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("the unit is VA, instead of kVA as usually shown on transformer nameplates.")]
[JsonProperty("rated_capacity")]
public System.Nullable<float> RatedCapacity { get; set; } = null;
        

[Description("Must be single or three phase transformer. NOT used in the current model.")]
[JsonProperty("phase")]
public string Phase { get; set; } = (System.String)"3";
        

[Description("Winding material used by the transformer.")]
[JsonProperty("conductor_material")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public ElectricLoadCenter_Transformer_ConductorMaterial ConductorMaterial { get; set; } = (ElectricLoadCenter_Transformer_ConductorMaterial)Enum.Parse(typeof(ElectricLoadCenter_Transformer_ConductorMaterial), "Aluminum");
        

[JsonProperty("full_load_temperature_rise")]
public System.Nullable<float> FullLoadTemperatureRise { get; set; } = (System.Nullable<float>)Single.Parse("150", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_of_eddy_current_losses")]
public System.Nullable<float> FractionOfEddyCurrentLosses { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[Description("User can define transformer performance by specifying load and no load losses at " +
    "rated conditions or nameplate efficiency and maximum efficiency")]
[JsonProperty("performance_input_method")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public ElectricLoadCenter_Transformer_PerformanceInputMethod PerformanceInputMethod { get; set; } = (ElectricLoadCenter_Transformer_PerformanceInputMethod)Enum.Parse(typeof(ElectricLoadCenter_Transformer_PerformanceInputMethod), "RatedLosses");
        

[Description("Only required when RatedLosses is the performance input method")]
[JsonProperty("rated_no_load_loss")]
public System.Nullable<float> RatedNoLoadLoss { get; set; } = null;
        

[Description("Only required when RatedLosses is the performance input method")]
[JsonProperty("rated_load_loss")]
public System.Nullable<float> RatedLoadLoss { get; set; } = null;
        

[Description("Only required when NominalEfficiency is the performance input method")]
[JsonProperty("nameplate_efficiency")]
public System.Nullable<float> NameplateEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.98", CultureInfo.InvariantCulture);
        

[Description("Percentage of the rated capacity at which the nameplate efficiency is defined Onl" +
    "y required when NominalEfficiency is the performance input method")]
[JsonProperty("per_unit_load_for_nameplate_efficiency")]
public System.Nullable<float> PerUnitLoadForNameplateEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.35", CultureInfo.InvariantCulture);
        

[Description("Conductor operating temperature at which the nameplate efficiency is defined Only" +
    " required when NominalEfficiency is the performance input method")]
[JsonProperty("reference_temperature_for_nameplate_efficiency")]
public System.Nullable<float> ReferenceTemperatureForNameplateEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("75", CultureInfo.InvariantCulture);
        

[Description("Percentage of the rate capacity at which the maximum efficiency is obtained Only " +
    "required when NominalEfficiency is the performance input method")]
[JsonProperty("per_unit_load_for_maximum_efficiency")]
public System.Nullable<float> PerUnitLoadForMaximumEfficiency { get; set; } = null;
        

[Description("Only required when the transformer is used for power in from the utility grid")]
[JsonProperty("consider_transformer_loss_for_utility_cost")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public EmptyNoYes ConsiderTransformerLossForUtilityCost { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("meters")]
public string Meters { get; set; } = "";
    }
    
    public enum ElectricLoadCenter_Transformer_TransformerUsage
    {
        
        [System.Runtime.Serialization.EnumMember(Value="null")]
        Empty = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="LoadCenterPowerConditioning")]
        LoadCenterPowerConditioning = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="PowerInFromGrid")]
        PowerInFromGrid = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="PowerOutToGrid")]
        PowerOutToGrid = 3,
    }
    
    public enum ElectricLoadCenter_Transformer_ConductorMaterial
    {
        
        [System.Runtime.Serialization.EnumMember(Value="null")]
        Empty = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="Aluminum")]
        Aluminum = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="Copper")]
        Copper = 2,
    }
    
    public enum ElectricLoadCenter_Transformer_PerformanceInputMethod
    {
        
        [System.Runtime.Serialization.EnumMember(Value="null")]
        Empty = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="NominalEfficiency")]
        NominalEfficiency = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="RatedLosses")]
        RatedLosses = 2,
    }
    
    [Description("Describes a subpanel a list of meters that can be reported are available after a " +
        "run on the meter dictionary file (.mdd) if the Output:VariableDictionary has bee" +
        "n requested.")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class ElectricLoadCenter_Distribution : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[Description("Name of an ElectricLoadCenter:Generators object")]
[JsonProperty("generator_list_name")]
public string GeneratorListName { get; set; } = "";
        

[Description("Determines how generators are to be controlled Required if Generator List is ente" +
    "red.")]
[JsonProperty("generator_operation_scheme_type")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public ElectricLoadCenter_Distribution_GeneratorOperationSchemeType GeneratorOperationSchemeType { get; set; } = (ElectricLoadCenter_Distribution_GeneratorOperationSchemeType)Enum.Parse(typeof(ElectricLoadCenter_Distribution_GeneratorOperationSchemeType), "Baseload");
        

[JsonProperty("generator_demand_limit_scheme_purchased_electric_demand_limit")]
public System.Nullable<float> GeneratorDemandLimitSchemePurchasedElectricDemandLimit { get; set; } = null;
        

[Description("required when Generator Operation Scheme Type=TrackSchedule schedule values in Wa" +
    "tts")]
[JsonProperty("generator_track_schedule_name_scheme_schedule_name")]
public string GeneratorTrackScheduleNameSchemeScheduleName { get; set; } = "";
        

[Description("required when Generator Operation Scheme Type=TrackMeter")]
[JsonProperty("generator_track_meter_scheme_meter_name")]
public string GeneratorTrackMeterSchemeMeterName { get; set; } = "";
        

[JsonProperty("electrical_buss_type")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public ElectricLoadCenter_Distribution_ElectricalBussType ElectricalBussType { get; set; } = (ElectricLoadCenter_Distribution_ElectricalBussType)Enum.Parse(typeof(ElectricLoadCenter_Distribution_ElectricalBussType), "AlternatingCurrent");
        

[Description("required when Electrical Buss Type=DirectCurrentWithInverter, DirectCurrentWithIn" +
    "verterDCStorage, or DirectCurrentWithInverterACStorage")]
[JsonProperty("inverter_name")]
public string InverterName { get; set; } = "";
        

[Description("required when Electrical Buss Type=AlternatingCurrentWithStorage, DirectCurrentWi" +
    "thInverterDCStorage, or DirectCurrentWithInverterACStorage")]
[JsonProperty("electrical_storage_object_name")]
public string ElectricalStorageObjectName { get; set; } = "";
        

[Description("required when power needs to be output from on-site generation or storage to the " +
    "grid via transformer")]
[JsonProperty("transformer_object_name")]
public string TransformerObjectName { get; set; } = "";
        

[Description("Select method to govern how storage charge and discharge is controlled TrackFacil" +
    "ityElectricDemandStoreExcessOnSite indicates that storage control will follow th" +
    "e facility power demand while accounting for any on-site generation. Only excess" +
    " on site generation  gets stored (legacy behavior). TrackMeterDemandStoreExcessO" +
    "nSite indicates that storage discharge control will follow an electric meter nam" +
    "ed in the field called Storage Control Track Meter Name. This scheme is similiar" +
    " to TrackFacilityElectricDemandStoreExcessOnSite except that instead of the main" +
    " facility electric meter, the control is based off of a user-selected meter. Tra" +
    "ckChargeDischargeSchedules indicates that control will follow the charging and d" +
    "ischarging power and schedules defined in the fields called Maximum Storage Char" +
    "ge Grid Supply Power, Storage Charge Grid Supply Power Fraction Schedule Name, D" +
    "esign Storage Discharge Grid Export Power, and Storage Discharge Grid Export Fra" +
    "ction Schedule Name. FacilityDemandLeveling indicates that storage control will " +
    "attempt to control the facility\'s power demand drawn from the utility service to" +
    " a prescribed level. The target utility demand is entered in the fields called S" +
    "torage Control Utility Demand Limit and Storage Control Utility Demand Limit Fra" +
    "ction Schedule Name This scheme first accounts for any on-site generation and du" +
    "ring times of high use will discharge storage to reduce facility grid demand to " +
    "meet the target level and during times of low use will charge storage from the g" +
    "rid to increase facility grid demand to meet the target level.")]
[JsonProperty("storage_operation_scheme")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public ElectricLoadCenter_Distribution_StorageOperationScheme StorageOperationScheme { get; set; } = (ElectricLoadCenter_Distribution_StorageOperationScheme)Enum.Parse(typeof(ElectricLoadCenter_Distribution_StorageOperationScheme), "TrackFacilityElectricDemandStoreExcessOnSite");
        

[Description("required when Storage Operation Scheme is set to TrackMeterDemandStoreExcessOnSit" +
    "e.")]
[JsonProperty("storage_control_track_meter_name")]
public string StorageControlTrackMeterName { get; set; } = "";
        

[Description(@"Name of an ElectricLoadCenter:Storage:Converter used to convert AC to DC when charging DC storage from grid supply. A converter is expected when using Storage Operation Schemes FacilityDemandLeveling or TrackChargeDischargeSchedules A single bidirectional device will reference both an inverter object (DC to AC) and a converter object (AC to DC).")]
[JsonProperty("storage_converter_object_name")]
public string StorageConverterObjectName { get; set; } = "";
        

[Description("Fraction of storage capacity used as upper limit for controlling charging, for al" +
    "l storage operation schemes.")]
[JsonProperty("maximum_storage_state_of_charge_fraction")]
public System.Nullable<float> MaximumStorageStateOfChargeFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Fraction of storage capacity used as lower limit for controlling discharging, for" +
    " all storage operation schemes.")]
[JsonProperty("minimum_storage_state_of_charge_fraction")]
public System.Nullable<float> MinimumStorageStateOfChargeFraction { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Maximum rate that electric power can be charged into storage. Storage charging adjusted downward for conversion losses. Rate is modified by fractional values in the schedule named in the next field. Required field when using Storage Operation Schemes FacilityDemandLeveling or TrackChargeDischargeSchedules.")]
[JsonProperty("design_storage_control_charge_power")]
public System.Nullable<float> DesignStorageControlChargePower { get; set; } = null;
        

[Description("Controls timing and magnitude of charging storage. Required field if Storage Oper" +
    "ation Scheme is set to TrackChargeDischargeSchedules. Schedule values should be " +
    "fractions from 0.0 to 1.0, inclusive.")]
[JsonProperty("storage_charge_power_fraction_schedule_name")]
public string StorageChargePowerFractionScheduleName { get; set; } = "";
        

[Description("Maximum rate that electric power can be discharged from storage. Rate is modified" +
    " by fractional values in the schedule named in the next field. Required field wh" +
    "en using Storage Operation Schemes FacilityDemandLeveling or TrackChargeDischarg" +
    "eSchedules.")]
[JsonProperty("design_storage_control_discharge_power")]
public System.Nullable<float> DesignStorageControlDischargePower { get; set; } = null;
        

[Description("Controls timing and magnitude of discharging storage Required field if Storage Op" +
    "eration Scheme is set to TrackChargeDischargeSchedules. Schedule values should b" +
    "e fractions from 0.0 to 1.0, inclusive.")]
[JsonProperty("storage_discharge_power_fraction_schedule_name")]
public string StorageDischargePowerFractionScheduleName { get; set; } = "";
        

[Description("Target utility service demand power for discharge control. Storage draws are adju" +
    "sted upwards for conversion losses. Required field for FacilityDemandLeveling st" +
    "orage operation scheme")]
[JsonProperty("storage_control_utility_demand_target")]
public System.Nullable<float> StorageControlUtilityDemandTarget { get; set; } = null;
        

[Description(@"Modifies the target utility service demand power over time. Schedule values should be fractions from -1.0 to 1.0, inclusive. if omitted a schedule value of 1.0 is used. Negative values indicate export to grid Schedule is used if Storage Operation Scheme is set to FacilityDemandLeveling.")]
[JsonProperty("storage_control_utility_demand_target_fraction_schedule_name")]
public string StorageControlUtilityDemandTargetFractionScheduleName { get; set; } = "";
    }
    
    public enum ElectricLoadCenter_Distribution_GeneratorOperationSchemeType
    {
        
        [System.Runtime.Serialization.EnumMember(Value="Baseload")]
        Baseload = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="DemandLimit")]
        DemandLimit = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="FollowThermal")]
        FollowThermal = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="FollowThermalLimitElectrical")]
        FollowThermalLimitElectrical = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="TrackElectrical")]
        TrackElectrical = 4,
        
        [System.Runtime.Serialization.EnumMember(Value="TrackMeter")]
        TrackMeter = 5,
        
        [System.Runtime.Serialization.EnumMember(Value="TrackSchedule")]
        TrackSchedule = 6,
    }
    
    public enum ElectricLoadCenter_Distribution_ElectricalBussType
    {
        
        [System.Runtime.Serialization.EnumMember(Value="null")]
        Empty = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="AlternatingCurrent")]
        AlternatingCurrent = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="AlternatingCurrentWithStorage")]
        AlternatingCurrentWithStorage = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="DirectCurrentWithInverter")]
        DirectCurrentWithInverter = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="DirectCurrentWithInverterACStorage")]
        DirectCurrentWithInverterACStorage = 4,
        
        [System.Runtime.Serialization.EnumMember(Value="DirectCurrentWithInverterDCStorage")]
        DirectCurrentWithInverterDCStorage = 5,
    }
    
    public enum ElectricLoadCenter_Distribution_StorageOperationScheme
    {
        
        [System.Runtime.Serialization.EnumMember(Value="null")]
        Empty = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="FacilityDemandLeveling")]
        FacilityDemandLeveling = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="TrackChargeDischargeSchedules")]
        TrackChargeDischargeSchedules = 2,
        
        [System.Runtime.Serialization.EnumMember(Value="TrackFacilityElectricDemandStoreExcessOnSite")]
        TrackFacilityElectricDemandStoreExcessOnSite = 3,
        
        [System.Runtime.Serialization.EnumMember(Value="TrackMeterDemandStoreExcessOnSite")]
        TrackMeterDemandStoreExcessOnSite = 4,
    }
    
    [Description("This model is for converting AC to DC for grid-supplied charging of DC storage")]
    [JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    public class ElectricLoadCenter_Storage_Converter : BHoMObject, IEnergyPlusNode
    {
        

[Description("This will be the main key of this instance.")]
public string NodeName { get; set; } = "";
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the converter is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("SimpleFixed indicates power conversion losses are based on Simple Fixed Efficienc" +
    "y FunctionOfPower indicates power conversion losses are a function of normalized" +
    " power using a curve or table.")]
[JsonProperty("power_conversion_efficiency_method")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public ElectricLoadCenter_Storage_Converter_PowerConversionEfficiencyMethod PowerConversionEfficiencyMethod { get; set; } = (ElectricLoadCenter_Storage_Converter_PowerConversionEfficiencyMethod)Enum.Parse(typeof(ElectricLoadCenter_Storage_Converter_PowerConversionEfficiencyMethod), "SimpleFixed");
        

[Description("Constant efficiency for conversion of AC to DC at all power levels. Field is only" +
    " used when Power Conversion Efficiency Method is set to SimpleFixed.")]
[JsonProperty("simple_fixed_efficiency")]
public System.Nullable<float> SimpleFixedEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.95", CultureInfo.InvariantCulture);
        

[Description("Required field when Power Conversion Efficiency Method is set to FunctionOfPower." +
    "")]
[JsonProperty("design_maximum_continuous_input_power")]
public System.Nullable<float> DesignMaximumContinuousInputPower { get; set; } = null;
        

[Description(@"Curve or table with a single independent variable that describes efficiency as a function of normalized power. The ""x"" input for curve or table is the ratio of current input power divided by design power in the previous field Required field when Power Conversion Efficiency Method is set to FunctionOfPower.")]
[JsonProperty("efficiency_function_of_power_curve_name")]
public string EfficiencyFunctionOfPowerCurveName { get; set; } = "";
        

[Description("Optional standby power consumed when converter is available but no power is being" +
    " conditioned.")]
[JsonProperty("ancillary_power_consumed_in_standby")]
public System.Nullable<float> AncillaryPowerConsumedInStandby { get; set; } = null;
        

[Description("enter name of zone to receive converter losses as heat if blank then converter is" +
    " assumed to be outdoors")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("fraction of zone heat gains treated as thermal radiation")]
[JsonProperty("radiative_fraction")]
public System.Nullable<float> RadiativeFraction { get; set; } = null;
    }
    
    public enum ElectricLoadCenter_Storage_Converter_PowerConversionEfficiencyMethod
    {
        
        [System.Runtime.Serialization.EnumMember(Value="null")]
        Empty = 0,
        
        [System.Runtime.Serialization.EnumMember(Value="FunctionOfPower")]
        FunctionOfPower = 1,
        
        [System.Runtime.Serialization.EnumMember(Value="SimpleFixed")]
        SimpleFixed = 2,
    }
}
