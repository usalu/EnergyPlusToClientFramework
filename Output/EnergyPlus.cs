//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BH.oM.Adapters.EnergyPlus
{
    using System.ComponentModel;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    
    
    public enum EmptyNoYes
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("No")]
        No = 1,
        
        [JsonProperty("Yes")]
        Yes = 2,
    }
}
namespace BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Determines which Heat Balance Algorithm will be used for a specific surface Allows selectively overriding the global setting in HeatBalanceAlgorithm CTF (Conduction Transfer Functions), EMPD (Effective Moisture Penetration Depth with Conduction Transfer Functions). Advanced/Research Usage: CondFD (Conduction Finite Difference) Advanced/Research Usage: HAMT (Combined Heat And Moisture Finite Element)")]
    [JsonObject("SurfaceProperty:HeatTransferAlgorithm")]
    public class SurfaceProperty_HeatTransferAlgorithm : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("surface_name")]
public string SurfaceName { get; set; } = "";
        

[JsonProperty("algorithm")]
public SurfaceProperty_HeatTransferAlgorithm_Algorithm Algorithm { get; set; } = (SurfaceProperty_HeatTransferAlgorithm_Algorithm)Enum.Parse(typeof(SurfaceProperty_HeatTransferAlgorithm_Algorithm), "ConductionTransferFunction");
    }
    
    public enum SurfaceProperty_HeatTransferAlgorithm_Algorithm
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CombinedHeatAndMoistureFiniteElement")]
        CombinedHeatAndMoistureFiniteElement = 1,
        
        [JsonProperty("ConductionFiniteDifference")]
        ConductionFiniteDifference = 2,
        
        [JsonProperty("ConductionTransferFunction")]
        ConductionTransferFunction = 3,
        
        [JsonProperty("MoisturePenetrationDepthConductionTransferFunction")]
        MoisturePenetrationDepthConductionTransferFunction = 4,
    }
    
    [Description(@"Determines which Heat Balance Algorithm will be used for a group of surface types Allows selectively overriding the global setting in HeatBalanceAlgorithm CTF (Conduction Transfer Functions), EMPD (Effective Moisture Penetration Depth with Conduction Transfer Functions). Advanced/Research Usage: CondFD (Conduction Finite Difference) Advanced/Research Usage: HAMT (Combined Heat And Moisture Finite Element)")]
    [JsonObject("SurfaceProperty:HeatTransferAlgorithm:MultipleSurface")]
    public class SurfaceProperty_HeatTransferAlgorithm_MultipleSurface : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("surface_type")]
public SurfaceProperty_HeatTransferAlgorithm_MultipleSurface_SurfaceType SurfaceType { get; set; } = (SurfaceProperty_HeatTransferAlgorithm_MultipleSurface_SurfaceType)Enum.Parse(typeof(SurfaceProperty_HeatTransferAlgorithm_MultipleSurface_SurfaceType), "AllExteriorFloors");
        

[JsonProperty("algorithm")]
public SurfaceProperty_HeatTransferAlgorithm_MultipleSurface_Algorithm Algorithm { get; set; } = (SurfaceProperty_HeatTransferAlgorithm_MultipleSurface_Algorithm)Enum.Parse(typeof(SurfaceProperty_HeatTransferAlgorithm_MultipleSurface_Algorithm), "ConductionTransferFunction");
    }
    
    public enum SurfaceProperty_HeatTransferAlgorithm_MultipleSurface_SurfaceType
    {
        
        [JsonProperty("AllExteriorFloors")]
        AllExteriorFloors = 0,
        
        [JsonProperty("AllExteriorRoofs")]
        AllExteriorRoofs = 1,
        
        [JsonProperty("AllExteriorSurfaces")]
        AllExteriorSurfaces = 2,
        
        [JsonProperty("AllExteriorWalls")]
        AllExteriorWalls = 3,
        
        [JsonProperty("AllGroundContactSurfaces")]
        AllGroundContactSurfaces = 4,
        
        [JsonProperty("AllInteriorCeilings")]
        AllInteriorCeilings = 5,
        
        [JsonProperty("AllInteriorFloors")]
        AllInteriorFloors = 6,
        
        [JsonProperty("AllInteriorSurfaces")]
        AllInteriorSurfaces = 7,
        
        [JsonProperty("AllInteriorWalls")]
        AllInteriorWalls = 8,
    }
    
    public enum SurfaceProperty_HeatTransferAlgorithm_MultipleSurface_Algorithm
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CombinedHeatAndMoistureFiniteElement")]
        CombinedHeatAndMoistureFiniteElement = 1,
        
        [JsonProperty("ConductionFiniteDifference")]
        ConductionFiniteDifference = 2,
        
        [JsonProperty("ConductionTransferFunction")]
        ConductionTransferFunction = 3,
        
        [JsonProperty("MoisturePenetrationDepthConductionTransferFunction")]
        MoisturePenetrationDepthConductionTransferFunction = 4,
    }
    
    [Description(@"Determines which Heat Balance Algorithm will be used for a list of surfaces Allows selectively overriding the global setting in HeatBalanceAlgorithm CTF (Conduction Transfer Functions), EMPD (Effective Moisture Penetration Depth with Conduction Transfer Functions). Advanced/Research Usage: CondFD (Conduction Finite Difference) Advanced/Research Usage: HAMT (Combined Heat And Moisture Finite Element)")]
    [JsonObject("SurfaceProperty:HeatTransferAlgorithm:SurfaceList")]
    public class SurfaceProperty_HeatTransferAlgorithm_SurfaceList : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("algorithm")]
public SurfaceProperty_HeatTransferAlgorithm_SurfaceList_Algorithm Algorithm { get; set; } = (SurfaceProperty_HeatTransferAlgorithm_SurfaceList_Algorithm)Enum.Parse(typeof(SurfaceProperty_HeatTransferAlgorithm_SurfaceList_Algorithm), "ConductionTransferFunction");
        

[JsonProperty("surface")]
public string Surface { get; set; } = "";
    }
    
    public enum SurfaceProperty_HeatTransferAlgorithm_SurfaceList_Algorithm
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CombinedHeatAndMoistureFiniteElement")]
        CombinedHeatAndMoistureFiniteElement = 1,
        
        [JsonProperty("ConductionFiniteDifference")]
        ConductionFiniteDifference = 2,
        
        [JsonProperty("ConductionTransferFunction")]
        ConductionTransferFunction = 3,
        
        [JsonProperty("MoisturePenetrationDepthConductionTransferFunction")]
        MoisturePenetrationDepthConductionTransferFunction = 4,
    }
    
    [Description(@"Determines which Heat Balance Algorithm will be used for surfaces that have a specific type of construction Allows selectively overriding the global setting in HeatBalanceAlgorithm CTF (Conduction Transfer Functions), EMPD (Effective Moisture Penetration Depth with Conduction Transfer Functions). Advanced/Research Usage: CondFD (Conduction Finite Difference) Advanced/Research Usage: HAMT (Combined Heat And Moisture Finite Element)")]
    [JsonObject("SurfaceProperty:HeatTransferAlgorithm:Construction")]
    public class SurfaceProperty_HeatTransferAlgorithm_Construction : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("algorithm")]
public SurfaceProperty_HeatTransferAlgorithm_Construction_Algorithm Algorithm { get; set; } = (SurfaceProperty_HeatTransferAlgorithm_Construction_Algorithm)Enum.Parse(typeof(SurfaceProperty_HeatTransferAlgorithm_Construction_Algorithm), "ConductionTransferFunction");
        

[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
    }
    
    public enum SurfaceProperty_HeatTransferAlgorithm_Construction_Algorithm
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CombinedHeatAndMoistureFiniteElement")]
        CombinedHeatAndMoistureFiniteElement = 1,
        
        [JsonProperty("ConductionFiniteDifference")]
        ConductionFiniteDifference = 2,
        
        [JsonProperty("ConductionTransferFunction")]
        ConductionTransferFunction = 3,
        
        [JsonProperty("MoisturePenetrationDepthConductionTransferFunction")]
        MoisturePenetrationDepthConductionTransferFunction = 4,
    }
    
    [Description("Allows an additional heat source term to be added to the inside or outside surfac" +
        "e boundary. A heat source can be added to either or both the inside and outside " +
        "of the same surface.")]
    [JsonObject("SurfaceProperty:HeatBalanceSourceTerm")]
    public class SurfaceProperty_HeatBalanceSourceTerm : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("surface_name")]
public string SurfaceName { get; set; } = "";
        

[Description(@"The value of this schedule is the source term value for the inside face of this surface If this field is left blank, no inside surface source term will be applied. The schedule values are heat rate per surface area (W/m2), when positive schedule values indicate heat gain and negative values indicates loss.")]
[JsonProperty("inside_face_heat_source_term_schedule_name")]
public string InsideFaceHeatSourceTermScheduleName { get; set; } = "";
        

[Description(@"The value of this schedule is the source term value for the outside face of this surface If this field is left blank, no outside surface source term will be applied. The schedule values are heat rate per surface area (W/m2), when positive schedule values indicate heat gain and negative values indicates loss.")]
[JsonProperty("outside_face_heat_source_term_schedule_name")]
public string OutsideFaceHeatSourceTermScheduleName { get; set; } = "";
    }
    
    [Description("Exterior or Interior Insulation on opaque surfaces")]
    [JsonObject("SurfaceControl:MovableInsulation")]
    public class SurfaceControl_MovableInsulation : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("insulation_type")]
public SurfaceControl_MovableInsulation_InsulationType InsulationType { get; set; } = (SurfaceControl_MovableInsulation_InsulationType)Enum.Parse(typeof(SurfaceControl_MovableInsulation_InsulationType), "Inside");
        

[JsonProperty("surface_name")]
public string SurfaceName { get; set; } = "";
        

[JsonProperty("material_name")]
public string MaterialName { get; set; } = "";
        

[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
    }
    
    public enum SurfaceControl_MovableInsulation_InsulationType
    {
        
        [JsonProperty("Inside")]
        Inside = 0,
        
        [JsonProperty("Outside")]
        Outside = 1,
    }
    
    [Description("This object sets the other side conditions for a surface in a variety of ways.")]
    [JsonObject("SurfaceProperty:OtherSideCoefficients")]
    public class SurfaceProperty_OtherSideCoefficients : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"if>0, this field becomes the exterior convective/radiative film coefficient and the other fields are used to calculate the outdoor air temperature then exterior surface temperature based on outdoor air and specified coefficient if<=0, then remaining fields calculate the outside surface temperature The following fields are used in the equation: OtherSideTemp=N2*N3 + N4*OutdoorDry-bulb + N5*GroundTemp + N6*WindSpeed*OutdoorDry-bulb + N7*TempZone + N9*TempPrev")]
[JsonProperty("combined_convective_radiative_film_coefficient")]
public System.Nullable<float> CombinedConvectiveRadiativeFilmCoefficient { get; set; } = null;
        

[Description("This parameter will be overwritten by the values from the Constant Temperature Sc" +
    "hedule Name (below) if one is present")]
[JsonProperty("constant_temperature")]
public System.Nullable<float> ConstantTemperature { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This coefficient is used even with a Schedule. It should normally be 1.0 in that " +
    "case. This field is ignored if Sinusoidal Variation of Constant Temperature Coef" +
    "ficient = Yes.")]
[JsonProperty("constant_temperature_coefficient")]
public System.Nullable<float> ConstantTemperatureCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("external_dry_bulb_temperature_coefficient")]
public System.Nullable<float> ExternalDryBulbTemperatureCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("ground_temperature_coefficient")]
public System.Nullable<float> GroundTemperatureCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("wind_speed_coefficient")]
public System.Nullable<float> WindSpeedCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("zone_air_temperature_coefficient")]
public System.Nullable<float> ZoneAirTemperatureCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Name of schedule for values of constant temperature. Schedule values replace any " +
    "value specified in the field Constant Temperature.")]
[JsonProperty("constant_temperature_schedule_name")]
public string ConstantTemperatureScheduleName { get; set; } = "";
        

[Description("Optionally used to vary Constant Temperature Coefficient with unitary sine wave")]
[JsonProperty("sinusoidal_variation_of_constant_temperature_coefficient")]
public EmptyNoYes SinusoidalVariationOfConstantTemperatureCoefficient { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Use with sinusoidal variation to define the time period")]
[JsonProperty("period_of_sinusoidal_variation")]
public System.Nullable<float> PeriodOfSinusoidalVariation { get; set; } = (System.Nullable<float>)Single.Parse("24", CultureInfo.InvariantCulture);
        

[Description("This coefficient multiplies the other side temperature result from the previous z" +
    "one timestep")]
[JsonProperty("previous_other_side_temperature_coefficient")]
public System.Nullable<float> PreviousOtherSideTemperatureCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field specifies a lower limit for the other side temperature result. Blank i" +
    "ndicates no limit")]
[JsonProperty("minimum_other_side_temperature_limit")]
public System.Nullable<float> MinimumOtherSideTemperatureLimit { get; set; } = null;
        

[Description("This field specifies an upper limit for the other side temperature result. Blank " +
    "indicates no limit")]
[JsonProperty("maximum_other_side_temperature_limit")]
public System.Nullable<float> MaximumOtherSideTemperatureLimit { get; set; } = null;
    }
    
    [Description("This object sets up modifying the other side conditions for a surface from other " +
        "model results.")]
    [JsonObject("SurfaceProperty:OtherSideConditionsModel")]
    public class SurfaceProperty_OtherSideConditionsModel : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"GapConvectionRadiation provides boundary conditions for convection and linearized thermal radiation across a gap or cavity on the other side of the surface that are modeled separately. UndergroundPipingSystemSurface provides boundary conditions for surfaces in contact with PipingSystem:Underground domains GroundCoupledSurface provides boundary conditions for surfaces in contact with GroundDomain objects ConvectiveUnderwater provides a connection between a surface and an underwater boundary condition defined using a SurfaceProperty:Underwater object")]
[JsonProperty("type_of_modeling")]
public SurfaceProperty_OtherSideConditionsModel_TypeOfModeling TypeOfModeling { get; set; } = (SurfaceProperty_OtherSideConditionsModel_TypeOfModeling)Enum.Parse(typeof(SurfaceProperty_OtherSideConditionsModel_TypeOfModeling), "GapConvectionRadiation");
    }
    
    public enum SurfaceProperty_OtherSideConditionsModel_TypeOfModeling
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConvectiveUnderwater")]
        ConvectiveUnderwater = 1,
        
        [JsonProperty("GapConvectionRadiation")]
        GapConvectionRadiation = 2,
        
        [JsonProperty("GroundCoupledSurface")]
        GroundCoupledSurface = 3,
        
        [JsonProperty("UndergroundPipingSystemSurface")]
        UndergroundPipingSystemSurface = 4,
    }
    
    [Description("This object sets up a convective water boundary condition for a surface The free " +
        "stream temperature and velocity are scheduled. If the free stream velocity is ze" +
        "ro, the surface will naturally convect with the surrounding water.")]
    [JsonObject("SurfaceProperty:Underwater")]
    public class SurfaceProperty_Underwater : BHoMObject, IEnergyPlusClass
    {
        

[Description("This is the distance from the leading edge of the boundary layer development to t" +
    "he centroid of the surface of interest. The value of this field is used as the d" +
    "istance in the Reynolds number for evaluating the local convection coefficient.")]
[JsonProperty("distance_from_surface_centroid_to_leading_edge_of_boundary_layer")]
public System.Nullable<float> DistanceFromSurfaceCentroidToLeadingEdgeOfBoundaryLayer { get; set; } = null;
        

[JsonProperty("free_stream_water_temperature_schedule")]
public string FreeStreamWaterTemperatureSchedule { get; set; } = "";
        

[JsonProperty("free_stream_water_velocity_schedule")]
public string FreeStreamWaterVelocitySchedule { get; set; } = "";
    }
    
    [Description("Refined definition of the foundation surface construction used to inform two-dime" +
        "nsional heat transfer calculated using the Kiva ground heat transfer methodology" +
        ".")]
    [JsonObject("Foundation:Kiva")]
    public class Foundation_Kiva : BHoMObject, IEnergyPlusClass
    {
        

[Description("Indoor air temperature used for Kiva initialization (prior to warmup period) If l" +
    "eft blank, indoor air temperature will be determined based on zone setpoints")]
[JsonProperty("initial_indoor_air_temperature")]
public System.Nullable<float> InitialIndoorAirTemperature { get; set; } = null;
        

[JsonProperty("interior_horizontal_insulation_material_name")]
public string InteriorHorizontalInsulationMaterialName { get; set; } = "";
        

[Description("Distance from the slab bottom to the top of interior horizontal insulation")]
[JsonProperty("interior_horizontal_insulation_depth")]
public System.Nullable<float> InteriorHorizontalInsulationDepth { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Extent of insulation as measured from the wall interior")]
[JsonProperty("interior_horizontal_insulation_width")]
public System.Nullable<float> InteriorHorizontalInsulationWidth { get; set; } = null;
        

[JsonProperty("interior_vertical_insulation_material_name")]
public string InteriorVerticalInsulationMaterialName { get; set; } = "";
        

[Description("Extent of insulation as measured from the wall top to the bottom edge of the inte" +
    "rior vertical insulation")]
[JsonProperty("interior_vertical_insulation_depth")]
public System.Nullable<float> InteriorVerticalInsulationDepth { get; set; } = null;
        

[JsonProperty("exterior_horizontal_insulation_material_name")]
public string ExteriorHorizontalInsulationMaterialName { get; set; } = "";
        

[Description("Distance from the exterior grade to the top of exterior horizontal insulation")]
[JsonProperty("exterior_horizontal_insulation_depth")]
public System.Nullable<float> ExteriorHorizontalInsulationDepth { get; set; } = null;
        

[Description("Extent of insulation as measured from the wall exterior")]
[JsonProperty("exterior_horizontal_insulation_width")]
public System.Nullable<float> ExteriorHorizontalInsulationWidth { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("exterior_vertical_insulation_material_name")]
public string ExteriorVerticalInsulationMaterialName { get; set; } = "";
        

[Description("Extent of insulation as measured from the wall top to the bottom edge of the exte" +
    "rior vertical insulation")]
[JsonProperty("exterior_vertical_insulation_depth")]
public System.Nullable<float> ExteriorVerticalInsulationDepth { get; set; } = null;
        

[Description("Distance from the exterior grade to the wall top")]
[JsonProperty("wall_height_above_grade")]
public System.Nullable<float> WallHeightAboveGrade { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("Distance from the slab bottom to the bottom of the foundation wall")]
[JsonProperty("wall_depth_below_slab")]
public System.Nullable<float> WallDepthBelowSlab { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Defines the below-grade surface construction for slabs. Required if foundation wa" +
    "ll is not exposed to the zone.")]
[JsonProperty("footing_wall_construction_name")]
public string FootingWallConstructionName { get; set; } = "";
        

[JsonProperty("footing_material_name")]
public string FootingMaterialName { get; set; } = "";
        

[Description("Top-to-bottom dimension of the footing (not to be confused with its depth in the " +
    "ground). The width of the footing is defined by the material\'s thickness.")]
[JsonProperty("footing_depth")]
public System.Nullable<float> FootingDepth { get; set; } = (System.Nullable<float>)Single.Parse("0.3", CultureInfo.InvariantCulture);
        

[JsonProperty("blocks")]
public string Blocks { get; set; } = "";
    }
    
    [Description("Settings applied across all Kiva foundation calculations. Object is not required." +
        " If not defined, defaults will be applied.")]
    [JsonObject("Foundation:Kiva:Settings")]
    public class Foundation_Kiva_Settings : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("soil_conductivity")]
public System.Nullable<float> SoilConductivity { get; set; } = (System.Nullable<float>)Single.Parse("1.73", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_density")]
public System.Nullable<float> SoilDensity { get; set; } = (System.Nullable<float>)Single.Parse("1842", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_specific_heat")]
public System.Nullable<float> SoilSpecificHeat { get; set; } = (System.Nullable<float>)Single.Parse("419", CultureInfo.InvariantCulture);
        

[JsonProperty("ground_solar_absorptivity")]
public System.Nullable<float> GroundSolarAbsorptivity { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("ground_thermal_absorptivity")]
public System.Nullable<float> GroundThermalAbsorptivity { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("ground_surface_roughness")]
public System.Nullable<float> GroundSurfaceRoughness { get; set; } = (System.Nullable<float>)Single.Parse("0.03", CultureInfo.InvariantCulture);
        

[JsonProperty("far_field_width")]
public System.Nullable<float> FarFieldWidth { get; set; } = (System.Nullable<float>)Single.Parse("40", CultureInfo.InvariantCulture);
        

[JsonProperty("deep_ground_boundary_condition")]
public Foundation_Kiva_Settings_DeepGroundBoundaryCondition DeepGroundBoundaryCondition { get; set; } = (Foundation_Kiva_Settings_DeepGroundBoundaryCondition)Enum.Parse(typeof(Foundation_Kiva_Settings_DeepGroundBoundaryCondition), "Autoselect");
        

[JsonProperty("deep_ground_depth")]
public string DeepGroundDepth { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("minimum_cell_dimension")]
public System.Nullable<float> MinimumCellDimension { get; set; } = (System.Nullable<float>)Single.Parse("0.02", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_cell_growth_coefficient")]
public System.Nullable<float> MaximumCellGrowthCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("1.5", CultureInfo.InvariantCulture);
        

[JsonProperty("simulation_timestep")]
public Foundation_Kiva_Settings_SimulationTimestep SimulationTimestep { get; set; } = (Foundation_Kiva_Settings_SimulationTimestep)Enum.Parse(typeof(Foundation_Kiva_Settings_SimulationTimestep), "Hourly");
    }
    
    public enum Foundation_Kiva_Settings_DeepGroundBoundaryCondition
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Autoselect")]
        Autoselect = 1,
        
        [JsonProperty("GroundWater")]
        GroundWater = 2,
        
        [JsonProperty("ZeroFlux")]
        ZeroFlux = 3,
    }
    
    public enum Foundation_Kiva_Settings_SimulationTimestep
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Hourly")]
        Hourly = 1,
        
        [JsonProperty("Timestep")]
        Timestep = 2,
    }
    
    [Description(@"Defines the perimeter of a foundation floor that is exposed to the exterior environment through the floor. User may either define the total exposed perimeter, fraction of perimeter exposed or individually define which segments of the floor surface perimeter are exposed.")]
    [JsonObject("SurfaceProperty:ExposedFoundationPerimeter")]
    public class SurfaceProperty_ExposedFoundationPerimeter : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("surface_name")]
public string SurfaceName { get; set; } = "";
        

[Description(@"Choices: TotalExposedPerimeter => total exposed perimeter in meters ExposedPerimeterFraction => fraction of total perimeter that is exposed. Value * Fraction = Total exposed perimeter BySegment => define whether the segment between each set of consecutive vertices of the floor surface is exposed. SUM(exposed segement lengths) = Total exposed perimeter")]
[JsonProperty("exposed_perimeter_calculation_method")]
public SurfaceProperty_ExposedFoundationPerimeter_ExposedPerimeterCalculationMethod ExposedPerimeterCalculationMethod { get; set; } = (SurfaceProperty_ExposedFoundationPerimeter_ExposedPerimeterCalculationMethod)Enum.Parse(typeof(SurfaceProperty_ExposedFoundationPerimeter_ExposedPerimeterCalculationMethod), "BySegment");
        

[JsonProperty("total_exposed_perimeter")]
public System.Nullable<float> TotalExposedPerimeter { get; set; } = null;
        

[JsonProperty("exposed_perimeter_fraction")]
public System.Nullable<float> ExposedPerimeterFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("surfaces")]
public string Surfaces { get; set; } = "";
    }
    
    public enum SurfaceProperty_ExposedFoundationPerimeter_ExposedPerimeterCalculationMethod
    {
        
        [JsonProperty("BySegment")]
        BySegment = 0,
        
        [JsonProperty("ExposedPerimeterFraction")]
        ExposedPerimeterFraction = 1,
        
        [JsonProperty("TotalExposedPerimeter")]
        TotalExposedPerimeter = 2,
    }
    
    [Description(@"Options to change the individual convection model equations for dynamic selection when using AdaptiveConvectiongAlgorithm This object is only needed to make changes to the default model selections for any or all of the surface categories. This object is for the inside face, the side of the surface facing a thermal zone.")]
    [JsonObject("SurfaceConvectionAlgorithm:Inside:AdaptiveModelSelections")]
    public class SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections : BHoMObject, IEnergyPlusClass
    {
        

[Description("Applies to zone with no HVAC or when HVAC is off This is for vertical walls")]
[JsonProperty("simple_buoyancy_vertical_wall_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyVerticalWallEquationSource SimpleBuoyancyVerticalWallEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyVerticalWallEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyVerticalWallEquationSource), "FohannoPolidoriVerticalWall");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("simple_buoyancy_vertical_wall_user_curve_name")]
public string SimpleBuoyancyVerticalWallUserCurveName { get; set; } = "";
        

[Description("Applies to zone with no HVAC or when HVAC is off This is for horizontal surfaces " +
    "with heat flow directed for stable thermal stratification")]
[JsonProperty("simple_buoyancy_stable_horizontal_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyStableHorizontalEquationSource SimpleBuoyancyStableHorizontalEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyStableHorizontalEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyStableHorizontalEquationSource), "AlamdariHammondStableHorizontal");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("simple_buoyancy_stable_horizontal_equation_user_curve_name")]
public string SimpleBuoyancyStableHorizontalEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with no HVAC or when HVAC is off This is for passive horizontal s" +
    "urfaces with heat flow for unstable thermal stratification")]
[JsonProperty("simple_buoyancy_unstable_horizontal_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyUnstableHorizontalEquationSource SimpleBuoyancyUnstableHorizontalEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyUnstableHorizontalEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyUnstableHorizontalEquationSource), "AlamdariHammondUnstableHorizontal");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("simple_buoyancy_unstable_horizontal_equation_user_curve_name")]
public string SimpleBuoyancyUnstableHorizontalEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with no HVAC or when HVAC is off This is for tilted surfaces with" +
    " heat flow for stable thermal stratification")]
[JsonProperty("simple_buoyancy_stable_tilted_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyStableTiltedEquationSource SimpleBuoyancyStableTiltedEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyStableTiltedEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyStableTiltedEquationSource), "WaltonStableHorizontalOrTilt");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("simple_buoyancy_stable_tilted_equation_user_curve_name")]
public string SimpleBuoyancyStableTiltedEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with no HVAC or when HVAC is off This is for tilted surfaces with" +
    " heat flow for unstable thermal stratification")]
[JsonProperty("simple_buoyancy_unstable_tilted_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyUnstableTiltedEquationSource SimpleBuoyancyUnstableTiltedEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyUnstableTiltedEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyUnstableTiltedEquationSource), "WaltonUnstableHorizontalOrTilt");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("simple_buoyancy_unstable_tilted_equation_user_curve_name")]
public string SimpleBuoyancyUnstableTiltedEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with no HVAC or when HVAC is off This is for all window surfaces")]
[JsonProperty("simple_buoyancy_windows_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyWindowsEquationSource SimpleBuoyancyWindowsEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyWindowsEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyWindowsEquationSource), "ISO15099Windows");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("simple_buoyancy_windows_equation_user_curve_name")]
public string SimpleBuoyancyWindowsEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with in-floor heating and/or in-ceiling cooling This is for verti" +
    "cal walls")]
[JsonProperty("floor_heat_ceiling_cool_vertical_wall_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolVerticalWallEquationSource FloorHeatCeilingCoolVerticalWallEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolVerticalWallEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolVerticalWallEquationSource), "KhalifaEq3WallAwayFromHeat");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("floor_heat_ceiling_cool_vertical_wall_equation_user_curve_name")]
public string FloorHeatCeilingCoolVerticalWallEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with in-floor heating and/or in-ceiling cooling This is for passi" +
    "ve horizontal surfaces with heat flow for stable thermal stratification")]
[JsonProperty("floor_heat_ceiling_cool_stable_horizontal_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolStableHorizontalEquationSource FloorHeatCeilingCoolStableHorizontalEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolStableHorizontalEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolStableHorizontalEquationSource), "AlamdariHammondStableHorizontal");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("floor_heat_ceiling_cool_stable_horizontal_equation_user_curve_name")]
public string FloorHeatCeilingCoolStableHorizontalEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with in-floor heating and/or in-ceiling cooling This is for passi" +
    "ve horizontal surfaces with heat flow for unstable thermal stratification")]
[JsonProperty("floor_heat_ceiling_cool_unstable_horizontal_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolUnstableHorizontalEquationSource FloorHeatCeilingCoolUnstableHorizontalEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolUnstableHorizontalEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolUnstableHorizontalEquationSource), "KhalifaEq4CeilingAwayFromHeat");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("floor_heat_ceiling_cool_unstable_horizontal_equation_user_curve_name")]
public string FloorHeatCeilingCoolUnstableHorizontalEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with in-floor heating and/or in-ceiling cooling This is for a flo" +
    "or with active heating elements")]
[JsonProperty("floor_heat_ceiling_cool_heated_floor_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolHeatedFloorEquationSource FloorHeatCeilingCoolHeatedFloorEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolHeatedFloorEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolHeatedFloorEquationSource), "AwbiHattonHeatedFloor");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("floor_heat_ceiling_cool_heated_floor_equation_user_curve_name")]
public string FloorHeatCeilingCoolHeatedFloorEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with in-floor heating and/or in-ceiling cooling This is for a cei" +
    "ling with active cooling elements")]
[JsonProperty("floor_heat_ceiling_cool_chilled_ceiling_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolChilledCeilingEquationSource FloorHeatCeilingCoolChilledCeilingEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolChilledCeilingEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolChilledCeilingEquationSource), "KaradagChilledCeiling");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("floor_heat_ceiling_cool_chilled_ceiling_equation_user_curve_name")]
public string FloorHeatCeilingCoolChilledCeilingEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with in-floor heating and/or in-ceiling cooling This is for tilte" +
    "d surfaces with heat flow for stable thermal stratification")]
[JsonProperty("floor_heat_ceiling_cool_stable_tilted_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolStableTiltedEquationSource FloorHeatCeilingCoolStableTiltedEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolStableTiltedEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolStableTiltedEquationSource), "WaltonStableHorizontalOrTilt");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("floor_heat_ceiling_cool_stable_tilted_equation_user_curve_name")]
public string FloorHeatCeilingCoolStableTiltedEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with in-floor heating and/or in-ceiling cooling This is for tilte" +
    "d surfaces with heat flow for unstable thermal stratification")]
[JsonProperty("floor_heat_ceiling_cool_unstable_tilted_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolUnstableTiltedEquationSource FloorHeatCeilingCoolUnstableTiltedEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolUnstableTiltedEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolUnstableTiltedEquationSource), "WaltonUnstableHorizontalOrTilt");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("floor_heat_ceiling_cool_unstable_tilted_equation_user_curve_name")]
public string FloorHeatCeilingCoolUnstableTiltedEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with in-floor heating and/or in-ceiling cooling This is for all w" +
    "indow surfaces")]
[JsonProperty("floor_heat_ceiling_cool_window_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolWindowEquationSource FloorHeatCeilingCoolWindowEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolWindowEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolWindowEquationSource), "ISO15099Windows");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("floor_heat_ceiling_cool_window_equation_user_curve_name")]
public string FloorHeatCeilingCoolWindowEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with in-wall panel heating This is for vertical walls that are no" +
    "t actively heated")]
[JsonProperty("wall_panel_heating_vertical_wall_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingVerticalWallEquationSource WallPanelHeatingVerticalWallEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingVerticalWallEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingVerticalWallEquationSource), "KhalifaEq6NonHeatedWalls");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("wall_panel_heating_vertical_wall_equation_user_curve_name")]
public string WallPanelHeatingVerticalWallEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with in-wall panel heating This is for vertical walls that are be" +
    "ing actively heated")]
[JsonProperty("wall_panel_heating_heated_wall_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingHeatedWallEquationSource WallPanelHeatingHeatedWallEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingHeatedWallEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingHeatedWallEquationSource), "AwbiHattonHeatedWall");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("wall_panel_heating_heated_wall_equation_user_curve_name")]
public string WallPanelHeatingHeatedWallEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with in-wall panel heating This is for horizontal surfaces with h" +
    "eat flow directed for stable thermal stratification")]
[JsonProperty("wall_panel_heating_stable_horizontal_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingStableHorizontalEquationSource WallPanelHeatingStableHorizontalEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingStableHorizontalEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingStableHorizontalEquationSource), "AlamdariHammondStableHorizontal");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("wall_panel_heating_stable_horizontal_equation_user_curve_name")]
public string WallPanelHeatingStableHorizontalEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with in-wall panel heating This is for horizontal surfaces with h" +
    "eat flow directed for unstable thermal stratification")]
[JsonProperty("wall_panel_heating_unstable_horizontal_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingUnstableHorizontalEquationSource WallPanelHeatingUnstableHorizontalEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingUnstableHorizontalEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingUnstableHorizontalEquationSource), "KhalifaEq7Ceiling");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("wall_panel_heating_unstable_horizontal_equation_user_curve_name")]
public string WallPanelHeatingUnstableHorizontalEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with in-wall panel heating This is for tilted surfaces with heat " +
    "flow for stable thermal stratification")]
[JsonProperty("wall_panel_heating_stable_tilted_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingStableTiltedEquationSource WallPanelHeatingStableTiltedEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingStableTiltedEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingStableTiltedEquationSource), "WaltonStableHorizontalOrTilt");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("wall_panel_heating_stable_tilted_equation_user_curve_name")]
public string WallPanelHeatingStableTiltedEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with in-wall panel heating This is for tilted surfaces with heat " +
    "flow for unstable thermal stratification")]
[JsonProperty("wall_panel_heating_unstable_tilted_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingUnstableTiltedEquationSource WallPanelHeatingUnstableTiltedEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingUnstableTiltedEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingUnstableTiltedEquationSource), "WaltonUnstableHorizontalOrTilt");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("wall_panel_heating_unstable_tilted_equation_user_curve_name")]
public string WallPanelHeatingUnstableTiltedEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with in-wall panel heating This is for all window surfaces")]
[JsonProperty("wall_panel_heating_window_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingWindowEquationSource WallPanelHeatingWindowEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingWindowEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingWindowEquationSource), "ISO15099Windows");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("wall_panel_heating_window_equation_user_curve_name")]
public string WallPanelHeatingWindowEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with convective heater This is for vertical walls not directly af" +
    "fected by heater")]
[JsonProperty("convective_zone_heater_vertical_wall_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterVerticalWallEquationSource ConvectiveZoneHeaterVerticalWallEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterVerticalWallEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterVerticalWallEquationSource), "FohannoPolidoriVerticalWall");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("convective_zone_heater_vertical_wall_equation_user_curve_name")]
public string ConvectiveZoneHeaterVerticalWallEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with convective heater This is for vertical walls that are direct" +
    "ly affected by heater Walls are considered \"near\" when listed in field set for F" +
    "raction of Radiant Energy to Surface")]
[JsonProperty("convective_zone_heater_vertical_walls_near_heater_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterVerticalWallsNearHeaterEquationSource ConvectiveZoneHeaterVerticalWallsNearHeaterEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterVerticalWallsNearHeaterEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterVerticalWallsNearHeaterEquationSource), "KhalifaEq5WallNearHeat");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("convective_zone_heater_vertical_walls_near_heater_equation_user_curve_name")]
public string ConvectiveZoneHeaterVerticalWallsNearHeaterEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with convective heater This is for horizontal surfaces with heat " +
    "flow directed for stable thermal stratification")]
[JsonProperty("convective_zone_heater_stable_horizontal_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterStableHorizontalEquationSource ConvectiveZoneHeaterStableHorizontalEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterStableHorizontalEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterStableHorizontalEquationSource), "AlamdariHammondStableHorizontal");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("convective_zone_heater_stable_horizontal_equation_user_curve_name")]
public string ConvectiveZoneHeaterStableHorizontalEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with convective heater This is for horizontal surfaces with heat " +
    "flow directed for unstable thermal stratification")]
[JsonProperty("convective_zone_heater_unstable_horizontal_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterUnstableHorizontalEquationSource ConvectiveZoneHeaterUnstableHorizontalEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterUnstableHorizontalEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterUnstableHorizontalEquationSource), "KhalifaEq7Ceiling");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("convective_zone_heater_unstable_horizontal_equation_user_curve_name")]
public string ConvectiveZoneHeaterUnstableHorizontalEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with convective heater This is for tilted surfaces with heat flow" +
    " for stable thermal stratification")]
[JsonProperty("convective_zone_heater_stable_tilted_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterStableTiltedEquationSource ConvectiveZoneHeaterStableTiltedEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterStableTiltedEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterStableTiltedEquationSource), "WaltonStableHorizontalOrTilt");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("convective_zone_heater_stable_tilted_equation_user_curve_name")]
public string ConvectiveZoneHeaterStableTiltedEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with convective heater This is for tilted surfaces with heat flow" +
    " for unstable thermal stratification")]
[JsonProperty("convective_zone_heater_unstable_tilted_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterUnstableTiltedEquationSource ConvectiveZoneHeaterUnstableTiltedEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterUnstableTiltedEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterUnstableTiltedEquationSource), "WaltonUnstableHorizontalOrTilt");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("convective_zone_heater_unstable_tilted_equation_user_curve_name")]
public string ConvectiveZoneHeaterUnstableTiltedEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with convective heater This is for all window surfaces")]
[JsonProperty("convective_zone_heater_windows_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterWindowsEquationSource ConvectiveZoneHeaterWindowsEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterWindowsEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterWindowsEquationSource), "ISO15099Windows");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("convective_zone_heater_windows_equation_user_curve_name")]
public string ConvectiveZoneHeaterWindowsEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with mechanical forced central air with diffusers This is for all" +
    " wall surfaces")]
[JsonProperty("central_air_diffuser_wall_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_CentralAirDiffuserWallEquationSource CentralAirDiffuserWallEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_CentralAirDiffuserWallEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_CentralAirDiffuserWallEquationSource), "GoldsteinNovoselacCeilingDiffuserWalls");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("central_air_diffuser_wall_equation_user_curve_name")]
public string CentralAirDiffuserWallEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with mechanical forced central air with diffusers This is for all" +
    " ceiling surfaces")]
[JsonProperty("central_air_diffuser_ceiling_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_CentralAirDiffuserCeilingEquationSource CentralAirDiffuserCeilingEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_CentralAirDiffuserCeilingEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_CentralAirDiffuserCeilingEquationSource), "FisherPedersenCeilingDiffuserCeiling");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("central_air_diffuser_ceiling_equation_user_curve_name")]
public string CentralAirDiffuserCeilingEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with mechanical forced central air with diffusers This is for all" +
    " floor surfaces")]
[JsonProperty("central_air_diffuser_floor_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_CentralAirDiffuserFloorEquationSource CentralAirDiffuserFloorEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_CentralAirDiffuserFloorEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_CentralAirDiffuserFloorEquationSource), "GoldsteinNovoselacCeilingDiffuserFloor");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("central_air_diffuser_floor_equation_user_curve_name")]
public string CentralAirDiffuserFloorEquationUserCurveName { get; set; } = "";
        

[Description("Applies to zone with mechanical forced central air with diffusers This is for all" +
    " window surfaces")]
[JsonProperty("central_air_diffuser_window_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_CentralAirDiffuserWindowEquationSource CentralAirDiffuserWindowEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_CentralAirDiffuserWindowEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_CentralAirDiffuserWindowEquationSource), "GoldsteinNovoselacCeilingDiffuserWindow");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("central_air_diffuser_window_equation_user_curve_name")]
public string CentralAirDiffuserWindowEquationUserCurveName { get; set; } = "";
        

[Description("reference choice fields")]
[JsonProperty("mechanical_zone_fan_circulation_vertical_wall_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationVerticalWallEquationSource MechanicalZoneFanCirculationVerticalWallEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationVerticalWallEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationVerticalWallEquationSource), "KhalifaEq3WallAwayFromHeat");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("mechanical_zone_fan_circulation_vertical_wall_equation_user_curve_name")]
public string MechanicalZoneFanCirculationVerticalWallEquationUserCurveName { get; set; } = "";
        

[Description("reference choice fields")]
[JsonProperty("mechanical_zone_fan_circulation_stable_horizontal_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationStableHorizontalEquationSource MechanicalZoneFanCirculationStableHorizontalEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationStableHorizontalEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationStableHorizontalEquationSource), "AlamdariHammondStableHorizontal");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("mechanical_zone_fan_circulation_stable_horizontal_equation_user_curve_name")]
public string MechanicalZoneFanCirculationStableHorizontalEquationUserCurveName { get; set; } = "";
        

[Description("reference choice fields")]
[JsonProperty("mechanical_zone_fan_circulation_unstable_horizontal_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationUnstableHorizontalEquationSource MechanicalZoneFanCirculationUnstableHorizontalEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationUnstableHorizontalEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationUnstableHorizontalEquationSource), "KhalifaEq4CeilingAwayFromHeat");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("mechanical_zone_fan_circulation_unstable_horizontal_equation_user_curve_name")]
public string MechanicalZoneFanCirculationUnstableHorizontalEquationUserCurveName { get; set; } = "";
        

[Description("reference choice fields")]
[JsonProperty("mechanical_zone_fan_circulation_stable_tilted_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationStableTiltedEquationSource MechanicalZoneFanCirculationStableTiltedEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationStableTiltedEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationStableTiltedEquationSource), "WaltonStableHorizontalOrTilt");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("mechanical_zone_fan_circulation_stable_tilted_equation_user_curve_name")]
public string MechanicalZoneFanCirculationStableTiltedEquationUserCurveName { get; set; } = "";
        

[Description("reference choice fields")]
[JsonProperty("mechanical_zone_fan_circulation_unstable_tilted_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationUnstableTiltedEquationSource MechanicalZoneFanCirculationUnstableTiltedEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationUnstableTiltedEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationUnstableTiltedEquationSource), "WaltonUnstableHorizontalOrTilt");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("mechanical_zone_fan_circulation_unstable_tilted_equation_user_curve_name")]
public string MechanicalZoneFanCirculationUnstableTiltedEquationUserCurveName { get; set; } = "";
        

[Description("reference choice fields")]
[JsonProperty("mechanical_zone_fan_circulation_window_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationWindowEquationSource MechanicalZoneFanCirculationWindowEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationWindowEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationWindowEquationSource), "ISO15099Windows");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("mechanical_zone_fan_circulation_window_equation_user_curve_name")]
public string MechanicalZoneFanCirculationWindowEquationUserCurveName { get; set; } = "";
        

[Description("reference choice fields")]
[JsonProperty("mixed_regime_buoyancy_assisting_flow_on_walls_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeBuoyancyAssistingFlowOnWallsEquationSource MixedRegimeBuoyancyAssistingFlowOnWallsEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeBuoyancyAssistingFlowOnWallsEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeBuoyancyAssistingFlowOnWallsEquationSource), "BeausoleilMorrisonMixedAssistedWall");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("mixed_regime_buoyancy_assisting_flow_on_walls_equation_user_curve_name")]
public string MixedRegimeBuoyancyAssistingFlowOnWallsEquationUserCurveName { get; set; } = "";
        

[Description("reference choice fields")]
[JsonProperty("mixed_regime_buoyancy_opposing_flow_on_walls_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeBuoyancyOpposingFlowOnWallsEquationSource MixedRegimeBuoyancyOpposingFlowOnWallsEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeBuoyancyOpposingFlowOnWallsEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeBuoyancyOpposingFlowOnWallsEquationSource), "BeausoleilMorrisonMixedOpposingWall");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("mixed_regime_buoyancy_opposing_flow_on_walls_equation_user_curve_name")]
public string MixedRegimeBuoyancyOpposingFlowOnWallsEquationUserCurveName { get; set; } = "";
        

[Description("reference choice fields")]
[JsonProperty("mixed_regime_stable_floor_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeStableFloorEquationSource MixedRegimeStableFloorEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeStableFloorEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeStableFloorEquationSource), "BeausoleilMorrisonMixedStableFloor");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("mixed_regime_stable_floor_equation_user_curve_name")]
public string MixedRegimeStableFloorEquationUserCurveName { get; set; } = "";
        

[Description("reference choice fields")]
[JsonProperty("mixed_regime_unstable_floor_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeUnstableFloorEquationSource MixedRegimeUnstableFloorEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeUnstableFloorEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeUnstableFloorEquationSource), "BeausoleilMorrisonMixedUnstableFloor");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("mixed_regime_unstable_floor_equation_user_curve_name")]
public string MixedRegimeUnstableFloorEquationUserCurveName { get; set; } = "";
        

[Description("reference choice fields")]
[JsonProperty("mixed_regime_stable_ceiling_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeStableCeilingEquationSource MixedRegimeStableCeilingEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeStableCeilingEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeStableCeilingEquationSource), "BeausoleilMorrisonMixedStableCeiling");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("mixed_regime_stable_ceiling_equation_user_curve_name")]
public string MixedRegimeStableCeilingEquationUserCurveName { get; set; } = "";
        

[Description("reference choice fields")]
[JsonProperty("mixed_regime_unstable_ceiling_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeUnstableCeilingEquationSource MixedRegimeUnstableCeilingEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeUnstableCeilingEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeUnstableCeilingEquationSource), "BeausoleilMorrisonMixedUnstableCeiling");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("mixed_regime_unstable_ceiling_equation_user_curve_name")]
public string MixedRegimeUnstableCeilingEquationUserCurveName { get; set; } = "";
        

[Description("reference choice fields")]
[JsonProperty("mixed_regime_window_equation_source")]
public SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeWindowEquationSource MixedRegimeWindowEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeWindowEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeWindowEquationSource), "GoldsteinNovoselacCeilingDiffuserWindow");
        

[Description("The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when " +
    "the previous field is set to UserCurve")]
[JsonProperty("mixed_regime_window_equation_user_curve_name")]
public string MixedRegimeWindowEquationUserCurveName { get; set; } = "";
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyVerticalWallEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 3,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 4,
        
        [JsonProperty("KhalifaEq3WallAwayFromHeat")]
        KhalifaEq3WallAwayFromHeat = 5,
        
        [JsonProperty("KhalifaEq6NonHeatedWalls")]
        KhalifaEq6NonHeatedWalls = 6,
        
        [JsonProperty("UserCurve")]
        UserCurve = 7,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyStableHorizontalEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 3,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyUnstableHorizontalEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 3,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyStableTiltedEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 3,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyUnstableTiltedEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 3,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_SimpleBuoyancyWindowsEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 3,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 4,
        
        [JsonProperty("KaradagChilledCeiling")]
        KaradagChilledCeiling = 5,
        
        [JsonProperty("UserCurve")]
        UserCurve = 6,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolVerticalWallEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 3,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 4,
        
        [JsonProperty("KhalifaEq3WallAwayFromHeat")]
        KhalifaEq3WallAwayFromHeat = 5,
        
        [JsonProperty("UserCurve")]
        UserCurve = 6,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolStableHorizontalEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 3,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolUnstableHorizontalEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("KhalifaEq4CeilingAwayFromHeat")]
        KhalifaEq4CeilingAwayFromHeat = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 4,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolHeatedFloorEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("AwbiHattonHeatedFloor")]
        AwbiHattonHeatedFloor = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 4,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolChilledCeilingEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("KaradagChilledCeiling")]
        KaradagChilledCeiling = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 4,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolStableTiltedEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 4,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolUnstableTiltedEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 4,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_FloorHeatCeilingCoolWindowEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 3,
        
        [JsonProperty("UserCurve")]
        UserCurve = 4,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingVerticalWallEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 3,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 4,
        
        [JsonProperty("KhalifaEq6NonHeatedWalls")]
        KhalifaEq6NonHeatedWalls = 5,
        
        [JsonProperty("UserCurve")]
        UserCurve = 6,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingHeatedWallEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("AwbiHattonHeatedWall")]
        AwbiHattonHeatedWall = 3,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 4,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 5,
        
        [JsonProperty("KhalifaEq5WallNearHeat")]
        KhalifaEq5WallNearHeat = 6,
        
        [JsonProperty("UserCurve")]
        UserCurve = 7,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingStableHorizontalEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 3,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingUnstableHorizontalEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 2,
        
        [JsonProperty("KaradagChilledCeiling")]
        KaradagChilledCeiling = 3,
        
        [JsonProperty("KhalifaEq7Ceiling")]
        KhalifaEq7Ceiling = 4,
        
        [JsonProperty("UserCurve")]
        UserCurve = 5,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 6,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingStableTiltedEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 4,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingUnstableTiltedEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 4,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_WallPanelHeatingWindowEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 3,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 4,
        
        [JsonProperty("UserCurve")]
        UserCurve = 5,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterVerticalWallEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 3,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 4,
        
        [JsonProperty("KhalifaEq3WallAwayFromHeat")]
        KhalifaEq3WallAwayFromHeat = 5,
        
        [JsonProperty("KhalifaEq6NonHeatedWalls")]
        KhalifaEq6NonHeatedWalls = 6,
        
        [JsonProperty("UserCurve")]
        UserCurve = 7,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterVerticalWallsNearHeaterEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("AwbiHattonHeatedWall")]
        AwbiHattonHeatedWall = 3,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 4,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 5,
        
        [JsonProperty("KhalifaEq5WallNearHeat")]
        KhalifaEq5WallNearHeat = 6,
        
        [JsonProperty("UserCurve")]
        UserCurve = 7,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterStableHorizontalEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 3,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterUnstableHorizontalEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("KhalifaEq4CeilingAwayFromHeat")]
        KhalifaEq4CeilingAwayFromHeat = 2,
        
        [JsonProperty("KhalifaEq7Ceiling")]
        KhalifaEq7Ceiling = 3,
        
        [JsonProperty("UserCurve")]
        UserCurve = 4,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 5,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterStableTiltedEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 3,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterUnstableTiltedEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 3,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_ConvectiveZoneHeaterWindowsEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 3,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 4,
        
        [JsonProperty("KhalifaEq3WallAwayFromHeat")]
        KhalifaEq3WallAwayFromHeat = 5,
        
        [JsonProperty("UserCurve")]
        UserCurve = 6,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_CentralAirDiffuserWallEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("BeausoleilMorrisonMixedAssistedWall")]
        BeausoleilMorrisonMixedAssistedWall = 3,
        
        [JsonProperty("BeausoleilMorrisonMixedOpposingWall")]
        BeausoleilMorrisonMixedOpposingWall = 4,
        
        [JsonProperty("FisherPedersenCeilingDiffuserWalls")]
        FisherPedersenCeilingDiffuserWalls = 5,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 6,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWalls")]
        GoldsteinNovoselacCeilingDiffuserWalls = 7,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 8,
        
        [JsonProperty("UserCurve")]
        UserCurve = 9,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_CentralAirDiffuserCeilingEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BeausoleilMorrisonMixedStableCeiling")]
        BeausoleilMorrisonMixedStableCeiling = 1,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableCeiling")]
        BeausoleilMorrisonMixedUnstableCeiling = 2,
        
        [JsonProperty("FisherPedersenCeilingDiffuserCeiling")]
        FisherPedersenCeilingDiffuserCeiling = 3,
        
        [JsonProperty("UserCurve")]
        UserCurve = 4,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_CentralAirDiffuserFloorEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BeausoleilMorrisonMixedStableFloor")]
        BeausoleilMorrisonMixedStableFloor = 1,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableFloor")]
        BeausoleilMorrisonMixedUnstableFloor = 2,
        
        [JsonProperty("FisherPedersenCeilingDiffuserFloor")]
        FisherPedersenCeilingDiffuserFloor = 3,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserFloor")]
        GoldsteinNovoselacCeilingDiffuserFloor = 4,
        
        [JsonProperty("UserCurve")]
        UserCurve = 5,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_CentralAirDiffuserWindowEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("BeausoleilMorrisonMixedAssistedWall")]
        BeausoleilMorrisonMixedAssistedWall = 3,
        
        [JsonProperty("BeausoleilMorrisonMixedOpposingWall")]
        BeausoleilMorrisonMixedOpposingWall = 4,
        
        [JsonProperty("FisherPedersenCeilingDiffuserWalls")]
        FisherPedersenCeilingDiffuserWalls = 5,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 6,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWindow")]
        GoldsteinNovoselacCeilingDiffuserWindow = 7,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 8,
        
        [JsonProperty("UserCurve")]
        UserCurve = 9,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationVerticalWallEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("BeausoleilMorrisonMixedAssistedWall")]
        BeausoleilMorrisonMixedAssistedWall = 3,
        
        [JsonProperty("BeausoleilMorrisonMixedOpposingWall")]
        BeausoleilMorrisonMixedOpposingWall = 4,
        
        [JsonProperty("FisherPedersenCeilingDiffuserWalls")]
        FisherPedersenCeilingDiffuserWalls = 5,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 6,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWalls")]
        GoldsteinNovoselacCeilingDiffuserWalls = 7,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 8,
        
        [JsonProperty("KhalifaEq3WallAwayFromHeat")]
        KhalifaEq3WallAwayFromHeat = 9,
        
        [JsonProperty("UserCurve")]
        UserCurve = 10,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationStableHorizontalEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 3,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationUnstableHorizontalEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("KhalifaEq4CeilingAwayFromHeat")]
        KhalifaEq4CeilingAwayFromHeat = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 4,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationStableTiltedEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("UserCurve")]
        UserCurve = 1,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 2,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationUnstableTiltedEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 3,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MechanicalZoneFanCirculationWindowEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 3,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWindow")]
        GoldsteinNovoselacCeilingDiffuserWindow = 4,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 5,
        
        [JsonProperty("UserCurve")]
        UserCurve = 6,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeBuoyancyAssistingFlowOnWallsEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("BeausoleilMorrisonMixedAssistedWall")]
        BeausoleilMorrisonMixedAssistedWall = 3,
        
        [JsonProperty("FisherPedersenCeilingDiffuserWalls")]
        FisherPedersenCeilingDiffuserWalls = 4,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 5,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWalls")]
        GoldsteinNovoselacCeilingDiffuserWalls = 6,
        
        [JsonProperty("UserCurve")]
        UserCurve = 7,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeBuoyancyOpposingFlowOnWallsEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("BeausoleilMorrisonMixedOpposingWall")]
        BeausoleilMorrisonMixedOpposingWall = 3,
        
        [JsonProperty("FisherPedersenCeilingDiffuserWalls")]
        FisherPedersenCeilingDiffuserWalls = 4,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 5,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWalls")]
        GoldsteinNovoselacCeilingDiffuserWalls = 6,
        
        [JsonProperty("UserCurve")]
        UserCurve = 7,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeStableFloorEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("BeausoleilMorrisonMixedStableFloor")]
        BeausoleilMorrisonMixedStableFloor = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 4,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeUnstableFloorEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableFloor")]
        BeausoleilMorrisonMixedUnstableFloor = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 4,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeStableCeilingEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("BeausoleilMorrisonMixedStableCeiling")]
        BeausoleilMorrisonMixedStableCeiling = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 4,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeUnstableCeilingEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableCeiling")]
        BeausoleilMorrisonMixedUnstableCeiling = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 4,
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections_MixedRegimeWindowEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWindow")]
        GoldsteinNovoselacCeilingDiffuserWindow = 1,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
    }
    
    [Description(@"Options to change the individual convection model equations for dynamic selection when using AdaptiveConvectiongAlgorithm This object is only needed to make changes to the default model selections for any or all of the surface categories. This object is for the outside face, the side of the surface facing away from the thermal zone.")]
    [JsonObject("SurfaceConvectionAlgorithm:Outside:AdaptiveModelSelections")]
    public class SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("wind_convection_windward_vertical_wall_equation_source")]
public SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_WindConvectionWindwardVerticalWallEquationSource WindConvectionWindwardVerticalWallEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_WindConvectionWindwardVerticalWallEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_WindConvectionWindwardVerticalWallEquationSource), "TARPWindward");
        

[Description("The SurfaceConvectionAlgorithm:Outside:UserCurve named in this field is used when" +
    " the previous field is set to UserCurve")]
[JsonProperty("wind_convection_windward_equation_vertical_wall_user_curve_name")]
public string WindConvectionWindwardEquationVerticalWallUserCurveName { get; set; } = "";
        

[JsonProperty("wind_convection_leeward_vertical_wall_equation_source")]
public SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_WindConvectionLeewardVerticalWallEquationSource WindConvectionLeewardVerticalWallEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_WindConvectionLeewardVerticalWallEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_WindConvectionLeewardVerticalWallEquationSource), "TARPLeeward");
        

[Description("The SurfaceConvectionAlgorithm:Outside:UserCurve named in this field is used when" +
    " the previous field is set to UserCurve")]
[JsonProperty("wind_convection_leeward_vertical_wall_equation_user_curve_name")]
public string WindConvectionLeewardVerticalWallEquationUserCurveName { get; set; } = "";
        

[JsonProperty("wind_convection_horizontal_roof_equation_source")]
public SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_WindConvectionHorizontalRoofEquationSource WindConvectionHorizontalRoofEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_WindConvectionHorizontalRoofEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_WindConvectionHorizontalRoofEquationSource), "ClearRoof");
        

[Description("The SurfaceConvectionAlgorithm:Outside:UserCurve named in this field is used when" +
    " the previous field is set to UserCurve")]
[JsonProperty("wind_convection_horizontal_roof_user_curve_name")]
public string WindConvectionHorizontalRoofUserCurveName { get; set; } = "";
        

[Description("This is for vertical walls")]
[JsonProperty("natural_convection_vertical_wall_equation_source")]
public SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_NaturalConvectionVerticalWallEquationSource NaturalConvectionVerticalWallEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_NaturalConvectionVerticalWallEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_NaturalConvectionVerticalWallEquationSource), "ASHRAEVerticalWall");
        

[Description("The SurfaceConvectionAlgorithm:Outside:UserCurve named in this field is used when" +
    " the previous field is set to UserCurve")]
[JsonProperty("natural_convection_vertical_wall_equation_user_curve_name")]
public string NaturalConvectionVerticalWallEquationUserCurveName { get; set; } = "";
        

[Description("This is for horizontal surfaces with heat flow directed for stable thermal strati" +
    "fication")]
[JsonProperty("natural_convection_stable_horizontal_equation_source")]
public SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_NaturalConvectionStableHorizontalEquationSource NaturalConvectionStableHorizontalEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_NaturalConvectionStableHorizontalEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_NaturalConvectionStableHorizontalEquationSource), "WaltonStableHorizontalOrTilt");
        

[Description("The SurfaceConvectionAlgorithm:Outside:UserCurve named in this field is used when" +
    " the previous field is set to UserCurve")]
[JsonProperty("natural_convection_stable_horizontal_equation_user_curve_name")]
public string NaturalConvectionStableHorizontalEquationUserCurveName { get; set; } = "";
        

[JsonProperty("natural_convection_unstable_horizontal_equation_source")]
public SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_NaturalConvectionUnstableHorizontalEquationSource NaturalConvectionUnstableHorizontalEquationSource { get; set; } = (SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_NaturalConvectionUnstableHorizontalEquationSource)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_NaturalConvectionUnstableHorizontalEquationSource), "WaltonUnstableHorizontalOrTilt");
        

[Description("The SurfaceConvectionAlgorithm:Outside:UserCurve named in this field is used when" +
    " the previous field is set to UserCurve")]
[JsonProperty("natural_convection_unstable_horizontal_equation_user_curve_name")]
public string NaturalConvectionUnstableHorizontalEquationUserCurveName { get; set; } = "";
    }
    
    public enum SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_WindConvectionWindwardVerticalWallEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlockenWindward")]
        BlockenWindward = 1,
        
        [JsonProperty("DOE2Windward")]
        DOE2Windward = 2,
        
        [JsonProperty("EmmelVertical")]
        EmmelVertical = 3,
        
        [JsonProperty("McAdams")]
        McAdams = 4,
        
        [JsonProperty("Mitchell")]
        Mitchell = 5,
        
        [JsonProperty("MoWiTTWindward")]
        MoWiTTWindward = 6,
        
        [JsonProperty("NusseltJurges")]
        NusseltJurges = 7,
        
        [JsonProperty("SimpleCombined")]
        SimpleCombined = 8,
        
        [JsonProperty("TARPWindward")]
        TARPWindward = 9,
        
        [JsonProperty("UserCurve")]
        UserCurve = 10,
    }
    
    public enum SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_WindConvectionLeewardVerticalWallEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DOE2Leeward")]
        DOE2Leeward = 1,
        
        [JsonProperty("EmmelVertical")]
        EmmelVertical = 2,
        
        [JsonProperty("McAdams")]
        McAdams = 3,
        
        [JsonProperty("Mitchell")]
        Mitchell = 4,
        
        [JsonProperty("MoWiTTLeeward")]
        MoWiTTLeeward = 5,
        
        [JsonProperty("NusseltJurges")]
        NusseltJurges = 6,
        
        [JsonProperty("SimpleCombined")]
        SimpleCombined = 7,
        
        [JsonProperty("TARPLeeward")]
        TARPLeeward = 8,
        
        [JsonProperty("UserCurve")]
        UserCurve = 9,
    }
    
    public enum SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_WindConvectionHorizontalRoofEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlockenWindward")]
        BlockenWindward = 1,
        
        [JsonProperty("ClearRoof")]
        ClearRoof = 2,
        
        [JsonProperty("DOE2Windward")]
        DOE2Windward = 3,
        
        [JsonProperty("EmmelRoof")]
        EmmelRoof = 4,
        
        [JsonProperty("McAdams")]
        McAdams = 5,
        
        [JsonProperty("Mitchell")]
        Mitchell = 6,
        
        [JsonProperty("MoWiTTWindward")]
        MoWiTTWindward = 7,
        
        [JsonProperty("NusseltJurges")]
        NusseltJurges = 8,
        
        [JsonProperty("SimpleCombined")]
        SimpleCombined = 9,
        
        [JsonProperty("TARPWindward")]
        TARPWindward = 10,
        
        [JsonProperty("UserCurve")]
        UserCurve = 11,
    }
    
    public enum SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_NaturalConvectionVerticalWallEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 3,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 4,
        
        [JsonProperty("None")]
        None = 5,
        
        [JsonProperty("UserCurve")]
        UserCurve = 6,
    }
    
    public enum SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_NaturalConvectionStableHorizontalEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 4,
    }
    
    public enum SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections_NaturalConvectionUnstableHorizontalEquationSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 4,
    }
    
    [Description("Used to describe a custom model equation for surface convection heat transfer coe" +
        "fficient If more than one curve is referenced they are all used and added togeth" +
        "er.")]
    [JsonObject("SurfaceConvectionAlgorithm:Inside:UserCurve")]
    public class SurfaceConvectionAlgorithm_Inside_UserCurve : BHoMObject, IEnergyPlusClass
    {
        

[Description("Controls which temperature is differenced from surface temperature when using the" +
    " Hc value")]
[JsonProperty("reference_temperature_for_convection_heat_transfer")]
public SurfaceConvectionAlgorithm_Inside_UserCurve_ReferenceTemperatureForConvectionHeatTransfer ReferenceTemperatureForConvectionHeatTransfer { get; set; } = (SurfaceConvectionAlgorithm_Inside_UserCurve_ReferenceTemperatureForConvectionHeatTransfer)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_UserCurve_ReferenceTemperatureForConvectionHeatTransfer), "AdjacentAirTemperature");
        

[Description("Curve\'s \"x\" is absolute value of delta-T (Surface temperature minus reference tem" +
    "perature, (C))")]
[JsonProperty("hc_function_of_temperature_difference_curve_name")]
public string HcFunctionOfTemperatureDifferenceCurveName { get; set; } = "";
        

[Description("Curve\'s \"x\" is absolute value of delta-T/Height (Surface temp minus Air temp)/(ve" +
    "rtical length scale), (C/m) when used for an inside face the vertical length sca" +
    "le is the zone\'s interior height")]
[JsonProperty("hc_function_of_temperature_difference_divided_by_height_curve_name")]
public string HcFunctionOfTemperatureDifferenceDividedByHeightCurveName { get; set; } = "";
        

[Description("Curve\'s \"x\" is mechanical ACH (Air Changes per hour from mechanical air system), " +
    "(1/hr)")]
[JsonProperty("hc_function_of_air_change_rate_curve_name")]
public string HcFunctionOfAirChangeRateCurveName { get; set; } = "";
        

[Description("Curve\'s \"x\" is mechanical system air flow rate (m3/s) divided by zone\'s length al" +
    "ong exterior walls (m).")]
[JsonProperty("hc_function_of_air_system_volume_flow_rate_divided_by_zone_perimeter_length_curve" +
    "_name")]
public string HcFunctionOfAirSystemVolumeFlowRateDividedByZonePerimeterLengthCurveName { get; set; } = "";
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_UserCurve_ReferenceTemperatureForConvectionHeatTransfer
    {
        
        [JsonProperty("AdjacentAirTemperature")]
        AdjacentAirTemperature = 0,
        
        [JsonProperty("MeanAirTemperature")]
        MeanAirTemperature = 1,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 2,
    }
    
    [Description("Used to describe a custom model equation for surface convection heat transfer coe" +
        "fficient If more than one curve is referenced they are all used and added togeth" +
        "er.")]
    [JsonObject("SurfaceConvectionAlgorithm:Outside:UserCurve")]
    public class SurfaceConvectionAlgorithm_Outside_UserCurve : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("wind_speed_type_for_curve")]
public SurfaceConvectionAlgorithm_Outside_UserCurve_WindSpeedTypeForCurve WindSpeedTypeForCurve { get; set; } = (SurfaceConvectionAlgorithm_Outside_UserCurve_WindSpeedTypeForCurve)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Outside_UserCurve_WindSpeedTypeForCurve), "HeightAdjust");
        

[Description("Curve\'s \"x\" is wind speed of the type determined in the previous field (m/s)")]
[JsonProperty("hf_function_of_wind_speed_curve_name")]
public string HfFunctionOfWindSpeedCurveName { get; set; } = "";
        

[Description("Curve\'s \"x\" is absolute value of delta-T (Surface temperature minus air temperatu" +
    "re, (C))")]
[JsonProperty("hn_function_of_temperature_difference_curve_name")]
public string HnFunctionOfTemperatureDifferenceCurveName { get; set; } = "";
        

[Description("Curve\'s \"x\" is absolute value of delta-T/Height (Surface temp minus Air temp)/(ve" +
    "rtical length scale), (C/m) when used for an outside face the vertical length sc" +
    "ale is the exterior facade\'s overall height")]
[JsonProperty("hn_function_of_temperature_difference_divided_by_height_curve_name")]
public string HnFunctionOfTemperatureDifferenceDividedByHeightCurveName { get; set; } = "";
    }
    
    public enum SurfaceConvectionAlgorithm_Outside_UserCurve_WindSpeedTypeForCurve
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("HeightAdjust")]
        HeightAdjust = 1,
        
        [JsonProperty("ParallelComponent")]
        ParallelComponent = 2,
        
        [JsonProperty("ParallelComponentHeightAdjust")]
        ParallelComponentHeightAdjust = 3,
        
        [JsonProperty("WeatherFile")]
        WeatherFile = 4,
    }
    
    [Description(@"Allow user settable interior and/or exterior convection coefficients. Note that some other factors may limit the lower bounds for these values, such as for windows, the interior convection coefficient must be >.28, for trombe wall algorithm selection (zone), the interior convection coefficient must be >.1 for TARP interior convection, the lower limit is also .1 Minimum and maximum limits are set in HeatBalanceAlgorithm object. Defaults in HeatBalanceAlgorithm object are [.1,1000].")]
    [JsonObject("SurfaceProperty:ConvectionCoefficients")]
    public class SurfaceProperty_ConvectionCoefficients : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("surface_name")]
public string SurfaceName { get; set; } = "";
        

[JsonProperty("convection_coefficient_1_location")]
public SurfaceProperty_ConvectionCoefficients_ConvectionCoefficient1Location ConvectionCoefficient1Location { get; set; } = (SurfaceProperty_ConvectionCoefficients_ConvectionCoefficient1Location)Enum.Parse(typeof(SurfaceProperty_ConvectionCoefficients_ConvectionCoefficient1Location), "Inside");
        

[JsonProperty("convection_coefficient_1_type")]
public SurfaceProperty_ConvectionCoefficients_ConvectionCoefficient1Type ConvectionCoefficient1Type { get; set; } = (SurfaceProperty_ConvectionCoefficients_ConvectionCoefficient1Type)Enum.Parse(typeof(SurfaceProperty_ConvectionCoefficients_ConvectionCoefficient1Type), "ASHRAEVerticalWall");
        

[Description("used if Convection Type=Value, min and max limits are set in HeatBalanceAlgorithm" +
    " object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
[JsonProperty("convection_coefficient_1")]
public System.Nullable<float> ConvectionCoefficient1 { get; set; } = null;
        

[Description("used if Convection Type=Schedule,  min and max limits are set in HeatBalanceAlgor" +
    "ithm object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
[JsonProperty("convection_coefficient_1_schedule_name")]
public string ConvectionCoefficient1ScheduleName { get; set; } = "";
        

[Description("used if Convection Type = UserCurve")]
[JsonProperty("convection_coefficient_1_user_curve_name")]
public string ConvectionCoefficient1UserCurveName { get; set; } = "";
        

[JsonProperty("convection_coefficient_2_location")]
public SurfaceProperty_ConvectionCoefficients_ConvectionCoefficient2Location ConvectionCoefficient2Location { get; set; } = (SurfaceProperty_ConvectionCoefficients_ConvectionCoefficient2Location)Enum.Parse(typeof(SurfaceProperty_ConvectionCoefficients_ConvectionCoefficient2Location), "Inside");
        

[JsonProperty("convection_coefficient_2_type")]
public SurfaceProperty_ConvectionCoefficients_ConvectionCoefficient2Type ConvectionCoefficient2Type { get; set; } = (SurfaceProperty_ConvectionCoefficients_ConvectionCoefficient2Type)Enum.Parse(typeof(SurfaceProperty_ConvectionCoefficients_ConvectionCoefficient2Type), "ASHRAEVerticalWall");
        

[Description("used if Convection Type=Value, min and max limits are set in HeatBalanceAlgorithm" +
    " object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
[JsonProperty("convection_coefficient_2")]
public System.Nullable<float> ConvectionCoefficient2 { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[Description("used if Convection Type=Schedule,  min and max limits are set in HeatBalanceAlgor" +
    "ithm object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
[JsonProperty("convection_coefficient_2_schedule_name")]
public string ConvectionCoefficient2ScheduleName { get; set; } = "";
        

[Description("used if Convection Type = UserCurve")]
[JsonProperty("convection_coefficient_2_user_curve_name")]
public string ConvectionCoefficient2UserCurveName { get; set; } = "";
    }
    
    public enum SurfaceProperty_ConvectionCoefficients_ConvectionCoefficient1Location
    {
        
        [JsonProperty("Inside")]
        Inside = 0,
        
        [JsonProperty("Outside")]
        Outside = 1,
    }
    
    public enum SurfaceProperty_ConvectionCoefficients_ConvectionCoefficient1Type
    {
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 0,
        
        [JsonProperty("ASTMC1340")]
        ASTMC1340 = 1,
        
        [JsonProperty("AdaptiveConvectionAlgorithm")]
        AdaptiveConvectionAlgorithm = 2,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 3,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 4,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 5,
        
        [JsonProperty("AwbiHattonHeatedFloor")]
        AwbiHattonHeatedFloor = 6,
        
        [JsonProperty("AwbiHattonHeatedWall")]
        AwbiHattonHeatedWall = 7,
        
        [JsonProperty("BeausoleilMorrisonMixedAssistedWall")]
        BeausoleilMorrisonMixedAssistedWall = 8,
        
        [JsonProperty("BeausoleilMorrisonMixedOpposingWall")]
        BeausoleilMorrisonMixedOpposingWall = 9,
        
        [JsonProperty("BeausoleilMorrisonMixedStableCeiling")]
        BeausoleilMorrisonMixedStableCeiling = 10,
        
        [JsonProperty("BeausoleilMorrisonMixedStableFloor")]
        BeausoleilMorrisonMixedStableFloor = 11,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableCeiling")]
        BeausoleilMorrisonMixedUnstableCeiling = 12,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableFloor")]
        BeausoleilMorrisonMixedUnstableFloor = 13,
        
        [JsonProperty("ClearRoof")]
        ClearRoof = 14,
        
        [JsonProperty("DOE-2")]
        DOE2 = 15,
        
        [JsonProperty("EmmelRoof")]
        EmmelRoof = 16,
        
        [JsonProperty("EmmelVertical")]
        EmmelVertical = 17,
        
        [JsonProperty("FisherPedersenCeilingDiffuserCeiling")]
        FisherPedersenCeilingDiffuserCeiling = 18,
        
        [JsonProperty("FisherPedersenCeilingDiffuserFloor")]
        FisherPedersenCeilingDiffuserFloor = 19,
        
        [JsonProperty("FisherPedersenCeilingDiffuserWalls")]
        FisherPedersenCeilingDiffuserWalls = 20,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 21,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserFloor")]
        GoldsteinNovoselacCeilingDiffuserFloor = 22,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWalls")]
        GoldsteinNovoselacCeilingDiffuserWalls = 23,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWindow")]
        GoldsteinNovoselacCeilingDiffuserWindow = 24,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 25,
        
        [JsonProperty("KaradagChilledCeiling")]
        KaradagChilledCeiling = 26,
        
        [JsonProperty("KhalifaEq3WallAwayFromHeat")]
        KhalifaEq3WallAwayFromHeat = 27,
        
        [JsonProperty("KhalifaEq4CeilingAwayFromHeat")]
        KhalifaEq4CeilingAwayFromHeat = 28,
        
        [JsonProperty("KhalifaEq5WallNearHeat")]
        KhalifaEq5WallNearHeat = 29,
        
        [JsonProperty("KhalifaEq6NonHeatedWalls")]
        KhalifaEq6NonHeatedWalls = 30,
        
        [JsonProperty("KhalifaEq7Ceiling")]
        KhalifaEq7Ceiling = 31,
        
        [JsonProperty("McAdams")]
        McAdams = 32,
        
        [JsonProperty("Mitchell")]
        Mitchell = 33,
        
        [JsonProperty("MoWitt")]
        MoWitt = 34,
        
        [JsonProperty("NusseltJurges")]
        NusseltJurges = 35,
        
        [JsonProperty("Schedule")]
        Schedule = 36,
        
        [JsonProperty("Simple")]
        Simple = 37,
        
        [JsonProperty("SimpleCombined")]
        SimpleCombined = 38,
        
        [JsonProperty("TARP")]
        TARP = 39,
        
        [JsonProperty("UserCurve")]
        UserCurve = 40,
        
        [JsonProperty("Value")]
        Value = 41,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 42,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 43,
    }
    
    public enum SurfaceProperty_ConvectionCoefficients_ConvectionCoefficient2Location
    {
        
        [JsonProperty("Inside")]
        Inside = 0,
        
        [JsonProperty("Outside")]
        Outside = 1,
    }
    
    public enum SurfaceProperty_ConvectionCoefficients_ConvectionCoefficient2Type
    {
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 0,
        
        [JsonProperty("ASTMC1340")]
        ASTMC1340 = 1,
        
        [JsonProperty("AdaptiveConvectionAlgorithm")]
        AdaptiveConvectionAlgorithm = 2,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 3,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 4,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 5,
        
        [JsonProperty("AwbiHattonHeatedFloor")]
        AwbiHattonHeatedFloor = 6,
        
        [JsonProperty("AwbiHattonHeatedWall")]
        AwbiHattonHeatedWall = 7,
        
        [JsonProperty("BeausoleilMorrisonMixedAssistedWall")]
        BeausoleilMorrisonMixedAssistedWall = 8,
        
        [JsonProperty("BeausoleilMorrisonMixedOpposingWall")]
        BeausoleilMorrisonMixedOpposingWall = 9,
        
        [JsonProperty("BeausoleilMorrisonMixedStableCeiling")]
        BeausoleilMorrisonMixedStableCeiling = 10,
        
        [JsonProperty("BeausoleilMorrisonMixedStableFloor")]
        BeausoleilMorrisonMixedStableFloor = 11,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableCeiling")]
        BeausoleilMorrisonMixedUnstableCeiling = 12,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableFloor")]
        BeausoleilMorrisonMixedUnstableFloor = 13,
        
        [JsonProperty("ClearRoof")]
        ClearRoof = 14,
        
        [JsonProperty("DOE-2")]
        DOE2 = 15,
        
        [JsonProperty("EmmelRoof")]
        EmmelRoof = 16,
        
        [JsonProperty("EmmelVertical")]
        EmmelVertical = 17,
        
        [JsonProperty("FisherPedersenCeilingDiffuserCeiling")]
        FisherPedersenCeilingDiffuserCeiling = 18,
        
        [JsonProperty("FisherPedersenCeilingDiffuserFloor")]
        FisherPedersenCeilingDiffuserFloor = 19,
        
        [JsonProperty("FisherPedersenCeilingDiffuserWalls")]
        FisherPedersenCeilingDiffuserWalls = 20,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 21,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserFloor")]
        GoldsteinNovoselacCeilingDiffuserFloor = 22,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWalls")]
        GoldsteinNovoselacCeilingDiffuserWalls = 23,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWindow")]
        GoldsteinNovoselacCeilingDiffuserWindow = 24,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 25,
        
        [JsonProperty("KaradagChilledCeiling")]
        KaradagChilledCeiling = 26,
        
        [JsonProperty("KhalifaEq3WallAwayFromHeat")]
        KhalifaEq3WallAwayFromHeat = 27,
        
        [JsonProperty("KhalifaEq4CeilingAwayFromHeat")]
        KhalifaEq4CeilingAwayFromHeat = 28,
        
        [JsonProperty("KhalifaEq5WallNearHeat")]
        KhalifaEq5WallNearHeat = 29,
        
        [JsonProperty("KhalifaEq6NonHeatedWalls")]
        KhalifaEq6NonHeatedWalls = 30,
        
        [JsonProperty("KhalifaEq7Ceiling")]
        KhalifaEq7Ceiling = 31,
        
        [JsonProperty("McAdams")]
        McAdams = 32,
        
        [JsonProperty("Mitchell")]
        Mitchell = 33,
        
        [JsonProperty("MoWitt")]
        MoWitt = 34,
        
        [JsonProperty("NusseltJurges")]
        NusseltJurges = 35,
        
        [JsonProperty("Schedule")]
        Schedule = 36,
        
        [JsonProperty("Simple")]
        Simple = 37,
        
        [JsonProperty("SimpleCombined")]
        SimpleCombined = 38,
        
        [JsonProperty("TARP")]
        TARP = 39,
        
        [JsonProperty("UserCurve")]
        UserCurve = 40,
        
        [JsonProperty("Value")]
        Value = 41,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 42,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 43,
    }
    
    [Description(@"Allow user settable interior and/or exterior convection coefficients. Note that some other factors may limit the lower bounds for these values, such as for windows, the interior convection coefficient must be >.28, for trombe wall algorithm selection (zone), the interior convection coefficient must be >.1 for TARP interior convection, the lower limit is also .1 Minimum and maximum limits are set in HeatBalanceAlgorithm object. Defaults in HeatBalanceAlgorithm object are [.1,1000].")]
    [JsonObject("SurfaceProperty:ConvectionCoefficients:MultipleSurface")]
    public class SurfaceProperty_ConvectionCoefficients_MultipleSurface : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("surface_type")]
public SurfaceProperty_ConvectionCoefficients_MultipleSurface_SurfaceType SurfaceType { get; set; } = (SurfaceProperty_ConvectionCoefficients_MultipleSurface_SurfaceType)Enum.Parse(typeof(SurfaceProperty_ConvectionCoefficients_MultipleSurface_SurfaceType), "AllExteriorFloors");
        

[JsonProperty("convection_coefficient_1_location")]
public SurfaceProperty_ConvectionCoefficients_MultipleSurface_ConvectionCoefficient1Location ConvectionCoefficient1Location { get; set; } = (SurfaceProperty_ConvectionCoefficients_MultipleSurface_ConvectionCoefficient1Location)Enum.Parse(typeof(SurfaceProperty_ConvectionCoefficients_MultipleSurface_ConvectionCoefficient1Location), "Inside");
        

[JsonProperty("convection_coefficient_1_type")]
public SurfaceProperty_ConvectionCoefficients_MultipleSurface_ConvectionCoefficient1Type ConvectionCoefficient1Type { get; set; } = (SurfaceProperty_ConvectionCoefficients_MultipleSurface_ConvectionCoefficient1Type)Enum.Parse(typeof(SurfaceProperty_ConvectionCoefficients_MultipleSurface_ConvectionCoefficient1Type), "ASHRAEVerticalWall");
        

[Description("used if Convection Type=Value, min and max limits are set in HeatBalanceAlgorithm" +
    " object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
[JsonProperty("convection_coefficient_1")]
public System.Nullable<float> ConvectionCoefficient1 { get; set; } = null;
        

[Description("used if Convection Type=Schedule,  min and max limits are set in HeatBalanceAlgor" +
    "ithm object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
[JsonProperty("convection_coefficient_1_schedule_name")]
public string ConvectionCoefficient1ScheduleName { get; set; } = "";
        

[Description("used if Convection Type = UserCurve")]
[JsonProperty("convection_coefficient_1_user_curve_name")]
public string ConvectionCoefficient1UserCurveName { get; set; } = "";
        

[JsonProperty("convection_coefficient_2_location")]
public SurfaceProperty_ConvectionCoefficients_MultipleSurface_ConvectionCoefficient2Location ConvectionCoefficient2Location { get; set; } = (SurfaceProperty_ConvectionCoefficients_MultipleSurface_ConvectionCoefficient2Location)Enum.Parse(typeof(SurfaceProperty_ConvectionCoefficients_MultipleSurface_ConvectionCoefficient2Location), "Inside");
        

[JsonProperty("convection_coefficient_2_type")]
public SurfaceProperty_ConvectionCoefficients_MultipleSurface_ConvectionCoefficient2Type ConvectionCoefficient2Type { get; set; } = (SurfaceProperty_ConvectionCoefficients_MultipleSurface_ConvectionCoefficient2Type)Enum.Parse(typeof(SurfaceProperty_ConvectionCoefficients_MultipleSurface_ConvectionCoefficient2Type), "ASHRAEVerticalWall");
        

[Description("used if Convection Type=Value, min and max limits are set in HeatBalanceAlgorithm" +
    " object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
[JsonProperty("convection_coefficient_2")]
public System.Nullable<float> ConvectionCoefficient2 { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[Description("used if Convection Type=Schedule,  min and max limits are set in HeatBalanceAlgor" +
    "ithm object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
[JsonProperty("convection_coefficient_2_schedule_name")]
public string ConvectionCoefficient2ScheduleName { get; set; } = "";
        

[Description("used if Convection Type = UserCurve")]
[JsonProperty("convection_coefficient_2_user_curve_name")]
public string ConvectionCoefficient2UserCurveName { get; set; } = "";
    }
    
    public enum SurfaceProperty_ConvectionCoefficients_MultipleSurface_SurfaceType
    {
        
        [JsonProperty("AllExteriorFloors")]
        AllExteriorFloors = 0,
        
        [JsonProperty("AllExteriorRoofs")]
        AllExteriorRoofs = 1,
        
        [JsonProperty("AllExteriorSurfaces")]
        AllExteriorSurfaces = 2,
        
        [JsonProperty("AllExteriorWalls")]
        AllExteriorWalls = 3,
        
        [JsonProperty("AllExteriorWindows")]
        AllExteriorWindows = 4,
        
        [JsonProperty("AllInteriorCeilings")]
        AllInteriorCeilings = 5,
        
        [JsonProperty("AllInteriorFloors")]
        AllInteriorFloors = 6,
        
        [JsonProperty("AllInteriorSurfaces")]
        AllInteriorSurfaces = 7,
        
        [JsonProperty("AllInteriorWalls")]
        AllInteriorWalls = 8,
        
        [JsonProperty("AllInteriorWindows")]
        AllInteriorWindows = 9,
    }
    
    public enum SurfaceProperty_ConvectionCoefficients_MultipleSurface_ConvectionCoefficient1Location
    {
        
        [JsonProperty("Inside")]
        Inside = 0,
        
        [JsonProperty("Outside")]
        Outside = 1,
    }
    
    public enum SurfaceProperty_ConvectionCoefficients_MultipleSurface_ConvectionCoefficient1Type
    {
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 0,
        
        [JsonProperty("ASTMC1340")]
        ASTMC1340 = 1,
        
        [JsonProperty("AdaptiveConvectionAlgorithm")]
        AdaptiveConvectionAlgorithm = 2,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 3,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 4,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 5,
        
        [JsonProperty("AwbiHattonHeatedFloor")]
        AwbiHattonHeatedFloor = 6,
        
        [JsonProperty("AwbiHattonHeatedWall")]
        AwbiHattonHeatedWall = 7,
        
        [JsonProperty("BeausoleilMorrisonMixedAssistedWall")]
        BeausoleilMorrisonMixedAssistedWall = 8,
        
        [JsonProperty("BeausoleilMorrisonMixedOpposingWall")]
        BeausoleilMorrisonMixedOpposingWall = 9,
        
        [JsonProperty("BeausoleilMorrisonMixedStableCeiling")]
        BeausoleilMorrisonMixedStableCeiling = 10,
        
        [JsonProperty("BeausoleilMorrisonMixedStableFloor")]
        BeausoleilMorrisonMixedStableFloor = 11,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableCeiling")]
        BeausoleilMorrisonMixedUnstableCeiling = 12,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableFloor")]
        BeausoleilMorrisonMixedUnstableFloor = 13,
        
        [JsonProperty("BlockenWindard")]
        BlockenWindard = 14,
        
        [JsonProperty("ClearRoof")]
        ClearRoof = 15,
        
        [JsonProperty("DOE-2")]
        DOE2 = 16,
        
        [JsonProperty("EmmelRoof")]
        EmmelRoof = 17,
        
        [JsonProperty("EmmelVertical")]
        EmmelVertical = 18,
        
        [JsonProperty("FisherPedersenCeilingDiffuserCeiling")]
        FisherPedersenCeilingDiffuserCeiling = 19,
        
        [JsonProperty("FisherPedersenCeilingDiffuserFloor")]
        FisherPedersenCeilingDiffuserFloor = 20,
        
        [JsonProperty("FisherPedersenCeilingDiffuserWalls")]
        FisherPedersenCeilingDiffuserWalls = 21,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 22,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserFloor")]
        GoldsteinNovoselacCeilingDiffuserFloor = 23,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWalls")]
        GoldsteinNovoselacCeilingDiffuserWalls = 24,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWindow")]
        GoldsteinNovoselacCeilingDiffuserWindow = 25,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 26,
        
        [JsonProperty("KaradagChilledCeiling")]
        KaradagChilledCeiling = 27,
        
        [JsonProperty("KhalifaEq3WallAwayFromHeat")]
        KhalifaEq3WallAwayFromHeat = 28,
        
        [JsonProperty("KhalifaEq4CeilingAwayFromHeat")]
        KhalifaEq4CeilingAwayFromHeat = 29,
        
        [JsonProperty("KhalifaEq5WallNearHeat")]
        KhalifaEq5WallNearHeat = 30,
        
        [JsonProperty("KhalifaEq6NonHeatedWalls")]
        KhalifaEq6NonHeatedWalls = 31,
        
        [JsonProperty("KhalifaEq7Ceiling")]
        KhalifaEq7Ceiling = 32,
        
        [JsonProperty("McAdams")]
        McAdams = 33,
        
        [JsonProperty("Mitchell")]
        Mitchell = 34,
        
        [JsonProperty("MoWitt")]
        MoWitt = 35,
        
        [JsonProperty("NusseltJurges")]
        NusseltJurges = 36,
        
        [JsonProperty("Schedule")]
        Schedule = 37,
        
        [JsonProperty("Simple")]
        Simple = 38,
        
        [JsonProperty("SimpleCombined")]
        SimpleCombined = 39,
        
        [JsonProperty("TARP")]
        TARP = 40,
        
        [JsonProperty("UserCurve")]
        UserCurve = 41,
        
        [JsonProperty("Value")]
        Value = 42,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 43,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 44,
    }
    
    public enum SurfaceProperty_ConvectionCoefficients_MultipleSurface_ConvectionCoefficient2Location
    {
        
        [JsonProperty("Inside")]
        Inside = 0,
        
        [JsonProperty("Outside")]
        Outside = 1,
    }
    
    public enum SurfaceProperty_ConvectionCoefficients_MultipleSurface_ConvectionCoefficient2Type
    {
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 0,
        
        [JsonProperty("ASTMC1340")]
        ASTMC1340 = 1,
        
        [JsonProperty("AdaptiveConvectionAlgorithm")]
        AdaptiveConvectionAlgorithm = 2,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 3,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 4,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 5,
        
        [JsonProperty("AwbiHattonHeatedFloor")]
        AwbiHattonHeatedFloor = 6,
        
        [JsonProperty("AwbiHattonHeatedWall")]
        AwbiHattonHeatedWall = 7,
        
        [JsonProperty("BeausoleilMorrisonMixedAssistedWall")]
        BeausoleilMorrisonMixedAssistedWall = 8,
        
        [JsonProperty("BeausoleilMorrisonMixedOpposingWall")]
        BeausoleilMorrisonMixedOpposingWall = 9,
        
        [JsonProperty("BeausoleilMorrisonMixedStableCeiling")]
        BeausoleilMorrisonMixedStableCeiling = 10,
        
        [JsonProperty("BeausoleilMorrisonMixedStableFloor")]
        BeausoleilMorrisonMixedStableFloor = 11,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableCeiling")]
        BeausoleilMorrisonMixedUnstableCeiling = 12,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableFloor")]
        BeausoleilMorrisonMixedUnstableFloor = 13,
        
        [JsonProperty("BlockenWindard")]
        BlockenWindard = 14,
        
        [JsonProperty("ClearRoof")]
        ClearRoof = 15,
        
        [JsonProperty("DOE-2")]
        DOE2 = 16,
        
        [JsonProperty("EmmelRoof")]
        EmmelRoof = 17,
        
        [JsonProperty("EmmelVertical")]
        EmmelVertical = 18,
        
        [JsonProperty("FisherPedersenCeilingDiffuserCeiling")]
        FisherPedersenCeilingDiffuserCeiling = 19,
        
        [JsonProperty("FisherPedersenCeilingDiffuserFloor")]
        FisherPedersenCeilingDiffuserFloor = 20,
        
        [JsonProperty("FisherPedersenCeilingDiffuserWalls")]
        FisherPedersenCeilingDiffuserWalls = 21,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 22,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserFloor")]
        GoldsteinNovoselacCeilingDiffuserFloor = 23,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWalls")]
        GoldsteinNovoselacCeilingDiffuserWalls = 24,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWindow")]
        GoldsteinNovoselacCeilingDiffuserWindow = 25,
        
        [JsonProperty("ISO15099Windows")]
        ISO15099Windows = 26,
        
        [JsonProperty("KaradagChilledCeiling")]
        KaradagChilledCeiling = 27,
        
        [JsonProperty("KhalifaEq3WallAwayFromHeat")]
        KhalifaEq3WallAwayFromHeat = 28,
        
        [JsonProperty("KhalifaEq4CeilingAwayFromHeat")]
        KhalifaEq4CeilingAwayFromHeat = 29,
        
        [JsonProperty("KhalifaEq5WallNearHeat")]
        KhalifaEq5WallNearHeat = 30,
        
        [JsonProperty("KhalifaEq6NonHeatedWalls")]
        KhalifaEq6NonHeatedWalls = 31,
        
        [JsonProperty("KhalifaEq7Ceiling")]
        KhalifaEq7Ceiling = 32,
        
        [JsonProperty("McAdams")]
        McAdams = 33,
        
        [JsonProperty("Mitchell")]
        Mitchell = 34,
        
        [JsonProperty("MoWitt")]
        MoWitt = 35,
        
        [JsonProperty("NusseltJurges")]
        NusseltJurges = 36,
        
        [JsonProperty("Schedule")]
        Schedule = 37,
        
        [JsonProperty("Simple")]
        Simple = 38,
        
        [JsonProperty("SimpleCombined")]
        SimpleCombined = 39,
        
        [JsonProperty("TARP")]
        TARP = 40,
        
        [JsonProperty("UserCurve")]
        UserCurve = 41,
        
        [JsonProperty("Value")]
        Value = 42,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 43,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 44,
    }
    
    [Description(@"The interior and external vapor transfer coefficients. Normally these value are calculated using the heat convection coefficient values. Use this object to used fixed constant values. Units are kg/Pa.s.m2 This will only work with the CombinedHeatAndMoistureFiniteElement algorithm for surfaces. Other algorithms will ignore these coefficients")]
    [JsonObject("SurfaceProperties:VaporCoefficients")]
    public class SurfaceProperties_VaporCoefficients : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("surface_name")]
public string SurfaceName { get; set; } = "";
        

[JsonProperty("constant_external_vapor_transfer_coefficient")]
public EmptyNoYes ConstantExternalVaporTransferCoefficient { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("external_vapor_coefficient_value")]
public System.Nullable<float> ExternalVaporCoefficientValue { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("constant_internal_vapor_transfer_coefficient")]
public EmptyNoYes ConstantInternalVaporTransferCoefficient { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("internal_vapor_coefficient_value")]
public System.Nullable<float> InternalVaporCoefficientValue { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    [Description("Used to describe the decoupled layer, or baffle, and the characteristics of the c" +
        "avity and openings for naturally ventilated exterior surfaces. This object is al" +
        "so used in conjunction with the OtherSideConditionsModel.")]
    [JsonObject("SurfaceProperty:ExteriorNaturalVentedCavity")]
    public class SurfaceProperty_ExteriorNaturalVentedCavity : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of a SurfaceProperty:OtherSideConditionsModel object")]
[JsonProperty("boundary_conditions_model_name")]
public string BoundaryConditionsModelName { get; set; } = "";
        

[JsonProperty("area_fraction_of_openings")]
public System.Nullable<float> AreaFractionOfOpenings { get; set; } = null;
        

[JsonProperty("thermal_emissivity_of_exterior_baffle_material")]
public System.Nullable<float> ThermalEmissivityOfExteriorBaffleMaterial { get; set; } = null;
        

[JsonProperty("solar_absorbtivity_of_exterior_baffle")]
public System.Nullable<float> SolarAbsorbtivityOfExteriorBaffle { get; set; } = null;
        

[JsonProperty("height_scale_for_buoyancy_driven_ventilation")]
public System.Nullable<float> HeightScaleForBuoyancyDrivenVentilation { get; set; } = null;
        

[Description("if corrugated, use average depth")]
[JsonProperty("effective_thickness_of_cavity_behind_exterior_baffle")]
public System.Nullable<float> EffectiveThicknessOfCavityBehindExteriorBaffle { get; set; } = null;
        

[Description("this parameter is used to help account for corrugations in the collector")]
[JsonProperty("ratio_of_actual_surface_area_to_projected_surface_area")]
public System.Nullable<float> RatioOfActualSurfaceAreaToProjectedSurfaceArea { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("roughness_of_exterior_surface")]
public SurfaceProperty_ExteriorNaturalVentedCavity_RoughnessOfExteriorSurface RoughnessOfExteriorSurface { get; set; } = (SurfaceProperty_ExteriorNaturalVentedCavity_RoughnessOfExteriorSurface)Enum.Parse(typeof(SurfaceProperty_ExteriorNaturalVentedCavity_RoughnessOfExteriorSurface), "MediumRough");
        

[JsonProperty("effectiveness_for_perforations_with_respect_to_wind")]
public System.Nullable<float> EffectivenessForPerforationsWithRespectToWind { get; set; } = (System.Nullable<float>)Single.Parse("0.25", CultureInfo.InvariantCulture);
        

[JsonProperty("discharge_coefficient_for_openings_with_respect_to_buoyancy_driven_flow")]
public System.Nullable<float> DischargeCoefficientForOpeningsWithRespectToBuoyancyDrivenFlow { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
        

[JsonProperty("surface")]
public string Surface { get; set; } = "";
    }
    
    public enum SurfaceProperty_ExteriorNaturalVentedCavity_RoughnessOfExteriorSurface
    {
        
        [JsonProperty("MediumRough")]
        MediumRough = 0,
        
        [JsonProperty("MediumSmooth")]
        MediumSmooth = 1,
        
        [JsonProperty("Rough")]
        Rough = 2,
        
        [JsonProperty("Smooth")]
        Smooth = 3,
        
        [JsonProperty("VeryRough")]
        VeryRough = 4,
        
        [JsonProperty("VerySmooth")]
        VerySmooth = 5,
    }
    
    [Description("Used to provide incident solar radiation on the inside of the surface. Reference " +
        "surface-construction pair and if that pair is used in a simulation, then program" +
        " will use value provided in schedule instead of calculating it.")]
    [JsonObject("SurfaceProperty:SolarIncidentInside")]
    public class SurfaceProperty_SolarIncidentInside : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("surface_name")]
public string SurfaceName { get; set; } = "";
        

[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Values in schedule are expected to be in W/m2")]
[JsonProperty("inside_surface_incident_sun_solar_radiation_schedule_name")]
public string InsideSurfaceIncidentSunSolarRadiationScheduleName { get; set; } = "";
    }
    
    [Description("This object defines the local environment properties of an exterior surface. One " +
        "or more environment properties have to be defined and linked to the exterior sur" +
        "face.")]
    [JsonObject("SurfaceProperty:LocalEnvironment")]
    public class SurfaceProperty_LocalEnvironment : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of an exterior surface object")]
[JsonProperty("exterior_surface_name")]
public string ExteriorSurfaceName { get; set; } = "";
        

[Description("Enter the name of a Schedule object")]
[JsonProperty("external_shading_fraction_schedule_name")]
public string ExternalShadingFractionScheduleName { get; set; } = "";
        

[Description("Enter the name of a SurfaceProperty:SurroundingSurfaces object")]
[JsonProperty("surrounding_surfaces_object_name")]
public string SurroundingSurfacesObjectName { get; set; } = "";
        

[Description("Enter the name of an OutdoorAir:Node object")]
[JsonProperty("outdoor_air_node_name")]
public string OutdoorAirNodeName { get; set; } = "";
    }
    
    [Description("This object defines the local environment properties of a zone object. A correspo" +
        "nding outdoor air node should be defined and linked to the zone object.")]
    [JsonObject("ZoneProperty:LocalEnvironment")]
    public class ZoneProperty_LocalEnvironment : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of a zone object")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Enter the name of an OutdoorAir:Node object")]
[JsonProperty("outdoor_air_node_name")]
public string OutdoorAirNodeName { get; set; } = "";
    }
    
    [Description("This object defines a list of surrounding surfaces for an exterior surface.")]
    [JsonObject("SurfaceProperty:SurroundingSurfaces")]
    public class SurfaceProperty_SurroundingSurfaces : BHoMObject, IEnergyPlusClass
    {
        

[Description("optional")]
[JsonProperty("sky_view_factor")]
public System.Nullable<float> SkyViewFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[Description("Schedule values are real numbers, -100.0 to 100.0, units C optional")]
[JsonProperty("sky_temperature_schedule_name")]
public string SkyTemperatureScheduleName { get; set; } = "";
        

[Description("optional")]
[JsonProperty("ground_view_factor")]
public System.Nullable<float> GroundViewFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[Description("Schedule values are real numbers, -100.0 to 100.0, units C optional")]
[JsonProperty("ground_temperature_schedule_name")]
public string GroundTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("surfaces")]
public string Surfaces { get; set; } = "";
    }
    
    [Description("Used to provide solar radiation absorbed in fenestration layers. References surfa" +
        "ce-construction pair and if that pair is used in a simulation, then program will" +
        " use value provided in schedules instead of calculating it.")]
    [JsonObject("ComplexFenestrationProperty:SolarAbsorbedLayers")]
    public class ComplexFenestrationProperty_SolarAbsorbedLayers : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("fenestration_surface")]
public string FenestrationSurface { get; set; } = "";
        

[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Values in schedule are expected to be in W/m2")]
[JsonProperty("layer_1_solar_radiation_absorbed_schedule_name")]
public string Layer1SolarRadiationAbsorbedScheduleName { get; set; } = "";
        

[Description("Values in schedule are expected to be in W/m2")]
[JsonProperty("layer_2_solar_radiation_absorbed_schedule_name")]
public string Layer2SolarRadiationAbsorbedScheduleName { get; set; } = "";
        

[Description("Values in schedule are expected to be in W/m2")]
[JsonProperty("layer_3_solar_radiation_absorbed_schedule_name")]
public string Layer3SolarRadiationAbsorbedScheduleName { get; set; } = "";
        

[Description("Values in schedule are expected to be in W/m2")]
[JsonProperty("layer_4_solar_radiation_absorbed_schedule_name")]
public string Layer4SolarRadiationAbsorbedScheduleName { get; set; } = "";
        

[Description("Values in schedule are expected to be in W/m2")]
[JsonProperty("layer_5_solar_radiation_absorbed_schedule_name")]
public string Layer5SolarRadiationAbsorbedScheduleName { get; set; } = "";
    }
    
    [Description("View factors for Surface to Surface in a zone. (Number of Surfaces)**2 are expect" +
        "ed. Any omitted surface pairs will be assumed to have a view factor of zero.")]
    [JsonObject("ZoneProperty:UserViewFactors:BySurfaceName")]
    public class ZoneProperty_UserViewFactors_BySurfaceName : BHoMObject, IEnergyPlusClass
    {
        

[Description("View factors may be entered for a single zone or for a group of zones connected b" +
    "y Construction:AirBoundary")]
[JsonProperty("zone_or_zonelist_name")]
public string ZoneOrZonelistName { get; set; } = "";
        

[JsonProperty("view_factors")]
public string ViewFactors { get; set; } = "";
    }
}
namespace BH.oM.Adapters.EnergyPlus.AirDistribution
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Defines a central forced air system.")]
    [JsonObject("AirLoopHVAC")]
    public class AirLoopHVAC : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of an AirLoopHVAC:ControllerList object.")]
[JsonProperty("controller_list_name")]
public string ControllerListName { get; set; } = "";
        

[Description("Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty("availability_manager_list_name")]
public string AvailabilityManagerListName { get; set; } = "";
        

[JsonProperty("design_supply_air_flow_rate")]
public string DesignSupplyAirFlowRate { get; set; } = (System.String)"0";
        

[Description("Name of a BranchList containing all the branches in this air loop")]
[JsonProperty("branch_list_name")]
public string BranchListName { get; set; } = "";
        

[Description("Name of a ConnectorList containing all the splitters and mixers in the loop")]
[JsonProperty("connector_list_name")]
public string ConnectorListName { get; set; } = "";
        

[Description(@"Name of inlet node where air enters the supply side of the air loop. If this air loop has a return path, then this node is where return air enters the supply side. If this air loop has no return path, then this node is where outdoor air or other air enters the supply side.")]
[JsonProperty("supply_side_inlet_node_name")]
public string SupplySideInletNodeName { get; set; } = "";
        

[Description("Name of outlet node where return air leaves the demand side and enters the supply" +
    " side. Required if this air loop has a return path. Leave this field blank if th" +
    "ere is no return.")]
[JsonProperty("demand_side_outlet_node_name")]
public string DemandSideOutletNodeName { get; set; } = "";
        

[Description("Name of a Node or NodeList containing the inlet node(s) supplying air to zone equ" +
    "ipment.")]
[JsonProperty("demand_side_inlet_node_names")]
public string DemandSideInletNodeNames { get; set; } = "";
        

[Description("Name of a Node or NodeList containing the outlet node(s) supplying air to the dem" +
    "and side.")]
[JsonProperty("supply_side_outlet_node_names")]
public string SupplySideOutletNodeNames { get; set; } = "";
        

[Description(@"The design return air flow rate as a fraction of supply air flow rate with no exhaust. This can be used to model a pressurized system or set to zero to model a DOAS with no return flow. Use ZoneAirMassFlowConservation to balance zone infiltration and mixing flows.")]
[JsonProperty("design_return_air_flow_fraction_of_supply_air_flow")]
public System.Nullable<float> DesignReturnAirFlowFractionOfSupplyAirFlow { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    [Description("List equipment in simulation order")]
    [JsonObject("AirLoopHVAC:OutdoorAirSystem:EquipmentList")]
    public class AirLoopHVAC_OutdoorAirSystem_EquipmentList : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("component_1_object_type")]
public string Component1ObjectType { get; set; } = "";
        

[JsonProperty("component_1_name")]
public string Component1Name { get; set; } = "";
        

[JsonProperty("component_2_object_type")]
public string Component2ObjectType { get; set; } = "";
        

[JsonProperty("component_2_name")]
public string Component2Name { get; set; } = "";
        

[JsonProperty("component_3_object_type")]
public string Component3ObjectType { get; set; } = "";
        

[JsonProperty("component_3_name")]
public string Component3Name { get; set; } = "";
        

[JsonProperty("component_4_object_type")]
public string Component4ObjectType { get; set; } = "";
        

[JsonProperty("component_4_name")]
public string Component4Name { get; set; } = "";
        

[JsonProperty("component_5_object_type")]
public string Component5ObjectType { get; set; } = "";
        

[JsonProperty("component_5_name")]
public string Component5Name { get; set; } = "";
        

[JsonProperty("component_6_object_type")]
public string Component6ObjectType { get; set; } = "";
        

[JsonProperty("component_6_name")]
public string Component6Name { get; set; } = "";
        

[JsonProperty("component_7_object_type")]
public string Component7ObjectType { get; set; } = "";
        

[JsonProperty("component_7_name")]
public string Component7Name { get; set; } = "";
        

[JsonProperty("component_8_object_type")]
public string Component8ObjectType { get; set; } = "";
        

[JsonProperty("component_8_name")]
public string Component8Name { get; set; } = "";
        

[JsonProperty("component_9_object_type")]
public string Component9ObjectType { get; set; } = "";
        

[JsonProperty("component_9_name")]
public string Component9Name { get; set; } = "";
    }
    
    [Description(@"Outdoor air subsystem for an AirLoopHVAC. Includes an outdoor air mixing box and optional outdoor air conditioning equipment such as heat recovery, preheat, and precool coils. From the perspective of the primary air loop the outdoor air system is treated as a single component.")]
    [JsonObject("AirLoopHVAC:OutdoorAirSystem")]
    public class AirLoopHVAC_OutdoorAirSystem : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of an AirLoopHVAC:ControllerList object or blank if this object is" +
    " used in AirLoopHVAC:DedicatedOutdoorAirSystem.")]
[JsonProperty("controller_list_name")]
public string ControllerListName { get; set; } = "";
        

[Description("Enter the name of an AirLoopHVAC:OutdoorAirSystem:EquipmentList object.")]
[JsonProperty("outdoor_air_equipment_list_name")]
public string OutdoorAirEquipmentListName { get; set; } = "";
        

[Description("Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty("availability_manager_list_name")]
public string AvailabilityManagerListName { get; set; } = "";
    }
    
    [Description("Outdoor air mixer. Node names cannot be duplicated within a single OutdoorAir:Mix" +
        "er object or across all outdoor air mixers.")]
    [JsonObject("OutdoorAir:Mixer")]
    public class OutdoorAir_Mixer : BHoMObject, IEnergyPlusClass
    {
        

[Description("Name of Mixed Air Node")]
[JsonProperty("mixed_air_node_name")]
public string MixedAirNodeName { get; set; } = "";
        

[Description("Name of Outdoor Air Stream Node")]
[JsonProperty("outdoor_air_stream_node_name")]
public string OutdoorAirStreamNodeName { get; set; } = "";
        

[Description("Name of Relief Air Stream Node")]
[JsonProperty("relief_air_stream_node_name")]
public string ReliefAirStreamNodeName { get; set; } = "";
        

[Description("Name of Return Air Stream Node")]
[JsonProperty("return_air_stream_node_name")]
public string ReturnAirStreamNodeName { get; set; } = "";
    }
    
    [Description("Split one air stream into N outlet streams (currently 500 per air loop, but exten" +
        "sible). Node names cannot be duplicated within a single zone splitter (AirLoopHV" +
        "AC:ZoneSplitter) list.")]
    [JsonObject("AirLoopHVAC:ZoneSplitter")]
    public class AirLoopHVAC_ZoneSplitter : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("nodes")]
public string Nodes { get; set; } = "";
    }
    
    [Description("Connects 1 zone inlet air stream, through zone supply plenum, to one or more outl" +
        "ets. Node names cannot be duplicated within a single supply plenum list.")]
    [JsonObject("AirLoopHVAC:SupplyPlenum")]
    public class AirLoopHVAC_SupplyPlenum : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("zone_node_name")]
public string ZoneNodeName { get; set; } = "";
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("nodes")]
public string Nodes { get; set; } = "";
    }
    
    [Description("A supply path can only contain AirLoopHVAC:ZoneSplitter and AirLoopHVAC:SupplyPle" +
        "num objects which may be in series or parallel.")]
    [JsonObject("AirLoopHVAC:SupplyPath")]
    public class AirLoopHVAC_SupplyPath : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("supply_air_path_inlet_node_name")]
public string SupplyAirPathInletNodeName { get; set; } = "";
        

[JsonProperty("components")]
public string Components { get; set; } = "";
    }
    
    [Description("Mix N inlet air streams into one (currently 500 per air loop, but extensible). No" +
        "de names cannot be duplicated within a single zone mixer (AirLoopHVAC:ZoneMixer)" +
        " list.")]
    [JsonObject("AirLoopHVAC:ZoneMixer")]
    public class AirLoopHVAC_ZoneMixer : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[JsonProperty("nodes")]
public string Nodes { get; set; } = "";
    }
    
    [Description("Connects N zone inlet air streams, through zone return plenum, to outlet (current" +
        "ly 500 per air loop) Node names cannot be duplicated within a single plenum list" +
        ".")]
    [JsonObject("AirLoopHVAC:ReturnPlenum")]
    public class AirLoopHVAC_ReturnPlenum : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("zone_node_name")]
public string ZoneNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[JsonProperty("induced_air_outlet_node_or_nodelist_name")]
public string InducedAirOutletNodeOrNodelistName { get; set; } = "";
        

[JsonProperty("nodes")]
public string Nodes { get; set; } = "";
    }
    
    [Description("A return air path can only contain one AirLoopHVAC:ZoneMixer and one or more AirL" +
        "oopHVAC:ReturnPlenum objects.")]
    [JsonObject("AirLoopHVAC:ReturnPath")]
    public class AirLoopHVAC_ReturnPath : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("return_air_path_outlet_node_name")]
public string ReturnAirPathOutletNodeName { get; set; } = "";
        

[JsonProperty("components")]
public string Components { get; set; } = "";
    }
    
    [Description("Defines a central forced air system to provide dedicated outdoor air to multiple " +
        "AirLoopHVACs.")]
    [JsonObject("AirLoopHVAC:DedicatedOutdoorAirSystem")]
    public class AirLoopHVAC_DedicatedOutdoorAirSystem : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of an AirLoopHVAC:OutdoorAirSystem object.")]
[JsonProperty("airloophvac_outdoorairsystem_name")]
public string AirloophvacOutdoorairsystemName { get; set; } = "";
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Name of AirLoopHVAC:Mixer.")]
[JsonProperty("airloophvac_mixer_name")]
public string AirloophvacMixerName { get; set; } = "";
        

[Description("Name of AirLoopHVAC:Splitter.")]
[JsonProperty("airloophvac_splitter_name")]
public string AirloophvacSplitterName { get; set; } = "";
        

[JsonProperty("preheat_design_temperature")]
public System.Nullable<float> PreheatDesignTemperature { get; set; } = null;
        

[JsonProperty("preheat_design_humidity_ratio")]
public System.Nullable<float> PreheatDesignHumidityRatio { get; set; } = null;
        

[JsonProperty("precool_design_temperature")]
public System.Nullable<float> PrecoolDesignTemperature { get; set; } = null;
        

[JsonProperty("precool_design_humidity_ratio")]
public System.Nullable<float> PrecoolDesignHumidityRatio { get; set; } = null;
        

[Description("Enter the number of the AirLoopHAVC served by AirLoopHVAC:DedicatedOutdoorAirSyst" +
    "em")]
[JsonProperty("number_of_airloophvac")]
public System.Nullable<float> NumberOfAirloophvac { get; set; } = null;
        

[JsonProperty("airloophvacs")]
public string Airloophvacs { get; set; } = "";
    }
    
    [Description(@"Mix N inlet air streams from Relief Air Stream Node in OutdoorAir:Mixer objects served by AirLoopHVAC objects listed in AirLoopHVAC:DedicatedOutdoorAirSystem into one (currently 10 as default, but extensible). Node names cannot be duplicated within a single mixer list.")]
    [JsonObject("AirLoopHVAC:Mixer")]
    public class AirLoopHVAC_Mixer : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[JsonProperty("nodes")]
public string Nodes { get; set; } = "";
    }
    
    [Description(@"Split one air stream from AirLoopHVAC:DedicatedOutdoorAirSystem outlet node into N outlet streams (currently 10 as default, but extensible). Node names should be Outdoor Air Stream Node Name in OutdoorAir:Mixer objects served by AirLoopHVAC objects listed in AirLoopHVAC:DedicatedOutdoorAirSystem.")]
    [JsonObject("AirLoopHVAC:Splitter")]
    public class AirLoopHVAC_Splitter : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("nodes")]
public string Nodes { get; set; } = "";
    }
}
namespace BH.oM.Adapters.EnergyPlus.AirflowNetwork
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("This object defines the global parameters used in an Airflow Network simulation.")]
    [JsonObject("AirflowNetwork:SimulationControl")]
    public class AirflowNetwork_SimulationControl : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"NoMultizoneOrDistribution: Only perform Simple calculations (objects ZoneInfiltration:*, ZoneVentilation:*, ZoneMixing, ZoneCrossMixing, ZoneRefrigerationDoorMixing, ZoneAirBalance:OutdoorAir, ZoneEarthtube, ZoneThermalChimney, and ZoneCoolTower:Shower); MultizoneWithoutDistribution: Use AirflowNetwork objects to simulate multizone Airflows driven by wind during simulation time, and objects of ZoneInfiltration:*, ZoneVentilation:*, ZoneMixing, ZoneCrossMixing ZoneRefrigerationDoorMixing, ZoneAirBalance:OutdoorAir, ZoneEarthtube, ZoneThermalChimney, and ZoneCoolTower:Shower are ignored; MultizoneWithDistributionOnlyDuringFanOperation: Perform distribution system calculations during system fan on time and Simple calculations during system Fan off time; MultizoneWithDistribution: Perform distribution system calculations during system fan on time and multizone Airflow driven by wind during system fan off time.")]
[JsonProperty("airflownetwork_control")]
public AirflowNetwork_SimulationControl_AirflownetworkControl AirflownetworkControl { get; set; } = (AirflowNetwork_SimulationControl_AirflownetworkControl)Enum.Parse(typeof(AirflowNetwork_SimulationControl_AirflownetworkControl), "NoMultizoneOrDistribution");
        

[Description(@"Input: User must enter AirflowNetwork:MultiZone:WindPressureCoefficientArray, AirflowNetwork:MultiZone:ExternalNode, and AirflowNetwork:MultiZone:WindPressureCoefficientValues objects. SurfaceAverageCalculation: used only for rectangular buildings. If SurfaceAverageCalculation is selected, AirflowNetwork:MultiZone:WindPressureCoefficientArray, AirflowNetwork:MultiZone:ExternalNode, and AirflowNetwork:MultiZone:WindPressureCoefficientValues objects are not used.")]
[JsonProperty("wind_pressure_coefficient_type")]
public AirflowNetwork_SimulationControl_WindPressureCoefficientType WindPressureCoefficientType { get; set; } = (AirflowNetwork_SimulationControl_WindPressureCoefficientType)Enum.Parse(typeof(AirflowNetwork_SimulationControl_WindPressureCoefficientType), "SurfaceAverageCalculation");
        

[Description(@"If ExternalNode is selected, the height given in the AirflowNetwork:MultiZone:ExternalNode object will be used. If OpeningHeight is selected, the surface opening height (centroid) will be used to calculate local wind pressure This field is ignored when the choice of the Wind Pressure Coefficient Type field is SurfaceAverageCalculation.")]
[JsonProperty("height_selection_for_local_wind_pressure_calculation")]
public AirflowNetwork_SimulationControl_HeightSelectionForLocalWindPressureCalculation HeightSelectionForLocalWindPressureCalculation { get; set; } = (AirflowNetwork_SimulationControl_HeightSelectionForLocalWindPressureCalculation)Enum.Parse(typeof(AirflowNetwork_SimulationControl_HeightSelectionForLocalWindPressureCalculation), "OpeningHeight");
        

[Description("Used only if Wind Pressure Coefficient Type = SurfaceAverageCalculation, otherwis" +
    "e this field may be left blank.")]
[JsonProperty("building_type")]
public AirflowNetwork_SimulationControl_BuildingType BuildingType { get; set; } = (AirflowNetwork_SimulationControl_BuildingType)Enum.Parse(typeof(AirflowNetwork_SimulationControl_BuildingType), "LowRise");
        

[Description("Determines the maximum number of iterations used to converge on a solution. If th" +
    "is limit is exceeded, the program terminates.")]
[JsonProperty("maximum_number_of_iterations")]
public System.Nullable<float> MaximumNumberOfIterations { get; set; } = (System.Nullable<float>)Single.Parse("500", CultureInfo.InvariantCulture);
        

[JsonProperty("initialization_type")]
public AirflowNetwork_SimulationControl_InitializationType InitializationType { get; set; } = (AirflowNetwork_SimulationControl_InitializationType)Enum.Parse(typeof(AirflowNetwork_SimulationControl_InitializationType), "ZeroNodePressures");
        

[Description(@"This tolerance is defined as the absolute value of the sum of the mass Flow Rates divided by the sum of the absolute value of the mass Flow Rates. The mass Flow Rates described here refer to the mass Flow Rates at all Nodes in the AirflowNetwork model. The solution converges when both this tolerance and the tolerance in the next field (Absolute Airflow Convergence Tolerance) are satisfied.")]
[JsonProperty("relative_airflow_convergence_tolerance")]
public System.Nullable<float> RelativeAirflowConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.0001", CultureInfo.InvariantCulture);
        

[Description(@"This tolerance is defined as the absolute value of the sum of the mass flow rates. The mass flow rates described here refer to the mass flow rates at all nodes in the AirflowNetwork model. The solution converges when both this tolerance and the tolerance in the previous field (Relative Airflow Convergence Tolerance) are satisfied.")]
[JsonProperty("absolute_airflow_convergence_tolerance")]
public System.Nullable<float> AbsoluteAirflowConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("1E-06", CultureInfo.InvariantCulture);
        

[Description("Used only for AirflowNetwork:SimulationControl")]
[JsonProperty("convergence_acceleration_limit")]
public System.Nullable<float> ConvergenceAccelerationLimit { get; set; } = (System.Nullable<float>)Single.Parse("-0.5", CultureInfo.InvariantCulture);
        

[Description("Degrees clockwise from true North. Used only if Wind Pressure Coefficient Type = " +
    "SurfaceAverageCalculation.")]
[JsonProperty("azimuth_angle_of_long_axis_of_building")]
public System.Nullable<float> AzimuthAngleOfLongAxisOfBuilding { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Used only if Wind Pressure Coefficient Type = SurfaceAverageCalculation.")]
[JsonProperty("ratio_of_building_width_along_short_axis_to_width_along_long_axis")]
public System.Nullable<float> RatioOfBuildingWidthAlongShortAxisToWidthAlongLongAxis { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("If Yes, external node temperature is height dependent. If No, external node tempe" +
    "rature is based on zero height.")]
[JsonProperty("height_dependence_of_external_node_temperature")]
public EmptyNoYes HeightDependenceOfExternalNodeTemperature { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Select the solver to use for the pressure network solution")]
[JsonProperty("solver")]
public AirflowNetwork_SimulationControl_Solver Solver { get; set; } = (AirflowNetwork_SimulationControl_Solver)Enum.Parse(typeof(AirflowNetwork_SimulationControl_Solver), "SkylineLU");
        

[Description(@"Set this input to Yes to have zone equipment that are currently unsupported in the AirflowNetwork model allowed in the simulation if present. Setting this field to Yes, allows the following equipments to be modeled along an AirflowNetwork model: ZoneHVAC:Dehumidifier, ZoneHVAC:EnergyRecoveryVentilator, WaterHeater:HeatPump:*.")]
[JsonProperty("allow_unsupported_zone_equipment")]
public EmptyNoYes AllowUnsupportedZoneEquipment { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
    }
    
    public enum AirflowNetwork_SimulationControl_AirflownetworkControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MultizoneWithDistribution")]
        MultizoneWithDistribution = 1,
        
        [JsonProperty("MultizoneWithDistributionOnlyDuringFanOperation")]
        MultizoneWithDistributionOnlyDuringFanOperation = 2,
        
        [JsonProperty("MultizoneWithoutDistribution")]
        MultizoneWithoutDistribution = 3,
        
        [JsonProperty("NoMultizoneOrDistribution")]
        NoMultizoneOrDistribution = 4,
    }
    
    public enum AirflowNetwork_SimulationControl_WindPressureCoefficientType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Input")]
        Input = 1,
        
        [JsonProperty("SurfaceAverageCalculation")]
        SurfaceAverageCalculation = 2,
    }
    
    public enum AirflowNetwork_SimulationControl_HeightSelectionForLocalWindPressureCalculation
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ExternalNode")]
        ExternalNode = 1,
        
        [JsonProperty("OpeningHeight")]
        OpeningHeight = 2,
    }
    
    public enum AirflowNetwork_SimulationControl_BuildingType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("HighRise")]
        HighRise = 1,
        
        [JsonProperty("LowRise")]
        LowRise = 2,
    }
    
    public enum AirflowNetwork_SimulationControl_InitializationType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LinearInitializationMethod")]
        LinearInitializationMethod = 1,
        
        [JsonProperty("ZeroNodePressures")]
        ZeroNodePressures = 2,
    }
    
    public enum AirflowNetwork_SimulationControl_Solver
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConjugateGradient")]
        ConjugateGradient = 1,
        
        [JsonProperty("SkylineLU")]
        SkylineLU = 2,
    }
    
    [Description("This object is used to simultaneously control a thermal zone\'s window and door op" +
        "enings, both exterior and interior.")]
    [JsonObject("AirflowNetwork:MultiZone:Zone")]
    public class AirflowNetwork_MultiZone_Zone : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the zone name where ventilation control is required.")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description(@"When Ventilation Control Mode = Temperature or Enthalpy, the following fields are used to modulate the Ventilation Open Factor for all window and door openings in the zone according to the zone's indoor-outdoor temperature or enthalpy difference. Constant: controlled by field Venting Schedule Name. NoVent: control will not open window or door during simulation (Ventilation Open Factor = 0).")]
[JsonProperty("ventilation_control_mode")]
public AirflowNetwork_MultiZone_Zone_VentilationControlMode VentilationControlMode { get; set; } = (AirflowNetwork_MultiZone_Zone_VentilationControlMode)Enum.Parse(typeof(AirflowNetwork_MultiZone_Zone_VentilationControlMode), "NoVent");
        

[Description("Used only if Ventilation Control Mode = Temperature or Enthalpy.")]
[JsonProperty("ventilation_control_zone_temperature_setpoint_schedule_name")]
public string VentilationControlZoneTemperatureSetpointScheduleName { get; set; } = "";
        

[Description("Used only if Ventilation Control Mode = Temperature or Enthalpy.")]
[JsonProperty("minimum_venting_open_factor")]
public System.Nullable<float> MinimumVentingOpenFactor { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Applicable only if Ventilation Control Mode = Temperature. This value must be les" +
    "s than the corresponding upper value (next field).")]
[JsonProperty("indoor_and_outdoor_temperature_difference_lower_limit_for_maximum_venting_open_fa" +
    "ctor")]
public System.Nullable<float> IndoorAndOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactor { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Applicable only if Ventilation Control Mode = Temperature. This value must be gre" +
    "ater than the corresponding lower value (previous field).")]
[JsonProperty("indoor_and_outdoor_temperature_difference_upper_limit_for_minimum_venting_open_fa" +
    "ctor")]
public System.Nullable<float> IndoorAndOutdoorTemperatureDifferenceUpperLimitForMinimumVentingOpenFactor { get; set; } = (System.Nullable<float>)Single.Parse("100", CultureInfo.InvariantCulture);
        

[Description("Applicable only if Ventilation Control Mode = Enthalpy. This value must be less t" +
    "han the corresponding upper value (next field).")]
[JsonProperty("indoor_and_outdoor_enthalpy_difference_lower_limit_for_maximum_venting_open_facto" +
    "r")]
public System.Nullable<float> IndoorAndOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactor { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Applicable only if Ventilation Control Mode = Enthalpy. This value must be greate" +
    "r than the corresponding lower value (previous field).")]
[JsonProperty("indoor_and_outdoor_enthalpy_difference_upper_limit_for_minimum_venting_open_facto" +
    "r")]
public System.Nullable<float> IndoorAndOutdoorEnthalpyDifferenceUpperLimitForMinimumVentingOpenFactor { get; set; } = (System.Nullable<float>)Single.Parse("300000", CultureInfo.InvariantCulture);
        

[Description(@"Non-zero Schedule value means venting is allowed if other venting control conditions are satisfied. A zero (or negative) Schedule value means venting is not allowed under any The Schedule values should be greater than or equal to 0 and less than or equal to 1. circumstances. If this Schedule is not specified then venting is allowed if other venting control conditions are satisfied. Not used if Ventilation Control Mode = NoVent.")]
[JsonProperty("venting_availability_schedule_name")]
public string VentingAvailabilityScheduleName { get; set; } = "";
        

[Description(@"Selecting Advanced results in EnergyPlus calculating modified Wind Pressure Coefficients to account for wind direction and turbulence effects on single sided ventilation rates. Model is only valid for zones with 2 openings, both of which are on a single facade.")]
[JsonProperty("single_sided_wind_pressure_coefficient_algorithm")]
public AirflowNetwork_MultiZone_Zone_SingleSidedWindPressureCoefficientAlgorithm SingleSidedWindPressureCoefficientAlgorithm { get; set; } = (AirflowNetwork_MultiZone_Zone_SingleSidedWindPressureCoefficientAlgorithm)Enum.Parse(typeof(AirflowNetwork_MultiZone_Zone_SingleSidedWindPressureCoefficientAlgorithm), "Standard");
        

[Description("This is the whole building width along the direction of the facade of this zone.")]
[JsonProperty("facade_width")]
public System.Nullable<float> FacadeWidth { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("Enter the name where Occupancy Ventilation Control is required.")]
[JsonProperty("occupant_ventilation_control_name")]
public string OccupantVentilationControlName { get; set; } = "";
    }
    
    public enum AirflowNetwork_MultiZone_Zone_VentilationControlMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAE55Adaptive")]
        ASHRAE55Adaptive = 1,
        
        [JsonProperty("CEN15251Adaptive")]
        CEN15251Adaptive = 2,
        
        [JsonProperty("Constant")]
        Constant = 3,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 4,
        
        [JsonProperty("NoVent")]
        NoVent = 5,
        
        [JsonProperty("Temperature")]
        Temperature = 6,
    }
    
    public enum AirflowNetwork_MultiZone_Zone_SingleSidedWindPressureCoefficientAlgorithm
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Advanced")]
        Advanced = 1,
        
        [JsonProperty("Standard")]
        Standard = 2,
    }
    
    [Description("This object specifies the properties of a surface linkage through which air flows" +
        ". Airflow Report: Node 1 as an inside face zone; Node 2 as an outside face zone " +
        "or external node.")]
    [JsonObject("AirflowNetwork:MultiZone:Surface")]
    public class AirflowNetwork_MultiZone_Surface : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of a heat transfer surface.")]
[JsonProperty("surface_name")]
public string SurfaceName { get; set; } = "";
        

[Description(@"Enter the name of an Airflow Network leakage component. A leakage component is one of the following AirflowNetwork:Multizone objects: AirflowNetwork:MultiZone:Component:DetailedOpening, AirflowNetwork:MultiZone:Component:SimpleOpening, AirflowNetwork:MultiZone:Surface:Crack, AirflowNetwork:MultiZone:Surface:EffectiveLeakageArea, AirflowNetwork:MultiZone:Component:HorizontalOpening, or AirflowNetwork:MultiZone:Component:ZoneExhaustFan. When the zone exhaust fan name is entered, any surface control fields below A3 are ignored when the zone exhaust fan turns on.")]
[JsonProperty("leakage_component_name")]
public string LeakageComponentName { get; set; } = "";
        

[Description("Used if Wind Pressure Coefficient Type = Input in the AirflowNetwork:SimulationCo" +
    "ntrol object, otherwise this field may be left blank.")]
[JsonProperty("external_node_name")]
public string ExternalNodeName { get; set; } = "";
        

[Description("This field specifies a multiplier for a crack, window, or door.")]
[JsonProperty("window_door_opening_factor_or_crack_factor")]
public System.Nullable<float> WindowDoorOpeningFactorOrCrackFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description(@"When Ventilation Control Mode = Temperature or Enthalpy, the following fields are used to modulate the Ventilation Open Factor for a window or door opening according to the parent zone's indoor-outdoor temperature or enthalpy difference. When Ventilation Control Mode = AdjacentTemperature or AdjacentEnthalpy, the following fields are used to modulate the Ventilation Open Factor for an interior window or door opening according to temperature or enthalpy difference between the parent zone and the adjacent zone. Constant: controlled by field Venting Schedule Name. NoVent: control will not open window or door during simulation (Ventilation Open Factor = 0). ZoneLevel: control will be controlled by AirflowNetwork:MultiZone:Zone Mode.")]
[JsonProperty("ventilation_control_mode")]
public AirflowNetwork_MultiZone_Surface_VentilationControlMode VentilationControlMode { get; set; } = (AirflowNetwork_MultiZone_Surface_VentilationControlMode)Enum.Parse(typeof(AirflowNetwork_MultiZone_Surface_VentilationControlMode), "ZoneLevel");
        

[Description("Used only if Ventilation Control Mode = Temperature or Enthalpy.")]
[JsonProperty("ventilation_control_zone_temperature_setpoint_schedule_name")]
public string VentilationControlZoneTemperatureSetpointScheduleName { get; set; } = "";
        

[Description("Used only if Ventilation Control Mode = Temperature or Enthalpy.")]
[JsonProperty("minimum_venting_open_factor")]
public System.Nullable<float> MinimumVentingOpenFactor { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Applicable only if Ventilation Control Mode = Temperature")]
[JsonProperty("indoor_and_outdoor_temperature_difference_lower_limit_for_maximum_venting_open_fa" +
    "ctor")]
public System.Nullable<float> IndoorAndOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactor { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Applicable only if Ventilation Control Mode = Temperature. This value must be gre" +
    "ater than the corresponding lower value (previous field).")]
[JsonProperty("indoor_and_outdoor_temperature_difference_upper_limit_for_minimum_venting_open_fa" +
    "ctor")]
public System.Nullable<float> IndoorAndOutdoorTemperatureDifferenceUpperLimitForMinimumVentingOpenFactor { get; set; } = (System.Nullable<float>)Single.Parse("100", CultureInfo.InvariantCulture);
        

[Description("Applicable only if Ventilation Control Mode = Enthalpy. This value must be less t" +
    "han the corresponding upper value (next field).")]
[JsonProperty("indoor_and_outdoor_enthalpy_difference_lower_limit_for_maximum_venting_open_facto" +
    "r")]
public System.Nullable<float> IndoorAndOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactor { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Applicable only if Ventilation Control Mode = Enthalpy. This value must be greate" +
    "r than the corresponding lower value (previous field).")]
[JsonProperty("indoor_and_outdoor_enthalpy_difference_upper_limit_for_minimum_venting_open_facto" +
    "r")]
public System.Nullable<float> IndoorAndOutdoorEnthalpyDifferenceUpperLimitForMinimumVentingOpenFactor { get; set; } = (System.Nullable<float>)Single.Parse("300000", CultureInfo.InvariantCulture);
        

[Description(@"Non-zero schedule value means venting is allowed if other venting control conditions are satisfied. A zero (or negative) schedule value means venting is not allowed under any circumstances. The schedule values should be greater than or equal to 0 and less than or equal to 1. If this schedule is not specified then venting is allowed if other venting control conditions are satisfied. Not used if Ventilation Control Mode = NoVent or ZoneLevel.")]
[JsonProperty("venting_availability_schedule_name")]
public string VentingAvailabilityScheduleName { get; set; } = "";
        

[Description("Enter the name where Occupancy Ventilation Control is required.")]
[JsonProperty("occupant_ventilation_control_name")]
public string OccupantVentilationControlName { get; set; } = "";
        

[Description("This field is applied to a non-rectangular window or door. The equivalent shape h" +
    "as the same area as a polygonal window or door.")]
[JsonProperty("equivalent_rectangle_method")]
public AirflowNetwork_MultiZone_Surface_EquivalentRectangleMethod EquivalentRectangleMethod { get; set; } = (AirflowNetwork_MultiZone_Surface_EquivalentRectangleMethod)Enum.Parse(typeof(AirflowNetwork_MultiZone_Surface_EquivalentRectangleMethod), "PolygonHeight");
        

[Description("This field is used when UserDefinedAspectRatio is entered in the Equivalent Recta" +
    "ngle Method field.")]
[JsonProperty("equivalent_rectangle_aspect_ratio")]
public System.Nullable<float> EquivalentRectangleAspectRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    public enum AirflowNetwork_MultiZone_Surface_VentilationControlMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAE55Adaptive")]
        ASHRAE55Adaptive = 1,
        
        [JsonProperty("AdjacentEnthalpy")]
        AdjacentEnthalpy = 2,
        
        [JsonProperty("AdjacentTemperature")]
        AdjacentTemperature = 3,
        
        [JsonProperty("CEN15251Adaptive")]
        CEN15251Adaptive = 4,
        
        [JsonProperty("Constant")]
        Constant = 5,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 6,
        
        [JsonProperty("NoVent")]
        NoVent = 7,
        
        [JsonProperty("Temperature")]
        Temperature = 8,
        
        [JsonProperty("ZoneLevel")]
        ZoneLevel = 9,
    }
    
    public enum AirflowNetwork_MultiZone_Surface_EquivalentRectangleMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BaseSurfaceAspectRatio")]
        BaseSurfaceAspectRatio = 1,
        
        [JsonProperty("PolygonHeight")]
        PolygonHeight = 2,
        
        [JsonProperty("UserDefinedAspectRatio")]
        UserDefinedAspectRatio = 3,
    }
    
    [Description("This object specifies the conditions under which the air mass flow coefficient wa" +
        "s measured.")]
    [JsonObject("AirflowNetwork:MultiZone:ReferenceCrackConditions")]
    public class AirflowNetwork_MultiZone_ReferenceCrackConditions : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the reference temperature under which the surface crack data were obtained." +
    "")]
[JsonProperty("reference_temperature")]
public System.Nullable<float> ReferenceTemperature { get; set; } = (System.Nullable<float>)Single.Parse("20", CultureInfo.InvariantCulture);
        

[Description("Enter the reference barometric pressure under which the surface crack data were o" +
    "btained.")]
[JsonProperty("reference_barometric_pressure")]
public System.Nullable<float> ReferenceBarometricPressure { get; set; } = (System.Nullable<float>)Single.Parse("101325", CultureInfo.InvariantCulture);
        

[Description("Enter the reference humidity ratio under which the surface crack data were obtain" +
    "ed.")]
[JsonProperty("reference_humidity_ratio")]
public System.Nullable<float> ReferenceHumidityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    [Description("This object specifies the properties of airflow through a crack.")]
    [JsonObject("AirflowNetwork:MultiZone:Surface:Crack")]
    public class AirflowNetwork_MultiZone_Surface_Crack : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the air mass flow coefficient at the conditions defined in the Reference Cr" +
    "ack Conditions object. Defined at 1 Pa pressure difference across this crack.")]
[JsonProperty("air_mass_flow_coefficient_at_reference_conditions")]
public System.Nullable<float> AirMassFlowCoefficientAtReferenceConditions { get; set; } = null;
        

[Description("Enter the air mass flow exponent for the surface crack.")]
[JsonProperty("air_mass_flow_exponent")]
public System.Nullable<float> AirMassFlowExponent { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
        

[Description("Select a AirflowNetwork:MultiZone:ReferenceCrackConditions name associated with t" +
    "he air mass flow coefficient entered above.")]
[JsonProperty("reference_crack_conditions")]
public string ReferenceCrackConditions { get; set; } = "";
    }
    
    [Description("This object is used to define surface air leakage.")]
    [JsonObject("AirflowNetwork:MultiZone:Surface:EffectiveLeakageArea")]
    public class AirflowNetwork_MultiZone_Surface_EffectiveLeakageArea : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the effective leakage area.")]
[JsonProperty("effective_leakage_area")]
public System.Nullable<float> EffectiveLeakageArea { get; set; } = null;
        

[Description("Enter the coefficient used in the air mass flow equation.")]
[JsonProperty("discharge_coefficient")]
public System.Nullable<float> DischargeCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Enter the pressure difference used to define the air mass flow coefficient and ex" +
    "ponent.")]
[JsonProperty("reference_pressure_difference")]
public System.Nullable<float> ReferencePressureDifference { get; set; } = (System.Nullable<float>)Single.Parse("4", CultureInfo.InvariantCulture);
        

[Description("Enter the exponent used in the air mass flow equation.")]
[JsonProperty("air_mass_flow_exponent")]
public System.Nullable<float> AirMassFlowExponent { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
    }
    
    [Description("This object specifies the properties of airflow through windows and doors (window" +
        ", door and glass door heat transfer subsurfaces) when they are closed or open.")]
    [JsonObject("AirflowNetwork:MultiZone:Component:DetailedOpening")]
    public class AirflowNetwork_MultiZone_Component_DetailedOpening : BHoMObject, IEnergyPlusClass
    {
        

[Description("Defined at 1 Pa per meter of crack length. Enter the coefficient used in the foll" +
    "owing equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow " +
    "Exponent. Used only when opening (window or door) is closed.")]
[JsonProperty("air_mass_flow_coefficient_when_opening_is_closed")]
public System.Nullable<float> AirMassFlowCoefficientWhenOpeningIsClosed { get; set; } = null;
        

[Description("Enter the exponent used in the following equation: Mass Flow Rate = Air Mass Flow" +
    " Coefficient * (dP)^Air Mass Flow Exponent. Used only when opening (window or do" +
    "or) is closed.")]
[JsonProperty("air_mass_flow_exponent_when_opening_is_closed")]
public System.Nullable<float> AirMassFlowExponentWhenOpeningIsClosed { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
        

[Description("Select the type of vertical opening: Non-pivoted opening or Horizontally pivoted " +
    "opening.")]
[JsonProperty("type_of_rectangular_large_vertical_opening_lvo_")]
public AirflowNetwork_MultiZone_Component_DetailedOpening_TypeOfRectangularLargeVerticalOpeningLvo TypeOfRectangularLargeVerticalOpeningLvo { get; set; } = (AirflowNetwork_MultiZone_Component_DetailedOpening_TypeOfRectangularLargeVerticalOpeningLvo)Enum.Parse(typeof(AirflowNetwork_MultiZone_Component_DetailedOpening_TypeOfRectangularLargeVerticalOpeningLvo), "NonPivoted");
        

[Description(@"Extra crack length is used for LVO Non-pivoted type with multiple openable parts. Height of pivoting axis is used for LVO Horizontally pivoted type. Specifies window or door characteristics that depend on the LVO type. For Non-pivoted Type (rectangular windows and doors), this field is the extra crack length in meters due to multiple openable parts, if present. Extra here means in addition to the length of the cracks on the top, bottom and sides of the window/door. For Horizontally pivoted Type, this field gives the height of the pivoting axis measured from the bottom of the glazed part of the window (m).")]
[JsonProperty("extra_crack_length_or_height_of_pivoting_axis")]
public System.Nullable<float> ExtraCrackLengthOrHeightOfPivotingAxis { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Enter the number of the following sets of data for opening factor, discharge coef" +
    "ficient, width factor, height factor, and start height factor.")]
[JsonProperty("number_of_sets_of_opening_factor_data")]
public System.Nullable<float> NumberOfSetsOfOpeningFactorData { get; set; } = null;
        

[Description("This value must be specified as 0.")]
[JsonProperty("opening_factor_1")]
public System.Nullable<float> OpeningFactor1 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The Discharge Coefficient indicates the fractional effectiveness for air flow thr" +
    "ough a window or door at that Opening Factor.")]
[JsonProperty("discharge_coefficient_for_opening_factor_1")]
public System.Nullable<float> DischargeCoefficientForOpeningFactor1 { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[Description("The Width Factor is the opening width divided by the window or door width.")]
[JsonProperty("width_factor_for_opening_factor_1")]
public System.Nullable<float> WidthFactorForOpeningFactor1 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The Height Factor is the opening height divided by the window or door height.")]
[JsonProperty("height_factor_for_opening_factor_1")]
public System.Nullable<float> HeightFactorForOpeningFactor1 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"The Start Height Factor is the Start Height divided by the window or door height. Start Height is the distance between the bottom of the window or door and the bottom of the window or door opening. The sum of the Height Factor and the Start Height Factor must be less than 1.0 in order to have the opening within the window or door dimensions.")]
[JsonProperty("start_height_factor_for_opening_factor_1")]
public System.Nullable<float> StartHeightFactorForOpeningFactor1 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"If Number of Sets of Opening Factor Data = 2, this value must be 1.0. If Number of Sets of Opening Factor Data = 3, this value must be less than 1.0. If Number of Sets of Opening Factor Data = 4, this value must be less than the value entered for Opening factor 3 and greater than the value entered for Opening factor 1.")]
[JsonProperty("opening_factor_2")]
public System.Nullable<float> OpeningFactor2 { get; set; } = null;
        

[Description("The Discharge Coefficient indicates the fractional effectiveness for air flow thr" +
    "ough a window or door at that Opening Factor.")]
[JsonProperty("discharge_coefficient_for_opening_factor_2")]
public System.Nullable<float> DischargeCoefficientForOpeningFactor2 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("The Width Factor is the opening width divided by the window or door width.")]
[JsonProperty("width_factor_for_opening_factor_2")]
public System.Nullable<float> WidthFactorForOpeningFactor2 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("The Height Factor is the opening height divided by the window or door height.")]
[JsonProperty("height_factor_for_opening_factor_2")]
public System.Nullable<float> HeightFactorForOpeningFactor2 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description(@"The Start Height Factor is the Start Height divided by the window or door height. Start Height is the distance between the bottom of the window or door and the bottom of the window or door opening. The sum of the Height Factor and the Start Height Factor must be less than 1.0 in order to have the opening within the window or door dimensions.")]
[JsonProperty("start_height_factor_for_opening_factor_2")]
public System.Nullable<float> StartHeightFactorForOpeningFactor2 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("If Number of Sets of Opening Factor Data = 3, this value must be 1.0. If Number o" +
    "f Sets of Opening Factor Data = 4, this value must be less than 1.0, and greater" +
    " than value entered for Opening factor 2.")]
[JsonProperty("opening_factor_3")]
public System.Nullable<float> OpeningFactor3 { get; set; } = null;
        

[Description("The Discharge Coefficient indicates the fractional effectiveness for air flow thr" +
    "ough a window or door at that Opening Factor.")]
[JsonProperty("discharge_coefficient_for_opening_factor_3")]
public System.Nullable<float> DischargeCoefficientForOpeningFactor3 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The Width Factor is the opening width divided by the window or door width.")]
[JsonProperty("width_factor_for_opening_factor_3")]
public System.Nullable<float> WidthFactorForOpeningFactor3 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The Height Factor is the opening height divided by the window or door height.")]
[JsonProperty("height_factor_for_opening_factor_3")]
public System.Nullable<float> HeightFactorForOpeningFactor3 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"The Start Height Factor is the Start Height divided by the window or door height. Start Height is the distance between the bottom of the window or door and the bottom of the window or door opening. The sum of the Height Factor and the Start Height Factor must be less than 1.0 in order to have the opening within the window or door dimensions.")]
[JsonProperty("start_height_factor_for_opening_factor_3")]
public System.Nullable<float> StartHeightFactorForOpeningFactor3 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("If Number of Sets of Opening Factor Data = 4, this value must be 1.0")]
[JsonProperty("opening_factor_4")]
public System.Nullable<float> OpeningFactor4 { get; set; } = null;
        

[Description("The Discharge Coefficient indicates the fractional effectiveness for air flow thr" +
    "ough a window or door at that Opening Factor.")]
[JsonProperty("discharge_coefficient_for_opening_factor_4")]
public System.Nullable<float> DischargeCoefficientForOpeningFactor4 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The Width Factor is the opening width divided by the window or door width.")]
[JsonProperty("width_factor_for_opening_factor_4")]
public System.Nullable<float> WidthFactorForOpeningFactor4 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The Height Factor is the opening height divided by the window or door height.")]
[JsonProperty("height_factor_for_opening_factor_4")]
public System.Nullable<float> HeightFactorForOpeningFactor4 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"The Start Height Factor is the Start Height divided by the window or door height. Start Height is the distance between the bottom of the window or door and the bottom of the window or door opening. The sum of the Height Factor and the Start Height Factor must be less than 1.0 in order to have the opening within the window or door dimensions.")]
[JsonProperty("start_height_factor_for_opening_factor_4")]
public System.Nullable<float> StartHeightFactorForOpeningFactor4 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum AirflowNetwork_MultiZone_Component_DetailedOpening_TypeOfRectangularLargeVerticalOpeningLvo
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("HorizontallyPivoted")]
        HorizontallyPivoted = 1,
        
        [JsonProperty("NonPivoted")]
        NonPivoted = 2,
    }
    
    [Description("This object specifies the properties of air flow through windows and doors (windo" +
        "w, door and glass door heat transfer subsurfaces) when they are closed or open.")]
    [JsonObject("AirflowNetwork:MultiZone:Component:SimpleOpening")]
    public class AirflowNetwork_MultiZone_Component_SimpleOpening : BHoMObject, IEnergyPlusClass
    {
        

[Description("Defined at 1 Pa pressure difference. Enter the coefficient used in the following " +
    "equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Expone" +
    "nt. Used only when opening (window or door) is closed.")]
[JsonProperty("air_mass_flow_coefficient_when_opening_is_closed")]
public System.Nullable<float> AirMassFlowCoefficientWhenOpeningIsClosed { get; set; } = null;
        

[Description("Enter the exponent used in the following equation: Mass Flow Rate = Air Mass Flow" +
    " Coefficient * (dP)^Air Mass Flow Exponent. Used only when opening (window or do" +
    "or) is closed.")]
[JsonProperty("air_mass_flow_exponent_when_opening_is_closed")]
public System.Nullable<float> AirMassFlowExponentWhenOpeningIsClosed { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
        

[Description("Enter the minimum density difference above which two-way flow may occur due to st" +
    "ack effect.")]
[JsonProperty("minimum_density_difference_for_two_way_flow")]
public System.Nullable<float> MinimumDensityDifferenceForTwoWayFlow { get; set; } = null;
        

[Description("The Discharge Coefficient indicates the fractional effectiveness for air flow thr" +
    "ough a window or door at that Opening Factor.")]
[JsonProperty("discharge_coefficient")]
public System.Nullable<float> DischargeCoefficient { get; set; } = null;
    }
    
    [Description("This object specifies the properties of air flow through a horizontal opening")]
    [JsonObject("AirflowNetwork:MultiZone:Component:HorizontalOpening")]
    public class AirflowNetwork_MultiZone_Component_HorizontalOpening : BHoMObject, IEnergyPlusClass
    {
        

[Description("Defined at 1 Pa pressure difference. Enter the coefficient used in the following " +
    "equation: Mass flow rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Expone" +
    "nt. Used only when opening is closed.")]
[JsonProperty("air_mass_flow_coefficient_when_opening_is_closed")]
public System.Nullable<float> AirMassFlowCoefficientWhenOpeningIsClosed { get; set; } = null;
        

[Description("Enter the exponent used in the following equation: Mass flow rate = Air Mass Flow" +
    " Coefficient * (dP)^Air Mass Flow Exponent. Used only when opening is closed.")]
[JsonProperty("air_mass_flow_exponent_when_opening_is_closed")]
public System.Nullable<float> AirMassFlowExponentWhenOpeningIsClosed { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
        

[Description("Sloping plane angle = 90 is equivalent to fully open.")]
[JsonProperty("sloping_plane_angle")]
public System.Nullable<float> SlopingPlaneAngle { get; set; } = (System.Nullable<float>)Single.Parse("90", CultureInfo.InvariantCulture);
        

[Description("The Discharge Coefficient indicates the fractional effectiveness for air flow thr" +
    "ough the opening at that Opening Factor.")]
[JsonProperty("discharge_coefficient")]
public System.Nullable<float> DischargeCoefficient { get; set; } = null;
    }
    
    [Description("This object specifies the additional properties for a zone exhaust fan to perform" +
        " multizone airflow calculations.")]
    [JsonObject("AirflowNetwork:MultiZone:Component:ZoneExhaustFan")]
    public class AirflowNetwork_MultiZone_Component_ZoneExhaustFan : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Enter the air mass flow coefficient at the conditions defined in the Reference Crack Conditions object. Defined at 1 Pa pressure difference. Enter the coefficient used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when the fan is off.")]
[JsonProperty("air_mass_flow_coefficient_when_the_zone_exhaust_fan_is_off_at_reference_condition" +
    "s")]
public System.Nullable<float> AirMassFlowCoefficientWhenTheZoneExhaustFanIsOffAtReferenceConditions { get; set; } = null;
        

[Description("Enter the exponent used in the following equation: Mass Flow Rate = Air Mass Flow" +
    " Coefficient * (dP)^Air Mass Flow Exponent. Used only when the fan is off.")]
[JsonProperty("air_mass_flow_exponent_when_the_zone_exhaust_fan_is_off")]
public System.Nullable<float> AirMassFlowExponentWhenTheZoneExhaustFanIsOff { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
        

[Description("Select a AirflowNetwork:MultiZone:ReferenceCrackConditions name associated with t" +
    "he air mass flow coefficient entered above.")]
[JsonProperty("reference_crack_conditions")]
public string ReferenceCrackConditions { get; set; } = "";
    }
    
    [Description("This object defines outdoor environmental conditions outside of the building.")]
    [JsonObject("AirflowNetwork:MultiZone:ExternalNode")]
    public class AirflowNetwork_MultiZone_ExternalNode : BHoMObject, IEnergyPlusClass
    {
        

[Description("Designates the reference height used to calculate relative pressure.")]
[JsonProperty("external_node_height")]
public System.Nullable<float> ExternalNodeHeight { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The name of the AirflowNetwork:MultiZone:WindPressureCoefficientValues, curve, or" +
    " table object specifying the wind pressure coefficient.")]
[JsonProperty("wind_pressure_coefficient_curve_name")]
public string WindPressureCoefficientCurveName { get; set; } = "";
        

[Description("Specify whether the pressure curve is symmetric or not. Specify Yes for curves th" +
    "at should be evaluated from 0 to 180 degrees Specify No for curves that should b" +
    "e evaluated from 0 to 360 degrees")]
[JsonProperty("symmetric_wind_pressure_coefficient_curve")]
public EmptyNoYes SymmetricWindPressureCoefficientCurve { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Specify whether the angle used to compute the wind pressure coefficient is absolu" +
    "te or relative Specify Relative to compute the angle between the wind direction " +
    "and the surface azimuth Specify Absolute to use the wind direction angle directl" +
    "y")]
[JsonProperty("wind_angle_type")]
public AirflowNetwork_MultiZone_ExternalNode_WindAngleType WindAngleType { get; set; } = (AirflowNetwork_MultiZone_ExternalNode_WindAngleType)Enum.Parse(typeof(AirflowNetwork_MultiZone_ExternalNode_WindAngleType), "Absolute");
    }
    
    public enum AirflowNetwork_MultiZone_ExternalNode_WindAngleType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Absolute")]
        Absolute = 1,
        
        [JsonProperty("Relative")]
        Relative = 2,
    }
    
    [Description(@"Used only if Wind Pressure Coefficient (WPC) Type = Input in the AirflowNetwork:SimulationControl object. Number of WPC Values in the corresponding AirflowNetwork:MultiZone:WindPressureCoefficientValues object must be the same as the number of wind directions specified for this AirflowNetwork:MultiZone:WindPressureCoefficientArray object.")]
    [JsonObject("AirflowNetwork:MultiZone:WindPressureCoefficientArray")]
    public class AirflowNetwork_MultiZone_WindPressureCoefficientArray : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the wind direction corresponding to the 1st WPC Array value.")]
[JsonProperty("wind_direction_1")]
public System.Nullable<float> WindDirection1 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 2nd WPC Array value.")]
[JsonProperty("wind_direction_2")]
public System.Nullable<float> WindDirection2 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 3rd WPC Array value.")]
[JsonProperty("wind_direction_3")]
public System.Nullable<float> WindDirection3 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 4th WPC Array value.")]
[JsonProperty("wind_direction_4")]
public System.Nullable<float> WindDirection4 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 5th WPC Array value.")]
[JsonProperty("wind_direction_5")]
public System.Nullable<float> WindDirection5 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 6th WPC Array value.")]
[JsonProperty("wind_direction_6")]
public System.Nullable<float> WindDirection6 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 7th WPC Array value.")]
[JsonProperty("wind_direction_7")]
public System.Nullable<float> WindDirection7 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 8th WPC Array value.")]
[JsonProperty("wind_direction_8")]
public System.Nullable<float> WindDirection8 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 9th WPC Array value.")]
[JsonProperty("wind_direction_9")]
public System.Nullable<float> WindDirection9 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 10th WPC Array value.")]
[JsonProperty("wind_direction_10")]
public System.Nullable<float> WindDirection10 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 11th WPC Array value.")]
[JsonProperty("wind_direction_11")]
public System.Nullable<float> WindDirection11 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 12th WPC Array value.")]
[JsonProperty("wind_direction_12")]
public System.Nullable<float> WindDirection12 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 13th WPC Array value.")]
[JsonProperty("wind_direction_13")]
public System.Nullable<float> WindDirection13 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 14th WPC Array value.")]
[JsonProperty("wind_direction_14")]
public System.Nullable<float> WindDirection14 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 15th WPC Array value.")]
[JsonProperty("wind_direction_15")]
public System.Nullable<float> WindDirection15 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 16th WPC Array value.")]
[JsonProperty("wind_direction_16")]
public System.Nullable<float> WindDirection16 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 17th WPC Array value.")]
[JsonProperty("wind_direction_17")]
public System.Nullable<float> WindDirection17 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 18th WPC Array value.")]
[JsonProperty("wind_direction_18")]
public System.Nullable<float> WindDirection18 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 19th WPC Array value.")]
[JsonProperty("wind_direction_19")]
public System.Nullable<float> WindDirection19 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 20th WPC Array value.")]
[JsonProperty("wind_direction_20")]
public System.Nullable<float> WindDirection20 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 21st WPC Array value.")]
[JsonProperty("wind_direction_21")]
public System.Nullable<float> WindDirection21 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 22nd WPC Array value.")]
[JsonProperty("wind_direction_22")]
public System.Nullable<float> WindDirection22 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 23rd WPC Array value.")]
[JsonProperty("wind_direction_23")]
public System.Nullable<float> WindDirection23 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 24th WPC Array value.")]
[JsonProperty("wind_direction_24")]
public System.Nullable<float> WindDirection24 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 25th WPC Array value.")]
[JsonProperty("wind_direction_25")]
public System.Nullable<float> WindDirection25 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 26th WPC Array value.")]
[JsonProperty("wind_direction_26")]
public System.Nullable<float> WindDirection26 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 27th WPC Array value.")]
[JsonProperty("wind_direction_27")]
public System.Nullable<float> WindDirection27 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 28th WPC Array value.")]
[JsonProperty("wind_direction_28")]
public System.Nullable<float> WindDirection28 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 29th WPC Array value.")]
[JsonProperty("wind_direction_29")]
public System.Nullable<float> WindDirection29 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 30th WPC Array value.")]
[JsonProperty("wind_direction_30")]
public System.Nullable<float> WindDirection30 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 31st WPC Array value.")]
[JsonProperty("wind_direction_31")]
public System.Nullable<float> WindDirection31 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 32nd WPC Array value.")]
[JsonProperty("wind_direction_32")]
public System.Nullable<float> WindDirection32 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 33rd WPC Array value.")]
[JsonProperty("wind_direction_33")]
public System.Nullable<float> WindDirection33 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 34th WPC Array value.")]
[JsonProperty("wind_direction_34")]
public System.Nullable<float> WindDirection34 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 35th WPC Array value.")]
[JsonProperty("wind_direction_35")]
public System.Nullable<float> WindDirection35 { get; set; } = null;
        

[Description("Enter the wind direction corresponding to the 36th WPC Array value.")]
[JsonProperty("wind_direction_36")]
public System.Nullable<float> WindDirection36 { get; set; } = null;
    }
    
    [Description(@"Used only if Wind Pressure Coefficient (WPC) Type = INPUT in the AirflowNetwork:SimulationControl object. The number of WPC numeric inputs must correspond to the number of wind direction inputs in the AirflowNetwork:Multizone:WindPressureCoefficientArray object.")]
    [JsonObject("AirflowNetwork:MultiZone:WindPressureCoefficientValues")]
    public class AirflowNetwork_MultiZone_WindPressureCoefficientValues : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of the AirflowNetwork:Multizone:WindPressureCoefficientArray objec" +
    "t.")]
[JsonProperty("airflownetwork_multizone_windpressurecoefficientarray_name")]
public string AirflownetworkMultizoneWindpressurecoefficientarrayName { get; set; } = "";
        

[Description("Enter the WPC Value corresponding to the 1st wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_1")]
public System.Nullable<float> WindPressureCoefficientValue1 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 2nd wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_2")]
public System.Nullable<float> WindPressureCoefficientValue2 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 3rd wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_3")]
public System.Nullable<float> WindPressureCoefficientValue3 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 4th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_4")]
public System.Nullable<float> WindPressureCoefficientValue4 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 5th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_5")]
public System.Nullable<float> WindPressureCoefficientValue5 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 6th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_6")]
public System.Nullable<float> WindPressureCoefficientValue6 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 7th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_7")]
public System.Nullable<float> WindPressureCoefficientValue7 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 8th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_8")]
public System.Nullable<float> WindPressureCoefficientValue8 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 9th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_9")]
public System.Nullable<float> WindPressureCoefficientValue9 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 10th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_10")]
public System.Nullable<float> WindPressureCoefficientValue10 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 11th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_11")]
public System.Nullable<float> WindPressureCoefficientValue11 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 12th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_12")]
public System.Nullable<float> WindPressureCoefficientValue12 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 13th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_13")]
public System.Nullable<float> WindPressureCoefficientValue13 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 14th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_14")]
public System.Nullable<float> WindPressureCoefficientValue14 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 15th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_15")]
public System.Nullable<float> WindPressureCoefficientValue15 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 16th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_16")]
public System.Nullable<float> WindPressureCoefficientValue16 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 17th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_17")]
public System.Nullable<float> WindPressureCoefficientValue17 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 18th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_18")]
public System.Nullable<float> WindPressureCoefficientValue18 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 19th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_19")]
public System.Nullable<float> WindPressureCoefficientValue19 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 20th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_20")]
public System.Nullable<float> WindPressureCoefficientValue20 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 21st wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_21")]
public System.Nullable<float> WindPressureCoefficientValue21 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 22nd wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_22")]
public System.Nullable<float> WindPressureCoefficientValue22 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 23rd wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_23")]
public System.Nullable<float> WindPressureCoefficientValue23 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 24th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_24")]
public System.Nullable<float> WindPressureCoefficientValue24 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 25th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_25")]
public System.Nullable<float> WindPressureCoefficientValue25 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 26th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_26")]
public System.Nullable<float> WindPressureCoefficientValue26 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 27th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_27")]
public System.Nullable<float> WindPressureCoefficientValue27 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 28th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_28")]
public System.Nullable<float> WindPressureCoefficientValue28 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 29th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_29")]
public System.Nullable<float> WindPressureCoefficientValue29 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 30th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_30")]
public System.Nullable<float> WindPressureCoefficientValue30 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 31st wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_31")]
public System.Nullable<float> WindPressureCoefficientValue31 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 32nd wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_32")]
public System.Nullable<float> WindPressureCoefficientValue32 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 33rd wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_33")]
public System.Nullable<float> WindPressureCoefficientValue33 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 34th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_34")]
public System.Nullable<float> WindPressureCoefficientValue34 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 35th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_35")]
public System.Nullable<float> WindPressureCoefficientValue35 { get; set; } = null;
        

[Description("Enter the WPC Value corresponding to the 36th wind direction.")]
[JsonProperty("wind_pressure_coefficient_value_36")]
public System.Nullable<float> WindPressureCoefficientValue36 { get; set; } = null;
    }
    
    [Description("This object is used to control a zone to a specified indoor pressure using the Ai" +
        "rflowNetwork model. The specified pressure setpoint is used to control the zone " +
        "exhaust fan flow rate in a controlled zone or the relief air flow rate in an air" +
        " loop.")]
    [JsonObject("AirflowNetwork:ZoneControl:PressureController")]
    public class AirflowNetwork_ZoneControl_PressureController : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_zone_name")]
public string ControlZoneName { get; set; } = "";
        

[Description("The current selection is AirflowNetwork:MultiZone:Component:ZoneExhaustFan or Air" +
    "flowNetwork:Distribution:Component:ReliefAirFlow.")]
[JsonProperty("control_object_type")]
public AirflowNetwork_ZoneControl_PressureController_ControlObjectType ControlObjectType { get; set; } = (AirflowNetwork_ZoneControl_PressureController_ControlObjectType)Enum.Parse(typeof(AirflowNetwork_ZoneControl_PressureController_ControlObjectType), "AirflowNetworkDistributionComponentReliefAirFlow");
        

[Description("Control names are names of individual control objects")]
[JsonProperty("control_object_name")]
public string ControlObjectName { get; set; } = "";
        

[Description("Availability schedule name for pressure controller. Schedule value > 0 means the " +
    "pressure controller is enabled. If this field is blank, then pressure controller" +
    " is always enabled.")]
[JsonProperty("pressure_control_availability_schedule_name")]
public string PressureControlAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("pressure_setpoint_schedule_name")]
public string PressureSetpointScheduleName { get; set; } = "";
    }
    
    public enum AirflowNetwork_ZoneControl_PressureController_ControlObjectType
    {
        
        [JsonProperty("AirflowNetwork:Distribution:Component:ReliefAirFlow")]
        AirflowNetworkDistributionComponentReliefAirFlow = 0,
        
        [JsonProperty("AirflowNetwork:MultiZone:Component:ZoneExhaustFan")]
        AirflowNetworkMultiZoneComponentZoneExhaustFan = 1,
    }
    
    [Description("This object represents an air distribution node in the AirflowNetwork model.")]
    [JsonObject("AirflowNetwork:Distribution:Node")]
    public class AirflowNetwork_Distribution_Node : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Designates node names defined in another object. The node name may occur in air branches. Enter a node name to represent a node already defined in an air loop. Leave this field blank if the Node or Object Type field below is entered as AirLoopHVAC:ZoneMixer, AirLoopHVAC:ZoneSplitter, AirLoopHVAC:OutdoorAirSystem, or Other.")]
[JsonProperty("component_name_or_node_name")]
public string ComponentNameOrNodeName { get; set; } = "";
        

[Description(@"Designates Node type for the Node or Component Name defined in the field above. AirLoopHVAC:ZoneMixer -- Represents a AirLoopHVAC:ZoneMixer object. AirLoopHVAC:ZoneSplitter -- Represents a AirLoopHVAC:ZoneSplitter object. AirLoopHVAC:OutdoorAirSystem -- Represents an AirLoopHVAC:OutdoorAirSystem object. OAMixerOutdoorAirStreamNode -- Represents an external node used in the OutdoorAir:Mixer OutdoorAir:NodeList -- Represents an external node when a heat exchanger is used before the OutdoorAir:Mixer OutdoorAir:Node -- Represents an external node when a heat exchanger is used before the OutdoorAir:Mixer Other -- none of the above, the Node name already defined in the previous field is part of an air loop.")]
[JsonProperty("component_object_type_or_node_type")]
public AirflowNetwork_Distribution_Node_ComponentObjectTypeOrNodeType ComponentObjectTypeOrNodeType { get; set; } = (AirflowNetwork_Distribution_Node_ComponentObjectTypeOrNodeType)Enum.Parse(typeof(AirflowNetwork_Distribution_Node_ComponentObjectTypeOrNodeType), "Other");
        

[Description("Enter the reference height used to calculate the relative pressure.")]
[JsonProperty("node_height")]
public System.Nullable<float> NodeHeight { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum AirflowNetwork_Distribution_Node_ComponentObjectTypeOrNodeType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirLoopHVAC:OutdoorAirSystem")]
        AirLoopHVACOutdoorAirSystem = 1,
        
        [JsonProperty("AirLoopHVAC:ZoneMixer")]
        AirLoopHVACZoneMixer = 2,
        
        [JsonProperty("AirLoopHVAC:ZoneSplitter")]
        AirLoopHVACZoneSplitter = 3,
        
        [JsonProperty("OAMixerOutdoorAirStreamNode")]
        OAMixerOutdoorAirStreamNode = 4,
        
        [JsonProperty("Other")]
        Other = 5,
        
        [JsonProperty("OutdoorAir:Node")]
        OutdoorAirNode = 6,
        
        [JsonProperty("OutdoorAir:NodeList")]
        OutdoorAirNodeList = 7,
    }
    
    [Description("This object defines the characteristics of a supply or return air leak.")]
    [JsonObject("AirflowNetwork:Distribution:Component:Leak")]
    public class AirflowNetwork_Distribution_Component_Leak : BHoMObject, IEnergyPlusClass
    {
        

[Description("Defined at 1 Pa pressure difference across this component. Enter the coefficient " +
    "used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP" +
    ")^Air Mass Flow Exponent")]
[JsonProperty("air_mass_flow_coefficient")]
public System.Nullable<float> AirMassFlowCoefficient { get; set; } = null;
        

[Description("Enter the exponent used in the following equation: Mass Flow Rate = Air Mass Flow" +
    " Coefficient * (dP)^Air Mass Flow Exponent")]
[JsonProperty("air_mass_flow_exponent")]
public System.Nullable<float> AirMassFlowExponent { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
    }
    
    [Description("This object is used to define supply and return air leaks with respect to the fan" +
        "\'s maximum air flow rate.")]
    [JsonObject("AirflowNetwork:Distribution:Component:LeakageRatio")]
    public class AirflowNetwork_Distribution_Component_LeakageRatio : BHoMObject, IEnergyPlusClass
    {
        

[Description("Defined as a ratio of leak flow rate to the maximum flow rate.")]
[JsonProperty("effective_leakage_ratio")]
public System.Nullable<float> EffectiveLeakageRatio { get; set; } = null;
        

[Description("Enter the maximum air flow rate in this air loop.")]
[JsonProperty("maximum_flow_rate")]
public System.Nullable<float> MaximumFlowRate { get; set; } = null;
        

[Description("Enter the pressure corresponding to the Effective leakage ratio entered above.")]
[JsonProperty("reference_pressure_difference")]
public System.Nullable<float> ReferencePressureDifference { get; set; } = null;
        

[Description("Enter the exponent used in the air mass flow equation.")]
[JsonProperty("air_mass_flow_exponent")]
public System.Nullable<float> AirMassFlowExponent { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
    }
    
    [Description("This object defines the relationship between pressure and air flow through the du" +
        "ct.")]
    [JsonObject("AirflowNetwork:Distribution:Component:Duct")]
    public class AirflowNetwork_Distribution_Component_Duct : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the length of the duct.")]
[JsonProperty("duct_length")]
public System.Nullable<float> DuctLength { get; set; } = null;
        

[Description("Enter the hydraulic diameter of the duct. Hydraulic diameter is defined as 4 mult" +
    "iplied by cross section area divided by perimeter")]
[JsonProperty("hydraulic_diameter")]
public System.Nullable<float> HydraulicDiameter { get; set; } = null;
        

[Description("Enter the cross section area of the duct.")]
[JsonProperty("cross_section_area")]
public System.Nullable<float> CrossSectionArea { get; set; } = null;
        

[Description("Enter the inside surface roughness of the duct.")]
[JsonProperty("surface_roughness")]
public System.Nullable<float> SurfaceRoughness { get; set; } = (System.Nullable<float>)Single.Parse("0.0009", CultureInfo.InvariantCulture);
        

[Description("Enter the coefficient used to calculate dynamic losses of fittings (e.g. elbows)." +
    "")]
[JsonProperty("coefficient_for_local_dynamic_loss_due_to_fitting")]
public System.Nullable<float> CoefficientForLocalDynamicLossDueToFitting { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("conduction only Default value of 0.943 is equivalent to 1.06 m2-K/W (R6) duct ins" +
    "ulation.")]
[JsonProperty("heat_transmittance_coefficient_u_factor_for_duct_wall_construction")]
public System.Nullable<float> HeatTransmittanceCoefficientUFactorForDuctWallConstruction { get; set; } = (System.Nullable<float>)Single.Parse("0.943", CultureInfo.InvariantCulture);
        

[Description("Enter the overall moisture transmittance coefficient including moisture film coef" +
    "ficients at both surfaces.")]
[JsonProperty("overall_moisture_transmittance_coefficient_from_air_to_air")]
public System.Nullable<float> OverallMoistureTransmittanceCoefficientFromAirToAir { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[Description("optional. convection coefficient calculated automatically, unless specified")]
[JsonProperty("outside_convection_coefficient")]
public System.Nullable<float> OutsideConvectionCoefficient { get; set; } = null;
        

[Description("optional. convection coefficient calculated automatically, unless specified")]
[JsonProperty("inside_convection_coefficient")]
public System.Nullable<float> InsideConvectionCoefficient { get; set; } = null;
    }
    
    [Description("This object defines the name of the supply Air Fan used in an Air loop.")]
    [JsonObject("AirflowNetwork:Distribution:Component:Fan")]
    public class AirflowNetwork_Distribution_Component_Fan : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of the fan in the primary air loop.")]
[JsonProperty("fan_name")]
public string FanName { get; set; } = "";
        

[JsonProperty("supply_fan_object_type")]
public AirflowNetwork_Distribution_Component_Fan_SupplyFanObjectType SupplyFanObjectType { get; set; } = (AirflowNetwork_Distribution_Component_Fan_SupplyFanObjectType)Enum.Parse(typeof(AirflowNetwork_Distribution_Component_Fan_SupplyFanObjectType), "Empty");
    }
    
    public enum AirflowNetwork_Distribution_Component_Fan_SupplyFanObjectType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 1,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 2,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 3,
        
        [JsonProperty("Fan:VariableVolume")]
        FanVariableVolume = 4,
    }
    
    [Description("This object defines the name of a coil used in an air loop.")]
    [JsonObject("AirflowNetwork:Distribution:Component:Coil")]
    public class AirflowNetwork_Distribution_Component_Coil : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of a cooling or heating coil in the primary Air loop.")]
[JsonProperty("coil_name")]
public string CoilName { get; set; } = "";
        

[Description("Select the type of coil corresponding to the name entered in the field above.")]
[JsonProperty("coil_object_type")]
public AirflowNetwork_Distribution_Component_Coil_CoilObjectType CoilObjectType { get; set; } = (AirflowNetwork_Distribution_Component_Coil_CoilObjectType)Enum.Parse(typeof(AirflowNetwork_Distribution_Component_Coil_CoilObjectType), "CoilCoolingDX");
        

[Description("Enter the air path length (depth) for the coil.")]
[JsonProperty("air_path_length")]
public System.Nullable<float> AirPathLength { get; set; } = null;
        

[Description("Enter the hydraulic diameter of this coil. The hydraulic diameter is defined as 4" +
    " multiplied by the cross section area divided by perimeter.")]
[JsonProperty("air_path_hydraulic_diameter")]
public System.Nullable<float> AirPathHydraulicDiameter { get; set; } = null;
    }
    
    public enum AirflowNetwork_Distribution_Component_Coil_CoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:DX")]
        CoilCoolingDX = 0,
        
        [JsonProperty("Coil:Cooling:DX:MultiSpeed")]
        CoilCoolingDXMultiSpeed = 1,
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 2,
        
        [JsonProperty("Coil:Cooling:DX:TwoSpeed")]
        CoilCoolingDXTwoSpeed = 3,
        
        [JsonProperty("Coil:Cooling:DX:TwoStageWithHumidityControlMode")]
        CoilCoolingDXTwoStageWithHumidityControlMode = 4,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 5,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 6,
        
        [JsonProperty("Coil:Heating:DX:MultiSpeed")]
        CoilHeatingDXMultiSpeed = 7,
        
        [JsonProperty("Coil:Heating:DX:SingleSpeed")]
        CoilHeatingDXSingleSpeed = 8,
        
        [JsonProperty("Coil:Heating:Desuperheater")]
        CoilHeatingDesuperheater = 9,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 10,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 11,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 12,
    }
    
    [Description("This object defines the name of an air-to-air heat exchanger used in an air loop." +
        "")]
    [JsonObject("AirflowNetwork:Distribution:Component:HeatExchanger")]
    public class AirflowNetwork_Distribution_Component_HeatExchanger : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of an air-to-air heat exchanger in the primary Air loop.")]
[JsonProperty("heatexchanger_name")]
public string HeatexchangerName { get; set; } = "";
        

[Description("Select the type of heat exchanger corresponding to the name entered in the field " +
    "above.")]
[JsonProperty("heatexchanger_object_type")]
public AirflowNetwork_Distribution_Component_HeatExchanger_HeatexchangerObjectType HeatexchangerObjectType { get; set; } = (AirflowNetwork_Distribution_Component_HeatExchanger_HeatexchangerObjectType)Enum.Parse(typeof(AirflowNetwork_Distribution_Component_HeatExchanger_HeatexchangerObjectType), "HeatExchangerAirToAirFlatPlate");
        

[Description("Enter the air path length (depth) for the heat exchanger.")]
[JsonProperty("air_path_length")]
public System.Nullable<float> AirPathLength { get; set; } = null;
        

[Description("Enter the hydraulic diameter of this heat exchanger. The hydraulic diameter is de" +
    "fined as 4 multiplied by the cross section area divided by perimeter.")]
[JsonProperty("air_path_hydraulic_diameter")]
public System.Nullable<float> AirPathHydraulicDiameter { get; set; } = null;
    }
    
    public enum AirflowNetwork_Distribution_Component_HeatExchanger_HeatexchangerObjectType
    {
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 0,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 1,
        
        [JsonProperty("HeatExchanger:Desiccant:BalancedFlow")]
        HeatExchangerDesiccantBalancedFlow = 2,
    }
    
    [Description("This object defines the name of a terminal unit in an air loop.")]
    [JsonObject("AirflowNetwork:Distribution:Component:TerminalUnit")]
    public class AirflowNetwork_Distribution_Component_TerminalUnit : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of a terminal unit in the AirLoopHVAC.")]
[JsonProperty("terminal_unit_name")]
public string TerminalUnitName { get; set; } = "";
        

[Description("Select the type of terminal unit corresponding to the name entered in the field a" +
    "bove.")]
[JsonProperty("terminal_unit_object_type")]
public AirflowNetwork_Distribution_Component_TerminalUnit_TerminalUnitObjectType TerminalUnitObjectType { get; set; } = (AirflowNetwork_Distribution_Component_TerminalUnit_TerminalUnitObjectType)Enum.Parse(typeof(AirflowNetwork_Distribution_Component_TerminalUnit_TerminalUnitObjectType), "AirTerminalSingleDuctConstantVolumeReheat");
        

[Description("Enter the air path length (depth) for the terminal unit.")]
[JsonProperty("air_path_length")]
public System.Nullable<float> AirPathLength { get; set; } = null;
        

[Description("Enter the hydraulic diameter of this terminal unit. The hydraulic diameter is def" +
    "ined as 4 multiplied by the cross section area divided by perimeter.")]
[JsonProperty("air_path_hydraulic_diameter")]
public System.Nullable<float> AirPathHydraulicDiameter { get; set; } = null;
    }
    
    public enum AirflowNetwork_Distribution_Component_TerminalUnit_TerminalUnitObjectType
    {
        
        [JsonProperty("AirTerminal:SingleDuct:ConstantVolume:Reheat")]
        AirTerminalSingleDuctConstantVolumeReheat = 0,
        
        [JsonProperty("AirTerminal:SingleDuct:VAV:Reheat")]
        AirTerminalSingleDuctVAVReheat = 1,
    }
    
    [Description(@"This object defines the characteristics of a constant pressure drop component (e.g. filter). Each node connected to this object can not be a node of mixer, splitter, a node of air primary loop, or zone equipment loop. It is recommended to connect to a duct component at both ends.")]
    [JsonObject("AirflowNetwork:Distribution:Component:ConstantPressureDrop")]
    public class AirflowNetwork_Distribution_Component_ConstantPressureDrop : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the pressure drop across this component.")]
[JsonProperty("pressure_difference_across_the_component")]
public System.Nullable<float> PressureDifferenceAcrossTheComponent { get; set; } = null;
    }
    
    [Description("This object includes the outdoor air flow rate set by the Controller:OutdoorAir o" +
        "bject in the airflow network.")]
    [JsonObject("AirflowNetwork:Distribution:Component:OutdoorAirFlow")]
    public class AirflowNetwork_Distribution_Component_OutdoorAirFlow : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("outdoor_air_mixer_name")]
public string OutdoorAirMixerName { get; set; } = "";
        

[Description(@"Enter the air mass flow coefficient at the conditions defined in the Reference Crack Conditions object. Defined at 1 Pa pressure difference. Enter the coefficient used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when no outdoor air flow rate.")]
[JsonProperty("air_mass_flow_coefficient_when_no_outdoor_air_flow_at_reference_conditions")]
public System.Nullable<float> AirMassFlowCoefficientWhenNoOutdoorAirFlowAtReferenceConditions { get; set; } = null;
        

[Description("Enter the exponent used in the following equation: Mass Flow Rate = Air Mass Flow" +
    " Coefficient * (dP)^Air Mass Flow Exponent. Used only when no outdoor air flow r" +
    "ate.")]
[JsonProperty("air_mass_flow_exponent_when_no_outdoor_air_flow")]
public System.Nullable<float> AirMassFlowExponentWhenNoOutdoorAirFlow { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
        

[Description("Select a AirflowNetwork:MultiZone:ReferenceCrackConditions name associated with t" +
    "he air mass flow coefficient entered above.")]
[JsonProperty("reference_crack_conditions")]
public string ReferenceCrackConditions { get; set; } = "";
    }
    
    [Description("This object allows variation of air flow rate to perform pressure.")]
    [JsonObject("AirflowNetwork:Distribution:Component:ReliefAirFlow")]
    public class AirflowNetwork_Distribution_Component_ReliefAirFlow : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("outdoor_air_mixer_name")]
public string OutdoorAirMixerName { get; set; } = "";
        

[Description(@"Enter the air mass flow coefficient at the conditions defined in the Reference Crack Conditions object. Defined at 1 Pa pressure difference. Enter the coefficient used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when no outdoor air flow rate.")]
[JsonProperty("air_mass_flow_coefficient_when_no_outdoor_air_flow_at_reference_conditions")]
public System.Nullable<float> AirMassFlowCoefficientWhenNoOutdoorAirFlowAtReferenceConditions { get; set; } = null;
        

[Description("Enter the exponent used in the following equation: Mass Flow Rate = Air Mass Flow" +
    " Coefficient * (dP)^Air Mass Flow Exponent. Used only when no outdoor air flow r" +
    "ate.")]
[JsonProperty("air_mass_flow_exponent_when_no_outdoor_air_flow")]
public System.Nullable<float> AirMassFlowExponentWhenNoOutdoorAirFlow { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
        

[Description("Select a AirflowNetwork:MultiZone:ReferenceCrackConditions name associated with t" +
    "he air mass flow coefficient entered above.")]
[JsonProperty("reference_crack_conditions")]
public string ReferenceCrackConditions { get; set; } = "";
    }
    
    [Description("This object defines the connection between two nodes and a component.")]
    [JsonObject("AirflowNetwork:Distribution:Linkage")]
    public class AirflowNetwork_Distribution_Linkage : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of zone or AirflowNetwork Node.")]
[JsonProperty("node_1_name")]
public string Node1Name { get; set; } = "";
        

[Description("Enter the name of zone or AirflowNetwork Node.")]
[JsonProperty("node_2_name")]
public string Node2Name { get; set; } = "";
        

[Description("Enter the name of an AirflowNetwork component. A component is one of the followin" +
    "g AirflowNetwork:Distribution:Component objects: Leak, LeakageRatio, Duct, Const" +
    "antVolumeFan, Coil, TerminalUnit, ConstantPressureDrop, or HeatExchanger.")]
[JsonProperty("component_name")]
public string ComponentName { get; set; } = "";
        

[Description("Only used if component = AirflowNetwork:Distribution:Component:Duct The zone name" +
    " is where AirflowNetwork:Distribution:Component:Duct is exposed. Leave this fiel" +
    "d blank if the duct conduction loss is ignored.")]
[JsonProperty("thermal_zone_name")]
public string ThermalZoneName { get; set; } = "";
    }
    
    [Description("This object is used to allow user-defined view factors to be used for duct-surfac" +
        "e radiation calculations.")]
    [JsonObject("AirflowNetwork:Distribution:DuctViewFactors")]
    public class AirflowNetwork_Distribution_DuctViewFactors : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("linkage_name")]
public string LinkageName { get; set; } = "";
        

[JsonProperty("duct_surface_exposure_fraction")]
public System.Nullable<float> DuctSurfaceExposureFraction { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("duct_surface_emittance")]
public System.Nullable<float> DuctSurfaceEmittance { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("surfaces")]
public string Surfaces { get; set; } = "";
    }
    
    [Description("This object is used to provide advanced thermal comfort control of window opening" +
        " and closing for both exterior and interior windows.")]
    [JsonObject("AirflowNetwork:OccupantVentilationControl")]
    public class AirflowNetwork_OccupantVentilationControl : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("minimum_opening_time")]
public System.Nullable<float> MinimumOpeningTime { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("minimum_closing_time")]
public System.Nullable<float> MinimumClosingTime { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Enter a curve name that represents thermal comfort temperature as a function of outdoor dry-bulb temperature. Up to two curves are allowed if the performance cannot be represented by a single curve. The following two fields are used if two curves are required.")]
[JsonProperty("thermal_comfort_low_temperature_curve_name")]
public string ThermalComfortLowTemperatureCurveName { get; set; } = "";
        

[Description("This point is used to allow separate low and high thermal comfort temperature cur" +
    "ves. If a single performance curve is used, leave this field blank.")]
[JsonProperty("thermal_comfort_temperature_boundary_point")]
public System.Nullable<float> ThermalComfortTemperatureBoundaryPoint { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description(@"Enter a curve name that represents thermal comfort temperature as a function of outdoor dry-bulb temperature. Up to two curves are allowed if the performance cannot be represented by a single curve. If a single performance curve is used, leave this field blank.")]
[JsonProperty("thermal_comfort_high_temperature_curve_name")]
public string ThermalComfortHighTemperatureCurveName { get; set; } = "";
        

[JsonProperty("maximum_threshold_for_persons_dissatisfied_ppd")]
public System.Nullable<float> MaximumThresholdForPersonsDissatisfiedPpd { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("If Yes, occupancy check will be performed as part of the opening probability chec" +
    "k.")]
[JsonProperty("occupancy_check")]
public EmptyNoYes OccupancyCheck { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("If this field is blank, the opening probability check is bypassed and opening is " +
    "true.")]
[JsonProperty("opening_probability_schedule_name")]
public string OpeningProbabilityScheduleName { get; set; } = "";
        

[Description("If this field is blank, the closing probability check is bypassed and closing is " +
    "true.")]
[JsonProperty("closing_probability_schedule_name")]
public string ClosingProbabilityScheduleName { get; set; } = "";
    }
    
    [Description("This object represents a node in a zone in the combination of RoomAir and Airflow" +
        "Network model.")]
    [JsonObject("AirflowNetwork:IntraZone:Node")]
    public class AirflowNetwork_IntraZone_Node : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of a RoomAir:Node object defined in a RoomAirSettings:AirflowNetwo" +
    "rk object.")]
[JsonProperty("roomair_node_airflownetwork_name")]
public string RoomairNodeAirflownetworkName { get; set; } = "";
        

[Description("Enter the name of a zone object defined in a AirflowNetwork:MultiZone:Zone object" +
    ".")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Enter the reference height used to calculate the relative pressure")]
[JsonProperty("node_height")]
public System.Nullable<float> NodeHeight { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    [Description("This object defines the connection between two nodes and a component used in the " +
        "combination of RoomAir and AirflowNetwork model.")]
    [JsonObject("AirflowNetwork:IntraZone:Linkage")]
    public class AirflowNetwork_IntraZone_Linkage : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of zone or AirflowNetwork Node.")]
[JsonProperty("node_1_name")]
public string Node1Name { get; set; } = "";
        

[Description("Enter the name of zone or AirflowNetwork Node.")]
[JsonProperty("node_2_name")]
public string Node2Name { get; set; } = "";
        

[Description(@"Enter the name of an AirflowNetwork component. A component is one of the following AirflowNetwork:Multizone:Component objects: AirflowNetwork:MultiZone:Surface:Crack, AirflowNetwork:MultiZone:Surface:EffectiveLeakageArea, If the next field is specified, this field can be either blank or ignored.")]
[JsonProperty("component_name")]
public string ComponentName { get; set; } = "";
        

[Description("Only used when one of two nodes defined above are not located in the same zone, a" +
    "nd the input of the Component Name field in this object is ignored")]
[JsonProperty("airflownetwork_multizone_surface_name")]
public string AirflownetworkMultizoneSurfaceName { get; set; } = "";
    }
}
namespace BH.oM.Adapters.EnergyPlus.Coils
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Chilled water cooling coil, NTU-effectiveness model, with inputs for design enter" +
        "ing and leaving conditions.")]
    [JsonObject("Coil:Cooling:Water")]
    public class Coil_Cooling_Water : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("design_water_flow_rate")]
public string DesignWaterFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("design_air_flow_rate")]
public string DesignAirFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("design_inlet_water_temperature")]
public string DesignInletWaterTemperature { get; set; } = (System.String)"Autosize";
        

[JsonProperty("design_inlet_air_temperature")]
public string DesignInletAirTemperature { get; set; } = (System.String)"Autosize";
        

[JsonProperty("design_outlet_air_temperature")]
public string DesignOutletAirTemperature { get; set; } = (System.String)"Autosize";
        

[JsonProperty("design_inlet_air_humidity_ratio")]
public string DesignInletAirHumidityRatio { get; set; } = (System.String)"Autosize";
        

[JsonProperty("design_outlet_air_humidity_ratio")]
public string DesignOutletAirHumidityRatio { get; set; } = (System.String)"Autosize";
        

[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[JsonProperty("water_outlet_node_name")]
public string WaterOutletNodeName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("type_of_analysis")]
public Coil_Cooling_Water_TypeOfAnalysis TypeOfAnalysis { get; set; } = (Coil_Cooling_Water_TypeOfAnalysis)Enum.Parse(typeof(Coil_Cooling_Water_TypeOfAnalysis), "SimpleAnalysis");
        

[JsonProperty("heat_exchanger_configuration")]
public Coil_Cooling_Water_HeatExchangerConfiguration HeatExchangerConfiguration { get; set; } = (Coil_Cooling_Water_HeatExchangerConfiguration)Enum.Parse(typeof(Coil_Cooling_Water_HeatExchangerConfiguration), "CounterFlow");
        

[JsonProperty("condensate_collection_water_storage_tank_name")]
public string CondensateCollectionWaterStorageTankName { get; set; } = "";
        

[Description("This input field is optional. If specified, it is used for sizing the Design Wate" +
    "r Flow Rate. If blank or omitted, the Loop Design Temperature Difference value s" +
    "pecified in Sizing:Plant object is used for sizing the Design Water Flow Rate.")]
[JsonProperty("design_water_temperature_difference")]
public System.Nullable<float> DesignWaterTemperatureDifference { get; set; } = null;
    }
    
    public enum Coil_Cooling_Water_TypeOfAnalysis
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DetailedAnalysis")]
        DetailedAnalysis = 1,
        
        [JsonProperty("SimpleAnalysis")]
        SimpleAnalysis = 2,
    }
    
    public enum Coil_Cooling_Water_HeatExchangerConfiguration
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CounterFlow")]
        CounterFlow = 1,
        
        [JsonProperty("CrossFlow")]
        CrossFlow = 2,
    }
    
    [Description("Chilled water cooling coil, detailed flat fin coil model for continuous plate fin" +
        "s, with inputs for detailed coil geometry specifications.")]
    [JsonObject("Coil:Cooling:Water:DetailedGeometry")]
    public class Coil_Cooling_Water_DetailedGeometry : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("maximum_water_flow_rate")]
public string MaximumWaterFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("Tube Primary Surface Area")]
[JsonProperty("tube_outside_surface_area")]
public string TubeOutsideSurfaceArea { get; set; } = (System.String)"Autosize";
        

[Description("Total tube inside surface area")]
[JsonProperty("total_tube_inside_area")]
public string TotalTubeInsideArea { get; set; } = (System.String)"Autosize";
        

[JsonProperty("fin_surface_area")]
public string FinSurfaceArea { get; set; } = (System.String)"Autosize";
        

[JsonProperty("minimum_airflow_area")]
public string MinimumAirflowArea { get; set; } = (System.String)"Autosize";
        

[JsonProperty("coil_depth")]
public string CoilDepth { get; set; } = (System.String)"Autosize";
        

[Description("Fin diameter or the coil height")]
[JsonProperty("fin_diameter")]
public string FinDiameter { get; set; } = (System.String)"Autosize";
        

[JsonProperty("fin_thickness")]
public System.Nullable<float> FinThickness { get; set; } = (System.Nullable<float>)Single.Parse("0.0015", CultureInfo.InvariantCulture);
        

[Description("Inner diameter of tubes")]
[JsonProperty("tube_inside_diameter")]
public System.Nullable<float> TubeInsideDiameter { get; set; } = (System.Nullable<float>)Single.Parse("0.01445", CultureInfo.InvariantCulture);
        

[Description("Outer diameter of tubes")]
[JsonProperty("tube_outside_diameter")]
public System.Nullable<float> TubeOutsideDiameter { get; set; } = (System.Nullable<float>)Single.Parse("0.0159", CultureInfo.InvariantCulture);
        

[JsonProperty("tube_thermal_conductivity")]
public System.Nullable<float> TubeThermalConductivity { get; set; } = (System.Nullable<float>)Single.Parse("386", CultureInfo.InvariantCulture);
        

[JsonProperty("fin_thermal_conductivity")]
public System.Nullable<float> FinThermalConductivity { get; set; } = (System.Nullable<float>)Single.Parse("204", CultureInfo.InvariantCulture);
        

[Description("Fin spacing or distance")]
[JsonProperty("fin_spacing")]
public System.Nullable<float> FinSpacing { get; set; } = (System.Nullable<float>)Single.Parse("0.0018", CultureInfo.InvariantCulture);
        

[JsonProperty("tube_depth_spacing")]
public System.Nullable<float> TubeDepthSpacing { get; set; } = (System.Nullable<float>)Single.Parse("0.026", CultureInfo.InvariantCulture);
        

[JsonProperty("number_of_tube_rows")]
public System.Nullable<float> NumberOfTubeRows { get; set; } = (System.Nullable<float>)Single.Parse("4", CultureInfo.InvariantCulture);
        

[JsonProperty("number_of_tubes_per_row")]
public string NumberOfTubesPerRow { get; set; } = (System.String)"Autosize";
        

[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[JsonProperty("water_outlet_node_name")]
public string WaterOutletNodeName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("condensate_collection_water_storage_tank_name")]
public string CondensateCollectionWaterStorageTankName { get; set; } = "";
        

[Description("This input field is optional. If specified, it is used for sizing the Design Wate" +
    "r Flow Rate. If blank or omitted, the Loop Design Temperature Difference value s" +
    "pecified in Sizing:Plant object is used for sizing the Design Water Flow Rate.")]
[JsonProperty("design_water_temperature_difference")]
public System.Nullable<float> DesignWaterTemperatureDifference { get; set; } = null;
    }
    
    [Description(@"New general DX cooling coil supporting on or more speeds and one or or operating  modes. Includes DX evaporator coil, compressor, and condenser. Object is currently only supported by the AIRLOOPHVAC:UNITARYSYSTEM object. Remaining Coil:Cooling:DX* objects will be deprecated at a future date, after which, this object will replace all other Coil:Cooling:DX* objects.")]
    [JsonObject("Coil:Cooling:DX")]
    public class Coil_Cooling_DX : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("evaporator_inlet_node_name")]
public string EvaporatorInletNodeName { get; set; } = "";
        

[JsonProperty("evaporator_outlet_node_name")]
public string EvaporatorOutletNodeName { get; set; } = "";
        

[Description("Schedule value > 0 means the coil is available. If this field is blank, the coil " +
    "is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description(@"This input field is name of a conditioned or unconditioned zone where the secondary coil (condenser) of a DX system or heat pump is to be placed. This is an optional input field specified only when the user desires to reject the condenser heat into a zone. The heat rejected is modeled as internal sensible heat gain of the zone.")]
[JsonProperty("condenser_zone_name")]
public string CondenserZoneName { get; set; } = "";
        

[Description("This is the name of an air node in the simulation. This may be an explicitly defi" +
    "ned outdoor air node, or it may be a separate air node.")]
[JsonProperty("condenser_inlet_node_name")]
public string CondenserInletNodeName { get; set; } = "";
        

[Description("This is the name of an air node in the simulation.")]
[JsonProperty("condenser_outlet_node_name")]
public string CondenserOutletNodeName { get; set; } = "";
        

[JsonProperty("performance_object_name")]
public string PerformanceObjectName { get; set; } = "";
        

[JsonProperty("condensate_collection_water_storage_tank_name")]
public string CondensateCollectionWaterStorageTankName { get; set; } = "";
        

[JsonProperty("evaporative_condenser_supply_water_storage_tank_name")]
public string EvaporativeCondenserSupplyWaterStorageTankName { get; set; } = "";
    }
    
    [Description("DX cooling coil performance specification referencing one or more operating modes" +
        ". Mode 1 is always the base design operating mode. Additional modes are optional" +
        " states such as subcool reheat for humidity control.")]
    [JsonObject("Coil:Cooling:DX:CurveFit:Performance")]
    public class Coil_Cooling_DX_CurveFit_Performance : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("crankcase_heater_capacity")]
public System.Nullable<float> CrankcaseHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("minimum_outdoor_dry_bulb_temperature_for_compressor_operation")]
public System.Nullable<float> MinimumOutdoorDryBulbTemperatureForCompressorOperation { get; set; } = (System.Nullable<float>)Single.Parse("-25", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description(@"Enter pressure drop for the unit containing the coil. This value is only used to calculate Energy Efficiency Ratio (EER), Integrated Energy Efficiency Ratio (IEER), and the Standard Rating (Net) Cooling Capacity. This value is not used for modeling the evaporator fan during simulations.")]
[JsonProperty("unit_internal_static_air_pressure")]
public System.Nullable<float> UnitInternalStaticAirPressure { get; set; } = null;
        

[JsonProperty("capacity_control_method")]
public Coil_Cooling_DX_CurveFit_Performance_CapacityControlMethod CapacityControlMethod { get; set; } = (Coil_Cooling_DX_CurveFit_Performance_CapacityControlMethod)Enum.Parse(typeof(Coil_Cooling_DX_CurveFit_Performance_CapacityControlMethod), "Discrete");
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
[JsonProperty("evaporative_condenser_basin_heater_capacity")]
public System.Nullable<float> EvaporativeCondenserBasinHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdo" +
    "or dry-bulb temperature when the basin heater turns on.")]
[JsonProperty("evaporative_condenser_basin_heater_setpoint_temperature")]
public System.Nullable<float> EvaporativeCondenserBasinHeaterSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty("evaporative_condenser_basin_heater_operating_schedule_name")]
public string EvaporativeCondenserBasinHeaterOperatingScheduleName { get; set; } = "";
        

[JsonProperty("compressor_fuel_type")]
public Coil_Cooling_DX_CurveFit_Performance_CompressorFuelType CompressorFuelType { get; set; } = (Coil_Cooling_DX_CurveFit_Performance_CompressorFuelType)Enum.Parse(typeof(Coil_Cooling_DX_CurveFit_Performance_CompressorFuelType), "Electricity");
        

[Description("Operating Mode 1 is always used as the base design operating mode.")]
[JsonProperty("base_operating_mode")]
public string BaseOperatingMode { get; set; } = "";
        

[Description(@"The alternative operating mode is used for enhanced dehumidification. If this is blank, the coil will always operate in the base operating mode. If an alternate mode is defined here, the coil will use the enhanced mode if activated by the parent system controls.")]
[JsonProperty("alternative_operating_mode_1")]
public string AlternativeOperatingMode1 { get; set; } = "";
        

[Description(@"The alternative operating mode is used for enhanced dehumidification. If this is blank, the coil will always operate in the base operating mode or Alternative Mode 1. If both Alternative Operating Mode 1 and Mode 2 are defined here, the coil will perform both Subcool and Reheat modes for enhanced dehumidification. Alternative Operating Mode 1 is used as Subcool mode, and Alternative Operating Mode 2 is used as Reheat mode.")]
[JsonProperty("alternative_operating_mode_2")]
public string AlternativeOperatingMode2 { get; set; } = "";
    }
    
    public enum Coil_Cooling_DX_CurveFit_Performance_CapacityControlMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Continuous")]
        Continuous = 1,
        
        [JsonProperty("Discrete")]
        Discrete = 2,
    }
    
    public enum Coil_Cooling_DX_CurveFit_Performance_CompressorFuelType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("Electricity")]
        Electricity = 2,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 3,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 4,
        
        [JsonProperty("Gasoline")]
        Gasoline = 5,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 6,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 7,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 8,
        
        [JsonProperty("Propane")]
        Propane = 9,
    }
    
    [Description("DX cooling coil performance for a single operating mode which may have one or mor" +
        "e speeds.")]
    [JsonObject("Coil:Cooling:DX:CurveFit:OperatingMode")]
    public class Coil_Cooling_DX_CurveFit_OperatingMode : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Total (sensible+latent) cooling capacity not accounting for the effect of supply air fan heat. Rating point: air entering the evaporator coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the condenser coil at 35 C dry-bulb/23.9 C wet-bulb. gross capacity excluding supply air fan heat")]
[JsonProperty("rated_gross_total_cooling_capacity")]
public string RatedGrossTotalCoolingCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Flow rate corresponding to rated total cooling capacity, Rated SHR and Rated COP." +
    " Should be between 0.00004027 m3/s and 0.00006041 m3/s per watt of rated total c" +
    "ooling capacity.")]
[JsonProperty("rated_evaporator_air_flow_rate")]
public string RatedEvaporatorAirFlowRate { get; set; } = "";
        

[Description("Used to calculate evaporative condenser water use.")]
[JsonProperty("rated_condenser_air_flow_rate")]
public string RatedCondenserAirFlowRate { get; set; } = "";
        

[Description("The maximum on-off cycling Rate for the compressor, which occurs at 50% run time " +
    "fraction. Suggested value is 3; zero value means latent degradation model is dis" +
    "abled.")]
[JsonProperty("maximum_cycling_rate")]
public System.Nullable<float> MaximumCyclingRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
[JsonProperty("ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity")]
public System.Nullable<float> RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Time constant for the cooling coil\'s latent capacity to reach steady state after " +
    "startup. Suggested value is 45; zero value means latent degradation model is dis" +
    "abled.")]
[JsonProperty("latent_capacity_time_constant")]
public System.Nullable<float> LatentCapacityTimeConstant { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
[JsonProperty("nominal_time_for_condensate_removal_to_begin")]
public System.Nullable<float> NominalTimeForCondensateRemovalToBegin { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("apply_latent_degradation_to_speeds_greater_than_1")]
public EmptyNoYes ApplyLatentDegradationToSpeedsGreaterThan1 { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("condenser_type")]
public Coil_Cooling_DX_CurveFit_OperatingMode_CondenserType CondenserType { get; set; } = (Coil_Cooling_DX_CurveFit_OperatingMode_CondenserType)Enum.Parse(typeof(Coil_Cooling_DX_CurveFit_OperatingMode_CondenserType), "AirCooled");
        

[Description("Rated power consumed by the evaporative condenser\'s water pump")]
[JsonProperty("nominal_evaporative_condenser_pump_power")]
public string NominalEvaporativeCondenserPumpPower { get; set; } = (System.String)"0";
        

[Description("Must be lower than or equal to the highest speed number. If blank, defaults to th" +
    "e highest speed number used.")]
[JsonProperty("nominal_speed_number")]
public System.Nullable<float> NominalSpeedNumber { get; set; } = null;
        

[JsonProperty("speed_1_name")]
public string Speed1Name { get; set; } = "";
        

[JsonProperty("speed_2_name")]
public string Speed2Name { get; set; } = "";
        

[JsonProperty("speed_3_name")]
public string Speed3Name { get; set; } = "";
        

[JsonProperty("speed_4_name")]
public string Speed4Name { get; set; } = "";
        

[JsonProperty("speed_5_name")]
public string Speed5Name { get; set; } = "";
        

[JsonProperty("speed_6_name")]
public string Speed6Name { get; set; } = "";
        

[JsonProperty("speed_7_name")]
public string Speed7Name { get; set; } = "";
        

[JsonProperty("speed_8_name")]
public string Speed8Name { get; set; } = "";
        

[JsonProperty("speed_9_name")]
public string Speed9Name { get; set; } = "";
        

[JsonProperty("speed_10_name")]
public string Speed10Name { get; set; } = "";
    }
    
    public enum Coil_Cooling_DX_CurveFit_OperatingMode_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
    }
    
    [Description("DX cooling coil performance for a single speed within a single operating mode.")]
    [JsonObject("Coil:Cooling:DX:CurveFit:Speed")]
    public class Coil_Cooling_DX_CurveFit_Speed : BHoMObject, IEnergyPlusClass
    {
        

[Description("Ratio of capacity at this speed to the operating mode Rated Gross Total Cooling C" +
    "apacity")]
[JsonProperty("gross_total_cooling_capacity_fraction")]
public System.Nullable<float> GrossTotalCoolingCapacityFraction { get; set; } = null;
        

[Description("Ratio of capacity at this speed to the operating mode Rated Evaporator Air Flow R" +
    "ate")]
[JsonProperty("evaporator_air_flow_rate_fraction")]
public System.Nullable<float> EvaporatorAirFlowRateFraction { get; set; } = null;
        

[Description("Ratio of condenser air flow at this speed to the operating mode Rated Condenser A" +
    "ir Flow Rate")]
[JsonProperty("condenser_air_flow_rate_fraction")]
public System.Nullable<float> CondenserAirFlowRateFraction { get; set; } = null;
        

[Description("Rated sensible heat ratio (gross sensible capacity/gross total capacity) sensible" +
    " and total capacities do not include supply fan heat")]
[JsonProperty("gross_sensible_heat_ratio")]
public string GrossSensibleHeatRatio { get; set; } = (System.String)"Autosize";
        

[Description("Gross cooling capacity divided by power input to the compressor and condenser fan" +
    ". Does not include supply fan heat or supply fan electrical energy input.")]
[JsonProperty("gross_cooling_cop")]
public System.Nullable<float> GrossCoolingCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description("The fraction of the cooling coil face which is actively cooled at this speed. For" +
    " non-split-face coils, this should be 1.0.")]
[JsonProperty("active_fraction_of_coil_face_area")]
public System.Nullable<float> ActiveFractionOfCoilFaceArea { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description(@"Enter the evaporator fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on total cooling capacity. This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file. This value is not used for modeling the evaporator fan during simulations.")]
[JsonProperty("rated_evaporator_fan_power_per_volume_flow_rate")]
public System.Nullable<float> RatedEvaporatorFanPowerPerVolumeFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("773.3", CultureInfo.InvariantCulture);
        

[Description("Ratio of evaporative condenser pump power at this speed to the operating mode Nom" +
    "inal Evaporative Condenser Pump Power")]
[JsonProperty("evaporative_condenser_pump_power_fraction")]
public System.Nullable<float> EvaporativeCondenserPumpPowerFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("evaporative_condenser_effectiveness")]
public System.Nullable<float> EvaporativeCondenserEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("biquadratic curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb quadratic cu" +
    "rve = a + b*edb + c*edb**2 wb = entering wet-bulb temperature (C) edb = dry-bulb" +
    " temperature seen by the condenser (C)")]
[JsonProperty("total_cooling_capacity_modifier_function_of_temperature_curve_name")]
public string TotalCoolingCapacityModifierFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = Fraction of the full load flow")]
[JsonProperty("total_cooling_capacity_modifier_function_of_air_flow_fraction_curve_name")]
public string TotalCoolingCapacityModifierFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb t" +
    "emperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty("energy_input_ratio_modifier_function_of_temperature_curve_name")]
public string EnergyInputRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = Fraction of the full load flow")]
[JsonProperty("energy_input_ratio_modifier_function_of_air_flow_fraction_curve_name")]
public string EnergyInputRatioModifierFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR" +
    "**3 PLR = part load ratio (cooling load/steady state capacity)")]
[JsonProperty("part_load_fraction_correlation_curve_name")]
public string PartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description("Recoverable waste heat at full load and rated conditions")]
[JsonProperty("rated_waste_heat_fraction_of_power_input")]
public System.Nullable<float> RatedWasteHeatFractionOfPowerInput { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("curve = a + b*cdb + c*cdb**2 + d*edb + e*edb**2 + f*cdb*edb cdb = entering conden" +
    "ser dry-bulb temperature (C) edb = entering coil dry-bulb temperature (C)")]
[JsonProperty("waste_heat_modifier_function_of_temperature_curve_name")]
public string WasteHeatModifierFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the DX cooling coil (C) db = entering dry-bulb temperature seen by the DX cooling coil (C) entering temperature can be outside air or pretreated air. If this curve is used and the Sensible Heat Ratio Modifier Function of Flow Fraction (SHRFFF) Curve Name is blank, the SHRFFF is assumed to be a constant value of 1.0.")]
[JsonProperty("sensible_heat_ratio_modifier_function_of_temperature_curve_name")]
public string SensibleHeatRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow If this curve is used and the Sensible Heat Ratio Modifier Function of Temperature Curve Name (SHRFT) Curve Name is blank, the SHRFT is assumed to be a constant value of 1.0.")]
[JsonProperty("sensible_heat_ratio_modifier_function_of_flow_fraction_curve_name")]
public string SensibleHeatRatioModifierFunctionOfFlowFractionCurveName { get; set; } = "";
    }
    
    [Description("Direct expansion (DX) cooling coil and condensing unit (includes electric compres" +
        "sor and condenser fan), single-speed. Optional inputs for moisture evaporation f" +
        "rom wet coil when compressor cycles off with continuous fan operation.")]
    [JsonObject("Coil:Cooling:DX:SingleSpeed")]
    public class Coil_Cooling_DX_SingleSpeed : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty("gross_rated_total_cooling_capacity")]
public string GrossRatedTotalCoolingCapacity { get; set; } = "";
        

[Description("Rated sensible heat ratio (gross sensible capacity/gross total capacity) sensible" +
    " and total capacities do not include supply fan heat")]
[JsonProperty("gross_rated_sensible_heat_ratio")]
public string GrossRatedSensibleHeatRatio { get; set; } = "";
        

[Description("Gross cooling capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty("gross_rated_cooling_cop")]
public System.Nullable<float> GrossRatedCoolingCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description("Flow rate corresponding to rated total cooling capacity, Rated SHR and Rated COP " +
    "should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total coo" +
    "ling capacity")]
[JsonProperty("rated_air_flow_rate")]
public string RatedAirFlowRate { get; set; } = "";
        

[Description(@"Enter the evaporator fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on total cooling capacity. This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), Energy Efficiency Ratio (EER), Integrated Energy Efficiency Ratio (IEER), and the Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file. This value is not used for modeling the evaporator fan during simulations.")]
[JsonProperty("rated_evaporator_fan_power_per_volume_flow_rate")]
public System.Nullable<float> RatedEvaporatorFanPowerPerVolumeFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("773.3", CultureInfo.InvariantCulture);
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb t" +
    "emperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty("total_cooling_capacity_function_of_temperature_curve_name")]
public string TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = Fraction of the full load flow")]
[JsonProperty("total_cooling_capacity_function_of_flow_fraction_curve_name")]
public string TotalCoolingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb t" +
    "emperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty("energy_input_ratio_function_of_temperature_curve_name")]
public string EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = Fraction of the full load flow")]
[JsonProperty("energy_input_ratio_function_of_flow_fraction_curve_name")]
public string EnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR" +
    "**3 PLR = part load ratio (cooling load/steady state capacity)")]
[JsonProperty("part_load_fraction_correlation_curve_name")]
public string PartLoadFractionCorrelationCurveName { get; set; } = "";
        

[JsonProperty("minimum_outdoor_dry_bulb_temperature_for_compressor_operation")]
public System.Nullable<float> MinimumOutdoorDryBulbTemperatureForCompressorOperation { get; set; } = (System.Nullable<float>)Single.Parse("-25", CultureInfo.InvariantCulture);
        

[Description(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
[JsonProperty("nominal_time_for_condensate_removal_to_begin")]
public System.Nullable<float> NominalTimeForCondensateRemovalToBegin { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
[JsonProperty("ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity")]
public System.Nullable<float> RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The maximum on-off cycling Rate for the compressor, which occurs at 50% run time " +
    "fraction. Suggested value is 3; zero value means latent degradation model is dis" +
    "abled.")]
[JsonProperty("maximum_cycling_rate")]
public System.Nullable<float> MaximumCyclingRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Time constant for the cooling coil\'s latent capacity to reach steady state after " +
    "startup. Suggested value is 45; zero value means latent degradation model is dis" +
    "abled.")]
[JsonProperty("latent_capacity_time_constant")]
public System.Nullable<float> LatentCapacityTimeConstant { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Enter the name of an outdoor air node. This node name is also specified in an Out" +
    "doorAir:Node or OutdoorAir:NodeList object.")]
[JsonProperty("condenser_air_inlet_node_name")]
public string CondenserAirInletNodeName { get; set; } = "";
        

[JsonProperty("condenser_type")]
public Coil_Cooling_DX_SingleSpeed_CondenserType CondenserType { get; set; } = (Coil_Cooling_DX_SingleSpeed_CondenserType)Enum.Parse(typeof(Coil_Cooling_DX_SingleSpeed_CondenserType), "AirCooled");
        

[JsonProperty("evaporative_condenser_effectiveness")]
public System.Nullable<float> EvaporativeCondenserEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("Used to calculate evaporative condenser water use")]
[JsonProperty("evaporative_condenser_air_flow_rate")]
public string EvaporativeCondenserAirFlowRate { get; set; } = "";
        

[Description("Rated power consumed by the evaporative condenser\'s water pump")]
[JsonProperty("evaporative_condenser_pump_rated_power_consumption")]
public string EvaporativeCondenserPumpRatedPowerConsumption { get; set; } = (System.String)"0";
        

[JsonProperty("crankcase_heater_capacity")]
public System.Nullable<float> CrankcaseHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_water_storage_tank_name")]
public string SupplyWaterStorageTankName { get; set; } = "";
        

[JsonProperty("condensate_collection_water_storage_tank_name")]
public string CondensateCollectionWaterStorageTankName { get; set; } = "";
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
[JsonProperty("basin_heater_capacity")]
public System.Nullable<float> BasinHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdo" +
    "or dry-bulb temperature when the basin heater turns on.")]
[JsonProperty("basin_heater_setpoint_temperature")]
public System.Nullable<float> BasinHeaterSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty("basin_heater_operating_schedule_name")]
public string BasinHeaterOperatingScheduleName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temp" +
    "erature seen by the DX cooling coil (C) db = entering dry-bulb temperature seen " +
    "by the DX cooling coil (C) entering temperature can be outside air or pretreated" +
    " air.")]
[JsonProperty("sensible_heat_ratio_function_of_temperature_curve_name")]
public string SensibleHeatRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("sensible_heat_ratio_function_of_flow_fraction_curve_name")]
public string SensibleHeatRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("when this input field is specified as Yes then the program calculates the net coo" +
    "ling capacity and total electric power input of DX cooling coils per ANSI/ASHRAE" +
    " 127.")]
[JsonProperty("report_ashrae_standard_127_performance_ratings")]
public EmptyNoYes ReportAshraeStandard127PerformanceRatings { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description(@"This input field is name of a conditioned or unconditioned zone where the secondary coil (condenser) of DX system or a heat pump is to be placed. This is an optional input field specified only when user desires to reject the condenser heat into a zone. The heat rejected is modelled as internal sensible heat gain of the zone.")]
[JsonProperty("zone_name_for_condenser_placement")]
public string ZoneNameForCondenserPlacement { get; set; } = "";
    }
    
    public enum Coil_Cooling_DX_SingleSpeed_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
    }
    
    [Description(@"Direct expansion (DX) cooling coil and condensing unit (includes electric compressor and condenser fan), two-speed (or variable-speed). Requires two sets of performance data and will interpolate between speeds. Modeled as a single coil (multi-speed compressor or multiple compressors with row split or intertwined coil).")]
    [JsonObject("Coil:Cooling:DX:TwoSpeed")]
    public class Coil_Cooling_DX_TwoSpeed : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty("high_speed_gross_rated_total_cooling_capacity")]
public string HighSpeedGrossRatedTotalCoolingCapacity { get; set; } = "";
        

[Description("Rated sensible heat ratio (gross sensible capacity/gross total capacity) sensible" +
    " and total capacities do not include supply fan heat")]
[JsonProperty("high_speed_rated_sensible_heat_ratio")]
public string HighSpeedRatedSensibleHeatRatio { get; set; } = "";
        

[Description("Gross cooling capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty("high_speed_gross_rated_cooling_cop")]
public System.Nullable<float> HighSpeedGrossRatedCoolingCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description("Flow rate corresponding to rated total cooling capacity, Rated SHR and Rated COP." +
    " Should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total co" +
    "oling capacity.")]
[JsonProperty("high_speed_rated_air_flow_rate")]
public string HighSpeedRatedAirFlowRate { get; set; } = "";
        

[Description(@"Enter pressure drop for the unit containing the coil. This value is only used to calculate Energy Efficiency Ratio (EER), Integrated Energy Efficiency Ratio (IEER), and the Standard Rating (Net) Cooling Capacity. This value is not used for modeling the evaporator fan during simulations.")]
[JsonProperty("unit_internal_static_air_pressure")]
public System.Nullable<float> UnitInternalStaticAirPressure { get; set; } = null;
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb t" +
    "emperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty("total_cooling_capacity_function_of_temperature_curve_name")]
public string TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("total_cooling_capacity_function_of_flow_fraction_curve_name")]
public string TotalCoolingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb t" +
    "emperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty("energy_input_ratio_function_of_temperature_curve_name")]
public string EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("energy_input_ratio_function_of_flow_fraction_curve_name")]
public string EnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR" +
    "**3 PLR = part load ratio (cooling load/steady state capacity)")]
[JsonProperty("part_load_fraction_correlation_curve_name")]
public string PartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty("low_speed_gross_rated_total_cooling_capacity")]
public string LowSpeedGrossRatedTotalCoolingCapacity { get; set; } = "";
        

[Description("Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity) se" +
    "nsible and total capacities do not include supply fan heat")]
[JsonProperty("low_speed_gross_rated_sensible_heat_ratio")]
public string LowSpeedGrossRatedSensibleHeatRatio { get; set; } = "";
        

[Description("Gross cooling capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty("low_speed_gross_rated_cooling_cop")]
public System.Nullable<float> LowSpeedGrossRatedCoolingCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description("Flow rate corresponding to rated total cooling capacity, Rated SHR and Rated COP." +
    " Should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total co" +
    "oling capacity.")]
[JsonProperty("low_speed_rated_air_flow_rate")]
public string LowSpeedRatedAirFlowRate { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb t" +
    "emperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty("low_speed_total_cooling_capacity_function_of_temperature_curve_name")]
public string LowSpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb t" +
    "emperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty("low_speed_energy_input_ratio_function_of_temperature_curve_name")]
public string LowSpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Enter the name of an outdoor air node. This node name is also specified in an Out" +
    "doorAir:Node or OutdoorAir:NodeList object.")]
[JsonProperty("condenser_air_inlet_node_name")]
public string CondenserAirInletNodeName { get; set; } = "";
        

[JsonProperty("condenser_type")]
public Coil_Cooling_DX_TwoSpeed_CondenserType CondenserType { get; set; } = (Coil_Cooling_DX_TwoSpeed_CondenserType)Enum.Parse(typeof(Coil_Cooling_DX_TwoSpeed_CondenserType), "AirCooled");
        

[JsonProperty("minimum_outdoor_dry_bulb_temperature_for_compressor_operation")]
public System.Nullable<float> MinimumOutdoorDryBulbTemperatureForCompressorOperation { get; set; } = (System.Nullable<float>)Single.Parse("-25", CultureInfo.InvariantCulture);
        

[JsonProperty("high_speed_evaporative_condenser_effectiveness")]
public System.Nullable<float> HighSpeedEvaporativeCondenserEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("Used to calculate evaporative condenser water use")]
[JsonProperty("high_speed_evaporative_condenser_air_flow_rate")]
public string HighSpeedEvaporativeCondenserAirFlowRate { get; set; } = "";
        

[Description("Rated power consumed by the evaporative condenser\'s water pump at high speed")]
[JsonProperty("high_speed_evaporative_condenser_pump_rated_power_consumption")]
public string HighSpeedEvaporativeCondenserPumpRatedPowerConsumption { get; set; } = "";
        

[JsonProperty("low_speed_evaporative_condenser_effectiveness")]
public System.Nullable<float> LowSpeedEvaporativeCondenserEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("Used to calculate evaporative condenser water use")]
[JsonProperty("low_speed_evaporative_condenser_air_flow_rate")]
public string LowSpeedEvaporativeCondenserAirFlowRate { get; set; } = "";
        

[Description("Rated power consumed by the evaporative condenser\'s water pump at low speed")]
[JsonProperty("low_speed_evaporative_condenser_pump_rated_power_consumption")]
public string LowSpeedEvaporativeCondenserPumpRatedPowerConsumption { get; set; } = "";
        

[JsonProperty("supply_water_storage_tank_name")]
public string SupplyWaterStorageTankName { get; set; } = "";
        

[JsonProperty("condensate_collection_water_storage_tank_name")]
public string CondensateCollectionWaterStorageTankName { get; set; } = "";
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
[JsonProperty("basin_heater_capacity")]
public System.Nullable<float> BasinHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdo" +
    "or dry-bulb temperature when the basin heater turns on.")]
[JsonProperty("basin_heater_setpoint_temperature")]
public System.Nullable<float> BasinHeaterSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty("basin_heater_operating_schedule_name")]
public string BasinHeaterOperatingScheduleName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temp" +
    "erature seen by the DX cooling coil (C) db = entering dry-bulb temperature seen " +
    "by the DX cooling coil (C) entering temperature can be outside air or pretreated" +
    " air.")]
[JsonProperty("sensible_heat_ratio_function_of_temperature_curve_name")]
public string SensibleHeatRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("sensible_heat_ratio_function_of_flow_fraction_curve_name")]
public string SensibleHeatRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temp" +
    "erature seen by the DX cooling coil (C) db = entering dry-bulb temperature seen " +
    "by the DX cooling coil (C) entering temperature can be outside air or pretreated" +
    " air.")]
[JsonProperty("low_speed_sensible_heat_ratio_function_of_temperature_curve_name")]
public string LowSpeedSensibleHeatRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("low_speed_sensible_heat_ratio_function_of_flow_fraction_curve_name")]
public string LowSpeedSensibleHeatRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description(@"This input field is name of a conditioned or unconditioned zone where the secondary coil (condenser) of DX system or a heat pump is to be placed. This is an optional input field specified only when user desires to reject the condenser heat into a zone. The heat rejected is modelled as internal sensible heat gain of the zone.")]
[JsonProperty("zone_name_for_condenser_placement")]
public string ZoneNameForCondenserPlacement { get; set; } = "";
    }
    
    public enum Coil_Cooling_DX_TwoSpeed_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
    }
    
    [Description(@"Direct expansion (DX) cooling coil and condensing unit (includes electric or engine-driven compressor and condenser fan), multi-speed (or variable-speed). Optional moisture evaporation from wet coil when compressor cycles off with continuous fan operation. Requires two to four sets of performance data and will interpolate between speeds. Modeled as a single coil (multi-speed compressor or multiple compressors with row split or intertwined coil).")]
    [JsonObject("Coil:Cooling:DX:MultiSpeed")]
    public class Coil_Cooling_DX_MultiSpeed : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Enter the name of an outdoor air node. This node name is also specified in an Out" +
    "doorAir:Node or OutdoorAir:NodeList object.")]
[JsonProperty("condenser_air_inlet_node_name")]
public string CondenserAirInletNodeName { get; set; } = "";
        

[JsonProperty("condenser_type")]
public Coil_Cooling_DX_MultiSpeed_CondenserType CondenserType { get; set; } = (Coil_Cooling_DX_MultiSpeed_CondenserType)Enum.Parse(typeof(Coil_Cooling_DX_MultiSpeed_CondenserType), "AirCooled");
        

[JsonProperty("minimum_outdoor_dry_bulb_temperature_for_compressor_operation")]
public System.Nullable<float> MinimumOutdoorDryBulbTemperatureForCompressorOperation { get; set; } = (System.Nullable<float>)Single.Parse("-25", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_water_storage_tank_name")]
public string SupplyWaterStorageTankName { get; set; } = "";
        

[JsonProperty("condensate_collection_water_storage_tank_name")]
public string CondensateCollectionWaterStorageTankName { get; set; } = "";
        

[JsonProperty("apply_part_load_fraction_to_speeds_greater_than_1")]
public EmptyNoYes ApplyPartLoadFractionToSpeedsGreaterThan1 { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("apply_latent_degradation_to_speeds_greater_than_1")]
public EmptyNoYes ApplyLatentDegradationToSpeedsGreaterThan1 { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("crankcase_heater_capacity")]
public System.Nullable<float> CrankcaseHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
[JsonProperty("basin_heater_capacity")]
public System.Nullable<float> BasinHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdo" +
    "or dry-bulb temperature when the basin heater turns on.")]
[JsonProperty("basin_heater_setpoint_temperature")]
public System.Nullable<float> BasinHeaterSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty("basin_heater_operating_schedule_name")]
public string BasinHeaterOperatingScheduleName { get; set; } = "";
        

[JsonProperty("fuel_type")]
public Coil_Cooling_DX_MultiSpeed_FuelType FuelType { get; set; } = (Coil_Cooling_DX_MultiSpeed_FuelType)Enum.Parse(typeof(Coil_Cooling_DX_MultiSpeed_FuelType), "Diesel");
        

[Description("Enter the number of the following sets of data for coil capacity, SHR, COP, flow " +
    "rate, and associated curves.")]
[JsonProperty("number_of_speeds")]
public System.Nullable<float> NumberOfSpeeds { get; set; } = null;
        

[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat Gross capacity excluding supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb Speed 1 is defined as low speed")]
[JsonProperty("speed_1_gross_rated_total_cooling_capacity")]
public string Speed1GrossRatedTotalCoolingCapacity { get; set; } = "";
        

[Description("Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity) Se" +
    "nsible and total capacities do not include supply fan heat")]
[JsonProperty("speed_1_gross_rated_sensible_heat_ratio")]
public string Speed1GrossRatedSensibleHeatRatio { get; set; } = "";
        

[Description("Gross cooling capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty("speed_1_gross_rated_cooling_cop")]
public System.Nullable<float> Speed1GrossRatedCoolingCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description("Flow rate corresponding to rated total cooling capacity, rated SHR and rated COP " +
    "should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total coo" +
    "ling capacity")]
[JsonProperty("speed_1_rated_air_flow_rate")]
public string Speed1RatedAirFlowRate { get; set; } = "";
        

[Description(@"Enter the evaporator fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on total cooling capacity. This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file. This value is not used for modeling the evaporator fan during simulations.")]
[JsonProperty("speed_1_rated_evaporator_fan_power_per_volume_flow_rate")]
public System.Nullable<float> Speed1RatedEvaporatorFanPowerPerVolumeFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("773.3", CultureInfo.InvariantCulture);
        

[Description("curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb t" +
    "emperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty("speed_1_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed1TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = Fraction of the full load Flow")]
[JsonProperty("speed_1_total_cooling_capacity_function_of_flow_fraction_curve_name")]
public string Speed1TotalCoolingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb t" +
    "emperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty("speed_1_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed1EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("speed_1_energy_input_ratio_function_of_flow_fraction_curve_name")]
public string Speed1EnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR" +
    "**3 PLR = part load ratio (cooling load/steady state capacity)")]
[JsonProperty("speed_1_part_load_fraction_correlation_curve_name")]
public string Speed1PartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
[JsonProperty("speed_1_nominal_time_for_condensate_removal_to_begin")]
public System.Nullable<float> Speed1NominalTimeForCondensateRemovalToBegin { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Ratio of the initial moisture evaporation Rate from the Cooling Coil (when the compressor first turns off) and the Coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
[JsonProperty("speed_1_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capaci" +
    "ty")]
public System.Nullable<float> Speed1RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The maximum on-off cycling rate for the compressor, which occurs at 50% run time " +
    "fraction. Suggested value is 3; zero value means latent degradation model is dis" +
    "abled.")]
[JsonProperty("speed_1_maximum_cycling_rate")]
public System.Nullable<float> Speed1MaximumCyclingRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Time constant for the cooling coil\'s latent capacity to reach steady state after " +
    "startup. Suggested value is 45; zero value means latent degradation model is dis" +
    "abled.")]
[JsonProperty("speed_1_latent_capacity_time_constant")]
public System.Nullable<float> Speed1LatentCapacityTimeConstant { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Recoverable waste heat at full load and rated conditions")]
[JsonProperty("speed_1_rated_waste_heat_fraction_of_power_input")]
public System.Nullable<float> Speed1RatedWasteHeatFractionOfPowerInput { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bu" +
    "lb temperature (C) db = entering coil dry-bulb temperature (C)")]
[JsonProperty("speed_1_waste_heat_function_of_temperature_curve_name")]
public string Speed1WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[JsonProperty("speed_1_evaporative_condenser_effectiveness")]
public System.Nullable<float> Speed1EvaporativeCondenserEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("Used to calculate evaporative condenser water use")]
[JsonProperty("speed_1_evaporative_condenser_air_flow_rate")]
public string Speed1EvaporativeCondenserAirFlowRate { get; set; } = "";
        

[Description("Rated power consumed by the evaporative condenser\'s water pump at high speed")]
[JsonProperty("speed_1_rated_evaporative_condenser_pump_power_consumption")]
public string Speed1RatedEvaporativeCondenserPumpPowerConsumption { get; set; } = "";
        

[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat Gross capacity excluding supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty("speed_2_gross_rated_total_cooling_capacity")]
public string Speed2GrossRatedTotalCoolingCapacity { get; set; } = "";
        

[Description("Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity) Se" +
    "nsible and total capacities do not include supply fan heat")]
[JsonProperty("speed_2_gross_rated_sensible_heat_ratio")]
public string Speed2GrossRatedSensibleHeatRatio { get; set; } = "";
        

[Description("Gross cooling capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty("speed_2_gross_rated_cooling_cop")]
public System.Nullable<float> Speed2GrossRatedCoolingCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description("Flow rate corresponding to rated total cooling capacity, rated SHR and rated COP " +
    "should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total coo" +
    "ling capacity for Speed 2.")]
[JsonProperty("speed_2_rated_air_flow_rate")]
public string Speed2RatedAirFlowRate { get; set; } = "";
        

[Description(@"Enter the evaporator fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on total cooling capacity. This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file. This value is not used for modeling the evaporator fan during simulations.")]
[JsonProperty("speed_2_rated_evaporator_fan_power_per_volume_flow_rate")]
public System.Nullable<float> Speed2RatedEvaporatorFanPowerPerVolumeFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("773.3", CultureInfo.InvariantCulture);
        

[Description("curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb t" +
    "emperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty("speed_2_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed2TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("speed_2_total_cooling_capacity_function_of_flow_fraction_curve_name")]
public string Speed2TotalCoolingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb t" +
    "emperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty("speed_2_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed2EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = Fraction of the full load Flow")]
[JsonProperty("speed_2_energy_input_ratio_function_of_flow_fraction_curve_name")]
public string Speed2EnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR" +
    "**3 PLR = part load ratio (Cooling load/steady state capacity)")]
[JsonProperty("speed_2_part_load_fraction_correlation_curve_name")]
public string Speed2PartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
[JsonProperty("speed_2_nominal_time_for_condensate_removal_to_begin")]
public System.Nullable<float> Speed2NominalTimeForCondensateRemovalToBegin { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
[JsonProperty("speed_2_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capaci" +
    "ty")]
public System.Nullable<float> Speed2RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The maximum on-off cycling rate for the compressor, which occurs at 50% run time " +
    "fraction. Suggested value is 3; zero value means latent degradation model is dis" +
    "abled.")]
[JsonProperty("speed_2_maximum_cycling_rate")]
public System.Nullable<float> Speed2MaximumCyclingRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Time constant for the cooling coil\'s latent capacity to reach steady state after " +
    "startup. Suggested value is 45; zero value means latent degradation model is dis" +
    "abled.")]
[JsonProperty("speed_2_latent_capacity_time_constant")]
public System.Nullable<float> Speed2LatentCapacityTimeConstant { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Recoverable waste heat at full load and rated conditions")]
[JsonProperty("speed_2_rated_waste_heat_fraction_of_power_input")]
public System.Nullable<float> Speed2RatedWasteHeatFractionOfPowerInput { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bu" +
    "lb temperature (C) db = entering coil dry-bulb temperature (C)")]
[JsonProperty("speed_2_waste_heat_function_of_temperature_curve_name")]
public string Speed2WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[JsonProperty("speed_2_evaporative_condenser_effectiveness")]
public System.Nullable<float> Speed2EvaporativeCondenserEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("Used to calculate evaporative condenser water use")]
[JsonProperty("speed_2_evaporative_condenser_air_flow_rate")]
public string Speed2EvaporativeCondenserAirFlowRate { get; set; } = "";
        

[Description("Rated power consumed by the evaporative condenser\'s water pump at low speed")]
[JsonProperty("speed_2_rated_evaporative_condenser_pump_power_consumption")]
public string Speed2RatedEvaporativeCondenserPumpPowerConsumption { get; set; } = "";
        

[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat Gross capacity excluding supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty("speed_3_gross_rated_total_cooling_capacity")]
public string Speed3GrossRatedTotalCoolingCapacity { get; set; } = "";
        

[Description("Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity) Se" +
    "nsible and total capacities do not include supply fan heat")]
[JsonProperty("speed_3_gross_rated_sensible_heat_ratio")]
public string Speed3GrossRatedSensibleHeatRatio { get; set; } = "";
        

[Description("Gross cooling capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty("speed_3_gross_rated_cooling_cop")]
public System.Nullable<float> Speed3GrossRatedCoolingCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description("Flow rate corresponding to rated total cooling capacity, rated SHR and rated COP " +
    "should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total coo" +
    "ling capacity for Speed 3.")]
[JsonProperty("speed_3_rated_air_flow_rate")]
public string Speed3RatedAirFlowRate { get; set; } = "";
        

[Description(@"Enter the evaporator fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on total cooling capacity. This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file. This value is not used for modeling the evaporator fan during simulations.")]
[JsonProperty("speed_3_rated_evaporator_fan_power_per_volume_flow_rate")]
public System.Nullable<float> Speed3RatedEvaporatorFanPowerPerVolumeFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("773.3", CultureInfo.InvariantCulture);
        

[Description("curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb t" +
    "emperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty("speed_3_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed3TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("speed_3_total_cooling_capacity_function_of_flow_fraction_curve_name")]
public string Speed3TotalCoolingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb t" +
    "emperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty("speed_3_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed3EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("speed_3_energy_input_ratio_function_of_flow_fraction_curve_name")]
public string Speed3EnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR" +
    "**3 PLR = part load ratio (Cooling load/steady state capacity)")]
[JsonProperty("speed_3_part_load_fraction_correlation_curve_name")]
public string Speed3PartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
[JsonProperty("speed_3_nominal_time_for_condensate_removal_to_begin")]
public System.Nullable<float> Speed3NominalTimeForCondensateRemovalToBegin { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
[JsonProperty("speed_3_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capaci" +
    "ty")]
public System.Nullable<float> Speed3RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The maximum on-off cycling rate for the compressor, which occurs at 50% run time " +
    "fraction. Suggested value is 3; zero value means latent degradation model is dis" +
    "abled.")]
[JsonProperty("speed_3_maximum_cycling_rate")]
public System.Nullable<float> Speed3MaximumCyclingRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Time constant for the cooling coil\'s latent capacity to reach steady state after " +
    "startup. Suggested value is 45; zero value means latent degradation model is dis" +
    "abled.")]
[JsonProperty("speed_3_latent_capacity_time_constant")]
public System.Nullable<float> Speed3LatentCapacityTimeConstant { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Recoverable waste heat at full load and rated conditions")]
[JsonProperty("speed_3_rated_waste_heat_fraction_of_power_input")]
public System.Nullable<float> Speed3RatedWasteHeatFractionOfPowerInput { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bu" +
    "lb temperature (C) db = entering coil dry-bulb temperature (C)")]
[JsonProperty("speed_3_waste_heat_function_of_temperature_curve_name")]
public string Speed3WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[JsonProperty("speed_3_evaporative_condenser_effectiveness")]
public System.Nullable<float> Speed3EvaporativeCondenserEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("Used to calculate evaporative condenser water use")]
[JsonProperty("speed_3_evaporative_condenser_air_flow_rate")]
public string Speed3EvaporativeCondenserAirFlowRate { get; set; } = "";
        

[Description("Rated power consumed by the evaporative condenser\'s water pump at Low speed")]
[JsonProperty("speed_3_rated_evaporative_condenser_pump_power_consumption")]
public string Speed3RatedEvaporativeCondenserPumpPowerConsumption { get; set; } = "";
        

[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat Gross capacity excluding supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty("speed_4_gross_rated_total_cooling_capacity")]
public string Speed4GrossRatedTotalCoolingCapacity { get; set; } = "";
        

[Description("Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity) Se" +
    "nsible and total capacities do not include supply fan heat")]
[JsonProperty("speed_4_gross_rated_sensible_heat_ratio")]
public string Speed4GrossRatedSensibleHeatRatio { get; set; } = "";
        

[Description("Gross cooling capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty("speed_4_gross_rated_cooling_cop")]
public System.Nullable<float> Speed4GrossRatedCoolingCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description("Flow rate corresponding to rated total cooling capacity, rated SHR and rated COP " +
    "should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total coo" +
    "ling capacity for Speed 4")]
[JsonProperty("speed_4_rated_air_flow_rate")]
public string Speed4RatedAirFlowRate { get; set; } = "";
        

[Description(@"Enter the evaporator fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on total cooling capacity. This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file. This value is not used for modeling the evaporator fan during simulations.")]
[JsonProperty("speed_4_rated_evaporator_fan_power_per_volume_flow_rate")]
public System.Nullable<float> Speed4RatedEvaporatorFanPowerPerVolumeFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("773.3", CultureInfo.InvariantCulture);
        

[Description("curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb t" +
    "emperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty("speed_4_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed4TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("speed_4_total_cooling_capacity_function_of_flow_fraction_curve_name")]
public string Speed4TotalCoolingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb t" +
    "emperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty("speed_4_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed4EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("speed_4_energy_input_ratio_function_of_flow_fraction_curve_name")]
public string Speed4EnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR" +
    "**3 PLR = part load ratio (cooling load/steady state capacity)")]
[JsonProperty("speed_4_part_load_fraction_correlation_curve_name")]
public string Speed4PartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
[JsonProperty("speed_4_nominal_time_for_condensate_removal_to_begin")]
public System.Nullable<float> Speed4NominalTimeForCondensateRemovalToBegin { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
[JsonProperty("speed_4_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capaci" +
    "ty")]
public System.Nullable<float> Speed4RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The maximum on-off cycling rate for the compressor, which occurs at 50% run time " +
    "fraction. Suggested value is 3; zero value means latent degradation model is dis" +
    "abled.")]
[JsonProperty("speed_4_maximum_cycling_rate")]
public System.Nullable<float> Speed4MaximumCyclingRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Time constant for the cooling coil\'s latent capacity to reach steady state after " +
    "startup. Suggested value is 45; zero value means latent degradation model is dis" +
    "abled.")]
[JsonProperty("speed_4_latent_capacity_time_constant")]
public System.Nullable<float> Speed4LatentCapacityTimeConstant { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Recoverable waste heat at full load and rated conditions")]
[JsonProperty("speed_4_rated_waste_heat_fraction_of_power_input")]
public System.Nullable<float> Speed4RatedWasteHeatFractionOfPowerInput { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bu" +
    "lb temperature (C) db = entering coil dry-bulb temperature (C)")]
[JsonProperty("speed_4_waste_heat_function_of_temperature_curve_name")]
public string Speed4WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[JsonProperty("speed_4_evaporative_condenser_effectiveness")]
public System.Nullable<float> Speed4EvaporativeCondenserEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("Used to calculate evaporative condenser water use")]
[JsonProperty("speed_4_evaporative_condenser_air_flow_rate")]
public string Speed4EvaporativeCondenserAirFlowRate { get; set; } = "";
        

[Description("Rated power consumed by the evaporative condenser\'s water pump at Speed 4")]
[JsonProperty("speed_4_rated_evaporative_condenser_pump_power_consumption")]
public string Speed4RatedEvaporativeCondenserPumpPowerConsumption { get; set; } = "";
        

[Description(@"This input field is name of a conditioned or unconditioned zone where the secondary coil (condenser) of DX system or a heat pump is to be placed. This is an optional input field specified only when user desires to reject the condenser heat into a zone. The heat rejected is modelled as internal sensible heat gain of the zone.")]
[JsonProperty("zone_name_for_condenser_placement")]
public string ZoneNameForCondenserPlacement { get; set; } = "";
    }
    
    public enum Coil_Cooling_DX_MultiSpeed_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
    }
    
    public enum Coil_Cooling_DX_MultiSpeed_FuelType
    {
        
        [JsonProperty("Diesel")]
        Diesel = 0,
        
        [JsonProperty("Electricity")]
        Electricity = 1,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 2,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 3,
        
        [JsonProperty("Gasoline")]
        Gasoline = 4,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 5,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 6,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 7,
        
        [JsonProperty("Propane")]
        Propane = 8,
    }
    
    [Description(@"Direct expansion (DX) cooling coil and condensing unit (includes electric compressor and condenser fan), variable-speed. Optional inputs for moisture evaporation from wet coil when compressor cycles off with continuous fan operation. Requires two to ten sets of performance data and will interpolate between speeds. Modeled as a single coil with variable-speed compressor.")]
    [JsonObject("Coil:Cooling:DX:VariableSpeed")]
    public class Coil_Cooling_DX_VariableSpeed : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("indoor_air_inlet_node_name")]
public string IndoorAirInletNodeName { get; set; } = "";
        

[JsonProperty("indoor_air_outlet_node_name")]
public string IndoorAirOutletNodeName { get; set; } = "";
        

[JsonProperty("number_of_speeds")]
public System.Nullable<float> NumberOfSpeeds { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description("must be lower than or equal to the highest speed number")]
[JsonProperty("nominal_speed_level")]
public System.Nullable<float> NominalSpeedLevel { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("gross_rated_total_cooling_capacity_at_selected_nominal_speed_level")]
public string GrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel { get; set; } = (System.String)"Autosize";
        

[JsonProperty("rated_air_flow_rate_at_selected_nominal_speed_level")]
public string RatedAirFlowRateAtSelectedNominalSpeedLevel { get; set; } = (System.String)"Autosize";
        

[JsonProperty("nominal_time_for_condensate_to_begin_leaving_the_coil")]
public System.Nullable<float> NominalTimeForCondensateToBeginLeavingTheCoil { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("initial_moisture_evaporation_rate_divided_by_steady_state_ac_latent_capacity")]
public System.Nullable<float> InitialMoistureEvaporationRateDividedBySteadyStateAcLatentCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR" +
    "**3 PLR = part load ratio (cooling load/steady state capacity)")]
[JsonProperty("energy_part_load_fraction_curve_name")]
public string EnergyPartLoadFractionCurveName { get; set; } = "";
        

[Description("Enter the name of an outdoor air node. This node name is also specified in an Out" +
    "doorAir:Node or OutdoorAir:NodeList object.")]
[JsonProperty("condenser_air_inlet_node_name")]
public string CondenserAirInletNodeName { get; set; } = "";
        

[JsonProperty("condenser_type")]
public Coil_Cooling_DX_VariableSpeed_CondenserType CondenserType { get; set; } = (Coil_Cooling_DX_VariableSpeed_CondenserType)Enum.Parse(typeof(Coil_Cooling_DX_VariableSpeed_CondenserType), "AirCooled");
        

[Description("Rated power consumed by the evaporative condenser\'s water pump")]
[JsonProperty("evaporative_condenser_pump_rated_power_consumption")]
public string EvaporativeCondenserPumpRatedPowerConsumption { get; set; } = (System.String)"0";
        

[JsonProperty("crankcase_heater_capacity")]
public System.Nullable<float> CrankcaseHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[JsonProperty("minimum_outdoor_dry_bulb_temperature_for_compressor_operation")]
public System.Nullable<float> MinimumOutdoorDryBulbTemperatureForCompressorOperation { get; set; } = (System.Nullable<float>)Single.Parse("-25", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_water_storage_tank_name")]
public string SupplyWaterStorageTankName { get; set; } = "";
        

[JsonProperty("condensate_collection_water_storage_tank_name")]
public string CondensateCollectionWaterStorageTankName { get; set; } = "";
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
[JsonProperty("basin_heater_capacity")]
public System.Nullable<float> BasinHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdo" +
    "or dry-bulb temperature when the basin heater turns on.")]
[JsonProperty("basin_heater_setpoint_temperature")]
public System.Nullable<float> BasinHeaterSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty("basin_heater_operating_schedule_name")]
public string BasinHeaterOperatingScheduleName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_1_reference_unit_gross_rated_total_cooling_capacity")]
public System.Nullable<float> Speed1ReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = null;
        

[JsonProperty("speed_1_reference_unit_gross_rated_sensible_heat_ratio")]
public System.Nullable<float> Speed1ReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = null;
        

[JsonProperty("speed_1_reference_unit_gross_rated_cooling_cop")]
public System.Nullable<float> Speed1ReferenceUnitGrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("speed_1_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed1ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[Description("This field is only used for Condenser Type = EvaporativelyCooled")]
[JsonProperty("speed_1_reference_unit_rated_condenser_air_flow_rate")]
public System.Nullable<float> Speed1ReferenceUnitRatedCondenserAirFlowRate { get; set; } = null;
        

[Description("This field is only used for Condenser Type = EvaporativelyCooled")]
[JsonProperty("speed_1_reference_unit_rated_pad_effectiveness_of_evap_precooling")]
public System.Nullable<float> Speed1ReferenceUnitRatedPadEffectivenessOfEvapPrecooling { get; set; } = null;
        

[Description("curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb t" +
    "emperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty("speed_1_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed1TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed1TotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb t" +
    "emperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty("speed_1_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed1EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed1EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_2_reference_unit_gross_rated_total_cooling_capacity")]
public System.Nullable<float> Speed2ReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = null;
        

[JsonProperty("speed_2_reference_unit_gross_rated_sensible_heat_ratio")]
public System.Nullable<float> Speed2ReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = null;
        

[JsonProperty("speed_2_reference_unit_gross_rated_cooling_cop")]
public System.Nullable<float> Speed2ReferenceUnitGrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("speed_2_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed2ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_2_reference_unit_rated_condenser_air_flow_rate")]
public System.Nullable<float> Speed2ReferenceUnitRatedCondenserAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_2_reference_unit_rated_pad_effectiveness_of_evap_precooling")]
public System.Nullable<float> Speed2ReferenceUnitRatedPadEffectivenessOfEvapPrecooling { get; set; } = null;
        

[Description("curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb t" +
    "emperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty("speed_2_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed2TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed2TotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb t" +
    "emperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty("speed_2_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed2EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed2EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_3_reference_unit_gross_rated_total_cooling_capacity")]
public System.Nullable<float> Speed3ReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = null;
        

[JsonProperty("speed_3_reference_unit_gross_rated_sensible_heat_ratio")]
public System.Nullable<float> Speed3ReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = null;
        

[JsonProperty("speed_3_reference_unit_gross_rated_cooling_cop")]
public System.Nullable<float> Speed3ReferenceUnitGrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("speed_3_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed3ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_3_reference_unit_rated_condenser_air_flow_rate")]
public System.Nullable<float> Speed3ReferenceUnitRatedCondenserAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_3_reference_unit_rated_pad_effectiveness_of_evap_precooling")]
public System.Nullable<float> Speed3ReferenceUnitRatedPadEffectivenessOfEvapPrecooling { get; set; } = null;
        

[Description("curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb t" +
    "emperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty("speed_3_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed3TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed3TotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb t" +
    "emperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty("speed_3_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed3EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed3EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_4_reference_unit_gross_rated_total_cooling_capacity")]
public System.Nullable<float> Speed4ReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = null;
        

[JsonProperty("speed_4_reference_unit_gross_rated_sensible_heat_ratio")]
public System.Nullable<float> Speed4ReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = null;
        

[JsonProperty("speed_4_reference_unit_gross_rated_cooling_cop")]
public System.Nullable<float> Speed4ReferenceUnitGrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("speed_4_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed4ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_4_reference_unit_rated_condenser_air_flow_rate")]
public System.Nullable<float> Speed4ReferenceUnitRatedCondenserAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_4_reference_unit_rated_pad_effectiveness_of_evap_precooling")]
public System.Nullable<float> Speed4ReferenceUnitRatedPadEffectivenessOfEvapPrecooling { get; set; } = null;
        

[Description("curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb t" +
    "emperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty("speed_4_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed4TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed4TotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb t" +
    "emperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty("speed_4_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed4EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed4EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_5_reference_unit_gross_rated_total_cooling_capacity")]
public System.Nullable<float> Speed5ReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = null;
        

[JsonProperty("speed_5_reference_unit_gross_rated_sensible_heat_ratio")]
public System.Nullable<float> Speed5ReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = null;
        

[JsonProperty("speed_5_reference_unit_gross_rated_cooling_cop")]
public System.Nullable<float> Speed5ReferenceUnitGrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("speed_5_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed5ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_5_reference_unit_rated_condenser_air_flow_rate")]
public System.Nullable<float> Speed5ReferenceUnitRatedCondenserAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_5_reference_unit_rated_pad_effectiveness_of_evap_precooling")]
public System.Nullable<float> Speed5ReferenceUnitRatedPadEffectivenessOfEvapPrecooling { get; set; } = null;
        

[Description("curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb t" +
    "emperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty("speed_5_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed5TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed5TotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb t" +
    "emperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty("speed_5_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed5EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed5EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_6_reference_unit_gross_rated_total_cooling_capacity")]
public System.Nullable<float> Speed6ReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = null;
        

[JsonProperty("speed_6_reference_unit_gross_rated_sensible_heat_ratio")]
public System.Nullable<float> Speed6ReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = null;
        

[JsonProperty("speed_6_reference_unit_gross_rated_cooling_cop")]
public System.Nullable<float> Speed6ReferenceUnitGrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("speed_6_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed6ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_6_reference_unit_condenser_air_flow_rate")]
public System.Nullable<float> Speed6ReferenceUnitCondenserAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_6_reference_unit_rated_pad_effectiveness_of_evap_precooling")]
public System.Nullable<float> Speed6ReferenceUnitRatedPadEffectivenessOfEvapPrecooling { get; set; } = null;
        

[Description("curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb t" +
    "emperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty("speed_6_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed6TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed6TotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb t" +
    "emperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty("speed_6_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed6EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed6EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_7_reference_unit_gross_rated_total_cooling_capacity")]
public System.Nullable<float> Speed7ReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = null;
        

[JsonProperty("speed_7_reference_unit_gross_rated_sensible_heat_ratio")]
public System.Nullable<float> Speed7ReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = null;
        

[JsonProperty("speed_7_reference_unit_gross_rated_cooling_cop")]
public System.Nullable<float> Speed7ReferenceUnitGrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("speed_7_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed7ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_7_reference_unit_condenser_flow_rate")]
public System.Nullable<float> Speed7ReferenceUnitCondenserFlowRate { get; set; } = null;
        

[JsonProperty("speed_7_reference_unit_rated_pad_effectiveness_of_evap_precooling")]
public System.Nullable<float> Speed7ReferenceUnitRatedPadEffectivenessOfEvapPrecooling { get; set; } = null;
        

[Description("curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb t" +
    "emperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty("speed_7_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed7TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed7TotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb t" +
    "emperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty("speed_7_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed7EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed7EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_8_reference_unit_gross_rated_total_cooling_capacity")]
public System.Nullable<float> Speed8ReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = null;
        

[JsonProperty("speed_8_reference_unit_gross_rated_sensible_heat_ratio")]
public System.Nullable<float> Speed8ReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = null;
        

[JsonProperty("speed_8_reference_unit_gross_rated_cooling_cop")]
public System.Nullable<float> Speed8ReferenceUnitGrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("speed_8_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed8ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_8_reference_unit_condenser_air_flow_rate")]
public System.Nullable<float> Speed8ReferenceUnitCondenserAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_8_reference_unit_rated_pad_effectiveness_of_evap_precooling")]
public System.Nullable<float> Speed8ReferenceUnitRatedPadEffectivenessOfEvapPrecooling { get; set; } = null;
        

[Description("curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb t" +
    "emperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty("speed_8_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed8TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed8TotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb t" +
    "emperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty("speed_8_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed8EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed8EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_9_reference_unit_gross_rated_total_cooling_capacity")]
public System.Nullable<float> Speed9ReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = null;
        

[JsonProperty("speed_9_reference_unit_gross_rated_sensible_heat_ratio")]
public System.Nullable<float> Speed9ReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = null;
        

[JsonProperty("speed_9_reference_unit_gross_rated_cooling_cop")]
public System.Nullable<float> Speed9ReferenceUnitGrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("speed_9_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed9ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[Description("optional")]
[JsonProperty("speed_9_reference_unit_condenser_air_flow_rate")]
public System.Nullable<float> Speed9ReferenceUnitCondenserAirFlowRate { get; set; } = null;
        

[Description("optional")]
[JsonProperty("speed_9_reference_unit_rated_pad_effectiveness_of_evap_precooling")]
public System.Nullable<float> Speed9ReferenceUnitRatedPadEffectivenessOfEvapPrecooling { get; set; } = null;
        

[Description("curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb t" +
    "emperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty("speed_9_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed9TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed9TotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb t" +
    "emperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty("speed_9_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed9EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed9EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_10_reference_unit_gross_rated_total_cooling_capacity")]
public System.Nullable<float> Speed10ReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = null;
        

[JsonProperty("speed_10_reference_unit_gross_rated_sensible_heat_ratio")]
public System.Nullable<float> Speed10ReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = null;
        

[JsonProperty("speed_10_reference_unit_gross_rated_cooling_cop")]
public System.Nullable<float> Speed10ReferenceUnitGrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("speed_10_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed10ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[Description("optional")]
[JsonProperty("speed_10_reference_unit_condenser_air_flow_rate")]
public System.Nullable<float> Speed10ReferenceUnitCondenserAirFlowRate { get; set; } = null;
        

[Description("optional")]
[JsonProperty("speed_10_reference_unit_rated_pad_effectiveness_of_evap_precooling")]
public System.Nullable<float> Speed10ReferenceUnitRatedPadEffectivenessOfEvapPrecooling { get; set; } = null;
        

[Description("curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb t" +
    "emperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty("speed_10_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed10TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed10TotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb t" +
    "emperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty("speed_10_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed10EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed10EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
    }
    
    public enum Coil_Cooling_DX_VariableSpeed_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
    }
    
    [Description(@"Direct expansion (DX) cooling coil and condensing unit (includes electric compressor and condenser fan), two-stage with humidity control mode (e.g. sub-cool or hot gas reheat). Optional inputs for moisture evaporation from wet coil when compressor cycles off with continuous fan operation. Requires two to four sets of performance data, see CoilPerformance:DX:Cooling. Stages are modeled as a face-split coil.")]
    [JsonObject("Coil:Cooling:DX:TwoStageWithHumidityControlMode")]
    public class Coil_Cooling_DX_TwoStageWithHumidityControlMode : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("crankcase_heater_capacity")]
public System.Nullable<float> CrankcaseHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[JsonProperty("number_of_capacity_stages")]
public System.Nullable<float> NumberOfCapacityStages { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("number_of_enhanced_dehumidification_modes")]
public System.Nullable<float> NumberOfEnhancedDehumidificationModes { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("normal_mode_stage_1_coil_performance_object_type")]
public Coil_Cooling_DX_TwoStageWithHumidityControlMode_NormalModeStage1CoilPerformanceObjectType NormalModeStage1CoilPerformanceObjectType { get; set; } = (Coil_Cooling_DX_TwoStageWithHumidityControlMode_NormalModeStage1CoilPerformanceObjectType)Enum.Parse(typeof(Coil_Cooling_DX_TwoStageWithHumidityControlMode_NormalModeStage1CoilPerformanceObjectType), "CoilPerformanceDXCooling");
        

[JsonProperty("normal_mode_stage_1_coil_performance_name")]
public string NormalModeStage1CoilPerformanceName { get; set; } = "";
        

[JsonProperty("normal_mode_stage_1_2_coil_performance_object_type")]
public Coil_Cooling_DX_TwoStageWithHumidityControlMode_NormalModeStage12CoilPerformanceObjectType NormalModeStage12CoilPerformanceObjectType { get; set; } = (Coil_Cooling_DX_TwoStageWithHumidityControlMode_NormalModeStage12CoilPerformanceObjectType)Enum.Parse(typeof(Coil_Cooling_DX_TwoStageWithHumidityControlMode_NormalModeStage12CoilPerformanceObjectType), "CoilPerformanceDXCooling");
        

[JsonProperty("normal_mode_stage_1_2_coil_performance_name")]
public string NormalModeStage12CoilPerformanceName { get; set; } = "";
        

[JsonProperty("dehumidification_mode_1_stage_1_coil_performance_object_type")]
public Coil_Cooling_DX_TwoStageWithHumidityControlMode_DehumidificationMode1Stage1CoilPerformanceObjectType DehumidificationMode1Stage1CoilPerformanceObjectType { get; set; } = (Coil_Cooling_DX_TwoStageWithHumidityControlMode_DehumidificationMode1Stage1CoilPerformanceObjectType)Enum.Parse(typeof(Coil_Cooling_DX_TwoStageWithHumidityControlMode_DehumidificationMode1Stage1CoilPerformanceObjectType), "CoilPerformanceDXCooling");
        

[JsonProperty("dehumidification_mode_1_stage_1_coil_performance_name")]
public string DehumidificationMode1Stage1CoilPerformanceName { get; set; } = "";
        

[JsonProperty("dehumidification_mode_1_stage_1_2_coil_performance_object_type")]
public Coil_Cooling_DX_TwoStageWithHumidityControlMode_DehumidificationMode1Stage12CoilPerformanceObjectType DehumidificationMode1Stage12CoilPerformanceObjectType { get; set; } = (Coil_Cooling_DX_TwoStageWithHumidityControlMode_DehumidificationMode1Stage12CoilPerformanceObjectType)Enum.Parse(typeof(Coil_Cooling_DX_TwoStageWithHumidityControlMode_DehumidificationMode1Stage12CoilPerformanceObjectType), "CoilPerformanceDXCooling");
        

[JsonProperty("dehumidification_mode_1_stage_1_2_coil_performance_name")]
public string DehumidificationMode1Stage12CoilPerformanceName { get; set; } = "";
        

[JsonProperty("supply_water_storage_tank_name")]
public string SupplyWaterStorageTankName { get; set; } = "";
        

[JsonProperty("condensate_collection_water_storage_tank_name")]
public string CondensateCollectionWaterStorageTankName { get; set; } = "";
        

[JsonProperty("minimum_outdoor_dry_bulb_temperature_for_compressor_operation")]
public System.Nullable<float> MinimumOutdoorDryBulbTemperatureForCompressorOperation { get; set; } = (System.Nullable<float>)Single.Parse("-25", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
[JsonProperty("basin_heater_capacity")]
public System.Nullable<float> BasinHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdo" +
    "or dry-bulb temperature when the basin heater turns on.")]
[JsonProperty("basin_heater_setpoint_temperature")]
public System.Nullable<float> BasinHeaterSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty("basin_heater_operating_schedule_name")]
public string BasinHeaterOperatingScheduleName { get; set; } = "";
    }
    
    public enum Coil_Cooling_DX_TwoStageWithHumidityControlMode_NormalModeStage1CoilPerformanceObjectType
    {
        
        [JsonProperty("CoilPerformance:DX:Cooling")]
        CoilPerformanceDXCooling = 0,
    }
    
    public enum Coil_Cooling_DX_TwoStageWithHumidityControlMode_NormalModeStage12CoilPerformanceObjectType
    {
        
        [JsonProperty("CoilPerformance:DX:Cooling")]
        CoilPerformanceDXCooling = 0,
    }
    
    public enum Coil_Cooling_DX_TwoStageWithHumidityControlMode_DehumidificationMode1Stage1CoilPerformanceObjectType
    {
        
        [JsonProperty("CoilPerformance:DX:Cooling")]
        CoilPerformanceDXCooling = 0,
    }
    
    public enum Coil_Cooling_DX_TwoStageWithHumidityControlMode_DehumidificationMode1Stage12CoilPerformanceObjectType
    {
        
        [JsonProperty("CoilPerformance:DX:Cooling")]
        CoilPerformanceDXCooling = 0,
    }
    
    [Description(@"Used to specify DX cooling coil performance for one mode of operation for a Coil:Cooling:DX:TwoStageWithHumidityControlMode object which may reference one to four CoilPerformance:DX:Cooling objects depending on the specified number of stages and dehumidification modes. In nearly all cases, the Rated Air Flow Rate will be the same for all performance objects associated with a given coil. If bypass is specified, the Rated Air Flow Rate includes both the bypassed flow and the flow through the active part of the coil.")]
    [JsonObject("CoilPerformance:DX:Cooling")]
    public class CoilPerformance_DX_Cooling : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty("gross_rated_total_cooling_capacity")]
public string GrossRatedTotalCoolingCapacity { get; set; } = "";
        

[Description("Rated sensible heat ratio (gross sensible capacity/gross total capacity) sensible" +
    " and total capacities do not include supply fan heat")]
[JsonProperty("gross_rated_sensible_heat_ratio")]
public string GrossRatedSensibleHeatRatio { get; set; } = "";
        

[Description("Gross cooling capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty("gross_rated_cooling_cop")]
public System.Nullable<float> GrossRatedCoolingCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description("Flow rate corresponding to Rated total Cooling capacity, Rated SHR and Rated COP")]
[JsonProperty("rated_air_flow_rate")]
public string RatedAirFlowRate { get; set; } = "";
        

[Description(@"Fraction of Rated Air Flow Rate which bypasses the cooling coil in this performance mode. The remaining portion of the flow should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity. This is used to model face-split coils on multi-stage units or bypass dampers. If total flow rate varies during simulation, the same fraction is bypassed.")]
[JsonProperty("fraction_of_air_flow_bypassed_around_coil")]
public System.Nullable<float> FractionOfAirFlowBypassedAroundCoil { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb t" +
    "emperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty("total_cooling_capacity_function_of_temperature_curve_name")]
public string TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("total_cooling_capacity_function_of_flow_fraction_curve_name")]
public string TotalCoolingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb t" +
    "emperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty("energy_input_ratio_function_of_temperature_curve_name")]
public string EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("energy_input_ratio_function_of_flow_fraction_curve_name")]
public string EnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR" +
    "**3 PLR = part load ratio (cooling load/steady state capacity)")]
[JsonProperty("part_load_fraction_correlation_curve_name")]
public string PartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
[JsonProperty("nominal_time_for_condensate_removal_to_begin")]
public System.Nullable<float> NominalTimeForCondensateRemovalToBegin { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
[JsonProperty("ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity")]
public System.Nullable<float> RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The maximum on-off cycling rate for the compressor, which occurs at 50% run time " +
    "fraction. Suggested value is 3; zero value means latent degradation model is dis" +
    "abled.")]
[JsonProperty("maximum_cycling_rate")]
public System.Nullable<float> MaximumCyclingRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Time constant for the cooling coil\'s latent capacity to reach steady state after " +
    "startup. Suggested value is 45; zero value means latent degradation model is dis" +
    "abled.")]
[JsonProperty("latent_capacity_time_constant")]
public System.Nullable<float> LatentCapacityTimeConstant { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Enter the name of an outdoor air node. This node name is also specified in an Out" +
    "doorAir:Node or OutdoorAir:NodeList object.")]
[JsonProperty("condenser_air_inlet_node_name")]
public string CondenserAirInletNodeName { get; set; } = "";
        

[JsonProperty("condenser_type")]
public CoilPerformance_DX_Cooling_CondenserType CondenserType { get; set; } = (CoilPerformance_DX_Cooling_CondenserType)Enum.Parse(typeof(CoilPerformance_DX_Cooling_CondenserType), "AirCooled");
        

[JsonProperty("evaporative_condenser_effectiveness")]
public System.Nullable<float> EvaporativeCondenserEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("Used to calculate evaporative condenser water use")]
[JsonProperty("evaporative_condenser_air_flow_rate")]
public string EvaporativeCondenserAirFlowRate { get; set; } = "";
        

[Description("Rated power consumed by the evaporative condenser\'s water pump")]
[JsonProperty("evaporative_condenser_pump_rated_power_consumption")]
public string EvaporativeCondenserPumpRatedPowerConsumption { get; set; } = (System.String)"0";
        

[Description("curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temp" +
    "erature seen by the DX cooling coil (C) db = entering dry-bulb temperature seen " +
    "by the DX cooling coil (C) entering temperature can be outside air or pretreated" +
    " air.")]
[JsonProperty("sensible_heat_ratio_function_of_temperature_curve_name")]
public string SensibleHeatRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("sensible_heat_ratio_function_of_flow_fraction_curve_name")]
public string SensibleHeatRatioFunctionOfFlowFractionCurveName { get; set; } = "";
    }
    
    public enum CoilPerformance_DX_Cooling_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
    }
    
    [Description("Variable refrigerant flow (VRF) direct expansion (DX) cooling coil. Used with Zon" +
        "eHVAC:TerminalUnit:VariableRefrigerantFlow. Condensing unit is modeled separatel" +
        "y, see AirConditioner:VariableRefrigerantFlow.")]
    [JsonObject("Coil:Cooling:DX:VariableRefrigerantFlow")]
    public class Coil_Cooling_DX_VariableRefrigerantFlow : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat Cooli" +
    "ng capacity excluding supply air fan heat")]
[JsonProperty("gross_rated_total_cooling_capacity")]
public string GrossRatedTotalCoolingCapacity { get; set; } = "";
        

[Description("Sensible heat ratio excluding supply air fan heat")]
[JsonProperty("gross_rated_sensible_heat_ratio")]
public string GrossRatedSensibleHeatRatio { get; set; } = "";
        

[Description("Volume flow rate corresponding to rated total cooling capacity should be between " +
    "0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity")]
[JsonProperty("rated_air_flow_rate")]
public string RatedAirFlowRate { get; set; } = "";
        

[JsonProperty("cooling_capacity_ratio_modifier_function_of_temperature_curve_name")]
public string CoolingCapacityRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("cooling_capacity_modifier_curve_function_of_flow_fraction_name")]
public string CoolingCapacityModifierCurveFunctionOfFlowFractionName { get; set; } = "";
        

[JsonProperty("coil_air_inlet_node")]
public string CoilAirInletNode { get; set; } = "";
        

[JsonProperty("coil_air_outlet_node")]
public string CoilAirOutletNode { get; set; } = "";
        

[JsonProperty("name_of_water_storage_tank_for_condensate_collection")]
public string NameOfWaterStorageTankForCondensateCollection { get; set; } = "";
    }
    
    [Description("Variable refrigerant flow (VRF) direct expansion (DX) heating coil (air-to-air he" +
        "at pump). Used with ZoneHVAC:TerminalUnit:VariableRefrigerantFlow. Condensing un" +
        "it is modeled separately, see AirConditioner:VariableRefrigerantFlow.")]
    [JsonObject("Coil:Heating:DX:VariableRefrigerantFlow")]
    public class Coil_Heating_DX_VariableRefrigerantFlow : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule")]
public string AvailabilitySchedule { get; set; } = "";
        

[Description(@"Heating capacity not accounting for the effect of supply air fan heat capacity excluding supply air fan heat rating point outside dry-bulb temp 8.33 C, outside wet-bulb temp 6.11 C rating point heating coil entering air dry-bulb 21.11 C, coil entering wetbulb 15.55 C")]
[JsonProperty("gross_rated_heating_capacity")]
public string GrossRatedHeatingCapacity { get; set; } = "";
        

[Description("volume flow rate corresponding to rated total capacity should be between 0.000040" +
    "27 m3/s and .00006041 m3/s per watt of rated heating capacity")]
[JsonProperty("rated_air_flow_rate")]
public string RatedAirFlowRate { get; set; } = "";
        

[JsonProperty("coil_air_inlet_node")]
public string CoilAirInletNode { get; set; } = "";
        

[JsonProperty("coil_air_outlet_node")]
public string CoilAirOutletNode { get; set; } = "";
        

[JsonProperty("heating_capacity_ratio_modifier_function_of_temperature_curve_name")]
public string HeatingCapacityRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("heating_capacity_modifier_function_of_flow_fraction_curve_name")]
public string HeatingCapacityModifierFunctionOfFlowFractionCurveName { get; set; } = "";
    }
    
    [Description(@"This is a key object in the new physics based VRF model applicable for Fluid Temperature Control. It describes the the indoor unit coil of the system at cooling mode. Used with ZoneHVAC:TerminalUnit:VariableRefrigerantFlow. Outdoor unit is modeled separately, see AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl or AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR")]
    [JsonObject("Coil:Cooling:DX:VariableRefrigerantFlow:FluidTemperatureControl")]
    public class Coil_Cooling_DX_VariableRefrigerantFlow_FluidTemperatureControl : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of a schedule that defines the availability of the coil Schedule v" +
    "alues of 0 denote the unit is off. All other values denote the unit is available" +
    " If this field is left blank, the unit is available the entire simulation")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("the inlet node to the coil")]
[JsonProperty("coil_air_inlet_node")]
public string CoilAirInletNode { get; set; } = "";
        

[Description("the outlet node to the coil")]
[JsonProperty("coil_air_outlet_node")]
public string CoilAirOutletNode { get; set; } = "";
        

[Description("Supply air fan heat is not included")]
[JsonProperty("rated_total_cooling_capacity")]
public string RatedTotalCoolingCapacity { get; set; } = "";
        

[Description("Supply air fan heat is not included")]
[JsonProperty("rated_sensible_heat_ratio")]
public string RatedSensibleHeatRatio { get; set; } = "";
        

[JsonProperty("indoor_unit_reference_superheating")]
public System.Nullable<float> IndoorUnitReferenceSuperheating { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[JsonProperty("indoor_unit_evaporating_temperature_function_of_superheating_curve_name")]
public string IndoorUnitEvaporatingTemperatureFunctionOfSuperheatingCurveName { get; set; } = "";
        

[JsonProperty("name_of_water_storage_tank_for_condensate_collection")]
public string NameOfWaterStorageTankForCondensateCollection { get; set; } = "";
    }
    
    [Description(@"This is a key object in the new physics based VRF model applicable for Fluid Temperature Control. It describes the the indoor unit coil of the system at heating mode. Used with ZoneHVAC:TerminalUnit:VariableRefrigerantFlow. Outdoor unit is modeled separately, see AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl or AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR")]
    [JsonObject("Coil:Heating:DX:VariableRefrigerantFlow:FluidTemperatureControl")]
    public class Coil_Heating_DX_VariableRefrigerantFlow_FluidTemperatureControl : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of a schedule that defines the availability of the coil Schedule v" +
    "alues of 0 denote the unit is off. All other values denote the unit is available" +
    " If this field is left blank, the unit is available the entire simulation")]
[JsonProperty("availability_schedule")]
public string AvailabilitySchedule { get; set; } = "";
        

[Description("the inlet node to the coil")]
[JsonProperty("coil_air_inlet_node")]
public string CoilAirInletNode { get; set; } = "";
        

[Description("the outlet node to the coil")]
[JsonProperty("coil_air_outlet_node")]
public string CoilAirOutletNode { get; set; } = "";
        

[Description("Supply air fan heat is not included")]
[JsonProperty("rated_total_heating_capacity")]
public string RatedTotalHeatingCapacity { get; set; } = "";
        

[JsonProperty("indoor_unit_reference_subcooling")]
public System.Nullable<float> IndoorUnitReferenceSubcooling { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[JsonProperty("indoor_unit_condensing_temperature_function_of_subcooling_curve_name")]
public string IndoorUnitCondensingTemperatureFunctionOfSubcoolingCurveName { get; set; } = "";
    }
    
    [Description("Hot water heating coil, NTU-effectiveness model, assumes a cross-flow heat exchan" +
        "ger. Two options for capacity inputs: UA and water flow rate or capacity and des" +
        "ign temperatures.")]
    [JsonObject("Coil:Heating:Water")]
    public class Coil_Heating_Water : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("UA value under rating conditions")]
[JsonProperty("u_factor_times_area_value")]
public string UFactorTimesAreaValue { get; set; } = (System.String)"Autosize";
        

[JsonProperty("maximum_water_flow_rate")]
public string MaximumWaterFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[JsonProperty("water_outlet_node_name")]
public string WaterOutletNodeName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("performance_input_method")]
public Coil_Heating_Water_PerformanceInputMethod PerformanceInputMethod { get; set; } = (Coil_Heating_Water_PerformanceInputMethod)Enum.Parse(typeof(Coil_Heating_Water_PerformanceInputMethod), "UFactorTimesAreaAndDesignWaterFlowRate");
        

[JsonProperty("rated_capacity")]
public string RatedCapacity { get; set; } = (System.String)"Autosize";
        

[JsonProperty("rated_inlet_water_temperature")]
public System.Nullable<float> RatedInletWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("82.2", CultureInfo.InvariantCulture);
        

[JsonProperty("rated_inlet_air_temperature")]
public System.Nullable<float> RatedInletAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("16.6", CultureInfo.InvariantCulture);
        

[JsonProperty("rated_outlet_water_temperature")]
public System.Nullable<float> RatedOutletWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("71.1", CultureInfo.InvariantCulture);
        

[JsonProperty("rated_outlet_air_temperature")]
public System.Nullable<float> RatedOutletAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("32.2", CultureInfo.InvariantCulture);
        

[JsonProperty("rated_ratio_for_air_and_water_convection")]
public System.Nullable<float> RatedRatioForAirAndWaterConvection { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[Description("This input field is optional. If specified, it is used for sizing the Design Wate" +
    "r Flow Rate. If blank or omitted, the Loop Design Temperature Difference value s" +
    "pecified in Sizing:Plant object is used for sizing the Design Water Flow Rate.")]
[JsonProperty("design_water_temperature_difference")]
public System.Nullable<float> DesignWaterTemperatureDifference { get; set; } = null;
    }
    
    public enum Coil_Heating_Water_PerformanceInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("NominalCapacity")]
        NominalCapacity = 1,
        
        [JsonProperty("UFactorTimesAreaAndDesignWaterFlowRate")]
        UFactorTimesAreaAndDesignWaterFlowRate = 2,
    }
    
    [Description("Steam heating coil. Condenses and sub-cools steam at loop pressure and discharges" +
        " condensate through steam traps to low pressure condensate line.")]
    [JsonObject("Coil:Heating:Steam")]
    public class Coil_Heating_Steam : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("maximum_steam_flow_rate")]
public string MaximumSteamFlowRate { get; set; } = "";
        

[JsonProperty("degree_of_subcooling")]
public System.Nullable<float> DegreeOfSubcooling { get; set; } = null;
        

[JsonProperty("degree_of_loop_subcooling")]
public System.Nullable<float> DegreeOfLoopSubcooling { get; set; } = (System.Nullable<float>)Single.Parse("20", CultureInfo.InvariantCulture);
        

[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[JsonProperty("water_outlet_node_name")]
public string WaterOutletNodeName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Use ZoneLoadControl if the coil is contained within another component such as an " +
    "air terminal unit, zone HVAC equipment, or unitary system. Use TemperatureSetpoi" +
    "ntControl if the coil is located directly in an air loop branch or outdoor air e" +
    "quipment list.")]
[JsonProperty("coil_control_type")]
public Coil_Heating_Steam_CoilControlType CoilControlType { get; set; } = (Coil_Heating_Steam_CoilControlType)Enum.Parse(typeof(Coil_Heating_Steam_CoilControlType), "TemperatureSetpointControl");
        

[Description("Required if Coil Control Type is TemperatureSetpointControl")]
[JsonProperty("temperature_setpoint_node_name")]
public string TemperatureSetpointNodeName { get; set; } = "";
    }
    
    public enum Coil_Heating_Steam_CoilControlType
    {
        
        [JsonProperty("TemperatureSetpointControl")]
        TemperatureSetpointControl = 0,
        
        [JsonProperty("ZoneLoadControl")]
        ZoneLoadControl = 1,
    }
    
    [Description(@"Electric heating coil. If the coil is located directly in an air loop branch or outdoor air equipment list, then it is controlled on leaving air temperature and the Temperature Setpoint Node Name must be specified. If the coil is contained within another component such as an air terminal unit, zone HVAC equipment, or unitary system, then the coil is controlled by the parent component and the setpoint node name is not entered.")]
    [JsonObject("Coil:Heating:Electric")]
    public class Coil_Heating_Electric : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("efficiency")]
public System.Nullable<float> Efficiency { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("nominal_capacity")]
public string NominalCapacity { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Required if coil is temperature controlled.")]
[JsonProperty("temperature_setpoint_node_name")]
public string TemperatureSetpointNodeName { get; set; } = "";
    }
    
    [Description(@"Electric heating coil, multi-stage. If the coil is located directly in an air loop branch or outdoor air equipment list, then it is controlled on leaving air temperature and the Temperature Setpoint Node Name must be specified. If the coil is contained within another component such as an air terminal unit, zone HVAC equipment, or unitary system, then the coil is controlled by the parent component and the setpoint node name is not entered.")]
    [JsonObject("Coil:Heating:Electric:MultiStage")]
    public class Coil_Heating_Electric_MultiStage : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Required if coil is temperature controlled. controlled")]
[JsonProperty("temperature_setpoint_node_name")]
public string TemperatureSetpointNodeName { get; set; } = "";
        

[Description("Enter the number of the following sets of data for coil capacity and Efficiency.")]
[JsonProperty("number_of_stages")]
public System.Nullable<float> NumberOfStages { get; set; } = null;
        

[JsonProperty("stage_1_efficiency")]
public System.Nullable<float> Stage1Efficiency { get; set; } = null;
        

[JsonProperty("stage_1_nominal_capacity")]
public string Stage1NominalCapacity { get; set; } = "";
        

[JsonProperty("stage_2_efficiency")]
public System.Nullable<float> Stage2Efficiency { get; set; } = null;
        

[JsonProperty("stage_2_nominal_capacity")]
public string Stage2NominalCapacity { get; set; } = "";
        

[JsonProperty("stage_3_efficiency")]
public System.Nullable<float> Stage3Efficiency { get; set; } = null;
        

[JsonProperty("stage_3_nominal_capacity")]
public string Stage3NominalCapacity { get; set; } = "";
        

[JsonProperty("stage_4_efficiency")]
public System.Nullable<float> Stage4Efficiency { get; set; } = null;
        

[JsonProperty("stage_4_nominal_capacity")]
public string Stage4NominalCapacity { get; set; } = "";
    }
    
    [Description(@"Gas or other fuel heating coil. If the coil is located directly in an air loop branch or outdoor air equipment list, then it is controlled on leaving air temperature and the Temperature Setpoint Node Name must be specified. If the coil is contained within another component such as an air terminal unit, zone HVAC equipment, or unitary system, then the coil is controlled by the parent component and the setpoint node name is not entered.")]
    [JsonObject("Coil:Heating:Fuel")]
    public class Coil_Heating_Fuel : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("fuel_type")]
public Coil_Heating_Fuel_FuelType FuelType { get; set; } = (Coil_Heating_Fuel_FuelType)Enum.Parse(typeof(Coil_Heating_Fuel_FuelType), "NaturalGas");
        

[JsonProperty("burner_efficiency")]
public System.Nullable<float> BurnerEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[JsonProperty("nominal_capacity")]
public string NominalCapacity { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("optional, used if coil is temperature control and not load-base controlled")]
[JsonProperty("temperature_setpoint_node_name")]
public string TemperatureSetpointNodeName { get; set; } = "";
        

[Description("parasitic electric load associated with the coil operation such as an inducer fan" +
    ", etc... This will be modified by the part load ratio to reflect the time of ope" +
    "ration in a timestep.")]
[JsonProperty("parasitic_electric_load")]
public System.Nullable<float> ParasiticElectricLoad { get; set; } = null;
        

[Description(@"quadratic curve, PLF = a + b*PLR + c*PLR**2 cubic curve, PLF = a + b*PLR + c*PLR**2 + d*PLR**3 PLF = part load fraction PLR = part load ratio (sensible heating load/steady state heating capacity) Coil runtime fraction = Part Load Ratio / PLF This part load degradation is for coil performance & will increase the fuel consumption of the coil due to transient coil operation.")]
[JsonProperty("part_load_fraction_correlation_curve_name")]
public string PartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description("parasitic fuel load associated with the coil operation (i.e., standing pilot)")]
[JsonProperty("parasitic_fuel_load")]
public System.Nullable<float> ParasiticFuelLoad { get; set; } = null;
    }
    
    public enum Coil_Heating_Fuel_FuelType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Coal")]
        Coal = 1,
        
        [JsonProperty("Diesel")]
        Diesel = 2,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 3,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 4,
        
        [JsonProperty("Gasoline")]
        Gasoline = 5,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 6,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 7,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 8,
        
        [JsonProperty("Propane")]
        Propane = 9,
    }
    
    [Description(@"Gas heating coil, multi-stage. If the coil is located directly in an air loop branch or outdoor air equipment list, then it is controlled on leaving air temperature and the Temperature Setpoint Node Name must be specified. If the coil is contained within another component such as an air terminal unit, zone HVAC equipment, or unitary system, then the coil is controlled by the parent component and the setpoint node name is not entered.")]
    [JsonObject("Coil:Heating:Gas:MultiStage")]
    public class Coil_Heating_Gas_MultiStage : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("optional, used if coil is temperature control and not load-base controlled.")]
[JsonProperty("temperature_setpoint_node_name")]
public string TemperatureSetpointNodeName { get; set; } = "";
        

[Description(@"quadratic curve, PLF = a + b*PLR + c*PLR**2 cubic curve, PLF = a + b*PLR + c*PLR**2 + d*PLR**3 PLF = part load fraction PLR = part load ratio (sensible heating load/steady state heating capacity) Coil runtime fraction = Part Load Ratio / PLF This part load degradation is for coil performance & will increase the gas consumption of the coil due to transient coil operation.")]
[JsonProperty("part_load_fraction_correlation_curve_name")]
public string PartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description("parasitic gas load associated with the gas coil operation (i.e., standing pilot)")]
[JsonProperty("parasitic_gas_load")]
public System.Nullable<float> ParasiticGasLoad { get; set; } = null;
        

[Description("Enter the number of the following sets of data for coil capacity and Gas Burner E" +
    "fficiency.")]
[JsonProperty("number_of_stages")]
public System.Nullable<float> NumberOfStages { get; set; } = null;
        

[JsonProperty("stage_1_gas_burner_efficiency")]
public System.Nullable<float> Stage1GasBurnerEfficiency { get; set; } = null;
        

[JsonProperty("stage_1_nominal_capacity")]
public string Stage1NominalCapacity { get; set; } = "";
        

[Description("Stage 1 parasitic electric load associated with the gas coil operation such as an" +
    " inducer fan, etc. This will be modified by the part load ratio to reflect the t" +
    "ime of operation in a timestep.")]
[JsonProperty("stage_1_parasitic_electric_load")]
public System.Nullable<float> Stage1ParasiticElectricLoad { get; set; } = null;
        

[JsonProperty("stage_2_gas_burner_efficiency")]
public System.Nullable<float> Stage2GasBurnerEfficiency { get; set; } = null;
        

[JsonProperty("stage_2_nominal_capacity")]
public string Stage2NominalCapacity { get; set; } = "";
        

[Description("Stage 2 parasitic electric load associated with the gas coil operation such as an" +
    " inducer fan, etc. This will be modified by the part load ratio to reflect the t" +
    "ime of operation in a timestep.")]
[JsonProperty("stage_2_parasitic_electric_load")]
public System.Nullable<float> Stage2ParasiticElectricLoad { get; set; } = null;
        

[JsonProperty("stage_3_gas_burner_efficiency")]
public System.Nullable<float> Stage3GasBurnerEfficiency { get; set; } = null;
        

[JsonProperty("stage_3_nominal_capacity")]
public string Stage3NominalCapacity { get; set; } = "";
        

[Description("Stage 3 parasitic electric load associated with the gas coil operation such as an" +
    " inducer fan, etc. This will be modified by the part load ratio to reflect the t" +
    "ime of operation in a timestep.")]
[JsonProperty("stage_3_parasitic_electric_load")]
public System.Nullable<float> Stage3ParasiticElectricLoad { get; set; } = null;
        

[JsonProperty("stage_4_gas_burner_efficiency")]
public System.Nullable<float> Stage4GasBurnerEfficiency { get; set; } = null;
        

[JsonProperty("stage_4_nominal_capacity")]
public string Stage4NominalCapacity { get; set; } = "";
        

[Description("Stage 4 parasitic electric load associated with the gas coil operation such as an" +
    " inducer fan, etc. This will be modified by the part load ratio to reflect the t" +
    "ime of operation in a timestep.")]
[JsonProperty("stage_4_parasitic_electric_load")]
public System.Nullable<float> Stage4ParasiticElectricLoad { get; set; } = null;
    }
    
    [Description(@"Desuperheater air heating coil. The heating energy provided by this coil is reclaimed from the superheated refrigerant gas leaving a compressor and does not impact the performance of the compressor. If the coil is located directly in an air loop branch or outdoor air equipment list, then it is controlled on leaving air temperature and the Temperature Setpoint Node Name must be specified. If the coil is contained within another component such as a unitary system, then the coil is controlled by the parent component and the setpoint node name is not entered.")]
    [JsonObject("Coil:Heating:Desuperheater")]
    public class Coil_Heating_Desuperheater : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("heat_reclaim_recovery_efficiency")]
public System.Nullable<float> HeatReclaimRecoveryEfficiency { get; set; } = null;
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("heating_source_object_type")]
public Coil_Heating_Desuperheater_HeatingSourceObjectType HeatingSourceObjectType { get; set; } = (Coil_Heating_Desuperheater_HeatingSourceObjectType)Enum.Parse(typeof(Coil_Heating_Desuperheater_HeatingSourceObjectType), "CoilCoolingDXSingleSpeed");
        

[JsonProperty("heating_source_name")]
public string HeatingSourceName { get; set; } = "";
        

[Description("Required if coil is temperature controlled. Temperature-based control requires th" +
    "e use of a SetpointManager object")]
[JsonProperty("temperature_setpoint_node_name")]
public string TemperatureSetpointNodeName { get; set; } = "";
        

[Description("parasitic electric load associated with the desuperheater coil operation such as " +
    "solenoid valves, etc.")]
[JsonProperty("parasitic_electric_load")]
public System.Nullable<float> ParasiticElectricLoad { get; set; } = null;
    }
    
    public enum Coil_Heating_Desuperheater_HeatingSourceObjectType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:TwoSpeed")]
        CoilCoolingDXTwoSpeed = 1,
        
        [JsonProperty("Coil:Cooling:DX:TwoStageWithHumidityControlMode")]
        CoilCoolingDXTwoStageWithHumidityControlMode = 2,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 3,
        
        [JsonProperty("Refrigeration:CompressorRack")]
        RefrigerationCompressorRack = 4,
        
        [JsonProperty("Refrigeration:Condenser:AirCooled")]
        RefrigerationCondenserAirCooled = 5,
        
        [JsonProperty("Refrigeration:Condenser:EvaporativeCooled")]
        RefrigerationCondenserEvaporativeCooled = 6,
        
        [JsonProperty("Refrigeration:Condenser:WaterCooled")]
        RefrigerationCondenserWaterCooled = 7,
    }
    
    [Description("Direct expansion (DX) heating coil (air-to-air heat pump) and compressor unit (in" +
        "cludes electric compressor and outdoor fan), single-speed, with defrost controls" +
        ".")]
    [JsonObject("Coil:Heating:DX:SingleSpeed")]
    public class Coil_Heating_DX_SingleSpeed : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description(@"Heating capacity not accounting for the effect of supply air fan heat capacity excluding supply air fan heat rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty("gross_rated_heating_capacity")]
public string GrossRatedHeatingCapacity { get; set; } = "";
        

[Description("Rated heating capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply air fan heat or supply air fan electrical energy does no" +
    "t include supply air fan heat or supply air fan electrical energy")]
[JsonProperty("gross_rated_heating_cop")]
public System.Nullable<float> GrossRatedHeatingCop { get; set; } = null;
        

[Description("Flow rate corresponding to rated total capacity should be between 0.00004027 m3/s" +
    " and .00006041 m3/s per watt of rated heating capacity")]
[JsonProperty("rated_air_flow_rate")]
public string RatedAirFlowRate { get; set; } = "";
        

[Description(@"Enter the supply fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on heating capacity. This value is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not used for modeling the supply (condenser) fan during simulations.")]
[JsonProperty("rated_supply_fan_power_per_volume_flow_rate")]
public System.Nullable<float> RatedSupplyFanPowerPerVolumeFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("773.3", CultureInfo.InvariantCulture);
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) Biquadratic curve is recommended if sufficient manufacturer data is available for the heating capacity to be sensitive to both iat and oat.")]
[JsonProperty("heating_capacity_function_of_temperature_curve_name")]
public string HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("heating_capacity_function_of_flow_fraction_curve_name")]
public string HeatingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the energy input ratio to be sensitive to both iat and oat.")]
[JsonProperty("energy_input_ratio_function_of_temperature_curve_name")]
public string EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("energy_input_ratio_function_of_flow_fraction_curve_name")]
public string EnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR" +
    "**3 PLR = part load ratio (sensible heating load/steady state heating capacity)")]
[JsonProperty("part_load_fraction_correlation_curve_name")]
public string PartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description("biquadratic curve = a + b*wb + c*wb**2 + d*oat + e*oat**2 + f*wb*oat wb = wet-bul" +
    "b temperature (C) of air entering the indoor coil oat = outdoor air dry-bulb tem" +
    "perature (C) only required if ReverseCycle defrost strategy is specified")]
[JsonProperty("defrost_energy_input_ratio_function_of_temperature_curve_name")]
public string DefrostEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[JsonProperty("minimum_outdoor_dry_bulb_temperature_for_compressor_operation")]
public System.Nullable<float> MinimumOutdoorDryBulbTemperatureForCompressorOperation { get; set; } = (System.Nullable<float>)Single.Parse("-8", CultureInfo.InvariantCulture);
        

[Description(@"The outdoor temperature when the compressor is automatically turned back on following an automatic shut off because of low outdoor dry-bulb temperature. This field is only used for the calculation of HSPF. If this field is not provided, then outdoor bin temperature used in the HSPF calculation is always considered to be greater than this temperature and 'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation' field described above. This assumption is based on AHRI standard 210/240 (2008) and can introduce significant error in the final value of HSPF.")]
[JsonProperty("outdoor_dry_bulb_temperature_to_turn_on_compressor")]
public System.Nullable<float> OutdoorDryBulbTemperatureToTurnOnCompressor { get; set; } = null;
        

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_defrost_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForDefrostOperation { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[JsonProperty("crankcase_heater_capacity")]
public System.Nullable<float> CrankcaseHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[JsonProperty("defrost_strategy")]
public Coil_Heating_DX_SingleSpeed_DefrostStrategy DefrostStrategy { get; set; } = (Coil_Heating_DX_SingleSpeed_DefrostStrategy)Enum.Parse(typeof(Coil_Heating_DX_SingleSpeed_DefrostStrategy), "ReverseCycle");
        

[JsonProperty("defrost_control")]
public Coil_Heating_DX_SingleSpeed_DefrostControl DefrostControl { get; set; } = (Coil_Heating_DX_SingleSpeed_DefrostControl)Enum.Parse(typeof(Coil_Heating_DX_SingleSpeed_DefrostControl), "Timed");
        

[Description("Fraction of time in defrost mode only applicable if timed defrost control is spec" +
    "ified")]
[JsonProperty("defrost_time_period_fraction")]
public System.Nullable<float> DefrostTimePeriodFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.058333", CultureInfo.InvariantCulture);
        

[Description("only applicable if resistive defrost strategy is specified")]
[JsonProperty("resistive_defrost_heater_capacity")]
public string ResistiveDefrostHeaterCapacity { get; set; } = (System.String)"0";
        

[Description("Standard Region number for which HSPF and other standard ratings are calculated")]
[JsonProperty("region_number_for_calculating_hspf")]
public System.Nullable<float> RegionNumberForCalculatingHspf { get; set; } = (System.Nullable<float>)Single.Parse("4", CultureInfo.InvariantCulture);
        

[Description("Enter the name of an outdoor air node. This node name is also specified in an Out" +
    "doorAir:Node or OutdoorAir:NodeList object.")]
[JsonProperty("evaporator_air_inlet_node_name")]
public string EvaporatorAirInletNodeName { get; set; } = "";
        

[Description(@"This input field is name of a conditioned or unconditioned zone where the secondary coil (evaporator) of a heat pump is to be placed. This is an optional input field specified only when user desires to extract heat from the zone. The heat extracted is modelled as internal gain of the zone. If the primary DX system is a heat pump, then the zone name should be the same as the zone name specified for placing the secondary cooling DX coil.")]
[JsonProperty("zone_name_for_evaporator_placement")]
public string ZoneNameForEvaporatorPlacement { get; set; } = "";
        

[Description("This input value is the secondary coil (evaporator) air flow rate when the heat p" +
    "ump is working in heating mode or the secondary DX coil (condenser) air flow rat" +
    "e when the heat pump is working in cooling mode.")]
[JsonProperty("secondary_coil_air_flow_rate")]
public string SecondaryCoilAirFlowRate { get; set; } = "";
        

[Description(@"This input field is scaling factor for autosizing the secondary DX coil fan flow rate. The secondary air flow rate is determined by multiplying the primary DX coil rated air flow rate by the fan flow scaling factor. Default value is 1.25. If the secondary coil fan flow rate is not autosized, then the secondary coil fan flow scaling factor is set to 1.0.")]
[JsonProperty("secondary_coil_fan_flow_scaling_factor")]
public System.Nullable<float> SecondaryCoilFanFlowScalingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1.25", CultureInfo.InvariantCulture);
        

[Description(@"This input value is the nominal sensible heat ratio used to split the heat extracted by a secondary DX coil (evaporator) of a heat pump into sensible and latent components. This is an optional input field. If this input field is left blank, then pure sensible internal heat gain is assumed, i.e., sensible heat ratio of 1.0.")]
[JsonProperty("nominal_sensible_heat_ratio_of_secondary_coil")]
public System.Nullable<float> NominalSensibleHeatRatioOfSecondaryCoil { get; set; } = null;
        

[Description(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the secondary DX coil (C) db = entering dry-bulb temperature seen by the primary DX coil (C) This input field is name of sensible heat ratio modifier biquadratic curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary zone air node wet-bulb temperature and the heating DX coil entering air dry-bulb temperature. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified in the field above will be used.")]
[JsonProperty("sensible_heat_ratio_modifier_function_of_temperature_curve_name")]
public string SensibleHeatRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = secondary air flow fraction of the full load flow This input field is name of sensible heat ratio modifier curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary coil air flow fraction. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified will be used.")]
[JsonProperty("sensible_heat_ratio_modifier_function_of_flow_fraction_curve_name")]
public string SensibleHeatRatioModifierFunctionOfFlowFractionCurveName { get; set; } = "";
    }
    
    public enum Coil_Heating_DX_SingleSpeed_DefrostStrategy
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Resistive")]
        Resistive = 1,
        
        [JsonProperty("ReverseCycle")]
        ReverseCycle = 2,
    }
    
    public enum Coil_Heating_DX_SingleSpeed_DefrostControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("OnDemand")]
        OnDemand = 1,
        
        [JsonProperty("Timed")]
        Timed = 2,
    }
    
    [Description(@"Direct expansion (DX) heating coil (air-to-air heat pump) and compressor unit (includes electric or engine-driven compressor and outdoor fan), multi-speed (or variable-speed), with defrost controls. Requires two to four sets of performance data and will interpolate between speeds.")]
    [JsonObject("Coil:Heating:DX:MultiSpeed")]
    public class Coil_Heating_DX_MultiSpeed : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("minimum_outdoor_dry_bulb_temperature_for_compressor_operation")]
public System.Nullable<float> MinimumOutdoorDryBulbTemperatureForCompressorOperation { get; set; } = (System.Nullable<float>)Single.Parse("-8", CultureInfo.InvariantCulture);
        

[Description(@"The outdoor temperature when the compressor is automatically turned back on following an automatic shut off because of low outdoor dry-bulb temperature. This field is only used for the calculation of HSPF. If this field is not provided, then outdoor bin temperature used in the HSPF calculation is always considered to be greater than this temperature and 'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation' field described above. This assumption is based on AHRI standard 210/240 (2008) and can introduce significant error in the final value of HSPF.")]
[JsonProperty("outdoor_dry_bulb_temperature_to_turn_on_compressor")]
public System.Nullable<float> OutdoorDryBulbTemperatureToTurnOnCompressor { get; set; } = null;
        

[JsonProperty("crankcase_heater_capacity")]
public System.Nullable<float> CrankcaseHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("biquadratic curve = a + b*wb + c*wb**2 + d*oat + e*oat**2 + f*wb*oat wb = wet-bul" +
    "b temperature (C) of air entering the indoor coil oat = outdoor air dry-bulb tem" +
    "perature (C) only required if ReverseCycle defrost strategy is specified")]
[JsonProperty("defrost_energy_input_ratio_function_of_temperature_curve_name")]
public string DefrostEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_defrost_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForDefrostOperation { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[JsonProperty("defrost_strategy")]
public Coil_Heating_DX_MultiSpeed_DefrostStrategy DefrostStrategy { get; set; } = (Coil_Heating_DX_MultiSpeed_DefrostStrategy)Enum.Parse(typeof(Coil_Heating_DX_MultiSpeed_DefrostStrategy), "ReverseCycle");
        

[JsonProperty("defrost_control")]
public Coil_Heating_DX_MultiSpeed_DefrostControl DefrostControl { get; set; } = (Coil_Heating_DX_MultiSpeed_DefrostControl)Enum.Parse(typeof(Coil_Heating_DX_MultiSpeed_DefrostControl), "Timed");
        

[Description("Fraction of time in defrost mode only applicable if timed defrost control is spec" +
    "ified")]
[JsonProperty("defrost_time_period_fraction")]
public System.Nullable<float> DefrostTimePeriodFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.058333", CultureInfo.InvariantCulture);
        

[Description("only applicable if resistive defrost strategy is specified")]
[JsonProperty("resistive_defrost_heater_capacity")]
public string ResistiveDefrostHeaterCapacity { get; set; } = (System.String)"0";
        

[JsonProperty("apply_part_load_fraction_to_speeds_greater_than_1")]
public EmptyNoYes ApplyPartLoadFractionToSpeedsGreaterThan1 { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("fuel_type")]
public Coil_Heating_DX_MultiSpeed_FuelType FuelType { get; set; } = (Coil_Heating_DX_MultiSpeed_FuelType)Enum.Parse(typeof(Coil_Heating_DX_MultiSpeed_FuelType), "Diesel");
        

[Description("Standard Region number for which HSPF and other standard ratings are calculated")]
[JsonProperty("region_number_for_calculating_hspf")]
public System.Nullable<float> RegionNumberForCalculatingHspf { get; set; } = (System.Nullable<float>)Single.Parse("4", CultureInfo.InvariantCulture);
        

[Description("Enter the number of the following sets of data for coil capacity, COP, flow rate," +
    " and associated curves.")]
[JsonProperty("number_of_speeds")]
public System.Nullable<float> NumberOfSpeeds { get; set; } = null;
        

[Description(@"Heating capacity not accounting for the effect of supply air fan heat capacity excluding supply air fan heat rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty("speed_1_gross_rated_heating_capacity")]
public string Speed1GrossRatedHeatingCapacity { get; set; } = "";
        

[Description("Rated heating capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply air fan heat or supply air fan electrical energy")]
[JsonProperty("speed_1_gross_rated_heating_cop")]
public System.Nullable<float> Speed1GrossRatedHeatingCop { get; set; } = null;
        

[Description("Flow rate corresponding to rated total capacity should be between 0.00004027 m3/s" +
    " and .00006041 m3/s per watt of rated total heating capacity")]
[JsonProperty("speed_1_rated_air_flow_rate")]
public string Speed1RatedAirFlowRate { get; set; } = "";
        

[Description(@"Enter the supply air fan power per air volume flow rate at the rated speed 1 test conditions. The test conditions vary external static pressure based on heating capacity. This value is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not used for modeling the supply air fan during simulations.")]
[JsonProperty("speed_1_rated_supply_air_fan_power_per_volume_flow_rate")]
public System.Nullable<float> Speed1RatedSupplyAirFanPowerPerVolumeFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("773.3", CultureInfo.InvariantCulture);
        

[Description(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the heating capacity to be sensitive to both iat and oat.")]
[JsonProperty("speed_1_heating_capacity_function_of_temperature_curve_name")]
public string Speed1HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("speed_1_heating_capacity_function_of_flow_fraction_curve_name")]
public string Speed1HeatingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the energy input ratio to be sensitive to both iat and oat.")]
[JsonProperty("speed_1_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed1EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("speed_1_energy_input_ratio_function_of_flow_fraction_curve_name")]
public string Speed1EnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR" +
    "**3 PLR = part load ratio (sensible heating load/steady state heating capacity)")]
[JsonProperty("speed_1_part_load_fraction_correlation_curve_name")]
public string Speed1PartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description("recoverable waste heat at full load and rated conditions")]
[JsonProperty("speed_1_rated_waste_heat_fraction_of_power_input")]
public System.Nullable<float> Speed1RatedWasteHeatFractionOfPowerInput { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bu" +
    "lb temperature (C) db = entering coil dry-bulb temperature (C)")]
[JsonProperty("speed_1_waste_heat_function_of_temperature_curve_name")]
public string Speed1WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"Heating capacity not accounting for the effect of supply air fan heat capacity excluding supply air fan heat rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty("speed_2_gross_rated_heating_capacity")]
public string Speed2GrossRatedHeatingCapacity { get; set; } = "";
        

[Description("Rated heating capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply air fan heat or supply air fan electrical energy")]
[JsonProperty("speed_2_gross_rated_heating_cop")]
public System.Nullable<float> Speed2GrossRatedHeatingCop { get; set; } = null;
        

[Description("Flow rate corresponding to rated total capacity should be between 0.00004027 m3/s" +
    " and .00006041 m3/s per watt of rated total heating capacity")]
[JsonProperty("speed_2_rated_air_flow_rate")]
public string Speed2RatedAirFlowRate { get; set; } = "";
        

[Description(@"Enter the supply air fan power per air volume flow rate at the rated speed 2 test conditions. The test conditions vary external static pressure based on heating capacity. This value is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not used for modeling the supply air fan during simulations.")]
[JsonProperty("speed_2_rated_supply_air_fan_power_per_volume_flow_rate")]
public System.Nullable<float> Speed2RatedSupplyAirFanPowerPerVolumeFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("773.3", CultureInfo.InvariantCulture);
        

[Description(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the heating capacity to be sensitive to both iat and oat.")]
[JsonProperty("speed_2_heating_capacity_function_of_temperature_curve_name")]
public string Speed2HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("speed_2_heating_capacity_function_of_flow_fraction_curve_name")]
public string Speed2HeatingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the energy input ratio to be sensitive to both iat and oat.")]
[JsonProperty("speed_2_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed2EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("speed_2_energy_input_ratio_function_of_flow_fraction_curve_name")]
public string Speed2EnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR" +
    "**3 PLR = part load ratio (sensible heating load/steady state heating capacity)")]
[JsonProperty("speed_2_part_load_fraction_correlation_curve_name")]
public string Speed2PartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description("recoverable waste heat at full load and rated conditions")]
[JsonProperty("speed_2_rated_waste_heat_fraction_of_power_input")]
public System.Nullable<float> Speed2RatedWasteHeatFractionOfPowerInput { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bu" +
    "lb temperature (C) db = entering coil dry-bulb temperature (C)")]
[JsonProperty("speed_2_waste_heat_function_of_temperature_curve_name")]
public string Speed2WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"Heating capacity not accounting for the effect of supply air fan heat capacity excluding supply air fan heat rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty("speed_3_gross_rated_heating_capacity")]
public string Speed3GrossRatedHeatingCapacity { get; set; } = "";
        

[Description("Rated heating capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply air fan heat or supply air fan electrical energy")]
[JsonProperty("speed_3_gross_rated_heating_cop")]
public System.Nullable<float> Speed3GrossRatedHeatingCop { get; set; } = null;
        

[Description("Flow rate corresponding to rated total capacity should be between 0.00004027 m3/s" +
    " and .00006041 m3/s per watt of rated total heating capacity")]
[JsonProperty("speed_3_rated_air_flow_rate")]
public string Speed3RatedAirFlowRate { get; set; } = "";
        

[Description(@"Enter the supply air fan power per air volume flow rate at the rated speed 3 test conditions. The test conditions vary external static pressure based on heating capacity. This value is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not used for modeling the supply air fan during simulations.")]
[JsonProperty("speed_3_rated_supply_air_fan_power_per_volume_flow_rate")]
public System.Nullable<float> Speed3RatedSupplyAirFanPowerPerVolumeFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("773.3", CultureInfo.InvariantCulture);
        

[Description(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the heating capacity to be sensitive to both iat and oat.")]
[JsonProperty("speed_3_heating_capacity_function_of_temperature_curve_name")]
public string Speed3HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("speed_3_heating_capacity_function_of_flow_fraction_curve_name")]
public string Speed3HeatingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the energy input ratio to be sensitive to both iat and oat.")]
[JsonProperty("speed_3_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed3EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("speed_3_energy_input_ratio_function_of_flow_fraction_curve_name")]
public string Speed3EnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR" +
    "**3 PLR = part load ratio (sensible heating load/steady state heating capacity)")]
[JsonProperty("speed_3_part_load_fraction_correlation_curve_name")]
public string Speed3PartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description("recoverable waste heat at full load and rated conditions")]
[JsonProperty("speed_3_rated_waste_heat_fraction_of_power_input")]
public System.Nullable<float> Speed3RatedWasteHeatFractionOfPowerInput { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bu" +
    "lb temperature (C) db = entering coil dry-bulb temperature (C)")]
[JsonProperty("speed_3_waste_heat_function_of_temperature_curve_name")]
public string Speed3WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"Heating capacity not accounting for the effect of supply air fan heat capacity excluding supply air fan heat rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty("speed_4_gross_rated_heating_capacity")]
public string Speed4GrossRatedHeatingCapacity { get; set; } = "";
        

[Description("Rated heating capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply air fan heat or supply air fan electrical energy")]
[JsonProperty("speed_4_gross_rated_heating_cop")]
public System.Nullable<float> Speed4GrossRatedHeatingCop { get; set; } = null;
        

[Description("Flow rate corresponding to rated total capacity should be between 0.00004027 m3/s" +
    " and .00006041 m3/s per watt of rated total heating capacity")]
[JsonProperty("speed_4_rated_air_flow_rate")]
public string Speed4RatedAirFlowRate { get; set; } = "";
        

[Description(@"Enter the supply air fan power per air volume flow rate at the rated speed 4 test conditions. The test conditions vary external static pressure based on heating capacity. This value is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not used for modeling the supply air fan during simulations.")]
[JsonProperty("speed_4_rated_supply_air_fan_power_per_volume_flow_rate")]
public System.Nullable<float> Speed4RatedSupplyAirFanPowerPerVolumeFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("773.3", CultureInfo.InvariantCulture);
        

[Description(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the heating capacity to be sensitive to both iat and oat.")]
[JsonProperty("speed_4_heating_capacity_function_of_temperature_curve_name")]
public string Speed4HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("speed_4_heating_capacity_function_of_flow_fraction_curve_name")]
public string Speed4HeatingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the energy input ratio to be sensitive to both iat and oat.")]
[JsonProperty("speed_4_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed4EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 f" +
    "f = fraction of the full load flow")]
[JsonProperty("speed_4_energy_input_ratio_function_of_flow_fraction_curve_name")]
public string Speed4EnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR" +
    "**3 PLR = part load ratio (sensible heating load/steady state heating capacity)")]
[JsonProperty("speed_4_part_load_fraction_correlation_curve_name")]
public string Speed4PartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description("recoverable waste heat at full load and rated conditions")]
[JsonProperty("speed_4_rated_waste_heat_fraction_of_power_input")]
public System.Nullable<float> Speed4RatedWasteHeatFractionOfPowerInput { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bu" +
    "lb temperature (C) db = entering coil dry-bulb temperature (C)")]
[JsonProperty("speed_4_waste_heat_function_of_temperature_curve_name")]
public string Speed4WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"This input field is name of a conditioned or unconditioned zone where the secondary coil (evaporator) of a heat pump is to be placed. This is an optional input field specified only when user desires to extract heat from the zone. The heat extracted is modeled as internal heat gain of the zone. If the primary DX system is a heat pump, then the zone name should be the same as the zone name specified for placing the secondary cooling DX coil.")]
[JsonProperty("zone_name_for_evaporator_placement")]
public string ZoneNameForEvaporatorPlacement { get; set; } = "";
        

[Description("This input value is the secondary coil (evaporator) air flow rate when the heat p" +
    "ump is working in heating mode or the secondary DX coil (condenser) air flow rat" +
    "e when the heat pump is working in cooling mode.")]
[JsonProperty("speed_1_secondary_coil_air_flow_rate")]
public string Speed1SecondaryCoilAirFlowRate { get; set; } = "";
        

[Description(@"This input field is scaling factor for autosizing the secondary DX coil fan flow rate. The secondary air flow rate is determined by multiplying the primary DX coil rated air flow rate by the fan flow scaling factor. Default value is 1.25. If the secondary coil fan flow rate is not autosized, then the secondary coil fan flow scaling factor is set to 1.0.")]
[JsonProperty("speed_1_secondary_coil_fan_flow_scaling_factor")]
public System.Nullable<float> Speed1SecondaryCoilFanFlowScalingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1.25", CultureInfo.InvariantCulture);
        

[Description(@"This input value is the nominal sensible heat ratio used to split the heat extracted by a secondary DX coil (evaporator) of a heat pump into sensible and latent components. This is an optional input field. If this input field is left blank, then pure sensible internal heat gain is assumed, i.e., sensible heat ratio of 1.0.")]
[JsonProperty("speed_1_nominal_sensible_heat_ratio_of_secondary_coil")]
public System.Nullable<float> Speed1NominalSensibleHeatRatioOfSecondaryCoil { get; set; } = null;
        

[Description(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the secondary DX coil (C) db = entering dry-bulb temperature seen by the primary DX coil (C) This input field is name of sensible heat ratio modifier biquadratic curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary zone air node wet-bulb temperature and the heating DX coil entering air dry-bulb temperature. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified in the field above will be used.")]
[JsonProperty("speed_1_sensible_heat_ratio_modifier_function_of_temperature_curve_name")]
public string Speed1SensibleHeatRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = secondary air flow fraction of the full load flow This input field is name of sensible heat ratio modifier curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary coil air flow fraction. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified will be used.")]
[JsonProperty("speed_1_sensible_heat_ratio_modifier_function_of_flow_fraction_curve_name")]
public string Speed1SensibleHeatRatioModifierFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("This input value is the secondary coil (evaporator) air flow rate when the heat p" +
    "ump is working in heating mode or the secondary DX coil (condenser) air flow rat" +
    "e when the heat pump is working in cooling mode.")]
[JsonProperty("speed_2_secondary_coil_air_flow_rate")]
public string Speed2SecondaryCoilAirFlowRate { get; set; } = "";
        

[Description(@"This input field is scaling factor for autosizing the secondary DX coil fan flow rate. The secondary air flow rate is determined by multiplying the primary DX coil rated air flow rate by the fan flow scaling factor. Default value is 1.25. If the secondary coil fan flow rate is not autosized, then the secondary coil fan flow scaling factor is set to 1.0.")]
[JsonProperty("speed_2_secondary_coil_fan_flow_scaling_factor")]
public System.Nullable<float> Speed2SecondaryCoilFanFlowScalingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1.25", CultureInfo.InvariantCulture);
        

[Description(@"This input value is the nominal sensible heat ratio used to split the heat extracted by a secondary DX coil (evaporator) of a heat pump into sensible and latent components. This is an optional input field. If this input field is left blank, then pure sensible internal heat gain is assumed, i.e., sensible heat ratio of 1.0.")]
[JsonProperty("speed_2_nominal_sensible_heat_ratio_of_secondary_coil")]
public System.Nullable<float> Speed2NominalSensibleHeatRatioOfSecondaryCoil { get; set; } = null;
        

[Description(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the secondary DX coil (C) db = entering dry-bulb temperature seen by the primary DX coil (C) This input field is name of sensible heat ratio modifier biquadratic curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary zone air node wet-bulb temperature and the heating DX coil entering air dry-bulb temperature. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified in the field above will be used.")]
[JsonProperty("speed_2_sensible_heat_ratio_modifier_function_of_temperature_curve_name")]
public string Speed2SensibleHeatRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = secondary air flow fraction of the full load flow This input field is name of sensible heat ratio modifier curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary coil air flow fraction. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified will be used.")]
[JsonProperty("speed_2_sensible_heat_ratio_modifier_function_of_flow_fraction_curve_name")]
public string Speed2SensibleHeatRatioModifierFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("This input value is the secondary coil (evaporator) air flow rate when the heat p" +
    "ump is working in heating mode or the secondary DX coil (condenser) air flow rat" +
    "e when the heat pump is working in cooling mode.")]
[JsonProperty("speed_3_secondary_coil_air_flow_rate")]
public string Speed3SecondaryCoilAirFlowRate { get; set; } = "";
        

[Description(@"This input field is scaling factor for autosizing the secondary DX coil fan flow rate. The secondary air flow rate is determined by multiplying the primary DX coil rated air flow rate by the fan flow scaling factor. Default value is 1.25. If the secondary coil fan flow rate is not autosized, then the secondary coil fan flow scaling factor is set to 1.0.")]
[JsonProperty("speed_3_secondary_coil_fan_flow_scaling_factor")]
public System.Nullable<float> Speed3SecondaryCoilFanFlowScalingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1.25", CultureInfo.InvariantCulture);
        

[Description(@"This input value is the nominal sensible heat ratio used to split the heat extracted by a secondary DX coil (evaporator) of a heat pump into sensible and latent components. This is an optional input field. If this input field is left blank, then pure sensible internal heat gain is assumed, i.e., sensible heat ratio of 1.0.")]
[JsonProperty("speed_3_nominal_sensible_heat_ratio_of_secondary_coil")]
public System.Nullable<float> Speed3NominalSensibleHeatRatioOfSecondaryCoil { get; set; } = null;
        

[Description(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the secondary DX coil (C) db = entering dry-bulb temperature seen by the primary DX coil (C) This input field is name of sensible heat ratio modifier biquadratic curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary zone air node wet-bulb temperature and the heating DX coil entering air dry-bulb temperature. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified in the field above will be used.")]
[JsonProperty("speed_3_sensible_heat_ratio_modifier_function_of_temperature_curve_name")]
public string Speed3SensibleHeatRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = secondary air flow fraction of the full load flow This input field is name of sensible heat ratio modifier curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary coil air flow fraction. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified will be used.")]
[JsonProperty("speed_3_sensible_heat_ratio_modifier_function_of_flow_fraction_curve_name")]
public string Speed3SensibleHeatRatioModifierFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("This input value is the secondary coil (evaporator) air flow rate when the heat p" +
    "ump is working in heating mode or the secondary DX coil (condenser) air flow rat" +
    "e when the heat pump is working in cooling mode.")]
[JsonProperty("speed_4_secondary_coil_air_flow_rate")]
public string Speed4SecondaryCoilAirFlowRate { get; set; } = "";
        

[Description(@"This input field is scaling factor for autosizing the secondary DX coil fan flow rate. The secondary air flow rate is determined by multiplying the primary DX coil rated air flow rate by the fan flow scaling factor. Default value is 1.25. If the secondary coil fan flow rate is not autosized, then the secondary coil fan flow scaling factor is set to 1.0.")]
[JsonProperty("speed_4_secondary_coil_fan_flow_scaling_factor")]
public System.Nullable<float> Speed4SecondaryCoilFanFlowScalingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1.25", CultureInfo.InvariantCulture);
        

[Description(@"This input value is the nominal sensible heat ratio used to split the heat extracted by a secondary DX coil (evaporator) of a heat pump into sensible and latent components. This is an optional input field. If this input field is left blank, then pure sensible internal heat gain is assumed, i.e., sensible heat ratio of 1.0.")]
[JsonProperty("speed_4_nominal_sensible_heat_ratio_of_secondary_coil")]
public System.Nullable<float> Speed4NominalSensibleHeatRatioOfSecondaryCoil { get; set; } = null;
        

[Description(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the secondary DX coil (C) db = entering dry-bulb temperature seen by the primary DX coil (C) This input field is name of sensible heat ratio modifier biquadratic curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary zone air node wet-bulb temperature and the heating DX coil entering air dry-bulb temperature. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified in the field above will be used.")]
[JsonProperty("speed_4_sensible_heat_ratio_modifier_function_of_temperature_curve_name")]
public string Speed4SensibleHeatRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = secondary air flow fraction of the full load flow This input field is name of sensible heat ratio modifier curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary coil air flow fraction. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified will be used.")]
[JsonProperty("speed_4_sensible_heat_ratio_modifier_function_of_flow_fraction_curve_name")]
public string Speed4SensibleHeatRatioModifierFunctionOfFlowFractionCurveName { get; set; } = "";
    }
    
    public enum Coil_Heating_DX_MultiSpeed_DefrostStrategy
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Resistive")]
        Resistive = 1,
        
        [JsonProperty("ReverseCycle")]
        ReverseCycle = 2,
    }
    
    public enum Coil_Heating_DX_MultiSpeed_DefrostControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("OnDemand")]
        OnDemand = 1,
        
        [JsonProperty("Timed")]
        Timed = 2,
    }
    
    public enum Coil_Heating_DX_MultiSpeed_FuelType
    {
        
        [JsonProperty("Diesel")]
        Diesel = 0,
        
        [JsonProperty("Electricity")]
        Electricity = 1,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 2,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 3,
        
        [JsonProperty("Gasoline")]
        Gasoline = 4,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 5,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 6,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 7,
        
        [JsonProperty("Propane")]
        Propane = 8,
    }
    
    [Description("Direct expansion (DX) heating coil (air-to-air heat pump) and compressor unit (in" +
        "cludes electric compressor and outdoor fan), variable-speed, with defrost contro" +
        "ls. Requires two to ten sets of performance data and will interpolate between sp" +
        "eeds.")]
    [JsonObject("Coil:Heating:DX:VariableSpeed")]
    public class Coil_Heating_DX_VariableSpeed : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("indoor_air_inlet_node_name")]
public string IndoorAirInletNodeName { get; set; } = "";
        

[JsonProperty("indoor_air_outlet_node_name")]
public string IndoorAirOutletNodeName { get; set; } = "";
        

[JsonProperty("number_of_speeds")]
public System.Nullable<float> NumberOfSpeeds { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description("must be lower than or equal to the highest speed number")]
[JsonProperty("nominal_speed_level")]
public System.Nullable<float> NominalSpeedLevel { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[JsonProperty("rated_heating_capacity_at_selected_nominal_speed_level")]
public string RatedHeatingCapacityAtSelectedNominalSpeedLevel { get; set; } = (System.String)"Autosize";
        

[JsonProperty("rated_air_flow_rate_at_selected_nominal_speed_level")]
public string RatedAirFlowRateAtSelectedNominalSpeedLevel { get; set; } = (System.String)"Autosize";
        

[Description("quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR" +
    "**3 PLR = part load ratio (heating load/steady state capacity)")]
[JsonProperty("energy_part_load_fraction_curve_name")]
public string EnergyPartLoadFractionCurveName { get; set; } = "";
        

[Description("biquadratic curve = a + b*wb + c*wb**2 + d*oat + e*oat**2 + f*wb*oat wb = wet-bul" +
    "b temperature (C) of air entering the indoor coil oat = outdoor air dry-bulb tem" +
    "perature (C) only required if ReverseCycle defrost strategy is specified")]
[JsonProperty("defrost_energy_input_ratio_function_of_temperature_curve_name")]
public string DefrostEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[JsonProperty("minimum_outdoor_dry_bulb_temperature_for_compressor_operation")]
public System.Nullable<float> MinimumOutdoorDryBulbTemperatureForCompressorOperation { get; set; } = (System.Nullable<float>)Single.Parse("-8", CultureInfo.InvariantCulture);
        

[Description(@"The outdoor temperature when the compressor is automatically turned back on following an automatic shut off because of low outdoor dry-bulb temperature. This field is only used for the calculation of HSPF. If this field is not provided, then outdoor bin temperature used in the HSPF calculation is always considered to be greater than this temperature and 'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation' field described above. This assumption is based on AHRI standard 210/240 (2008) and can introduce significant error in the final value of HSPF.")]
[JsonProperty("outdoor_dry_bulb_temperature_to_turn_on_compressor")]
public System.Nullable<float> OutdoorDryBulbTemperatureToTurnOnCompressor { get; set; } = null;
        

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_defrost_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForDefrostOperation { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[JsonProperty("crankcase_heater_capacity")]
public System.Nullable<float> CrankcaseHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[JsonProperty("defrost_strategy")]
public Coil_Heating_DX_VariableSpeed_DefrostStrategy DefrostStrategy { get; set; } = (Coil_Heating_DX_VariableSpeed_DefrostStrategy)Enum.Parse(typeof(Coil_Heating_DX_VariableSpeed_DefrostStrategy), "ReverseCycle");
        

[JsonProperty("defrost_control")]
public Coil_Heating_DX_VariableSpeed_DefrostControl DefrostControl { get; set; } = (Coil_Heating_DX_VariableSpeed_DefrostControl)Enum.Parse(typeof(Coil_Heating_DX_VariableSpeed_DefrostControl), "Timed");
        

[Description("Fraction of time in defrost mode only applicable if timed defrost control is spec" +
    "ified")]
[JsonProperty("defrost_time_period_fraction")]
public System.Nullable<float> DefrostTimePeriodFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.058333", CultureInfo.InvariantCulture);
        

[Description("only applicable if resistive defrost strategy is specified")]
[JsonProperty("resistive_defrost_heater_capacity")]
public string ResistiveDefrostHeaterCapacity { get; set; } = (System.String)"0";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_1_reference_unit_gross_rated_heating_capacity")]
public System.Nullable<float> Speed1ReferenceUnitGrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("speed_1_reference_unit_gross_rated_heating_cop")]
public System.Nullable<float> Speed1ReferenceUnitGrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("speed_1_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed1ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[Description("curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bu" +
    "lb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_1_heating_capacity_function_of_temperature_curve_name")]
public string Speed1HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed1TotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bu" +
    "lb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_1_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed1EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed1EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_2_reference_unit_gross_rated_heating_capacity")]
public System.Nullable<float> Speed2ReferenceUnitGrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("speed_2_reference_unit_gross_rated_heating_cop")]
public System.Nullable<float> Speed2ReferenceUnitGrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("speed_2_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed2ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[Description("curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bu" +
    "lb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_2_heating_capacity_function_of_temperature_curve_name")]
public string Speed2HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed2TotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bu" +
    "lb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_2_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed2EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed2EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_3_reference_unit_gross_rated_heating_capacity")]
public System.Nullable<float> Speed3ReferenceUnitGrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("speed_3_reference_unit_gross_rated_heating_cop")]
public System.Nullable<float> Speed3ReferenceUnitGrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("speed_3_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed3ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[Description("curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bu" +
    "lb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_3_heating_capacity_function_of_temperature_curve_name")]
public string Speed3HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed3TotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bu" +
    "lb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_3_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed3EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed3EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_4_reference_unit_gross_rated_heating_capacity")]
public System.Nullable<float> Speed4ReferenceUnitGrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("speed_4_reference_unit_gross_rated_heating_cop")]
public System.Nullable<float> Speed4ReferenceUnitGrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("speed_4_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed4ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[Description("curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bu" +
    "lb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_4_heating_capacity_function_of_temperature_curve_name")]
public string Speed4HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_4_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed4HeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bu" +
    "lb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_4_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed4EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed4EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_5_reference_unit_gross_rated_heating_capacity")]
public System.Nullable<float> Speed5ReferenceUnitGrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("speed_5_reference_unit_gross_rated_heating_cop")]
public System.Nullable<float> Speed5ReferenceUnitGrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("speed_5_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed5ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[Description("curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bu" +
    "lb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_5_heating_capacity_function_of_temperature_curve_name")]
public string Speed5HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_5_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed5HeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bu" +
    "lb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_5_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed5EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed5EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_6_reference_unit_gross_rated_heating_capacity")]
public System.Nullable<float> Speed6ReferenceUnitGrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("speed_6_reference_unit_gross_rated_heating_cop")]
public System.Nullable<float> Speed6ReferenceUnitGrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("speed_6_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed6ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[Description("curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bu" +
    "lb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_6_heating_capacity_function_of_temperature_curve_name")]
public string Speed6HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_6_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed6HeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bu" +
    "lb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_6_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed6EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed6EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_7_reference_unit_gross_rated_heating_capacity")]
public System.Nullable<float> Speed7ReferenceUnitGrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("speed_7_reference_unit_gross_rated_heating_cop")]
public System.Nullable<float> Speed7ReferenceUnitGrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("speed_7_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed7ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[Description("curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bu" +
    "lb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_7_heating_capacity_function_of_temperature_curve_name")]
public string Speed7HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_7_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed7HeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bu" +
    "lb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_7_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed7EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed7EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_8_reference_unit_gross_rated_heating_capacity")]
public System.Nullable<float> Speed8ReferenceUnitGrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("speed_8_reference_unit_gross_rated_heating_cop")]
public System.Nullable<float> Speed8ReferenceUnitGrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("speed_8_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed8ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[Description("curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bu" +
    "lb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_8_heating_capacity_function_of_temperature_curve_name")]
public string Speed8HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_8_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed8HeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bu" +
    "lb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_8_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed8EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed8EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_9_reference_unit_gross_rated_heating_capacity")]
public System.Nullable<float> Speed9ReferenceUnitGrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("speed_9_reference_unit_gross_rated_heating_cop")]
public System.Nullable<float> Speed9ReferenceUnitGrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("speed_9_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed9ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[Description("curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bu" +
    "lb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_9_heating_capacity_function_of_temperature_curve_name")]
public string Speed9HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_9_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed9HeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bu" +
    "lb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_9_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed9EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed9EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_10_reference_unit_gross_rated_heating_capacity")]
public System.Nullable<float> Speed10ReferenceUnitGrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("speed_10_reference_unit_gross_rated_heating_cop")]
public System.Nullable<float> Speed10ReferenceUnitGrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("speed_10_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed10ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[Description("curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bu" +
    "lb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_10_heating_capacity_function_of_temperature_curve_name")]
public string Speed10HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_10_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed10HeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bu" +
    "lb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_10_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed10EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed10EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
    }
    
    public enum Coil_Heating_DX_VariableSpeed_DefrostStrategy
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Resistive")]
        Resistive = 1,
        
        [JsonProperty("ReverseCycle")]
        ReverseCycle = 2,
    }
    
    public enum Coil_Heating_DX_VariableSpeed_DefrostControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("OnDemand")]
        OnDemand = 1,
        
        [JsonProperty("Timed")]
        Timed = 2,
    }
    
    [Description(@"Direct expansion (DX) cooling coil for water-to-air heat pump (includes electric compressor), single-speed, parameter estimation model. Optional inputs for moisture evaporation from wet coil when compressor cycles off with continuous fan operation. Parameter estimation model is a deterministic model that requires a consistent set of parameters to describe the operating conditions of the heat pump components.")]
    [JsonObject("Coil:Cooling:WaterToAirHeatPump:ParameterEstimation")]
    public class Coil_Cooling_WaterToAirHeatPump_ParameterEstimation : BHoMObject, IEnergyPlusClass
    {
        

[Description("Parameters 1-5 are as named below. Parameters 6-10 depend on the type of compress" +
    "or and fluid. Refer to the InputOutputReference on the parameters required")]
[JsonProperty("compressor_type")]
public Coil_Cooling_WaterToAirHeatPump_ParameterEstimation_CompressorType CompressorType { get; set; } = (Coil_Cooling_WaterToAirHeatPump_ParameterEstimation_CompressorType)Enum.Parse(typeof(Coil_Cooling_WaterToAirHeatPump_ParameterEstimation_CompressorType), "Reciprocating");
        

[JsonProperty("refrigerant_type")]
public string RefrigerantType { get; set; } = (System.String)"R22";
        

[JsonProperty("design_source_side_flow_rate")]
public System.Nullable<float> DesignSourceSideFlowRate { get; set; } = null;
        

[JsonProperty("nominal_cooling_coil_capacity")]
public System.Nullable<float> NominalCoolingCoilCapacity { get; set; } = null;
        

[Description(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
[JsonProperty("nominal_time_for_condensate_removal_to_begin")]
public System.Nullable<float> NominalTimeForCondensateRemovalToBegin { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
[JsonProperty("ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity")]
public System.Nullable<float> RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("high_pressure_cutoff")]
public System.Nullable<float> HighPressureCutoff { get; set; } = null;
        

[JsonProperty("low_pressure_cutoff")]
public System.Nullable<float> LowPressureCutoff { get; set; } = null;
        

[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[JsonProperty("water_outlet_node_name")]
public string WaterOutletNodeName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Previously called Parameter 1")]
[JsonProperty("load_side_total_heat_transfer_coefficient")]
public System.Nullable<float> LoadSideTotalHeatTransferCoefficient { get; set; } = null;
        

[Description("Previously called Parameter 2")]
[JsonProperty("load_side_outside_surface_heat_transfer_coefficient")]
public System.Nullable<float> LoadSideOutsideSurfaceHeatTransferCoefficient { get; set; } = null;
        

[Description("Previously called Parameter 3")]
[JsonProperty("superheat_temperature_at_the_evaporator_outlet")]
public System.Nullable<float> SuperheatTemperatureAtTheEvaporatorOutlet { get; set; } = null;
        

[Description("Accounts for the loss of work due to mechanical and electrical losses in the comp" +
    "ressor. Previously called Parameter 4")]
[JsonProperty("compressor_power_losses")]
public System.Nullable<float> CompressorPowerLosses { get; set; } = null;
        

[Description("Previously called Parameter 5")]
[JsonProperty("compressor_efficiency")]
public System.Nullable<float> CompressorEfficiency { get; set; } = null;
        

[Description("Use when Compressor Type is Reciprocating or Rotary Leave this field blank for Co" +
    "mpressor Type is Scroll. Previously part of Parameter 6")]
[JsonProperty("compressor_piston_displacement")]
public System.Nullable<float> CompressorPistonDisplacement { get; set; } = null;
        

[Description("Used when Compressor Type is Rotary or Reciprocating Leave this field blank for C" +
    "ompressor Type is Scroll. Previously part of Parameter 7")]
[JsonProperty("compressor_suction_discharge_pressure_drop")]
public System.Nullable<float> CompressorSuctionDischargePressureDrop { get; set; } = null;
        

[Description("Used when Compressor Type is Reciprocating. Leave this field blank for Compressor" +
    " Type is Rotary or Scroll. Previously part of Parameter 8")]
[JsonProperty("compressor_clearance_factor")]
public System.Nullable<float> CompressorClearanceFactor { get; set; } = null;
        

[Description("Use when Compressor Type is Scroll Leave this field blank for Compressor Type is " +
    "Rotary or Reciprocating. Previously part of Parameter 6")]
[JsonProperty("refrigerant_volume_flow_rate")]
public System.Nullable<float> RefrigerantVolumeFlowRate { get; set; } = null;
        

[Description("Use when Compressor Type is Scroll. Leave this field blank for Compressor Type is" +
    " Rotary or Reciprocating. Previously part of Parameter 7")]
[JsonProperty("volume_ratio")]
public System.Nullable<float> VolumeRatio { get; set; } = null;
        

[Description("Use when Compressor Type is Scroll. Leave this field blank for Compressor Type is" +
    " Rotary or Reciprocating. Previously part of Parameter 8")]
[JsonProperty("leak_rate_coefficient")]
public System.Nullable<float> LeakRateCoefficient { get; set; } = null;
        

[Description("Use when Source Side Fluid Name is Water Leave this field blank when Source Side " +
    "Fluid Name is an antifreeze Previously part of Parameter 9")]
[JsonProperty("source_side_heat_transfer_coefficient")]
public System.Nullable<float> SourceSideHeatTransferCoefficient { get; set; } = null;
        

[Description("Use when Source Side Fluid Name is an antifreeze Leave this field blank for Sourc" +
    "e Side Fluid is Water Previously part of Parameter 9")]
[JsonProperty("source_side_heat_transfer_resistance1")]
public System.Nullable<float> SourceSideHeatTransferResistance1 { get; set; } = null;
        

[Description("Use when Source Side Fluid Name is an antifreeze Leave this field blank for Sourc" +
    "e Side Fluid is Water Previously part of Parameter 10")]
[JsonProperty("source_side_heat_transfer_resistance2")]
public System.Nullable<float> SourceSideHeatTransferResistance2 { get; set; } = null;
    }
    
    public enum Coil_Cooling_WaterToAirHeatPump_ParameterEstimation_CompressorType
    {
        
        [JsonProperty("Reciprocating")]
        Reciprocating = 0,
        
        [JsonProperty("Rotary")]
        Rotary = 1,
        
        [JsonProperty("Scroll")]
        Scroll = 2,
    }
    
    [Description(@"Direct expansion (DX) heating coil for water-to-air heat pump (includes electric compressor), single-speed, parameter estimation model. Parameter estimation model is a deterministic model that requires a consistent set of parameters to describe the operating conditions of the heat pump components.")]
    [JsonObject("Coil:Heating:WaterToAirHeatPump:ParameterEstimation")]
    public class Coil_Heating_WaterToAirHeatPump_ParameterEstimation : BHoMObject, IEnergyPlusClass
    {
        

[Description("Parameters 1-4 are as named below. Parameters 5-9 depend on the type of compresso" +
    "r. Refer to the InputOutputReference on the parameters required")]
[JsonProperty("compressor_type")]
public Coil_Heating_WaterToAirHeatPump_ParameterEstimation_CompressorType CompressorType { get; set; } = (Coil_Heating_WaterToAirHeatPump_ParameterEstimation_CompressorType)Enum.Parse(typeof(Coil_Heating_WaterToAirHeatPump_ParameterEstimation_CompressorType), "Reciprocating");
        

[JsonProperty("refrigerant_type")]
public string RefrigerantType { get; set; } = (System.String)"R22";
        

[JsonProperty("design_source_side_flow_rate")]
public System.Nullable<float> DesignSourceSideFlowRate { get; set; } = null;
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("gross_rated_heating_capacity")]
public System.Nullable<float> GrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("high_pressure_cutoff")]
public System.Nullable<float> HighPressureCutoff { get; set; } = null;
        

[JsonProperty("low_pressure_cutoff")]
public System.Nullable<float> LowPressureCutoff { get; set; } = null;
        

[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[JsonProperty("water_outlet_node_name")]
public string WaterOutletNodeName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Previously called Parameter 1")]
[JsonProperty("load_side_total_heat_transfer_coefficient")]
public System.Nullable<float> LoadSideTotalHeatTransferCoefficient { get; set; } = null;
        

[Description("Previously called Parameter 2")]
[JsonProperty("superheat_temperature_at_the_evaporator_outlet")]
public System.Nullable<float> SuperheatTemperatureAtTheEvaporatorOutlet { get; set; } = null;
        

[Description("Accounts for the loss of work due to mechanical and electrical losses in the comp" +
    "ressor. Previously called Parameter 3")]
[JsonProperty("compressor_power_losses")]
public System.Nullable<float> CompressorPowerLosses { get; set; } = null;
        

[Description("Previously called Parameter 4")]
[JsonProperty("compressor_efficiency")]
public System.Nullable<float> CompressorEfficiency { get; set; } = null;
        

[Description("Use when Compressor Type is Reciprocating or Rotary Leave this field blank for Co" +
    "mpressor Type is Scroll. Previously part of Parameter 5")]
[JsonProperty("compressor_piston_displacement")]
public System.Nullable<float> CompressorPistonDisplacement { get; set; } = null;
        

[Description("Used when Compressor Type is Rotary or Reciprocating Leave this field blank for C" +
    "ompressor Type is Scroll. Previously part of Parameter 6")]
[JsonProperty("compressor_suction_discharge_pressure_drop")]
public System.Nullable<float> CompressorSuctionDischargePressureDrop { get; set; } = null;
        

[Description("Used when Compressor Type is Reciprocating. Leave this field blank for Compressor" +
    " Type is Rotary or Scroll. Previously part of Parameter 7")]
[JsonProperty("compressor_clearance_factor")]
public System.Nullable<float> CompressorClearanceFactor { get; set; } = null;
        

[Description("Use when Compressor Type is Scroll Leave this field blank for Compressor Type is " +
    "Rotary or Reciprocating. Previously part of Parameter 5")]
[JsonProperty("refrigerant_volume_flow_rate")]
public System.Nullable<float> RefrigerantVolumeFlowRate { get; set; } = null;
        

[Description("Use when Compressor Type is Scroll. Leave this field blank for Compressor Type is" +
    " Rotary or Reciprocating. Previously part of Parameter 6")]
[JsonProperty("volume_ratio")]
public System.Nullable<float> VolumeRatio { get; set; } = null;
        

[Description("Use when Compressor Type is Scroll. Leave this field blank for Compressor Type is" +
    " Rotary or Reciprocating. Previously part of Parameter 7")]
[JsonProperty("leak_rate_coefficient")]
public System.Nullable<float> LeakRateCoefficient { get; set; } = null;
        

[Description("Use when Source Side Fluid Name is Water Leave this field blank when Source Side " +
    "Fluid is an antifreeze Previously part of Parameter 8")]
[JsonProperty("source_side_heat_transfer_coefficient")]
public System.Nullable<float> SourceSideHeatTransferCoefficient { get; set; } = null;
        

[Description("Use when Source Side Fluid Name is an antifreeze Leave this field blank for Sourc" +
    "e Side Fluid is Water Previously part of Parameter 8")]
[JsonProperty("source_side_heat_transfer_resistance1")]
public System.Nullable<float> SourceSideHeatTransferResistance1 { get; set; } = null;
        

[Description("Use when Source Side Fluid Name is an antifreeze Leave this field blank for Sourc" +
    "e Side Fluid is Water Previously part of Parameter 9")]
[JsonProperty("source_side_heat_transfer_resistance2")]
public System.Nullable<float> SourceSideHeatTransferResistance2 { get; set; } = null;
    }
    
    public enum Coil_Heating_WaterToAirHeatPump_ParameterEstimation_CompressorType
    {
        
        [JsonProperty("Reciprocating")]
        Reciprocating = 0,
        
        [JsonProperty("Rotary")]
        Rotary = 1,
        
        [JsonProperty("Scroll")]
        Scroll = 2,
    }
    
    [Description(@"Direct expansion (DX) cooling coil for water-to-air heat pump (includes electric compressor), single-speed, equation-fit model. Optional inputs for moisture evaporation from wet coil when compressor cycles off with continuous fan operation. Equation-fit model uses normalized curves to describe the heat pump performance.")]
    [JsonObject("Coil:Cooling:WaterToAirHeatPump:EquationFit")]
    public class Coil_Cooling_WaterToAirHeatPump_EquationFit : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[JsonProperty("water_outlet_node_name")]
public string WaterOutletNodeName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("rated_air_flow_rate")]
public string RatedAirFlowRate { get; set; } = "";
        

[JsonProperty("rated_water_flow_rate")]
public string RatedWaterFlowRate { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("gross_rated_total_cooling_capacity")]
public string GrossRatedTotalCoolingCapacity { get; set; } = "";
        

[JsonProperty("gross_rated_sensible_cooling_capacity")]
public string GrossRatedSensibleCoolingCapacity { get; set; } = "";
        

[JsonProperty("gross_rated_cooling_cop")]
public System.Nullable<float> GrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("total_cooling_capacity_curve_name")]
public string TotalCoolingCapacityCurveName { get; set; } = "";
        

[JsonProperty("sensible_cooling_capacity_curve_name")]
public string SensibleCoolingCapacityCurveName { get; set; } = "";
        

[JsonProperty("cooling_power_consumption_curve_name")]
public string CoolingPowerConsumptionCurveName { get; set; } = "";
        

[Description(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
[JsonProperty("nominal_time_for_condensate_removal_to_begin")]
public System.Nullable<float> NominalTimeForCondensateRemovalToBegin { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
[JsonProperty("ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity")]
public System.Nullable<float> RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    [Description(@"Direct expansion (DX) cooling coil for water-to-air heat pump (includes electric compressor), variable-speed, equation-fit model. Optional inputs for moisture evaporation from wet coil when compressor cycles off with continuous fan operation. Equation-fit model uses normalized curves to describe the heat pump performance. Requires two to ten sets of performance data and will interpolate between speeds. Modeled as a single coil with variable-speed compressor.")]
    [JsonObject("Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit")]
    public class Coil_Cooling_WaterToAirHeatPump_VariableSpeedEquationFit : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("water_to_refrigerant_hx_water_inlet_node_name")]
public string WaterToRefrigerantHxWaterInletNodeName { get; set; } = "";
        

[JsonProperty("water_to_refrigerant_hx_water_outlet_node_name")]
public string WaterToRefrigerantHxWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("indoor_air_inlet_node_name")]
public string IndoorAirInletNodeName { get; set; } = "";
        

[JsonProperty("indoor_air_outlet_node_name")]
public string IndoorAirOutletNodeName { get; set; } = "";
        

[JsonProperty("number_of_speeds")]
public System.Nullable<float> NumberOfSpeeds { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description("must be lower than or equal to the highest speed number")]
[JsonProperty("nominal_speed_level")]
public System.Nullable<float> NominalSpeedLevel { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("gross_rated_total_cooling_capacity_at_selected_nominal_speed_level")]
public string GrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel { get; set; } = (System.String)"Autosize";
        

[JsonProperty("rated_air_flow_rate_at_selected_nominal_speed_level")]
public string RatedAirFlowRateAtSelectedNominalSpeedLevel { get; set; } = (System.String)"Autosize";
        

[JsonProperty("rated_water_flow_rate_at_selected_nominal_speed_level")]
public string RatedWaterFlowRateAtSelectedNominalSpeedLevel { get; set; } = (System.String)"Autosize";
        

[JsonProperty("nominal_time_for_condensate_to_begin_leaving_the_coil")]
public System.Nullable<float> NominalTimeForCondensateToBeginLeavingTheCoil { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("initial_moisture_evaporation_rate_divided_by_steady_state_ac_latent_capacity")]
public System.Nullable<float> InitialMoistureEvaporationRateDividedBySteadyStateAcLatentCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Flag for using hot gas reheat, 0 - not used, 1 - used")]
[JsonProperty("flag_for_using_hot_gas_reheat_0_or_1")]
public System.Nullable<float> FlagForUsingHotGasReheat0Or1 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR" +
    "**3 PLR = part load ratio (cooling load/steady state capacity)")]
[JsonProperty("energy_part_load_fraction_curve_name")]
public string EnergyPartLoadFractionCurveName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_1_reference_unit_gross_rated_total_cooling_capacity")]
public System.Nullable<float> Speed1ReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = null;
        

[JsonProperty("speed_1_reference_unit_gross_rated_sensible_heat_ratio")]
public System.Nullable<float> Speed1ReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = null;
        

[JsonProperty("speed_1_reference_unit_gross_rated_cooling_cop")]
public System.Nullable<float> Speed1ReferenceUnitGrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("speed_1_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed1ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_1_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed1ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[Description("curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb t" +
    "emperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_1_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed1TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed1TotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw" +
    "**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_1_total_cooling_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed1TotalCoolingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb t" +
    "emperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_1_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed1EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed1EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw" +
    "**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string Speed1EnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public System.Nullable<float> Speed1ReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = null;
        

[Description("curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb t" +
    "emperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_1_waste_heat_function_of_temperature_curve_name")]
public string Speed1WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_2_reference_unit_gross_rated_total_cooling_capacity")]
public System.Nullable<float> Speed2ReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = null;
        

[JsonProperty("speed_2_reference_unit_gross_rated_sensible_heat_ratio")]
public System.Nullable<float> Speed2ReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = null;
        

[JsonProperty("speed_2_reference_unit_gross_rated_cooling_cop")]
public System.Nullable<float> Speed2ReferenceUnitGrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("speed_2_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed2ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_2_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed2ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[Description("curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb t" +
    "emperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_2_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed2TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed2TotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw" +
    "**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_2_total_cooling_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed2TotalCoolingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*wb + c*wb**2 + d*ewet + e*ewt**2 + f*wb*ewt wb = entering wet-bulb " +
    "temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_2_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed2EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed2EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw" +
    "**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string Speed2EnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public System.Nullable<float> Speed2ReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = null;
        

[Description("curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb t" +
    "emperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_2_waste_heat_function_of_temperature_curve_name")]
public string Speed2WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_3_reference_unit_gross_rated_total_cooling_capacity")]
public System.Nullable<float> Speed3ReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = null;
        

[JsonProperty("speed_3_reference_unit_gross_rated_sensible_heat_ratio")]
public System.Nullable<float> Speed3ReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = null;
        

[JsonProperty("speed_3_reference_unit_gross_rated_cooling_cop")]
public System.Nullable<float> Speed3ReferenceUnitGrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("speed_3_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed3ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_3_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed3ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_3_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed3TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed3TotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_3_total_cooling_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed3TotalCoolingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_3_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed3EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed3EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string Speed3EnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public System.Nullable<float> Speed3ReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = null;
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_3_waste_heat_function_of_temperature_curve_name")]
public string Speed3WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_4_reference_unit_gross_rated_total_cooling_capacity")]
public System.Nullable<float> Speed4ReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = null;
        

[JsonProperty("speed_4_reference_unit_gross_rated_sensible_heat_ratio")]
public System.Nullable<float> Speed4ReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = null;
        

[JsonProperty("speed_4_reference_unit_gross_rated_cooling_cop")]
public System.Nullable<float> Speed4ReferenceUnitGrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("speed_4_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed4ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_4_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed4ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_4_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed4TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed4TotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_4_total_cooling_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed4TotalCoolingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_4_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed4EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed4EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string Speed4EnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public System.Nullable<float> Speed4ReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = null;
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_4_waste_heat_function_of_temperature_curve_name")]
public string Speed4WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_5_reference_unit_gross_rated_total_cooling_capacity")]
public System.Nullable<float> Speed5ReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = null;
        

[JsonProperty("speed_5_reference_unit_gross_rated_sensible_heat_ratio")]
public System.Nullable<float> Speed5ReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = null;
        

[JsonProperty("speed_5_reference_unit_gross_rated_cooling_cop")]
public System.Nullable<float> Speed5ReferenceUnitGrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("speed_5_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed5ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_5_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed5ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_5_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed5TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed5TotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_5_total_cooling_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed5TotalCoolingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_5_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed5EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed5EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string Speed5EnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public System.Nullable<float> Speed5ReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = null;
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_5_waste_heat_function_of_temperature_curve_name")]
public string Speed5WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_6_reference_unit_gross_rated_total_cooling_capacity")]
public System.Nullable<float> Speed6ReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = null;
        

[JsonProperty("speed_6_reference_unit_gross_rated_sensible_heat_ratio")]
public System.Nullable<float> Speed6ReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = null;
        

[JsonProperty("speed_6_reference_unit_gross_rated_cooling_cop")]
public System.Nullable<float> Speed6ReferenceUnitGrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("speed_6_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed6ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_6_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed6ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_6_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed6TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed6TotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_6_total_cooling_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed6TotalCoolingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_6_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed6EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed6EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string Speed6EnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public System.Nullable<float> Speed6ReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = null;
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_6_waste_heat_function_of_temperature_curve_name")]
public string Speed6WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_7_reference_unit_gross_rated_total_cooling_capacity")]
public System.Nullable<float> Speed7ReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = null;
        

[JsonProperty("speed_7_reference_unit_gross_rated_sensible_heat_ratio")]
public System.Nullable<float> Speed7ReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = null;
        

[JsonProperty("speed_7_reference_unit_gross_rated_cooling_cop")]
public System.Nullable<float> Speed7ReferenceUnitGrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("speed_7_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed7ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_7_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed7ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_7_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed7TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed7TotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_7_total_cooling_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed7TotalCoolingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_7_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed7EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed7EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string Speed7EnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public System.Nullable<float> Speed7ReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = null;
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_7_waste_heat_function_of_temperature_curve_name")]
public string Speed7WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_8_reference_unit_gross_rated_total_cooling_capacity")]
public System.Nullable<float> Speed8ReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = null;
        

[JsonProperty("speed_8_reference_unit_gross_rated_sensible_heat_ratio")]
public System.Nullable<float> Speed8ReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = null;
        

[JsonProperty("speed_8_reference_unit_gross_rated_cooling_cop")]
public System.Nullable<float> Speed8ReferenceUnitGrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("speed_8_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed8ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_8_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed8ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_8_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed8TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed8TotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_8_total_cooling_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed8TotalCoolingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_8_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed8EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed8EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string Speed8EnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public System.Nullable<float> Speed8ReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = null;
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_8_waste_heat_function_of_temperature_curve_name")]
public string Speed8WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_9_reference_unit_gross_rated_total_cooling_capacity")]
public System.Nullable<float> Speed9ReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = null;
        

[JsonProperty("speed_9_reference_unit_gross_rated_sensible_heat_ratio")]
public System.Nullable<float> Speed9ReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = null;
        

[JsonProperty("speed_9_reference_unit_gross_rated_cooling_cop")]
public System.Nullable<float> Speed9ReferenceUnitGrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("speed_9_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed9ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_9_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed9ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_9_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed9TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed9TotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_9_total_cooling_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed9TotalCoolingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_9_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed9EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed9EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string Speed9EnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public System.Nullable<float> Speed9ReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = null;
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_9_waste_heat_function_of_temperature_curve_name")]
public string Speed9WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_10_reference_unit_gross_rated_total_cooling_capacity")]
public System.Nullable<float> Speed10ReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = null;
        

[JsonProperty("speed_10_reference_unit_gross_rated_sensible_heat_ratio")]
public System.Nullable<float> Speed10ReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = null;
        

[JsonProperty("speed_10_reference_unit_gross_rated_cooling_cop")]
public System.Nullable<float> Speed10ReferenceUnitGrossRatedCoolingCop { get; set; } = null;
        

[JsonProperty("speed_10_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed10ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_10_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed10ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_10_total_cooling_capacity_function_of_temperature_curve_name")]
public string Speed10TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed10TotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_10_total_cooling_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed10TotalCoolingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_10_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed10EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed10EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string Speed10EnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public System.Nullable<float> Speed10ReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = null;
        

[Description("optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering w" +
    "et-bulb temperature (C) ewt = water entering temperature seen by the condenser (" +
    "C)")]
[JsonProperty("speed_10_waste_heat_function_of_temperature_curve_name")]
public string Speed10WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
    }
    
    [Description("Direct expansion (DX) heating coil for water-to-air heat pump (includes electric " +
        "compressor), single-speed, equation-fit model. Equation-fit model uses normalize" +
        "d curves to describe the heat pump performance.")]
    [JsonObject("Coil:Heating:WaterToAirHeatPump:EquationFit")]
    public class Coil_Heating_WaterToAirHeatPump_EquationFit : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[JsonProperty("water_outlet_node_name")]
public string WaterOutletNodeName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("rated_air_flow_rate")]
public string RatedAirFlowRate { get; set; } = "";
        

[JsonProperty("rated_water_flow_rate")]
public string RatedWaterFlowRate { get; set; } = "";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("gross_rated_heating_capacity")]
public string GrossRatedHeatingCapacity { get; set; } = "";
        

[JsonProperty("gross_rated_heating_cop")]
public System.Nullable<float> GrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("heating_capacity_curve_name")]
public string HeatingCapacityCurveName { get; set; } = "";
        

[JsonProperty("heating_power_consumption_curve_name")]
public string HeatingPowerConsumptionCurveName { get; set; } = "";
    }
    
    [Description(@"Direct expansion (DX) heating coil for water-to-air heat pump (includes electric compressor), variable-speed, equation-fit model. Equation-fit model uses normalized curves to describe the heat pump performance. Requires two to ten sets of performance data and will interpolate between speeds.")]
    [JsonObject("Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit")]
    public class Coil_Heating_WaterToAirHeatPump_VariableSpeedEquationFit : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("water_to_refrigerant_hx_water_inlet_node_name")]
public string WaterToRefrigerantHxWaterInletNodeName { get; set; } = "";
        

[JsonProperty("water_to_refrigerant_hx_water_outlet_node_name")]
public string WaterToRefrigerantHxWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("indoor_air_inlet_node_name")]
public string IndoorAirInletNodeName { get; set; } = "";
        

[JsonProperty("indoor_air_outlet_node_name")]
public string IndoorAirOutletNodeName { get; set; } = "";
        

[JsonProperty("number_of_speeds")]
public System.Nullable<float> NumberOfSpeeds { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description("must be lower than or equal to the highest speed number")]
[JsonProperty("nominal_speed_level")]
public System.Nullable<float> NominalSpeedLevel { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[JsonProperty("rated_heating_capacity_at_selected_nominal_speed_level")]
public string RatedHeatingCapacityAtSelectedNominalSpeedLevel { get; set; } = (System.String)"Autosize";
        

[JsonProperty("rated_air_flow_rate_at_selected_nominal_speed_level")]
public string RatedAirFlowRateAtSelectedNominalSpeedLevel { get; set; } = (System.String)"Autosize";
        

[JsonProperty("rated_water_flow_rate_at_selected_nominal_speed_level")]
public string RatedWaterFlowRateAtSelectedNominalSpeedLevel { get; set; } = (System.String)"Autosize";
        

[Description("quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR" +
    "**3 PLR = part load ratio (heating load/steady state capacity)")]
[JsonProperty("energy_part_load_fraction_curve_name")]
public string EnergyPartLoadFractionCurveName { get; set; } = "";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_1_reference_unit_gross_rated_heating_capacity")]
public System.Nullable<float> Speed1ReferenceUnitGrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("speed_1_reference_unit_gross_rated_heating_cop")]
public System.Nullable<float> Speed1ReferenceUnitGrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("speed_1_reference_unit_rated_air_flow")]
public System.Nullable<float> Speed1ReferenceUnitRatedAirFlow { get; set; } = null;
        

[JsonProperty("speed_1_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed1ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[Description("curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bu" +
    "lb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_1_heating_capacity_function_of_temperature_curve_name")]
public string Speed1HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed1TotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw" +
    "**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_1_heating_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed1HeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bu" +
    "lb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_1_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed1EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed1EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw" +
    "**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string Speed1EnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public System.Nullable<float> Speed1ReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = null;
        

[Description("curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bu" +
    "lb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_1_waste_heat_function_of_temperature_curve_name")]
public string Speed1WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_2_reference_unit_gross_rated_heating_capacity")]
public System.Nullable<float> Speed2ReferenceUnitGrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("speed_2_reference_unit_gross_rated_heating_cop")]
public System.Nullable<float> Speed2ReferenceUnitGrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("speed_2_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed2ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_2_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed2ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[Description("curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bu" +
    "lb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_2_heating_capacity_function_of_temperature_curve_name")]
public string Speed2HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed2TotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw" +
    "**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_2_heating_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed2HeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bu" +
    "lb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_2_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed2EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa" +
    "**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed2EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string Speed2EnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public System.Nullable<float> Speed2ReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = null;
        

[Description("curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bu" +
    "lb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty("speed_2_waste_heat_function_of_temperature_curve_name")]
public string Speed2WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_3_reference_unit_gross_rated_heating_capacity")]
public System.Nullable<float> Speed3ReferenceUnitGrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("speed_3_reference_unit_gross_rated_heating_cop")]
public System.Nullable<float> Speed3ReferenceUnitGrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("speed_3_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed3ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_3_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed3ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_3_heating_capacity_function_of_temperature_curve_name")]
public string Speed3HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed3TotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_3_heating_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed3HeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_3_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed3EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed3EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string Speed3EnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public System.Nullable<float> Speed3ReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = null;
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_3_waste_heat_function_of_temperature_curve_name")]
public string Speed3WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_4_reference_unit_gross_rated_heating_capacity")]
public System.Nullable<float> Speed4ReferenceUnitGrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("speed_4_reference_unit_gross_rated_heating_cop")]
public System.Nullable<float> Speed4ReferenceUnitGrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("speed_4_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed4ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_4_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed4ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_4_heating_capacity_function_of_temperature_curve_name")]
public string Speed4HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_4_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed4TotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_4_heating_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed4HeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_4_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed4EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed4EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string Speed4EnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public System.Nullable<float> Speed4ReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = null;
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_4_waste_heat_function_of_temperature_curve_name")]
public string Speed4WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_5_reference_unit_gross_rated_heating_capacity")]
public System.Nullable<float> Speed5ReferenceUnitGrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("speed_5_reference_unit_gross_rated_heating_cop")]
public System.Nullable<float> Speed5ReferenceUnitGrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("speed_5_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed5ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_5_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed5ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_5_heating_capacity_function_of_temperature_curve_name")]
public string Speed5HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_5_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed5TotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_5_heating_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed5HeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_5_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed5EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed5EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string Speed5EnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public System.Nullable<float> Speed5ReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = null;
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_5_waste_heat_function_of_temperature_curve_name")]
public string Speed5WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_6_reference_unit_gross_rated_heating_capacity")]
public System.Nullable<float> Speed6ReferenceUnitGrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("speed_6_reference_unit_gross_rated_heating_cop")]
public System.Nullable<float> Speed6ReferenceUnitGrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("speed_6_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed6ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_6_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed6ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_6_heating_capacity_function_of_temperature_curve_name")]
public string Speed6HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_6_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed6TotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_6_heating_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed6HeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_6_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed6EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed6EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string Speed6EnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public System.Nullable<float> Speed6ReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = null;
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_6_waste_heat_function_of_temperature_curve_name")]
public string Speed6WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_7_reference_unit_gross_rated_heating_capacity")]
public System.Nullable<float> Speed7ReferenceUnitGrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("speed_7_reference_unit_gross_rated_heating_cop")]
public System.Nullable<float> Speed7ReferenceUnitGrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("speed_7_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed7ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_7_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed7ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_7_heating_capacity_function_of_temperature_curve_name")]
public string Speed7HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_7_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed7TotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_7_heating_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed7HeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_7_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed7EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed7EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string Speed7EnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public System.Nullable<float> Speed7ReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = null;
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_7_waste_heat_function_of_temperature_curve_name")]
public string Speed7WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_8_reference_unit_gross_rated_heating_capacity")]
public System.Nullable<float> Speed8ReferenceUnitGrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("speed_8_reference_unit_gross_rated_heating_cop")]
public System.Nullable<float> Speed8ReferenceUnitGrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("speed_8_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed8ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_8_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed8ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_8_heating_capacity_function_of_temperature_curve_name")]
public string Speed8HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_8_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed8TotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_8_heating_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed8HeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_8_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed8EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed8EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string Speed8EnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public System.Nullable<float> Speed8ReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = null;
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_8_waste_heat_function_of_temperature_curve_name")]
public string Speed8WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_9_reference_unit_gross_rated_heating_capacity")]
public System.Nullable<float> Speed9ReferenceUnitGrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("speed_9_reference_unit_gross_rated_heating_cop")]
public System.Nullable<float> Speed9ReferenceUnitGrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("speed_9_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed9ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_9_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed9ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_9_heating_capacity_function_of_temperature_curve_name")]
public string Speed9HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_9_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed9TotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_9_heating_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed9HeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_9_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed9EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed9EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string Speed9EnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public System.Nullable<float> Speed9ReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = null;
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_9_waste_heat_function_of_temperature_curve_name")]
public string Speed9WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("speed_10_reference_unit_gross_rated_heating_capacity")]
public System.Nullable<float> Speed10ReferenceUnitGrossRatedHeatingCapacity { get; set; } = null;
        

[JsonProperty("speed_10_reference_unit_gross_rated_heating_cop")]
public System.Nullable<float> Speed10ReferenceUnitGrossRatedHeatingCop { get; set; } = null;
        

[JsonProperty("speed_10_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed10ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_10_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed10ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_10_heating_capacity_function_of_temperature_curve_name")]
public string Speed10HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_10_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed10TotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_10_heating_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed10HeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_10_energy_input_ratio_function_of_temperature_curve_name")]
public string Speed10EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**" +
    "2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty("speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string Speed10EnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**" +
    "2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty("speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string Speed10EnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public System.Nullable<float> Speed10ReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = null;
        

[Description("optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering a" +
    "ir dry-bulb temperature (C) ewt = water entering temperature seen by the evapora" +
    "tor (C)")]
[JsonProperty("speed_10_waste_heat_function_of_temperature_curve_name")]
public string Speed10WasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
    }
    
    [Description("Heat pump water heater (HPWH) heating coil, air-to-water direct-expansion (DX) sy" +
        "stem which includes a water heating coil, evaporator air coil, evaporator fan, e" +
        "lectric compressor, and water pump. Part of a WaterHeater:HeatPump:PumpedCondens" +
        "er system.")]
    [JsonObject("Coil:WaterHeating:AirToWaterHeatPump:Pumped")]
    public class Coil_WaterHeating_AirToWaterHeatPump_Pumped : BHoMObject, IEnergyPlusClass
    {
        

[Description("Heating capacity at the rated inlet air temperatures, rated condenser inlet water" +
    " temperature, rated air flow rate, and rated water flow rate. Can optionally inc" +
    "lude condenser pump heat.")]
[JsonProperty("rated_heating_capacity")]
public System.Nullable<float> RatedHeatingCapacity { get; set; } = null;
        

[Description("Heating coefficient of performance at the rated inlet air temperatures, rated con" +
    "denser inlet water temperature, rated air flow rate, and rated water flow rate. " +
    "Can optionally include condenser pump power and evaporator fan power (see fields" +
    " below).")]
[JsonProperty("rated_cop")]
public System.Nullable<float> RatedCop { get; set; } = (System.Nullable<float>)Single.Parse("3.2", CultureInfo.InvariantCulture);
        

[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty("rated_sensible_heat_ratio")]
public System.Nullable<float> RatedSensibleHeatRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.85", CultureInfo.InvariantCulture);
        

[Description("Evaporator inlet air dry-bulb temperature corresponding to rated coil performance" +
    " (heating capacity, COP and SHR).")]
[JsonProperty("rated_evaporator_inlet_air_dry_bulb_temperature")]
public System.Nullable<float> RatedEvaporatorInletAirDryBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("19.7", CultureInfo.InvariantCulture);
        

[Description("Evaporator inlet air wet-bulb temperature corresponding to rated coil performance" +
    " (heating capacity, COP and SHR).")]
[JsonProperty("rated_evaporator_inlet_air_wet_bulb_temperature")]
public System.Nullable<float> RatedEvaporatorInletAirWetBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13.5", CultureInfo.InvariantCulture);
        

[Description("Condenser inlet water temperature corresponding to rated coil performance (heatin" +
    "g capacity, COP and SHR).")]
[JsonProperty("rated_condenser_inlet_water_temperature")]
public System.Nullable<float> RatedCondenserInletWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("57.5", CultureInfo.InvariantCulture);
        

[Description("Evaporator air flow rate corresponding to rated coil performance (heating capacit" +
    "y, COP and SHR). Default is 5.035E-5 m3/s/W (31.25 cfm/MBH) of rated heating cap" +
    "acity when autocalculated.")]
[JsonProperty("rated_evaporator_air_flow_rate")]
public string RatedEvaporatorAirFlowRate { get; set; } = "";
        

[Description(@"Condenser water flow rate corresponding to rated coil performance (heating capacity, COP and SHR). Default is 4.487E-8 m3/s/W (0.208 gpm/MBH) of rated heating capacity when autocalculated. A warning message will be issued if the ratio of Rated Condenser Water Flow Rate to Heating Capacity is less than 1.79405E-8 m3/s/W (0.083 gpm/MBH) or greater than 8.97024E-8 m3/s/W (0.417 gpm/MBH), but the simulation will continue.")]
[JsonProperty("rated_condenser_water_flow_rate")]
public string RatedCondenserWaterFlowRate { get; set; } = "";
        

[Description("Select Yes if the evaporator fan power is included in the rated COP. This choice " +
    "field impacts the calculation of compressor electric power.")]
[JsonProperty("evaporator_fan_power_included_in_rated_cop")]
public EmptyNoYes EvaporatorFanPowerIncludedInRatedCop { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[Description("Select Yes if the condenser pump power is included in the rated COP. This choice " +
    "field impacts the calculation of compressor electric power.")]
[JsonProperty("condenser_pump_power_included_in_rated_cop")]
public EmptyNoYes CondenserPumpPowerIncludedInRatedCop { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Select Yes if the condenser pump heat is included in the rated heating capacity a" +
    "nd rated COP. This choice field impacts the calculation of water heating capacit" +
    "y.")]
[JsonProperty("condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop")]
public EmptyNoYes CondenserPumpHeatIncludedInRatedHeatingCapacityAndRatedCop { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("A warning message will be issued if the ratio of Condenser Water Pump Power to Ra" +
    "ted Heating Capacity exceeds 0.1422 W/W (41.67 Watts/MBH), but the simulation wi" +
    "ll continue.")]
[JsonProperty("condenser_water_pump_power")]
public System.Nullable<float> CondenserWaterPumpPower { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Fraction of pump heat transferred to the condenser water. The pump is assumed to " +
    "be located downstream of the condenser.")]
[JsonProperty("fraction_of_condenser_pump_heat_to_water")]
public System.Nullable<float> FractionOfCondenserPumpHeatToWater { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("The node from which the DX coil draws its inlet air.")]
[JsonProperty("evaporator_air_inlet_node_name")]
public string EvaporatorAirInletNodeName { get; set; } = "";
        

[Description("The node to which the DX coil sends its outlet air.")]
[JsonProperty("evaporator_air_outlet_node_name")]
public string EvaporatorAirOutletNodeName { get; set; } = "";
        

[Description("The node from which the DX coil condenser draws its inlet water. This name should" +
    " match the source side outlet node name in the associated water heater tank obje" +
    "ct.")]
[JsonProperty("condenser_water_inlet_node_name")]
public string CondenserWaterInletNodeName { get; set; } = "";
        

[Description("The node to which the DX coil condenser sends its outlet water. This name should " +
    "match the source side inlet node name in the associated water heater tank object" +
    ".")]
[JsonProperty("condenser_water_outlet_node_name")]
public string CondenserWaterOutletNodeName { get; set; } = "";
        

[Description(@"The compressor crankcase heater only operates when the dry-bulb temperature of air surrounding the compressor is below the Maximum Ambient Temperature for Crankcase Heater Operation and the DX coil is off. The ambient temperature surrounding the compressor is set by the WaterHeater:HeatPump:PumpedCondenser parent object (field Compressor Location).")]
[JsonProperty("crankcase_heater_capacity")]
public System.Nullable<float> CrankcaseHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"The compressor crankcase heater only operates when the dry-bulb temperature of air surrounding the compressor is below the Maximum Outdoor Temperature for Crankcase Heater Operation and the unit is off. The ambient temperature surrounding the compressor is set by the WaterHeater:HeatPump:PumpedCondenser parent object (field Compressor Location).")]
[JsonProperty("maximum_ambient_temperature_for_crankcase_heater_operation")]
public System.Nullable<float> MaximumAmbientTemperatureForCrankcaseHeaterOperation { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("Determines temperature type for heating capacity curves and heating COP curves. T" +
    "his input determines whether the inlet air dry-bulb or wet-bulb temperature is u" +
    "sed to evaluate these curves.")]
[JsonProperty("evaporator_air_temperature_type_for_curve_objects")]
public Coil_WaterHeating_AirToWaterHeatPump_Pumped_EvaporatorAirTemperatureTypeForCurveObjects EvaporatorAirTemperatureTypeForCurveObjects { get; set; } = (Coil_WaterHeating_AirToWaterHeatPump_Pumped_EvaporatorAirTemperatureTypeForCurveObjects)Enum.Parse(typeof(Coil_WaterHeating_AirToWaterHeatPump_Pumped_EvaporatorAirTemperatureTypeForCurveObjects), "WetBulbTemperature");
        

[Description(@"Heating capacity modifier curve (function of temperature) should be biquadratic or cubic. Biquadratic curve = a + b(ta) + c(ta)^2 + d(tw) + e(tw)^2 + f(ta)(tw). Cubic curve = a + b(ta) + c(ta)^2 + d(ta)^3. ta = evaporator inlet air [dry-bulb or wet-bulb] temperature (C). tw = condenser inlet water temperature (C). The field Evaporator Air Temperature Type for Curve Objects determines if dry-bulb or wet-bulb is used as the evaporator inlet air temperature (ta).")]
[JsonProperty("heating_capacity_function_of_temperature_curve_name")]
public string HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"Heating capacity modifier curve (function of air flow fraction) should be quadratic or cubic. Quadratic curve = a + b(ff) + c(ff)^2. Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3. ff = fraction of the rated evaporator air flow rate. Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in air flow rate fraction.")]
[JsonProperty("heating_capacity_function_of_air_flow_fraction_curve_name")]
public string HeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description(@"Heating capacity modifier curve (function of water flow fraction) should be quadratic or cubic. Quadratic curve = a + b(ff) + c(ff)^2. Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3. ff = fraction of the rated condenser water flow rate. Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in water flow rate fraction.")]
[JsonProperty("heating_capacity_function_of_water_flow_fraction_curve_name")]
public string HeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description(@"Heating COP modifier curve (function of temperature) should be biquadratic or cubic. Biquadratic curve = a + b(ta) + c(ta)^2 + d(tw) + e(tw)^2 + f(ta)(tw). Cubic curve = a + b(ta) + c(ta)^2 + d(ta)^3. ta = evaporator inlet air [dry-bulb or wet-bulb] temperature (C). tw = condenser inlet water temperature (C). The field Evaporator Air Temperature Type for Curve Objects determines if dry-bulb or wet-bulb is used as the evaporator inlet air temperature (ta).")]
[JsonProperty("heating_cop_function_of_temperature_curve_name")]
public string HeatingCopFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"Heating COP modifier curve (function of air flow fraction) should be quadratic or cubic. Quadratic curve = a + b(ff) + c(ff)^2. Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3. ff = fraction of the rated evaporator air flow rate. Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in air flow rate fraction.")]
[JsonProperty("heating_cop_function_of_air_flow_fraction_curve_name")]
public string HeatingCopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description(@"Heating COP modifier curve (function of water flow fraction) should be quadratic or cubic. Quadratic curve = a + b(ff) + c(ff)^2. Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3. ff = fraction of the rated condenser water flow rate. Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in water flow rate fraction.")]
[JsonProperty("heating_cop_function_of_water_flow_fraction_curve_name")]
public string HeatingCopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description(@"Part Load Fraction Correlation (function of part load ratio) should be quadratic or cubic. Quadratic curve = a + b(PLR) + c(PLR)^2. Cubic curve = a + b(PLR) + c(PLR)^2 + d(PLR)^3. PLR = part load ratio (heating delivered/steady state heating capacity). Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in part load ratio.")]
[JsonProperty("part_load_fraction_correlation_curve_name")]
public string PartLoadFractionCorrelationCurveName { get; set; } = "";
    }
    
    public enum Coil_WaterHeating_AirToWaterHeatPump_Pumped_EvaporatorAirTemperatureTypeForCurveObjects
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DryBulbTemperature")]
        DryBulbTemperature = 1,
        
        [JsonProperty("WetBulbTemperature")]
        WetBulbTemperature = 2,
    }
    
    [Description("Heat pump water heater (HPWH) heating coil, air-to-water direct-expansion (DX) sy" +
        "stem which includes a water heating coil, evaporator air coil, evaporator fan, e" +
        "lectric compressor, and water pump. Part of a WaterHeater:HeatPump:WrappedConden" +
        "ser system.")]
    [JsonObject("Coil:WaterHeating:AirToWaterHeatPump:Wrapped")]
    public class Coil_WaterHeating_AirToWaterHeatPump_Wrapped : BHoMObject, IEnergyPlusClass
    {
        

[Description("Heating capacity at the rated inlet air temperatures, rated condenser inlet water" +
    " temperature, rated air flow rate, and rated water flow rate. Can optionally inc" +
    "lude condenser pump heat.")]
[JsonProperty("rated_heating_capacity")]
public System.Nullable<float> RatedHeatingCapacity { get; set; } = null;
        

[Description("Heating coefficient of performance at the rated inlet air temperatures, rated con" +
    "denser inlet water temperature, rated air flow rate, and rated water flow rate. " +
    "Can optionally include condenser pump power and evaporator fan power (see fields" +
    " below).")]
[JsonProperty("rated_cop")]
public System.Nullable<float> RatedCop { get; set; } = (System.Nullable<float>)Single.Parse("3.2", CultureInfo.InvariantCulture);
        

[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty("rated_sensible_heat_ratio")]
public System.Nullable<float> RatedSensibleHeatRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.85", CultureInfo.InvariantCulture);
        

[Description("Evaporator inlet air dry-bulb temperature corresponding to rated coil performance" +
    " (heating capacity, COP and SHR).")]
[JsonProperty("rated_evaporator_inlet_air_dry_bulb_temperature")]
public System.Nullable<float> RatedEvaporatorInletAirDryBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("19.7", CultureInfo.InvariantCulture);
        

[Description("Evaporator inlet air wet-bulb temperature corresponding to rated coil performance" +
    " (heating capacity, COP and SHR).")]
[JsonProperty("rated_evaporator_inlet_air_wet_bulb_temperature")]
public System.Nullable<float> RatedEvaporatorInletAirWetBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13.5", CultureInfo.InvariantCulture);
        

[Description("Condenser inlet water temperature corresponding to rated coil performance (heatin" +
    "g capacity, COP and SHR).")]
[JsonProperty("rated_condenser_water_temperature")]
public System.Nullable<float> RatedCondenserWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("57.5", CultureInfo.InvariantCulture);
        

[Description("Evaporator air flow rate corresponding to rated coil performance (heating capacit" +
    "y, COP and SHR). Default is 5.035E-5 m3/s/W (31.25 cfm/MBH) of rated heating cap" +
    "acity when autocalculated.")]
[JsonProperty("rated_evaporator_air_flow_rate")]
public string RatedEvaporatorAirFlowRate { get; set; } = "";
        

[Description("Select Yes if the evaporator fan power is included in the rated COP. This choice " +
    "field impacts the calculation of compressor electric power.")]
[JsonProperty("evaporator_fan_power_included_in_rated_cop")]
public EmptyNoYes EvaporatorFanPowerIncludedInRatedCop { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[Description("The node from which the DX coil draws its inlet air.")]
[JsonProperty("evaporator_air_inlet_node_name")]
public string EvaporatorAirInletNodeName { get; set; } = "";
        

[Description("The node to which the DX coil sends its outlet air.")]
[JsonProperty("evaporator_air_outlet_node_name")]
public string EvaporatorAirOutletNodeName { get; set; } = "";
        

[Description(@"The compressor crankcase heater only operates when the dry-bulb temperature of air surrounding the compressor is below the Maximum Ambient Temperature for Crankcase Heater Operation and the DX coil is off. The ambient temperature surrounding the compressor is set by the WaterHeater:HeatPump:WrappedCondenser parent object (field Compressor Location).")]
[JsonProperty("crankcase_heater_capacity")]
public System.Nullable<float> CrankcaseHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"The compressor crankcase heater only operates when the dry-bulb temperature of air surrounding the compressor is below the Maximum Outdoor Temperature for Crankcase Heater Operation and the unit is off. The ambient temperature surrounding the compressor is set by the WaterHeater:HeatPump:WrappedCondenser parent object (field Compressor Location).")]
[JsonProperty("maximum_ambient_temperature_for_crankcase_heater_operation")]
public System.Nullable<float> MaximumAmbientTemperatureForCrankcaseHeaterOperation { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("Determines temperature type for heating capacity curves and heating COP curves. T" +
    "his input determines whether the inlet air dry-bulb or wet-bulb temperature is u" +
    "sed to evaluate these curves.")]
[JsonProperty("evaporator_air_temperature_type_for_curve_objects")]
public Coil_WaterHeating_AirToWaterHeatPump_Wrapped_EvaporatorAirTemperatureTypeForCurveObjects EvaporatorAirTemperatureTypeForCurveObjects { get; set; } = (Coil_WaterHeating_AirToWaterHeatPump_Wrapped_EvaporatorAirTemperatureTypeForCurveObjects)Enum.Parse(typeof(Coil_WaterHeating_AirToWaterHeatPump_Wrapped_EvaporatorAirTemperatureTypeForCurveObjects), "WetBulbTemperature");
        

[Description(@"Heating capacity modifier curve (function of temperature) should be biquadratic or cubic. Biquadratic curve = a + b(ta) + c(ta)^2 + d(tw) + e(tw)^2 + f(ta)(tw). Cubic curve = a + b(ta) + c(ta)^2 + d(ta)^3. ta = evaporator inlet air [dry-bulb or wet-bulb] temperature (C). tw = condenser inlet water temperature (C). The field Evaporator Air Temperature Type for Curve Objects determines if dry-bulb or wet-bulb is used as the evaporator inlet air temperature (ta).")]
[JsonProperty("heating_capacity_function_of_temperature_curve_name")]
public string HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"Heating capacity modifier curve (function of air flow fraction) should be quadratic or cubic. Quadratic curve = a + b(ff) + c(ff)^2. Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3. ff = fraction of the rated evaporator air flow rate. Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in air flow rate fraction.")]
[JsonProperty("heating_capacity_function_of_air_flow_fraction_curve_name")]
public string HeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description(@"Heating COP modifier curve (function of temperature) should be biquadratic or cubic. Biquadratic curve = a + b(ta) + c(ta)^2 + d(tw) + e(tw)^2 + f(ta)(tw). Cubic curve = a + b(ta) + c(ta)^2 + d(ta)^3. ta = evaporator inlet air [dry-bulb or wet-bulb] temperature (C). tw = condenser inlet water temperature (C). The field Evaporator Air Temperature Type for Curve Objects determines if dry-bulb or wet-bulb is used as the evaporator inlet air temperature (ta).")]
[JsonProperty("heating_cop_function_of_temperature_curve_name")]
public string HeatingCopFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"Heating COP modifier curve (function of air flow fraction) should be quadratic or cubic. Quadratic curve = a + b(ff) + c(ff)^2. Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3. ff = fraction of the rated evaporator air flow rate. Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in air flow rate fraction.")]
[JsonProperty("heating_cop_function_of_air_flow_fraction_curve_name")]
public string HeatingCopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description(@"Part Load Fraction Correlation (function of part load ratio) should be quadratic or cubic. Quadratic curve = a + b(PLR) + c(PLR)^2. Cubic curve = a + b(PLR) + c(PLR)^2 + d(PLR)^3. PLR = part load ratio (heating delivered/steady state heating capacity). Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in part load ratio.")]
[JsonProperty("part_load_fraction_correlation_curve_name")]
public string PartLoadFractionCorrelationCurveName { get; set; } = "";
    }
    
    public enum Coil_WaterHeating_AirToWaterHeatPump_Wrapped_EvaporatorAirTemperatureTypeForCurveObjects
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DryBulbTemperature")]
        DryBulbTemperature = 1,
        
        [JsonProperty("WetBulbTemperature")]
        WetBulbTemperature = 2,
    }
    
    [Description(@"vairlable-speed Heat pump water heater (VSHPWH) heating coil, air-to-water direct-expansion (DX) system which includes a variable-speed water heating coil, evaporator air coil, evaporator fan, electric compressor, and water pump. Part of a WaterHeater:HeatPump system.")]
    [JsonObject("Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed")]
    public class Coil_WaterHeating_AirToWaterHeatPump_VariableSpeed : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("number_of_speeds")]
public System.Nullable<float> NumberOfSpeeds { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("must be lower than or equal to the highest speed number")]
[JsonProperty("nominal_speed_level")]
public System.Nullable<float> NominalSpeedLevel { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Water Heating capacity at the rated inlet air temperatures, rated condenser inlet" +
    " water temperature, rated air flow rate, and rated water flow rate. Can optional" +
    "ly include condenser pump heat.")]
[JsonProperty("rated_water_heating_capacity")]
public System.Nullable<float> RatedWaterHeatingCapacity { get; set; } = null;
        

[Description("Evaporator inlet air dry-bulb temperature corresponding to rated coil performance" +
    " (heating capacity, COP and SHR).")]
[JsonProperty("rated_evaporator_inlet_air_dry_bulb_temperature")]
public System.Nullable<float> RatedEvaporatorInletAirDryBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("19.7", CultureInfo.InvariantCulture);
        

[Description("Evaporator inlet air wet-bulb temperature corresponding to rated coil performance" +
    " (heating capacity, COP and SHR).")]
[JsonProperty("rated_evaporator_inlet_air_wet_bulb_temperature")]
public System.Nullable<float> RatedEvaporatorInletAirWetBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13.5", CultureInfo.InvariantCulture);
        

[Description("Condenser inlet water temperature corresponding to rated coil performance (heatin" +
    "g capacity, COP and SHR).")]
[JsonProperty("rated_condenser_inlet_water_temperature")]
public System.Nullable<float> RatedCondenserInletWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("57.5", CultureInfo.InvariantCulture);
        

[Description("Evaporator air flow rate corresponding to rated coil performance (heating capacit" +
    "y, COP and SHR). Default is 5.035E-5 m3/s/W (31.25 cfm/MBH) of rated heating cap" +
    "acity when autocalculated.")]
[JsonProperty("rated_evaporator_air_flow_rate")]
public string RatedEvaporatorAirFlowRate { get; set; } = "";
        

[Description(@"Condenser water flow rate corresponding to rated coil performance (heating capacity, COP and SHR). Default is 4.487E-8 m3/s/W (0.208 gpm/MBH) of rated heating capacity when autocalculated. A warning message will be issued if the ratio of Rated Condenser Water Flow Rate to Heating Capacity is less than 1.79405E-8 m3/s/W (0.083 gpm/MBH) or greater than 8.97024E-8 m3/s/W (0.417 gpm/MBH), but the simulation will continue.")]
[JsonProperty("rated_condenser_water_flow_rate")]
public string RatedCondenserWaterFlowRate { get; set; } = "";
        

[Description("Select Yes if the evaporator fan power is included in the rated COP. This choice " +
    "field impacts the calculation of compressor electric power.")]
[JsonProperty("evaporator_fan_power_included_in_rated_cop")]
public EmptyNoYes EvaporatorFanPowerIncludedInRatedCop { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[Description("Select Yes if the condenser pump power is included in the rated COP. This choice " +
    "field impacts the calculation of compressor electric power.")]
[JsonProperty("condenser_pump_power_included_in_rated_cop")]
public EmptyNoYes CondenserPumpPowerIncludedInRatedCop { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Select Yes if the condenser pump heat is included in the rated heating capacity a" +
    "nd rated COP. This choice field impacts the calculation of water heating capacit" +
    "y.")]
[JsonProperty("condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop")]
public EmptyNoYes CondenserPumpHeatIncludedInRatedHeatingCapacityAndRatedCop { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Fraction of pump heat transferred to the condenser water. The pump is assumed to " +
    "be located downstream of the condenser.")]
[JsonProperty("fraction_of_condenser_pump_heat_to_water")]
public System.Nullable<float> FractionOfCondenserPumpHeatToWater { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("The node from which the DX coil draws its inlet air.")]
[JsonProperty("evaporator_air_inlet_node_name")]
public string EvaporatorAirInletNodeName { get; set; } = "";
        

[Description("The node to which the DX coil sends its outlet air.")]
[JsonProperty("evaporator_air_outlet_node_name")]
public string EvaporatorAirOutletNodeName { get; set; } = "";
        

[Description("The node from which the DX coil condenser draws its inlet water. This name should" +
    " match the source side outlet node name in the associated water heater tank obje" +
    "ct.")]
[JsonProperty("condenser_water_inlet_node_name")]
public string CondenserWaterInletNodeName { get; set; } = "";
        

[Description("The node to which the DX coil condenser sends its outlet water. This name should " +
    "match the source side inlet node name in the associated water heater tank object" +
    ".")]
[JsonProperty("condenser_water_outlet_node_name")]
public string CondenserWaterOutletNodeName { get; set; } = "";
        

[Description(@"The compressor crankcase heater only operates when the dry-bulb temperature of air surrounding the compressor is below the Maximum Ambient Temperature for Crankcase Heater Operation and the DX coil is off. The ambient temperature surrounding the compressor is set by the WaterHeater:HeatPump parent object (field Compressor Location).")]
[JsonProperty("crankcase_heater_capacity")]
public System.Nullable<float> CrankcaseHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"The compressor crankcase heater only operates when the dry-bulb temperature of air surrounding the compressor is below the Maximum Outdoor Temperature for Crankcase Heater Operation and the unit is off. The ambient temperature surrounding the compressor is set by the WaterHeater:HeatPump parent object (field Compressor Location).")]
[JsonProperty("maximum_ambient_temperature_for_crankcase_heater_operation")]
public System.Nullable<float> MaximumAmbientTemperatureForCrankcaseHeaterOperation { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("Determines temperature type for heating capacity curves and heating COP curves. T" +
    "his input determines whether the inlet air dry-bulb or wet-bulb temperature is u" +
    "sed to evaluate these curves.")]
[JsonProperty("evaporator_air_temperature_type_for_curve_objects")]
public Coil_WaterHeating_AirToWaterHeatPump_VariableSpeed_EvaporatorAirTemperatureTypeForCurveObjects EvaporatorAirTemperatureTypeForCurveObjects { get; set; } = (Coil_WaterHeating_AirToWaterHeatPump_VariableSpeed_EvaporatorAirTemperatureTypeForCurveObjects)Enum.Parse(typeof(Coil_WaterHeating_AirToWaterHeatPump_VariableSpeed_EvaporatorAirTemperatureTypeForCurveObjects), "WetBulbTemperature");
        

[Description(@"Table:Lookup object can also be used Part Load Fraction Correlation (function of part load ratio) should be quadratic or cubic. Quadratic curve = a + b(PLR) + c(PLR)^2. Cubic curve = a + b(PLR) + c(PLR)^2 + d(PLR)^3. PLR = part load ratio (heating delivered/steady state heating capacity). Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in part load ratio.")]
[JsonProperty("part_load_fraction_correlation_curve_name")]
public string PartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description("Heating capacity at the rated inlet air temperatures, rated condenser inlet water" +
    " temperature, rated air flow rate, and rated water flow rate. Can optionally inc" +
    "lude condenser pump heat.")]
[JsonProperty("rated_water_heating_capacity_at_speed_1")]
public System.Nullable<float> RatedWaterHeatingCapacityAtSpeed1 { get; set; } = null;
        

[Description(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty("rated_water_heating_cop_at_speed_1")]
public System.Nullable<float> RatedWaterHeatingCopAtSpeed1 { get; set; } = (System.Nullable<float>)Single.Parse("3.2", CultureInfo.InvariantCulture);
        

[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty("rated_sensible_heat_ratio_at_speed_1")]
public System.Nullable<float> RatedSensibleHeatRatioAtSpeed1 { get; set; } = (System.Nullable<float>)Single.Parse("0.85", CultureInfo.InvariantCulture);
        

[JsonProperty("speed_1_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed1ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_1_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed1ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[JsonProperty("speed_1_reference_unit_water_pump_input_power_at_rated_conditions")]
public System.Nullable<float> Speed1ReferenceUnitWaterPumpInputPowerAtRatedConditions { get; set; } = null;
        

[Description("Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**" +
    "2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon sel" +
    "ection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_1_total_wh_capacity_function_of_temperature_curve_name")]
public string Speed1TotalWhCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic" +
    " curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flo" +
    "w")]
[JsonProperty("speed_1_total_wh_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed1TotalWhCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic" +
    " curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water F" +
    "low")]
[JsonProperty("speed_1_total_wh_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed1TotalWhCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**" +
    "2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon sel" +
    "ection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_1_cop_function_of_temperature_curve_name")]
public string Speed1CopFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic" +
    " curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flo" +
    "w")]
[JsonProperty("speed_1_cop_function_of_air_flow_fraction_curve_name")]
public string Speed1CopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic" +
    " curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water F" +
    "low")]
[JsonProperty("speed_1_cop_function_of_water_flow_fraction_curve_name")]
public string Speed1CopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("Heating capacity at the rated inlet air temperatures, rated condenser inlet water" +
    " temperature, rated air flow rate, and rated water flow rate. Can optionally inc" +
    "lude condenser pump heat.")]
[JsonProperty("rated_water_heating_capacity_at_speed_2")]
public System.Nullable<float> RatedWaterHeatingCapacityAtSpeed2 { get; set; } = null;
        

[Description(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty("rated_water_heating_cop_at_speed_2")]
public System.Nullable<float> RatedWaterHeatingCopAtSpeed2 { get; set; } = (System.Nullable<float>)Single.Parse("3.2", CultureInfo.InvariantCulture);
        

[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty("rated_sensible_heat_ratio_at_speed_2")]
public System.Nullable<float> RatedSensibleHeatRatioAtSpeed2 { get; set; } = (System.Nullable<float>)Single.Parse("0.85", CultureInfo.InvariantCulture);
        

[JsonProperty("speed_2_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed2ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_2_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed2ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[JsonProperty("speed_2_reference_unit_water_pump_input_power_at_rated_conditions")]
public System.Nullable<float> Speed2ReferenceUnitWaterPumpInputPowerAtRatedConditions { get; set; } = null;
        

[Description("Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**" +
    "2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon sel" +
    "ection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_2_total_wh_capacity_function_of_temperature_curve_name")]
public string Speed2TotalWhCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic" +
    " curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flo" +
    "w")]
[JsonProperty("speed_2_total_wh_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed2TotalWhCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic" +
    " curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water F" +
    "low")]
[JsonProperty("speed_2_total_wh_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed2TotalWhCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**" +
    "2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon sel" +
    "ection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_2_cop_function_of_temperature_curve_name")]
public string Speed2CopFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic" +
    " curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flo" +
    "w")]
[JsonProperty("speed_2_cop_function_of_air_flow_fraction_curve_name")]
public string Speed2CopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic" +
    " curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water F" +
    "low")]
[JsonProperty("speed_2_cop_function_of_water_flow_fraction_curve_name")]
public string Speed2CopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("Heating capacity at the rated inlet air temperatures, rated condenser inlet water" +
    " temperature, rated air flow rate, and rated water flow rate. Can optionally inc" +
    "lude condenser pump heat.")]
[JsonProperty("rated_water_heating_capacity_at_speed_3")]
public System.Nullable<float> RatedWaterHeatingCapacityAtSpeed3 { get; set; } = null;
        

[Description(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty("rated_water_heating_cop_at_speed_3")]
public System.Nullable<float> RatedWaterHeatingCopAtSpeed3 { get; set; } = (System.Nullable<float>)Single.Parse("3.2", CultureInfo.InvariantCulture);
        

[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty("rated_sensible_heat_ratio_at_speed_3")]
public System.Nullable<float> RatedSensibleHeatRatioAtSpeed3 { get; set; } = (System.Nullable<float>)Single.Parse("0.85", CultureInfo.InvariantCulture);
        

[JsonProperty("speed_3_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed3ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_3_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed3ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[JsonProperty("speed_3_reference_unit_water_pump_input_power_at_rated_conditions")]
public System.Nullable<float> Speed3ReferenceUnitWaterPumpInputPowerAtRatedConditions { get; set; } = null;
        

[Description("Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**" +
    "2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon sel" +
    "ection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_3_total_wh_capacity_function_of_temperature_curve_name")]
public string Speed3TotalWhCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic" +
    " curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flo" +
    "w")]
[JsonProperty("speed_3_total_wh_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed3TotalWhCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic" +
    " curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water F" +
    "low")]
[JsonProperty("speed_3_total_wh_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed3TotalWhCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**" +
    "2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon sel" +
    "ection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_3_cop_function_of_temperature_curve_name")]
public string Speed3CopFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic" +
    " curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flo" +
    "w")]
[JsonProperty("speed_3_cop_function_of_air_flow_fraction_curve_name")]
public string Speed3CopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic" +
    " curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water F" +
    "low")]
[JsonProperty("speed_3_cop_function_of_water_flow_fraction_curve_name")]
public string Speed3CopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("Heating capacity at the rated inlet air temperatures, rated condenser inlet water" +
    " temperature, rated air flow rate, and rated water flow rate. Can optionally inc" +
    "lude condenser pump heat.")]
[JsonProperty("rated_water_heating_capacity_at_speed_4")]
public System.Nullable<float> RatedWaterHeatingCapacityAtSpeed4 { get; set; } = null;
        

[Description(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty("rated_water_heating_cop_at_speed_4")]
public System.Nullable<float> RatedWaterHeatingCopAtSpeed4 { get; set; } = (System.Nullable<float>)Single.Parse("3.2", CultureInfo.InvariantCulture);
        

[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty("rated_sensible_heat_ratio_at_speed_4")]
public System.Nullable<float> RatedSensibleHeatRatioAtSpeed4 { get; set; } = (System.Nullable<float>)Single.Parse("0.85", CultureInfo.InvariantCulture);
        

[JsonProperty("speed_4_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed4ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_4_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed4ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[JsonProperty("speed_4_reference_unit_water_pump_input_power_at_rated_conditions")]
public System.Nullable<float> Speed4ReferenceUnitWaterPumpInputPowerAtRatedConditions { get; set; } = null;
        

[Description("Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**" +
    "2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon sel" +
    "ection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_4_total_wh_capacity_function_of_temperature_curve_name")]
public string Speed4TotalWhCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic" +
    " curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flo" +
    "w")]
[JsonProperty("speed_4_total_wh_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed4TotalWhCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic" +
    " curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water F" +
    "low")]
[JsonProperty("speed_4_total_wh_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed4TotalWhCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**" +
    "2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon sel" +
    "ection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_4_cop_function_of_temperature_curve_name")]
public string Speed4CopFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic" +
    " curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flo" +
    "w")]
[JsonProperty("speed_4_cop_function_of_air_flow_fraction_curve_name")]
public string Speed4CopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic" +
    " curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water F" +
    "low")]
[JsonProperty("speed_4_cop_function_of_water_flow_fraction_curve_name")]
public string Speed4CopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("Heating capacity at the rated inlet air temperatures, rated condenser inlet water" +
    " temperature, rated air flow rate, and rated water flow rate. Can optionally inc" +
    "lude condenser pump heat.")]
[JsonProperty("rated_water_heating_capacity_at_speed_5")]
public System.Nullable<float> RatedWaterHeatingCapacityAtSpeed5 { get; set; } = null;
        

[Description(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty("rated_water_heating_cop_at_speed_5")]
public System.Nullable<float> RatedWaterHeatingCopAtSpeed5 { get; set; } = (System.Nullable<float>)Single.Parse("3.2", CultureInfo.InvariantCulture);
        

[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty("rated_sensible_heat_ratio_at_speed_5")]
public System.Nullable<float> RatedSensibleHeatRatioAtSpeed5 { get; set; } = (System.Nullable<float>)Single.Parse("0.85", CultureInfo.InvariantCulture);
        

[JsonProperty("speed_5_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed5ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_5_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed5ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[JsonProperty("speed_5_reference_unit_water_pump_input_power_at_rated_conditions")]
public System.Nullable<float> Speed5ReferenceUnitWaterPumpInputPowerAtRatedConditions { get; set; } = null;
        

[Description("Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**" +
    "2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon sel" +
    "ection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_5_total_wh_capacity_function_of_temperature_curve_name")]
public string Speed5TotalWhCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic" +
    " curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flo" +
    "w")]
[JsonProperty("speed_5_total_wh_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed5TotalWhCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic" +
    " curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water F" +
    "low")]
[JsonProperty("speed_5_total_wh_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed5TotalWhCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**" +
    "2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon sel" +
    "ection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_5_cop_function_of_temperature_curve_name")]
public string Speed5CopFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic" +
    " curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flo" +
    "w")]
[JsonProperty("speed_5_cop_function_of_air_flow_fraction_curve_name")]
public string Speed5CopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic" +
    " curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water F" +
    "low")]
[JsonProperty("speed_5_cop_function_of_water_flow_fraction_curve_name")]
public string Speed5CopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("Heating capacity at the rated inlet air temperatures, rated condenser inlet water" +
    " temperature, rated air flow rate, and rated water flow rate. Can optionally inc" +
    "lude condenser pump heat.")]
[JsonProperty("rated_water_heating_capacity_at_speed_6")]
public System.Nullable<float> RatedWaterHeatingCapacityAtSpeed6 { get; set; } = null;
        

[Description(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty("rated_water_heating_cop_at_speed_6")]
public System.Nullable<float> RatedWaterHeatingCopAtSpeed6 { get; set; } = (System.Nullable<float>)Single.Parse("3.2", CultureInfo.InvariantCulture);
        

[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty("rated_sensible_heat_ratio_at_speed_6")]
public System.Nullable<float> RatedSensibleHeatRatioAtSpeed6 { get; set; } = (System.Nullable<float>)Single.Parse("0.85", CultureInfo.InvariantCulture);
        

[JsonProperty("speed_6_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed6ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_6_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed6ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[JsonProperty("speed_6_reference_unit_water_pump_input_power_at_rated_conditions")]
public System.Nullable<float> Speed6ReferenceUnitWaterPumpInputPowerAtRatedConditions { get; set; } = null;
        

[Description("Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**" +
    "2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon sel" +
    "ection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_6_total_wh_capacity_function_of_temperature_curve_name")]
public string Speed6TotalWhCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic" +
    " curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flo" +
    "w")]
[JsonProperty("speed_6_total_wh_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed6TotalWhCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic" +
    " curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water F" +
    "low")]
[JsonProperty("speed_6_total_wh_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed6TotalWhCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**" +
    "2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon sel" +
    "ection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_6_cop_function_of_temperature_curve_name")]
public string Speed6CopFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic" +
    " curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flo" +
    "w")]
[JsonProperty("speed_6_cop_function_of_air_flow_fraction_curve_name")]
public string Speed6CopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic" +
    " curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water F" +
    "low")]
[JsonProperty("speed_6_cop_function_of_water_flow_fraction_curve_name")]
public string Speed6CopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("Heating capacity at the rated inlet air temperatures, rated condenser inlet water" +
    " temperature, rated air flow rate, and rated water flow rate. Can optionally inc" +
    "lude condenser pump heat.")]
[JsonProperty("rated_water_heating_capacity_at_speed_7")]
public System.Nullable<float> RatedWaterHeatingCapacityAtSpeed7 { get; set; } = null;
        

[Description(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty("rated_water_heating_cop_at_speed_7")]
public System.Nullable<float> RatedWaterHeatingCopAtSpeed7 { get; set; } = (System.Nullable<float>)Single.Parse("3.2", CultureInfo.InvariantCulture);
        

[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty("rated_sensible_heat_ratio_at_speed_7")]
public System.Nullable<float> RatedSensibleHeatRatioAtSpeed7 { get; set; } = (System.Nullable<float>)Single.Parse("0.85", CultureInfo.InvariantCulture);
        

[JsonProperty("speed_7_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed7ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_7_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed7ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[JsonProperty("speed_7_reference_unit_water_pump_input_power_at_rated_conditions")]
public System.Nullable<float> Speed7ReferenceUnitWaterPumpInputPowerAtRatedConditions { get; set; } = null;
        

[Description("Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**" +
    "2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon sel" +
    "ection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_7_total_wh_capacity_function_of_temperature_curve_name")]
public string Speed7TotalWhCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic" +
    " curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flo" +
    "w")]
[JsonProperty("speed_7_total_wh_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed7TotalWhCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic" +
    " curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water F" +
    "low")]
[JsonProperty("speed_7_total_wh_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed7TotalWhCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**" +
    "2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon sel" +
    "ection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_7_cop_function_of_temperature_curve_name")]
public string Speed7CopFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic" +
    " curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flo" +
    "w")]
[JsonProperty("speed_7_cop_function_of_air_flow_fraction_curve_name")]
public string Speed7CopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic" +
    " curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water F" +
    "low")]
[JsonProperty("speed_7_cop_function_of_water_flow_fraction_curve_name")]
public string Speed7CopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("Heating capacity at the rated inlet air temperatures, rated condenser inlet water" +
    " temperature, rated air flow rate, and rated water flow rate. Can optionally inc" +
    "lude condenser pump heat.")]
[JsonProperty("rated_water_heating_capacity_at_speed_8")]
public System.Nullable<float> RatedWaterHeatingCapacityAtSpeed8 { get; set; } = null;
        

[Description(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty("rated_water_heating_cop_at_speed_8")]
public System.Nullable<float> RatedWaterHeatingCopAtSpeed8 { get; set; } = (System.Nullable<float>)Single.Parse("3.2", CultureInfo.InvariantCulture);
        

[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty("rated_sensible_heat_ratio_at_speed_8")]
public System.Nullable<float> RatedSensibleHeatRatioAtSpeed8 { get; set; } = (System.Nullable<float>)Single.Parse("0.85", CultureInfo.InvariantCulture);
        

[JsonProperty("speed_8_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed8ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_8_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed8ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[JsonProperty("speed_8_reference_unit_water_pump_input_power_at_rated_conditions")]
public System.Nullable<float> Speed8ReferenceUnitWaterPumpInputPowerAtRatedConditions { get; set; } = null;
        

[Description("Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**" +
    "2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon sel" +
    "ection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_8_total_wh_capacity_function_of_temperature_curve_name")]
public string Speed8TotalWhCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic" +
    " curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flo" +
    "w")]
[JsonProperty("speed_8_total_wh_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed8TotalWhCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic" +
    " curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water F" +
    "low")]
[JsonProperty("speed_8_total_wh_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed8TotalWhCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**" +
    "2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon sel" +
    "ection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_8_cop_function_of_temperature_curve_name")]
public string Speed8CopFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic" +
    " curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flo" +
    "w")]
[JsonProperty("speed_8_cop_function_of_air_flow_fraction_curve_name")]
public string Speed8CopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic" +
    " curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water F" +
    "low")]
[JsonProperty("speed_8_cop_function_of_water_flow_fraction_curve_name")]
public string Speed8CopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("Heating capacity at the rated inlet air temperatures, rated condenser inlet water" +
    " temperature, rated air flow rate, and rated water flow rate. Can optionally inc" +
    "lude condenser pump heat.")]
[JsonProperty("rated_water_heating_capacity_at_speed_9")]
public System.Nullable<float> RatedWaterHeatingCapacityAtSpeed9 { get; set; } = null;
        

[Description(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty("rated_water_heating_cop_at_speed_9")]
public System.Nullable<float> RatedWaterHeatingCopAtSpeed9 { get; set; } = (System.Nullable<float>)Single.Parse("3.2", CultureInfo.InvariantCulture);
        

[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty("rated_sensible_heat_ratio_at_speed_9")]
public System.Nullable<float> RatedSensibleHeatRatioAtSpeed9 { get; set; } = (System.Nullable<float>)Single.Parse("0.85", CultureInfo.InvariantCulture);
        

[JsonProperty("speed_9_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed9ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_9_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed9ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[JsonProperty("speed_9_reference_unit_water_pump_input_power_at_rated_conditions")]
public System.Nullable<float> Speed9ReferenceUnitWaterPumpInputPowerAtRatedConditions { get; set; } = null;
        

[Description("Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**" +
    "2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon sel" +
    "ection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_9_total_wh_capacity_function_of_temperature_curve_name")]
public string Speed9TotalWhCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic" +
    " curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flo" +
    "w")]
[JsonProperty("speed_9_total_wh_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed9TotalWhCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic" +
    " curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water F" +
    "low")]
[JsonProperty("speed_9_total_wh_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed9TotalWhCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**" +
    "2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon sel" +
    "ection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_9_cop_function_of_temperature_curve_name")]
public string Speed9CopFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic" +
    " curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flo" +
    "w")]
[JsonProperty("speed_9_cop_function_of_air_flow_fraction_curve_name")]
public string Speed9CopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic" +
    " curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water F" +
    "low")]
[JsonProperty("speed_9_cop_function_of_water_flow_fraction_curve_name")]
public string Speed9CopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("Heating capacity at the rated inlet air temperatures, rated condenser inlet water" +
    " temperature, rated air flow rate, and rated water flow rate. Can optionally inc" +
    "lude condenser pump heat.")]
[JsonProperty("rated_water_heating_capacity_at_speed_10")]
public System.Nullable<float> RatedWaterHeatingCapacityAtSpeed10 { get; set; } = null;
        

[Description(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty("rated_water_heating_cop_at_speed_10")]
public System.Nullable<float> RatedWaterHeatingCopAtSpeed10 { get; set; } = (System.Nullable<float>)Single.Parse("3.2", CultureInfo.InvariantCulture);
        

[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty("rated_sensible_heat_ratio_at_speed_10")]
public System.Nullable<float> RatedSensibleHeatRatioAtSpeed10 { get; set; } = (System.Nullable<float>)Single.Parse("0.85", CultureInfo.InvariantCulture);
        

[JsonProperty("speed_10_reference_unit_rated_air_flow_rate")]
public System.Nullable<float> Speed10ReferenceUnitRatedAirFlowRate { get; set; } = null;
        

[JsonProperty("speed_10_reference_unit_rated_water_flow_rate")]
public System.Nullable<float> Speed10ReferenceUnitRatedWaterFlowRate { get; set; } = null;
        

[JsonProperty("speed_10_reference_unit_water_pump_input_power_at_rated_conditions")]
public System.Nullable<float> Speed10ReferenceUnitWaterPumpInputPowerAtRatedConditions { get; set; } = null;
        

[Description("Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**" +
    "2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon sel" +
    "ection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_10_total_wh_capacity_function_of_temperature_curve_name")]
public string Speed10TotalWhCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic" +
    " curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flo" +
    "w")]
[JsonProperty("speed_10_total_wh_capacity_function_of_air_flow_fraction_curve_name")]
public string Speed10TotalWhCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic" +
    " curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water F" +
    "low")]
[JsonProperty("speed_10_total_wh_capacity_function_of_water_flow_fraction_curve_name")]
public string Speed10TotalWhCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**" +
    "2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon sel" +
    "ection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty("speed_10_cop_function_of_temperature_curve_name")]
public string Speed10CopFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic" +
    " curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flo" +
    "w")]
[JsonProperty("speed_10_cop_function_of_air_flow_fraction_curve_name")]
public string Speed10CopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        

[Description("Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic" +
    " curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water F" +
    "low")]
[JsonProperty("speed_10_cop_function_of_water_flow_fraction_curve_name")]
public string Speed10CopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
    }
    
    public enum Coil_WaterHeating_AirToWaterHeatPump_VariableSpeed_EvaporatorAirTemperatureTypeForCurveObjects
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DryBulbTemperature")]
        DryBulbTemperature = 1,
        
        [JsonProperty("WetBulbTemperature")]
        WetBulbTemperature = 2,
    }
    
    [Description(@"Desuperheater air heating coil. The heating energy provided by this coil is reclaimed from the superheated refrigerant gas leaving a compressor and does not impact the performance of the compressor. This coil must be used with a water heater tank, see Water Heater:Mixed.")]
    [JsonObject("Coil:WaterHeating:Desuperheater")]
    public class Coil_WaterHeating_Desuperheater : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Schedule values of 0 denote the desuperheater heating coil is off and the parasitic electric energy is also off.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description(@"Defines the cut-out temperature where the desuperheater water heating coil turns off. The desuperheater heating coil setpoint temperature should always be greater than the water tank's heater (element or burner) setpoint temperature. Temperature schedule values should be in degrees C.")]
[JsonProperty("setpoint_temperature_schedule_name")]
public string SetpointTemperatureScheduleName { get; set; } = "";
        

[Description(@"Setpoint temperature minus the dead band temperature difference defines the cut-in temperature where the desuperheater water heating coil turns on. The water tank's heater (element or burner) setpoint temperature should always be less than the desuperheater heating coil cut-in temperature.")]
[JsonProperty("dead_band_temperature_difference")]
public System.Nullable<float> DeadBandTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[Description("Enter the fraction of waste heat reclaimed by the desuperheater water heating coi" +
    "l.")]
[JsonProperty("rated_heat_reclaim_recovery_efficiency")]
public System.Nullable<float> RatedHeatReclaimRecoveryEfficiency { get; set; } = null;
        

[Description("The inlet water temperature corresponding to the rated heat reclaim recovery effi" +
    "ciency.")]
[JsonProperty("rated_inlet_water_temperature")]
public System.Nullable<float> RatedInletWaterTemperature { get; set; } = null;
        

[Description("The outdoor air dry-bulb temperature corresponding to the rated heat reclaim reco" +
    "very efficiency.")]
[JsonProperty("rated_outdoor_air_temperature")]
public System.Nullable<float> RatedOutdoorAirTemperature { get; set; } = null;
        

[Description("The desuperheater water heating coil is off when the inlet water temperature is a" +
    "bove the maximum inlet water temperature for heat reclaim.")]
[JsonProperty("maximum_inlet_water_temperature_for_heat_reclaim")]
public System.Nullable<float> MaximumInletWaterTemperatureForHeatReclaim { get; set; } = null;
        

[Description(@"A biquadratic curve defining the performance of the desuperheater heating coil. Performance can be specified as a function of inlet water temperature, outdoor air dry-bulb temperature, or both. Curve = a + b*Tw + c*Tw**2 + d*odb + e*odb**2 + f*Tw*odb. Tw = desuperheater heating coil entering water temperature (C). Odb = outdoor dry-bulb temperature at DX system condenser (C).")]
[JsonProperty("heat_reclaim_efficiency_function_of_temperature_curve_name")]
public string HeatReclaimEfficiencyFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("The node from which the desuperheater heating coil draws its inlet water. This na" +
    "me should match the source side outlet node name in the associated water heater " +
    "tank object.")]
[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[Description("The node to which the desuperheater heating coil sends its outlet water. This nam" +
    "e should match the source side inlet node name in the associated water heater ta" +
    "nk object.")]
[JsonProperty("water_outlet_node_name")]
public string WaterOutletNodeName { get; set; } = "";
        

[Description("Specify the type of water heater tank used by this desuperheater water heating co" +
    "il.")]
[JsonProperty("tank_object_type")]
public Coil_WaterHeating_Desuperheater_TankObjectType TankObjectType { get; set; } = (Coil_WaterHeating_Desuperheater_TankObjectType)Enum.Parse(typeof(Coil_WaterHeating_Desuperheater_TankObjectType), "Empty");
        

[Description("The name of the water heater tank used by this desuperheater water heating coil. " +
    "Needs to match the name used in the corresponding water heater object.")]
[JsonProperty("tank_name")]
public string TankName { get; set; } = "";
        

[Description("The type of DX system that is providing waste heat for reclaim.")]
[JsonProperty("heating_source_object_type")]
public Coil_WaterHeating_Desuperheater_HeatingSourceObjectType HeatingSourceObjectType { get; set; } = (Coil_WaterHeating_Desuperheater_HeatingSourceObjectType)Enum.Parse(typeof(Coil_WaterHeating_Desuperheater_HeatingSourceObjectType), "CoilCoolingDXMultiSpeed");
        

[Description("The name of the DX system used for heat reclaim.")]
[JsonProperty("heating_source_name")]
public string HeatingSourceName { get; set; } = "";
        

[Description("The operating water flow rate.")]
[JsonProperty("water_flow_rate")]
public System.Nullable<float> WaterFlowRate { get; set; } = null;
        

[Description("The water circulation pump electric power.")]
[JsonProperty("water_pump_power")]
public System.Nullable<float> WaterPumpPower { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The fraction of pump heat transferred to the water. The pump is assumed to be dow" +
    "nstream of the desuperheater water heating coil.")]
[JsonProperty("fraction_of_pump_heat_to_water")]
public System.Nullable<float> FractionOfPumpHeatToWater { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("Parasitic electric power consumed when the desuperheater water heating coil opera" +
    "tes. Parasitic electric load does not contribute to water heating or the zone ai" +
    "r heat balance.")]
[JsonProperty("on_cycle_parasitic_electric_load")]
public System.Nullable<float> OnCycleParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Parasitic electric load consumed when the desuperheater water heating coil is off" +
    ". Parasitic electric load does not contribute to water heating or the zone air h" +
    "eat balance. Off-cycle parasitic power is 0 when the availability schedule is 0." +
    "")]
[JsonProperty("off_cycle_parasitic_electric_load")]
public System.Nullable<float> OffCycleParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum Coil_WaterHeating_Desuperheater_TankObjectType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("WaterHeater:Mixed")]
        WaterHeaterMixed = 1,
        
        [JsonProperty("WaterHeater:Stratified")]
        WaterHeaterStratified = 2,
    }
    
    public enum Coil_WaterHeating_Desuperheater_HeatingSourceObjectType
    {
        
        [JsonProperty("Coil:Cooling:DX:MultiSpeed")]
        CoilCoolingDXMultiSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 1,
        
        [JsonProperty("Coil:Cooling:DX:TwoSpeed")]
        CoilCoolingDXTwoSpeed = 2,
        
        [JsonProperty("Coil:Cooling:DX:TwoStageWithHumidityControlMode")]
        CoilCoolingDXTwoStageWithHumidityControlMode = 3,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 4,
        
        [JsonProperty("Coil:Cooling:WaterToAirHeatPump:EquationFit")]
        CoilCoolingWaterToAirHeatPumpEquationFit = 5,
        
        [JsonProperty("Refrigeration:CompressorRack")]
        RefrigerationCompressorRack = 6,
        
        [JsonProperty("Refrigeration:Condenser:AirCooled")]
        RefrigerationCondenserAirCooled = 7,
        
        [JsonProperty("Refrigeration:Condenser:EvaporativeCooled")]
        RefrigerationCondenserEvaporativeCooled = 8,
        
        [JsonProperty("Refrigeration:Condenser:WaterCooled")]
        RefrigerationCondenserWaterCooled = 9,
    }
    
    [Description("Virtual container component that consists of a DX cooling coil and its associated" +
        " controls. This control object supports several different types of DX cooling co" +
        "ils and may be placed directly in an air loop branch or outdoor air equipment li" +
        "st.")]
    [JsonObject("CoilSystem:Cooling:DX")]
    public class CoilSystem_Cooling_DX : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("dx_cooling_coil_system_inlet_node_name")]
public string DxCoolingCoilSystemInletNodeName { get; set; } = "";
        

[JsonProperty("dx_cooling_coil_system_outlet_node_name")]
public string DxCoolingCoilSystemOutletNodeName { get; set; } = "";
        

[JsonProperty("dx_cooling_coil_system_sensor_node_name")]
public string DxCoolingCoilSystemSensorNodeName { get; set; } = "";
        

[JsonProperty("cooling_coil_object_type")]
public CoilSystem_Cooling_DX_CoolingCoilObjectType CoolingCoilObjectType { get; set; } = (CoilSystem_Cooling_DX_CoolingCoilObjectType)Enum.Parse(typeof(CoilSystem_Cooling_DX_CoolingCoilObjectType), "CoilCoolingDXSingleSpeed");
        

[JsonProperty("cooling_coil_name")]
public string CoolingCoilName { get; set; } = "";
        

[Description(@"None = meet sensible load only Multimode = activate enhanced dehumidification mode as needed and meet sensible load. If no sensible load exists, and Run on Latent Load = Yes, and a latent load exists, the unit will operate to meet the latent load. Valid only with Coil:Cooling:DX:TwoStageWithHumidityControlMode or CoilSystem:Cooling:DX:HeatExchangerAssisted. CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid for all coil types. For all dehumidification controls, the max humidity setpoint on the Sensor Node is used. SetpointManager:SingleZone:Humidity:Maximum, SetpointManager:MultiZone:Humidity:Maximum, or SetpointManager:MultiZone:MaximumHumidity:Average, and SetpointManager:OutdoorAirPretreat (optional) objects.")]
[JsonProperty("dehumidification_control_type")]
public CoilSystem_Cooling_DX_DehumidificationControlType DehumidificationControlType { get; set; } = (CoilSystem_Cooling_DX_DehumidificationControlType)Enum.Parse(typeof(CoilSystem_Cooling_DX_DehumidificationControlType), "None");
        

[Description("If Yes, unit will run if there is a sensible load. If No, unit will not run if th" +
    "ere is only a sensible load. Dehumidification controls will be active if specifi" +
    "ed.")]
[JsonProperty("run_on_sensible_load")]
public EmptyNoYes RunOnSensibleLoad { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[Description("If Yes, unit will run if there is a latent load. even if there is no sensible loa" +
    "d. If No, unit will not run only if there is a latent load. Dehumidification con" +
    "trols will be active if specified.")]
[JsonProperty("run_on_latent_load")]
public EmptyNoYes RunOnLatentLoad { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description(@"This input field is designed for use with DX cooling coils with low air flow to capacity ratio range (100 - 300 cfm/ton). Typical application is 100% dedicated outdoor air system (DOAS). Other air loop or zone HVAC systems with low flow to capacity ratio range may also use this input field. If Yes, the DX cooling coil runs as 100% DOAS DX coil or low flow to capacity ratio range. If No, the DX cooling coil runs as a regular DX coil. If left blank the default is regular DX coil.")]
[JsonProperty("use_outdoor_air_dx_cooling_coil")]
public EmptyNoYes UseOutdoorAirDxCoolingCoil { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("DX cooling coil leaving minimum air temperature defines the minimum DX cooling co" +
    "il leaving air temperature that should be maintained to avoid frost formation. T" +
    "his input field is optional and only used along with the input field above.")]
[JsonProperty("outdoor_air_dx_cooling_coil_leaving_minimum_air_temperature")]
public System.Nullable<float> OutdoorAirDxCoolingCoilLeavingMinimumAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
    }
    
    public enum CoilSystem_Cooling_DX_CoolingCoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed:ThermalStorage")]
        CoilCoolingDXSingleSpeedThermalStorage = 1,
        
        [JsonProperty("Coil:Cooling:DX:TwoSpeed")]
        CoilCoolingDXTwoSpeed = 2,
        
        [JsonProperty("Coil:Cooling:DX:TwoStageWithHumidityControlMode")]
        CoilCoolingDXTwoStageWithHumidityControlMode = 3,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 4,
        
        [JsonProperty("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
        CoilSystemCoolingDXHeatExchangerAssisted = 5,
    }
    
    public enum CoilSystem_Cooling_DX_DehumidificationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("Multimode")]
        Multimode = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    [Description("Virtual container component that consists of a DX heating coil (heat pump) and it" +
        "s associated controls. This control object supports two different types of DX he" +
        "ating coils and may be placed directly in an air loop branch or outdoor air equi" +
        "pment list.")]
    [JsonObject("CoilSystem:Heating:DX")]
    public class CoilSystem_Heating_DX : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("heating_coil_object_type")]
public CoilSystem_Heating_DX_HeatingCoilObjectType HeatingCoilObjectType { get; set; } = (CoilSystem_Heating_DX_HeatingCoilObjectType)Enum.Parse(typeof(CoilSystem_Heating_DX_HeatingCoilObjectType), "CoilHeatingDXSingleSpeed");
        

[JsonProperty("heating_coil_name")]
public string HeatingCoilName { get; set; } = "";
    }
    
    public enum CoilSystem_Heating_DX_HeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:DX:SingleSpeed")]
        CoilHeatingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Heating:DX:VariableSpeed")]
        CoilHeatingDXVariableSpeed = 1,
    }
    
    [Description(@"Virtual component consisting of a chilled-water cooling coil and an air-to-air heat exchanger. The air-to-air heat exchanger precools the air entering the cooling coil and reuses this energy to reheat the supply air leaving the cooling coil. This heat exchange process improves the latent removal performance of the cooling coil (lower sensible heat ratio).")]
    [JsonObject("CoilSystem:Cooling:Water:HeatExchangerAssisted")]
    public class CoilSystem_Cooling_Water_HeatExchangerAssisted : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("heat_exchanger_object_type")]
public CoilSystem_Cooling_Water_HeatExchangerAssisted_HeatExchangerObjectType HeatExchangerObjectType { get; set; } = (CoilSystem_Cooling_Water_HeatExchangerAssisted_HeatExchangerObjectType)Enum.Parse(typeof(CoilSystem_Cooling_Water_HeatExchangerAssisted_HeatExchangerObjectType), "HeatExchangerAirToAirFlatPlate");
        

[JsonProperty("heat_exchanger_name")]
public string HeatExchangerName { get; set; } = "";
        

[JsonProperty("cooling_coil_object_type")]
public CoilSystem_Cooling_Water_HeatExchangerAssisted_CoolingCoilObjectType CoolingCoilObjectType { get; set; } = (CoilSystem_Cooling_Water_HeatExchangerAssisted_CoolingCoilObjectType)Enum.Parse(typeof(CoilSystem_Cooling_Water_HeatExchangerAssisted_CoolingCoilObjectType), "CoilCoolingWater");
        

[JsonProperty("cooling_coil_name")]
public string CoolingCoilName { get; set; } = "";
    }
    
    public enum CoilSystem_Cooling_Water_HeatExchangerAssisted_HeatExchangerObjectType
    {
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 0,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 1,
    }
    
    public enum CoilSystem_Cooling_Water_HeatExchangerAssisted_CoolingCoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 0,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 1,
    }
    
    [Description(@"Virtual component consisting of a direct expansion (DX) cooling coil and an air-to-air heat exchanger. The air-to-air heat exchanger precools the air entering the cooling coil and reuses this energy to reheat the supply air leaving the cooling coil. This heat exchange process improves the latent removal performance of the cooling coil (lower sensible heat ratio).")]
    [JsonObject("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
    public class CoilSystem_Cooling_DX_HeatExchangerAssisted : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("heat_exchanger_object_type")]
public CoilSystem_Cooling_DX_HeatExchangerAssisted_HeatExchangerObjectType HeatExchangerObjectType { get; set; } = (CoilSystem_Cooling_DX_HeatExchangerAssisted_HeatExchangerObjectType)Enum.Parse(typeof(CoilSystem_Cooling_DX_HeatExchangerAssisted_HeatExchangerObjectType), "HeatExchangerAirToAirFlatPlate");
        

[JsonProperty("heat_exchanger_name")]
public string HeatExchangerName { get; set; } = "";
        

[JsonProperty("cooling_coil_object_type")]
public CoilSystem_Cooling_DX_HeatExchangerAssisted_CoolingCoilObjectType CoolingCoilObjectType { get; set; } = (CoilSystem_Cooling_DX_HeatExchangerAssisted_CoolingCoilObjectType)Enum.Parse(typeof(CoilSystem_Cooling_DX_HeatExchangerAssisted_CoolingCoilObjectType), "CoilCoolingDXSingleSpeed");
        

[JsonProperty("cooling_coil_name")]
public string CoolingCoilName { get; set; } = "";
    }
    
    public enum CoilSystem_Cooling_DX_HeatExchangerAssisted_HeatExchangerObjectType
    {
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 0,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 1,
        
        [JsonProperty("HeatExchanger:Desiccant:BalancedFlow")]
        HeatExchangerDesiccantBalancedFlow = 2,
    }
    
    public enum CoilSystem_Cooling_DX_HeatExchangerAssisted_CoolingCoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 1,
    }
    
    [Description("This object is used for air-source integrated heat pump, a collection of its work" +
        "ing modes.")]
    [JsonObject("CoilSystem:IntegratedHeatPump:AirSource")]
    public class CoilSystem_IntegratedHeatPump_AirSource : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("supply_hot_water_flow_sensor_node_name")]
public string SupplyHotWaterFlowSensorNodeName { get; set; } = "";
        

[Description("Must match the name used in the corresponding Coil:Cooling:DX:VariableSpeed objec" +
    "t.")]
[JsonProperty("space_cooling_coil_name")]
public string SpaceCoolingCoilName { get; set; } = "";
        

[Description("Must match the name used in the corresponding Coil:Heating:DX:VariableSpeed objec" +
    "t.")]
[JsonProperty("space_heating_coil_name")]
public string SpaceHeatingCoilName { get; set; } = "";
        

[Description("Must match the name used in the corresponding Coil:WaterHeating:AirToWaterHeatPum" +
    "p:VariableSpeed object.")]
[JsonProperty("dedicated_water_heating_coil_name")]
public string DedicatedWaterHeatingCoilName { get; set; } = "";
        

[Description("Must match the name used in the corresponding Coil:WaterHeating:AirToWaterHeatPum" +
    "p:VariableSpeed object.")]
[JsonProperty("scwh_coil_name")]
public string ScwhCoilName { get; set; } = "";
        

[Description("Must match the name used in the corresponding Coil:Cooling:DX:VariableSpeed objec" +
    "t.")]
[JsonProperty("scdwh_cooling_coil_name")]
public string ScdwhCoolingCoilName { get; set; } = "";
        

[Description("Must match the name used in the corresponding Coil:WaterHeating:AirToWaterHeatPum" +
    "p:VariableSpeed object.")]
[JsonProperty("scdwh_water_heating_coil_name")]
public string ScdwhWaterHeatingCoilName { get; set; } = "";
        

[Description("Must match the name used in the corresponding Coil:Heating:DX:VariableSpeed objec" +
    "t.")]
[JsonProperty("shdwh_heating_coil_name")]
public string ShdwhHeatingCoilName { get; set; } = "";
        

[Description("Must match the name used in the corresponding Coil:WaterHeating:AirToWaterHeatPum" +
    "p:VariableSpeed object.")]
[JsonProperty("shdwh_water_heating_coil_name")]
public string ShdwhWaterHeatingCoilName { get; set; } = "";
        

[Description("Indoor Temperature above which Indoor Overcooling is Allowed during Cooling Opera" +
    "tion")]
[JsonProperty("indoor_temperature_limit_for_scwh_mode")]
public System.Nullable<float> IndoorTemperatureLimitForScwhMode { get; set; } = (System.Nullable<float>)Single.Parse("20", CultureInfo.InvariantCulture);
        

[Description("Ambient Temperature above which Indoor Overcooling is Allowed during Cooling Oper" +
    "ation")]
[JsonProperty("ambient_temperature_limit_for_scwh_mode")]
public System.Nullable<float> AmbientTemperatureLimitForScwhMode { get; set; } = (System.Nullable<float>)Single.Parse("27", CultureInfo.InvariantCulture);
        

[Description("Indoor Temperature above which Water Heating has the higher priority and Space He" +
    "ating Call Can be ignored.")]
[JsonProperty("indoor_temperature_above_which_wh_has_higher_priority")]
public System.Nullable<float> IndoorTemperatureAboveWhichWhHasHigherPriority { get; set; } = (System.Nullable<float>)Single.Parse("20", CultureInfo.InvariantCulture);
        

[Description("Ambient Temperature above which Water Heating has the higher priority and Space H" +
    "eating Call Can be ignored.")]
[JsonProperty("ambient_temperature_above_which_wh_has_higher_priority")]
public System.Nullable<float> AmbientTemperatureAboveWhichWhHasHigherPriority { get; set; } = (System.Nullable<float>)Single.Parse("20", CultureInfo.InvariantCulture);
        

[Description("0: match space cooling load in SCWH mode, 1: match water heating load in SCWH mod" +
    "e")]
[JsonProperty("flag_to_indicate_load_control_in_scwh_mode")]
public System.Nullable<float> FlagToIndicateLoadControlInScwhMode { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("minimum_speed_level_for_scwh_mode")]
public System.Nullable<float> MinimumSpeedLevelForScwhMode { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_water_flow_volume_before_switching_from_scdwh_to_scwh_mode")]
public System.Nullable<float> MaximumWaterFlowVolumeBeforeSwitchingFromScdwhToScwhMode { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("minimum_speed_level_for_scdwh_mode")]
public System.Nullable<float> MinimumSpeedLevelForScdwhMode { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_running_time_before_allowing_electric_resistance_heat_use_during_shdwh_mo" +
    "de")]
public System.Nullable<float> MaximumRunningTimeBeforeAllowingElectricResistanceHeatUseDuringShdwhMode { get; set; } = (System.Nullable<float>)Single.Parse("360", CultureInfo.InvariantCulture);
        

[JsonProperty("minimum_speed_level_for_shdwh_mode")]
public System.Nullable<float> MinimumSpeedLevelForShdwhMode { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    [Description("Direct expansion (DX) cooling coil and condensing unit (includes electric compres" +
        "sor and condenser fan), single-speed with packaged integrated thermal storage fo" +
        "r cooling.")]
    [JsonObject("Coil:Cooling:DX:SingleSpeed:ThermalStorage")]
    public class Coil_Cooling_DX_SingleSpeed_ThermalStorage : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("operating_mode_control_method")]
public Coil_Cooling_DX_SingleSpeed_ThermalStorage_OperatingModeControlMethod OperatingModeControlMethod { get; set; } = (Coil_Cooling_DX_SingleSpeed_ThermalStorage_OperatingModeControlMethod)Enum.Parse(typeof(Coil_Cooling_DX_SingleSpeed_ThermalStorage_OperatingModeControlMethod), "EMSControlled");
        

[Description("This field is used if the control method is set to ScheduledModes Schedule values" +
    " control operating mode: 0=off, 1=cooling only, 2= cooling and charge, 3= coolin" +
    "g and discharge, 4= charge only, and 5= discharge only")]
[JsonProperty("operation_mode_control_schedule_name")]
public string OperationModeControlScheduleName { get; set; } = "";
        

[JsonProperty("storage_type")]
public Coil_Cooling_DX_SingleSpeed_ThermalStorage_StorageType StorageType { get; set; } = (Coil_Cooling_DX_SingleSpeed_ThermalStorage_StorageType)Enum.Parse(typeof(Coil_Cooling_DX_SingleSpeed_ThermalStorage_StorageType), "Ice");
        

[Description("This field is required when Storage Type is UserDefinedFluidType")]
[JsonProperty("user_defined_fluid_type")]
public string UserDefinedFluidType { get; set; } = "";
        

[Description("required field if Storage Type is Water or UserDefinedFluidType")]
[JsonProperty("fluid_storage_volume")]
public string FluidStorageVolume { get; set; } = "";
        

[Description("required field if Storage Type is Ice")]
[JsonProperty("ice_storage_capacity")]
public string IceStorageCapacity { get; set; } = "";
        

[Description("If one of the previous two fields is set to autocalculate, this determines the st" +
    "orage capacity as a function of Cooling Only Mode Rated Total Evaporator Cooling" +
    " Capacity")]
[JsonProperty("storage_capacity_sizing_factor")]
public System.Nullable<float> StorageCapacitySizingFactor { get; set; } = null;
        

[JsonProperty("storage_tank_ambient_temperature_node_name")]
public string StorageTankAmbientTemperatureNodeName { get; set; } = "";
        

[JsonProperty("storage_tank_to_ambient_u_value_times_area_heat_transfer_coefficient")]
public System.Nullable<float> StorageTankToAmbientUValueTimesAreaHeatTransferCoefficient { get; set; } = null;
        

[Description("required field if Storage Type is Water or UserDefinedFluidType")]
[JsonProperty("fluid_storage_tank_rating_temperature")]
public System.Nullable<float> FluidStorageTankRatingTemperature { get; set; } = null;
        

[Description("Flow rate corresponding to rated total cooling capacity, Rated SHR and Rated COP")]
[JsonProperty("rated_evaporator_air_flow_rate")]
public string RatedEvaporatorAirFlowRate { get; set; } = "";
        

[JsonProperty("evaporator_air_inlet_node_name")]
public string EvaporatorAirInletNodeName { get; set; } = "";
        

[JsonProperty("evaporator_air_outlet_node_name")]
public string EvaporatorAirOutletNodeName { get; set; } = "";
        

[JsonProperty("cooling_only_mode_available")]
public Coil_Cooling_DX_SingleSpeed_ThermalStorage_CoolingOnlyModeAvailable CoolingOnlyModeAvailable { get; set; } = (Coil_Cooling_DX_SingleSpeed_ThermalStorage_CoolingOnlyModeAvailable)Enum.Parse(typeof(Coil_Cooling_DX_SingleSpeed_ThermalStorage_CoolingOnlyModeAvailable), "No");
        

[Description(@"required field if Cooling Only Mode is available or if autocalculating sizes gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty("cooling_only_mode_rated_total_evaporator_cooling_capacity")]
public string CoolingOnlyModeRatedTotalEvaporatorCoolingCapacity { get; set; } = "";
        

[Description("required field if Cooling Only Mode is available Rated sensible heat ratio (gross" +
    " sensible capacity/gross total capacity) sensible and total capacities do not in" +
    "clude supply fan heat")]
[JsonProperty("cooling_only_mode_rated_sensible_heat_ratio")]
public System.Nullable<float> CoolingOnlyModeRatedSensibleHeatRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[Description("Gross cooling capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply fan heat or supply fan electrical energy input required " +
    "field if Cooling Only Mode is available")]
[JsonProperty("cooling_only_mode_rated_cop")]
public System.Nullable<float> CoolingOnlyModeRatedCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description(@"required field if Cooling Only Mode is available Any curve or table with two independent variables can be used biquadratic curve = a + b*ewb + c*ewb**2 + d*db + e*db**2 + f*ewb*db x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty("cooling_only_mode_total_evaporator_cooling_capacity_function_of_temperature_curve" +
    "_name")]
public string CoolingOnlyModeTotalEvaporatorCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("required field if Cooling Only Mode is available Any curve or table with one inde" +
    "pendent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = " +
    "a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air f" +
    "low rate")]
[JsonProperty("cooling_only_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_cur" +
    "ve_name")]
public string CoolingOnlyModeTotalEvaporatorCoolingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description(@"required field if Cooling Only Mode is available Any curve or table with two independent variables can be used curve = a + b*ewb + c*ewb**2 + d*db + e*db**2 + f*ewb*db x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty("cooling_only_mode_energy_input_ratio_function_of_temperature_curve_name")]
public string CoolingOnlyModeEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("required field if Cooling Only Mode is available Any curve or table with one inde" +
    "pendent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = " +
    "a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air f" +
    "low")]
[JsonProperty("cooling_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name")]
public string CoolingOnlyModeEnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description(@"required field if Cooling Only Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x = PLR = part load ratio (evaporator cooling load/steady state capacity)")]
[JsonProperty("cooling_only_mode_part_load_fraction_correlation_curve_name")]
public string CoolingOnlyModePartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description(@"required field if Cooling Only Mode is available Any curve or table with two independent variables can be used curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb x = ewb = evaporator entering wet-bulb temperature seen by the cooling coil (C) y = edb = evaporator entering dry-bulb temperature seen by the cooling coil (C)")]
[JsonProperty("cooling_only_mode_sensible_heat_ratio_function_of_temperature_curve_name")]
public string CoolingOnlyModeSensibleHeatRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("required field if Cooling Only Mode is available Any curve or table with one inde" +
    "pendent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = " +
    "a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air f" +
    "low")]
[JsonProperty("cooling_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name")]
public string CoolingOnlyModeSensibleHeatRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("cooling_and_charge_mode_available")]
public Coil_Cooling_DX_SingleSpeed_ThermalStorage_CoolingAndChargeModeAvailable CoolingAndChargeModeAvailable { get; set; } = (Coil_Cooling_DX_SingleSpeed_ThermalStorage_CoolingAndChargeModeAvailable)Enum.Parse(typeof(Coil_Cooling_DX_SingleSpeed_ThermalStorage_CoolingAndChargeModeAvailable), "No");
        

[Description(@"required field if Cooling And Charge Mode is available gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb thermal storage tank at Fluid Storage Tank Rating Temperature (water or fluid) or storage faction of 0.5 (ice)")]
[JsonProperty("cooling_and_charge_mode_rated_total_evaporator_cooling_capacity")]
public string CoolingAndChargeModeRatedTotalEvaporatorCoolingCapacity { get; set; } = "";
        

[Description("If previous field is autocalculate, this determines the evaporator capacity as a " +
    "multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity")]
[JsonProperty("cooling_and_charge_mode_capacity_sizing_factor")]
public System.Nullable<float> CoolingAndChargeModeCapacitySizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[Description(@"required field if Cooling And Charge Mode is available net capacity including any internal devices rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb thermal storage tank at Fluid Storage Tank Rating Temperature (water or fluid) or storage faction of 0.5 (ice)")]
[JsonProperty("cooling_and_charge_mode_rated_storage_charging_capacity")]
public string CoolingAndChargeModeRatedStorageChargingCapacity { get; set; } = "";
        

[Description("If previous field is autocalculate, this determines the storage cooling capacity " +
    "as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity" +
    "")]
[JsonProperty("cooling_and_charge_mode_storage_capacity_sizing_factor")]
public System.Nullable<float> CoolingAndChargeModeStorageCapacitySizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[Description("required field if Cooling And Charge Mode is available Rated sensible heat ratio " +
    "(gross sensible evaporator capacity/gross total evaporator capacity) sensible an" +
    "d total capacities do not include supply fan heat")]
[JsonProperty("cooling_and_charge_mode_rated_sensible_heat_ratio")]
public System.Nullable<float> CoolingAndChargeModeRatedSensibleHeatRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[Description("Gross evaporator cooling capacity divided by power input to the compressor (for c" +
    "ooling) and outdoor fan, does not include supply fan heat or supply fan electric" +
    "al energy input required field if Cooling And Charge Mode is available")]
[JsonProperty("cooling_and_charge_mode_cooling_rated_cop")]
public System.Nullable<float> CoolingAndChargeModeCoolingRatedCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description("net cooling capacity divided by power input to the compressor (for charging) and " +
    "outdoor fan, includes any internal devices required field if Cooling And Charge " +
    "Mode is available")]
[JsonProperty("cooling_and_charge_mode_charging_rated_cop")]
public System.Nullable<float> CoolingAndChargeModeChargingRatedCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description(@"required field if Cooling And Charge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty("cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_temperature" +
    "_curve_name")]
public string CoolingAndChargeModeTotalEvaporatorCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("required field if Cooling And Charge Mode is available Any curve or table with on" +
    "e independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic cu" +
    "rve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator" +
    " air flow")]
[JsonProperty("cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_flow_fracti" +
    "on_curve_name")]
public string CoolingAndChargeModeTotalEvaporatorCoolingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description(@"required field if Cooling And Charge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty("cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_temperature_cur" +
    "ve_name")]
public string CoolingAndChargeModeEvaporatorEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("required field if Cooling And Charge Mode is available Any curve or table with on" +
    "e independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic cu" +
    "rve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator" +
    " air flow")]
[JsonProperty("cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_c" +
    "urve_name")]
public string CoolingAndChargeModeEvaporatorEnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description(@"required field if Cooling And Charge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x = PLR = part load ratio (evaporator cooling load/steady state capacity)")]
[JsonProperty("cooling_and_charge_mode_evaporator_part_load_fraction_correlation_curve_name")]
public string CoolingAndChargeModeEvaporatorPartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description(@"required field if Cooling And Charge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty("cooling_and_charge_mode_storage_charge_capacity_function_of_temperature_curve_nam" +
    "e")]
public string CoolingAndChargeModeStorageChargeCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"required field if Cooling And Charge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x = PLR = part load ratio (evaporator cooling load/steady state capacity)")]
[JsonProperty("cooling_and_charge_mode_storage_charge_capacity_function_of_total_evaporator_plr_" +
    "curve_name")]
public string CoolingAndChargeModeStorageChargeCapacityFunctionOfTotalEvaporatorPlrCurveName { get; set; } = "";
        

[Description(@"required field if Cooling And Charge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty("cooling_and_charge_mode_storage_energy_input_ratio_function_of_temperature_curve_" +
    "name")]
public string CoolingAndChargeModeStorageEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("required field if Cooling And Charge Mode is available Any curve or table with on" +
    "e independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic cu" +
    "rve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator" +
    " air flow")]
[JsonProperty("cooling_and_charge_mode_storage_energy_input_ratio_function_of_flow_fraction_curv" +
    "e_name")]
public string CoolingAndChargeModeStorageEnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description(@"required field if Cooling And Charge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x = PLR = part load ratio (evaporator cooling load/steady state capacity)")]
[JsonProperty("cooling_and_charge_mode_storage_energy_part_load_fraction_correlation_curve_name")]
public string CoolingAndChargeModeStorageEnergyPartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description(@"required field if Cooling And Charge Mode is available Curves or tables with either two or three independent variables can be used. Curve:Biquadratic, Table:Lookup, Curve:Bicubic and Curve:QuadraticLinear allowed curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb x = ewb = entering wet-bulb temperature seen by the cooling coil (C) y = edb = entering dry-bulb temperature seen by the cooling coil (C) Also allows Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = edb, z = stes) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty("cooling_and_charge_mode_sensible_heat_ratio_function_of_temperature_curve_name")]
public string CoolingAndChargeModeSensibleHeatRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("required field if Cooling And Charge Mode is available Any curve or table with on" +
    "e independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic cu" +
    "rve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator" +
    " air flow")]
[JsonProperty("cooling_and_charge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name")]
public string CoolingAndChargeModeSensibleHeatRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("cooling_and_discharge_mode_available")]
public Coil_Cooling_DX_SingleSpeed_ThermalStorage_CoolingAndDischargeModeAvailable CoolingAndDischargeModeAvailable { get; set; } = (Coil_Cooling_DX_SingleSpeed_ThermalStorage_CoolingAndDischargeModeAvailable)Enum.Parse(typeof(Coil_Cooling_DX_SingleSpeed_ThermalStorage_CoolingAndDischargeModeAvailable), "No");
        

[Description(@"required field if Cooling And Discharge Mode is available gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb thermal storage tank at Fluid Storage Tank Rating Temperature (water or fluid) or storage faction of 0.5 (ice)")]
[JsonProperty("cooling_and_discharge_mode_rated_total_evaporator_cooling_capacity")]
public string CoolingAndDischargeModeRatedTotalEvaporatorCoolingCapacity { get; set; } = "";
        

[Description("If previous field is autocalculate, this determines the charging capacity as a mu" +
    "ltiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity")]
[JsonProperty("cooling_and_discharge_mode_evaporator_capacity_sizing_factor")]
public System.Nullable<float> CoolingAndDischargeModeEvaporatorCapacitySizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description(@"required field if Cooling And Discharge Mode is available net capacity including any internal devices rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb thermal storage tank at 26.7 C (water) or storage faction of 0.5 (ice)")]
[JsonProperty("cooling_and_discharge_mode_rated_storage_discharging_capacity")]
public string CoolingAndDischargeModeRatedStorageDischargingCapacity { get; set; } = "";
        

[Description("If previous field is autocalculate, this determines the charging capacity as a mu" +
    "ltiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity")]
[JsonProperty("cooling_and_discharge_mode_storage_discharge_capacity_sizing_factor")]
public System.Nullable<float> CoolingAndDischargeModeStorageDischargeCapacitySizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("required field if Cooling And Discharge Mode is available Rated sensible heat rat" +
    "io (gross sensible evaporator capacity/gross total evaporator capacity) sensible" +
    " and total capacities do not include supply fan heat")]
[JsonProperty("cooling_and_discharge_mode_rated_sensible_heat_ratio")]
public System.Nullable<float> CoolingAndDischargeModeRatedSensibleHeatRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[Description("Gross evaporator cooling capacity divided by power input to the compressor (for c" +
    "ooling) and outdoor fan, does not include supply fan heat or supply fan electric" +
    "al energy input required field if Cooling And Discharge Mode is available")]
[JsonProperty("cooling_and_discharge_mode_cooling_rated_cop")]
public System.Nullable<float> CoolingAndDischargeModeCoolingRatedCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description("gross cooling capacity divided by power input to the compressor (for discharging)" +
    ", includes any internal devices for discharging storage but not supply fan requi" +
    "red field if Cooling And Discharge Mode is available")]
[JsonProperty("cooling_and_discharge_mode_discharging_rated_cop")]
public System.Nullable<float> CoolingAndDischargeModeDischargingRatedCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description(@"required field if Cooling Only Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty("cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_temperat" +
    "ure_curve_name")]
public string CoolingAndDischargeModeTotalEvaporatorCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("required field if Cooling And Discharge Mode is available Any curve or table with" +
    " one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic" +
    " curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evapora" +
    "tor air flow")]
[JsonProperty("cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_flow_fra" +
    "ction_curve_name")]
public string CoolingAndDischargeModeTotalEvaporatorCoolingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description(@"required field if Cooling And Discharge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty("cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_temperature_" +
    "curve_name")]
public string CoolingAndDischargeModeEvaporatorEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("required field if Cooling And Discharge Mode is available Any curve or table with" +
    " one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic" +
    " curve = a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load evaporator " +
    "air flow")]
[JsonProperty("cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_flow_fractio" +
    "n_curve_name")]
public string CoolingAndDischargeModeEvaporatorEnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description(@"required field if Cooling And Discharge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x = PLR = part load ratio (evaporator cooling load/steady state capacity)")]
[JsonProperty("cooling_and_discharge_mode_evaporator_part_load_fraction_correlation_curve_name")]
public string CoolingAndDischargeModeEvaporatorPartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description(@"required field if Cooling And Discharge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty("cooling_and_discharge_mode_storage_discharge_capacity_function_of_temperature_cur" +
    "ve_name")]
public string CoolingAndDischargeModeStorageDischargeCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("required field if Cooling And Discharge Mode is available Any curve or table with" +
    " one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic" +
    " curve = a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load evaporator " +
    "air flow")]
[JsonProperty("cooling_and_discharge_mode_storage_discharge_capacity_function_of_flow_fraction_c" +
    "urve_name")]
public string CoolingAndDischargeModeStorageDischargeCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description(@"required field if Cooling And Discharge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x =PLR = part load ratio (evaporator cooling load/steady state capacity)")]
[JsonProperty("cooling_and_discharge_mode_storage_discharge_capacity_function_of_total_evaporato" +
    "r_plr_curve_name")]
public string CoolingAndDischargeModeStorageDischargeCapacityFunctionOfTotalEvaporatorPlrCurveName { get; set; } = "";
        

[Description(@"required field if Cooling And Discharge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty("cooling_and_discharge_mode_storage_energy_input_ratio_function_of_temperature_cur" +
    "ve_name")]
public string CoolingAndDischargeModeStorageEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("required field if Cooling And Discharge Mode is available Any curve or table with" +
    " one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic" +
    " curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evapora" +
    "tor air flow")]
[JsonProperty("cooling_and_discharge_mode_storage_energy_input_ratio_function_of_flow_fraction_c" +
    "urve_name")]
public string CoolingAndDischargeModeStorageEnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description(@"required field if Cooling And Discharge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x = PLR = part load ratio (evaporator cooling load/steady state capacity)")]
[JsonProperty("cooling_and_discharge_mode_storage_energy_part_load_fraction_correlation_curve_na" +
    "me")]
public string CoolingAndDischargeModeStorageEnergyPartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description(@"required field if Cooling And Discharge Mode is available Curves or tables with either two or three independent variables can be used. curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb x = ewb = entering wet-bulb temperature seen by the cooling coil (C) y = edb = entering dry-bulb temperature seen by the cooling coil (C) Also allows Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = edb, z = stes) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty("cooling_and_discharge_mode_sensible_heat_ratio_function_of_temperature_curve_name" +
    "")]
public string CoolingAndDischargeModeSensibleHeatRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("required field if Cooling And Discharge Mode is available Any curve or table with" +
    " one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic" +
    " curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evapora" +
    "tor air flow")]
[JsonProperty("cooling_and_discharge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_na" +
    "me")]
public string CoolingAndDischargeModeSensibleHeatRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[JsonProperty("charge_only_mode_available")]
public Coil_Cooling_DX_SingleSpeed_ThermalStorage_ChargeOnlyModeAvailable ChargeOnlyModeAvailable { get; set; } = (Coil_Cooling_DX_SingleSpeed_ThermalStorage_ChargeOnlyModeAvailable)Enum.Parse(typeof(Coil_Cooling_DX_SingleSpeed_ThermalStorage_ChargeOnlyModeAvailable), "No");
        

[Description("required field if Charge Only  Mode is available net capacity including any inter" +
    "nal devices air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-" +
    "bulb thermal storage tank at 26.7 C (water) or storage faction of 0.5 (ice)")]
[JsonProperty("charge_only_mode_rated_storage_charging_capacity")]
public string ChargeOnlyModeRatedStorageChargingCapacity { get; set; } = "";
        

[Description("If previous field is autocalculate, this determines the charging capacity as a mu" +
    "ltiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity")]
[JsonProperty("charge_only_mode_capacity_sizing_factor")]
public System.Nullable<float> ChargeOnlyModeCapacitySizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("net cooling capacity divided by power input to the compressor (for charging) and " +
    "outdoor fan, includes any internal devices required field if Charge Only Mode is" +
    " available")]
[JsonProperty("charge_only_mode_charging_rated_cop")]
public System.Nullable<float> ChargeOnlyModeChargingRatedCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description(@"required field if Charge Only Mode is available Any curve or table with two independent variables can be used curve = a + b*db + c*db**2 + d*stes + e*stes**2 + f*db*stes x = db = dry-bulb temperature seen by the condenser (C) y = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty("charge_only_mode_storage_charge_capacity_function_of_temperature_curve_name")]
public string ChargeOnlyModeStorageChargeCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"required field if Charge Only Mode is available Any curve or table with two independent variables can be used curve = a + b*db + c*db**2 + d*stes + e*stes**2 + f*db*stes x = db = dry-bulb temperature seen by the condenser (C) y = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty("charge_only_mode_storage_energy_input_ratio_function_of_temperature_curve_name")]
public string ChargeOnlyModeStorageEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[JsonProperty("discharge_only_mode_available")]
public Coil_Cooling_DX_SingleSpeed_ThermalStorage_DischargeOnlyModeAvailable DischargeOnlyModeAvailable { get; set; } = (Coil_Cooling_DX_SingleSpeed_ThermalStorage_DischargeOnlyModeAvailable)Enum.Parse(typeof(Coil_Cooling_DX_SingleSpeed_ThermalStorage_DischargeOnlyModeAvailable), "No");
        

[Description("required field if Discharge Only Mode is available net capacity including any int" +
    "ernal devices rating point: air entering the cooling coil at 26.7 C dry-bulb/19." +
    "4 C wet-bulb, and thermal storage tank at 26.7 C (water) or storage faction of 0" +
    ".5 (ice)")]
[JsonProperty("discharge_only_mode_rated_storage_discharging_capacity")]
public string DischargeOnlyModeRatedStorageDischargingCapacity { get; set; } = "";
        

[Description("If previous field is autocalculate, this determines the discharging capacity as a" +
    " multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity")]
[JsonProperty("discharge_only_mode_capacity_sizing_factor")]
public System.Nullable<float> DischargeOnlyModeCapacitySizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("required field if Discharge Only Mode is available Rated sensible heat ratio (gro" +
    "ss sensible evaporator capacity/gross total evaporator capacity) sensible and to" +
    "tal capacities do not include supply fan heat")]
[JsonProperty("discharge_only_mode_rated_sensible_heat_ratio")]
public System.Nullable<float> DischargeOnlyModeRatedSensibleHeatRatio { get; set; } = null;
        

[Description("required field if Discharge Only Mode is available gross cooling capacity divided" +
    " by power input to the compressor (for discharging), includes any internal devic" +
    "es for discharging storage but not supply fan")]
[JsonProperty("discharge_only_mode_rated_cop")]
public System.Nullable<float> DischargeOnlyModeRatedCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description(@"required field if Discharge Only Mode is available Any curve or table with two independent variables can be used curve = a + b*ewb + c*ewb**2 + d*stes + e*stes**2 + f*ewb*stes x = ewb = evaporator entering wet-bulb temperature (C) y = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty("discharge_only_mode_storage_discharge_capacity_function_of_temperature_curve_name" +
    "")]
public string DischargeOnlyModeStorageDischargeCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("required field if Discharge Only Mode is available Any curve or table with one in" +
    "dependent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve " +
    "= a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air" +
    " flow")]
[JsonProperty("discharge_only_mode_storage_discharge_capacity_function_of_flow_fraction_curve_na" +
    "me")]
public string DischargeOnlyModeStorageDischargeCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description(@"required field if Discharge Only Mode is available Any curve or table with two independent variables can be used curve = a + b*ewb + c*ewb**2 + d*stes + e*stes**2 + f*ewb*stes x = ewb = evaporator entering wet-bulb temperature (C) y = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty("discharge_only_mode_energy_input_ratio_function_of_temperature_curve_name")]
public string DischargeOnlyModeEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("required field if Discharge Only Mode is available Any curve or table with one in" +
    "dependent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve " +
    "= a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air" +
    " flow")]
[JsonProperty("discharge_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name")]
public string DischargeOnlyModeEnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("required field if Discharge Only Mode is available Any curve or table with one in" +
    "dependent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curv" +
    "e = a + b*PLR + c*PLR**2 + d*PLR**3")]
[JsonProperty("discharge_only_mode_part_load_fraction_correlation_curve_name")]
public string DischargeOnlyModePartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description(@"required field if Discharge Only Mode is available Curves or tables with either two or three independent variables can be used. For two independent variables: x = ewb = entering wet-bulb temperature seen by the cooling coil (C) y = edb = entering dry-bulb temperature seen by the cooling coil (C) For three independent variables: curve or table = func(x = ewb, y = edb, z = stes) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty("discharge_only_mode_sensible_heat_ratio_function_of_temperature_curve_name")]
public string DischargeOnlyModeSensibleHeatRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("required field if Discharge Only Mode is available Any curve or table with one in" +
    "dependent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve " +
    "= a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load evaporator air flo" +
    "w")]
[JsonProperty("discharge_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name")]
public string DischargeOnlyModeSensibleHeatRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("controls and miscellaneous standby ancillary electric power draw, when available")]
[JsonProperty("ancillary_electric_power")]
public System.Nullable<float> AncillaryElectricPower { get; set; } = null;
        

[JsonProperty("cold_weather_operation_minimum_outdoor_air_temperature")]
public System.Nullable<float> ColdWeatherOperationMinimumOutdoorAirTemperature { get; set; } = null;
        

[JsonProperty("cold_weather_operation_ancillary_power")]
public System.Nullable<float> ColdWeatherOperationAncillaryPower { get; set; } = null;
        

[Description("Enter the name of an outdoor air node. This node name is also specified in an Out" +
    "doorAir:Node or OutdoorAir:NodeList object.")]
[JsonProperty("condenser_air_inlet_node_name")]
public string CondenserAirInletNodeName { get; set; } = "";
        

[JsonProperty("condenser_air_outlet_node_name")]
public string CondenserAirOutletNodeName { get; set; } = "";
        

[Description("Used to calculate condenser leaving conditions and water use if evaporatively coo" +
    "led.")]
[JsonProperty("condenser_design_air_flow_rate")]
public string CondenserDesignAirFlowRate { get; set; } = "";
        

[Description("If previous field is autocalculate, this determines the condenser air flow size a" +
    "s a multiplier on the Rated Evaporator Air Flow Rate.")]
[JsonProperty("condenser_air_flow_sizing_factor")]
public System.Nullable<float> CondenserAirFlowSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("condenser_type")]
public Coil_Cooling_DX_SingleSpeed_ThermalStorage_CondenserType CondenserType { get; set; } = (Coil_Cooling_DX_SingleSpeed_ThermalStorage_CondenserType)Enum.Parse(typeof(Coil_Cooling_DX_SingleSpeed_ThermalStorage_CondenserType), "AirCooled");
        

[Description("required field if condenser type is evaporatively cooled")]
[JsonProperty("evaporative_condenser_effectiveness")]
public System.Nullable<float> EvaporativeCondenserEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[Description("Rated power consumed by the evaporative condenser\'s water pump")]
[JsonProperty("evaporative_condenser_pump_rated_power_consumption")]
public string EvaporativeCondenserPumpRatedPowerConsumption { get; set; } = (System.String)"0";
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off. If this field is blank, the basin heater is always available.")]
[JsonProperty("basin_heater_capacity")]
public System.Nullable<float> BasinHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdo" +
    "or dry-bulb temperature when the basin heater turns on.")]
[JsonProperty("basin_heater_setpoint_temperature")]
public System.Nullable<float> BasinHeaterSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty("basin_heater_availability_schedule_name")]
public string BasinHeaterAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("supply_water_storage_tank_name")]
public string SupplyWaterStorageTankName { get; set; } = "";
        

[JsonProperty("condensate_collection_water_storage_tank_name")]
public string CondensateCollectionWaterStorageTankName { get; set; } = "";
        

[JsonProperty("storage_tank_plant_connection_inlet_node_name")]
public string StorageTankPlantConnectionInletNodeName { get; set; } = "";
        

[JsonProperty("storage_tank_plant_connection_outlet_node_name")]
public string StorageTankPlantConnectionOutletNodeName { get; set; } = "";
        

[JsonProperty("storage_tank_plant_connection_design_flow_rate")]
public System.Nullable<float> StorageTankPlantConnectionDesignFlowRate { get; set; } = null;
        

[JsonProperty("storage_tank_plant_connection_heat_transfer_effectiveness")]
public System.Nullable<float> StorageTankPlantConnectionHeatTransferEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[Description("For fluid storage tanks only, minimum limit for storage tank If omitted,then the " +
    "minimum temperature limit is that used for fluid property data.")]
[JsonProperty("storage_tank_minimum_operating_limit_fluid_temperature")]
public System.Nullable<float> StorageTankMinimumOperatingLimitFluidTemperature { get; set; } = null;
        

[Description("For fluid storage tanks only, maximum limit for storage tank If omitted,then the " +
    "maximum temperature limit is that used for fluid property data.")]
[JsonProperty("storage_tank_maximum_operating_limit_fluid_temperature")]
public System.Nullable<float> StorageTankMaximumOperatingLimitFluidTemperature { get; set; } = null;
    }
    
    public enum Coil_Cooling_DX_SingleSpeed_ThermalStorage_OperatingModeControlMethod
    {
        
        [JsonProperty("EMSControlled")]
        EMSControlled = 0,
        
        [JsonProperty("ScheduledModes")]
        ScheduledModes = 1,
    }
    
    public enum Coil_Cooling_DX_SingleSpeed_ThermalStorage_StorageType
    {
        
        [JsonProperty("Ice")]
        Ice = 0,
        
        [JsonProperty("UserDefinedFluidType")]
        UserDefinedFluidType = 1,
        
        [JsonProperty("Water")]
        Water = 2,
    }
    
    public enum Coil_Cooling_DX_SingleSpeed_ThermalStorage_CoolingOnlyModeAvailable
    {
        
        [JsonProperty("No")]
        No = 0,
        
        [JsonProperty("Yes")]
        Yes = 1,
    }
    
    public enum Coil_Cooling_DX_SingleSpeed_ThermalStorage_CoolingAndChargeModeAvailable
    {
        
        [JsonProperty("No")]
        No = 0,
        
        [JsonProperty("Yes")]
        Yes = 1,
    }
    
    public enum Coil_Cooling_DX_SingleSpeed_ThermalStorage_CoolingAndDischargeModeAvailable
    {
        
        [JsonProperty("No")]
        No = 0,
        
        [JsonProperty("Yes")]
        Yes = 1,
    }
    
    public enum Coil_Cooling_DX_SingleSpeed_ThermalStorage_ChargeOnlyModeAvailable
    {
        
        [JsonProperty("No")]
        No = 0,
        
        [JsonProperty("Yes")]
        Yes = 1,
    }
    
    public enum Coil_Cooling_DX_SingleSpeed_ThermalStorage_DischargeOnlyModeAvailable
    {
        
        [JsonProperty("No")]
        No = 0,
        
        [JsonProperty("Yes")]
        Yes = 1,
    }
    
    public enum Coil_Cooling_DX_SingleSpeed_ThermalStorage_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
    }
}
namespace BH.oM.Adapters.EnergyPlus.ComplianceObjects
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Building level inputs related to compliance to building standards, building codes" +
        ", and beyond energy code programs.")]
    [JsonObject("Compliance:Building")]
    public class Compliance_Building : BHoMObject, IEnergyPlusClass
    {
        

[Description("Additional degrees of rotation to be used with the requirement in ASHRAE Standard" +
    " 90.1 Appendix G that states that the baseline building should be rotated in fou" +
    "r directions.")]
[JsonProperty("building_rotation_for_appendix_g")]
public System.Nullable<float> BuildingRotationForAppendixG { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
}
namespace BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"This tower model is based on Merkel's theory, which is also the basis for the tower model in ASHRAE's HVAC1 Toolkit. The open wet cooling tower is modeled as a counter flow heat exchanger with a single-speed fan drawing air through the tower (induced-draft configuration). Added fluid bypass as an additional capacity control. 8/2008. For a multi-cell tower, the capacity and air/water flow rate inputs are for the entire tower.")]
    [JsonObject("CoolingTower:SingleSpeed")]
    public class CoolingTower_SingleSpeed : BHoMObject, IEnergyPlusClass
    {
        

[Description("Name of tower water inlet node")]
[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[Description("Name of tower water outlet node")]
[JsonProperty("water_outlet_node_name")]
public string WaterOutletNodeName { get; set; } = "";
        

[Description("Leave field blank if tower performance input method is NominalCapacity")]
[JsonProperty("design_water_flow_rate")]
public string DesignWaterFlowRate { get; set; } = "";
        

[JsonProperty("design_air_flow_rate")]
public string DesignAirFlowRate { get; set; } = "";
        

[Description("This is the fan motor electric input power")]
[JsonProperty("design_fan_power")]
public string DesignFanPower { get; set; } = "";
        

[Description("Leave field blank if tower performance input method is NominalCapacity")]
[JsonProperty("design_u_factor_times_area_value")]
public string DesignUFactorTimesAreaValue { get; set; } = "";
        

[JsonProperty("free_convection_regime_air_flow_rate")]
public string FreeConvectionRegimeAirFlowRate { get; set; } = (System.String)"0";
        

[Description("This field is only used if the previous field is set to autocalculate.")]
[JsonProperty("free_convection_regime_air_flow_rate_sizing_factor")]
public System.Nullable<float> FreeConvectionRegimeAirFlowRateSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[JsonProperty("free_convection_regime_u_factor_times_area_value")]
public string FreeConvectionRegimeUFactorTimesAreaValue { get; set; } = (System.String)"0";
        

[Description("This field is only used if the previous field is set to autocalculate and the Per" +
    "formance Input Method is UFactorTimesAreaAndDesignWaterFlowRate")]
[JsonProperty("free_convection_u_factor_times_area_value_sizing_factor")]
public System.Nullable<float> FreeConvectionUFactorTimesAreaValueSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[Description("User can define tower thermal performance by specifying the tower UA, the Design " +
    "Air Flow Rate and the Design Water Flow Rate, or by specifying the tower nominal" +
    " capacity")]
[JsonProperty("performance_input_method")]
public CoolingTower_SingleSpeed_PerformanceInputMethod PerformanceInputMethod { get; set; } = (CoolingTower_SingleSpeed_PerformanceInputMethod)Enum.Parse(typeof(CoolingTower_SingleSpeed_PerformanceInputMethod), "UFactorTimesAreaAndDesignWaterFlowRate");
        

[JsonProperty("heat_rejection_capacity_and_nominal_capacity_sizing_ratio")]
public System.Nullable<float> HeatRejectionCapacityAndNominalCapacitySizingRatio { get; set; } = (System.Nullable<float>)Single.Parse("1.25", CultureInfo.InvariantCulture);
        

[Description(@"Nominal tower capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt (3 gpm/ton). Nominal tower capacity times (1.25) gives the actual tower heat rejection at these operating conditions.")]
[JsonProperty("nominal_capacity")]
public System.Nullable<float> NominalCapacity { get; set; } = null;
        

[Description(@"Tower capacity in free convection regime with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt of nominal tower capacity (3 gpm/ton). Tower free convection capacity times (1.25) gives the actual tower heat rejection at these operating conditions.")]
[JsonProperty("free_convection_capacity")]
public string FreeConvectionCapacity { get; set; } = "";
        

[Description("This field is only used if the previous field is set to autocalculate")]
[JsonProperty("free_convection_nominal_capacity_sizing_factor")]
public System.Nullable<float> FreeConvectionNominalCapacitySizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[Description("Enter the tower\'s design inlet air dry-bulb temperature")]
[JsonProperty("design_inlet_air_dry_bulb_temperature")]
public System.Nullable<float> DesignInletAirDryBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("35", CultureInfo.InvariantCulture);
        

[Description("Enter the tower\'s design inlet air wet-bulb temperature")]
[JsonProperty("design_inlet_air_wet_bulb_temperature")]
public System.Nullable<float> DesignInletAirWetBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("25.6", CultureInfo.InvariantCulture);
        

[Description("Enter the approach temperature corresponding to the design inlet air wet-bulb tem" +
    "perature and design range temperature. Design approach temp = outlet water tempe" +
    "rature minus inlet air wet-bulb temperature at design conditions. Autosized to 3" +
    ".9 deltaC.")]
[JsonProperty("design_approach_temperature")]
public string DesignApproachTemperature { get; set; } = (System.String)"Autosize";
        

[Description("Enter the range temperature corresponding to the design inlet air wet-bulb temper" +
    "ature and design approach temperature. Design range = inlet water temperature mi" +
    "nus outlet water temperature at design conditions. Autosized to 5.5 deltaC.")]
[JsonProperty("design_range_temperature")]
public string DesignRangeTemperature { get; set; } = (System.String)"Autosize";
        

[Description("This heater maintains the basin water temperature at the basin heater setpoint te" +
    "mperature when the outdoor air temperature falls below the setpoint temperature." +
    " The basin heater only operates when water is not flowing through the tower.")]
[JsonProperty("basin_heater_capacity")]
public System.Nullable<float> BasinHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Enter the outdoor dry-bulb temperature when the basin heater turns on")]
[JsonProperty("basin_heater_setpoint_temperature")]
public System.Nullable<float> BasinHeaterSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description(@"Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty("basin_heater_operating_schedule_name")]
public string BasinHeaterOperatingScheduleName { get; set; } = "";
        

[JsonProperty("evaporation_loss_mode")]
public CoolingTower_SingleSpeed_EvaporationLossMode EvaporationLossMode { get; set; } = (CoolingTower_SingleSpeed_EvaporationLossMode)Enum.Parse(typeof(CoolingTower_SingleSpeed_EvaporationLossMode), "LossFactor");
        

[Description(@"Rate of water evaporation from the cooling tower and lost to the outdoor air [%/K] Evaporation loss is calculated as percentage of the circulating condenser water rate Value entered here is percent-per-degree K of temperature drop in the condenser water Typical values are from 0.15 to 0.27 [%/K].")]
[JsonProperty("evaporation_loss_factor")]
public System.Nullable<float> EvaporationLossFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("Rate of drift loss as a percentage of circulating condenser water flow rate Typic" +
    "al values are between 0.002 and 0.2% The default value is 0.008%")]
[JsonProperty("drift_loss_percent")]
public System.Nullable<float> DriftLossPercent { get; set; } = (System.Nullable<float>)Single.Parse("0.008", CultureInfo.InvariantCulture);
        

[JsonProperty("blowdown_calculation_mode")]
public CoolingTower_SingleSpeed_BlowdownCalculationMode BlowdownCalculationMode { get; set; } = (CoolingTower_SingleSpeed_BlowdownCalculationMode)Enum.Parse(typeof(CoolingTower_SingleSpeed_BlowdownCalculationMode), "ConcentrationRatio");
        

[Description(@"Characterizes the rate of blowdown in the cooling tower. Blowdown is water intentionally drained from the tower in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. Typical values for tower operation are 3 to 5. The default value is 3.")]
[JsonProperty("blowdown_concentration_ratio")]
public System.Nullable<float> BlowdownConcentrationRatio { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description(@"Makeup water usage due to blowdown results from occasionally draining a small amount of water in the tower basin to purge scale or other contaminants to reduce their concentration in order to maintain an acceptable level of water quality. Schedule values should reflect water usage in m3/s.")]
[JsonProperty("blowdown_makeup_water_usage_schedule_name")]
public string BlowdownMakeupWaterUsageScheduleName { get; set; } = "";
        

[JsonProperty("supply_water_storage_tank_name")]
public string SupplyWaterStorageTankName { get; set; } = "";
        

[Description("Enter the name of an outdoor air node")]
[JsonProperty("outdoor_air_inlet_node_name")]
public string OutdoorAirInletNodeName { get; set; } = "";
        

[JsonProperty("capacity_control")]
public CoolingTower_SingleSpeed_CapacityControl CapacityControl { get; set; } = (CoolingTower_SingleSpeed_CapacityControl)Enum.Parse(typeof(CoolingTower_SingleSpeed_CapacityControl), "FanCycling");
        

[JsonProperty("number_of_cells")]
public System.Nullable<float> NumberOfCells { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("cell_control")]
public CoolingTower_SingleSpeed_CellControl CellControl { get; set; } = (CoolingTower_SingleSpeed_CellControl)Enum.Parse(typeof(CoolingTower_SingleSpeed_CellControl), "MinimalCell");
        

[Description("The allowable minimal fraction of the nominal flow rate per cell")]
[JsonProperty("cell_minimum_water_flow_rate_fraction")]
public System.Nullable<float> CellMinimumWaterFlowRateFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.33", CultureInfo.InvariantCulture);
        

[Description("The allowable maximal fraction of the nominal flow rate per cell")]
[JsonProperty("cell_maximum_water_flow_rate_fraction")]
public System.Nullable<float> CellMaximumWaterFlowRateFraction { get; set; } = (System.Nullable<float>)Single.Parse("2.5", CultureInfo.InvariantCulture);
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum CoolingTower_SingleSpeed_PerformanceInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("NominalCapacity")]
        NominalCapacity = 1,
        
        [JsonProperty("UFactorTimesAreaAndDesignWaterFlowRate")]
        UFactorTimesAreaAndDesignWaterFlowRate = 2,
    }
    
    public enum CoolingTower_SingleSpeed_EvaporationLossMode
    {
        
        [JsonProperty("LossFactor")]
        LossFactor = 0,
        
        [JsonProperty("SaturatedExit")]
        SaturatedExit = 1,
    }
    
    public enum CoolingTower_SingleSpeed_BlowdownCalculationMode
    {
        
        [JsonProperty("ConcentrationRatio")]
        ConcentrationRatio = 0,
        
        [JsonProperty("ScheduledRate")]
        ScheduledRate = 1,
    }
    
    public enum CoolingTower_SingleSpeed_CapacityControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FanCycling")]
        FanCycling = 1,
        
        [JsonProperty("FluidBypass")]
        FluidBypass = 2,
    }
    
    public enum CoolingTower_SingleSpeed_CellControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MaximalCell")]
        MaximalCell = 1,
        
        [JsonProperty("MinimalCell")]
        MinimalCell = 2,
    }
    
    [Description(@"This tower model is based on Merkel's theory, which is also the basis for the tower model in ASHRAE's HVAC1 Toolkit. The open wet cooling tower is modeled as a counter flow heat exchanger with a two-speed fan drawing air through the tower (induced-draft configuration). For a multi-cell tower, the capacity and air/water flow rate inputs are for the entire tower.")]
    [JsonObject("CoolingTower:TwoSpeed")]
    public class CoolingTower_TwoSpeed : BHoMObject, IEnergyPlusClass
    {
        

[Description("Name of tower Water Inlet Node")]
[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[Description("Name of tower Water Outlet Node")]
[JsonProperty("water_outlet_node_name")]
public string WaterOutletNodeName { get; set; } = "";
        

[Description("Leave field blank if Tower Performance Input Method is NominalCapacity")]
[JsonProperty("design_water_flow_rate")]
public string DesignWaterFlowRate { get; set; } = "";
        

[JsonProperty("high_fan_speed_air_flow_rate")]
public string HighFanSpeedAirFlowRate { get; set; } = "";
        

[Description("This is the fan motor electric input power at high speed")]
[JsonProperty("high_fan_speed_fan_power")]
public string HighFanSpeedFanPower { get; set; } = "";
        

[Description("Leave field blank if Tower Performance Input Method is NominalCapacity")]
[JsonProperty("high_fan_speed_u_factor_times_area_value")]
public string HighFanSpeedUFactorTimesAreaValue { get; set; } = "";
        

[Description("Low speed air flow rate must be less than high speed air flow rate Low speed air " +
    "flow rate must be greater than free convection air flow rate")]
[JsonProperty("low_fan_speed_air_flow_rate")]
public string LowFanSpeedAirFlowRate { get; set; } = "";
        

[Description("This field is only used if the previous field is set to autocalculate.")]
[JsonProperty("low_fan_speed_air_flow_rate_sizing_factor")]
public System.Nullable<float> LowFanSpeedAirFlowRateSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[Description("This is the fan motor electric input power at low speed")]
[JsonProperty("low_fan_speed_fan_power")]
public string LowFanSpeedFanPower { get; set; } = "";
        

[Description("This field is only used if the previous field is set to autocalculate.")]
[JsonProperty("low_fan_speed_fan_power_sizing_factor")]
public System.Nullable<float> LowFanSpeedFanPowerSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.16", CultureInfo.InvariantCulture);
        

[Description("Leave field blank if tower Performance Input Method is NominalCapacity Low speed " +
    "tower UA must be less than high speed tower UA Low speed tower UA must be greate" +
    "r than free convection tower UA")]
[JsonProperty("low_fan_speed_u_factor_times_area_value")]
public string LowFanSpeedUFactorTimesAreaValue { get; set; } = "";
        

[Description("This field is only used if the previous field is set to autocalculate and the Per" +
    "formance Input Method is UFactorTimesAreaAndDesignWaterFlowRate")]
[JsonProperty("low_fan_speed_u_factor_times_area_sizing_factor")]
public System.Nullable<float> LowFanSpeedUFactorTimesAreaSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.6", CultureInfo.InvariantCulture);
        

[JsonProperty("free_convection_regime_air_flow_rate")]
public string FreeConvectionRegimeAirFlowRate { get; set; } = (System.String)"0";
        

[Description("This field is only used if the previous field is set to autocalculate.")]
[JsonProperty("free_convection_regime_air_flow_rate_sizing_factor")]
public System.Nullable<float> FreeConvectionRegimeAirFlowRateSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[Description("Leave field blank if Tower Performance Input Method is NominalCapacity")]
[JsonProperty("free_convection_regime_u_factor_times_area_value")]
public string FreeConvectionRegimeUFactorTimesAreaValue { get; set; } = (System.String)"0";
        

[Description("This field is only used if the previous field is set to autocalculate and the Per" +
    "formance Input Method is UFactorTimesAreaAndDesignWaterFlowRate")]
[JsonProperty("free_convection_u_factor_times_area_value_sizing_factor")]
public System.Nullable<float> FreeConvectionUFactorTimesAreaValueSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[Description("User can define tower thermal performance by specifying the tower UA, the Design " +
    "Air Flow Rate and the Design Water Flow Rate, or by specifying the tower nominal" +
    " capacity")]
[JsonProperty("performance_input_method")]
public CoolingTower_TwoSpeed_PerformanceInputMethod PerformanceInputMethod { get; set; } = (CoolingTower_TwoSpeed_PerformanceInputMethod)Enum.Parse(typeof(CoolingTower_TwoSpeed_PerformanceInputMethod), "UFactorTimesAreaAndDesignWaterFlowRate");
        

[JsonProperty("heat_rejection_capacity_and_nominal_capacity_sizing_ratio")]
public System.Nullable<float> HeatRejectionCapacityAndNominalCapacitySizingRatio { get; set; } = (System.Nullable<float>)Single.Parse("1.25", CultureInfo.InvariantCulture);
        

[Description(@"Nominal tower capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature, with the tower fan operating at high speed. Design water flow rate assumed to be 5.382E-8 m3/s per watt(3 gpm/ton). Nominal tower capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25) gives the actual tower heat rejection at these operating conditions.")]
[JsonProperty("high_speed_nominal_capacity")]
public System.Nullable<float> HighSpeedNominalCapacity { get; set; } = null;
        

[Description(@"Nominal tower capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature, with the tower fan operating at low speed. Design water flow rate assumed to be 5.382E-8 m3/s per watt of tower high-speed nominal capacity (3 gpm/ton). Nominal tower capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25) gives the actual tower heat rejection at these operating conditions.")]
[JsonProperty("low_speed_nominal_capacity")]
public string LowSpeedNominalCapacity { get; set; } = "";
        

[Description("This field is only used if the previous field is set to autocalculate")]
[JsonProperty("low_speed_nominal_capacity_sizing_factor")]
public System.Nullable<float> LowSpeedNominalCapacitySizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[Description(@"Tower capacity in free convection regime with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt of tower high-speed nominal capacity (3 gpm/ton). Tower free convection capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25)  gives the actual tower heat rejection at these operating conditions")]
[JsonProperty("free_convection_nominal_capacity")]
public string FreeConvectionNominalCapacity { get; set; } = "";
        

[Description("This field is only used if the previous field is set to autocalculate")]
[JsonProperty("free_convection_nominal_capacity_sizing_factor")]
public System.Nullable<float> FreeConvectionNominalCapacitySizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[Description("Enter the tower\'s design inlet air dry-bulb temperature")]
[JsonProperty("design_inlet_air_dry_bulb_temperature")]
public System.Nullable<float> DesignInletAirDryBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("35", CultureInfo.InvariantCulture);
        

[Description("Enter the tower\'s design inlet air wet-bulb temperature")]
[JsonProperty("design_inlet_air_wet_bulb_temperature")]
public System.Nullable<float> DesignInletAirWetBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("25.6", CultureInfo.InvariantCulture);
        

[Description("Enter the approach temperature corresponding to the design inlet air wet-bulb tem" +
    "perature and design range temperature. Design approach temp = outlet water tempe" +
    "rature minus inlet air wet-bulb temperature at design conditions. Autosized to 3" +
    ".9 deltaC.")]
[JsonProperty("design_approach_temperature")]
public string DesignApproachTemperature { get; set; } = (System.String)"Autosize";
        

[Description("Enter the range temperature corresponding to the design inlet air wet-bulb temper" +
    "ature and design approach temperature. Design range = inlet water temperature mi" +
    "nus outlet water temperature at design conditions. Autosized to 5.5 deltaC.")]
[JsonProperty("design_range_temperature")]
public string DesignRangeTemperature { get; set; } = (System.String)"Autosize";
        

[Description("This heater maintains the basin water temperature at the basin heater setpoint te" +
    "mperature when the outdoor air temperature falls below the setpoint temperature." +
    " The basin heater only operates when water is not flowing through the tower.")]
[JsonProperty("basin_heater_capacity")]
public System.Nullable<float> BasinHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Enter the outdoor dry-bulb temperature when the basin heater turns on")]
[JsonProperty("basin_heater_setpoint_temperature")]
public System.Nullable<float> BasinHeaterSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description(@"Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty("basin_heater_operating_schedule_name")]
public string BasinHeaterOperatingScheduleName { get; set; } = "";
        

[JsonProperty("evaporation_loss_mode")]
public CoolingTower_TwoSpeed_EvaporationLossMode EvaporationLossMode { get; set; } = (CoolingTower_TwoSpeed_EvaporationLossMode)Enum.Parse(typeof(CoolingTower_TwoSpeed_EvaporationLossMode), "LossFactor");
        

[Description(@"Rate of water evaporated from the cooling tower and lost to the outdoor air [%/K] Evaporation loss is calculated as percentage of the circulating condenser water rate Value entered here is percent-per-degree K of temperature drop in the condenser water Typical values are from 0.15 to 0.27 [%/K].")]
[JsonProperty("evaporation_loss_factor")]
public System.Nullable<float> EvaporationLossFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("Rate of drift loss as a percentage of circulating condenser water flow rate Typic" +
    "al values are between 0.002 and 0.2% The default value is 0.008%")]
[JsonProperty("drift_loss_percent")]
public System.Nullable<float> DriftLossPercent { get; set; } = (System.Nullable<float>)Single.Parse("0.008", CultureInfo.InvariantCulture);
        

[JsonProperty("blowdown_calculation_mode")]
public CoolingTower_TwoSpeed_BlowdownCalculationMode BlowdownCalculationMode { get; set; } = (CoolingTower_TwoSpeed_BlowdownCalculationMode)Enum.Parse(typeof(CoolingTower_TwoSpeed_BlowdownCalculationMode), "ConcentrationRatio");
        

[Description(@"Characterizes the rate of blowdown in the cooling tower. Blowdown is water intentionally drained from the tower in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. Typical values for tower operation are 3 to 5. The default value is 3.")]
[JsonProperty("blowdown_concentration_ratio")]
public System.Nullable<float> BlowdownConcentrationRatio { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description(@"Makeup water usage due to blowdown results from occasionally draining some amount of water in the tower basin to purge scale or other contaminants to reduce their concentration in order to maintain an acceptable level of water quality. Schedule values should reflect water usage in m3/s.")]
[JsonProperty("blowdown_makeup_water_usage_schedule_name")]
public string BlowdownMakeupWaterUsageScheduleName { get; set; } = "";
        

[JsonProperty("supply_water_storage_tank_name")]
public string SupplyWaterStorageTankName { get; set; } = "";
        

[Description("Enter the name of an outdoor air node")]
[JsonProperty("outdoor_air_inlet_node_name")]
public string OutdoorAirInletNodeName { get; set; } = "";
        

[JsonProperty("number_of_cells")]
public System.Nullable<float> NumberOfCells { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("cell_control")]
public CoolingTower_TwoSpeed_CellControl CellControl { get; set; } = (CoolingTower_TwoSpeed_CellControl)Enum.Parse(typeof(CoolingTower_TwoSpeed_CellControl), "MinimalCell");
        

[Description("The allowable minimal fraction of the nominal flow rate per cell")]
[JsonProperty("cell_minimum_water_flow_rate_fraction")]
public System.Nullable<float> CellMinimumWaterFlowRateFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.33", CultureInfo.InvariantCulture);
        

[Description("The allowable maximal fraction of the nominal flow rate per cell")]
[JsonProperty("cell_maximum_water_flow_rate_fraction")]
public System.Nullable<float> CellMaximumWaterFlowRateFraction { get; set; } = (System.Nullable<float>)Single.Parse("2.5", CultureInfo.InvariantCulture);
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum CoolingTower_TwoSpeed_PerformanceInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("NominalCapacity")]
        NominalCapacity = 1,
        
        [JsonProperty("UFactorTimesAreaAndDesignWaterFlowRate")]
        UFactorTimesAreaAndDesignWaterFlowRate = 2,
    }
    
    public enum CoolingTower_TwoSpeed_EvaporationLossMode
    {
        
        [JsonProperty("LossFactor")]
        LossFactor = 0,
        
        [JsonProperty("SaturatedExit")]
        SaturatedExit = 1,
    }
    
    public enum CoolingTower_TwoSpeed_BlowdownCalculationMode
    {
        
        [JsonProperty("ConcentrationRatio")]
        ConcentrationRatio = 0,
        
        [JsonProperty("ScheduledRate")]
        ScheduledRate = 1,
    }
    
    public enum CoolingTower_TwoSpeed_CellControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MaximalCell")]
        MaximalCell = 1,
        
        [JsonProperty("MinimalCell")]
        MinimalCell = 2,
    }
    
    [Description(@"This tower model is based on Merkel's theory, which is also the basis for the tower model in ASHRAE's HVAC1 Toolkit. The open wet cooling tower is modeled as a counter flow heat exchanger with a variable-speed fan drawing air through the tower (induced-draft configuration). For a multi-cell tower, the capacity and air/water flow rate inputs are for the entire tower.")]
    [JsonObject("CoolingTower:VariableSpeed:Merkel")]
    public class CoolingTower_VariableSpeed_Merkel : BHoMObject, IEnergyPlusClass
    {
        

[Description("Name of tower water inlet node")]
[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[Description("Name of tower water outlet node")]
[JsonProperty("water_outlet_node_name")]
public string WaterOutletNodeName { get; set; } = "";
        

[Description("User can define tower thermal performance by specifying the tower UA, the Design " +
    "Air Flow Rate and the Design Water Flow Rate, or by specifying the tower nominal" +
    " capacity")]
[JsonProperty("performance_input_method")]
public CoolingTower_VariableSpeed_Merkel_PerformanceInputMethod PerformanceInputMethod { get; set; } = (CoolingTower_VariableSpeed_Merkel_PerformanceInputMethod)Enum.Parse(typeof(CoolingTower_VariableSpeed_Merkel_PerformanceInputMethod), "NominalCapacity");
        

[JsonProperty("heat_rejection_capacity_and_nominal_capacity_sizing_ratio")]
public System.Nullable<float> HeatRejectionCapacityAndNominalCapacitySizingRatio { get; set; } = (System.Nullable<float>)Single.Parse("1.25", CultureInfo.InvariantCulture);
        

[Description(@"Nominal tower capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature, with the tower fan operating at Design Air Flow Rate (full speed). Design water flow rate is as set in Design Water Flow Rate per Unit of Nominal Capacity. Nominal tower capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25) gives the actual tower heat rejection at these operating conditions.")]
[JsonProperty("nominal_capacity")]
public string NominalCapacity { get; set; } = "";
        

[Description(@"required field when performance method is NominalCapacity Tower capacity in free convection regime with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate is as set in Design Water Flow Rate per Unit of Nominal Capacity. Tower free convection capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25)  gives the actual tower heat rejection at these operating conditions")]
[JsonProperty("free_convection_nominal_capacity")]
public string FreeConvectionNominalCapacity { get; set; } = "";
        

[Description("This field is only used if the previous field is set to autocalculate")]
[JsonProperty("free_convection_nominal_capacity_sizing_factor")]
public System.Nullable<float> FreeConvectionNominalCapacitySizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[JsonProperty("design_water_flow_rate")]
public string DesignWaterFlowRate { get; set; } = "";
        

[Description("This field is only used if the previous is set to autocalculate and performance i" +
    "nput method is NominalCapacity")]
[JsonProperty("design_water_flow_rate_per_unit_of_nominal_capacity")]
public System.Nullable<float> DesignWaterFlowRatePerUnitOfNominalCapacity { get; set; } = (System.Nullable<float>)Single.Parse("5.382E-08", CultureInfo.InvariantCulture);
        

[Description("This is the air flow rate at full fan speed")]
[JsonProperty("design_air_flow_rate")]
public string DesignAirFlowRate { get; set; } = "";
        

[Description(@"This field is only used if the previous is set to autocalculate When field is left blank the default scaling factor is adjusted for elevation to increase volume flow at altitude When field has a value the scaling factor is used without adjusting for elevation")]
[JsonProperty("design_air_flow_rate_per_unit_of_nominal_capacity")]
public System.Nullable<float> DesignAirFlowRatePerUnitOfNominalCapacity { get; set; } = (System.Nullable<float>)Single.Parse("2.76316E-05", CultureInfo.InvariantCulture);
        

[Description("Enter the minimum air flow rate ratio. This is typically determined by the variab" +
    "le speed drive that controls the fan motor speed. Valid entries are from 0.1 to " +
    "0.5.")]
[JsonProperty("minimum_air_flow_rate_ratio")]
public System.Nullable<float> MinimumAirFlowRateRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("This is the fan motor electric input power at high speed")]
[JsonProperty("design_fan_power")]
public string DesignFanPower { get; set; } = "";
        

[Description("This field is only used if the previous is set to autocalculate [W/W] Watts of fa" +
    "n power per Watt of tower nominal capacity")]
[JsonProperty("design_fan_power_per_unit_of_nominal_capacity")]
public System.Nullable<float> DesignFanPowerPerUnitOfNominalCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0.0105", CultureInfo.InvariantCulture);
        

[Description("Any curve or table with one independent variable can be used cubic curve = a + b*" +
    "AFR + c*AFR**2 + d*AFR**3 quartic curve = a + b*AFR + c*AFR**2 + d*AFR**3 + e*AF" +
    "R**4 x = AFR = Ratio of current operating air flow rate to Design Air Flow Rate")]
[JsonProperty("fan_power_modifier_function_of_air_flow_rate_ratio_curve_name")]
public string FanPowerModifierFunctionOfAirFlowRateRatioCurveName { get; set; } = "";
        

[JsonProperty("free_convection_regime_air_flow_rate")]
public string FreeConvectionRegimeAirFlowRate { get; set; } = (System.String)"0";
        

[Description("This field is only used if the previous field is set to autocalculate.")]
[JsonProperty("free_convection_regime_air_flow_rate_sizing_factor")]
public System.Nullable<float> FreeConvectionRegimeAirFlowRateSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[Description("required field when performance method is UFactorTimesAreaAndDesignWaterFlowRate " +
    "when performance method is NominalCapacity the program will solve for this UA")]
[JsonProperty("design_air_flow_rate_u_factor_times_area_value")]
public string DesignAirFlowRateUFactorTimesAreaValue { get; set; } = "";
        

[Description("required field when performance input method is UFactorTimesAreaAndDesignWaterFlo" +
    "wRate Leave field blank if performance input method is NominalCapacity")]
[JsonProperty("free_convection_regime_u_factor_times_area_value")]
public string FreeConvectionRegimeUFactorTimesAreaValue { get; set; } = (System.String)"0";
        

[Description("required field when performance input method is UFactorTimesAreaAndDesignWaterFlo" +
    "wRate This field is only used if the previous field is set to autocalculate and " +
    "the performance input method is UFactorTimesAreaAndDesignWaterFlowRate")]
[JsonProperty("free_convection_u_factor_times_area_value_sizing_factor")]
public System.Nullable<float> FreeConvectionUFactorTimesAreaValueSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[Description(@"This curve describes how tower's design UA changes with variable air flow rate Any curve or table with one independent variable can be used cubic curve = a + b*AFR + c*AFR**2 + d*AFR**3 quartic curve = a + b*AFR + c*AFR**2 + d*AFR**3 + e*AFR**4 x = AFR = Ratio of current operating air flow rate to Design Air Flow Rate")]
[JsonProperty("u_factor_times_area_modifier_function_of_air_flow_ratio_curve_name")]
public string UFactorTimesAreaModifierFunctionOfAirFlowRatioCurveName { get; set; } = "";
        

[Description(@"curve describes how tower UA changes with outdoor air wet-bulb temperature difference from design wet-bulb Any curve or table with one independent variable can be used cubic curve = a + b*DeltaWB + c*DeltaWB**2 + d*DeltaWB**3 quartic curve = a + b*DeltaWB + c*DeltaWB**2 + d*DeltaWB**3 + e*DeltaWB**4 x = DeltaWB = (design wet-bulb temperature in C - current wet-bulb temperature in C) where design wet-bulb temperature of entering air is 25.56C (78F)")]
[JsonProperty("u_factor_times_area_modifier_function_of_wetbulb_temperature_difference_curve_nam" +
    "e")]
public string UFactorTimesAreaModifierFunctionOfWetbulbTemperatureDifferenceCurveName { get; set; } = "";
        

[Description(@"curve describes how tower UA changes with the flow rate of condenser water through the tower Any curve or table with one independent variable can be used cubic curve = a + b*WFR + c*WFR**2 + d*WFR**3 quartic curve = a + b*WFR + c*WFR**2 + d*WFR**3 + e*WFR**4 x = WFR = Ratio of current operating water flow rate to Design Water Flow Rate")]
[JsonProperty("u_factor_times_area_modifier_function_of_water_flow_ratio_curve_name")]
public string UFactorTimesAreaModifierFunctionOfWaterFlowRatioCurveName { get; set; } = "";
        

[Description("Enter the tower\'s design inlet air dry-bulb temperature")]
[JsonProperty("design_inlet_air_dry_bulb_temperature")]
public System.Nullable<float> DesignInletAirDryBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("35", CultureInfo.InvariantCulture);
        

[Description("Enter the tower\'s design inlet air wet-bulb temperature")]
[JsonProperty("design_inlet_air_wet_bulb_temperature")]
public System.Nullable<float> DesignInletAirWetBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("25.6", CultureInfo.InvariantCulture);
        

[Description("Enter the approach temperature corresponding to the design inlet air wet-bulb tem" +
    "perature and design range temperature. Design approach temp = outlet water tempe" +
    "rature minus inlet air wet-bulb temperature at design conditions. Autosized to 3" +
    ".9 deltaC.")]
[JsonProperty("design_approach_temperature")]
public string DesignApproachTemperature { get; set; } = (System.String)"Autosize";
        

[Description("Enter the range temperature corresponding to the design inlet air wet-bulb temper" +
    "ature and design approach temperature. Design range = inlet water temperature mi" +
    "nus outlet water temperature at design conditions. Autosized to 5.5 deltaC.")]
[JsonProperty("design_range_temperature")]
public string DesignRangeTemperature { get; set; } = (System.String)"Autosize";
        

[Description("This heater maintains the basin water temperature at the basin heater setpoint te" +
    "mperature when the outdoor air temperature falls below the setpoint temperature." +
    " The basin heater only operates when water is not flowing through the tower.")]
[JsonProperty("basin_heater_capacity")]
public System.Nullable<float> BasinHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Enter the outdoor dry-bulb temperature when the basin heater turns on")]
[JsonProperty("basin_heater_setpoint_temperature")]
public System.Nullable<float> BasinHeaterSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description(@"Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty("basin_heater_operating_schedule_name")]
public string BasinHeaterOperatingScheduleName { get; set; } = "";
        

[JsonProperty("evaporation_loss_mode")]
public CoolingTower_VariableSpeed_Merkel_EvaporationLossMode EvaporationLossMode { get; set; } = (CoolingTower_VariableSpeed_Merkel_EvaporationLossMode)Enum.Parse(typeof(CoolingTower_VariableSpeed_Merkel_EvaporationLossMode), "LossFactor");
        

[Description(@"Rate of water evaporated from the cooling tower and lost to the outdoor air [%/K] Evaporation loss is calculated as percentage of the circulating condenser water rate Value entered here is percent-per-degree K of temperature drop in the condenser water Typical values are from 0.15 to 0.27 [%/K].")]
[JsonProperty("evaporation_loss_factor")]
public System.Nullable<float> EvaporationLossFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("Rate of drift loss as a percentage of circulating condenser water flow rate Typic" +
    "al values are between 0.002 and 0.2% The default value is 0.008%")]
[JsonProperty("drift_loss_percent")]
public System.Nullable<float> DriftLossPercent { get; set; } = (System.Nullable<float>)Single.Parse("0.008", CultureInfo.InvariantCulture);
        

[JsonProperty("blowdown_calculation_mode")]
public CoolingTower_VariableSpeed_Merkel_BlowdownCalculationMode BlowdownCalculationMode { get; set; } = (CoolingTower_VariableSpeed_Merkel_BlowdownCalculationMode)Enum.Parse(typeof(CoolingTower_VariableSpeed_Merkel_BlowdownCalculationMode), "ConcentrationRatio");
        

[Description(@"Characterizes the rate of blowdown in the cooling tower. Blowdown is water intentionally drained from the tower in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. Typical values for tower operation are 3 to 5. The default value is 3.")]
[JsonProperty("blowdown_concentration_ratio")]
public System.Nullable<float> BlowdownConcentrationRatio { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description(@"Makeup water usage due to blowdown results from occasionally draining some amount of water in the tower basin to purge scale or other contaminants to reduce their concentration in order to maintain an acceptable level of water quality. Schedule values should reflect water usage in m3/s.")]
[JsonProperty("blowdown_makeup_water_usage_schedule_name")]
public string BlowdownMakeupWaterUsageScheduleName { get; set; } = "";
        

[JsonProperty("supply_water_storage_tank_name")]
public string SupplyWaterStorageTankName { get; set; } = "";
        

[Description("Enter the name of an outdoor air node")]
[JsonProperty("outdoor_air_inlet_node_name")]
public string OutdoorAirInletNodeName { get; set; } = "";
        

[JsonProperty("number_of_cells")]
public System.Nullable<float> NumberOfCells { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("cell_control")]
public CoolingTower_VariableSpeed_Merkel_CellControl CellControl { get; set; } = (CoolingTower_VariableSpeed_Merkel_CellControl)Enum.Parse(typeof(CoolingTower_VariableSpeed_Merkel_CellControl), "MinimalCell");
        

[Description("The allowable minimal fraction of the nominal flow rate per cell")]
[JsonProperty("cell_minimum_water_flow_rate_fraction")]
public System.Nullable<float> CellMinimumWaterFlowRateFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.33", CultureInfo.InvariantCulture);
        

[Description("The allowable maximal fraction of the nominal flow rate per cell")]
[JsonProperty("cell_maximum_water_flow_rate_fraction")]
public System.Nullable<float> CellMaximumWaterFlowRateFraction { get; set; } = (System.Nullable<float>)Single.Parse("2.5", CultureInfo.InvariantCulture);
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum CoolingTower_VariableSpeed_Merkel_PerformanceInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("NominalCapacity")]
        NominalCapacity = 1,
        
        [JsonProperty("UFactorTimesAreaAndDesignWaterFlowRate")]
        UFactorTimesAreaAndDesignWaterFlowRate = 2,
    }
    
    public enum CoolingTower_VariableSpeed_Merkel_EvaporationLossMode
    {
        
        [JsonProperty("LossFactor")]
        LossFactor = 0,
        
        [JsonProperty("SaturatedExit")]
        SaturatedExit = 1,
    }
    
    public enum CoolingTower_VariableSpeed_Merkel_BlowdownCalculationMode
    {
        
        [JsonProperty("ConcentrationRatio")]
        ConcentrationRatio = 0,
        
        [JsonProperty("ScheduledRate")]
        ScheduledRate = 1,
    }
    
    public enum CoolingTower_VariableSpeed_Merkel_CellControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MaximalCell")]
        MaximalCell = 1,
        
        [JsonProperty("MinimalCell")]
        MinimalCell = 2,
    }
    
    [Description(@"This open wet tower model is based on purely empirical algorithms derived from manufacturer's performance data or field measurements. The user can select from two existing algorithms (CoolTools or YorkCalc), or they can enter their own correlation for approach temperature by using a variable speed tower model coefficient object. For a multi-cell tower, the capacity and air/water flow rate inputs are for the entire tower.")]
    [JsonObject("CoolingTower:VariableSpeed")]
    public class CoolingTower_VariableSpeed : BHoMObject, IEnergyPlusClass
    {
        

[Description("Name of tower water inlet node")]
[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[Description("Name of tower water outlet node")]
[JsonProperty("water_outlet_node_name")]
public string WaterOutletNodeName { get; set; } = "";
        

[Description("Determines the coefficients and form of the equation for calculating approach tem" +
    "perature")]
[JsonProperty("model_type")]
public CoolingTower_VariableSpeed_ModelType ModelType { get; set; } = (CoolingTower_VariableSpeed_ModelType)Enum.Parse(typeof(CoolingTower_VariableSpeed_ModelType), "YorkCalc");
        

[Description("Name of the tower model coefficient object. Used only when tower Model Type is ei" +
    "ther CoolToolsUserDefined or YorkCalcUserDefined.")]
[JsonProperty("model_coefficient_name")]
public string ModelCoefficientName { get; set; } = "";
        

[Description("Enter the tower\'s design inlet air wet-bulb temperature")]
[JsonProperty("design_inlet_air_wet_bulb_temperature")]
public System.Nullable<float> DesignInletAirWetBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("25.6", CultureInfo.InvariantCulture);
        

[Description("Enter the approach temperature corresponding to the design inlet air wet-bulb tem" +
    "perature and design range temperature. Design approach temp = outlet water tempe" +
    "rature minus inlet air wet-bulb temperature at design conditions.")]
[JsonProperty("design_approach_temperature")]
public System.Nullable<float> DesignApproachTemperature { get; set; } = (System.Nullable<float>)Single.Parse("3.9", CultureInfo.InvariantCulture);
        

[Description("Enter the range temperature corresponding to the design inlet air wet-bulb temper" +
    "ature and design approach temperature. Design range = inlet water temperature mi" +
    "nus outlet water temperature at design conditions.")]
[JsonProperty("design_range_temperature")]
public System.Nullable<float> DesignRangeTemperature { get; set; } = (System.Nullable<float>)Single.Parse("5.6", CultureInfo.InvariantCulture);
        

[Description("Water flow rate through the tower at design conditions")]
[JsonProperty("design_water_flow_rate")]
public string DesignWaterFlowRate { get; set; } = "";
        

[Description("Design (maximum) air flow rate through the tower")]
[JsonProperty("design_air_flow_rate")]
public string DesignAirFlowRate { get; set; } = "";
        

[Description("Enter the fan motor electric input power at design (max) air flow through the tow" +
    "er Standard conversion for horsepower is 1 HP = 745.7 W")]
[JsonProperty("design_fan_power")]
public string DesignFanPower { get; set; } = "";
        

[Description("FPR = a + b*AFR + c*AFR**2 + d*AFR**3 FPR = fraction of the design fan power AFR " +
    "= fraction of the design air flow rate If left blank, then fan power is assumed " +
    "to be proportional to (air flow rate ratio)^3")]
[JsonProperty("fan_power_ratio_function_of_air_flow_rate_ratio_curve_name")]
public string FanPowerRatioFunctionOfAirFlowRateRatioCurveName { get; set; } = "";
        

[Description("Enter the minimum air flow rate ratio. This is typically determined by the variab" +
    "le speed drive that controls the fan motor speed. Valid entries are from 0.2 to " +
    "0.5.")]
[JsonProperty("minimum_air_flow_rate_ratio")]
public System.Nullable<float> MinimumAirFlowRateRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description(@"Enter the fraction of tower capacity in the free convection regime. This is the fraction of the tower capacity, at the current inlet air wet-bulb temperature, that is available when the tower fan is off. Manufacturers typically estimate the free convection capacity at approximately 10-15%. Values are entered as a fraction and can range from 0 to 0.2.")]
[JsonProperty("fraction_of_tower_capacity_in_free_convection_regime")]
public System.Nullable<float> FractionOfTowerCapacityInFreeConvectionRegime { get; set; } = (System.Nullable<float>)Single.Parse("0.125", CultureInfo.InvariantCulture);
        

[Description("This heater maintains the basin water temperature at the basin heater setpoint te" +
    "mperature when the outdoor air temperature falls below the setpoint temperature." +
    " The basin heater only operates when water is not flowing through the tower.")]
[JsonProperty("basin_heater_capacity")]
public System.Nullable<float> BasinHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Enter the outdoor dry-bulb temperature when the basin heater turns on")]
[JsonProperty("basin_heater_setpoint_temperature")]
public System.Nullable<float> BasinHeaterSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description(@"Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty("basin_heater_operating_schedule_name")]
public string BasinHeaterOperatingScheduleName { get; set; } = "";
        

[JsonProperty("evaporation_loss_mode")]
public CoolingTower_VariableSpeed_EvaporationLossMode EvaporationLossMode { get; set; } = (CoolingTower_VariableSpeed_EvaporationLossMode)Enum.Parse(typeof(CoolingTower_VariableSpeed_EvaporationLossMode), "LossFactor");
        

[Description(@"Rate of water evaporated from the cooling tower and lost to the outdoor air [%/K] Evaporation loss is calculated as percentage of the circulating condenser water rate Value entered here is percent-per-degree K of temperature drop in the condenser water Typical values are from 0.15 to 0.27 [percent/K].")]
[JsonProperty("evaporation_loss_factor")]
public System.Nullable<float> EvaporationLossFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("Rate of drift loss as a percentage of circulating condenser water flow rate Typic" +
    "al values are between 0.002 and 0.2% The default value is 0.008%")]
[JsonProperty("drift_loss_percent")]
public System.Nullable<float> DriftLossPercent { get; set; } = null;
        

[JsonProperty("blowdown_calculation_mode")]
public CoolingTower_VariableSpeed_BlowdownCalculationMode BlowdownCalculationMode { get; set; } = (CoolingTower_VariableSpeed_BlowdownCalculationMode)Enum.Parse(typeof(CoolingTower_VariableSpeed_BlowdownCalculationMode), "ConcentrationRatio");
        

[Description(@"Characterizes the rate of blowdown in the cooling tower. Blowdown is water intentionally drained from the tower in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. Typical values for tower operation are 3 to 5. The default value is 3.")]
[JsonProperty("blowdown_concentration_ratio")]
public System.Nullable<float> BlowdownConcentrationRatio { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description(@"Makeup water usage due to blowdown results from occasionally draining a small amount of water in the tower basin to purge scale or other contaminants to reduce their concentration in order to maintain an acceptable level of water quality. Schedule values should reflect water usage in m3/s.")]
[JsonProperty("blowdown_makeup_water_usage_schedule_name")]
public string BlowdownMakeupWaterUsageScheduleName { get; set; } = "";
        

[JsonProperty("supply_water_storage_tank_name")]
public string SupplyWaterStorageTankName { get; set; } = "";
        

[Description("Enter the name of an outdoor air node")]
[JsonProperty("outdoor_air_inlet_node_name")]
public string OutdoorAirInletNodeName { get; set; } = "";
        

[JsonProperty("number_of_cells")]
public System.Nullable<float> NumberOfCells { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("cell_control")]
public CoolingTower_VariableSpeed_CellControl CellControl { get; set; } = (CoolingTower_VariableSpeed_CellControl)Enum.Parse(typeof(CoolingTower_VariableSpeed_CellControl), "MinimalCell");
        

[Description("The allowable minimal fraction of the nominal flow rate per cell")]
[JsonProperty("cell_minimum_water_flow_rate_fraction")]
public System.Nullable<float> CellMinimumWaterFlowRateFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.33", CultureInfo.InvariantCulture);
        

[Description("The allowable maximal fraction of the nominal flow rate per cell")]
[JsonProperty("cell_maximum_water_flow_rate_fraction")]
public System.Nullable<float> CellMaximumWaterFlowRateFraction { get; set; } = (System.Nullable<float>)Single.Parse("2.5", CultureInfo.InvariantCulture);
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum CoolingTower_VariableSpeed_ModelType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CoolToolsCrossFlow")]
        CoolToolsCrossFlow = 1,
        
        [JsonProperty("CoolToolsUserDefined")]
        CoolToolsUserDefined = 2,
        
        [JsonProperty("YorkCalc")]
        YorkCalc = 3,
        
        [JsonProperty("YorkCalcUserDefined")]
        YorkCalcUserDefined = 4,
    }
    
    public enum CoolingTower_VariableSpeed_EvaporationLossMode
    {
        
        [JsonProperty("LossFactor")]
        LossFactor = 0,
        
        [JsonProperty("SaturatedExit")]
        SaturatedExit = 1,
    }
    
    public enum CoolingTower_VariableSpeed_BlowdownCalculationMode
    {
        
        [JsonProperty("ConcentrationRatio")]
        ConcentrationRatio = 0,
        
        [JsonProperty("ScheduledRate")]
        ScheduledRate = 1,
    }
    
    public enum CoolingTower_VariableSpeed_CellControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MaximalCell")]
        MaximalCell = 1,
        
        [JsonProperty("MinimalCell")]
        MinimalCell = 2,
    }
    
    [Description("This object is used to define coefficients for the approach temperature correlati" +
        "on for a variable speed cooling tower when tower Model Type is specified as Cool" +
        "ToolsUserDefined in the object CoolingTower:VariableSpeed.")]
    [JsonObject("CoolingTowerPerformance:CoolTools")]
    public class CoolingTowerPerformance_CoolTools : BHoMObject, IEnergyPlusClass
    {
        

[Description("Minimum valid inlet air wet-bulb temperature for this approach temperature correl" +
    "ation.")]
[JsonProperty("minimum_inlet_air_wet_bulb_temperature")]
public System.Nullable<float> MinimumInletAirWetBulbTemperature { get; set; } = null;
        

[Description("Maximum valid inlet air wet-bulb temperature for this approach temperature correl" +
    "ation.")]
[JsonProperty("maximum_inlet_air_wet_bulb_temperature")]
public System.Nullable<float> MaximumInletAirWetBulbTemperature { get; set; } = null;
        

[Description("Minimum valid range temperature for this approach temperature correlation.")]
[JsonProperty("minimum_range_temperature")]
public System.Nullable<float> MinimumRangeTemperature { get; set; } = null;
        

[Description("Maximum valid range temperature for this approach temperature correlation.")]
[JsonProperty("maximum_range_temperature")]
public System.Nullable<float> MaximumRangeTemperature { get; set; } = null;
        

[Description("Minimum valid approach temperature for this correlation.")]
[JsonProperty("minimum_approach_temperature")]
public System.Nullable<float> MinimumApproachTemperature { get; set; } = null;
        

[Description("Maximum valid approach temperature for this correlation.")]
[JsonProperty("maximum_approach_temperature")]
public System.Nullable<float> MaximumApproachTemperature { get; set; } = null;
        

[Description("Minimum valid water flow rate ratio for this approach temperature correlation.")]
[JsonProperty("minimum_water_flow_rate_ratio")]
public System.Nullable<float> MinimumWaterFlowRateRatio { get; set; } = null;
        

[Description("Maximum valid water flow rate ratio for this approach temperature correlation.")]
[JsonProperty("maximum_water_flow_rate_ratio")]
public System.Nullable<float> MaximumWaterFlowRateRatio { get; set; } = null;
        

[JsonProperty("coefficient_1")]
public System.Nullable<float> Coefficient1 { get; set; } = null;
        

[JsonProperty("coefficient_2")]
public System.Nullable<float> Coefficient2 { get; set; } = null;
        

[JsonProperty("coefficient_3")]
public System.Nullable<float> Coefficient3 { get; set; } = null;
        

[JsonProperty("coefficient_4")]
public System.Nullable<float> Coefficient4 { get; set; } = null;
        

[JsonProperty("coefficient_5")]
public System.Nullable<float> Coefficient5 { get; set; } = null;
        

[JsonProperty("coefficient_6")]
public System.Nullable<float> Coefficient6 { get; set; } = null;
        

[JsonProperty("coefficient_7")]
public System.Nullable<float> Coefficient7 { get; set; } = null;
        

[JsonProperty("coefficient_8")]
public System.Nullable<float> Coefficient8 { get; set; } = null;
        

[JsonProperty("coefficient_9")]
public System.Nullable<float> Coefficient9 { get; set; } = null;
        

[JsonProperty("coefficient_10")]
public System.Nullable<float> Coefficient10 { get; set; } = null;
        

[JsonProperty("coefficient_11")]
public System.Nullable<float> Coefficient11 { get; set; } = null;
        

[JsonProperty("coefficient_12")]
public System.Nullable<float> Coefficient12 { get; set; } = null;
        

[JsonProperty("coefficient_13")]
public System.Nullable<float> Coefficient13 { get; set; } = null;
        

[JsonProperty("coefficient_14")]
public System.Nullable<float> Coefficient14 { get; set; } = null;
        

[JsonProperty("coefficient_15")]
public System.Nullable<float> Coefficient15 { get; set; } = null;
        

[JsonProperty("coefficient_16")]
public System.Nullable<float> Coefficient16 { get; set; } = null;
        

[JsonProperty("coefficient_17")]
public System.Nullable<float> Coefficient17 { get; set; } = null;
        

[JsonProperty("coefficient_18")]
public System.Nullable<float> Coefficient18 { get; set; } = null;
        

[JsonProperty("coefficient_19")]
public System.Nullable<float> Coefficient19 { get; set; } = null;
        

[JsonProperty("coefficient_20")]
public System.Nullable<float> Coefficient20 { get; set; } = null;
        

[JsonProperty("coefficient_21")]
public System.Nullable<float> Coefficient21 { get; set; } = null;
        

[JsonProperty("coefficient_22")]
public System.Nullable<float> Coefficient22 { get; set; } = null;
        

[JsonProperty("coefficient_23")]
public System.Nullable<float> Coefficient23 { get; set; } = null;
        

[JsonProperty("coefficient_24")]
public System.Nullable<float> Coefficient24 { get; set; } = null;
        

[JsonProperty("coefficient_25")]
public System.Nullable<float> Coefficient25 { get; set; } = null;
        

[JsonProperty("coefficient_26")]
public System.Nullable<float> Coefficient26 { get; set; } = null;
        

[JsonProperty("coefficient_27")]
public System.Nullable<float> Coefficient27 { get; set; } = null;
        

[JsonProperty("coefficient_28")]
public System.Nullable<float> Coefficient28 { get; set; } = null;
        

[JsonProperty("coefficient_29")]
public System.Nullable<float> Coefficient29 { get; set; } = null;
        

[JsonProperty("coefficient_30")]
public System.Nullable<float> Coefficient30 { get; set; } = null;
        

[JsonProperty("coefficient_31")]
public System.Nullable<float> Coefficient31 { get; set; } = null;
        

[JsonProperty("coefficient_32")]
public System.Nullable<float> Coefficient32 { get; set; } = null;
        

[JsonProperty("coefficient_33")]
public System.Nullable<float> Coefficient33 { get; set; } = null;
        

[JsonProperty("coefficient_34")]
public System.Nullable<float> Coefficient34 { get; set; } = null;
        

[JsonProperty("coefficient_35")]
public System.Nullable<float> Coefficient35 { get; set; } = null;
    }
    
    [Description("This object is used to define coefficients for the approach temperature correlati" +
        "on for a variable speed cooling tower when tower Model Type is specified as York" +
        "CalcUserDefined in the object CoolingTower:VariableSpeed.")]
    [JsonObject("CoolingTowerPerformance:YorkCalc")]
    public class CoolingTowerPerformance_YorkCalc : BHoMObject, IEnergyPlusClass
    {
        

[Description("Minimum valid inlet air wet-bulb temperature for this approach temperature correl" +
    "ation.")]
[JsonProperty("minimum_inlet_air_wet_bulb_temperature")]
public System.Nullable<float> MinimumInletAirWetBulbTemperature { get; set; } = null;
        

[Description("Maximum valid inlet air wet-bulb temperature for this approach temperature correl" +
    "ation.")]
[JsonProperty("maximum_inlet_air_wet_bulb_temperature")]
public System.Nullable<float> MaximumInletAirWetBulbTemperature { get; set; } = null;
        

[Description("Minimum valid range temperature for this approach temperature correlation.")]
[JsonProperty("minimum_range_temperature")]
public System.Nullable<float> MinimumRangeTemperature { get; set; } = null;
        

[Description("Maximum valid range temperature for this approach temperature correlation.")]
[JsonProperty("maximum_range_temperature")]
public System.Nullable<float> MaximumRangeTemperature { get; set; } = null;
        

[Description("Minimum valid approach temperature for this correlation.")]
[JsonProperty("minimum_approach_temperature")]
public System.Nullable<float> MinimumApproachTemperature { get; set; } = null;
        

[Description("Maximum valid approach temperature for this correlation.")]
[JsonProperty("maximum_approach_temperature")]
public System.Nullable<float> MaximumApproachTemperature { get; set; } = null;
        

[Description("Minimum valid water flow rate ratio for this approach temperature correlation.")]
[JsonProperty("minimum_water_flow_rate_ratio")]
public System.Nullable<float> MinimumWaterFlowRateRatio { get; set; } = null;
        

[Description("Maximum valid water flow rate ratio for this approach temperature correlation.")]
[JsonProperty("maximum_water_flow_rate_ratio")]
public System.Nullable<float> MaximumWaterFlowRateRatio { get; set; } = null;
        

[Description("Maximum liquid (water) to gas (air) ratio for this approach temperature correlati" +
    "on.")]
[JsonProperty("maximum_liquid_to_gas_ratio")]
public System.Nullable<float> MaximumLiquidToGasRatio { get; set; } = null;
        

[JsonProperty("coefficient_1")]
public System.Nullable<float> Coefficient1 { get; set; } = null;
        

[JsonProperty("coefficient_2")]
public System.Nullable<float> Coefficient2 { get; set; } = null;
        

[JsonProperty("coefficient_3")]
public System.Nullable<float> Coefficient3 { get; set; } = null;
        

[JsonProperty("coefficient_4")]
public System.Nullable<float> Coefficient4 { get; set; } = null;
        

[JsonProperty("coefficient_5")]
public System.Nullable<float> Coefficient5 { get; set; } = null;
        

[JsonProperty("coefficient_6")]
public System.Nullable<float> Coefficient6 { get; set; } = null;
        

[JsonProperty("coefficient_7")]
public System.Nullable<float> Coefficient7 { get; set; } = null;
        

[JsonProperty("coefficient_8")]
public System.Nullable<float> Coefficient8 { get; set; } = null;
        

[JsonProperty("coefficient_9")]
public System.Nullable<float> Coefficient9 { get; set; } = null;
        

[JsonProperty("coefficient_10")]
public System.Nullable<float> Coefficient10 { get; set; } = null;
        

[JsonProperty("coefficient_11")]
public System.Nullable<float> Coefficient11 { get; set; } = null;
        

[JsonProperty("coefficient_12")]
public System.Nullable<float> Coefficient12 { get; set; } = null;
        

[JsonProperty("coefficient_13")]
public System.Nullable<float> Coefficient13 { get; set; } = null;
        

[JsonProperty("coefficient_14")]
public System.Nullable<float> Coefficient14 { get; set; } = null;
        

[JsonProperty("coefficient_15")]
public System.Nullable<float> Coefficient15 { get; set; } = null;
        

[JsonProperty("coefficient_16")]
public System.Nullable<float> Coefficient16 { get; set; } = null;
        

[JsonProperty("coefficient_17")]
public System.Nullable<float> Coefficient17 { get; set; } = null;
        

[JsonProperty("coefficient_18")]
public System.Nullable<float> Coefficient18 { get; set; } = null;
        

[JsonProperty("coefficient_19")]
public System.Nullable<float> Coefficient19 { get; set; } = null;
        

[JsonProperty("coefficient_20")]
public System.Nullable<float> Coefficient20 { get; set; } = null;
        

[JsonProperty("coefficient_21")]
public System.Nullable<float> Coefficient21 { get; set; } = null;
        

[JsonProperty("coefficient_22")]
public System.Nullable<float> Coefficient22 { get; set; } = null;
        

[JsonProperty("coefficient_23")]
public System.Nullable<float> Coefficient23 { get; set; } = null;
        

[JsonProperty("coefficient_24")]
public System.Nullable<float> Coefficient24 { get; set; } = null;
        

[JsonProperty("coefficient_25")]
public System.Nullable<float> Coefficient25 { get; set; } = null;
        

[JsonProperty("coefficient_26")]
public System.Nullable<float> Coefficient26 { get; set; } = null;
        

[JsonProperty("coefficient_27")]
public System.Nullable<float> Coefficient27 { get; set; } = null;
    }
    
    [Description("This model is based on Merkel\'s theory, which is also the basis for the cooling t" +
        "ower model in EnergyPlus. The Evaporative fluid cooler is modeled as a counter f" +
        "low heat exchanger.")]
    [JsonObject("EvaporativeFluidCooler:SingleSpeed")]
    public class EvaporativeFluidCooler_SingleSpeed : BHoMObject, IEnergyPlusClass
    {
        

[Description("Name of Fluid Cooler water inlet node")]
[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[Description("Name of Fluid Cooler water outlet node")]
[JsonProperty("water_outlet_node_name")]
public string WaterOutletNodeName { get; set; } = "";
        

[JsonProperty("design_air_flow_rate")]
public string DesignAirFlowRate { get; set; } = "";
        

[Description("This is the fan motor electric input power")]
[JsonProperty("design_air_flow_rate_fan_power")]
public string DesignAirFlowRateFanPower { get; set; } = "";
        

[JsonProperty("design_spray_water_flow_rate")]
public System.Nullable<float> DesignSprayWaterFlowRate { get; set; } = null;
        

[Description("User can define fluid cooler thermal performance by specifying the fluid cooler U" +
    "A and the Design Water Flow Rate, or by specifying the fluid cooler Standard Des" +
    "ign Capacity or by specifying Design Capacity for Non standard conditions.")]
[JsonProperty("performance_input_method")]
public EvaporativeFluidCooler_SingleSpeed_PerformanceInputMethod PerformanceInputMethod { get; set; } = (EvaporativeFluidCooler_SingleSpeed_PerformanceInputMethod)Enum.Parse(typeof(EvaporativeFluidCooler_SingleSpeed_PerformanceInputMethod), "StandardDesignCapacity");
        

[Description("Enter the name of an outdoor air node")]
[JsonProperty("outdoor_air_inlet_node_name")]
public string OutdoorAirInletNodeName { get; set; } = "";
        

[JsonProperty("heat_rejection_capacity_and_nominal_capacity_sizing_ratio")]
public System.Nullable<float> HeatRejectionCapacityAndNominalCapacitySizingRatio { get; set; } = (System.Nullable<float>)Single.Parse("1.25", CultureInfo.InvariantCulture);
        

[Description(@"Standard design capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt (3 gpm/ton). Standard design capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25) gives the actual fluid cooler heat rejection at these operating conditions. Only used for Performance Input Method = StandardDesignCapacity; for other input methods, this field is ignored. The standard conditions mentioned above for Standard design capacity are already specified in the EnergyPlus. So the input fields such as design entering water temp., design entering air wet-bulb and dry-bulb temp. and design water flow rate, if provided in the input, will be ignored for the StandardDesignCapacity performance input method. Also, the standard conditions are for water as a fluid type so this performance input method can only be used with water as a fluid type (as specified in CondenserLoop object).")]
[JsonProperty("standard_design_capacity")]
public System.Nullable<float> StandardDesignCapacity { get; set; } = null;
        

[Description("Only used for Performance Input Method = UFactorTimesAreaAndDesignWaterFlowRate; " +
    "for other Performance Input Methods, this field is ignored.")]
[JsonProperty("design_air_flow_rate_u_factor_times_area_value")]
public string DesignAirFlowRateUFactorTimesAreaValue { get; set; } = "";
        

[Description("Input value is ignored if fluid cooler Performance Input Method= StandardDesignCa" +
    "pacity.")]
[JsonProperty("design_water_flow_rate")]
public string DesignWaterFlowRate { get; set; } = "";
        

[Description("Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other P" +
    "erformance Input Methods, this field is ignored.")]
[JsonProperty("user_specified_design_capacity")]
public System.Nullable<float> UserSpecifiedDesignCapacity { get; set; } = null;
        

[Description("Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other P" +
    "erformance Input Methods, this field is ignored. Design Entering Water Temperatu" +
    "re must be greater than Design Entering Air Temperature.")]
[JsonProperty("design_entering_water_temperature")]
public System.Nullable<float> DesignEnteringWaterTemperature { get; set; } = null;
        

[Description("Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other P" +
    "erformance Input Methods, this field is ignored. Design Entering Air Temperature" +
    " must be greater than Design Entering Air Wet-bulb Temperature.")]
[JsonProperty("design_entering_air_temperature")]
public System.Nullable<float> DesignEnteringAirTemperature { get; set; } = null;
        

[Description("Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other P" +
    "erformance Input Methods, this field is ignored. Design Entering Air Wet-bulb Te" +
    "mperature must be less than Design Entering Air Temperature.")]
[JsonProperty("design_entering_air_wet_bulb_temperature")]
public System.Nullable<float> DesignEnteringAirWetBulbTemperature { get; set; } = null;
        

[JsonProperty("capacity_control")]
public EvaporativeFluidCooler_SingleSpeed_CapacityControl CapacityControl { get; set; } = (EvaporativeFluidCooler_SingleSpeed_CapacityControl)Enum.Parse(typeof(EvaporativeFluidCooler_SingleSpeed_CapacityControl), "FanCycling");
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("evaporation_loss_mode")]
public EvaporativeFluidCooler_SingleSpeed_EvaporationLossMode EvaporationLossMode { get; set; } = (EvaporativeFluidCooler_SingleSpeed_EvaporationLossMode)Enum.Parse(typeof(EvaporativeFluidCooler_SingleSpeed_EvaporationLossMode), "SaturatedExit");
        

[Description("Rate of water evaporation from the Fluid Cooler and lost to the outdoor air [%/K]" +
    " Empirical correlation is used to calculate default loss factor if it not explic" +
    "itly provided.")]
[JsonProperty("evaporation_loss_factor")]
public System.Nullable<float> EvaporationLossFactor { get; set; } = null;
        

[Description("Rate of drift loss as a percentage of circulating spray water flow rate Default v" +
    "alue for this field is under investigation. For now Cooling tower\'s drift loss p" +
    "ercent default value is taken here.")]
[JsonProperty("drift_loss_percent")]
public System.Nullable<float> DriftLossPercent { get; set; } = (System.Nullable<float>)Single.Parse("0.008", CultureInfo.InvariantCulture);
        

[JsonProperty("blowdown_calculation_mode")]
public EvaporativeFluidCooler_SingleSpeed_BlowdownCalculationMode BlowdownCalculationMode { get; set; } = (EvaporativeFluidCooler_SingleSpeed_BlowdownCalculationMode)Enum.Parse(typeof(EvaporativeFluidCooler_SingleSpeed_BlowdownCalculationMode), "ConcentrationRatio");
        

[Description(@"Characterizes the rate of blowdown in the Evaporative Fluid Cooler. Blowdown is water intentionally drained from the basin in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. Default value for this field is under investigation. For now Cooling tower's Blowdown Concentration Ratio percent default value is taken here.")]
[JsonProperty("blowdown_concentration_ratio")]
public System.Nullable<float> BlowdownConcentrationRatio { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description(@"Makeup water usage due to blowdown results from occasionally draining a small amount of water in the Fluid Cooler basin to purge scale or other contaminants to reduce their concentration in order to maintain an acceptable level of water quality. Schedule values should reflect water usage in m3/s.")]
[JsonProperty("blowdown_makeup_water_usage_schedule_name")]
public string BlowdownMakeupWaterUsageScheduleName { get; set; } = "";
        

[JsonProperty("supply_water_storage_tank_name")]
public string SupplyWaterStorageTankName { get; set; } = "";
    }
    
    public enum EvaporativeFluidCooler_SingleSpeed_PerformanceInputMethod
    {
        
        [JsonProperty("StandardDesignCapacity")]
        StandardDesignCapacity = 0,
        
        [JsonProperty("UFactorTimesAreaAndDesignWaterFlowRate")]
        UFactorTimesAreaAndDesignWaterFlowRate = 1,
        
        [JsonProperty("UserSpecifiedDesignCapacity")]
        UserSpecifiedDesignCapacity = 2,
    }
    
    public enum EvaporativeFluidCooler_SingleSpeed_CapacityControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FanCycling")]
        FanCycling = 1,
        
        [JsonProperty("FluidBypass")]
        FluidBypass = 2,
    }
    
    public enum EvaporativeFluidCooler_SingleSpeed_EvaporationLossMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LossFactor")]
        LossFactor = 1,
        
        [JsonProperty("SaturatedExit")]
        SaturatedExit = 2,
    }
    
    public enum EvaporativeFluidCooler_SingleSpeed_BlowdownCalculationMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConcentrationRatio")]
        ConcentrationRatio = 1,
        
        [JsonProperty("ScheduledRate")]
        ScheduledRate = 2,
    }
    
    [Description("This model is based on Merkel\'s theory, which is also the basis for the cooling t" +
        "ower model in EnergyPlus. The Evaporative fluid cooler is modeled as a counter f" +
        "low heat exchanger.")]
    [JsonObject("EvaporativeFluidCooler:TwoSpeed")]
    public class EvaporativeFluidCooler_TwoSpeed : BHoMObject, IEnergyPlusClass
    {
        

[Description("Name of fluid cooler water inlet node")]
[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[Description("Name of fluid cooler water outlet node")]
[JsonProperty("water_outlet_node_name")]
public string WaterOutletNodeName { get; set; } = "";
        

[JsonProperty("high_fan_speed_air_flow_rate")]
public string HighFanSpeedAirFlowRate { get; set; } = "";
        

[Description("This is the fan motor electric input power at high speed")]
[JsonProperty("high_fan_speed_fan_power")]
public string HighFanSpeedFanPower { get; set; } = "";
        

[Description("Low speed air flow rate must be less than high speed air flow rate")]
[JsonProperty("low_fan_speed_air_flow_rate")]
public string LowFanSpeedAirFlowRate { get; set; } = "";
        

[Description("This field is only used if the previous field is set to autocalculate")]
[JsonProperty("low_fan_speed_air_flow_rate_sizing_factor")]
public System.Nullable<float> LowFanSpeedAirFlowRateSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[Description("This is the fan motor electric input power at low speed")]
[JsonProperty("low_fan_speed_fan_power")]
public string LowFanSpeedFanPower { get; set; } = "";
        

[Description("This field is only used if the previous field is set to autocalculate.")]
[JsonProperty("low_fan_speed_fan_power_sizing_factor")]
public System.Nullable<float> LowFanSpeedFanPowerSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.16", CultureInfo.InvariantCulture);
        

[JsonProperty("design_spray_water_flow_rate")]
public System.Nullable<float> DesignSprayWaterFlowRate { get; set; } = null;
        

[Description("User can define fluid cooler thermal performance by specifying the fluid cooler U" +
    "A and the Design Water Flow Rate, or by specifying the fluid cooler Standard Des" +
    "ign Capacity or by specifying Design Capacity for Non standard conditions.")]
[JsonProperty("performance_input_method")]
public EvaporativeFluidCooler_TwoSpeed_PerformanceInputMethod PerformanceInputMethod { get; set; } = (EvaporativeFluidCooler_TwoSpeed_PerformanceInputMethod)Enum.Parse(typeof(EvaporativeFluidCooler_TwoSpeed_PerformanceInputMethod), "StandardDesignCapacity");
        

[Description("Enter the name of an outdoor air node")]
[JsonProperty("outdoor_air_inlet_node_name")]
public string OutdoorAirInletNodeName { get; set; } = "";
        

[JsonProperty("heat_rejection_capacity_and_nominal_capacity_sizing_ratio")]
public System.Nullable<float> HeatRejectionCapacityAndNominalCapacitySizingRatio { get; set; } = (System.Nullable<float>)Single.Parse("1.25", CultureInfo.InvariantCulture);
        

[Description(@"Standard design capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt (3 gpm/ton). Standard design capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25) gives the actual fluid cooler heat rejection at these operating conditions. Only used for Performance Input Method = StandardDesignCapacity; for other input methods, this field is ignored. The standard conditions mentioned above for Standard design capacity are already specified in the EnergyPlus. So the input fields such as design entering water temp., design entering air wet-bulb and dry-bulb temp. and design water flow rate, if provided in the input, will be ignored for the StandardDesignCapacity performance input method. Also, the standard conditions are for water as a fluid type so this performance input method can only be used with water as a fluid type (as specified in CondenserLoop object).")]
[JsonProperty("high_speed_standard_design_capacity")]
public System.Nullable<float> HighSpeedStandardDesignCapacity { get; set; } = null;
        

[Description(@"Standard design capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt (3 gpm/ton). Standard design capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25) gives the actual fluid cooler heat rejection at these operating conditions. Only used for Performance Input Method = StandardDesignCapacity; for other input methods, this field is ignored. The standard conditions mentioned above for Standard design capacity are already specified in the EnergyPlus. So the input fields such as design entering water temp., design entering air wet-bulb and dry-bulb temp. and design water flow rate, if provided in the input, will be ignored for the StandardDesignCapacity performance input method. Also, the standard conditions are for water as a fluid type so this performance input method can only be used with water as a fluid type (as specified in CondenserLoop object).")]
[JsonProperty("low_speed_standard_design_capacity")]
public string LowSpeedStandardDesignCapacity { get; set; } = "";
        

[Description("This field is only used if the previous field is set to autocalculate")]
[JsonProperty("low_speed_standard_capacity_sizing_factor")]
public System.Nullable<float> LowSpeedStandardCapacitySizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[Description("Only used for Performance Input Method = UFactorTimesAreaAndDesignWaterFlowRate; " +
    "for other Performance Input Methods, this field is ignored.")]
[JsonProperty("high_fan_speed_u_factor_times_area_value")]
public string HighFanSpeedUFactorTimesAreaValue { get; set; } = "";
        

[Description("Only used for Performance Input Method = UFactorTimesAreaAndDesignWaterFlowRate; " +
    "for other input methods, this field is ignored. Low speed fluid cooler UA must b" +
    "e less than high speed fluid cooler UA")]
[JsonProperty("low_fan_speed_u_factor_times_area_value")]
public string LowFanSpeedUFactorTimesAreaValue { get; set; } = "";
        

[Description("This field is only used if the previous field is set to autocalculate and the Per" +
    "formance Input Method is UFactorTimesAreaAndDesignWaterFlowRate")]
[JsonProperty("low_fan_speed_u_factor_times_area_sizing_factor")]
public System.Nullable<float> LowFanSpeedUFactorTimesAreaSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.6", CultureInfo.InvariantCulture);
        

[Description("Input value is ignored if fluid cooler Performance Input Method= StandardDesignCa" +
    "pacity")]
[JsonProperty("design_water_flow_rate")]
public string DesignWaterFlowRate { get; set; } = "";
        

[Description("Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other P" +
    "erformance Input Methods, this field is ignored.")]
[JsonProperty("high_speed_user_specified_design_capacity")]
public System.Nullable<float> HighSpeedUserSpecifiedDesignCapacity { get; set; } = null;
        

[Description("Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other P" +
    "erformance Input Methods, this field is ignored.")]
[JsonProperty("low_speed_user_specified_design_capacity")]
public string LowSpeedUserSpecifiedDesignCapacity { get; set; } = "";
        

[Description("This field is only used if the previous field is set to autocalculate")]
[JsonProperty("low_speed_user_specified_design_capacity_sizing_factor")]
public System.Nullable<float> LowSpeedUserSpecifiedDesignCapacitySizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[Description("Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other P" +
    "erformance Input Methods, this field is ignored. Design Entering Water Temperatu" +
    "re must be greater than Design Entering Air Temperature.")]
[JsonProperty("design_entering_water_temperature")]
public System.Nullable<float> DesignEnteringWaterTemperature { get; set; } = null;
        

[Description("Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other P" +
    "erformance Input Methods, this field is ignored. Design Entering Air Temperature" +
    " must be greater than Design Entering Air Wet-bulb Temperature.")]
[JsonProperty("design_entering_air_temperature")]
public System.Nullable<float> DesignEnteringAirTemperature { get; set; } = null;
        

[Description("Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other P" +
    "erformance Input Methods, this field is ignored. Design Entering Air Wet-bulb Te" +
    "mperature must be less than Design Entering Air Temperature.")]
[JsonProperty("design_entering_air_wet_bulb_temperature")]
public System.Nullable<float> DesignEnteringAirWetBulbTemperature { get; set; } = null;
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("high_speed_sizing_factor")]
public System.Nullable<float> HighSpeedSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("evaporation_loss_mode")]
public EvaporativeFluidCooler_TwoSpeed_EvaporationLossMode EvaporationLossMode { get; set; } = (EvaporativeFluidCooler_TwoSpeed_EvaporationLossMode)Enum.Parse(typeof(EvaporativeFluidCooler_TwoSpeed_EvaporationLossMode), "SaturatedExit");
        

[Description("Rate of water evaporation from the Fluid Cooler and lost to the outdoor air [%/K]" +
    " Empirical correlation is used to calculate default loss factor if it not explic" +
    "itly provided.")]
[JsonProperty("evaporation_loss_factor")]
public System.Nullable<float> EvaporationLossFactor { get; set; } = null;
        

[Description("Default value is under investigation. For now cooling tower\'s default value is ta" +
    "ken.")]
[JsonProperty("drift_loss_percent")]
public System.Nullable<float> DriftLossPercent { get; set; } = (System.Nullable<float>)Single.Parse("0.008", CultureInfo.InvariantCulture);
        

[JsonProperty("blowdown_calculation_mode")]
public EvaporativeFluidCooler_TwoSpeed_BlowdownCalculationMode BlowdownCalculationMode { get; set; } = (EvaporativeFluidCooler_TwoSpeed_BlowdownCalculationMode)Enum.Parse(typeof(EvaporativeFluidCooler_TwoSpeed_BlowdownCalculationMode), "ConcentrationRatio");
        

[Description(@"Characterizes the rate of blowdown in the Evaporative Fluid Cooler. Blowdown is water intentionally drained from the Evaporative Fluid Cooler in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. Default value is under investigation. For now cooling tower's default value is taken.")]
[JsonProperty("blowdown_concentration_ratio")]
public System.Nullable<float> BlowdownConcentrationRatio { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description(@"Makeup water usage due to blowdown results from occasionally draining some amount of water in the Evaporative Fluid Cooler basin to purge scale or other contaminants to reduce their concentration in order to maintain an acceptable level of water quality. Schedule values should reflect water usage in m3/s.")]
[JsonProperty("blowdown_makeup_water_usage_schedule_name")]
public string BlowdownMakeupWaterUsageScheduleName { get; set; } = "";
        

[JsonProperty("supply_water_storage_tank_name")]
public string SupplyWaterStorageTankName { get; set; } = "";
    }
    
    public enum EvaporativeFluidCooler_TwoSpeed_PerformanceInputMethod
    {
        
        [JsonProperty("StandardDesignCapacity")]
        StandardDesignCapacity = 0,
        
        [JsonProperty("UFactorTimesAreaAndDesignWaterFlowRate")]
        UFactorTimesAreaAndDesignWaterFlowRate = 1,
        
        [JsonProperty("UserSpecifiedDesignCapacity")]
        UserSpecifiedDesignCapacity = 2,
    }
    
    public enum EvaporativeFluidCooler_TwoSpeed_EvaporationLossMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LossFactor")]
        LossFactor = 1,
        
        [JsonProperty("SaturatedExit")]
        SaturatedExit = 2,
    }
    
    public enum EvaporativeFluidCooler_TwoSpeed_BlowdownCalculationMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConcentrationRatio")]
        ConcentrationRatio = 1,
        
        [JsonProperty("ScheduledRate")]
        ScheduledRate = 2,
    }
    
    [Description("The fluid cooler is modeled as a cross flow heat exchanger (both streams unmixed)" +
        " with single-speed fans (induced draft configuration).")]
    [JsonObject("FluidCooler:SingleSpeed")]
    public class FluidCooler_SingleSpeed : BHoMObject, IEnergyPlusClass
    {
        

[Description("Name of fluid cooler water inlet node")]
[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[Description("Name of fluid cooler water outlet node")]
[JsonProperty("water_outlet_node_name")]
public string WaterOutletNodeName { get; set; } = "";
        

[Description("User can define fluid cooler thermal performance by specifying the fluid cooler U" +
    "A and the Design Water Flow Rate, or by specifying the fluid cooler nominal capa" +
    "city")]
[JsonProperty("performance_input_method")]
public FluidCooler_SingleSpeed_PerformanceInputMethod PerformanceInputMethod { get; set; } = (FluidCooler_SingleSpeed_PerformanceInputMethod)Enum.Parse(typeof(FluidCooler_SingleSpeed_PerformanceInputMethod), "NominalCapacity");
        

[Description("Leave field blank if fluid cooler Performance Input Method is NominalCapacity")]
[JsonProperty("design_air_flow_rate_u_factor_times_area_value")]
public string DesignAirFlowRateUFactorTimesAreaValue { get; set; } = "";
        

[Description("Nominal fluid cooler capacity")]
[JsonProperty("nominal_capacity")]
public System.Nullable<float> NominalCapacity { get; set; } = null;
        

[Description("Design Entering Water Temperature must be specified for both the performance inpu" +
    "t methods and its value must be greater than Design Entering Air Temperature.")]
[JsonProperty("design_entering_water_temperature")]
public System.Nullable<float> DesignEnteringWaterTemperature { get; set; } = null;
        

[Description("Design Entering Air Temperature must be specified for both the performance input " +
    "methods and its value must be greater than Design Entering Air Wet-bulb Temperat" +
    "ure.")]
[JsonProperty("design_entering_air_temperature")]
public System.Nullable<float> DesignEnteringAirTemperature { get; set; } = null;
        

[Description("Design Entering Air Wet-bulb Temperature must be specified for both the performan" +
    "ce input methods and its value must be less than Design Entering Air Temperature" +
    ".")]
[JsonProperty("design_entering_air_wetbulb_temperature")]
public System.Nullable<float> DesignEnteringAirWetbulbTemperature { get; set; } = null;
        

[JsonProperty("design_water_flow_rate")]
public string DesignWaterFlowRate { get; set; } = "";
        

[JsonProperty("design_air_flow_rate")]
public string DesignAirFlowRate { get; set; } = "";
        

[Description("This is the fan motor electric input power")]
[JsonProperty("design_air_flow_rate_fan_power")]
public string DesignAirFlowRateFanPower { get; set; } = "";
        

[Description("Enter the name of an outdoor air node")]
[JsonProperty("outdoor_air_inlet_node_name")]
public string OutdoorAirInletNodeName { get; set; } = "";
    }
    
    public enum FluidCooler_SingleSpeed_PerformanceInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("NominalCapacity")]
        NominalCapacity = 1,
        
        [JsonProperty("UFactorTimesAreaAndDesignWaterFlowRate")]
        UFactorTimesAreaAndDesignWaterFlowRate = 2,
    }
    
    [Description("The fluid cooler is modeled as a cross flow heat exchanger (both streams unmixed)" +
        " with two-speed fans (induced draft configuration).")]
    [JsonObject("FluidCooler:TwoSpeed")]
    public class FluidCooler_TwoSpeed : BHoMObject, IEnergyPlusClass
    {
        

[Description("Name of fluid cooler water inlet node")]
[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[Description("Name of fluid cooler water outlet node")]
[JsonProperty("water_outlet_node_name")]
public string WaterOutletNodeName { get; set; } = "";
        

[Description("User can define fluid cooler thermal performance by specifying the fluid cooler U" +
    "A and the Design Water Flow Rate, or by specifying the fluid cooler nominal capa" +
    "city")]
[JsonProperty("performance_input_method")]
public FluidCooler_TwoSpeed_PerformanceInputMethod PerformanceInputMethod { get; set; } = (FluidCooler_TwoSpeed_PerformanceInputMethod)Enum.Parse(typeof(FluidCooler_TwoSpeed_PerformanceInputMethod), "NominalCapacity");
        

[Description("Leave field blank if fluid cooler Performance Input Method is NominalCapacity")]
[JsonProperty("high_fan_speed_u_factor_times_area_value")]
public string HighFanSpeedUFactorTimesAreaValue { get; set; } = "";
        

[Description("Leave field blank if fluid cooler Performance Input Method is NominalCapacity Low" +
    " speed fluid cooler UA must be less than high speed fluid cooler UA Low speed fl" +
    "uid cooler UA must be greater than free convection fluid cooler UA")]
[JsonProperty("low_fan_speed_u_factor_times_area_value")]
public string LowFanSpeedUFactorTimesAreaValue { get; set; } = "";
        

[Description("This field is only used if the previous field is set to autocalculate and the Per" +
    "formance Input Method is UFactorTimesAreaAndDesignWaterFlowRate")]
[JsonProperty("low_fan_speed_u_factor_times_area_sizing_factor")]
public System.Nullable<float> LowFanSpeedUFactorTimesAreaSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.6", CultureInfo.InvariantCulture);
        

[Description("Nominal fluid cooler capacity at high fan speed")]
[JsonProperty("high_speed_nominal_capacity")]
public System.Nullable<float> HighSpeedNominalCapacity { get; set; } = null;
        

[Description("Nominal fluid cooler capacity at low fan speed")]
[JsonProperty("low_speed_nominal_capacity")]
public string LowSpeedNominalCapacity { get; set; } = "";
        

[Description("This field is only used if the previous field is set to autocalculate and the Per" +
    "formance Input Method is NominalCapacity")]
[JsonProperty("low_speed_nominal_capacity_sizing_factor")]
public System.Nullable<float> LowSpeedNominalCapacitySizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[Description("Design Entering Water Temperature must be specified for both the performance inpu" +
    "t methods and its value must be greater than Design Entering Air Temperature.")]
[JsonProperty("design_entering_water_temperature")]
public System.Nullable<float> DesignEnteringWaterTemperature { get; set; } = null;
        

[Description("Design Entering Air Temperature must be specified for both the performance input " +
    "methods and its value must be greater than Design Entering Air Wet-bulb Temperat" +
    "ure.")]
[JsonProperty("design_entering_air_temperature")]
public System.Nullable<float> DesignEnteringAirTemperature { get; set; } = null;
        

[Description("Design Entering Air Wet-bulb Temperature must be specified for both the performan" +
    "ce input methods and its value must be less than Design Entering Air Temperature" +
    ".")]
[JsonProperty("design_entering_air_wet_bulb_temperature")]
public System.Nullable<float> DesignEnteringAirWetBulbTemperature { get; set; } = null;
        

[JsonProperty("design_water_flow_rate")]
public string DesignWaterFlowRate { get; set; } = "";
        

[Description("Air Flow Rate at High Fan Speed must be greater than Air Flow Rate at Low Fan Spe" +
    "ed")]
[JsonProperty("high_fan_speed_air_flow_rate")]
public string HighFanSpeedAirFlowRate { get; set; } = "";
        

[Description("This is the fan motor electric input power at high speed")]
[JsonProperty("high_fan_speed_fan_power")]
public string HighFanSpeedFanPower { get; set; } = "";
        

[Description("Air Flow Rate at Low Fan Speed must be less than Air Flow Rate at High Fan Speed")]
[JsonProperty("low_fan_speed_air_flow_rate")]
public string LowFanSpeedAirFlowRate { get; set; } = "";
        

[Description("This field is only used if the previous field is set to autocalculate.")]
[JsonProperty("low_fan_speed_air_flow_rate_sizing_factor")]
public System.Nullable<float> LowFanSpeedAirFlowRateSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[Description("This is the fan motor electric input power at low speed")]
[JsonProperty("low_fan_speed_fan_power")]
public string LowFanSpeedFanPower { get; set; } = "";
        

[Description("This field is only used if the previous field is set to autocalculate.")]
[JsonProperty("low_fan_speed_fan_power_sizing_factor")]
public System.Nullable<float> LowFanSpeedFanPowerSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.16", CultureInfo.InvariantCulture);
        

[JsonProperty("outdoor_air_inlet_node_name")]
public string OutdoorAirInletNodeName { get; set; } = "";
    }
    
    public enum FluidCooler_TwoSpeed_PerformanceInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("NominalCapacity")]
        NominalCapacity = 1,
        
        [JsonProperty("UFactorTimesAreaAndDesignWaterFlowRate")]
        UFactorTimesAreaAndDesignWaterFlowRate = 2,
    }
    
    [Description("Models vertical ground heat exchangers systems using the response factor approach" +
        " developed by Eskilson. Response factors are calculated using a finite line sour" +
        "ce model assuming uniform heat flux at the borehole wall.")]
    [JsonObject("GroundHeatExchanger:System")]
    public class GroundHeatExchanger_System : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[JsonProperty("design_flow_rate")]
public System.Nullable<float> DesignFlowRate { get; set; } = null;
        

[JsonProperty("undisturbed_ground_temperature_model_type")]
public GroundHeatExchanger_System_UndisturbedGroundTemperatureModelType UndisturbedGroundTemperatureModelType { get; set; } = (GroundHeatExchanger_System_UndisturbedGroundTemperatureModelType)Enum.Parse(typeof(GroundHeatExchanger_System_UndisturbedGroundTemperatureModelType), "SiteGroundTemperatureUndisturbedFiniteDifference");
        

[JsonProperty("undisturbed_ground_temperature_model_name")]
public string UndisturbedGroundTemperatureModelName { get; set; } = "";
        

[JsonProperty("ground_thermal_conductivity")]
public System.Nullable<float> GroundThermalConductivity { get; set; } = null;
        

[JsonProperty("ground_thermal_heat_capacity")]
public System.Nullable<float> GroundThermalHeatCapacity { get; set; } = null;
        

[JsonProperty("ghe_vertical_responsefactors_object_name")]
public string GheVerticalResponsefactorsObjectName { get; set; } = "";
        

[JsonProperty("ghe_vertical_array_object_name")]
public string GheVerticalArrayObjectName { get; set; } = "";
        

[JsonProperty("vertical_well_locations")]
public string VerticalWellLocations { get; set; } = "";
    }
    
    public enum GroundHeatExchanger_System_UndisturbedGroundTemperatureModelType
    {
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:FiniteDifference")]
        SiteGroundTemperatureUndisturbedFiniteDifference = 0,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:KusudaAchenbach")]
        SiteGroundTemperatureUndisturbedKusudaAchenbach = 1,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:Xing")]
        SiteGroundTemperatureUndisturbedXing = 2,
    }
    
    [Description("Properties for vertical ground heat exchanger systems")]
    [JsonObject("GroundHeatExchanger:Vertical:Properties")]
    public class GroundHeatExchanger_Vertical_Properties : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("depth_of_top_of_borehole")]
public System.Nullable<float> DepthOfTopOfBorehole { get; set; } = null;
        

[JsonProperty("borehole_length")]
public System.Nullable<float> BoreholeLength { get; set; } = null;
        

[JsonProperty("borehole_diameter")]
public System.Nullable<float> BoreholeDiameter { get; set; } = null;
        

[JsonProperty("grout_thermal_conductivity")]
public System.Nullable<float> GroutThermalConductivity { get; set; } = null;
        

[JsonProperty("grout_thermal_heat_capacity")]
public System.Nullable<float> GroutThermalHeatCapacity { get; set; } = null;
        

[JsonProperty("pipe_thermal_conductivity")]
public System.Nullable<float> PipeThermalConductivity { get; set; } = null;
        

[JsonProperty("pipe_thermal_heat_capacity")]
public System.Nullable<float> PipeThermalHeatCapacity { get; set; } = null;
        

[JsonProperty("pipe_outer_diameter")]
public System.Nullable<float> PipeOuterDiameter { get; set; } = null;
        

[JsonProperty("pipe_thickness")]
public System.Nullable<float> PipeThickness { get; set; } = null;
        

[JsonProperty("u_tube_distance")]
public System.Nullable<float> UTubeDistance { get; set; } = null;
    }
    
    [Description(null)]
    [JsonObject("GroundHeatExchanger:Vertical:Array")]
    public class GroundHeatExchanger_Vertical_Array : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("ghe_vertical_properties_object_name")]
public string GheVerticalPropertiesObjectName { get; set; } = "";
        

[JsonProperty("number_of_boreholes_in_x_direction")]
public System.Nullable<float> NumberOfBoreholesInXDirection { get; set; } = null;
        

[JsonProperty("number_of_boreholes_in_y_direction")]
public System.Nullable<float> NumberOfBoreholesInYDirection { get; set; } = null;
        

[JsonProperty("borehole_spacing")]
public System.Nullable<float> BoreholeSpacing { get; set; } = null;
    }
    
    [Description(null)]
    [JsonObject("GroundHeatExchanger:Vertical:Single")]
    public class GroundHeatExchanger_Vertical_Single : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("ghe_vertical_properties_object_name")]
public string GheVerticalPropertiesObjectName { get; set; } = "";
        

[JsonProperty("x_location")]
public System.Nullable<float> XLocation { get; set; } = null;
        

[JsonProperty("y_location")]
public System.Nullable<float> YLocation { get; set; } = null;
    }
    
    [Description("Response factor definitions from third-party tool, commonly referred to a \"g-func" +
        "tions\"")]
    [JsonObject("GroundHeatExchanger:ResponseFactors")]
    public class GroundHeatExchanger_ResponseFactors : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("ghe_vertical_properties_object_name")]
public string GheVerticalPropertiesObjectName { get; set; } = "";
        

[JsonProperty("number_of_boreholes")]
public System.Nullable<float> NumberOfBoreholes { get; set; } = null;
        

[JsonProperty("g_function_reference_ratio")]
public System.Nullable<float> GFunctionReferenceRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.0005", CultureInfo.InvariantCulture);
        

[JsonProperty("g_functions")]
public string GFunctions { get; set; } = "";
    }
    
    [Description("A model of a shallow pond with immersed pipe loops. Typically used in hybrid geot" +
        "hermal systems and included in the condenser loop. This component may also be us" +
        "ed as a simple solar collector.")]
    [JsonObject("GroundHeatExchanger:Pond")]
    public class GroundHeatExchanger_Pond : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("fluid_inlet_node_name")]
public string FluidInletNodeName { get; set; } = "";
        

[JsonProperty("fluid_outlet_node_name")]
public string FluidOutletNodeName { get; set; } = "";
        

[JsonProperty("pond_depth")]
public System.Nullable<float> PondDepth { get; set; } = null;
        

[JsonProperty("pond_area")]
public System.Nullable<float> PondArea { get; set; } = null;
        

[JsonProperty("hydronic_tubing_inside_diameter")]
public System.Nullable<float> HydronicTubingInsideDiameter { get; set; } = null;
        

[JsonProperty("hydronic_tubing_outside_diameter")]
public System.Nullable<float> HydronicTubingOutsideDiameter { get; set; } = null;
        

[JsonProperty("hydronic_tubing_thermal_conductivity")]
public System.Nullable<float> HydronicTubingThermalConductivity { get; set; } = null;
        

[JsonProperty("ground_thermal_conductivity")]
public System.Nullable<float> GroundThermalConductivity { get; set; } = null;
        

[JsonProperty("number_of_tubing_circuits")]
public System.Nullable<float> NumberOfTubingCircuits { get; set; } = null;
        

[JsonProperty("length_of_each_tubing_circuit")]
public System.Nullable<float> LengthOfEachTubingCircuit { get; set; } = null;
    }
    
    [Description(@"A hydronic surface/panel consisting of a multi-layer construction with embedded rows of tubes. Typically used in hybrid geothermal systems and included in the condenser loop. This component may also be used as a simple solar collector. The bottom surface may be defined as ground-coupled or exposed to wind (eg. bridge deck).")]
    [JsonObject("GroundHeatExchanger:Surface")]
    public class GroundHeatExchanger_Surface : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[JsonProperty("fluid_inlet_node_name")]
public string FluidInletNodeName { get; set; } = "";
        

[JsonProperty("fluid_outlet_node_name")]
public string FluidOutletNodeName { get; set; } = "";
        

[JsonProperty("hydronic_tubing_inside_diameter")]
public System.Nullable<float> HydronicTubingInsideDiameter { get; set; } = null;
        

[JsonProperty("number_of_tubing_circuits")]
public System.Nullable<float> NumberOfTubingCircuits { get; set; } = null;
        

[JsonProperty("hydronic_tube_spacing")]
public System.Nullable<float> HydronicTubeSpacing { get; set; } = null;
        

[JsonProperty("surface_length")]
public System.Nullable<float> SurfaceLength { get; set; } = null;
        

[JsonProperty("surface_width")]
public System.Nullable<float> SurfaceWidth { get; set; } = null;
        

[JsonProperty("lower_surface_environment")]
public GroundHeatExchanger_Surface_LowerSurfaceEnvironment LowerSurfaceEnvironment { get; set; } = (GroundHeatExchanger_Surface_LowerSurfaceEnvironment)Enum.Parse(typeof(GroundHeatExchanger_Surface_LowerSurfaceEnvironment), "Ground");
    }
    
    public enum GroundHeatExchanger_Surface_LowerSurfaceEnvironment
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Exposed")]
        Exposed = 1,
        
        [JsonProperty("Ground")]
        Ground = 2,
    }
    
    [Description("This models a horizontal heat exchanger placed in a series of trenches The model " +
        "uses the PipingSystem:Underground underlying algorithms, but provides a more usa" +
        "ble input interface.")]
    [JsonObject("GroundHeatExchanger:HorizontalTrench")]
    public class GroundHeatExchanger_HorizontalTrench : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[JsonProperty("design_flow_rate")]
public System.Nullable<float> DesignFlowRate { get; set; } = null;
        

[Description("This is the total pipe axial length of the heat exchanger If all pipe trenches ar" +
    "e parallel, this is the length of a single trench. If a single, long run of pipe" +
    " is used with one trench, this is the full length of the pipe run.")]
[JsonProperty("trench_length_in_pipe_axial_direction")]
public System.Nullable<float> TrenchLengthInPipeAxialDirection { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[Description("This is the number of horizontal legs that will be used in the entire heat exchan" +
    "ger, one pipe per trench")]
[JsonProperty("number_of_trenches")]
public System.Nullable<float> NumberOfTrenches { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This represents the average horizontal spacing between any two trenches for heat " +
    "exchangers that have multiple trenches")]
[JsonProperty("horizontal_spacing_between_pipes")]
public System.Nullable<float> HorizontalSpacingBetweenPipes { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("pipe_inner_diameter")]
public System.Nullable<float> PipeInnerDiameter { get; set; } = (System.Nullable<float>)Single.Parse("0.016", CultureInfo.InvariantCulture);
        

[JsonProperty("pipe_outer_diameter")]
public System.Nullable<float> PipeOuterDiameter { get; set; } = (System.Nullable<float>)Single.Parse("0.026", CultureInfo.InvariantCulture);
        

[Description("This is the burial depth of the pipes, or the trenches containing the pipes")]
[JsonProperty("burial_depth")]
public System.Nullable<float> BurialDepth { get; set; } = (System.Nullable<float>)Single.Parse("1.5", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_thermal_conductivity")]
public System.Nullable<float> SoilThermalConductivity { get; set; } = (System.Nullable<float>)Single.Parse("1.08", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_density")]
public System.Nullable<float> SoilDensity { get; set; } = (System.Nullable<float>)Single.Parse("962", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_specific_heat")]
public System.Nullable<float> SoilSpecificHeat { get; set; } = (System.Nullable<float>)Single.Parse("2576", CultureInfo.InvariantCulture);
        

[JsonProperty("pipe_thermal_conductivity")]
public System.Nullable<float> PipeThermalConductivity { get; set; } = (System.Nullable<float>)Single.Parse("0.3895", CultureInfo.InvariantCulture);
        

[JsonProperty("pipe_density")]
public System.Nullable<float> PipeDensity { get; set; } = (System.Nullable<float>)Single.Parse("641", CultureInfo.InvariantCulture);
        

[JsonProperty("pipe_specific_heat")]
public System.Nullable<float> PipeSpecificHeat { get; set; } = (System.Nullable<float>)Single.Parse("2405", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_moisture_content_percent")]
public System.Nullable<float> SoilMoistureContentPercent { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_moisture_content_percent_at_saturation")]
public System.Nullable<float> SoilMoistureContentPercentAtSaturation { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[JsonProperty("undisturbed_ground_temperature_model_type")]
public GroundHeatExchanger_HorizontalTrench_UndisturbedGroundTemperatureModelType UndisturbedGroundTemperatureModelType { get; set; } = (GroundHeatExchanger_HorizontalTrench_UndisturbedGroundTemperatureModelType)Enum.Parse(typeof(GroundHeatExchanger_HorizontalTrench_UndisturbedGroundTemperatureModelType), "SiteGroundTemperatureUndisturbedFiniteDifference");
        

[JsonProperty("undisturbed_ground_temperature_model_name")]
public string UndisturbedGroundTemperatureModelName { get; set; } = "";
        

[Description(@"This specifies the ground cover effects during evapotranspiration calculations. The value roughly represents the following cases: = 0   : concrete or other solid, non-permeable ground surface material = 0.5 : short grass, much like a manicured lawn = 1   : standard reference state (12 cm grass) = 1.5 : wild growth")]
[JsonProperty("evapotranspiration_ground_cover_parameter")]
public System.Nullable<float> EvapotranspirationGroundCoverParameter { get; set; } = (System.Nullable<float>)Single.Parse("0.4", CultureInfo.InvariantCulture);
    }
    
    public enum GroundHeatExchanger_HorizontalTrench_UndisturbedGroundTemperatureModelType
    {
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:FiniteDifference")]
        SiteGroundTemperatureUndisturbedFiniteDifference = 0,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:KusudaAchenbach")]
        SiteGroundTemperatureUndisturbedKusudaAchenbach = 1,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:Xing")]
        SiteGroundTemperatureUndisturbedXing = 2,
    }
    
    [Description(@"This models a slinky horizontal heat exchanger placed in a series of trenches The model uses the model developed by: Xiong, Z., D.E. Fisher, and J.D. Spitler. 2015. Development and Validation of a Slinky Ground Heat Exchanger Model. Applied Energy 141: 57-69.")]
    [JsonObject("GroundHeatExchanger:Slinky")]
    public class GroundHeatExchanger_Slinky : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[JsonProperty("design_flow_rate")]
public System.Nullable<float> DesignFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0.002", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_thermal_conductivity")]
public System.Nullable<float> SoilThermalConductivity { get; set; } = (System.Nullable<float>)Single.Parse("1.08", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_density")]
public System.Nullable<float> SoilDensity { get; set; } = (System.Nullable<float>)Single.Parse("962", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_specific_heat")]
public System.Nullable<float> SoilSpecificHeat { get; set; } = (System.Nullable<float>)Single.Parse("2576", CultureInfo.InvariantCulture);
        

[JsonProperty("pipe_thermal_conductivity")]
public System.Nullable<float> PipeThermalConductivity { get; set; } = (System.Nullable<float>)Single.Parse("0.4", CultureInfo.InvariantCulture);
        

[JsonProperty("pipe_density")]
public System.Nullable<float> PipeDensity { get; set; } = (System.Nullable<float>)Single.Parse("641", CultureInfo.InvariantCulture);
        

[JsonProperty("pipe_specific_heat")]
public System.Nullable<float> PipeSpecificHeat { get; set; } = (System.Nullable<float>)Single.Parse("2405", CultureInfo.InvariantCulture);
        

[JsonProperty("pipe_outer_diameter")]
public System.Nullable<float> PipeOuterDiameter { get; set; } = (System.Nullable<float>)Single.Parse("0.02667", CultureInfo.InvariantCulture);
        

[JsonProperty("pipe_thickness")]
public System.Nullable<float> PipeThickness { get; set; } = (System.Nullable<float>)Single.Parse("0.002413", CultureInfo.InvariantCulture);
        

[Description("This is the orientation of the heat exchanger")]
[JsonProperty("heat_exchanger_configuration")]
public GroundHeatExchanger_Slinky_HeatExchangerConfiguration HeatExchangerConfiguration { get; set; } = (GroundHeatExchanger_Slinky_HeatExchangerConfiguration)Enum.Parse(typeof(GroundHeatExchanger_Slinky_HeatExchangerConfiguration), "Horizontal");
        

[Description("This is the diameter of the heat exchanger coil")]
[JsonProperty("coil_diameter")]
public System.Nullable<float> CoilDiameter { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This is the center-to-center distance between coils")]
[JsonProperty("coil_pitch")]
public System.Nullable<float> CoilPitch { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("This is the distance from the ground surface to the trench bottom")]
[JsonProperty("trench_depth")]
public System.Nullable<float> TrenchDepth { get; set; } = (System.Nullable<float>)Single.Parse("1.8", CultureInfo.InvariantCulture);
        

[Description("This is the total length of a single trench This assumes the heat exchanger runs " +
    "the full length of the trench")]
[JsonProperty("trench_length")]
public System.Nullable<float> TrenchLength { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("This is the number of parallel trenches that has a heat exchanger, one per trench" +
    "")]
[JsonProperty("number_of_trenches")]
public System.Nullable<float> NumberOfTrenches { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This represents the average horizontal spacing between any two trenches for heat " +
    "exchangers that have multiple trenches")]
[JsonProperty("horizontal_spacing_between_pipes")]
public System.Nullable<float> HorizontalSpacingBetweenPipes { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[JsonProperty("undisturbed_ground_temperature_model_type")]
public GroundHeatExchanger_Slinky_UndisturbedGroundTemperatureModelType UndisturbedGroundTemperatureModelType { get; set; } = (GroundHeatExchanger_Slinky_UndisturbedGroundTemperatureModelType)Enum.Parse(typeof(GroundHeatExchanger_Slinky_UndisturbedGroundTemperatureModelType), "SiteGroundTemperatureUndisturbedFiniteDifference");
        

[JsonProperty("undisturbed_ground_temperature_model_name")]
public string UndisturbedGroundTemperatureModelName { get; set; } = "";
        

[JsonProperty("maximum_length_of_simulation")]
public System.Nullable<float> MaximumLengthOfSimulation { get; set; } = null;
    }
    
    public enum GroundHeatExchanger_Slinky_HeatExchangerConfiguration
    {
        
        [JsonProperty("Horizontal")]
        Horizontal = 0,
        
        [JsonProperty("Vertical")]
        Vertical = 1,
    }
    
    public enum GroundHeatExchanger_Slinky_UndisturbedGroundTemperatureModelType
    {
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:FiniteDifference")]
        SiteGroundTemperatureUndisturbedFiniteDifference = 0,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:KusudaAchenbach")]
        SiteGroundTemperatureUndisturbedKusudaAchenbach = 1,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:Xing")]
        SiteGroundTemperatureUndisturbedXing = 2,
    }
    
    [Description("A fluid/fluid heat exchanger designed to couple the supply side of one loop to th" +
        "e demand side of another loop Loops can be either plant or condenser loops but n" +
        "o air side connections are allowed")]
    [JsonObject("HeatExchanger:FluidToFluid")]
    public class HeatExchanger_FluidToFluid : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available. default is " +
    "that heat exchanger is on")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("This connection is to the demand side of a loop and is the inlet to the heat exch" +
    "anger")]
[JsonProperty("loop_demand_side_inlet_node_name")]
public string LoopDemandSideInletNodeName { get; set; } = "";
        

[Description("This connection is to the demand side of a loop")]
[JsonProperty("loop_demand_side_outlet_node_name")]
public string LoopDemandSideOutletNodeName { get; set; } = "";
        

[JsonProperty("loop_demand_side_design_flow_rate")]
public string LoopDemandSideDesignFlowRate { get; set; } = "";
        

[JsonProperty("loop_supply_side_inlet_node_name")]
public string LoopSupplySideInletNodeName { get; set; } = "";
        

[JsonProperty("loop_supply_side_outlet_node_name")]
public string LoopSupplySideOutletNodeName { get; set; } = "";
        

[JsonProperty("loop_supply_side_design_flow_rate")]
public string LoopSupplySideDesignFlowRate { get; set; } = "";
        

[JsonProperty("heat_exchange_model_type")]
public HeatExchanger_FluidToFluid_HeatExchangeModelType HeatExchangeModelType { get; set; } = (HeatExchanger_FluidToFluid_HeatExchangeModelType)Enum.Parse(typeof(HeatExchanger_FluidToFluid_HeatExchangeModelType), "Ideal");
        

[JsonProperty("heat_exchanger_u_factor_times_area_value")]
public string HeatExchangerUFactorTimesAreaValue { get; set; } = "";
        

[JsonProperty("control_type")]
public HeatExchanger_FluidToFluid_ControlType ControlType { get; set; } = (HeatExchanger_FluidToFluid_ControlType)Enum.Parse(typeof(HeatExchanger_FluidToFluid_ControlType), "UncontrolledOn");
        

[Description("Setpoint node is needed with any Control Type that is \"*Setpoint*\"")]
[JsonProperty("heat_exchanger_setpoint_node_name")]
public string HeatExchangerSetpointNodeName { get; set; } = "";
        

[Description("Tolerance between control temperatures used to determine if heat exchanger should" +
    " run.")]
[JsonProperty("minimum_temperature_difference_to_activate_heat_exchanger")]
public System.Nullable<float> MinimumTemperatureDifferenceToActivateHeatExchanger { get; set; } = (System.Nullable<float>)Single.Parse("0.01", CultureInfo.InvariantCulture);
        

[Description("This field controls end use reporting for heat transfer meters")]
[JsonProperty("heat_transfer_metering_end_use_type")]
public HeatExchanger_FluidToFluid_HeatTransferMeteringEndUseType HeatTransferMeteringEndUseType { get; set; } = (HeatExchanger_FluidToFluid_HeatTransferMeteringEndUseType)Enum.Parse(typeof(HeatExchanger_FluidToFluid_HeatTransferMeteringEndUseType), "LoopToLoop");
        

[Description("This field is only used if Control Type is set to CoolingSetpointOnOffWithCompone" +
    "ntOverride")]
[JsonProperty("component_override_loop_supply_side_inlet_node_name")]
public string ComponentOverrideLoopSupplySideInletNodeName { get; set; } = "";
        

[Description("This field is only used if Control Type is set to CoolingSetpointOnOffWithCompone" +
    "ntOverride")]
[JsonProperty("component_override_loop_demand_side_inlet_node_name")]
public string ComponentOverrideLoopDemandSideInletNodeName { get; set; } = "";
        

[Description("This field is only used if Control Type is set to CoolingSetpointOnOffWithCompone" +
    "ntOverride")]
[JsonProperty("component_override_cooling_control_temperature_mode")]
public HeatExchanger_FluidToFluid_ComponentOverrideCoolingControlTemperatureMode ComponentOverrideCoolingControlTemperatureMode { get; set; } = (HeatExchanger_FluidToFluid_ComponentOverrideCoolingControlTemperatureMode)Enum.Parse(typeof(HeatExchanger_FluidToFluid_ComponentOverrideCoolingControlTemperatureMode), "Loop");
        

[Description("Multiplies the autosized flow rates for this device")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Lower limit on inlet temperatures, heat exchanger will not operate if either inle" +
    "t is below this limit")]
[JsonProperty("operation_minimum_temperature_limit")]
public System.Nullable<float> OperationMinimumTemperatureLimit { get; set; } = null;
        

[Description("Upper limit on inlet temperatures, heat exchanger will not operate if either inle" +
    "t is above this limit")]
[JsonProperty("operation_maximum_temperature_limit")]
public System.Nullable<float> OperationMaximumTemperatureLimit { get; set; } = null;
    }
    
    public enum HeatExchanger_FluidToFluid_HeatExchangeModelType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CounterFlow")]
        CounterFlow = 1,
        
        [JsonProperty("CrossFlowBothMixed")]
        CrossFlowBothMixed = 2,
        
        [JsonProperty("CrossFlowBothUnMixed")]
        CrossFlowBothUnMixed = 3,
        
        [JsonProperty("CrossFlowSupplyMixedDemandUnMixed")]
        CrossFlowSupplyMixedDemandUnMixed = 4,
        
        [JsonProperty("CrossFlowSupplyUnMixedDemandMixed")]
        CrossFlowSupplyUnMixedDemandMixed = 5,
        
        [JsonProperty("Ideal")]
        Ideal = 6,
        
        [JsonProperty("ParallelFlow")]
        ParallelFlow = 7,
    }
    
    public enum HeatExchanger_FluidToFluid_ControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CoolingDifferentialOnOff")]
        CoolingDifferentialOnOff = 1,
        
        [JsonProperty("CoolingSetpointModulated")]
        CoolingSetpointModulated = 2,
        
        [JsonProperty("CoolingSetpointOnOff")]
        CoolingSetpointOnOff = 3,
        
        [JsonProperty("CoolingSetpointOnOffWithComponentOverride")]
        CoolingSetpointOnOffWithComponentOverride = 4,
        
        [JsonProperty("DualDeadbandSetpointModulated")]
        DualDeadbandSetpointModulated = 5,
        
        [JsonProperty("DualDeadbandSetpointOnOff")]
        DualDeadbandSetpointOnOff = 6,
        
        [JsonProperty("HeatingSetpointModulated")]
        HeatingSetpointModulated = 7,
        
        [JsonProperty("HeatingSetpointOnOff")]
        HeatingSetpointOnOff = 8,
        
        [JsonProperty("OperationSchemeModulated")]
        OperationSchemeModulated = 9,
        
        [JsonProperty("OperationSchemeOnOff")]
        OperationSchemeOnOff = 10,
        
        [JsonProperty("UncontrolledOn")]
        UncontrolledOn = 11,
    }
    
    public enum HeatExchanger_FluidToFluid_HeatTransferMeteringEndUseType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FreeCooling")]
        FreeCooling = 1,
        
        [JsonProperty("HeatRecovery")]
        HeatRecovery = 2,
        
        [JsonProperty("HeatRecoveryForCooling")]
        HeatRecoveryForCooling = 3,
        
        [JsonProperty("HeatRecoveryForHeating")]
        HeatRecoveryForHeating = 4,
        
        [JsonProperty("HeatRejection")]
        HeatRejection = 5,
        
        [JsonProperty("LoopToLoop")]
        LoopToLoop = 6,
    }
    
    public enum HeatExchanger_FluidToFluid_ComponentOverrideCoolingControlTemperatureMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DryBulbTemperature")]
        DryBulbTemperature = 1,
        
        [JsonProperty("Loop")]
        Loop = 2,
        
        [JsonProperty("WetBulbTemperature")]
        WetBulbTemperature = 3,
    }
}
namespace BH.oM.Adapters.EnergyPlus.Controllers
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Controller for a water coil which is located directly in an air loop branch or outdoor air equipment list. Controls the coil water flow to meet the specified leaving air setpoint(s). Used with Coil:Heating:Water, Coil:Cooling:Water, Coil:Cooling:Water:DetailedGeometry, and CoilSystem:Cooling:Water:HeatexchangerAssisted.")]
    [JsonObject("Controller:WaterCoil")]
    public class Controller_WaterCoil : BHoMObject, IEnergyPlusClass
    {
        

[Description("keys HumidityRatio or TemperatureAndHumidityRatio requires a ZoneControl:Humidist" +
    "at object along with SetpointManager:SingleZone:Humidity:Maximum, SetpointManage" +
    "r:MultiZone:MaximumHumidity:Average, or SetpointManager:Multizone:Humidity:Maxim" +
    "um object")]
[JsonProperty("control_variable")]
public Controller_WaterCoil_ControlVariable ControlVariable { get; set; } = (Controller_WaterCoil_ControlVariable)Enum.Parse(typeof(Controller_WaterCoil_ControlVariable), "HumidityRatio");
        

[Description("Leave blank to have this automatically selected from coil type. Chilled water coi" +
    "ls should be reverse action Hot water coils should be normal action")]
[JsonProperty("action")]
public Controller_WaterCoil_Action Action { get; set; } = (Controller_WaterCoil_Action)Enum.Parse(typeof(Controller_WaterCoil_Action), "Normal");
        

[JsonProperty("actuator_variable")]
public Controller_WaterCoil_ActuatorVariable ActuatorVariable { get; set; } = (Controller_WaterCoil_ActuatorVariable)Enum.Parse(typeof(Controller_WaterCoil_ActuatorVariable), "Flow");
        

[JsonProperty("sensor_node_name")]
public string SensorNodeName { get; set; } = "";
        

[JsonProperty("actuator_node_name")]
public string ActuatorNodeName { get; set; } = "";
        

[JsonProperty("controller_convergence_tolerance")]
public string ControllerConvergenceTolerance { get; set; } = (System.String)"Autosize";
        

[JsonProperty("maximum_actuated_flow")]
public string MaximumActuatedFlow { get; set; } = (System.String)"Autosize";
        

[JsonProperty("minimum_actuated_flow")]
public System.Nullable<float> MinimumActuatedFlow { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum Controller_WaterCoil_ControlVariable
    {
        
        [JsonProperty("HumidityRatio")]
        HumidityRatio = 0,
        
        [JsonProperty("Temperature")]
        Temperature = 1,
        
        [JsonProperty("TemperatureAndHumidityRatio")]
        TemperatureAndHumidityRatio = 2,
    }
    
    public enum Controller_WaterCoil_Action
    {
        
        [JsonProperty("Normal")]
        Normal = 0,
        
        [JsonProperty("Reverse")]
        Reverse = 1,
    }
    
    public enum Controller_WaterCoil_ActuatorVariable
    {
        
        [JsonProperty("Flow")]
        Flow = 0,
    }
    
    [Description("Controller to set the outdoor air flow rate for an air loop. Control options incl" +
        "ude fixed, proportional, scheduled, economizer, and demand-controlled ventilatio" +
        "n.")]
    [JsonObject("Controller:OutdoorAir")]
    public class Controller_OutdoorAir : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("relief_air_outlet_node_name")]
public string ReliefAirOutletNodeName { get; set; } = "";
        

[JsonProperty("return_air_node_name")]
public string ReturnAirNodeName { get; set; } = "";
        

[JsonProperty("mixed_air_node_name")]
public string MixedAirNodeName { get; set; } = "";
        

[Description("Outdoor air inlet node entering the first pre-treat component if any")]
[JsonProperty("actuator_node_name")]
public string ActuatorNodeName { get; set; } = "";
        

[Description("If there is a Mechanical Ventilation Controller (Controller:MechanicalVentilation" +
    "), note that this value times the Minimum Outdoor Air Schedule is a hard minimum" +
    " that may override DCV or other advanced OA controls.")]
[JsonProperty("minimum_outdoor_air_flow_rate")]
public string MinimumOutdoorAirFlowRate { get; set; } = "";
        

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string MaximumOutdoorAirFlowRate { get; set; } = "";
        

[JsonProperty("economizer_control_type")]
public Controller_OutdoorAir_EconomizerControlType EconomizerControlType { get; set; } = (Controller_OutdoorAir_EconomizerControlType)Enum.Parse(typeof(Controller_OutdoorAir_EconomizerControlType), "NoEconomizer");
        

[JsonProperty("economizer_control_action_type")]
public Controller_OutdoorAir_EconomizerControlActionType EconomizerControlActionType { get; set; } = (Controller_OutdoorAir_EconomizerControlActionType)Enum.Parse(typeof(Controller_OutdoorAir_EconomizerControlActionType), "ModulateFlow");
        

[Description("Enter the maximum outdoor dry-bulb temperature limit for FixedDryBulb economizer " +
    "control type. No input or blank input means this limit is not operative. Limit i" +
    "s applied regardless of economizer control type.")]
[JsonProperty("economizer_maximum_limit_dry_bulb_temperature")]
public System.Nullable<float> EconomizerMaximumLimitDryBulbTemperature { get; set; } = null;
        

[Description("Enter the maximum outdoor enthalpy limit for FixedEnthalpy economizer control typ" +
    "e. No input or blank input means this limit is not operative Limit is applied re" +
    "gardless of economizer control type.")]
[JsonProperty("economizer_maximum_limit_enthalpy")]
public System.Nullable<float> EconomizerMaximumLimitEnthalpy { get; set; } = null;
        

[Description("Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb " +
    "economizer control type. No input or blank input means this limit is not operati" +
    "ve. Limit is applied regardless of economizer control type.")]
[JsonProperty("economizer_maximum_limit_dewpoint_temperature")]
public System.Nullable<float> EconomizerMaximumLimitDewpointTemperature { get; set; } = null;
        

[Description(@"Enter the name of a quadratic or cubic curve which defines the maximum outdoor humidity ratio (function of outdoor dry-bulb temperature) for ElectronicEnthalpy economizer control type. No input or blank input means this limit is not operative Limit is applied regardless of economizer control type.")]
[JsonProperty("electronic_enthalpy_limit_curve_name")]
public string ElectronicEnthalpyLimitCurveName { get; set; } = "";
        

[Description("Enter the minimum outdoor dry-bulb temperature limit for economizer control. No i" +
    "nput or blank input means this limit is not operative Limit is applied regardles" +
    "s of economizer control type.")]
[JsonProperty("economizer_minimum_limit_dry_bulb_temperature")]
public System.Nullable<float> EconomizerMinimumLimitDryBulbTemperature { get; set; } = null;
        

[JsonProperty("lockout_type")]
public Controller_OutdoorAir_LockoutType LockoutType { get; set; } = (Controller_OutdoorAir_LockoutType)Enum.Parse(typeof(Controller_OutdoorAir_LockoutType), "NoLockout");
        

[JsonProperty("minimum_limit_type")]
public Controller_OutdoorAir_MinimumLimitType MinimumLimitType { get; set; } = (Controller_OutdoorAir_MinimumLimitType)Enum.Parse(typeof(Controller_OutdoorAir_MinimumLimitType), "ProportionalMinimum");
        

[Description("Schedule values multiply the minimum outdoor air flow rate")]
[JsonProperty("minimum_outdoor_air_schedule_name")]
public string MinimumOutdoorAirScheduleName { get; set; } = "";
        

[Description("schedule values multiply the design/mixed air flow rate")]
[JsonProperty("minimum_fraction_of_outdoor_air_schedule_name")]
public string MinimumFractionOfOutdoorAirScheduleName { get; set; } = "";
        

[Description("schedule values multiply the design/mixed air flow rate")]
[JsonProperty("maximum_fraction_of_outdoor_air_schedule_name")]
public string MaximumFractionOfOutdoorAirScheduleName { get; set; } = "";
        

[Description("Enter the name of a Controller:MechanicalVentilation object. Optional field for d" +
    "efining outdoor ventilation air based on flow rate per unit floor area and flow " +
    "rate per person. Simplified method of demand-controlled ventilation.")]
[JsonProperty("mechanical_ventilation_controller_name")]
public string MechanicalVentilationControllerName { get; set; } = "";
        

[Description(@"Optional schedule to simulate ""push-button"" type economizer control. Schedule values greater than 0 indicate time-of-day economizer control is enabled. Economizer control may be used with or without the high humidity control option. When used together, high humidity control has priority over economizer control. If the field Economizer Control Type = NoEconomizer, then this option is disabled.")]
[JsonProperty("time_of_day_economizer_control_schedule_name")]
public string TimeOfDayEconomizerControlScheduleName { get; set; } = "";
        

[Description(@"Optional field to enable modified outdoor air flow rates based on zone relative humidity. Select Yes to modify outdoor air flow rate based on a zone humidistat. Select No to disable this feature. If the field Economizer Control Type = NoEconomizer, then this option is disabled.")]
[JsonProperty("high_humidity_control")]
public EmptyNoYes HighHumidityControl { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Enter the name of the zone where the humidistat is located. This field is only us" +
    "ed when the field High Humidity Control = Yes.")]
[JsonProperty("humidistat_control_zone_name")]
public string HumidistatControlZoneName { get; set; } = "";
        

[Description("Enter the ratio of outdoor air to the maximum outdoor air flow rate when modified" +
    " air flow rates are active based on high indoor humidity. The minimum value must" +
    " be greater than 0. This field is only used when the field High Humidity Control" +
    " = Yes.")]
[JsonProperty("high_humidity_outdoor_air_flow_ratio")]
public System.Nullable<float> HighHumidityOutdoorAirFlowRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description(@"If No is selected, the outdoor air flow rate is modified any time indoor relative humidity is above the humidistat setpoint. If Yes is selected, the outdoor air flow rate is modified any time the indoor relative humidity is above the humidistat setpoint and the outdoor humidity ratio is less than the indoor humidity ratio. This field is only used when the field High Humidity Control = Yes.")]
[JsonProperty("control_high_indoor_humidity_based_on_outdoor_humidity_ratio")]
public EmptyNoYes ControlHighIndoorHumidityBasedOnOutdoorHumidityRatio { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[Description(@"BypassWhenWithinEconomizerLimits specifies that heat recovery is active only when the economizer is off because conditions are outside the economizer control limits BypassWhenOAFlowGreaterThanMinimum specifies enhanced economizer controls to allow heat recovery when economizer is active (within limits) but the outdoor air flow rate is at the minimum.")]
[JsonProperty("heat_recovery_bypass_control_type")]
public Controller_OutdoorAir_HeatRecoveryBypassControlType HeatRecoveryBypassControlType { get; set; } = (Controller_OutdoorAir_HeatRecoveryBypassControlType)Enum.Parse(typeof(Controller_OutdoorAir_HeatRecoveryBypassControlType), "BypassWhenWithinEconomizerLimits");
    }
    
    public enum Controller_OutdoorAir_EconomizerControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DifferentialDryBulb")]
        DifferentialDryBulb = 1,
        
        [JsonProperty("DifferentialDryBulbAndEnthalpy")]
        DifferentialDryBulbAndEnthalpy = 2,
        
        [JsonProperty("DifferentialEnthalpy")]
        DifferentialEnthalpy = 3,
        
        [JsonProperty("ElectronicEnthalpy")]
        ElectronicEnthalpy = 4,
        
        [JsonProperty("FixedDewPointAndDryBulb")]
        FixedDewPointAndDryBulb = 5,
        
        [JsonProperty("FixedDryBulb")]
        FixedDryBulb = 6,
        
        [JsonProperty("FixedEnthalpy")]
        FixedEnthalpy = 7,
        
        [JsonProperty("NoEconomizer")]
        NoEconomizer = 8,
    }
    
    public enum Controller_OutdoorAir_EconomizerControlActionType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MinimumFlowWithBypass")]
        MinimumFlowWithBypass = 1,
        
        [JsonProperty("ModulateFlow")]
        ModulateFlow = 2,
    }
    
    public enum Controller_OutdoorAir_LockoutType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LockoutWithCompressor")]
        LockoutWithCompressor = 1,
        
        [JsonProperty("LockoutWithHeating")]
        LockoutWithHeating = 2,
        
        [JsonProperty("NoLockout")]
        NoLockout = 3,
    }
    
    public enum Controller_OutdoorAir_MinimumLimitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FixedMinimum")]
        FixedMinimum = 1,
        
        [JsonProperty("ProportionalMinimum")]
        ProportionalMinimum = 2,
    }
    
    public enum Controller_OutdoorAir_HeatRecoveryBypassControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BypassWhenOAFlowGreaterThanMinimum")]
        BypassWhenOAFlowGreaterThanMinimum = 1,
        
        [JsonProperty("BypassWhenWithinEconomizerLimits")]
        BypassWhenWithinEconomizerLimits = 2,
    }
    
    [Description(@"This object is used in conjunction with Controller:OutdoorAir to specify outdoor ventilation air based on outdoor air specified in the DesignSpecification:OutdoorAir object The Controller:OutdoorAir object is associated with a specific air loop, so the outdoor air flow rates specified in Controller:MechanicalVentilation correspond to the zones attached to that specific air loop. Duplicate groups of Zone name, Design Specification Outdoor Air Object Name, and Design Specification Zone Air Distribution Object Name to increase allowable number of entries")]
    [JsonObject("Controller:MechanicalVentilation")]
    public class Controller_MechanicalVentilation : BHoMObject, IEnergyPlusClass
    {
        

[Description("If this field is blank, the controller uses the values from the associated Contro" +
    "ller:OutdoorAir. Schedule values greater than 0 indicate mechanical ventilation " +
    "is enabled")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("demand_controlled_ventilation")]
public EmptyNoYes DemandControlledVentilation { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("system_outdoor_air_method")]
public Controller_MechanicalVentilation_SystemOutdoorAirMethod SystemOutdoorAirMethod { get; set; } = (Controller_MechanicalVentilation_SystemOutdoorAirMethod)Enum.Parse(typeof(Controller_MechanicalVentilation_SystemOutdoorAirMethod), "VentilationRateProcedure");
        

[JsonProperty("zone_maximum_outdoor_air_fraction")]
public System.Nullable<float> ZoneMaximumOutdoorAirFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("zone_specifications")]
public string ZoneSpecifications { get; set; } = "";
    }
    
    public enum Controller_MechanicalVentilation_SystemOutdoorAirMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("IndoorAirQualityProcedure")]
        IndoorAirQualityProcedure = 1,
        
        [JsonProperty("IndoorAirQualityProcedureCombined")]
        IndoorAirQualityProcedureCombined = 2,
        
        [JsonProperty("IndoorAirQualityProcedureGenericContaminant")]
        IndoorAirQualityProcedureGenericContaminant = 3,
        
        [JsonProperty("ProportionalControlBasedOnDesignOARate")]
        ProportionalControlBasedOnDesignOARate = 4,
        
        [JsonProperty("ProportionalControlBasedOnDesignOccupancy")]
        ProportionalControlBasedOnDesignOccupancy = 5,
        
        [JsonProperty("ProportionalControlBasedOnOccupancySchedule")]
        ProportionalControlBasedOnOccupancySchedule = 6,
        
        [JsonProperty("VentilationRateProcedure")]
        VentilationRateProcedure = 7,
        
        [JsonProperty("ZoneSum")]
        ZoneSum = 8,
    }
    
    [Description("List controllers in order of control sequence")]
    [JsonObject("AirLoopHVAC:ControllerList")]
    public class AirLoopHVAC_ControllerList : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("controller_1_object_type")]
public AirLoopHVAC_ControllerList_Controller1ObjectType Controller1ObjectType { get; set; } = (AirLoopHVAC_ControllerList_Controller1ObjectType)Enum.Parse(typeof(AirLoopHVAC_ControllerList_Controller1ObjectType), "ControllerOutdoorAir");
        

[JsonProperty("controller_1_name")]
public string Controller1Name { get; set; } = "";
        

[JsonProperty("controller_2_object_type")]
public AirLoopHVAC_ControllerList_Controller2ObjectType Controller2ObjectType { get; set; } = (AirLoopHVAC_ControllerList_Controller2ObjectType)Enum.Parse(typeof(AirLoopHVAC_ControllerList_Controller2ObjectType), "ControllerOutdoorAir");
        

[JsonProperty("controller_2_name")]
public string Controller2Name { get; set; } = "";
        

[JsonProperty("controller_3_object_type")]
public AirLoopHVAC_ControllerList_Controller3ObjectType Controller3ObjectType { get; set; } = (AirLoopHVAC_ControllerList_Controller3ObjectType)Enum.Parse(typeof(AirLoopHVAC_ControllerList_Controller3ObjectType), "ControllerOutdoorAir");
        

[JsonProperty("controller_3_name")]
public string Controller3Name { get; set; } = "";
        

[JsonProperty("controller_4_object_type")]
public AirLoopHVAC_ControllerList_Controller4ObjectType Controller4ObjectType { get; set; } = (AirLoopHVAC_ControllerList_Controller4ObjectType)Enum.Parse(typeof(AirLoopHVAC_ControllerList_Controller4ObjectType), "ControllerOutdoorAir");
        

[JsonProperty("controller_4_name")]
public string Controller4Name { get; set; } = "";
        

[JsonProperty("controller_5_object_type")]
public AirLoopHVAC_ControllerList_Controller5ObjectType Controller5ObjectType { get; set; } = (AirLoopHVAC_ControllerList_Controller5ObjectType)Enum.Parse(typeof(AirLoopHVAC_ControllerList_Controller5ObjectType), "ControllerOutdoorAir");
        

[JsonProperty("controller_5_name")]
public string Controller5Name { get; set; } = "";
        

[JsonProperty("controller_6_object_type")]
public AirLoopHVAC_ControllerList_Controller6ObjectType Controller6ObjectType { get; set; } = (AirLoopHVAC_ControllerList_Controller6ObjectType)Enum.Parse(typeof(AirLoopHVAC_ControllerList_Controller6ObjectType), "ControllerOutdoorAir");
        

[JsonProperty("controller_6_name")]
public string Controller6Name { get; set; } = "";
        

[JsonProperty("controller_7_object_type")]
public AirLoopHVAC_ControllerList_Controller7ObjectType Controller7ObjectType { get; set; } = (AirLoopHVAC_ControllerList_Controller7ObjectType)Enum.Parse(typeof(AirLoopHVAC_ControllerList_Controller7ObjectType), "ControllerOutdoorAir");
        

[JsonProperty("controller_7_name")]
public string Controller7Name { get; set; } = "";
        

[JsonProperty("controller_8_object_type")]
public AirLoopHVAC_ControllerList_Controller8ObjectType Controller8ObjectType { get; set; } = (AirLoopHVAC_ControllerList_Controller8ObjectType)Enum.Parse(typeof(AirLoopHVAC_ControllerList_Controller8ObjectType), "ControllerOutdoorAir");
        

[JsonProperty("controller_8_name")]
public string Controller8Name { get; set; } = "";
    }
    
    public enum AirLoopHVAC_ControllerList_Controller1ObjectType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
        
        [JsonProperty("Controller:WaterCoil")]
        ControllerWaterCoil = 1,
    }
    
    public enum AirLoopHVAC_ControllerList_Controller2ObjectType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
        
        [JsonProperty("Controller:WaterCoil")]
        ControllerWaterCoil = 1,
    }
    
    public enum AirLoopHVAC_ControllerList_Controller3ObjectType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
        
        [JsonProperty("Controller:WaterCoil")]
        ControllerWaterCoil = 1,
    }
    
    public enum AirLoopHVAC_ControllerList_Controller4ObjectType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
        
        [JsonProperty("Controller:WaterCoil")]
        ControllerWaterCoil = 1,
    }
    
    public enum AirLoopHVAC_ControllerList_Controller5ObjectType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
        
        [JsonProperty("Controller:WaterCoil")]
        ControllerWaterCoil = 1,
    }
    
    public enum AirLoopHVAC_ControllerList_Controller6ObjectType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
        
        [JsonProperty("Controller:WaterCoil")]
        ControllerWaterCoil = 1,
    }
    
    public enum AirLoopHVAC_ControllerList_Controller7ObjectType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
        
        [JsonProperty("Controller:WaterCoil")]
        ControllerWaterCoil = 1,
    }
    
    public enum AirLoopHVAC_ControllerList_Controller8ObjectType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
        
        [JsonProperty("Controller:WaterCoil")]
        ControllerWaterCoil = 1,
    }
}
namespace BH.oM.Adapters.EnergyPlus.Daylighting
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Dimming of overhead electric lighting is determined from each reference point. Gl" +
        "are from daylighting is also calculated.")]
    [JsonObject("Daylighting:Controls")]
    public class Daylighting_Controls : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("daylighting_method")]
public Daylighting_Controls_DaylightingMethod DaylightingMethod { get; set; } = (Daylighting_Controls_DaylightingMethod)Enum.Parse(typeof(Daylighting_Controls_DaylightingMethod), "SplitFlux");
        

[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("lighting_control_type")]
public Daylighting_Controls_LightingControlType LightingControlType { get; set; } = (Daylighting_Controls_LightingControlType)Enum.Parse(typeof(Daylighting_Controls_LightingControlType), "Continuous");
        

[JsonProperty("minimum_input_power_fraction_for_continuous_or_continuousoff_dimming_control")]
public System.Nullable<float> MinimumInputPowerFractionForContinuousOrContinuousoffDimmingControl { get; set; } = (System.Nullable<float>)Single.Parse("0.3", CultureInfo.InvariantCulture);
        

[JsonProperty("minimum_light_output_fraction_for_continuous_or_continuousoff_dimming_control")]
public System.Nullable<float> MinimumLightOutputFractionForContinuousOrContinuousoffDimmingControl { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("The number of steps, excluding off, in a stepped lighting control system. If Ligh" +
    "ting Control Type is Stepped, this field must be greater than zero. The steps ar" +
    "e assumed to be equally spaced.")]
[JsonProperty("number_of_stepped_control_steps")]
public System.Nullable<float> NumberOfSteppedControlSteps { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("probability_lighting_will_be_reset_when_needed_in_manual_stepped_control")]
public System.Nullable<float> ProbabilityLightingWillBeResetWhenNeededInManualSteppedControl { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("glare_calculation_daylighting_reference_point_name")]
public string GlareCalculationDaylightingReferencePointName { get; set; } = "";
        

[JsonProperty("glare_calculation_azimuth_angle_of_view_direction_clockwise_from_zone_y_axis")]
public System.Nullable<float> GlareCalculationAzimuthAngleOfViewDirectionClockwiseFromZoneYAxis { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The default is for general office work")]
[JsonProperty("maximum_allowable_discomfort_glare_index")]
public System.Nullable<float> MaximumAllowableDiscomfortGlareIndex { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[Description(@"Maximum surface area for nodes in gridding all surfaces in the DElight zone. All reflective and transmitting surfaces will be subdivided into approximately square nodes that do not exceed this maximum. Higher resolution subdivisions require greater calculation times, but generally produce more accurate results.")]
[JsonProperty("delight_gridding_resolution")]
public System.Nullable<float> DelightGriddingResolution { get; set; } = null;
        

[JsonProperty("control_data")]
public string ControlData { get; set; } = "";
    }
    
    public enum Daylighting_Controls_DaylightingMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DElight")]
        DElight = 1,
        
        [JsonProperty("SplitFlux")]
        SplitFlux = 2,
    }
    
    public enum Daylighting_Controls_LightingControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Continuous")]
        Continuous = 1,
        
        [JsonProperty("ContinuousOff")]
        ContinuousOff = 2,
        
        [JsonProperty("Stepped")]
        Stepped = 3,
    }
    
    [Description("Used by Daylighting:Controls to identify the reference point coordinates for each" +
        " sensor. Reference points are given in coordinates specified in the GlobalGeomet" +
        "ryRules object Daylighting Reference Point CoordinateSystem field")]
    [JsonObject("Daylighting:ReferencePoint")]
    public class Daylighting_ReferencePoint : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("x_coordinate_of_reference_point")]
public System.Nullable<float> XCoordinateOfReferencePoint { get; set; } = null;
        

[JsonProperty("y_coordinate_of_reference_point")]
public System.Nullable<float> YCoordinateOfReferencePoint { get; set; } = null;
        

[JsonProperty("z_coordinate_of_reference_point")]
public System.Nullable<float> ZCoordinateOfReferencePoint { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
    }
    
    [Description("Used for DElight Complex Fenestration of all types")]
    [JsonObject("Daylighting:DELight:ComplexFenestration")]
    public class Daylighting_DELight_ComplexFenestration : BHoMObject, IEnergyPlusClass
    {
        

[Description("Used to select the appropriate Complex Fenestration BTDF data")]
[JsonProperty("complex_fenestration_type")]
public string ComplexFenestrationType { get; set; } = "";
        

[Description("This is a reference to a valid surface object (such as BuildingSurface:Detailed) " +
    "hosting this complex fenestration, analogous to the base surface Name field for " +
    "subsurfaces such as Windows.")]
[JsonProperty("building_surface_name")]
public string BuildingSurfaceName { get; set; } = "";
        

[Description("This is a reference to a valid FenestrationSurface:Detailed window object used to" +
    " account for the geometry, and the solar and thermal gains/losses, of the Comple" +
    "x Fenestration")]
[JsonProperty("window_name")]
public string WindowName { get; set; } = "";
        

[Description(@"In-plane counter-clockwise rotation angle of the Complex Fenestration optical reference direction and the base edge of the Complex Fenestration. The Rotation will typically be zero when the host and CFS surfaces are rectangular and height and width edges are aligned.")]
[JsonProperty("fenestration_rotation")]
public System.Nullable<float> FenestrationRotation { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    [Description("Defines a tubular daylighting device (TDD) consisting of three components: a dome" +
        ", a pipe, and a diffuser. The dome and diffuser are defined separately using the" +
        " FenestrationSurface:Detailed object.")]
    [JsonObject("DaylightingDevice:Tubular")]
    public class DaylightingDevice_Tubular : BHoMObject, IEnergyPlusClass
    {
        

[Description("This must refer to a subsurface object of type TubularDaylightDome")]
[JsonProperty("dome_name")]
public string DomeName { get; set; } = "";
        

[Description("This must refer to a subsurface object of type TubularDaylightDiffuser Delivery z" +
    "one is specified in the diffuser object")]
[JsonProperty("diffuser_name")]
public string DiffuserName { get; set; } = "";
        

[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[JsonProperty("diameter")]
public System.Nullable<float> Diameter { get; set; } = null;
        

[Description("The exterior exposed length is the difference between total and sum of zone lengt" +
    "hs")]
[JsonProperty("total_length")]
public System.Nullable<float> TotalLength { get; set; } = null;
        

[Description("R value between TubularDaylightDome and TubularDaylightDiffuser")]
[JsonProperty("effective_thermal_resistance")]
public System.Nullable<float> EffectiveThermalResistance { get; set; } = (System.Nullable<float>)Single.Parse("0.28", CultureInfo.InvariantCulture);
        

[JsonProperty("transition_lengths")]
public string TransitionLengths { get; set; } = "";
    }
    
    [Description("Defines a daylighting which can have an inside shelf, an outside shelf, or both. " +
        "The inside shelf is defined as a building surface and the outside shelf is defin" +
        "ed as a shading surface.")]
    [JsonObject("DaylightingDevice:Shelf")]
    public class DaylightingDevice_Shelf : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("window_name")]
public string WindowName { get; set; } = "";
        

[Description("This must refer to a BuildingSurface:Detailed or equivalent object This surface m" +
    "ust be its own Surface for other side boundary conditions.")]
[JsonProperty("inside_shelf_name")]
public string InsideShelfName { get; set; } = "";
        

[Description("This must refer to a Shading:Zone:Detailed object")]
[JsonProperty("outside_shelf_name")]
public string OutsideShelfName { get; set; } = "";
        

[Description("Required if outside shelf is specified")]
[JsonProperty("outside_shelf_construction_name")]
public string OutsideShelfConstructionName { get; set; } = "";
        

[JsonProperty("view_factor_to_outside_shelf")]
public System.Nullable<float> ViewFactorToOutsideShelf { get; set; } = null;
    }
    
    [Description("Applies only to exterior windows in daylighting-controlled zones or in zones that" +
        " share an interior window with a daylighting-controlled  zone. Generally used wi" +
        "th skylights.")]
    [JsonObject("DaylightingDevice:LightWell")]
    public class DaylightingDevice_LightWell : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("exterior_window_name")]
public string ExteriorWindowName { get; set; } = "";
        

[Description("Distance from Bottom of Window to Bottom of Well")]
[JsonProperty("height_of_well")]
public System.Nullable<float> HeightOfWell { get; set; } = null;
        

[JsonProperty("perimeter_of_bottom_of_well")]
public System.Nullable<float> PerimeterOfBottomOfWell { get; set; } = null;
        

[JsonProperty("area_of_bottom_of_well")]
public System.Nullable<float> AreaOfBottomOfWell { get; set; } = null;
        

[JsonProperty("visible_reflectance_of_well_walls")]
public System.Nullable<float> VisibleReflectanceOfWellWalls { get; set; } = null;
    }
    
    [Description("Reports hourly daylight factors for each exterior window for four sky types (clea" +
        "r, turbid clear, intermediate, and overcast).")]
    [JsonObject("Output:DaylightFactors")]
    public class Output_DaylightFactors : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("reporting_days")]
public Output_DaylightFactors_ReportingDays ReportingDays { get; set; } = (Output_DaylightFactors_ReportingDays)Enum.Parse(typeof(Output_DaylightFactors_ReportingDays), "AllShadowCalculationDays");
    }
    
    public enum Output_DaylightFactors_ReportingDays
    {
        
        [JsonProperty("AllShadowCalculationDays")]
        AllShadowCalculationDays = 0,
        
        [JsonProperty("SizingDays")]
        SizingDays = 1,
    }
    
    [Description("reference points are given in coordinates specified in the GlobalGeometryRules ob" +
        "ject Daylighting Reference Point CoordinateSystem field")]
    [JsonObject("Output:IlluminanceMap")]
    public class Output_IlluminanceMap : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("z_height")]
public System.Nullable<float> ZHeight { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("x_minimum_coordinate")]
public System.Nullable<float> XMinimumCoordinate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("x_maximum_coordinate")]
public System.Nullable<float> XMaximumCoordinate { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Maximum number of total grid points must be <= 2500 (X*Y)")]
[JsonProperty("number_of_x_grid_points")]
public System.Nullable<float> NumberOfXGridPoints { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[JsonProperty("y_minimum_coordinate")]
public System.Nullable<float> YMinimumCoordinate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("y_maximum_coordinate")]
public System.Nullable<float> YMaximumCoordinate { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Maximum number of total grid points must be <= 2500 (X*Y)")]
[JsonProperty("number_of_y_grid_points")]
public System.Nullable<float> NumberOfYGridPoints { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
    }
    
    [Description(@"default style for the Daylighting Illuminance Map is comma -- this works well for importing into spreadsheet programs such as Excel(tm) but not so well for word processing programs -- there tab may be a better choice. fixed puts spaces between the ""columns""")]
    [JsonObject("OutputControl:IlluminanceMap:Style")]
    public class OutputControl_IlluminanceMap_Style : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("column_separator")]
public OutputControl_IlluminanceMap_Style_ColumnSeparator ColumnSeparator { get; set; } = (OutputControl_IlluminanceMap_Style_ColumnSeparator)Enum.Parse(typeof(OutputControl_IlluminanceMap_Style_ColumnSeparator), "Comma");
    }
    
    public enum OutputControl_IlluminanceMap_Style_ColumnSeparator
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Comma")]
        Comma = 1,
        
        [JsonProperty("Fixed")]
        Fixed = 2,
        
        [JsonProperty("Tab")]
        Tab = 3,
    }
}
namespace BH.oM.Adapters.EnergyPlus.DemandLimitingControls
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("a list of meters that can be reported are available after a run on the meter dict" +
        "ionary file (.mdd) if the Output:VariableDictionary has been requested.")]
    [JsonObject("DemandManagerAssignmentList")]
    public class DemandManagerAssignmentList : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("meter_name")]
public string MeterName { get; set; } = "";
        

[JsonProperty("demand_limit_schedule_name")]
public string DemandLimitScheduleName { get; set; } = "";
        

[JsonProperty("demand_limit_safety_fraction")]
public System.Nullable<float> DemandLimitSafetyFraction { get; set; } = null;
        

[Description("This field should reference the same schedule as the month schedule name field of" +
    " the UtilityCost:Tariff object, if used. If blank, defaults to regular divisions" +
    " between months.")]
[JsonProperty("billing_period_schedule_name")]
public string BillingPeriodScheduleName { get; set; } = "";
        

[Description("This field should reference the same schedule as the period schedule name field o" +
    "f the UtilityCost:Tariff object, if used. If blank, defaults to always on peak.")]
[JsonProperty("peak_period_schedule_name")]
public string PeakPeriodScheduleName { get; set; } = "";
        

[JsonProperty("demand_window_length")]
public System.Nullable<float> DemandWindowLength { get; set; } = null;
        

[JsonProperty("demand_manager_priority")]
public DemandManagerAssignmentList_DemandManagerPriority DemandManagerPriority { get; set; } = (DemandManagerAssignmentList_DemandManagerPriority)Enum.Parse(typeof(DemandManagerAssignmentList_DemandManagerPriority), "All");
        

[JsonProperty("manager_data")]
public string ManagerData { get; set; } = "";
    }
    
    public enum DemandManagerAssignmentList_DemandManagerPriority
    {
        
        [JsonProperty("All")]
        All = 0,
        
        [JsonProperty("Sequential")]
        Sequential = 1,
    }
    
    [Description("used for demand limiting Exterior:Lights objects.")]
    [JsonObject("DemandManager:ExteriorLights")]
    public class DemandManager_ExteriorLights : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("limit_control")]
public DemandManager_ExteriorLights_LimitControl LimitControl { get; set; } = (DemandManager_ExteriorLights_LimitControl)Enum.Parse(typeof(DemandManager_ExteriorLights_LimitControl), "Fixed");
        

[Description("If blank, duration defaults to the timestep")]
[JsonProperty("minimum_limit_duration")]
public System.Nullable<float> MinimumLimitDuration { get; set; } = null;
        

[JsonProperty("maximum_limit_fraction")]
public System.Nullable<float> MaximumLimitFraction { get; set; } = null;
        

[Description("Not yet implemented")]
[JsonProperty("limit_step_change")]
public System.Nullable<float> LimitStepChange { get; set; } = null;
        

[JsonProperty("selection_control")]
public DemandManager_ExteriorLights_SelectionControl SelectionControl { get; set; } = (DemandManager_ExteriorLights_SelectionControl)Enum.Parse(typeof(DemandManager_ExteriorLights_SelectionControl), "All");
        

[Description("If blank, duration defaults to the timestep")]
[JsonProperty("rotation_duration")]
public System.Nullable<float> RotationDuration { get; set; } = null;
        

[JsonProperty("lights")]
public string Lights { get; set; } = "";
    }
    
    public enum DemandManager_ExteriorLights_LimitControl
    {
        
        [JsonProperty("Fixed")]
        Fixed = 0,
        
        [JsonProperty("Off")]
        Off = 1,
    }
    
    public enum DemandManager_ExteriorLights_SelectionControl
    {
        
        [JsonProperty("All")]
        All = 0,
        
        [JsonProperty("RotateMany")]
        RotateMany = 1,
        
        [JsonProperty("RotateOne")]
        RotateOne = 2,
    }
    
    [Description("used for demand limiting Lights objects.")]
    [JsonObject("DemandManager:Lights")]
    public class DemandManager_Lights : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("limit_control")]
public DemandManager_Lights_LimitControl LimitControl { get; set; } = (DemandManager_Lights_LimitControl)Enum.Parse(typeof(DemandManager_Lights_LimitControl), "Fixed");
        

[Description("If blank, duration defaults to the timestep")]
[JsonProperty("minimum_limit_duration")]
public System.Nullable<float> MinimumLimitDuration { get; set; } = null;
        

[JsonProperty("maximum_limit_fraction")]
public System.Nullable<float> MaximumLimitFraction { get; set; } = null;
        

[Description("Not yet implemented")]
[JsonProperty("limit_step_change")]
public System.Nullable<float> LimitStepChange { get; set; } = null;
        

[JsonProperty("selection_control")]
public DemandManager_Lights_SelectionControl SelectionControl { get; set; } = (DemandManager_Lights_SelectionControl)Enum.Parse(typeof(DemandManager_Lights_SelectionControl), "All");
        

[Description("If blank, duration defaults to the timestep")]
[JsonProperty("rotation_duration")]
public System.Nullable<float> RotationDuration { get; set; } = null;
        

[JsonProperty("lights")]
public string Lights { get; set; } = "";
    }
    
    public enum DemandManager_Lights_LimitControl
    {
        
        [JsonProperty("Fixed")]
        Fixed = 0,
        
        [JsonProperty("Off")]
        Off = 1,
    }
    
    public enum DemandManager_Lights_SelectionControl
    {
        
        [JsonProperty("All")]
        All = 0,
        
        [JsonProperty("RotateMany")]
        RotateMany = 1,
        
        [JsonProperty("RotateOne")]
        RotateOne = 2,
    }
    
    [Description("used for demand limiting ElectricEquipment objects.")]
    [JsonObject("DemandManager:ElectricEquipment")]
    public class DemandManager_ElectricEquipment : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("limit_control")]
public DemandManager_ElectricEquipment_LimitControl LimitControl { get; set; } = (DemandManager_ElectricEquipment_LimitControl)Enum.Parse(typeof(DemandManager_ElectricEquipment_LimitControl), "Fixed");
        

[Description("If blank, duration defaults to the timestep")]
[JsonProperty("minimum_limit_duration")]
public System.Nullable<float> MinimumLimitDuration { get; set; } = null;
        

[JsonProperty("maximum_limit_fraction")]
public System.Nullable<float> MaximumLimitFraction { get; set; } = null;
        

[Description("Not yet implemented")]
[JsonProperty("limit_step_change")]
public System.Nullable<float> LimitStepChange { get; set; } = null;
        

[JsonProperty("selection_control")]
public DemandManager_ElectricEquipment_SelectionControl SelectionControl { get; set; } = (DemandManager_ElectricEquipment_SelectionControl)Enum.Parse(typeof(DemandManager_ElectricEquipment_SelectionControl), "All");
        

[Description("If blank, duration defaults to the timestep")]
[JsonProperty("rotation_duration")]
public System.Nullable<float> RotationDuration { get; set; } = null;
        

[JsonProperty("equipment")]
public string Equipment { get; set; } = "";
    }
    
    public enum DemandManager_ElectricEquipment_LimitControl
    {
        
        [JsonProperty("Fixed")]
        Fixed = 0,
        
        [JsonProperty("Off")]
        Off = 1,
    }
    
    public enum DemandManager_ElectricEquipment_SelectionControl
    {
        
        [JsonProperty("All")]
        All = 0,
        
        [JsonProperty("RotateMany")]
        RotateMany = 1,
        
        [JsonProperty("RotateOne")]
        RotateOne = 2,
    }
    
    [Description("used for demand limiting ZoneControl:Thermostat objects.")]
    [JsonObject("DemandManager:Thermostats")]
    public class DemandManager_Thermostats : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("reset_control")]
public DemandManager_Thermostats_ResetControl ResetControl { get; set; } = (DemandManager_Thermostats_ResetControl)Enum.Parse(typeof(DemandManager_Thermostats_ResetControl), "Fixed");
        

[Description("If blank, duration defaults to the timestep")]
[JsonProperty("minimum_reset_duration")]
public System.Nullable<float> MinimumResetDuration { get; set; } = null;
        

[JsonProperty("maximum_heating_setpoint_reset")]
public System.Nullable<float> MaximumHeatingSetpointReset { get; set; } = null;
        

[JsonProperty("maximum_cooling_setpoint_reset")]
public System.Nullable<float> MaximumCoolingSetpointReset { get; set; } = null;
        

[Description("Not yet implemented")]
[JsonProperty("reset_step_change")]
public System.Nullable<float> ResetStepChange { get; set; } = null;
        

[JsonProperty("selection_control")]
public DemandManager_Thermostats_SelectionControl SelectionControl { get; set; } = (DemandManager_Thermostats_SelectionControl)Enum.Parse(typeof(DemandManager_Thermostats_SelectionControl), "All");
        

[Description("If blank, duration defaults to the timestep")]
[JsonProperty("rotation_duration")]
public System.Nullable<float> RotationDuration { get; set; } = null;
        

[JsonProperty("thermostats")]
public string Thermostats { get; set; } = "";
    }
    
    public enum DemandManager_Thermostats_ResetControl
    {
        
        [JsonProperty("Fixed")]
        Fixed = 0,
        
        [JsonProperty("Off")]
        Off = 1,
    }
    
    public enum DemandManager_Thermostats_SelectionControl
    {
        
        [JsonProperty("All")]
        All = 0,
        
        [JsonProperty("RotateMany")]
        RotateMany = 1,
        
        [JsonProperty("RotateOne")]
        RotateOne = 2,
    }
    
    [Description("used for demand limiting Controller:OutdoorAir objects.")]
    [JsonObject("DemandManager:Ventilation")]
    public class DemandManager_Ventilation : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this demand manager. Schedule value > 0 means the " +
    "demand manager is available. If this field is blank, the DR is always available." +
    "")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("limit_control")]
public DemandManager_Ventilation_LimitControl LimitControl { get; set; } = (DemandManager_Ventilation_LimitControl)Enum.Parse(typeof(DemandManager_Ventilation_LimitControl), "FixedRate");
        

[Description("If blank, duration defaults to the timestep")]
[JsonProperty("minimum_limit_duration")]
public System.Nullable<float> MinimumLimitDuration { get; set; } = null;
        

[Description("Used in case when Limit strategy is set to FixedRate")]
[JsonProperty("fixed_rate")]
public System.Nullable<float> FixedRate { get; set; } = null;
        

[Description("Used in case when Limit Control is set to ReductionRatio")]
[JsonProperty("reduction_ratio")]
public System.Nullable<float> ReductionRatio { get; set; } = null;
        

[Description("Not yet implemented")]
[JsonProperty("limit_step_change")]
public System.Nullable<float> LimitStepChange { get; set; } = null;
        

[JsonProperty("selection_control")]
public DemandManager_Ventilation_SelectionControl SelectionControl { get; set; } = (DemandManager_Ventilation_SelectionControl)Enum.Parse(typeof(DemandManager_Ventilation_SelectionControl), "All");
        

[Description("If blank, duration defaults to the timestep")]
[JsonProperty("rotation_duration")]
public System.Nullable<float> RotationDuration { get; set; } = null;
        

[JsonProperty("controllers")]
public string Controllers { get; set; } = "";
    }
    
    public enum DemandManager_Ventilation_LimitControl
    {
        
        [JsonProperty("FixedRate")]
        FixedRate = 0,
        
        [JsonProperty("Off")]
        Off = 1,
        
        [JsonProperty("ReductionRatio")]
        ReductionRatio = 2,
    }
    
    public enum DemandManager_Ventilation_SelectionControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("All")]
        All = 1,
        
        [JsonProperty("RotateMany")]
        RotateMany = 2,
        
        [JsonProperty("RotateOne")]
        RotateOne = 3,
    }
}
namespace BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Object determines if the Slab and Basement preprocessors are going to be executed" +
        ".")]
    [JsonObject("GroundHeatTransfer:Control")]
    public class GroundHeatTransfer_Control : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("run_basement_preprocessor")]
public EmptyNoYes RunBasementPreprocessor { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("run_slab_preprocessor")]
public EmptyNoYes RunSlabPreprocessor { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
    }
    
    [Description("Object gives an overall description of the slab ground heat transfer model.")]
    [JsonObject("GroundHeatTransfer:Slab:Materials")]
    public class GroundHeatTransfer_Slab_Materials : BHoMObject, IEnergyPlusClass
    {
        

[Description("This field specifies the number of different materials that will be used in the m" +
    "odel. Typically only a ground material and a slab material are used. (2 material" +
    "s)")]
[JsonProperty("nmat_number_of_materials")]
public System.Nullable<float> NmatNumberOfMaterials { get; set; } = null;
        

[Description(@"Two fields specify the albedo value of the surface: first for no snow coverage days; second for days with snow coverage. The albedo is the solar reflectivity of the surface, and can vary from 0.05 for blacktop to 0.95 for fresh snow. Typical values for North America reported by Bahnfleth range from 0.16 to 0.4.")]
[JsonProperty("albedo_surface_albedo_no_snow")]
public System.Nullable<float> AlbedoSurfaceAlbedoNoSnow { get; set; } = (System.Nullable<float>)Single.Parse("0.16", CultureInfo.InvariantCulture);
        

[JsonProperty("albedo_surface_albedo_snow")]
public System.Nullable<float> AlbedoSurfaceAlbedoSnow { get; set; } = (System.Nullable<float>)Single.Parse("0.4", CultureInfo.InvariantCulture);
        

[Description("EPSLW (No Snow and Snow) specifies the long wavelength (thermal) emissivity of th" +
    "e ground surface. primarily important for nighttime radiation to sky. typical va" +
    "lue .95")]
[JsonProperty("epslw_surface_emissivity_no_snow")]
public System.Nullable<float> EpslwSurfaceEmissivityNoSnow { get; set; } = (System.Nullable<float>)Single.Parse("0.94", CultureInfo.InvariantCulture);
        

[JsonProperty("epslw_surface_emissivity_snow")]
public System.Nullable<float> EpslwSurfaceEmissivitySnow { get; set; } = (System.Nullable<float>)Single.Parse("0.86", CultureInfo.InvariantCulture);
        

[Description("fields Z0 (No Snow and Snow) describe the height at which an experimentally veloc" +
    "ity profile goes to zero. typical value= .75 cm")]
[JsonProperty("z0_surface_roughness_no_snow")]
public System.Nullable<float> Z0SurfaceRoughnessNoSnow { get; set; } = (System.Nullable<float>)Single.Parse("0.75", CultureInfo.InvariantCulture);
        

[Description("typical value= .05 cm")]
[JsonProperty("z0_surface_roughness_snow")]
public System.Nullable<float> Z0SurfaceRoughnessSnow { get; set; } = (System.Nullable<float>)Single.Parse("0.25", CultureInfo.InvariantCulture);
        

[Description(@"These fields specify the combined convective and radiative heat transfer coefficient between the slab top inside surface and the room air for the cases where heat is flowing downward, and upward. The program toggles between the two if the direction of the heat flux changes. Typical values can be found in the ASHRAE Handbook of Fundamentals, but should be about 6 W/(m2-K) for downward heat flow and 9 W/(m2-K) for upward heat flow. typical value= 4-10")]
[JsonProperty("hin_indoor_hconv_downward_flow")]
public System.Nullable<float> HinIndoorHconvDownwardFlow { get; set; } = (System.Nullable<float>)Single.Parse("6.13", CultureInfo.InvariantCulture);
        

[Description("typical value= 4-10")]
[JsonProperty("hin_indoor_hconv_upward")]
public System.Nullable<float> HinIndoorHconvUpward { get; set; } = (System.Nullable<float>)Single.Parse("9.26", CultureInfo.InvariantCulture);
    }
    
    [Description("This object contains the material properties for the materials used in the model." +
        " The fields are mostly self explanatory.")]
    [JsonObject("GroundHeatTransfer:Slab:MatlProps")]
    public class GroundHeatTransfer_Slab_MatlProps : BHoMObject, IEnergyPlusClass
    {
        

[Description("Density of Slab Material typical value= 2300.0")]
[JsonProperty("rho_slab_material_density")]
public System.Nullable<float> RhoSlabMaterialDensity { get; set; } = (System.Nullable<float>)Single.Parse("2300", CultureInfo.InvariantCulture);
        

[Description("Density of Soil Material typical value= 1200.0")]
[JsonProperty("rho_soil_density")]
public System.Nullable<float> RhoSoilDensity { get; set; } = (System.Nullable<float>)Single.Parse("1200", CultureInfo.InvariantCulture);
        

[Description("Specific Heat of Slab Material typical value=650.0")]
[JsonProperty("cp_slab_cp")]
public System.Nullable<float> CpSlabCp { get; set; } = (System.Nullable<float>)Single.Parse("650", CultureInfo.InvariantCulture);
        

[Description("Specific Heat of Soil Material typical value= 1200.0")]
[JsonProperty("cp_soil_cp")]
public System.Nullable<float> CpSoilCp { get; set; } = (System.Nullable<float>)Single.Parse("1200", CultureInfo.InvariantCulture);
        

[Description("Conductivity of Slab Material typical value= .9")]
[JsonProperty("tcon_slab_k")]
public System.Nullable<float> TconSlabK { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("Conductivity of Soil Material typical value= 1.0")]
[JsonProperty("tcon_soil_k")]
public System.Nullable<float> TconSoilK { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    [Description("Supplies some of the boundary conditions used in the ground heat transfer calcula" +
        "tions.")]
    [JsonObject("GroundHeatTransfer:Slab:BoundConds")]
    public class GroundHeatTransfer_Slab_BoundConds : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"This field specifies whether or not to use the evapotransporation model. The inclusion of evapotransporation in the calculation has the greatest effect in warm dry climates, primarily on the ground surface temperature. This field can be used to turn the evapotransporation off and on to check sensitivity to it.")]
[JsonProperty("evtr_is_surface_evapotranspiration_modeled")]
public GroundHeatTransfer_Slab_BoundConds_EvtrIsSurfaceEvapotranspirationModeled EvtrIsSurfaceEvapotranspirationModeled { get; set; } = (GroundHeatTransfer_Slab_BoundConds_EvtrIsSurfaceEvapotranspirationModeled)Enum.Parse(typeof(GroundHeatTransfer_Slab_BoundConds_EvtrIsSurfaceEvapotranspirationModeled), "FALSE");
        

[Description("This field permits using a fixed temperature at the lower surface of the model in" +
    "stead of a zero heat flux condition. This change normally has a very small effec" +
    "t on the results. FALSE selects the zero flux lower boundary condition")]
[JsonProperty("fixbc_is_the_lower_boundary_at_a_fixed_temperature")]
public GroundHeatTransfer_Slab_BoundConds_FixbcIsTheLowerBoundaryAtAFixedTemperature FixbcIsTheLowerBoundaryAtAFixedTemperature { get; set; } = (GroundHeatTransfer_Slab_BoundConds_FixbcIsTheLowerBoundaryAtAFixedTemperature)Enum.Parse(typeof(GroundHeatTransfer_Slab_BoundConds_FixbcIsTheLowerBoundaryAtAFixedTemperature), "FALSE");
        

[Description("User input lower boundary temperature if FIXBC is TRUE Blank for FIXBC FALSE or t" +
    "o use the calculated 1-D deep ground temperature.")]
[JsonProperty("tdeepin")]
public System.Nullable<float> Tdeepin { get; set; } = null;
        

[Description(@"This field flags the use of a user specified heat transfer coefficient on the ground surface. This condition is used primarily for testing. For normal runs (USPHflag is FALSE) and the program calculates the heat transfer coefficient using the weather conditions.")]
[JsonProperty("usrhflag_is_the_ground_surface_h_specified_by_the_user_")]
public GroundHeatTransfer_Slab_BoundConds_UsrhflagIsTheGroundSurfaceHSpecifiedByTheUser UsrhflagIsTheGroundSurfaceHSpecifiedByTheUser { get; set; } = (GroundHeatTransfer_Slab_BoundConds_UsrhflagIsTheGroundSurfaceHSpecifiedByTheUser)Enum.Parse(typeof(GroundHeatTransfer_Slab_BoundConds_UsrhflagIsTheGroundSurfaceHSpecifiedByTheUser), "FALSE");
        

[Description("Used only if USRHflag is TRUE and the heat transfer coefficient value is specifie" +
    "d in this field.")]
[JsonProperty("userh_user_specified_ground_surface_heat_transfer_coefficient")]
public System.Nullable<float> UserhUserSpecifiedGroundSurfaceHeatTransferCoefficient { get; set; } = null;
    }
    
    public enum GroundHeatTransfer_Slab_BoundConds_EvtrIsSurfaceEvapotranspirationModeled
    {
        
        [JsonProperty("FALSE")]
        FALSE = 0,
        
        [JsonProperty("TRUE")]
        TRUE = 1,
    }
    
    public enum GroundHeatTransfer_Slab_BoundConds_FixbcIsTheLowerBoundaryAtAFixedTemperature
    {
        
        [JsonProperty("FALSE")]
        FALSE = 0,
        
        [JsonProperty("TRUE")]
        TRUE = 1,
    }
    
    public enum GroundHeatTransfer_Slab_BoundConds_UsrhflagIsTheGroundSurfaceHSpecifiedByTheUser
    {
        
        [JsonProperty("FALSE")]
        FALSE = 0,
        
        [JsonProperty("TRUE")]
        TRUE = 1,
    }
    
    [Description(@"Object provides information about the building and its operating conditions Monthly Average Temperature SetPoint fields specify the average indoor building set point temperatures for each month of the year. These fields are useful for simulating a building that is not temperature controlled for some of the year. In such a case, the average indoor set point temperatures can be obtained by first running the model in EnergyPlus with an insulated floor boundary condition, and then using the resulting monthly average zone temperatures in these fields.")]
    [JsonObject("GroundHeatTransfer:Slab:BldgProps")]
    public class GroundHeatTransfer_Slab_BldgProps : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"This field specifies the number of years to iterate. Either the ground heat transfer calculations come to an an annual steady periodic condition by converging to a tolerance (see ConvTol field) or it runs for this number of years. A ten year maximum is usually sufficient.")]
[JsonProperty("iyrs_number_of_years_to_iterate")]
public System.Nullable<float> IyrsNumberOfYearsToIterate { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("Use only the value 0 here. Only a rectangular shape is implemented.")]
[JsonProperty("shape_slab_shape")]
public System.Nullable<float> ShapeSlabShape { get; set; } = null;
        

[Description("This field supplies the building height. This is used to calculate the building s" +
    "hadowing on the ground. typical value= 0-20")]
[JsonProperty("hbldg_building_height")]
public System.Nullable<float> HbldgBuildingHeight { get; set; } = null;
        

[Description("see memo on object for more information")]
[JsonProperty("tin1_january_indoor_average_temperature_setpoint")]
public System.Nullable<float> Tin1JanuaryIndoorAverageTemperatureSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[Description("see memo on object for more information")]
[JsonProperty("tin2_february_indoor_average_temperature_setpoint")]
public System.Nullable<float> Tin2FebruaryIndoorAverageTemperatureSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[Description("see memo on object for more information")]
[JsonProperty("tin3_march_indoor_average_temperature_setpoint")]
public System.Nullable<float> Tin3MarchIndoorAverageTemperatureSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[Description("see memo on object for more information")]
[JsonProperty("tin4_april_indoor_average_temperature_setpoint")]
public System.Nullable<float> Tin4AprilIndoorAverageTemperatureSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[Description("see memo on object for more information")]
[JsonProperty("tin5_may_indoor_average_temperature_setpoint")]
public System.Nullable<float> Tin5MayIndoorAverageTemperatureSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[Description("see memo on object for more information")]
[JsonProperty("tin6_june_indoor_average_temperature_setpoint")]
public System.Nullable<float> Tin6JuneIndoorAverageTemperatureSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[Description("see memo on object for more information")]
[JsonProperty("tin7_july_indoor_average_temperature_setpoint")]
public System.Nullable<float> Tin7JulyIndoorAverageTemperatureSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[Description("see memo on object for more information")]
[JsonProperty("tin8_august_indoor_average_temperature_setpoint")]
public System.Nullable<float> Tin8AugustIndoorAverageTemperatureSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[Description("see memo on object for more information")]
[JsonProperty("tin9_september_indoor_average_temperature_setpoint")]
public System.Nullable<float> Tin9SeptemberIndoorAverageTemperatureSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[Description("see memo on object for more information")]
[JsonProperty("tin10_october_indoor_average_temperature_setpoint")]
public System.Nullable<float> Tin10OctoberIndoorAverageTemperatureSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[Description("see memo on object for more information")]
[JsonProperty("tin11_november_indoor_average_temperature_setpoint")]
public System.Nullable<float> Tin11NovemberIndoorAverageTemperatureSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[Description("see memo on object for more information")]
[JsonProperty("tin12_december_indoor_average_temperature_setpoint")]
public System.Nullable<float> Tin12DecemberIndoorAverageTemperatureSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[Description("This field permits imposing a daily sinusoidal variation in the indoor setpoint t" +
    "emperature to simulate the effect of a setback profile. The value specified is t" +
    "he amplitude of the sine wave.")]
[JsonProperty("tinamp_daily_indoor_sine_wave_variation_amplitude")]
public System.Nullable<float> TinampDailyIndoorSineWaveVariationAmplitude { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field specifies the convergence tolerance used to control the iteration. Whe" +
    "n the temperature change of all nodes is less than the convergence value, iterat" +
    "ion ceases.")]
[JsonProperty("convtol_convergence_tolerance")]
public System.Nullable<float> ConvtolConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
    }
    
    [Description("This object supplies the information about insulation used around the slab. There" +
        " are two possible configurations: under the slab or vertical insulation around t" +
        "he slab.")]
    [JsonObject("GroundHeatTransfer:Slab:Insulation")]
    public class GroundHeatTransfer_Slab_Insulation : BHoMObject, IEnergyPlusClass
    {
        

[Description("This field provides the thermal resistance value of the under slab insulation. It" +
    " should be zero if the vertical insulation configuration is selected. typical va" +
    "lue= 0-2.0")]
[JsonProperty("rins_r_value_of_under_slab_insulation")]
public System.Nullable<float> RinsRValueOfUnderSlabInsulation { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This specifies the width of the perimeter strip of insulation under the slab. It " +
    "should be zero if for the vertical insulation configuration is selected. typical" +
    " value= 0-2.0")]
[JsonProperty("dins_width_of_strip_of_under_slab_insulation")]
public System.Nullable<float> DinsWidthOfStripOfUnderSlabInsulation { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field specifies the thermal resistance of the vertical insulation. It should" +
    " be zero if the under slab insulation configuration is selected. typical value= " +
    "0-3.0")]
[JsonProperty("rvins_r_value_of_vertical_insulation")]
public System.Nullable<float> RvinsRValueOfVerticalInsulation { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"This field specifies the depth of the vertical insulation into the ground in meters. It starts at the slab upper surface and extends into the ground. It should be zero if the under slab insulation configuration is selected. only use values= .2 .4 .6 .8 1.0 1.5 2.0 2.5 3.0")]
[JsonProperty("zvins_depth_of_vertical_insulation")]
public System.Nullable<float> ZvinsDepthOfVerticalInsulation { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Specifies if the vertical insulation configuration is being used. values: 1=yes v" +
    "ertical insulation 0=no under-slab insulation")]
[JsonProperty("ivins_flag_is_there_vertical_insulation")]
public string IvinsFlagIsThereVerticalInsulation { get; set; } = (System.String)"0";
    }
    
    [Description("Using an equivalent slab allows non-rectangular shapes to be modeled accurately. " +
        "Object uses the area - perimeter (area/perimeter) ratio to determine the size of" +
        " an equivalent rectangular slab. EnergyPlus users normally use this option.")]
    [JsonObject("GroundHeatTransfer:Slab:EquivalentSlab")]
    public class GroundHeatTransfer_Slab_EquivalentSlab : BHoMObject, IEnergyPlusClass
    {
        

[Description("Equivalent square slab is simulated,  side is 4*APRatio.")]
[JsonProperty("apratio_the_area_to_perimeter_ratio_for_this_slab")]
public System.Nullable<float> ApratioTheAreaToPerimeterRatioForThisSlab { get; set; } = null;
        

[Description(@"This field specifies the thickness of the slab. The slab top surface is level with the ground surface, so this is the depth into the ground. The slab depth has a significant effect on the temperature calculation, and it is also important for the auto-grid process. The finite difference grids are set in such a way that they use the slab thickness to determine the vertical grid spacing. Autogridding will fail if the slab thickness is specified larger than 0.25 meters.")]
[JsonProperty("slabdepth_thickness_of_slab_on_grade")]
public System.Nullable<float> SlabdepthThicknessOfSlabOnGrade { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[Description("This field specifies the distance from the slab to the edge of the area that will" +
    " be modeled with the grid system. It is the basic size dimension that is used to" +
    " set the horizontal extent of the domain. 15 meters is a reasonable value.")]
[JsonProperty("clearance_distance_from_edge_of_slab_to_domain_edge")]
public System.Nullable<float> ClearanceDistanceFromEdgeOfSlabToDomainEdge { get; set; } = (System.Nullable<float>)Single.Parse("15", CultureInfo.InvariantCulture);
        

[Description("This field specifies the vertical distance from the slab to the bottom edge of th" +
    "e area that will be modeled with the grid system. 15 meters is a reasonable valu" +
    "e.")]
[JsonProperty("zclearance_distance_from_bottom_of_slab_to_domain_bottom")]
public System.Nullable<float> ZclearanceDistanceFromBottomOfSlabToDomainBottom { get; set; } = (System.Nullable<float>)Single.Parse("15", CultureInfo.InvariantCulture);
    }
    
    [Description("AutoGrid only necessary when EquivalentSlab option not chosen. Not normally neede" +
        "d by EnergyPlus users. This object permits user selection of rectangular slab di" +
        "mensions. NO SLAB DIMENSIONS LESS THAN 6 m.")]
    [JsonObject("GroundHeatTransfer:Slab:AutoGrid")]
    public class GroundHeatTransfer_Slab_AutoGrid : BHoMObject, IEnergyPlusClass
    {
        

[Description("typical values= 6 to 60.0")]
[JsonProperty("slabx_x_dimension_of_the_building_slab")]
public System.Nullable<float> SlabxXDimensionOfTheBuildingSlab { get; set; } = null;
        

[Description("typical values= 6 to 60.0")]
[JsonProperty("slaby_y_dimension_of_the_building_slab")]
public System.Nullable<float> SlabyYDimensionOfTheBuildingSlab { get; set; } = null;
        

[JsonProperty("slabdepth_thickness_of_slab_on_grade")]
public System.Nullable<float> SlabdepthThicknessOfSlabOnGrade { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[JsonProperty("clearance_distance_from_edge_of_slab_to_domain_edge")]
public System.Nullable<float> ClearanceDistanceFromEdgeOfSlabToDomainEdge { get; set; } = (System.Nullable<float>)Single.Parse("15", CultureInfo.InvariantCulture);
        

[JsonProperty("zclearance_distance_from_bottom_of_slab_to_domain_bottom")]
public System.Nullable<float> ZclearanceDistanceFromBottomOfSlabToDomainBottom { get; set; } = (System.Nullable<float>)Single.Parse("15", CultureInfo.InvariantCulture);
    }
    
    [Description("Manual Grid only necessary when using manual gridding (not recommended) Used only" +
        " in special cases when previous two objects are not used. User must input comple" +
        "te gridding information.")]
    [JsonObject("GroundHeatTransfer:Slab:ManualGrid")]
    public class GroundHeatTransfer_Slab_ManualGrid : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("nx_number_of_cells_in_the_x_direction")]
public System.Nullable<float> NxNumberOfCellsInTheXDirection { get; set; } = null;
        

[JsonProperty("ny_number_of_cells_in_the_y_direction")]
public System.Nullable<float> NyNumberOfCellsInTheYDirection { get; set; } = null;
        

[JsonProperty("nz_number_of_cells_in_the_z_direction")]
public System.Nullable<float> NzNumberOfCellsInTheZDirection { get; set; } = null;
        

[Description("typical values= 1-10")]
[JsonProperty("ibox_x_direction_cell_indicator_of_slab_edge")]
public System.Nullable<float> IboxXDirectionCellIndicatorOfSlabEdge { get; set; } = null;
        

[Description("typical values= 1-10")]
[JsonProperty("jbox_y_direction_cell_indicator_of_slab_edge")]
public System.Nullable<float> JboxYDirectionCellIndicatorOfSlabEdge { get; set; } = null;
    }
    
    [Description("This is only needed when using manual gridding (not recommended) XFACE: X Directi" +
        "on cell face coordinates: m")]
    [JsonObject("GroundHeatTransfer:Slab:XFACE")]
    public class GroundHeatTransfer_Slab_XFACE : BHoMObject, IEnergyPlusClass
    {
    }
    
    [Description("This is only needed when using manual gridding (not recommended) YFACE: Y Directi" +
        "on cell face coordinates: m,")]
    [JsonObject("GroundHeatTransfer:Slab:YFACE")]
    public class GroundHeatTransfer_Slab_YFACE : BHoMObject, IEnergyPlusClass
    {
    }
    
    [Description("This is only needed when using manual gridding (not recommended) ZFACE: Z Directi" +
        "on cell face coordinates: m")]
    [JsonObject("GroundHeatTransfer:Slab:ZFACE")]
    public class GroundHeatTransfer_Slab_ZFACE : BHoMObject, IEnergyPlusClass
    {
    }
    
    [Description("Specifies certain parameters that control the Basement preprocessor ground heat t" +
        "ransfer simulation.")]
    [JsonObject("GroundHeatTransfer:Basement:SimParameters")]
    public class GroundHeatTransfer_Basement_SimParameters : BHoMObject, IEnergyPlusClass
    {
        

[Description("0<F<1.0, typically 0.1 (0.3 for high k soil - saturated sand is about 2.6 w/m-K)")]
[JsonProperty("f_multiplier_for_the_adi_solution")]
public System.Nullable<float> FMultiplierForTheAdiSolution { get; set; } = null;
        

[Description("typically 15-30]")]
[JsonProperty("iyrs_maximum_number_of_yearly_iterations_")]
public System.Nullable<float> IyrsMaximumNumberOfYearlyIterations { get; set; } = (System.Nullable<float>)Single.Parse("15", CultureInfo.InvariantCulture);
    }
    
    [Description("Specifies the material properties for the Basement preprocessor ground heat trans" +
        "fer simulation. Only the Foundation Wall, Floor Slab, Soil, and Gravel propertie" +
        "s are currently used.")]
    [JsonObject("GroundHeatTransfer:Basement:MatlProps")]
    public class GroundHeatTransfer_Basement_MatlProps : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("nmat_number_of_materials_in_this_domain")]
public System.Nullable<float> NmatNumberOfMaterialsInThisDomain { get; set; } = null;
        

[JsonProperty("density_for_foundation_wall")]
public System.Nullable<float> DensityForFoundationWall { get; set; } = (System.Nullable<float>)Single.Parse("2243", CultureInfo.InvariantCulture);
        

[JsonProperty("density_for_floor_slab")]
public System.Nullable<float> DensityForFloorSlab { get; set; } = (System.Nullable<float>)Single.Parse("2243", CultureInfo.InvariantCulture);
        

[JsonProperty("density_for_ceiling")]
public System.Nullable<float> DensityForCeiling { get; set; } = (System.Nullable<float>)Single.Parse("311", CultureInfo.InvariantCulture);
        

[JsonProperty("density_for_soil")]
public System.Nullable<float> DensityForSoil { get; set; } = (System.Nullable<float>)Single.Parse("1500", CultureInfo.InvariantCulture);
        

[JsonProperty("density_for_gravel")]
public System.Nullable<float> DensityForGravel { get; set; } = (System.Nullable<float>)Single.Parse("2000", CultureInfo.InvariantCulture);
        

[JsonProperty("density_for_wood")]
public System.Nullable<float> DensityForWood { get; set; } = (System.Nullable<float>)Single.Parse("449", CultureInfo.InvariantCulture);
        

[JsonProperty("specific_heat_for_foundation_wall")]
public System.Nullable<float> SpecificHeatForFoundationWall { get; set; } = (System.Nullable<float>)Single.Parse("880", CultureInfo.InvariantCulture);
        

[JsonProperty("specific_heat_for_floor_slab")]
public System.Nullable<float> SpecificHeatForFloorSlab { get; set; } = (System.Nullable<float>)Single.Parse("880", CultureInfo.InvariantCulture);
        

[JsonProperty("specific_heat_for_ceiling")]
public System.Nullable<float> SpecificHeatForCeiling { get; set; } = (System.Nullable<float>)Single.Parse("1530", CultureInfo.InvariantCulture);
        

[JsonProperty("specific_heat_for_soil")]
public System.Nullable<float> SpecificHeatForSoil { get; set; } = (System.Nullable<float>)Single.Parse("840", CultureInfo.InvariantCulture);
        

[JsonProperty("specific_heat_for_gravel")]
public System.Nullable<float> SpecificHeatForGravel { get; set; } = (System.Nullable<float>)Single.Parse("720", CultureInfo.InvariantCulture);
        

[JsonProperty("specific_heat_for_wood")]
public System.Nullable<float> SpecificHeatForWood { get; set; } = (System.Nullable<float>)Single.Parse("1530", CultureInfo.InvariantCulture);
        

[JsonProperty("thermal_conductivity_for_foundation_wall")]
public System.Nullable<float> ThermalConductivityForFoundationWall { get; set; } = (System.Nullable<float>)Single.Parse("1.4", CultureInfo.InvariantCulture);
        

[JsonProperty("thermal_conductivity_for_floor_slab")]
public System.Nullable<float> ThermalConductivityForFloorSlab { get; set; } = (System.Nullable<float>)Single.Parse("1.4", CultureInfo.InvariantCulture);
        

[JsonProperty("thermal_conductivity_for_ceiling")]
public System.Nullable<float> ThermalConductivityForCeiling { get; set; } = (System.Nullable<float>)Single.Parse("0.09", CultureInfo.InvariantCulture);
        

[JsonProperty("thermal_conductivity_for_soil")]
public System.Nullable<float> ThermalConductivityForSoil { get; set; } = (System.Nullable<float>)Single.Parse("1.1", CultureInfo.InvariantCulture);
        

[JsonProperty("thermal_conductivity_for_gravel")]
public System.Nullable<float> ThermalConductivityForGravel { get; set; } = (System.Nullable<float>)Single.Parse("1.9", CultureInfo.InvariantCulture);
        

[JsonProperty("thermal_conductivity_for_wood")]
public System.Nullable<float> ThermalConductivityForWood { get; set; } = (System.Nullable<float>)Single.Parse("0.12", CultureInfo.InvariantCulture);
    }
    
    [Description("Describes the insulation used on an exterior basement wall for the Basement prepr" +
        "ocessor ground heat transfer simulation.")]
    [JsonObject("GroundHeatTransfer:Basement:Insulation")]
    public class GroundHeatTransfer_Basement_Insulation : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("rext_r_value_of_any_exterior_insulation")]
public System.Nullable<float> RextRValueOfAnyExteriorInsulation { get; set; } = null;
        

[Description("True for full insulation False for insulation half way down side wall from grade " +
    "line")]
[JsonProperty("insfull_flag_is_the_wall_fully_insulated_")]
public GroundHeatTransfer_Basement_Insulation_InsfullFlagIsTheWallFullyInsulated InsfullFlagIsTheWallFullyInsulated { get; set; } = (GroundHeatTransfer_Basement_Insulation_InsfullFlagIsTheWallFullyInsulated)Enum.Parse(typeof(GroundHeatTransfer_Basement_Insulation_InsfullFlagIsTheWallFullyInsulated), "FALSE");
    }
    
    public enum GroundHeatTransfer_Basement_Insulation_InsfullFlagIsTheWallFullyInsulated
    {
        
        [JsonProperty("FALSE")]
        FALSE = 0,
        
        [JsonProperty("TRUE")]
        TRUE = 1,
    }
    
    [Description("Specifies the soil surface properties for the Basement preprocessor ground heat t" +
        "ransfer simulation.")]
    [JsonObject("GroundHeatTransfer:Basement:SurfaceProps")]
    public class GroundHeatTransfer_Basement_SurfaceProps : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("albedo_surface_albedo_for_no_snow_conditions")]
public System.Nullable<float> AlbedoSurfaceAlbedoForNoSnowConditions { get; set; } = (System.Nullable<float>)Single.Parse("0.16", CultureInfo.InvariantCulture);
        

[JsonProperty("albedo_surface_albedo_for_snow_conditions")]
public System.Nullable<float> AlbedoSurfaceAlbedoForSnowConditions { get; set; } = (System.Nullable<float>)Single.Parse("0.4", CultureInfo.InvariantCulture);
        

[JsonProperty("epsln_surface_emissivity_no_snow")]
public System.Nullable<float> EpslnSurfaceEmissivityNoSnow { get; set; } = (System.Nullable<float>)Single.Parse("0.94", CultureInfo.InvariantCulture);
        

[JsonProperty("epsln_surface_emissivity_with_snow")]
public System.Nullable<float> EpslnSurfaceEmissivityWithSnow { get; set; } = (System.Nullable<float>)Single.Parse("0.86", CultureInfo.InvariantCulture);
        

[JsonProperty("veght_surface_roughness_no_snow_conditions")]
public System.Nullable<float> VeghtSurfaceRoughnessNoSnowConditions { get; set; } = (System.Nullable<float>)Single.Parse("6", CultureInfo.InvariantCulture);
        

[JsonProperty("veght_surface_roughness_snow_conditions")]
public System.Nullable<float> VeghtSurfaceRoughnessSnowConditions { get; set; } = (System.Nullable<float>)Single.Parse("0.25", CultureInfo.InvariantCulture);
        

[Description("Typically, PET is False")]
[JsonProperty("pet_flag_potential_evapotranspiration_on_")]
public GroundHeatTransfer_Basement_SurfaceProps_PetFlagPotentialEvapotranspirationOn PetFlagPotentialEvapotranspirationOn { get; set; } = (GroundHeatTransfer_Basement_SurfaceProps_PetFlagPotentialEvapotranspirationOn)Enum.Parse(typeof(GroundHeatTransfer_Basement_SurfaceProps_PetFlagPotentialEvapotranspirationOn), "FALSE");
    }
    
    public enum GroundHeatTransfer_Basement_SurfaceProps_PetFlagPotentialEvapotranspirationOn
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FALSE")]
        FALSE = 1,
        
        [JsonProperty("TRUE")]
        TRUE = 2,
    }
    
    [Description("Specifies the surface and gravel thicknesses used for the Basement preprocessor g" +
        "round heat transfer simulation.")]
    [JsonObject("GroundHeatTransfer:Basement:BldgData")]
    public class GroundHeatTransfer_Basement_BldgData : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("dwall_wall_thickness")]
public System.Nullable<float> DwallWallThickness { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("dslab_floor_slab_thickness")]
public System.Nullable<float> DslabFloorSlabThickness { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[JsonProperty("dgravxy_width_of_gravel_pit_beside_basement_wall")]
public System.Nullable<float> DgravxyWidthOfGravelPitBesideBasementWall { get; set; } = (System.Nullable<float>)Single.Parse("0.3", CultureInfo.InvariantCulture);
        

[JsonProperty("dgravzn_gravel_depth_extending_above_the_floor_slab")]
public System.Nullable<float> DgravznGravelDepthExtendingAboveTheFloorSlab { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("dgravzp_gravel_depth_below_the_floor_slab")]
public System.Nullable<float> DgravzpGravelDepthBelowTheFloorSlab { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
    }
    
    [Description("Provides the information needed to simulate the inside boundary conditions for th" +
        "e Basement preprocessor ground heat transfer simulation.")]
    [JsonObject("GroundHeatTransfer:Basement:Interior")]
    public class GroundHeatTransfer_Basement_Interior : BHoMObject, IEnergyPlusClass
    {
        

[Description("for EnergyPlus this should be TRUE")]
[JsonProperty("cond_flag_is_the_basement_conditioned_")]
public GroundHeatTransfer_Basement_Interior_CondFlagIsTheBasementConditioned CondFlagIsTheBasementConditioned { get; set; } = (GroundHeatTransfer_Basement_Interior_CondFlagIsTheBasementConditioned)Enum.Parse(typeof(GroundHeatTransfer_Basement_Interior_CondFlagIsTheBasementConditioned), "TRUE");
        

[JsonProperty("hin_downward_convection_only_heat_transfer_coefficient")]
public System.Nullable<float> HinDownwardConvectionOnlyHeatTransferCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0.92", CultureInfo.InvariantCulture);
        

[JsonProperty("hin_upward_convection_only_heat_transfer_coefficient")]
public System.Nullable<float> HinUpwardConvectionOnlyHeatTransferCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("4.04", CultureInfo.InvariantCulture);
        

[JsonProperty("hin_horizontal_convection_only_heat_transfer_coefficient")]
public System.Nullable<float> HinHorizontalConvectionOnlyHeatTransferCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("3.08", CultureInfo.InvariantCulture);
        

[JsonProperty("hin_downward_combined_convection_and_radiation_heat_transfer_coefficient")]
public System.Nullable<float> HinDownwardCombinedConvectionAndRadiationHeatTransferCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("6.13", CultureInfo.InvariantCulture);
        

[JsonProperty("hin_upward_combined_convection_and_radiation_heat_transfer_coefficient")]
public System.Nullable<float> HinUpwardCombinedConvectionAndRadiationHeatTransferCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("9.26", CultureInfo.InvariantCulture);
        

[JsonProperty("hin_horizontal_combined_convection_and_radiation_heat_transfer_coefficient")]
public System.Nullable<float> HinHorizontalCombinedConvectionAndRadiationHeatTransferCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("8.29", CultureInfo.InvariantCulture);
    }
    
    public enum GroundHeatTransfer_Basement_Interior_CondFlagIsTheBasementConditioned
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FALSE")]
        FALSE = 1,
        
        [JsonProperty("TRUE")]
        TRUE = 2,
    }
    
    [Description("ComBldg contains the monthly average temperatures (C) and possibility of daily va" +
        "riation amplitude")]
    [JsonObject("GroundHeatTransfer:Basement:ComBldg")]
    public class GroundHeatTransfer_Basement_ComBldg : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("january_average_temperature")]
public System.Nullable<float> JanuaryAverageTemperature { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[JsonProperty("february_average_temperature")]
public System.Nullable<float> FebruaryAverageTemperature { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[JsonProperty("march_average_temperature")]
public System.Nullable<float> MarchAverageTemperature { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[JsonProperty("april_average_temperature")]
public System.Nullable<float> AprilAverageTemperature { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[JsonProperty("may_average_temperature")]
public System.Nullable<float> MayAverageTemperature { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[JsonProperty("june_average_temperature")]
public System.Nullable<float> JuneAverageTemperature { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[JsonProperty("july_average_temperature")]
public System.Nullable<float> JulyAverageTemperature { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[JsonProperty("august_average_temperature")]
public System.Nullable<float> AugustAverageTemperature { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[JsonProperty("september_average_temperature")]
public System.Nullable<float> SeptemberAverageTemperature { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[JsonProperty("october_average_temperature")]
public System.Nullable<float> OctoberAverageTemperature { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[JsonProperty("november_average_temperature")]
public System.Nullable<float> NovemberAverageTemperature { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[JsonProperty("december_average_temperature")]
public System.Nullable<float> DecemberAverageTemperature { get; set; } = (System.Nullable<float>)Single.Parse("22", CultureInfo.InvariantCulture);
        

[Description("(Normally zero, just for checking)")]
[JsonProperty("daily_variation_sine_wave_amplitude")]
public System.Nullable<float> DailyVariationSineWaveAmplitude { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    [Description("Using an equivalent slab allows non-rectangular shapes to be modeled accurately. " +
        "The simulation default should be EquivSizing=True")]
    [JsonObject("GroundHeatTransfer:Basement:EquivSlab")]
    public class GroundHeatTransfer_Basement_EquivSlab : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("apratio_the_area_to_perimeter_ratio_for_this_slab")]
public System.Nullable<float> ApratioTheAreaToPerimeterRatioForThisSlab { get; set; } = null;
        

[Description("Will the dimensions of an equivalent slab be calculated (TRUE) or will the dimens" +
    "ions be input directly? (FALSE)] Only advanced special simulations should use FA" +
    "LSE.")]
[JsonProperty("equivsizing_flag")]
public GroundHeatTransfer_Basement_EquivSlab_EquivsizingFlag EquivsizingFlag { get; set; } = (GroundHeatTransfer_Basement_EquivSlab_EquivsizingFlag)Enum.Parse(typeof(GroundHeatTransfer_Basement_EquivSlab_EquivsizingFlag), "FALSE");
    }
    
    public enum GroundHeatTransfer_Basement_EquivSlab_EquivsizingFlag
    {
        
        [JsonProperty("FALSE")]
        FALSE = 0,
        
        [JsonProperty("TRUE")]
        TRUE = 1,
    }
    
    [Description("EquivAutoGrid necessary when EquivSizing=TRUE, TRUE is is the normal case.")]
    [JsonObject("GroundHeatTransfer:Basement:EquivAutoGrid")]
    public class GroundHeatTransfer_Basement_EquivAutoGrid : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("clearance_distance_from_outside_of_wall_to_edge_of_3_d_ground_domain")]
public System.Nullable<float> ClearanceDistanceFromOutsideOfWallToEdgeOf3DGroundDomain { get; set; } = (System.Nullable<float>)Single.Parse("15", CultureInfo.InvariantCulture);
        

[JsonProperty("slabdepth_thickness_of_the_floor_slab")]
public System.Nullable<float> SlabdepthThicknessOfTheFloorSlab { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[JsonProperty("basedepth_depth_of_the_basement_wall_below_grade")]
public System.Nullable<float> BasedepthDepthOfTheBasementWallBelowGrade { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
    }
    
    [Description("AutoGrid only necessary when EquivSizing is false If the modeled building is not " +
        "a rectangle or square, Equivalent sizing MUST be used to get accurate results")]
    [JsonObject("GroundHeatTransfer:Basement:AutoGrid")]
    public class GroundHeatTransfer_Basement_AutoGrid : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("clearance_distance_from_outside_of_wall_to_edge_")]
public System.Nullable<float> ClearanceDistanceFromOutsideOfWallToEdge { get; set; } = (System.Nullable<float>)Single.Parse("15", CultureInfo.InvariantCulture);
        

[JsonProperty("slabx_x_dimension_of_the_building_slab")]
public System.Nullable<float> SlabxXDimensionOfTheBuildingSlab { get; set; } = null;
        

[JsonProperty("slaby_y_dimension_of_the_building_slab")]
public System.Nullable<float> SlabyYDimensionOfTheBuildingSlab { get; set; } = null;
        

[JsonProperty("concagheight_height_of_the_foundation_wall_above_grade")]
public System.Nullable<float> ConcagheightHeightOfTheFoundationWallAboveGrade { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("slabdepth_thickness_of_the_floor_slab")]
public System.Nullable<float> SlabdepthThicknessOfTheFloorSlab { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[JsonProperty("basedepth_depth_of_the_basement_wall_below_grade")]
public System.Nullable<float> BasedepthDepthOfTheBasementWallBelowGrade { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
    }
    
    [Description("Manual Grid only necessary using manual gridding (not recommended)")]
    [JsonObject("GroundHeatTransfer:Basement:ManualGrid")]
    public class GroundHeatTransfer_Basement_ManualGrid : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("nx_number_of_cells_in_the_x_direction_20_")]
public System.Nullable<float> NxNumberOfCellsInTheXDirection20 { get; set; } = null;
        

[JsonProperty("ny_number_of_cells_in_the_y_direction_20_")]
public System.Nullable<float> NyNumberOfCellsInTheYDirection20 { get; set; } = null;
        

[JsonProperty("nzag_number_of_cells_in_the_z_direction_above_grade_4_always_")]
public System.Nullable<float> NzagNumberOfCellsInTheZDirectionAboveGrade4Always { get; set; } = null;
        

[JsonProperty("nzbg_number_of_cells_in_z_direction_below_grade_10_35_")]
public System.Nullable<float> NzbgNumberOfCellsInZDirectionBelowGrade1035 { get; set; } = null;
        

[JsonProperty("ibase_x_direction_cell_indicator_of_slab_edge_5_20_")]
public System.Nullable<float> IbaseXDirectionCellIndicatorOfSlabEdge520 { get; set; } = null;
        

[JsonProperty("jbase_y_direction_cell_indicator_of_slab_edge_5_20_")]
public System.Nullable<float> JbaseYDirectionCellIndicatorOfSlabEdge520 { get; set; } = null;
        

[JsonProperty("kbase_z_direction_cell_indicator_of_the_top_of_the_floor_slab_5_20_")]
public System.Nullable<float> KbaseZDirectionCellIndicatorOfTheTopOfTheFloorSlab520 { get; set; } = null;
    }
    
    [Description("This is only needed when using manual gridding (not recommended) XFACE: X Directi" +
        "on cell face coordinates: m")]
    [JsonObject("GroundHeatTransfer:Basement:XFACE")]
    public class GroundHeatTransfer_Basement_XFACE : BHoMObject, IEnergyPlusClass
    {
    }
    
    [Description("This is only needed when using manual gridding (not recommended) YFACE: Y Directi" +
        "on cell face coordinates: m")]
    [JsonObject("GroundHeatTransfer:Basement:YFACE")]
    public class GroundHeatTransfer_Basement_YFACE : BHoMObject, IEnergyPlusClass
    {
    }
    
    [Description("This is only needed when using manual gridding (not recommended) ZFACE: Z Directi" +
        "on cell face coordinates: m")]
    [JsonObject("GroundHeatTransfer:Basement:ZFACE")]
    public class GroundHeatTransfer_Basement_ZFACE : BHoMObject, IEnergyPlusClass
    {
    }
}
namespace BH.oM.Adapters.EnergyPlus.Economics
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("If CurrencyType is not specified, it will default to USD and produce $ in the rep" +
        "orts.")]
    [JsonObject("CurrencyType")]
    public class CurrencyType : BHoMObject, IEnergyPlusClass
    {
        

[Description("The commonly used three letter currency code for the units of money for the count" +
    "ry or region. Based on ISO 4217 currency codes. Common currency codes are USD fo" +
    "r $ and EUR for Euros.")]
[JsonProperty("monetary_unit")]
public CurrencyType_MonetaryUnit MonetaryUnit { get; set; } = (CurrencyType_MonetaryUnit)Enum.Parse(typeof(CurrencyType_MonetaryUnit), "AFN");
    }
    
    public enum CurrencyType_MonetaryUnit
    {
        
        [JsonProperty("AFN")]
        AFN = 0,
        
        [JsonProperty("ALL")]
        ALL = 1,
        
        [JsonProperty("ANG")]
        ANG = 2,
        
        [JsonProperty("ARS")]
        ARS = 3,
        
        [JsonProperty("AUD")]
        AUD = 4,
        
        [JsonProperty("AWG")]
        AWG = 5,
        
        [JsonProperty("AZN")]
        AZN = 6,
        
        [JsonProperty("BAM")]
        BAM = 7,
        
        [JsonProperty("BBD")]
        BBD = 8,
        
        [JsonProperty("BGN")]
        BGN = 9,
        
        [JsonProperty("BMD")]
        BMD = 10,
        
        [JsonProperty("BND")]
        BND = 11,
        
        [JsonProperty("BOB")]
        BOB = 12,
        
        [JsonProperty("BRL")]
        BRL = 13,
        
        [JsonProperty("BSD")]
        BSD = 14,
        
        [JsonProperty("BWP")]
        BWP = 15,
        
        [JsonProperty("BYR")]
        BYR = 16,
        
        [JsonProperty("BZD")]
        BZD = 17,
        
        [JsonProperty("CAD")]
        CAD = 18,
        
        [JsonProperty("CHF")]
        CHF = 19,
        
        [JsonProperty("CLP")]
        CLP = 20,
        
        [JsonProperty("CNY")]
        CNY = 21,
        
        [JsonProperty("COP")]
        COP = 22,
        
        [JsonProperty("CRC")]
        CRC = 23,
        
        [JsonProperty("CUP")]
        CUP = 24,
        
        [JsonProperty("CZK")]
        CZK = 25,
        
        [JsonProperty("DKK")]
        DKK = 26,
        
        [JsonProperty("DOP")]
        DOP = 27,
        
        [JsonProperty("EEK")]
        EEK = 28,
        
        [JsonProperty("EGP")]
        EGP = 29,
        
        [JsonProperty("EUR")]
        EUR = 30,
        
        [JsonProperty("FJD")]
        FJD = 31,
        
        [JsonProperty("GBP")]
        GBP = 32,
        
        [JsonProperty("GHC")]
        GHC = 33,
        
        [JsonProperty("GIP")]
        GIP = 34,
        
        [JsonProperty("GTQ")]
        GTQ = 35,
        
        [JsonProperty("GYD")]
        GYD = 36,
        
        [JsonProperty("HKD")]
        HKD = 37,
        
        [JsonProperty("HNL")]
        HNL = 38,
        
        [JsonProperty("HRK")]
        HRK = 39,
        
        [JsonProperty("HUF")]
        HUF = 40,
        
        [JsonProperty("IDR")]
        IDR = 41,
        
        [JsonProperty("ILS")]
        ILS = 42,
        
        [JsonProperty("IMP")]
        IMP = 43,
        
        [JsonProperty("INR")]
        INR = 44,
        
        [JsonProperty("IRR")]
        IRR = 45,
        
        [JsonProperty("ISK")]
        ISK = 46,
        
        [JsonProperty("JEP")]
        JEP = 47,
        
        [JsonProperty("JMD")]
        JMD = 48,
        
        [JsonProperty("JPY")]
        JPY = 49,
        
        [JsonProperty("KGS")]
        KGS = 50,
        
        [JsonProperty("KHR")]
        KHR = 51,
        
        [JsonProperty("KPW")]
        KPW = 52,
        
        [JsonProperty("KRW")]
        KRW = 53,
        
        [JsonProperty("KYD")]
        KYD = 54,
        
        [JsonProperty("KZT")]
        KZT = 55,
        
        [JsonProperty("LAK")]
        LAK = 56,
        
        [JsonProperty("LBP")]
        LBP = 57,
        
        [JsonProperty("LKR")]
        LKR = 58,
        
        [JsonProperty("LRD")]
        LRD = 59,
        
        [JsonProperty("LTL")]
        LTL = 60,
        
        [JsonProperty("LVL")]
        LVL = 61,
        
        [JsonProperty("MKD")]
        MKD = 62,
        
        [JsonProperty("MNT")]
        MNT = 63,
        
        [JsonProperty("MUR")]
        MUR = 64,
        
        [JsonProperty("MXN")]
        MXN = 65,
        
        [JsonProperty("MYR")]
        MYR = 66,
        
        [JsonProperty("MZN")]
        MZN = 67,
        
        [JsonProperty("NAD")]
        NAD = 68,
        
        [JsonProperty("NGN")]
        NGN = 69,
        
        [JsonProperty("NIO")]
        NIO = 70,
        
        [JsonProperty("NOK")]
        NOK = 71,
        
        [JsonProperty("NPR")]
        NPR = 72,
        
        [JsonProperty("NZD")]
        NZD = 73,
        
        [JsonProperty("OMR")]
        OMR = 74,
        
        [JsonProperty("PAB")]
        PAB = 75,
        
        [JsonProperty("PEN")]
        PEN = 76,
        
        [JsonProperty("PHP")]
        PHP = 77,
        
        [JsonProperty("PKR")]
        PKR = 78,
        
        [JsonProperty("PLN")]
        PLN = 79,
        
        [JsonProperty("PYG")]
        PYG = 80,
        
        [JsonProperty("QAR")]
        QAR = 81,
        
        [JsonProperty("RON")]
        RON = 82,
        
        [JsonProperty("RSD")]
        RSD = 83,
        
        [JsonProperty("RUB")]
        RUB = 84,
        
        [JsonProperty("SAR")]
        SAR = 85,
        
        [JsonProperty("SBD")]
        SBD = 86,
        
        [JsonProperty("SCR")]
        SCR = 87,
        
        [JsonProperty("SEK")]
        SEK = 88,
        
        [JsonProperty("SGD")]
        SGD = 89,
        
        [JsonProperty("SHP")]
        SHP = 90,
        
        [JsonProperty("SOS")]
        SOS = 91,
        
        [JsonProperty("SRD")]
        SRD = 92,
        
        [JsonProperty("SVC")]
        SVC = 93,
        
        [JsonProperty("SYP")]
        SYP = 94,
        
        [JsonProperty("THB")]
        THB = 95,
        
        [JsonProperty("TRL")]
        TRL = 96,
        
        [JsonProperty("TRY")]
        TRY = 97,
        
        [JsonProperty("TTD")]
        TTD = 98,
        
        [JsonProperty("TVD")]
        TVD = 99,
        
        [JsonProperty("TWD")]
        TWD = 100,
        
        [JsonProperty("UAH")]
        UAH = 101,
        
        [JsonProperty("USD")]
        USD = 102,
        
        [JsonProperty("UYU")]
        UYU = 103,
        
        [JsonProperty("UZS")]
        UZS = 104,
        
        [JsonProperty("VEF")]
        VEF = 105,
        
        [JsonProperty("VND")]
        VND = 106,
        
        [JsonProperty("XCD")]
        XCD = 107,
        
        [JsonProperty("YER")]
        YER = 108,
        
        [JsonProperty("ZAR")]
        ZAR = 109,
        
        [JsonProperty("ZWD")]
        ZWD = 110,
    }
    
    [Description("Used to perform various modifications to the construction costs to arrive at an e" +
        "stimate for total project costs. This object allows extending the line item mode" +
        "l so that the overall costs of the project will reflect various profit and fees." +
        "")]
    [JsonObject("ComponentCost:Adjustments")]
    public class ComponentCost_Adjustments : BHoMObject, IEnergyPlusClass
    {
        

[Description("based on conditioned floor area for cost not accounted for in current line item c" +
    "ost model")]
[JsonProperty("miscellaneous_cost_per_conditioned_area")]
public System.Nullable<float> MiscellaneousCostPerConditionedArea { get; set; } = null;
        

[JsonProperty("design_and_engineering_fees")]
public System.Nullable<float> DesignAndEngineeringFees { get; set; } = null;
        

[JsonProperty("contractor_fee")]
public System.Nullable<float> ContractorFee { get; set; } = null;
        

[JsonProperty("contingency")]
public System.Nullable<float> Contingency { get; set; } = null;
        

[JsonProperty("permits_bonding_and_insurance")]
public System.Nullable<float> PermitsBondingAndInsurance { get; set; } = null;
        

[JsonProperty("commissioning_fee")]
public System.Nullable<float> CommissioningFee { get; set; } = null;
        

[Description("for use with average data in line item and Misc cost models")]
[JsonProperty("regional_adjustment_factor")]
public System.Nullable<float> RegionalAdjustmentFactor { get; set; } = null;
    }
    
    [Description(@"Used to allow comparing the current cost estimate to the results of a previous estimate for a reference building. This object parallels the ComponentCost:Adjustments object but adds a field for entering the cost line item model result for the reference building. The factors entered in this object are applied to the reference building while the factors listed in the ComponentCost:Adjustments object are applied to the current building model cost estimate.")]
    [JsonObject("ComponentCost:Reference")]
    public class ComponentCost_Reference : BHoMObject, IEnergyPlusClass
    {
        

[Description("should be comparable to the components in current line item cost model")]
[JsonProperty("reference_building_line_item_costs")]
public System.Nullable<float> ReferenceBuildingLineItemCosts { get; set; } = null;
        

[Description("based on conditioned floor area for cost not accounted for in reference line item" +
    " costs")]
[JsonProperty("reference_building_miscellaneous_cost_per_conditioned_area")]
public System.Nullable<float> ReferenceBuildingMiscellaneousCostPerConditionedArea { get; set; } = null;
        

[JsonProperty("reference_building_design_and_engineering_fees")]
public System.Nullable<float> ReferenceBuildingDesignAndEngineeringFees { get; set; } = null;
        

[JsonProperty("reference_building_contractor_fee")]
public System.Nullable<float> ReferenceBuildingContractorFee { get; set; } = null;
        

[JsonProperty("reference_building_contingency")]
public System.Nullable<float> ReferenceBuildingContingency { get; set; } = null;
        

[JsonProperty("reference_building_permits_bonding_and_insurance")]
public System.Nullable<float> ReferenceBuildingPermitsBondingAndInsurance { get; set; } = null;
        

[JsonProperty("reference_building_commissioning_fee")]
public System.Nullable<float> ReferenceBuildingCommissioningFee { get; set; } = null;
        

[Description("for use with average data in line item and Misc cost models")]
[JsonProperty("reference_building_regional_adjustment_factor")]
public System.Nullable<float> ReferenceBuildingRegionalAdjustmentFactor { get; set; } = null;
    }
    
    [Description("Each instance of this object creates a cost line item and will contribute to the " +
        "total for a cost estimate.")]
    [JsonObject("ComponentCost:LineItem")]
    public class ComponentCost_LineItem : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("type")]
public string Type { get; set; } = "";
        

[Description("extend choice-keys as Cases are added to code")]
[JsonProperty("line_item_type")]
public ComponentCost_LineItem_LineItemType LineItemType { get; set; } = (ComponentCost_LineItem_LineItemType)Enum.Parse(typeof(ComponentCost_LineItem_LineItemType), "ChillerElectric");
        

[Description("wildcard \"*\" is acceptable for some components")]
[JsonProperty("item_name")]
public string ItemName { get; set; } = "";
        

[Description("not yet used")]
[JsonProperty("object_end_use_key")]
public string ObjectEndUseKey { get; set; } = "";
        

[JsonProperty("cost_per_each")]
public System.Nullable<float> CostPerEach { get; set; } = null;
        

[JsonProperty("cost_per_area")]
public System.Nullable<float> CostPerArea { get; set; } = null;
        

[JsonProperty("cost_per_unit_of_output_capacity")]
public System.Nullable<float> CostPerUnitOfOutputCapacity { get; set; } = null;
        

[Description("The value is per change in COP.")]
[JsonProperty("cost_per_unit_of_output_capacity_per_cop")]
public System.Nullable<float> CostPerUnitOfOutputCapacityPerCop { get; set; } = null;
        

[JsonProperty("cost_per_volume")]
public System.Nullable<float> CostPerVolume { get; set; } = null;
        

[JsonProperty("cost_per_volume_rate")]
public System.Nullable<float> CostPerVolumeRate { get; set; } = null;
        

[Description("as in for use with UA sizing of Coils")]
[JsonProperty("cost_per_energy_per_temperature_difference")]
public System.Nullable<float> CostPerEnergyPerTemperatureDifference { get; set; } = null;
        

[Description("optional for use with Cost per Each and \"General\" object Type")]
[JsonProperty("quantity")]
public System.Nullable<float> Quantity { get; set; } = null;
    }
    
    public enum ComponentCost_LineItem_LineItemType
    {
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 0,
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 1,
        
        [JsonProperty("Coil:DX")]
        CoilDX = 2,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 3,
        
        [JsonProperty("Construction")]
        Construction = 4,
        
        [JsonProperty("Daylighting:Controls")]
        DaylightingControls = 5,
        
        [JsonProperty("General")]
        General = 6,
        
        [JsonProperty("Generator:Photovoltaic")]
        GeneratorPhotovoltaic = 7,
        
        [JsonProperty("Lights")]
        Lights = 8,
        
        [JsonProperty("Shading:Zone:Detailed")]
        ShadingZoneDetailed = 9,
    }
    
    [Description(@"Defines the name of a utility cost tariff, the type of tariff, and other details about the overall tariff. Each other object that is part of the tariff model references the tariff name. See UtilityCost:Charge:Simple, UtilityCost:Charge:Block, UtilityCost:Ratchet, UtilityCost:Qualify, UtilityCost:Variable and UtilityCost:Computation objects.")]
    [JsonObject("UtilityCost:Tariff")]
    public class UtilityCost_Tariff : BHoMObject, IEnergyPlusClass
    {
        

[Description("The name of any standard meter or custom meter or but usually set to either Elect" +
    "ricity:Facility or Gas:Facility")]
[JsonProperty("output_meter_name")]
public string OutputMeterName { get; set; } = "";
        

[Description("A choice that allows several different predefined conversion factors to be used; " +
    "otherwise user defined conversion factors are used as defined in the next two fi" +
    "elds. If left blank m3 is used for water meters and kWh are used for all other m" +
    "eters.")]
[JsonProperty("conversion_factor_choice")]
public UtilityCost_Tariff_ConversionFactorChoice ConversionFactorChoice { get; set; } = (UtilityCost_Tariff_ConversionFactorChoice)Enum.Parse(typeof(UtilityCost_Tariff_ConversionFactorChoice), "CCF");
        

[Description(@"Is a multiplier used to convert energy into the units specified by the utility in their tariff. If left blank it defaults to 1 (no conversion). This field should will be used only if Conversion Factor Choice is set to UserDefined. Within EnergyPlus energy always has units of J (joules). For conversion from J to kWh use the value of 0.0000002778. This is also used for all objects that reference the UtilityCost:Tariff.")]
[JsonProperty("energy_conversion_factor")]
public System.Nullable<float> EnergyConversionFactor { get; set; } = null;
        

[Description(@"Is a multiplier used to convert demand into the units specified by the utility in their tariff. If left blank it defaults to 1 (no conversion). This field should will be used only if Conversion Factor Choice is set to UserDefined. Within EnergyPlus demand always has units of J/s (joules/sec) which equivalent to W (watts). For conversion from W to kW use the value of 0.001. This is also used for all objects that reference the UtilityCost:Tariff.")]
[JsonProperty("demand_conversion_factor")]
public System.Nullable<float> DemandConversionFactor { get; set; } = null;
        

[Description(@"The name of the schedule that defines the time-of-use periods that occur each day. The values for the different variables are: 1 for Peak. 2 for Shoulder. 3 for OffPeak. 4 for MidPeak. The following variables are created automatically if these different periods are used in the schedule and include: TotalEnergy, TotalDemand, PeakEnergy, PeakDemand, ShoulderEnergy, ShoulderDemand, OffPeakEnergy, OffPeakDemand, MidPeakEnergy, MidPeakDemand Some special variables are created that include: PeakExceedsOffPeak, OffPeakExceedsPeak, PeakExceedsMidPeak, MidPeakExceedsPeak, PeakExceedsShoulder, ShoulderExceedsPeak, Others include: PeakAndShoulderEnergy, PeakAndShoulderDemand, PeakAndMidPeakEnergy, PeakAndMidPeakDemand, ShoulderAndOffPeakEnergy, ShoulderAndOffPeakDemand, PeakAndOffPeakEnergy, PeakAndOffPeakDemand, RealTimePriceCosts, AboveCustomerBaseCosts, BelowCustomerBaseCosts, AboveCustomerBaseEnergy, BelowCustomerBaseEnergy")]
[JsonProperty("time_of_use_period_schedule_name")]
public string TimeOfUsePeriodScheduleName { get; set; } = "";
        

[Description(@"The name of a schedule that defines the seasons. The schedule values are: 1 for Winter. 2 for Spring. 3 for Summer. 4 for Autumn. Variables are automatically created if a season schedule is used. These variables are set to 1 within the season and 0 for the months that are not in the season. The variables are: IsWinter, IsNotWinter, IsSpring, IsNotSpring, IsSummer, IsNotSummer, IsAutumn, IsNotAutumn.")]
[JsonProperty("season_schedule_name")]
public string SeasonScheduleName { get; set; } = "";
        

[Description(@"The name of the schedule that defines the billing periods of the year. Normally this entry is allowed to default and a schedule will be internally used that has the breaks between billing periods occurring at the same time as the breaks between months i.e. at midnight prior to the first day of the month. If other billing periods are used such as two month cycles or a single bill for an entire season such as some natural gas companies do in the summer then the month schedule may be used to redefine it. Make sure that the month schedule and season schedule are consistent otherwise an error will be issued.")]
[JsonProperty("month_schedule_name")]
public string MonthScheduleName { get; set; } = "";
        

[Description(@"The determination of demand can vary by utility. Some utilities use the peak instantaneous demand measured but most use a fifteen minute average demand or a one hour average demand. Some gas utilities measure demand as the use during the peak day or peak week.")]
[JsonProperty("demand_window_length")]
public UtilityCost_Tariff_DemandWindowLength DemandWindowLength { get; set; } = (UtilityCost_Tariff_DemandWindowLength)Enum.Parse(typeof(UtilityCost_Tariff_DemandWindowLength), "Day");
        

[Description("The fixed monthly service charge that many utilities have. The entry may be numer" +
    "ic and gets added to the ServiceCharges variable or if a variable name is entere" +
    "d here its values for each month are used.")]
[JsonProperty("monthly_charge_or_variable_name")]
public string MonthlyChargeOrVariableName { get; set; } = "";
        

[Description("The minimum total charge for the tariff or if a variable name is entered here its" +
    " values for each month are used.")]
[JsonProperty("minimum_monthly_charge_or_variable_name")]
public string MinimumMonthlyChargeOrVariableName { get; set; } = "";
        

[Description("Used with real time pricing rates. The name of a schedule that contains the cost " +
    "of energy for that particular time period of the year. Real time rates can be mo" +
    "deled using a charge schedule with the actual real time prices entered in the sc" +
    "hedule.")]
[JsonProperty("real_time_pricing_charge_schedule_name")]
public string RealTimePricingChargeScheduleName { get; set; } = "";
        

[Description("Used with real time pricing rates. The name of a schedule that contains the basel" +
    "ine energy use for the customer. Many real time rates apply the charges as a cre" +
    "dit or debit only to the difference between the baseline use and the actual use." +
    "")]
[JsonProperty("customer_baseline_load_schedule_name")]
public string CustomerBaselineLoadScheduleName { get; set; } = "";
        

[Description(@"The group name of the tariff such as distribution transmission supplier etc. If more than one tariff with the same group name is present and qualifies only the lowest cost tariff is used. Usually the group name field is left blank which results in all tariffs using the same meter variable being compared and the lowest cost one being selected.")]
[JsonProperty("group_name")]
public string GroupName { get; set; } = "";
        

[Description(@"Sets whether the tariff is used for buying selling or both to the utility. This should be allowed to default to buyFromUtility unless a power generation system is included in the building that may generate more power than the building needs during the year")]
[JsonProperty("buy_or_sell")]
public UtilityCost_Tariff_BuyOrSell BuyOrSell { get; set; } = (UtilityCost_Tariff_BuyOrSell)Enum.Parse(typeof(UtilityCost_Tariff_BuyOrSell), "BuyFromUtility");
    }
    
    public enum UtilityCost_Tariff_ConversionFactorChoice
    {
        
        [JsonProperty("CCF")]
        CCF = 0,
        
        [JsonProperty("MCF")]
        MCF = 1,
        
        [JsonProperty("MJ")]
        MJ = 2,
        
        [JsonProperty("MMBtu")]
        MMBtu = 3,
        
        [JsonProperty("Therm")]
        Therm = 4,
        
        [JsonProperty("UserDefined")]
        UserDefined = 5,
        
        [JsonProperty("gal")]
        Gal = 6,
        
        [JsonProperty("kBtu")]
        KBtu = 7,
        
        [JsonProperty("kWh")]
        KWh = 8,
        
        [JsonProperty("kgal")]
        Kgal = 9,
        
        [JsonProperty("m3")]
        M3 = 10,
    }
    
    public enum UtilityCost_Tariff_DemandWindowLength
    {
        
        [JsonProperty("Day")]
        Day = 0,
        
        [JsonProperty("FullHour")]
        FullHour = 1,
        
        [JsonProperty("HalfHour")]
        HalfHour = 2,
        
        [JsonProperty("QuarterHour")]
        QuarterHour = 3,
        
        [JsonProperty("Week")]
        Week = 4,
    }
    
    public enum UtilityCost_Tariff_BuyOrSell
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BuyFromUtility")]
        BuyFromUtility = 1,
        
        [JsonProperty("NetMetering")]
        NetMetering = 2,
        
        [JsonProperty("SellToUtility")]
        SellToUtility = 3,
    }
    
    [Description(@"The qualify object allows only tariffs to be selected based on limits which may apply such as maximum or minimum demand requirements. If the results of the simulation fall outside of the range of qualifications, that tariff is still calculated but the ""Qualified"" entry will say ""No"" and the UtilityCost:Qualify that caused its exclusion is shown. Multiple UtilityCost:Qualify objects can appear for the same tariff and they can be based on any variable.")]
    [JsonObject("UtilityCost:Qualify")]
    public class UtilityCost_Qualify : BHoMObject, IEnergyPlusClass
    {
        

[Description("Displayed in the report if the tariff does not qualify")]
[JsonProperty("utility_cost_qualify_name")]
public string UtilityCostQualifyName { get; set; } = "";
        

[Description("The name of the UtilityCost:Tariff that is associated with this UtilityCost:Quali" +
    "fy.")]
[JsonProperty("tariff_name")]
public string TariffName { get; set; } = "";
        

[Description("The name of the variable used. For energy and demand the automatically created va" +
    "riables totalEnergy and totalDemand should be used respectively.")]
[JsonProperty("variable_name")]
public string VariableName { get; set; } = "";
        

[JsonProperty("qualify_type")]
public UtilityCost_Qualify_QualifyType QualifyType { get; set; } = (UtilityCost_Qualify_QualifyType)Enum.Parse(typeof(UtilityCost_Qualify_QualifyType), "Maximum");
        

[Description(@"The minimum or maximum value for the qualify. If the variable has values that are less than this value when the qualify type is minimum then the tariff may be disqualified. If the variable has values that are greater than this value when the qualify type is maximum then the tariff may be disqualified.")]
[JsonProperty("threshold_value_or_variable_name")]
public string ThresholdValueOrVariableName { get; set; } = "";
        

[Description("If the UtilityCost:Qualify only applies to a season enter the season name. If thi" +
    "s field is left blank it defaults to Annual.")]
[JsonProperty("season")]
public UtilityCost_Qualify_Season Season { get; set; } = (UtilityCost_Qualify_Season)Enum.Parse(typeof(UtilityCost_Qualify_Season), "Annual");
        

[Description(@"Uses the number in Number of Months in one of two different ways depending on the Threshold  Test. If the Threshold Test is set to Count then the qualification is based on the count of the total number of months per year. If the Threshold Test is set to consecutive then the qualification is based on a consecutive number of months.")]
[JsonProperty("threshold_test")]
public UtilityCost_Qualify_ThresholdTest ThresholdTest { get; set; } = (UtilityCost_Qualify_ThresholdTest)Enum.Parse(typeof(UtilityCost_Qualify_ThresholdTest), "Consecutive");
        

[Description(@"A number from 1 to 12. If no value entered 12 is assumed when the qualify type is minimum and 1 when the qualify type is maximum. This is the number of months that the threshold test applies to determine if the rate qualifies or not. If the season is less than 12 months (if it is not annual) then the value is automatically reduced to the number of months of the season.")]
[JsonProperty("number_of_months")]
public System.Nullable<float> NumberOfMonths { get; set; } = null;
    }
    
    public enum UtilityCost_Qualify_QualifyType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Maximum")]
        Maximum = 1,
        
        [JsonProperty("Minimum")]
        Minimum = 2,
    }
    
    public enum UtilityCost_Qualify_Season
    {
        
        [JsonProperty("Annual")]
        Annual = 0,
        
        [JsonProperty("Fall")]
        Fall = 1,
        
        [JsonProperty("Spring")]
        Spring = 2,
        
        [JsonProperty("Summer")]
        Summer = 3,
        
        [JsonProperty("Winter")]
        Winter = 4,
    }
    
    public enum UtilityCost_Qualify_ThresholdTest
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Consecutive")]
        Consecutive = 1,
        
        [JsonProperty("Count")]
        Count = 2,
    }
    
    [Description(@"UtilityCost:Charge:Simple is one of the most often used objects for tariff calculation. It is used to compute energy and demand charges that are very simple. It may also be used for taxes, surcharges and any other charges that occur on a utility bill. Multiple UtilityCost:Charge:Simple objects may be defined for a single tariff and they will be added together.")]
    [JsonObject("UtilityCost:Charge:Simple")]
    public class UtilityCost_Charge_Simple : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Charge Variable Name This is the name associated with the UtilityCost:Charge:Simple object and will appear in the report. In addition the results of the UtilityCost:Charge:Simple calculation are stored in a variable with the same name. That way the results may be used for further calculation. Spaces are not significant in Charge variable names. They are removed during the utility bill calculation process.")]
[JsonProperty("utility_cost_charge_simple_name")]
public string UtilityCostChargeSimpleName { get; set; } = "";
        

[Description("The name of the UtilityCost:Tariff that is associated with this UtilityCost:Charg" +
    "e:Simple.")]
[JsonProperty("tariff_name")]
public string TariffName { get; set; } = "";
        

[Description(@"The name of the source used by the UtilityCost:Charge:Simple. This is usually the name of the variable holding the energy or demand but may also be the name of any variable including the subtotal or basis if other charges are based on those. Typical values include totalEnergy totalDemand EnergyCharges DemandCharges ServiceCharges Basis Adjustments Surcharges Subtotal Taxes and Total. If it is a time-of-use rate then peakEnergy peakDemand shoulderEnergy shoulderDemand offPeakEnergy offPeakDemand midPeakEnergy and midPeakDemand. In addition see the Tariff Report to see other native variables that may be available. Also you can create additional user defined variables to model complex tariffs.")]
[JsonProperty("source_variable")]
public string SourceVariable { get; set; } = "";
        

[Description("If this is set to annual the calculations are performed for the UtilityCost:Charg" +
    "e:Simple for the entire year (all months) otherwise it is calculated only for th" +
    "ose months in the season defined.")]
[JsonProperty("season")]
public UtilityCost_Charge_Simple_Season Season { get; set; } = (UtilityCost_Charge_Simple_Season)Enum.Parse(typeof(UtilityCost_Charge_Simple_Season), "Annual");
        

[Description("This field shows where the charge should be added. The reason to enter this field" +
    " appropriately is so that the charge gets reported in a reasonable category. The" +
    " charge automatically gets added to the variable that is the category.")]
[JsonProperty("category_variable_name")]
public UtilityCost_Charge_Simple_CategoryVariableName CategoryVariableName { get; set; } = (UtilityCost_Charge_Simple_CategoryVariableName)Enum.Parse(typeof(UtilityCost_Charge_Simple_CategoryVariableName), "Adjustment");
        

[Description(@"This field contains either a single number or the name of a variable. The number is multiplied with all of the energy or demand or other source that is specified in the source field. If a variable is used then the monthly values of the variable are multiplied against the variable specified in the source field. This field makes it easy to include a simple charge without specifying block sizes. This is a good way to include a tax or cost adjustment.")]
[JsonProperty("cost_per_unit_value_or_variable_name")]
public string CostPerUnitValueOrVariableName { get; set; } = "";
    }
    
    public enum UtilityCost_Charge_Simple_Season
    {
        
        [JsonProperty("Annual")]
        Annual = 0,
        
        [JsonProperty("Fall")]
        Fall = 1,
        
        [JsonProperty("Spring")]
        Spring = 2,
        
        [JsonProperty("Summer")]
        Summer = 3,
        
        [JsonProperty("Winter")]
        Winter = 4,
    }
    
    public enum UtilityCost_Charge_Simple_CategoryVariableName
    {
        
        [JsonProperty("Adjustment")]
        Adjustment = 0,
        
        [JsonProperty("Basis")]
        Basis = 1,
        
        [JsonProperty("DemandCharges")]
        DemandCharges = 2,
        
        [JsonProperty("EnergyCharges")]
        EnergyCharges = 3,
        
        [JsonProperty("NotIncluded")]
        NotIncluded = 4,
        
        [JsonProperty("ServiceCharges")]
        ServiceCharges = 5,
        
        [JsonProperty("Subtotal")]
        Subtotal = 6,
        
        [JsonProperty("Surcharge")]
        Surcharge = 7,
        
        [JsonProperty("Taxes")]
        Taxes = 8,
        
        [JsonProperty("Total")]
        Total = 9,
    }
    
    [Description("Used to compute energy and demand charges (or any other charges) that are structu" +
        "red in blocks of charges. Multiple UtilityCost:Charge:Block objects may be defin" +
        "ed for a single tariff and they will be added together.")]
    [JsonObject("UtilityCost:Charge:Block")]
    public class UtilityCost_Charge_Block : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Charge Variable Name This is the name associated with the UtilityCost:Charge:Block object and will appear in the report. In addition the results of the UtilityCost:Charge:Block are stored in a variable with the same name. That way the results may be used for further calculation.")]
[JsonProperty("utility_cost_charge_block_name")]
public string UtilityCostChargeBlockName { get; set; } = "";
        

[Description("The name of the UtilityCost:Tariff that is associated with this UtilityCost:Charg" +
    "e:Block.")]
[JsonProperty("tariff_name")]
public string TariffName { get; set; } = "";
        

[Description(@"The name of the source used by the UtilityCost:Charge:Block. This is usually the name of the variable holding the energy or demand but may also be the name of any variable including the subtotal or basis if other charges are based on those. Typical values include totalEnergy totalDemand EnergyCharges DemandCharges ServiceCharges Basis Adjustments Surcharges Subtotal Taxes and Total. If it is a time-of-use rate then peakEnergy peakDemand shoulderEnergy shoulderDemand offPeakEnergy offPeakDemand midPeakEnergy and midPeakDemand. In addition see the Tariff Report to see other native variables that may be available. Also you can create additional user defined variables to model complex tariffs.")]
[JsonProperty("source_variable")]
public string SourceVariable { get; set; } = "";
        

[Description("If this is set to annual the calculations are performed for the UtilityCost:Charg" +
    "e:Block for the entire year (all months) otherwise it is calculated only for tho" +
    "se months in the season defined.")]
[JsonProperty("season")]
public UtilityCost_Charge_Block_Season Season { get; set; } = (UtilityCost_Charge_Block_Season)Enum.Parse(typeof(UtilityCost_Charge_Block_Season), "Annual");
        

[Description("This field shows where the charge should be added. The reason to enter this field" +
    " appropriately is so that the charge gets reported in a reasonable category. The" +
    " charge automatically gets added to the variable that is the category.")]
[JsonProperty("category_variable_name")]
public UtilityCost_Charge_Block_CategoryVariableName CategoryVariableName { get; set; } = (UtilityCost_Charge_Block_CategoryVariableName)Enum.Parse(typeof(UtilityCost_Charge_Block_CategoryVariableName), "Adjustment");
        

[Description(@"If the blocks do not use all of the energy or demand from the source some energy and demand remains then the remaining amount should be assigned to a variable. If no variable is assigned and some amount of energy or demand is not used in the block structure a warning will be issued.")]
[JsonProperty("remaining_into_variable")]
public string RemainingIntoVariable { get; set; } = "";
        

[Description(@"The sizes of the blocks are usually used directly but if a value or a variable is entered here the block sizes entered in the rest of the charge are first multiplied by the entered value prior to being used. This is common for rates that are kWh/kW rates and in that case the variable that holds the monthly total electric demand would be entered. If no value is entered a default value of one is assumed so that the block sizes remain exactly as entered. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
[JsonProperty("block_size_multiplier_value_or_variable_name")]
public string BlockSizeMultiplierValueOrVariableName { get; set; } = "";
        

[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty("block_size_1_value_or_variable_name")]
public string BlockSize1ValueOrVariableName { get; set; } = "";
        

[Description("The cost of the block. This field is unusual for the EnergyPlus syntax because it" +
    " can be either a number or a name of a variable.")]
[JsonProperty("block_1_cost_per_unit_value_or_variable_name")]
public string Block1CostPerUnitValueOrVariableName { get; set; } = "";
        

[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty("block_size_2_value_or_variable_name")]
public string BlockSize2ValueOrVariableName { get; set; } = "";
        

[Description("The cost of the block. This field is unusual for the EnergyPlus syntax because it" +
    " can be either a number or a name of a variable.")]
[JsonProperty("block_2_cost_per_unit_value_or_variable_name")]
public string Block2CostPerUnitValueOrVariableName { get; set; } = "";
        

[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty("block_size_3_value_or_variable_name")]
public string BlockSize3ValueOrVariableName { get; set; } = "";
        

[Description("The cost of the block. This field is unusual for the EnergyPlus syntax because it" +
    " can be either a number or a name of a variable.")]
[JsonProperty("block_3_cost_per_unit_value_or_variable_name")]
public string Block3CostPerUnitValueOrVariableName { get; set; } = "";
        

[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty("block_size_4_value_or_variable_name")]
public string BlockSize4ValueOrVariableName { get; set; } = "";
        

[Description("The cost of the block. This field is unusual for the EnergyPlus syntax because it" +
    " can be either a number or a name of a variable.")]
[JsonProperty("block_4_cost_per_unit_value_or_variable_name")]
public string Block4CostPerUnitValueOrVariableName { get; set; } = "";
        

[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty("block_size_5_value_or_variable_name")]
public string BlockSize5ValueOrVariableName { get; set; } = "";
        

[Description("The cost of the block. This field is unusual for the EnergyPlus syntax because it" +
    " can be either a number or a name of a variable.")]
[JsonProperty("block_5_cost_per_unit_value_or_variable_name")]
public string Block5CostPerUnitValueOrVariableName { get; set; } = "";
        

[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty("block_size_6_value_or_variable_name")]
public string BlockSize6ValueOrVariableName { get; set; } = "";
        

[Description("The cost of the block. This field is unusual for the EnergyPlus syntax because it" +
    " can be either a number or a name of a variable.")]
[JsonProperty("block_6_cost_per_unit_value_or_variable_name")]
public string Block6CostPerUnitValueOrVariableName { get; set; } = "";
        

[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty("block_size_7_value_or_variable_name")]
public string BlockSize7ValueOrVariableName { get; set; } = "";
        

[Description("The cost of the block. This field is unusual for the EnergyPlus syntax because it" +
    " can be either a number or a name of a variable.")]
[JsonProperty("block_7_cost_per_unit_value_or_variable_name")]
public string Block7CostPerUnitValueOrVariableName { get; set; } = "";
        

[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty("block_size_8_value_or_variable_name")]
public string BlockSize8ValueOrVariableName { get; set; } = "";
        

[Description("The cost of the block. This field is unusual for the EnergyPlus syntax because it" +
    " can be either a number or a name of a variable.")]
[JsonProperty("block_8_cost_per_unit_value_or_variable_name")]
public string Block8CostPerUnitValueOrVariableName { get; set; } = "";
        

[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty("block_size_9_value_or_variable_name")]
public string BlockSize9ValueOrVariableName { get; set; } = "";
        

[Description("The cost of the block. This field is unusual for the EnergyPlus syntax because it" +
    " can be either a number or a name of a variable.")]
[JsonProperty("block_9_cost_per_unit_value_or_variable_name")]
public string Block9CostPerUnitValueOrVariableName { get; set; } = "";
        

[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty("block_size_10_value_or_variable_name")]
public string BlockSize10ValueOrVariableName { get; set; } = "";
        

[Description("The cost of the block. This field is unusual for the EnergyPlus syntax because it" +
    " can be either a number or a name of a variable.")]
[JsonProperty("block_10_cost_per_unit_value_or_variable_name")]
public string Block10CostPerUnitValueOrVariableName { get; set; } = "";
        

[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty("block_size_11_value_or_variable_name")]
public string BlockSize11ValueOrVariableName { get; set; } = "";
        

[Description("The cost of the block. This field is unusual for the EnergyPlus syntax because it" +
    " can be either a number or a name of a variable.")]
[JsonProperty("block_11_cost_per_unit_value_or_variable_name")]
public string Block11CostPerUnitValueOrVariableName { get; set; } = "";
        

[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty("block_size_12_value_or_variable_name")]
public string BlockSize12ValueOrVariableName { get; set; } = "";
        

[Description("The cost of the block. This field is unusual for the EnergyPlus syntax because it" +
    " can be either a number or a name of a variable.")]
[JsonProperty("block_12_cost_per_unit_value_or_variable_name")]
public string Block12CostPerUnitValueOrVariableName { get; set; } = "";
        

[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty("block_size_13_value_or_variable_name")]
public string BlockSize13ValueOrVariableName { get; set; } = "";
        

[Description("The cost of the block. This field is unusual for the EnergyPlus syntax because it" +
    " can be either a number or a name of a variable.")]
[JsonProperty("block_13_cost_per_unit_value_or_variable_name")]
public string Block13CostPerUnitValueOrVariableName { get; set; } = "";
        

[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty("block_size_14_value_or_variable_name")]
public string BlockSize14ValueOrVariableName { get; set; } = "";
        

[Description("The cost of the block. This field is unusual for the EnergyPlus syntax because it" +
    " can be either a number or a name of a variable.")]
[JsonProperty("block_14_cost_per_unit_value_or_variable_name")]
public string Block14CostPerUnitValueOrVariableName { get; set; } = "";
        

[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty("block_size_15_value_or_variable_name")]
public string BlockSize15ValueOrVariableName { get; set; } = "";
        

[Description("The cost of the block. This field is unusual for the EnergyPlus syntax because it" +
    " can be either a number or a name of a variable.")]
[JsonProperty("block_15_cost_per_unit_value_or_variable_name")]
public string Block15CostPerUnitValueOrVariableName { get; set; } = "";
    }
    
    public enum UtilityCost_Charge_Block_Season
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Annual")]
        Annual = 1,
        
        [JsonProperty("Fall")]
        Fall = 2,
        
        [JsonProperty("Spring")]
        Spring = 3,
        
        [JsonProperty("Summer")]
        Summer = 4,
        
        [JsonProperty("Winter")]
        Winter = 5,
    }
    
    public enum UtilityCost_Charge_Block_CategoryVariableName
    {
        
        [JsonProperty("Adjustment")]
        Adjustment = 0,
        
        [JsonProperty("Basis")]
        Basis = 1,
        
        [JsonProperty("DemandCharges")]
        DemandCharges = 2,
        
        [JsonProperty("EnergyCharges")]
        EnergyCharges = 3,
        
        [JsonProperty("NotIncluded")]
        NotIncluded = 4,
        
        [JsonProperty("ServiceCharges")]
        ServiceCharges = 5,
        
        [JsonProperty("Subtotal")]
        Subtotal = 6,
        
        [JsonProperty("Surcharge")]
        Surcharge = 7,
        
        [JsonProperty("Taxes")]
        Taxes = 8,
        
        [JsonProperty("Total")]
        Total = 9,
    }
    
    [Description(@"Allows the modeling of tariffs that include some type of seasonal ratcheting. Ratchets are most common when used with electric demand charges. A ratchet is when a utility requires that the demand charge for a month with a low demand may be increased to be more consistent with a month that set a higher demand charge.")]
    [JsonObject("UtilityCost:Ratchet")]
    public class UtilityCost_Ratchet : BHoMObject, IEnergyPlusClass
    {
        

[Description("The name of the UtilityCost:Tariff that is associated with this UtilityCost:Ratch" +
    "et.")]
[JsonProperty("tariff_name")]
public string TariffName { get; set; } = "";
        

[Description(@"When the ratcheted value exceeds the baseline value for a month the ratcheted value is used but when the baseline value is greater then the ratcheted value the baseline value is used. Usually the electric demand charge is used. The baseline source variable can be the results of another ratchet object. This allows utility tariffs that have multiple ratchets to be modeled.")]
[JsonProperty("baseline_source_variable")]
public string BaselineSourceVariable { get; set; } = "";
        

[Description(@"The variable that the ratchet is calculated from. It is often but not always the same as the baseline source variable. The ratcheting calculations using offset and multiplier are using the values from the adjustment source variable. If left blank the adjustment source variable is the same as the baseline source variable.")]
[JsonProperty("adjustment_source_variable")]
public string AdjustmentSourceVariable { get; set; } = "";
        

[Description(@"The name of the season that is being examined. The maximum value for all of the months in the named season is what is used with the multiplier and offset. This is most commonly Summer or Annual. When Monthly is used the adjustment source variable is used directly for all months.")]
[JsonProperty("season_from")]
public UtilityCost_Ratchet_SeasonFrom SeasonFrom { get; set; } = (UtilityCost_Ratchet_SeasonFrom)Enum.Parse(typeof(UtilityCost_Ratchet_SeasonFrom), "Annual");
        

[Description(@"The name of the season when the ratchet would be calculated. This is most commonly Winter. The ratchet only is applied to the months in the named season. The resulting variable for months not in the Season To selection will contain the values as appear in the baseline source variable.")]
[JsonProperty("season_to")]
public UtilityCost_Ratchet_SeasonTo SeasonTo { get; set; } = (UtilityCost_Ratchet_SeasonTo)Enum.Parse(typeof(UtilityCost_Ratchet_SeasonTo), "Annual");
        

[Description(@"Often the ratchet has a clause such as ""the current month demand or 90% of the summer month demand"". For this case a value of 0.9 would be entered here as the multiplier. This value may be left blank if no multiplier is needed and a value of one will be used as a default.")]
[JsonProperty("multiplier_value_or_variable_name")]
public string MultiplierValueOrVariableName { get; set; } = "";
        

[Description(@"A less common strategy is to say that the ratchet must be all demand greater than a value in this case an offset that is added to the demand may be entered here. If entered it is common for the offset value to be negative representing that the demand be reduced. If no value is entered it is assumed to be zero and not affect the ratchet.")]
[JsonProperty("offset_value_or_variable_name")]
public string OffsetValueOrVariableName { get; set; } = "";
    }
    
    public enum UtilityCost_Ratchet_SeasonFrom
    {
        
        [JsonProperty("Annual")]
        Annual = 0,
        
        [JsonProperty("Fall")]
        Fall = 1,
        
        [JsonProperty("Monthly")]
        Monthly = 2,
        
        [JsonProperty("Spring")]
        Spring = 3,
        
        [JsonProperty("Summer")]
        Summer = 4,
        
        [JsonProperty("Winter")]
        Winter = 5,
    }
    
    public enum UtilityCost_Ratchet_SeasonTo
    {
        
        [JsonProperty("Annual")]
        Annual = 0,
        
        [JsonProperty("Fall")]
        Fall = 1,
        
        [JsonProperty("Spring")]
        Spring = 2,
        
        [JsonProperty("Summer")]
        Summer = 3,
        
        [JsonProperty("Winter")]
        Winter = 4,
    }
    
    [Description("Allows for the direct entry of monthly values into a utility tariff variable.")]
    [JsonObject("UtilityCost:Variable")]
    public class UtilityCost_Variable : BHoMObject, IEnergyPlusClass
    {
        

[Description("The name of the UtilityCost:Tariff that is associated with this UtilityCost:Varia" +
    "ble.")]
[JsonProperty("tariff_name")]
public string TariffName { get; set; } = "";
        

[JsonProperty("variable_type")]
public UtilityCost_Variable_VariableType VariableType { get; set; } = (UtilityCost_Variable_VariableType)Enum.Parse(typeof(UtilityCost_Variable_VariableType), "Dimensionless");
        

[JsonProperty("january_value")]
public System.Nullable<float> JanuaryValue { get; set; } = null;
        

[JsonProperty("february_value")]
public System.Nullable<float> FebruaryValue { get; set; } = null;
        

[JsonProperty("march_value")]
public System.Nullable<float> MarchValue { get; set; } = null;
        

[JsonProperty("april_value")]
public System.Nullable<float> AprilValue { get; set; } = null;
        

[JsonProperty("may_value")]
public System.Nullable<float> MayValue { get; set; } = null;
        

[JsonProperty("june_value")]
public System.Nullable<float> JuneValue { get; set; } = null;
        

[JsonProperty("july_value")]
public System.Nullable<float> JulyValue { get; set; } = null;
        

[JsonProperty("august_value")]
public System.Nullable<float> AugustValue { get; set; } = null;
        

[JsonProperty("september_value")]
public System.Nullable<float> SeptemberValue { get; set; } = null;
        

[JsonProperty("october_value")]
public System.Nullable<float> OctoberValue { get; set; } = null;
        

[JsonProperty("november_value")]
public System.Nullable<float> NovemberValue { get; set; } = null;
        

[JsonProperty("december_value")]
public System.Nullable<float> DecemberValue { get; set; } = null;
    }
    
    public enum UtilityCost_Variable_VariableType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Currency")]
        Currency = 1,
        
        [JsonProperty("Demand")]
        Demand = 2,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 3,
        
        [JsonProperty("Energy")]
        Energy = 4,
    }
    
    [Description(@"The object lists a series of computations that are used to perform the utility bill calculation. The object is only used for complex tariffs that cannot be modeled any other way. For most utility tariffs, UtilityCost:Computation is unnecessary and should be avoided. If UtilityCost:Computation is used, it must contain references to all objects involved in the rate in the order that they should be computed.")]
    [JsonObject("UtilityCost:Computation")]
    public class UtilityCost_Computation : BHoMObject, IEnergyPlusClass
    {
        

[Description("The name of the UtilityCost:Tariff that is associated with this UtilityCost:Varia" +
    "ble.")]
[JsonProperty("tariff_name")]
public string TariffName { get; set; } = "";
        

[Description("Contain a simple language that describes the steps used in the computation proces" +
    "s similar to a programming language.")]
[JsonProperty("compute_step_1")]
public string ComputeStep1 { get; set; } = "";
        

[JsonProperty("compute_step_2")]
public string ComputeStep2 { get; set; } = "";
        

[JsonProperty("compute_step_3")]
public string ComputeStep3 { get; set; } = "";
        

[JsonProperty("compute_step_4")]
public string ComputeStep4 { get; set; } = "";
        

[JsonProperty("compute_step_5")]
public string ComputeStep5 { get; set; } = "";
        

[JsonProperty("compute_step_6")]
public string ComputeStep6 { get; set; } = "";
        

[JsonProperty("compute_step_7")]
public string ComputeStep7 { get; set; } = "";
        

[JsonProperty("compute_step_8")]
public string ComputeStep8 { get; set; } = "";
        

[JsonProperty("compute_step_9")]
public string ComputeStep9 { get; set; } = "";
        

[JsonProperty("compute_step_10")]
public string ComputeStep10 { get; set; } = "";
        

[JsonProperty("compute_step_11")]
public string ComputeStep11 { get; set; } = "";
        

[JsonProperty("compute_step_12")]
public string ComputeStep12 { get; set; } = "";
        

[JsonProperty("compute_step_13")]
public string ComputeStep13 { get; set; } = "";
        

[JsonProperty("compute_step_14")]
public string ComputeStep14 { get; set; } = "";
        

[JsonProperty("compute_step_15")]
public string ComputeStep15 { get; set; } = "";
        

[JsonProperty("compute_step_16")]
public string ComputeStep16 { get; set; } = "";
        

[JsonProperty("compute_step_17")]
public string ComputeStep17 { get; set; } = "";
        

[JsonProperty("compute_step_18")]
public string ComputeStep18 { get; set; } = "";
        

[JsonProperty("compute_step_19")]
public string ComputeStep19 { get; set; } = "";
        

[JsonProperty("compute_step_20")]
public string ComputeStep20 { get; set; } = "";
        

[JsonProperty("compute_step_21")]
public string ComputeStep21 { get; set; } = "";
        

[JsonProperty("compute_step_22")]
public string ComputeStep22 { get; set; } = "";
        

[JsonProperty("compute_step_23")]
public string ComputeStep23 { get; set; } = "";
        

[JsonProperty("compute_step_24")]
public string ComputeStep24 { get; set; } = "";
        

[JsonProperty("compute_step_25")]
public string ComputeStep25 { get; set; } = "";
        

[JsonProperty("compute_step_26")]
public string ComputeStep26 { get; set; } = "";
        

[JsonProperty("compute_step_27")]
public string ComputeStep27 { get; set; } = "";
        

[JsonProperty("compute_step_28")]
public string ComputeStep28 { get; set; } = "";
        

[JsonProperty("compute_step_29")]
public string ComputeStep29 { get; set; } = "";
        

[JsonProperty("compute_step_30")]
public string ComputeStep30 { get; set; } = "";
    }
    
    [Description(@"Provides inputs related to the overall life-cycle analysis. It establishes many of the assumptions used in computing the present value. It is important that when comparing the results of multiple simulations that the fields in the LifeCycleCost:Parameters objects are the same for all the simulations. When this object is present the tabular report file will contain the Life-Cycle Cost Report.")]
    [JsonObject("LifeCycleCost:Parameters")]
    public class LifeCycleCost_Parameters : BHoMObject, IEnergyPlusClass
    {
        

[Description("The field specifies if the discounting of future costs should be computed as occu" +
    "rring at the end of each year or the middle of each year or the beginning of eac" +
    "h year. The most common discounting convention uses the end of each year.")]
[JsonProperty("discounting_convention")]
public LifeCycleCost_Parameters_DiscountingConvention DiscountingConvention { get; set; } = (LifeCycleCost_Parameters_DiscountingConvention)Enum.Parse(typeof(LifeCycleCost_Parameters_DiscountingConvention), "EndOfYear");
        

[Description(@"This field is used to determine if the analysis should use constant dollars or current dollars which is related to how inflation is treated. If ConstantDollar is selected then the Real Discount Rate input is used and it excludes the rate of inflation. If CurrentDollar is selected then the Nominal Discount Rate input is used and it includes the rate of inflation.")]
[JsonProperty("inflation_approach")]
public LifeCycleCost_Parameters_InflationApproach InflationApproach { get; set; } = (LifeCycleCost_Parameters_InflationApproach)Enum.Parse(typeof(LifeCycleCost_Parameters_InflationApproach), "ConstantDollar");
        

[Description(@"Enter the real discount rate as a decimal. For a 3% rate enter the value 0.03. This input is used when the Inflation Approach is ConstantDollar. The real discount rate reflects the interest rates needed to make current and future expenditures have comparable equivalent values when general inflation is ignored. When Inflation Approach is set to CurrentDollar this input is ignored.")]
[JsonProperty("real_discount_rate")]
public System.Nullable<float> RealDiscountRate { get; set; } = null;
        

[Description(@"Enter the nominal discount rate as a decimal. For a 5% rate enter the value 0.05. This input is used when the Inflation Approach is CurrentDollar. The real discount rate reflects the interest rates needed to make current and future expenditures have comparable equivalent values when general inflation is included. When Inflation Approach is set to ConstantDollar this input is ignored.")]
[JsonProperty("nominal_discount_rate")]
public System.Nullable<float> NominalDiscountRate { get; set; } = null;
        

[Description("Enter the rate of inflation for general goods and services as a decimal. For a 2%" +
    " rate enter the value 0.02.")]
[JsonProperty("inflation")]
public System.Nullable<float> Inflation { get; set; } = null;
        

[Description("Enter the month that is the beginning of study period also known as the beginning" +
    " of the base period.")]
[JsonProperty("base_date_month")]
public LifeCycleCost_Parameters_BaseDateMonth BaseDateMonth { get; set; } = (LifeCycleCost_Parameters_BaseDateMonth)Enum.Parse(typeof(LifeCycleCost_Parameters_BaseDateMonth), "January");
        

[Description("Enter the four digit year that is the beginning of study period such as 2010. The" +
    " study period is also known as the base period.")]
[JsonProperty("base_date_year")]
public System.Nullable<float> BaseDateYear { get; set; } = null;
        

[Description(@"Enter the month that is the beginning of building occupancy. Energy costs computed by EnergyPlus are assumed to occur during the year following the service date. The service date must be the same or later than the Base Date. This field could also be referred to as part of beneficial occupancy date.")]
[JsonProperty("service_date_month")]
public LifeCycleCost_Parameters_ServiceDateMonth ServiceDateMonth { get; set; } = (LifeCycleCost_Parameters_ServiceDateMonth)Enum.Parse(typeof(LifeCycleCost_Parameters_ServiceDateMonth), "January");
        

[Description("Enter the four digit year that is the beginning of occupancy such as 2010.")]
[JsonProperty("service_date_year")]
public System.Nullable<float> ServiceDateYear { get; set; } = null;
        

[Description("Enter the number of years of the study period. It is the number of years that the" +
    " study continues based on the start at the base date. The default value is 25 ye" +
    "ars. Only integers may be used indicating whole years.")]
[JsonProperty("length_of_study_period_in_years")]
public System.Nullable<float> LengthOfStudyPeriodInYears { get; set; } = null;
        

[Description(@"Enter the overall marginal tax rate for the project costs. This does not include energy or water taxes. The tax rate entered should be based on the marginal tax rate for the entity and not the average tax rate. Enter the tax rate results in present value calculations after taxes. Most analyses do not factor in the impact of taxes and assume that all options under consideration have roughly the same tax impact. Due to this many times the tax rate can be left to default to zero and the present value results before taxes are used to make decisions. The value should be entered as a decimal value. For 15% enter 0.15. For an analysis that does not include tax impacts enter 0.0.")]
[JsonProperty("tax_rate")]
public System.Nullable<float> TaxRate { get; set; } = null;
        

[Description("For an analysis that includes income tax impacts this entry describes how capital" +
    " costs are depreciated. Only one depreciation method may be used for an analysis" +
    " and is applied to all capital expenditures.")]
[JsonProperty("depreciation_method")]
public LifeCycleCost_Parameters_DepreciationMethod DepreciationMethod { get; set; } = (LifeCycleCost_Parameters_DepreciationMethod)Enum.Parse(typeof(LifeCycleCost_Parameters_DepreciationMethod), "None");
    }
    
    public enum LifeCycleCost_Parameters_DiscountingConvention
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BeginningOfYear")]
        BeginningOfYear = 1,
        
        [JsonProperty("EndOfYear")]
        EndOfYear = 2,
        
        [JsonProperty("MidYear")]
        MidYear = 3,
    }
    
    public enum LifeCycleCost_Parameters_InflationApproach
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantDollar")]
        ConstantDollar = 1,
        
        [JsonProperty("CurrentDollar")]
        CurrentDollar = 2,
    }
    
    public enum LifeCycleCost_Parameters_BaseDateMonth
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("April")]
        April = 1,
        
        [JsonProperty("August")]
        August = 2,
        
        [JsonProperty("December")]
        December = 3,
        
        [JsonProperty("February")]
        February = 4,
        
        [JsonProperty("January")]
        January = 5,
        
        [JsonProperty("July")]
        July = 6,
        
        [JsonProperty("June")]
        June = 7,
        
        [JsonProperty("March")]
        March = 8,
        
        [JsonProperty("May")]
        May = 9,
        
        [JsonProperty("November")]
        November = 10,
        
        [JsonProperty("October")]
        October = 11,
        
        [JsonProperty("September")]
        September = 12,
    }
    
    public enum LifeCycleCost_Parameters_ServiceDateMonth
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("April")]
        April = 1,
        
        [JsonProperty("August")]
        August = 2,
        
        [JsonProperty("December")]
        December = 3,
        
        [JsonProperty("February")]
        February = 4,
        
        [JsonProperty("January")]
        January = 5,
        
        [JsonProperty("July")]
        July = 6,
        
        [JsonProperty("June")]
        June = 7,
        
        [JsonProperty("March")]
        March = 8,
        
        [JsonProperty("May")]
        May = 9,
        
        [JsonProperty("November")]
        November = 10,
        
        [JsonProperty("October")]
        October = 11,
        
        [JsonProperty("September")]
        September = 12,
    }
    
    public enum LifeCycleCost_Parameters_DepreciationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ModifiedAcceleratedCostRecoverySystem-10year")]
        ModifiedAcceleratedCostRecoverySystem10year = 1,
        
        [JsonProperty("ModifiedAcceleratedCostRecoverySystem-15year")]
        ModifiedAcceleratedCostRecoverySystem15year = 2,
        
        [JsonProperty("ModifiedAcceleratedCostRecoverySystem-20year")]
        ModifiedAcceleratedCostRecoverySystem20year = 3,
        
        [JsonProperty("ModifiedAcceleratedCostRecoverySystem-3year")]
        ModifiedAcceleratedCostRecoverySystem3year = 4,
        
        [JsonProperty("ModifiedAcceleratedCostRecoverySystem-5year")]
        ModifiedAcceleratedCostRecoverySystem5year = 5,
        
        [JsonProperty("ModifiedAcceleratedCostRecoverySystem-7year")]
        ModifiedAcceleratedCostRecoverySystem7year = 6,
        
        [JsonProperty("None")]
        None = 7,
        
        [JsonProperty("StraightLine-27year")]
        StraightLine27year = 8,
        
        [JsonProperty("StraightLine-31year")]
        StraightLine31year = 9,
        
        [JsonProperty("StraightLine-39year")]
        StraightLine39year = 10,
        
        [JsonProperty("StraightLine-40year")]
        StraightLine40year = 11,
    }
    
    [Description("Recurring costs are costs that repeat over time on a regular schedule during the " +
        "study period. If costs associated with equipment do repeat but not on a regular " +
        "schedule, use LifeCycleCost:NonrecurringCost objects instead.")]
    [JsonObject("LifeCycleCost:RecurringCosts")]
    public class LifeCycleCost_RecurringCosts : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("category")]
public LifeCycleCost_RecurringCosts_Category Category { get; set; } = (LifeCycleCost_RecurringCosts_Category)Enum.Parse(typeof(LifeCycleCost_RecurringCosts_Category), "Maintenance");
        

[Description("Enter the cost in dollars (or the appropriate monetary unit) for the recurring co" +
    "sts. Enter the cost for each time it occurs. For example if the annual maintenan" +
    "ce cost is 500 dollars enter 500 here.")]
[JsonProperty("cost")]
public System.Nullable<float> Cost { get; set; } = null;
        

[Description("Enter when the costs start. The First Year of Cost is based on the number of year" +
    "s past the Start of Costs. For most maintenance costs the Start of Costs should " +
    "be Service Period.")]
[JsonProperty("start_of_costs")]
public LifeCycleCost_RecurringCosts_StartOfCosts StartOfCosts { get; set; } = (LifeCycleCost_RecurringCosts_StartOfCosts)Enum.Parse(typeof(LifeCycleCost_RecurringCosts_StartOfCosts), "ServicePeriod");
        

[Description(@"This field and the Months From Start field together represent the time from either the start of the Service Period on the service month and year or start of the Base Period on the base month and year (depending on the Start of Costs field) that the costs start to occur. Only integers should be entered representing whole years.")]
[JsonProperty("years_from_start")]
public System.Nullable<float> YearsFromStart { get; set; } = null;
        

[Description(@"This field and the Years From Start field together represent the time from either the start of the Service Period on the service month and year or start of the Base Period on the base month and year (depending on the Start of Costs field) that the costs start to occur. Only integers should be entered representing whole months. The Years From Start (times 12) and Months From Start are added together.")]
[JsonProperty("months_from_start")]
public System.Nullable<float> MonthsFromStart { get; set; } = null;
        

[Description(@"This field and the Repeat Period Months field indicate how much time elapses between re-occurrences of the cost. For costs that occur every year such the Repeat Period Years should be 1 and Repeat Period Months should be 0. Only integers should be entered representing whole years.")]
[JsonProperty("repeat_period_years")]
public System.Nullable<float> RepeatPeriodYears { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This field and the Repeat Period Years field indicate how much time elapses betwe" +
    "en re-occurrences of the cost. Only integers should be entered representing whol" +
    "e years. The Repeat Period Years (times 12) and Repeat Period Months are added t" +
    "ogether.")]
[JsonProperty("repeat_period_months")]
public System.Nullable<float> RepeatPeriodMonths { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Enter the annual escalation rate as a decimal. For a 1% rate enter the value 0.01" +
    ". This input is used when the Inflation Approach is CurrentDollar. When Inflatio" +
    "n Approach is set to ConstantDollar this input is ignored.")]
[JsonProperty("annual_escalation_rate")]
public System.Nullable<float> AnnualEscalationRate { get; set; } = null;
    }
    
    public enum LifeCycleCost_RecurringCosts_Category
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Maintenance")]
        Maintenance = 1,
        
        [JsonProperty("MajorOverhaul")]
        MajorOverhaul = 2,
        
        [JsonProperty("MinorOverhaul")]
        MinorOverhaul = 3,
        
        [JsonProperty("Operation")]
        Operation = 4,
        
        [JsonProperty("OtherOperational")]
        OtherOperational = 5,
        
        [JsonProperty("Repair")]
        Repair = 6,
        
        [JsonProperty("Replacement")]
        Replacement = 7,
    }
    
    public enum LifeCycleCost_RecurringCosts_StartOfCosts
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BasePeriod")]
        BasePeriod = 1,
        
        [JsonProperty("ServicePeriod")]
        ServicePeriod = 2,
    }
    
    [Description("A non-recurring cost happens only once during the study period. For costs that oc" +
        "cur more than once during the study period on a regular schedule, use the LifeCy" +
        "cleCost:RecurringCost object.")]
    [JsonObject("LifeCycleCost:NonrecurringCost")]
    public class LifeCycleCost_NonrecurringCost : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("category")]
public LifeCycleCost_NonrecurringCost_Category Category { get; set; } = (LifeCycleCost_NonrecurringCost_Category)Enum.Parse(typeof(LifeCycleCost_NonrecurringCost_Category), "Construction");
        

[Description(@"Enter the non-recurring cost value. For construction and other capital costs the value entered is typically a positive value. For salvage costs the value entered is typically a negative value which represents the money paid to the investor for the equipment at the end of the study period.")]
[JsonProperty("cost")]
public System.Nullable<float> Cost { get; set; } = null;
        

[Description("Enter when the costs start. The First Year of Cost is based on the number of year" +
    "s past the Start of Costs. For most non-recurring costs the Start of Costs shoul" +
    "d be Base Period which begins at the base month and year.")]
[JsonProperty("start_of_costs")]
public LifeCycleCost_NonrecurringCost_StartOfCosts StartOfCosts { get; set; } = (LifeCycleCost_NonrecurringCost_StartOfCosts)Enum.Parse(typeof(LifeCycleCost_NonrecurringCost_StartOfCosts), "ServicePeriod");
        

[Description(@"This field and the Months From Start field together represent the time from either the start of the Service Period on the service month and year or start of the Base Period on the base month and year (depending on the Start of Cost field) that the costs start to occur. Only integers should be entered representing whole years.")]
[JsonProperty("years_from_start")]
public System.Nullable<float> YearsFromStart { get; set; } = null;
        

[Description(@"This field and the Years From Start field together represent the time from either the start of the Service Period on the service month and year or start of the Base Period on the base month and year (depending on the Start of Cost field) that the costs start to occur. Only integers should be entered representing whole months. The Years From Start (times 12) and Months From Start are added together.")]
[JsonProperty("months_from_start")]
public System.Nullable<float> MonthsFromStart { get; set; } = null;
    }
    
    public enum LifeCycleCost_NonrecurringCost_Category
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Construction")]
        Construction = 1,
        
        [JsonProperty("OtherCapital")]
        OtherCapital = 2,
        
        [JsonProperty("Salvage")]
        Salvage = 3,
    }
    
    public enum LifeCycleCost_NonrecurringCost_StartOfCosts
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BasePeriod")]
        BasePeriod = 1,
        
        [JsonProperty("ServicePeriod")]
        ServicePeriod = 2,
    }
    
    [Description("Life cycle cost escalation factors. The values for this object may be found in th" +
        "e annual supplement to NIST Handbook 135 in Tables Ca-1 to Ca-5 and are included" +
        " in an EnergyPlus dataset file.")]
    [JsonObject("LifeCycleCost:UsePriceEscalation")]
    public class LifeCycleCost_UsePriceEscalation : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"The identifier used for the object. The name usually identifies the location (such as the state or region or country or census area) that the escalations apply to. In addition the name should identify the building class such as residential or commercial or industrial and the use type such as electricity or natural gas or water.")]
[JsonProperty("lcc_price_escalation_name")]
public string LccPriceEscalationName { get; set; } = "";
        

[JsonProperty("resource")]
public LifeCycleCost_UsePriceEscalation_Resource Resource { get; set; } = (LifeCycleCost_UsePriceEscalation_Resource)Enum.Parse(typeof(LifeCycleCost_UsePriceEscalation_Resource), "Coal");
        

[Description("This field and the Escalation Start Month define the time that corresponds to Yea" +
    "r 1 Escalation such as 2010 when the escalation rates are applied. This field an" +
    "d the Escalation Start Month define the time that escalation begins.")]
[JsonProperty("escalation_start_year")]
public System.Nullable<float> EscalationStartYear { get; set; } = null;
        

[Description("This field and the Escalation Start Year define the time that corresponds to Year" +
    " 1 Escalation such as 2010 when the escalation rates are applied. This field and" +
    " the Escalation Start Year define the time that escalation begins.")]
[JsonProperty("escalation_start_month")]
public LifeCycleCost_UsePriceEscalation_EscalationStartMonth EscalationStartMonth { get; set; } = (LifeCycleCost_UsePriceEscalation_EscalationStartMonth)Enum.Parse(typeof(LifeCycleCost_UsePriceEscalation_EscalationStartMonth), "January");
        

[JsonProperty("escalations")]
public string Escalations { get; set; } = "";
    }
    
    public enum LifeCycleCost_UsePriceEscalation_Resource
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("Electricity")]
        Electricity = 2,
        
        [JsonProperty("ElectricityNet")]
        ElectricityNet = 3,
        
        [JsonProperty("ElectricityProduced")]
        ElectricityProduced = 4,
        
        [JsonProperty("ElectricityPurchased")]
        ElectricityPurchased = 5,
        
        [JsonProperty("ElectricitySurplusSold")]
        ElectricitySurplusSold = 6,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 7,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 8,
        
        [JsonProperty("Gasoline")]
        Gasoline = 9,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 10,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 11,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 12,
        
        [JsonProperty("Propane")]
        Propane = 13,
        
        [JsonProperty("Steam")]
        Steam = 14,
        
        [JsonProperty("Water")]
        Water = 15,
    }
    
    public enum LifeCycleCost_UsePriceEscalation_EscalationStartMonth
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("April")]
        April = 1,
        
        [JsonProperty("August")]
        August = 2,
        
        [JsonProperty("December")]
        December = 3,
        
        [JsonProperty("February")]
        February = 4,
        
        [JsonProperty("January")]
        January = 5,
        
        [JsonProperty("July")]
        July = 6,
        
        [JsonProperty("June")]
        June = 7,
        
        [JsonProperty("March")]
        March = 8,
        
        [JsonProperty("May")]
        May = 9,
        
        [JsonProperty("November")]
        November = 10,
        
        [JsonProperty("October")]
        October = 11,
        
        [JsonProperty("September")]
        September = 12,
    }
    
    [Description(@"Used by advanced users to adjust the energy or water use costs for future years. This should not be used for compensating for inflation but should only be used to increase the costs of energy or water based on assumed changes to the actual usage, such as anticipated changes in the future function of the building. The adjustments begin at the start of the service period.")]
    [JsonObject("LifeCycleCost:UseAdjustment")]
    public class LifeCycleCost_UseAdjustment : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("resource")]
public LifeCycleCost_UseAdjustment_Resource Resource { get; set; } = (LifeCycleCost_UseAdjustment_Resource)Enum.Parse(typeof(LifeCycleCost_UseAdjustment_Resource), "Coal");
        

[JsonProperty("multipliers")]
public string Multipliers { get; set; } = "";
    }
    
    public enum LifeCycleCost_UseAdjustment_Resource
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("Electricity")]
        Electricity = 2,
        
        [JsonProperty("ElectricityNet")]
        ElectricityNet = 3,
        
        [JsonProperty("ElectricityProduced")]
        ElectricityProduced = 4,
        
        [JsonProperty("ElectricityPurchased")]
        ElectricityPurchased = 5,
        
        [JsonProperty("ElectricitySurplusSold")]
        ElectricitySurplusSold = 6,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 7,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 8,
        
        [JsonProperty("Gasoline")]
        Gasoline = 9,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 10,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 11,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 12,
        
        [JsonProperty("Propane")]
        Propane = 13,
        
        [JsonProperty("Steam")]
        Steam = 14,
        
        [JsonProperty("Water")]
        Water = 15,
    }
}
namespace BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("This generator model is the empirical model from the Building Loads and System Th" +
        "ermodynamics (BLAST) program. Engine performance curves are generated by fitting" +
        " catalog data to second order polynomial equations. Three sets of coefficients a" +
        "re required.")]
    [JsonObject("Generator:InternalCombustionEngine")]
    public class Generator_InternalCombustionEngine : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("rated_power_output")]
public System.Nullable<float> RatedPowerOutput { get; set; } = null;
        

[JsonProperty("electric_circuit_node_name")]
public string ElectricCircuitNodeName { get; set; } = "";
        

[JsonProperty("minimum_part_load_ratio")]
public System.Nullable<float> MinimumPartLoadRatio { get; set; } = null;
        

[JsonProperty("maximum_part_load_ratio")]
public System.Nullable<float> MaximumPartLoadRatio { get; set; } = null;
        

[JsonProperty("optimum_part_load_ratio")]
public System.Nullable<float> OptimumPartLoadRatio { get; set; } = null;
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty("shaft_power_curve_name")]
public string ShaftPowerCurveName { get; set; } = "";
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty("jacket_heat_recovery_curve_name")]
public string JacketHeatRecoveryCurveName { get; set; } = "";
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty("lube_heat_recovery_curve_name")]
public string LubeHeatRecoveryCurveName { get; set; } = "";
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty("total_exhaust_energy_curve_name")]
public string TotalExhaustEnergyCurveName { get; set; } = "";
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty("exhaust_temperature_curve_name")]
public string ExhaustTemperatureCurveName { get; set; } = "";
        

[Description("curve = C1 * Generator Rated Power Output**C2")]
[JsonProperty("coefficient_1_of_u_factor_times_area_curve")]
public System.Nullable<float> Coefficient1OfUFactorTimesAreaCurve { get; set; } = null;
        

[Description("curve = C1 * Generator Rated Power Output**C2 typical value .9")]
[JsonProperty("coefficient_2_of_u_factor_times_area_curve")]
public System.Nullable<float> Coefficient2OfUFactorTimesAreaCurve { get; set; } = null;
        

[JsonProperty("maximum_exhaust_flow_per_unit_of_power_output")]
public System.Nullable<float> MaximumExhaustFlowPerUnitOfPowerOutput { get; set; } = null;
        

[JsonProperty("design_minimum_exhaust_temperature")]
public System.Nullable<float> DesignMinimumExhaustTemperature { get; set; } = null;
        

[JsonProperty("fuel_higher_heating_value")]
public System.Nullable<float> FuelHigherHeatingValue { get; set; } = null;
        

[Description("if non-zero, then inlet, outlet nodes must be entered.")]
[JsonProperty("design_heat_recovery_water_flow_rate")]
public System.Nullable<float> DesignHeatRecoveryWaterFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_recovery_inlet_node_name")]
public string HeatRecoveryInletNodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_outlet_node_name")]
public string HeatRecoveryOutletNodeName { get; set; } = "";
        

[JsonProperty("fuel_type")]
public Generator_InternalCombustionEngine_FuelType FuelType { get; set; } = (Generator_InternalCombustionEngine_FuelType)Enum.Parse(typeof(Generator_InternalCombustionEngine_FuelType), "Diesel");
        

[JsonProperty("heat_recovery_maximum_temperature")]
public System.Nullable<float> HeatRecoveryMaximumTemperature { get; set; } = (System.Nullable<float>)Single.Parse("80", CultureInfo.InvariantCulture);
    }
    
    public enum Generator_InternalCombustionEngine_FuelType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 2,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 3,
        
        [JsonProperty("Gasoline")]
        Gasoline = 4,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 5,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 6,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 7,
        
        [JsonProperty("Propane")]
        Propane = 8,
    }
    
    [Description(@"This generator model is the empirical model from the Building Loads and System Thermodynamics (BLAST) program. Generator performance curves are generated by fitting catalog data to second order polynomial equations. Three sets of coefficients are required.")]
    [JsonObject("Generator:CombustionTurbine")]
    public class Generator_CombustionTurbine : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("rated_power_output")]
public System.Nullable<float> RatedPowerOutput { get; set; } = null;
        

[JsonProperty("electric_circuit_node_name")]
public string ElectricCircuitNodeName { get; set; } = "";
        

[JsonProperty("minimum_part_load_ratio")]
public System.Nullable<float> MinimumPartLoadRatio { get; set; } = null;
        

[JsonProperty("maximum_part_load_ratio")]
public System.Nullable<float> MaximumPartLoadRatio { get; set; } = null;
        

[JsonProperty("optimum_part_load_ratio")]
public System.Nullable<float> OptimumPartLoadRatio { get; set; } = null;
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output " +
    "this curve is multiplied to the Temperature Based Fuel Input Curve to determine " +
    "Fuel Energy In")]
[JsonProperty("part_load_based_fuel_input_curve_name")]
public string PartLoadBasedFuelInputCurveName { get; set; } = "";
        

[Description("curve = a + b*AT + c*AT**2 AT = Ambient Delta T this curve is multiplied to the P" +
    "art Load Based Fuel Input Curve to determine Fuel Energy In")]
[JsonProperty("temperature_based_fuel_input_curve_name")]
public string TemperatureBasedFuelInputCurveName { get; set; } = "";
        

[Description("curve = a + b*AT + c*AT**2 AT = Ambient Delta T")]
[JsonProperty("exhaust_flow_curve_name")]
public string ExhaustFlowCurveName { get; set; } = "";
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output " +
    "this curve is multiplied to the Temperature Based Exhaust Temperature Curve to d" +
    "etermine Exhaust Temperature")]
[JsonProperty("part_load_based_exhaust_temperature_curve_name")]
public string PartLoadBasedExhaustTemperatureCurveName { get; set; } = "";
        

[Description("curve = a + b*AT + c*AT**2 AT = Ambient Delta T this curve is multiplied to the P" +
    "art Load Based Exhaust Temperature Curve to determine Exhaust Temperature")]
[JsonProperty("temperature_based_exhaust_temperature_curve_name")]
public string TemperatureBasedExhaustTemperatureCurveName { get; set; } = "";
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty("heat_recovery_lube_energy_curve_name")]
public string HeatRecoveryLubeEnergyCurveName { get; set; } = "";
        

[Description("curve = C1 * Rated Power Output**C2")]
[JsonProperty("coefficient_1_of_u_factor_times_area_curve")]
public System.Nullable<float> Coefficient1OfUFactorTimesAreaCurve { get; set; } = null;
        

[Description("curve = C1 * Rated Power Output**C2 typical value .9")]
[JsonProperty("coefficient_2_of_u_factor_times_area_curve")]
public System.Nullable<float> Coefficient2OfUFactorTimesAreaCurve { get; set; } = null;
        

[JsonProperty("maximum_exhaust_flow_per_unit_of_power_output")]
public System.Nullable<float> MaximumExhaustFlowPerUnitOfPowerOutput { get; set; } = null;
        

[JsonProperty("design_minimum_exhaust_temperature")]
public System.Nullable<float> DesignMinimumExhaustTemperature { get; set; } = null;
        

[JsonProperty("design_air_inlet_temperature")]
public System.Nullable<float> DesignAirInletTemperature { get; set; } = null;
        

[JsonProperty("fuel_higher_heating_value")]
public System.Nullable<float> FuelHigherHeatingValue { get; set; } = null;
        

[Description("if non-zero, then inlet, outlet nodes must be entered.")]
[JsonProperty("design_heat_recovery_water_flow_rate")]
public System.Nullable<float> DesignHeatRecoveryWaterFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_recovery_inlet_node_name")]
public string HeatRecoveryInletNodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_outlet_node_name")]
public string HeatRecoveryOutletNodeName { get; set; } = "";
        

[JsonProperty("fuel_type")]
public Generator_CombustionTurbine_FuelType FuelType { get; set; } = (Generator_CombustionTurbine_FuelType)Enum.Parse(typeof(Generator_CombustionTurbine_FuelType), "NaturalGas");
        

[JsonProperty("heat_recovery_maximum_temperature")]
public System.Nullable<float> HeatRecoveryMaximumTemperature { get; set; } = (System.Nullable<float>)Single.Parse("80", CultureInfo.InvariantCulture);
        

[Description("Enter the name of an outdoor air node")]
[JsonProperty("outdoor_air_inlet_node_name")]
public string OutdoorAirInletNodeName { get; set; } = "";
    }
    
    public enum Generator_CombustionTurbine_FuelType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Coal")]
        Coal = 1,
        
        [JsonProperty("Diesel")]
        Diesel = 2,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 3,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 4,
        
        [JsonProperty("Gasoline")]
        Gasoline = 5,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 6,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 7,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 8,
        
        [JsonProperty("Propane")]
        Propane = 9,
    }
    
    [Description("MicroTurbine generators are small combustion turbines (e.g., 25kW to 500kW). The " +
        "model calculates electrical power output, fuel use, standby and ancillary power." +
        " Energy recovery from exhaust air can be used to heat water.")]
    [JsonObject("Generator:MicroTurbine")]
    public class Generator_MicroTurbine : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("reference_electrical_power_output")]
public System.Nullable<float> ReferenceElectricalPowerOutput { get; set; } = null;
        

[JsonProperty("minimum_full_load_electrical_power_output")]
public System.Nullable<float> MinimumFullLoadElectricalPowerOutput { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("If left blank, Maximum Full Load Electrical Power Output will be set equal to the" +
    " Reference Electrical Power Output.")]
[JsonProperty("maximum_full_load_electrical_power_output")]
public System.Nullable<float> MaximumFullLoadElectricalPowerOutput { get; set; } = null;
        

[Description("Electric power output divided by fuel energy input (LHV basis) at reference condi" +
    "tions.")]
[JsonProperty("reference_electrical_efficiency_using_lower_heating_value")]
public System.Nullable<float> ReferenceElectricalEfficiencyUsingLowerHeatingValue { get; set; } = null;
        

[JsonProperty("reference_combustion_air_inlet_temperature")]
public System.Nullable<float> ReferenceCombustionAirInletTemperature { get; set; } = (System.Nullable<float>)Single.Parse("15", CultureInfo.InvariantCulture);
        

[JsonProperty("reference_combustion_air_inlet_humidity_ratio")]
public System.Nullable<float> ReferenceCombustionAirInletHumidityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.00638", CultureInfo.InvariantCulture);
        

[JsonProperty("reference_elevation")]
public System.Nullable<float> ReferenceElevation { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev T = combustion air inlet" +
    " temperature (C) Elev = elevation (m)")]
[JsonProperty("electrical_power_function_of_temperature_and_elevation_curve_name")]
public string ElectricalPowerFunctionOfTemperatureAndElevationCurveName { get; set; } = "";
        

[Description("Quadratic curve = a + b*T + c*T**2 Cubic curve = a + b*T + c*T**2 + d*T**3 T = co" +
    "mbustion air inlet temperature (C)")]
[JsonProperty("electrical_efficiency_function_of_temperature_curve_name")]
public string ElectricalEfficiencyFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Quadratic curve = a + b*PLR + c*PLR**2 Cubic curve = a + b*PLR + c*PLR**2 + d*PLR" +
    "**3 PLR = ratio of Generator Load to steady state Electrical Power Output at cur" +
    "rent operating conditions")]
[JsonProperty("electrical_efficiency_function_of_part_load_ratio_curve_name")]
public string ElectricalEfficiencyFunctionOfPartLoadRatioCurveName { get; set; } = "";
        

[JsonProperty("fuel_type")]
public Generator_MicroTurbine_FuelType FuelType { get; set; } = (Generator_MicroTurbine_FuelType)Enum.Parse(typeof(Generator_MicroTurbine_FuelType), "NaturalGas");
        

[JsonProperty("fuel_higher_heating_value")]
public System.Nullable<float> FuelHigherHeatingValue { get; set; } = (System.Nullable<float>)Single.Parse("50000", CultureInfo.InvariantCulture);
        

[JsonProperty("fuel_lower_heating_value")]
public System.Nullable<float> FuelLowerHeatingValue { get; set; } = (System.Nullable<float>)Single.Parse("45450", CultureInfo.InvariantCulture);
        

[Description("Electric power consumed when the generator is available but not being called by t" +
    "he Electric Load Center.")]
[JsonProperty("standby_power")]
public System.Nullable<float> StandbyPower { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Electric power consumed by ancillary equipment (e.g., external fuel pressurization pump). Set to zero if Reference Electrical Power Output is the 'net' value (ancillary power already deducted). Input value is positive, but indicates negative electric generation.")]
[JsonProperty("ancillary_power")]
public System.Nullable<float> AncillaryPower { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Quadratic curve = a + b*mdot + c*mdot**2 mdot = fuel mass flow rate (kg/s) If lef" +
    "t blank, model assumes ancillary power defined in previous field is constant whe" +
    "never the generator is operating.")]
[JsonProperty("ancillary_power_function_of_fuel_input_curve_name")]
public string AncillaryPowerFunctionOfFuelInputCurveName { get; set; } = "";
        

[JsonProperty("heat_recovery_water_inlet_node_name")]
public string HeatRecoveryWaterInletNodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_water_outlet_node_name")]
public string HeatRecoveryWaterOutletNodeName { get; set; } = "";
        

[Description("Reference thermal efficiency (heat recovery to water) based on the Lower Heating " +
    "Value (LHV) of the fuel.")]
[JsonProperty("reference_thermal_efficiency_using_lower_heat_value")]
public System.Nullable<float> ReferenceThermalEfficiencyUsingLowerHeatValue { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("reference_inlet_water_temperature")]
public System.Nullable<float> ReferenceInletWaterTemperature { get; set; } = null;
        

[Description(@"PlantControl means the heat recovery water flow rate is determined by the plant, but the user needs to supply a heat recovery water flow rate. InternalControl means the heat recovery water flow rate is controlled by this generator. If 'InternalControl' is selected, then the user needs to supply a reference heat recovery water flow rate and optionally the name of a heat recovery flow rate modifier curve.")]
[JsonProperty("heat_recovery_water_flow_operating_mode")]
public Generator_MicroTurbine_HeatRecoveryWaterFlowOperatingMode HeatRecoveryWaterFlowOperatingMode { get; set; } = (Generator_MicroTurbine_HeatRecoveryWaterFlowOperatingMode)Enum.Parse(typeof(Generator_MicroTurbine_HeatRecoveryWaterFlowOperatingMode), "PlantControl");
        

[JsonProperty("reference_heat_recovery_water_flow_rate")]
public System.Nullable<float> ReferenceHeatRecoveryWaterFlowRate { get; set; } = null;
        

[Description(@"curve = a + b*T + c*T**2 + d*Pnet + e*Pnet + f*T*Pnet T = heat recovery inlet water temperature Pnet = net power output = electric power output - ancillary power If left blank, model assumes the heat recovery water flow rate is constant whenever the generator is operating, at the Reference HR Water Flow Rate defined in the previous field.")]
[JsonProperty("heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name")]
public string HeatRecoveryWaterFlowRateFunctionOfTemperatureAndPowerCurveName { get; set; } = "";
        

[Description(@"Bicubic curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev + g*T**3 + h*Elev**3 + i*T**2*Elev + j*T*Elev**2 Biquadratic curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev T = combustion air inlet temperature (C) Elev = elevation (m) If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
[JsonProperty("thermal_efficiency_function_of_temperature_and_elevation_curve_name")]
public string ThermalEfficiencyFunctionOfTemperatureAndElevationCurveName { get; set; } = "";
        

[Description(@"Quadratic curve = a + b*PLR + c*PLR**2 Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = ratio of Generator Load to steady state Electrical Power Output at current operating conditions If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
[JsonProperty("heat_recovery_rate_function_of_part_load_ratio_curve_name")]
public string HeatRecoveryRateFunctionOfPartLoadRatioCurveName { get; set; } = "";
        

[Description("Quadratic curve = a + b*T + c*T**2 T = inlet water temperature (C) If field is le" +
    "ft blank, model assumes this modifier equals 1 for entire simulation.")]
[JsonProperty("heat_recovery_rate_function_of_inlet_water_temperature_curve_name")]
public string HeatRecoveryRateFunctionOfInletWaterTemperatureCurveName { get; set; } = "";
        

[Description("Quadratic curve = a + b*Flow + c*Flow**2 Flow = flow rate of water through the he" +
    "at exchanger (m3/s) If field is left blank, model assumes this modifier equals 1" +
    " for entire simulation.")]
[JsonProperty("heat_recovery_rate_function_of_water_flow_rate_curve_name")]
public string HeatRecoveryRateFunctionOfWaterFlowRateCurveName { get; set; } = "";
        

[JsonProperty("minimum_heat_recovery_water_flow_rate")]
public System.Nullable<float> MinimumHeatRecoveryWaterFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_heat_recovery_water_flow_rate")]
public System.Nullable<float> MaximumHeatRecoveryWaterFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_heat_recovery_water_temperature")]
public System.Nullable<float> MaximumHeatRecoveryWaterTemperature { get; set; } = null;
        

[Description("Must be an outdoor air node.")]
[JsonProperty("combustion_air_inlet_node_name")]
public string CombustionAirInletNodeName { get; set; } = "";
        

[JsonProperty("combustion_air_outlet_node_name")]
public string CombustionAirOutletNodeName { get; set; } = "";
        

[JsonProperty("reference_exhaust_air_mass_flow_rate")]
public System.Nullable<float> ReferenceExhaustAirMassFlowRate { get; set; } = null;
        

[Description("Quadratic curve = a + b*T + c*T**2 Cubic curve = a + b*T + c*T**2 + d*T**3 T = co" +
    "mbustion air inlet temperature (C) If field is left blank, model assumes this mo" +
    "difier equals 1 for entire simulation.")]
[JsonProperty("exhaust_air_flow_rate_function_of_temperature_curve_name")]
public string ExhaustAirFlowRateFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"Quadratic curve = a + b*PLR + c*PLR**2 Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = ratio of Generator Load to steady state Electrical Power Output at current operating conditions. If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
[JsonProperty("exhaust_air_flow_rate_function_of_part_load_ratio_curve_name")]
public string ExhaustAirFlowRateFunctionOfPartLoadRatioCurveName { get; set; } = "";
        

[Description("Exhaust air outlet temperature at reference conditions.")]
[JsonProperty("nominal_exhaust_air_outlet_temperature")]
public System.Nullable<float> NominalExhaustAirOutletTemperature { get; set; } = null;
        

[Description("Quadratic curve = a + b*T + c*T**2 Cubic curve = a + b*T + c*T**2 + d*T**3 T = co" +
    "mbustion air inlet temperature (C) If field is left blank, model assumes this mo" +
    "difier equals 1 for entire simulation.")]
[JsonProperty("exhaust_air_temperature_function_of_temperature_curve_name")]
public string ExhaustAirTemperatureFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"Quadratic curve = a + b*PLR + c*PLR**2 Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = ratio of Generator Load to steady state Electrical Power Output at current operating conditions. If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
[JsonProperty("exhaust_air_temperature_function_of_part_load_ratio_curve_name")]
public string ExhaustAirTemperatureFunctionOfPartLoadRatioCurveName { get; set; } = "";
    }
    
    public enum Generator_MicroTurbine_FuelType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Coal")]
        Coal = 1,
        
        [JsonProperty("Diesel")]
        Diesel = 2,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 3,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 4,
        
        [JsonProperty("Gasoline")]
        Gasoline = 5,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 6,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 7,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 8,
        
        [JsonProperty("Propane")]
        Propane = 9,
    }
    
    public enum Generator_MicroTurbine_HeatRecoveryWaterFlowOperatingMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("InternalControl")]
        InternalControl = 1,
        
        [JsonProperty("PlantControl")]
        PlantControl = 2,
    }
    
    [Description(@"Describes an array of photovoltaic (PV) modules. A series of different PV arrays can be connected to a single electric load center (and inverter) by listing them all in an ElectricLoadCenter:Generator object. PV performance is taken from the referenced PhotovoltaicPerformance:* object. Array tilt, azimuth, and gross area are taken from the referenced building surface or shading surface. The array surface participates normally in all shading calculations.")]
    [JsonObject("Generator:Photovoltaic")]
    public class Generator_Photovoltaic : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("surface_name")]
public string SurfaceName { get; set; } = "";
        

[JsonProperty("photovoltaic_performance_object_type")]
public Generator_Photovoltaic_PhotovoltaicPerformanceObjectType PhotovoltaicPerformanceObjectType { get; set; } = (Generator_Photovoltaic_PhotovoltaicPerformanceObjectType)Enum.Parse(typeof(Generator_Photovoltaic_PhotovoltaicPerformanceObjectType), "PhotovoltaicPerformanceEquivalentOneDiode");
        

[Description("PV array modeling details")]
[JsonProperty("module_performance_name")]
public string ModulePerformanceName { get; set; } = "";
        

[JsonProperty("heat_transfer_integration_mode")]
public Generator_Photovoltaic_HeatTransferIntegrationMode HeatTransferIntegrationMode { get; set; } = (Generator_Photovoltaic_HeatTransferIntegrationMode)Enum.Parse(typeof(Generator_Photovoltaic_HeatTransferIntegrationMode), "Decoupled");
        

[Description("number of series-wired strings of PV modules that are in parallel")]
[JsonProperty("number_of_series_strings_in_parallel")]
public System.Nullable<float> NumberOfSeriesStringsInParallel { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Number of PV modules wired in series for each string.")]
[JsonProperty("number_of_modules_in_series")]
public System.Nullable<float> NumberOfModulesInSeries { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    public enum Generator_Photovoltaic_PhotovoltaicPerformanceObjectType
    {
        
        [JsonProperty("PhotovoltaicPerformance:EquivalentOne-Diode")]
        PhotovoltaicPerformanceEquivalentOneDiode = 0,
        
        [JsonProperty("PhotovoltaicPerformance:Sandia")]
        PhotovoltaicPerformanceSandia = 1,
        
        [JsonProperty("PhotovoltaicPerformance:Simple")]
        PhotovoltaicPerformanceSimple = 2,
    }
    
    public enum Generator_Photovoltaic_HeatTransferIntegrationMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Decoupled")]
        Decoupled = 1,
        
        [JsonProperty("DecoupledUllebergDynamic")]
        DecoupledUllebergDynamic = 2,
        
        [JsonProperty("IntegratedExteriorVentedCavity")]
        IntegratedExteriorVentedCavity = 3,
        
        [JsonProperty("IntegratedSurfaceOutsideFace")]
        IntegratedSurfaceOutsideFace = 4,
        
        [JsonProperty("IntegratedTranspiredCollector")]
        IntegratedTranspiredCollector = 5,
        
        [JsonProperty("PhotovoltaicThermalSolarCollector")]
        PhotovoltaicThermalSolarCollector = 6,
    }
    
    [Description(@"Describes a simple model of photovoltaics that may be useful for early phase design analysis. In this model the user has direct access to the efficiency with which surfaces convert incident solar radiation to electricity and need not specify arrays of specific modules.")]
    [JsonObject("PhotovoltaicPerformance:Simple")]
    public class PhotovoltaicPerformance_Simple : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("fraction_of_surface_area_with_active_solar_cells")]
public System.Nullable<float> FractionOfSurfaceAreaWithActiveSolarCells { get; set; } = null;
        

[JsonProperty("conversion_efficiency_input_mode")]
public PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode ConversionEfficiencyInputMode { get; set; } = (PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode)Enum.Parse(typeof(PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode), "Fixed");
        

[Description("Efficiency = (power generated [W])/(incident solar[W])")]
[JsonProperty("value_for_cell_efficiency_if_fixed")]
public System.Nullable<float> ValueForCellEfficiencyIfFixed { get; set; } = null;
        

[JsonProperty("efficiency_schedule_name")]
public string EfficiencyScheduleName { get; set; } = "";
    }
    
    public enum PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode
    {
        
        [JsonProperty("Fixed")]
        Fixed = 0,
        
        [JsonProperty("Scheduled")]
        Scheduled = 1,
    }
    
    [Description("Describes the performance characteristics of Photovoltaic (PV) modules to be mode" +
        "led using an equivalent one-diode circuit. This model is also known as the 4- or" +
        " 5-parameter TRNSYS model for photovoltaics.")]
    [JsonObject("PhotovoltaicPerformance:EquivalentOne-Diode")]
    public class PhotovoltaicPerformance_EquivalentOneDiode : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("cell_type")]
public PhotovoltaicPerformance_EquivalentOneDiode_CellType CellType { get; set; } = (PhotovoltaicPerformance_EquivalentOneDiode_CellType)Enum.Parse(typeof(PhotovoltaicPerformance_EquivalentOneDiode_CellType), "AmorphousSilicon");
        

[JsonProperty("number_of_cells_in_series")]
public System.Nullable<float> NumberOfCellsInSeries { get; set; } = (System.Nullable<float>)Single.Parse("36", CultureInfo.InvariantCulture);
        

[Description("The total power output of the array is determined by the number of modules (see a" +
    "bove). The Active Area is only used to calculate the PV Array Efficiency output " +
    "variable.")]
[JsonProperty("active_area")]
public System.Nullable<float> ActiveArea { get; set; } = (System.Nullable<float>)Single.Parse("0.89", CultureInfo.InvariantCulture);
        

[JsonProperty("transmittance_absorptance_product")]
public System.Nullable<float> TransmittanceAbsorptanceProduct { get; set; } = (System.Nullable<float>)Single.Parse("0.95", CultureInfo.InvariantCulture);
        

[JsonProperty("semiconductor_bandgap")]
public System.Nullable<float> SemiconductorBandgap { get; set; } = (System.Nullable<float>)Single.Parse("1.12", CultureInfo.InvariantCulture);
        

[JsonProperty("shunt_resistance")]
public System.Nullable<float> ShuntResistance { get; set; } = (System.Nullable<float>)Single.Parse("1000000", CultureInfo.InvariantCulture);
        

[JsonProperty("short_circuit_current")]
public System.Nullable<float> ShortCircuitCurrent { get; set; } = (System.Nullable<float>)Single.Parse("6.5", CultureInfo.InvariantCulture);
        

[JsonProperty("open_circuit_voltage")]
public System.Nullable<float> OpenCircuitVoltage { get; set; } = (System.Nullable<float>)Single.Parse("21.6", CultureInfo.InvariantCulture);
        

[JsonProperty("reference_temperature")]
public System.Nullable<float> ReferenceTemperature { get; set; } = (System.Nullable<float>)Single.Parse("25", CultureInfo.InvariantCulture);
        

[JsonProperty("reference_insolation")]
public System.Nullable<float> ReferenceInsolation { get; set; } = (System.Nullable<float>)Single.Parse("1000", CultureInfo.InvariantCulture);
        

[Description("Single module current at the maximum power point and reference conditions. Module" +
    " Current, Module Voltage, Number of Modules in Parallel and Number of Modules in" +
    " Series determine the maximum power output of the array.")]
[JsonProperty("module_current_at_maximum_power")]
public System.Nullable<float> ModuleCurrentAtMaximumPower { get; set; } = (System.Nullable<float>)Single.Parse("5.9", CultureInfo.InvariantCulture);
        

[Description("Single module voltage at the maximum power point and reference conditions. Module" +
    " Current, Module Voltage, Number of Modules in Parallel and Number of Modules in" +
    " Series determine the maximum power output of the array.")]
[JsonProperty("module_voltage_at_maximum_power")]
public System.Nullable<float> ModuleVoltageAtMaximumPower { get; set; } = (System.Nullable<float>)Single.Parse("17", CultureInfo.InvariantCulture);
        

[JsonProperty("temperature_coefficient_of_short_circuit_current")]
public System.Nullable<float> TemperatureCoefficientOfShortCircuitCurrent { get; set; } = (System.Nullable<float>)Single.Parse("0.02", CultureInfo.InvariantCulture);
        

[JsonProperty("temperature_coefficient_of_open_circuit_voltage")]
public System.Nullable<float> TemperatureCoefficientOfOpenCircuitVoltage { get; set; } = (System.Nullable<float>)Single.Parse("-0.079", CultureInfo.InvariantCulture);
        

[JsonProperty("nominal_operating_cell_temperature_test_ambient_temperature")]
public System.Nullable<float> NominalOperatingCellTemperatureTestAmbientTemperature { get; set; } = (System.Nullable<float>)Single.Parse("20", CultureInfo.InvariantCulture);
        

[JsonProperty("nominal_operating_cell_temperature_test_cell_temperature")]
public System.Nullable<float> NominalOperatingCellTemperatureTestCellTemperature { get; set; } = (System.Nullable<float>)Single.Parse("40", CultureInfo.InvariantCulture);
        

[JsonProperty("nominal_operating_cell_temperature_test_insolation")]
public System.Nullable<float> NominalOperatingCellTemperatureTestInsolation { get; set; } = (System.Nullable<float>)Single.Parse("800", CultureInfo.InvariantCulture);
        

[JsonProperty("module_heat_loss_coefficient")]
public System.Nullable<float> ModuleHeatLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[JsonProperty("total_heat_capacity")]
public System.Nullable<float> TotalHeatCapacity { get; set; } = (System.Nullable<float>)Single.Parse("50000", CultureInfo.InvariantCulture);
    }
    
    public enum PhotovoltaicPerformance_EquivalentOneDiode_CellType
    {
        
        [JsonProperty("AmorphousSilicon")]
        AmorphousSilicon = 0,
        
        [JsonProperty("CrystallineSilicon")]
        CrystallineSilicon = 1,
    }
    
    [Description("Describes performance input data needed for specific makes and models of producti" +
        "on PV panels using the empirical coefficients assembled by Sandia National Labor" +
        "atory.")]
    [JsonObject("PhotovoltaicPerformance:Sandia")]
    public class PhotovoltaicPerformance_Sandia : BHoMObject, IEnergyPlusClass
    {
        

[Description("(m2, single module)")]
[JsonProperty("active_area")]
public System.Nullable<float> ActiveArea { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("number_of_cells_in_series")]
public System.Nullable<float> NumberOfCellsInSeries { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("number_of_cells_in_parallel")]
public System.Nullable<float> NumberOfCellsInParallel { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("(Amps)")]
[JsonProperty("short_circuit_current")]
public System.Nullable<float> ShortCircuitCurrent { get; set; } = null;
        

[Description("(Volts)")]
[JsonProperty("open_circuit_voltage")]
public System.Nullable<float> OpenCircuitVoltage { get; set; } = null;
        

[Description("(Amps)")]
[JsonProperty("current_at_maximum_power_point")]
public System.Nullable<float> CurrentAtMaximumPowerPoint { get; set; } = null;
        

[Description("(Volts)")]
[JsonProperty("voltage_at_maximum_power_point")]
public System.Nullable<float> VoltageAtMaximumPowerPoint { get; set; } = null;
        

[Description("(1/degC)")]
[JsonProperty("sandia_database_parameter_aisc")]
public System.Nullable<float> SandiaDatabaseParameterAisc { get; set; } = null;
        

[Description("(1/degC)")]
[JsonProperty("sandia_database_parameter_aimp")]
public System.Nullable<float> SandiaDatabaseParameterAimp { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_c0")]
public System.Nullable<float> SandiaDatabaseParameterC0 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_c1")]
public System.Nullable<float> SandiaDatabaseParameterC1 { get; set; } = null;
        

[Description("(Volts/degC)")]
[JsonProperty("sandia_database_parameter_bvoc0")]
public System.Nullable<float> SandiaDatabaseParameterBvoc0 { get; set; } = null;
        

[Description("(Volts/degC)")]
[JsonProperty("sandia_database_parameter_mbvoc")]
public System.Nullable<float> SandiaDatabaseParameterMbvoc { get; set; } = null;
        

[Description("(Volts/degC)")]
[JsonProperty("sandia_database_parameter_bvmp0")]
public System.Nullable<float> SandiaDatabaseParameterBvmp0 { get; set; } = null;
        

[Description("(Volts/degC)")]
[JsonProperty("sandia_database_parameter_mbvmp")]
public System.Nullable<float> SandiaDatabaseParameterMbvmp { get; set; } = null;
        

[JsonProperty("diode_factor")]
public System.Nullable<float> DiodeFactor { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_c2")]
public System.Nullable<float> SandiaDatabaseParameterC2 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_c3")]
public System.Nullable<float> SandiaDatabaseParameterC3 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_a0")]
public System.Nullable<float> SandiaDatabaseParameterA0 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_a1")]
public System.Nullable<float> SandiaDatabaseParameterA1 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_a2")]
public System.Nullable<float> SandiaDatabaseParameterA2 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_a3")]
public System.Nullable<float> SandiaDatabaseParameterA3 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_a4")]
public System.Nullable<float> SandiaDatabaseParameterA4 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_b0")]
public System.Nullable<float> SandiaDatabaseParameterB0 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_b1")]
public System.Nullable<float> SandiaDatabaseParameterB1 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_b2")]
public System.Nullable<float> SandiaDatabaseParameterB2 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_b3")]
public System.Nullable<float> SandiaDatabaseParameterB3 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_b4")]
public System.Nullable<float> SandiaDatabaseParameterB4 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_b5")]
public System.Nullable<float> SandiaDatabaseParameterB5 { get; set; } = null;
        

[Description("(deg C)")]
[JsonProperty("sandia_database_parameter_delta_tc_")]
public System.Nullable<float> SandiaDatabaseParameterDeltaTc { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_fd")]
public System.Nullable<float> SandiaDatabaseParameterFd { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_a")]
public System.Nullable<float> SandiaDatabaseParameterA { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_b")]
public System.Nullable<float> SandiaDatabaseParameterB { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_c4")]
public System.Nullable<float> SandiaDatabaseParameterC4 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_c5")]
public System.Nullable<float> SandiaDatabaseParameterC5 { get; set; } = null;
        

[Description("(Amps)")]
[JsonProperty("sandia_database_parameter_ix0")]
public System.Nullable<float> SandiaDatabaseParameterIx0 { get; set; } = null;
        

[Description("(Amps)")]
[JsonProperty("sandia_database_parameter_ixx0")]
public System.Nullable<float> SandiaDatabaseParameterIxx0 { get; set; } = null;
        

[JsonProperty("sandia_database_parameter_c6")]
public System.Nullable<float> SandiaDatabaseParameterC6 { get; set; } = null;
        

[Description("(non-dimensional)")]
[JsonProperty("sandia_database_parameter_c7")]
public System.Nullable<float> SandiaDatabaseParameterC7 { get; set; } = null;
    }
    
    [Description(@"Describes a simple set of inputs for an array of photovoltaic (PV) modules as described in the PVWatts software. A series of different PVWatts arrays can be connected to a single electric load center (preferably through an ElectricLoadCenter:Inverter:PVWatts). Array tilt and azimuth can be either specified on this object or taken from a referenced building surface or shading surface. If a surface is specified, the array participates normally in all shading calculations.")]
    [JsonObject("Generator:PVWatts")]
    public class Generator_PVWatts : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("pvwatts_version")]
public Generator_PVWatts_PvwattsVersion PvwattsVersion { get; set; } = (Generator_PVWatts_PvwattsVersion)Enum.Parse(typeof(Generator_PVWatts_PvwattsVersion), "_5");
        

[Description("Nameplate rated DC system capacity in watts")]
[JsonProperty("dc_system_capacity")]
public System.Nullable<float> DcSystemCapacity { get; set; } = null;
        

[JsonProperty("module_type")]
public Generator_PVWatts_ModuleType ModuleType { get; set; } = (Generator_PVWatts_ModuleType)Enum.Parse(typeof(Generator_PVWatts_ModuleType), "Premium");
        

[JsonProperty("array_type")]
public Generator_PVWatts_ArrayType ArrayType { get; set; } = (Generator_PVWatts_ArrayType)Enum.Parse(typeof(Generator_PVWatts_ArrayType), "FixedOpenRack");
        

[JsonProperty("system_losses")]
public System.Nullable<float> SystemLosses { get; set; } = (System.Nullable<float>)Single.Parse("0.14", CultureInfo.InvariantCulture);
        

[Description("TiltAzimuth - The tilt and azimuth angles are specified in the next two fields. A" +
    "n unshaded array is assumed. Surface - The array geometry (tilt and azimuth) as " +
    "well as shading is determined from surface referenced.")]
[JsonProperty("array_geometry_type")]
public Generator_PVWatts_ArrayGeometryType ArrayGeometryType { get; set; } = (Generator_PVWatts_ArrayGeometryType)Enum.Parse(typeof(Generator_PVWatts_ArrayGeometryType), "TiltAzimuth");
        

[Description("The tilt angle is the angle from horizontal of the photovoltaic modules in the ar" +
    "ray.")]
[JsonProperty("tilt_angle")]
public System.Nullable<float> TiltAngle { get; set; } = (System.Nullable<float>)Single.Parse("20", CultureInfo.InvariantCulture);
        

[Description("For a fixed array, the azimuth angle is the angle clockwise from true north descr" +
    "ibing the direction that the array faces. For an array with one-axis tracking, t" +
    "he azimuth angle is the angle clockwise from true north of the axis of rotation." +
    "")]
[JsonProperty("azimuth_angle")]
public System.Nullable<float> AzimuthAngle { get; set; } = (System.Nullable<float>)Single.Parse("180", CultureInfo.InvariantCulture);
        

[JsonProperty("surface_name")]
public string SurfaceName { get; set; } = "";
        

[Description("Applies only to arrays with one-axis tracking and is the ratio of module surface " +
    "area to area of the ground or roof occupied by the array.")]
[JsonProperty("ground_coverage_ratio")]
public System.Nullable<float> GroundCoverageRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.4", CultureInfo.InvariantCulture);
    }
    
    public enum Generator_PVWatts_PvwattsVersion
    {
        
        [JsonProperty("5")]
        _5 = 0,
    }
    
    public enum Generator_PVWatts_ModuleType
    {
        
        [JsonProperty("Premium")]
        Premium = 0,
        
        [JsonProperty("Standard")]
        Standard = 1,
        
        [JsonProperty("ThinFilm")]
        ThinFilm = 2,
    }
    
    public enum Generator_PVWatts_ArrayType
    {
        
        [JsonProperty("FixedOpenRack")]
        FixedOpenRack = 0,
        
        [JsonProperty("FixedRoofMounted")]
        FixedRoofMounted = 1,
        
        [JsonProperty("OneAxis")]
        OneAxis = 2,
        
        [JsonProperty("OneAxisBacktracking")]
        OneAxisBacktracking = 3,
        
        [JsonProperty("TwoAxis")]
        TwoAxis = 4,
    }
    
    public enum Generator_PVWatts_ArrayGeometryType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Surface")]
        Surface = 1,
        
        [JsonProperty("TiltAzimuth")]
        TiltAzimuth = 2,
    }
    
    [Description("Electric power inverter to convert from direct current (DC) to alternating curren" +
        "t (AC) in an electric load center that contains Generator:PVWatts objects. It im" +
        "plements the PVWatts inverter performance curves.")]
    [JsonObject("ElectricLoadCenter:Inverter:PVWatts")]
    public class ElectricLoadCenter_Inverter_PVWatts : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("dc_to_ac_size_ratio")]
public System.Nullable<float> DcToAcSizeRatio { get; set; } = (System.Nullable<float>)Single.Parse("1.1", CultureInfo.InvariantCulture);
        

[JsonProperty("inverter_efficiency")]
public System.Nullable<float> InverterEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.96", CultureInfo.InvariantCulture);
    }
    
    [Description("This generator model is the FC model from IEA Annex 42")]
    [JsonObject("Generator:FuelCell")]
    public class Generator_FuelCell : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of a Generator:FuelCell:PowerModule object.")]
[JsonProperty("power_module_name")]
public string PowerModuleName { get; set; } = "";
        

[Description("Enter the name of a Generator:FuelCell:AirSupply object.")]
[JsonProperty("air_supply_name")]
public string AirSupplyName { get; set; } = "";
        

[Description("Enter the name of a Generator:FuelSupply object.")]
[JsonProperty("fuel_supply_name")]
public string FuelSupplyName { get; set; } = "";
        

[Description("Enter the name of a Generator:FuelCell:WaterSupply object.")]
[JsonProperty("water_supply_name")]
public string WaterSupplyName { get; set; } = "";
        

[Description("Enter the name of a Generator:FuelCell:AuxiliaryHeater object.")]
[JsonProperty("auxiliary_heater_name")]
public string AuxiliaryHeaterName { get; set; } = "";
        

[Description("Enter the name of a Generator:FuelCell:ExhaustGasToWaterHeatExchanger object.")]
[JsonProperty("heat_exchanger_name")]
public string HeatExchangerName { get; set; } = "";
        

[Description("Enter the name of a Generator:FuelCell:ElectricalStorage object.")]
[JsonProperty("electrical_storage_name")]
public string ElectricalStorageName { get; set; } = "";
        

[Description("Enter the name of a Generator:FuelCell:Inverter object.")]
[JsonProperty("inverter_name")]
public string InverterName { get; set; } = "";
        

[Description("Enter the name of a Generator:FuelCell:StackCooler object. optional, used for PEM" +
    "FC")]
[JsonProperty("stack_cooler_name")]
public string StackCoolerName { get; set; } = "";
    }
    
    [Description(@"Describe the core power module subsystem of a fuel cell power generator. This includes the fuel cell stack, fuel reformer, and whatever ancillary devices are included inside. If the model has multiple FC generators that are of the exact same type, then only one of these objects is needed and all the Generator:FuelCell objects can reference it.")]
    [JsonObject("Generator:FuelCell:PowerModule")]
    public class Generator_FuelCell_PowerModule : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("efficiency_curve_mode")]
public Generator_FuelCell_PowerModule_EfficiencyCurveMode EfficiencyCurveMode { get; set; } = (Generator_FuelCell_PowerModule_EfficiencyCurveMode)Enum.Parse(typeof(Generator_FuelCell_PowerModule_EfficiencyCurveMode), "Annex42");
        

[JsonProperty("efficiency_curve_name")]
public string EfficiencyCurveName { get; set; } = "";
        

[Description("This field is not used.")]
[JsonProperty("nominal_efficiency")]
public System.Nullable<float> NominalEfficiency { get; set; } = null;
        

[Description("This field is not used")]
[JsonProperty("nominal_electrical_power")]
public System.Nullable<float> NominalElectricalPower { get; set; } = null;
        

[Description("this is Nstops in SOFC model specification")]
[JsonProperty("number_of_stops_at_start_of_simulation")]
public System.Nullable<float> NumberOfStopsAtStartOfSimulation { get; set; } = null;
        

[Description("this is D in SOFC model specification")]
[JsonProperty("cycling_performance_degradation_coefficient")]
public System.Nullable<float> CyclingPerformanceDegradationCoefficient { get; set; } = null;
        

[JsonProperty("number_of_run_hours_at_beginning_of_simulation")]
public System.Nullable<float> NumberOfRunHoursAtBeginningOfSimulation { get; set; } = null;
        

[Description("this is L in SOFC model specification")]
[JsonProperty("accumulated_run_time_degradation_coefficient")]
public System.Nullable<float> AccumulatedRunTimeDegradationCoefficient { get; set; } = null;
        

[JsonProperty("run_time_degradation_initiation_time_threshold")]
public System.Nullable<float> RunTimeDegradationInitiationTimeThreshold { get; set; } = null;
        

[Description("Maximum rate of change in electrical output [power increasing]")]
[JsonProperty("power_up_transient_limit")]
public System.Nullable<float> PowerUpTransientLimit { get; set; } = null;
        

[Description("Maximum rate of change in electrical output [power decreasing] Enter positive val" +
    "ue for rate of change")]
[JsonProperty("power_down_transient_limit")]
public System.Nullable<float> PowerDownTransientLimit { get; set; } = null;
        

[Description("Time from start up to normal operation")]
[JsonProperty("start_up_time")]
public System.Nullable<float> StartUpTime { get; set; } = null;
        

[JsonProperty("start_up_fuel")]
public System.Nullable<float> StartUpFuel { get; set; } = null;
        

[JsonProperty("start_up_electricity_consumption")]
public System.Nullable<float> StartUpElectricityConsumption { get; set; } = null;
        

[JsonProperty("start_up_electricity_produced")]
public System.Nullable<float> StartUpElectricityProduced { get; set; } = null;
        

[JsonProperty("shut_down_time")]
public System.Nullable<float> ShutDownTime { get; set; } = null;
        

[JsonProperty("shut_down_fuel")]
public System.Nullable<float> ShutDownFuel { get; set; } = null;
        

[JsonProperty("shut_down_electricity_consumption")]
public System.Nullable<float> ShutDownElectricityConsumption { get; set; } = null;
        

[JsonProperty("ancillary_electricity_constant_term")]
public System.Nullable<float> AncillaryElectricityConstantTerm { get; set; } = null;
        

[JsonProperty("ancillary_electricity_linear_term")]
public System.Nullable<float> AncillaryElectricityLinearTerm { get; set; } = null;
        

[JsonProperty("skin_loss_calculation_mode")]
public Generator_FuelCell_PowerModule_SkinLossCalculationMode SkinLossCalculationMode { get; set; } = (Generator_FuelCell_PowerModule_SkinLossCalculationMode)Enum.Parse(typeof(Generator_FuelCell_PowerModule_SkinLossCalculationMode), "ConstantRate");
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("skin_loss_radiative_fraction")]
public System.Nullable<float> SkinLossRadiativeFraction { get; set; } = null;
        

[JsonProperty("constant_skin_loss_rate")]
public System.Nullable<float> ConstantSkinLossRate { get; set; } = null;
        

[JsonProperty("skin_loss_u_factor_times_area_term")]
public System.Nullable<float> SkinLossUFactorTimesAreaTerm { get; set; } = null;
        

[Description("curve is function of fuel use rate")]
[JsonProperty("skin_loss_quadratic_curve_name")]
public string SkinLossQuadraticCurveName { get; set; } = "";
        

[JsonProperty("dilution_air_flow_rate")]
public System.Nullable<float> DilutionAirFlowRate { get; set; } = null;
        

[JsonProperty("stack_heat_loss_to_dilution_air")]
public System.Nullable<float> StackHeatLossToDilutionAir { get; set; } = null;
        

[JsonProperty("dilution_inlet_air_node_name")]
public string DilutionInletAirNodeName { get; set; } = "";
        

[JsonProperty("dilution_outlet_air_node_name")]
public string DilutionOutletAirNodeName { get; set; } = "";
        

[JsonProperty("minimum_operating_point")]
public System.Nullable<float> MinimumOperatingPoint { get; set; } = null;
        

[JsonProperty("maximum_operating_point")]
public System.Nullable<float> MaximumOperatingPoint { get; set; } = null;
    }
    
    public enum Generator_FuelCell_PowerModule_EfficiencyCurveMode
    {
        
        [JsonProperty("Annex42")]
        Annex42 = 0,
        
        [JsonProperty("Normalized")]
        Normalized = 1,
    }
    
    public enum Generator_FuelCell_PowerModule_SkinLossCalculationMode
    {
        
        [JsonProperty("ConstantRate")]
        ConstantRate = 0,
        
        [JsonProperty("QuadraticFunctionOfFuelRate")]
        QuadraticFunctionOfFuelRate = 1,
        
        [JsonProperty("UAForProcessGasTemperature")]
        UAForProcessGasTemperature = 2,
    }
    
    [Description("Used to define details of the air supply subsystem for a fuel cell power generato" +
        "r.")]
    [JsonObject("Generator:FuelCell:AirSupply")]
    public class Generator_FuelCell_AirSupply : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("blower_power_curve_name")]
public string BlowerPowerCurveName { get; set; } = "";
        

[JsonProperty("blower_heat_loss_factor")]
public System.Nullable<float> BlowerHeatLossFactor { get; set; } = null;
        

[JsonProperty("air_supply_rate_calculation_mode")]
public Generator_FuelCell_AirSupply_AirSupplyRateCalculationMode AirSupplyRateCalculationMode { get; set; } = (Generator_FuelCell_AirSupply_AirSupplyRateCalculationMode)Enum.Parse(typeof(Generator_FuelCell_AirSupply_AirSupplyRateCalculationMode), "AirRatiobyStoics");
        

[Description("This is the excess air \"stoics\" the value entered is incremented by 1 in the mode" +
    "l.")]
[JsonProperty("stoichiometric_ratio")]
public System.Nullable<float> StoichiometricRatio { get; set; } = null;
        

[JsonProperty("air_rate_function_of_electric_power_curve_name")]
public string AirRateFunctionOfElectricPowerCurveName { get; set; } = "";
        

[JsonProperty("air_rate_air_temperature_coefficient")]
public System.Nullable<float> AirRateAirTemperatureCoefficient { get; set; } = null;
        

[JsonProperty("air_rate_function_of_fuel_rate_curve_name")]
public string AirRateFunctionOfFuelRateCurveName { get; set; } = "";
        

[JsonProperty("air_intake_heat_recovery_mode")]
public Generator_FuelCell_AirSupply_AirIntakeHeatRecoveryMode AirIntakeHeatRecoveryMode { get; set; } = (Generator_FuelCell_AirSupply_AirIntakeHeatRecoveryMode)Enum.Parse(typeof(Generator_FuelCell_AirSupply_AirIntakeHeatRecoveryMode), "NoRecovery");
        

[JsonProperty("air_supply_constituent_mode")]
public Generator_FuelCell_AirSupply_AirSupplyConstituentMode AirSupplyConstituentMode { get; set; } = (Generator_FuelCell_AirSupply_AirSupplyConstituentMode)Enum.Parse(typeof(Generator_FuelCell_AirSupply_AirSupplyConstituentMode), "AmbientAir");
        

[JsonProperty("number_of_userdefined_constituents")]
public System.Nullable<float> NumberOfUserdefinedConstituents { get; set; } = null;
        

[JsonProperty("constituent_fractions")]
public string ConstituentFractions { get; set; } = "";
    }
    
    public enum Generator_FuelCell_AirSupply_AirSupplyRateCalculationMode
    {
        
        [JsonProperty("AirRatiobyStoics")]
        AirRatiobyStoics = 0,
        
        [JsonProperty("QuadraticFunctionofElectricPower")]
        QuadraticFunctionofElectricPower = 1,
        
        [JsonProperty("QuadraticFunctionofFuelRate")]
        QuadraticFunctionofFuelRate = 2,
    }
    
    public enum Generator_FuelCell_AirSupply_AirIntakeHeatRecoveryMode
    {
        
        [JsonProperty("NoRecovery")]
        NoRecovery = 0,
        
        [JsonProperty("RecoverAuxiliaryBurner")]
        RecoverAuxiliaryBurner = 1,
        
        [JsonProperty("RecoverBurnerInverterStorage")]
        RecoverBurnerInverterStorage = 2,
        
        [JsonProperty("RecoverElectricalStorage")]
        RecoverElectricalStorage = 3,
        
        [JsonProperty("RecoverInverter")]
        RecoverInverter = 4,
        
        [JsonProperty("RecoverInverterandStorage")]
        RecoverInverterandStorage = 5,
    }
    
    public enum Generator_FuelCell_AirSupply_AirSupplyConstituentMode
    {
        
        [JsonProperty("AmbientAir")]
        AmbientAir = 0,
        
        [JsonProperty("UserDefinedConstituents")]
        UserDefinedConstituents = 1,
    }
    
    [Description("Used to provide details of the water supply subsystem for a fuel cell power gener" +
        "ator. This water is used for steam reforming of the fuel and is not the same as " +
        "the water used for thermal heat recovery.")]
    [JsonObject("Generator:FuelCell:WaterSupply")]
    public class Generator_FuelCell_WaterSupply : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("reformer_water_flow_rate_function_of_fuel_rate_curve_name")]
public string ReformerWaterFlowRateFunctionOfFuelRateCurveName { get; set; } = "";
        

[JsonProperty("reformer_water_pump_power_function_of_fuel_rate_curve_name")]
public string ReformerWaterPumpPowerFunctionOfFuelRateCurveName { get; set; } = "";
        

[JsonProperty("pump_heat_loss_factor")]
public System.Nullable<float> PumpHeatLossFactor { get; set; } = null;
        

[JsonProperty("water_temperature_modeling_mode")]
public Generator_FuelCell_WaterSupply_WaterTemperatureModelingMode WaterTemperatureModelingMode { get; set; } = (Generator_FuelCell_WaterSupply_WaterTemperatureModelingMode)Enum.Parse(typeof(Generator_FuelCell_WaterSupply_WaterTemperatureModelingMode), "MainsWaterTemperature");
        

[JsonProperty("water_temperature_reference_node_name")]
public string WaterTemperatureReferenceNodeName { get; set; } = "";
        

[JsonProperty("water_temperature_schedule_name")]
public string WaterTemperatureScheduleName { get; set; } = "";
    }
    
    public enum Generator_FuelCell_WaterSupply_WaterTemperatureModelingMode
    {
        
        [JsonProperty("MainsWaterTemperature")]
        MainsWaterTemperature = 0,
        
        [JsonProperty("TemperatureFromAirNode")]
        TemperatureFromAirNode = 1,
        
        [JsonProperty("TemperatureFromSchedule")]
        TemperatureFromSchedule = 2,
        
        [JsonProperty("TemperatureFromWaterNode")]
        TemperatureFromWaterNode = 3,
    }
    
    [Description(@"Intended for modeling an auxiliary heater for a fuel cell power generator, however this portion of the model is not yet available. The program still requires one of these objects be included even though the data are not yet used (so that internal data structures can be allocated).")]
    [JsonObject("Generator:FuelCell:AuxiliaryHeater")]
    public class Generator_FuelCell_AuxiliaryHeater : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("excess_air_ratio")]
public System.Nullable<float> ExcessAirRatio { get; set; } = null;
        

[JsonProperty("ancillary_power_constant_term")]
public System.Nullable<float> AncillaryPowerConstantTerm { get; set; } = null;
        

[JsonProperty("ancillary_power_linear_term")]
public System.Nullable<float> AncillaryPowerLinearTerm { get; set; } = null;
        

[JsonProperty("skin_loss_u_factor_times_area_value")]
public System.Nullable<float> SkinLossUFactorTimesAreaValue { get; set; } = null;
        

[JsonProperty("skin_loss_destination")]
public Generator_FuelCell_AuxiliaryHeater_SkinLossDestination SkinLossDestination { get; set; } = (Generator_FuelCell_AuxiliaryHeater_SkinLossDestination)Enum.Parse(typeof(Generator_FuelCell_AuxiliaryHeater_SkinLossDestination), "AirInletForFuelCell");
        

[JsonProperty("zone_name_to_receive_skin_losses")]
public string ZoneNameToReceiveSkinLosses { get; set; } = "";
        

[JsonProperty("heating_capacity_units")]
public Generator_FuelCell_AuxiliaryHeater_HeatingCapacityUnits HeatingCapacityUnits { get; set; } = (Generator_FuelCell_AuxiliaryHeater_HeatingCapacityUnits)Enum.Parse(typeof(Generator_FuelCell_AuxiliaryHeater_HeatingCapacityUnits), "Watts");
        

[JsonProperty("maximum_heating_capacity_in_watts")]
public System.Nullable<float> MaximumHeatingCapacityInWatts { get; set; } = null;
        

[JsonProperty("minimum_heating_capacity_in_watts")]
public System.Nullable<float> MinimumHeatingCapacityInWatts { get; set; } = null;
        

[JsonProperty("maximum_heating_capacity_in_kmol_per_second")]
public System.Nullable<float> MaximumHeatingCapacityInKmolPerSecond { get; set; } = null;
        

[JsonProperty("minimum_heating_capacity_in_kmol_per_second")]
public System.Nullable<float> MinimumHeatingCapacityInKmolPerSecond { get; set; } = null;
    }
    
    public enum Generator_FuelCell_AuxiliaryHeater_SkinLossDestination
    {
        
        [JsonProperty("AirInletForFuelCell")]
        AirInletForFuelCell = 0,
        
        [JsonProperty("SurroundingZone")]
        SurroundingZone = 1,
    }
    
    public enum Generator_FuelCell_AuxiliaryHeater_HeatingCapacityUnits
    {
        
        [JsonProperty("Watts")]
        Watts = 0,
        
        [JsonProperty("kmol/s")]
        Kmols = 1,
    }
    
    [Description("Describes the exhaust gas heat exchanger subsystem of a fuel cell power generator" +
        " used to recovery thermal energy")]
    [JsonObject("Generator:FuelCell:ExhaustGasToWaterHeatExchanger")]
    public class Generator_FuelCell_ExhaustGasToWaterHeatExchanger : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("heat_recovery_water_inlet_node_name")]
public string HeatRecoveryWaterInletNodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_water_outlet_node_name")]
public string HeatRecoveryWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_water_maximum_flow_rate")]
public System.Nullable<float> HeatRecoveryWaterMaximumFlowRate { get; set; } = null;
        

[JsonProperty("exhaust_outlet_air_node_name")]
public string ExhaustOutletAirNodeName { get; set; } = "";
        

[JsonProperty("heat_exchanger_calculation_method")]
public Generator_FuelCell_ExhaustGasToWaterHeatExchanger_HeatExchangerCalculationMethod HeatExchangerCalculationMethod { get; set; } = (Generator_FuelCell_ExhaustGasToWaterHeatExchanger_HeatExchangerCalculationMethod)Enum.Parse(typeof(Generator_FuelCell_ExhaustGasToWaterHeatExchanger_HeatExchangerCalculationMethod), "Condensing");
        

[JsonProperty("method_1_heat_exchanger_effectiveness")]
public System.Nullable<float> Method1HeatExchangerEffectiveness { get; set; } = null;
        

[JsonProperty("method_2_parameter_hxs0")]
public System.Nullable<float> Method2ParameterHxs0 { get; set; } = null;
        

[JsonProperty("method_2_parameter_hxs1")]
public System.Nullable<float> Method2ParameterHxs1 { get; set; } = null;
        

[JsonProperty("method_2_parameter_hxs2")]
public System.Nullable<float> Method2ParameterHxs2 { get; set; } = null;
        

[JsonProperty("method_2_parameter_hxs3")]
public System.Nullable<float> Method2ParameterHxs3 { get; set; } = null;
        

[JsonProperty("method_2_parameter_hxs4")]
public System.Nullable<float> Method2ParameterHxs4 { get; set; } = null;
        

[JsonProperty("method_3_h0gas_coefficient")]
public System.Nullable<float> Method3H0gasCoefficient { get; set; } = null;
        

[JsonProperty("method_3_ndotgasref_coefficient")]
public System.Nullable<float> Method3NdotgasrefCoefficient { get; set; } = null;
        

[JsonProperty("method_3_n_coefficient")]
public System.Nullable<float> Method3NCoefficient { get; set; } = null;
        

[JsonProperty("method_3_gas_area")]
public System.Nullable<float> Method3GasArea { get; set; } = null;
        

[JsonProperty("method_3_h0_water_coefficient")]
public System.Nullable<float> Method3H0WaterCoefficient { get; set; } = null;
        

[JsonProperty("method_3_n_dot_water_ref_coefficient")]
public System.Nullable<float> Method3NDotWaterRefCoefficient { get; set; } = null;
        

[JsonProperty("method_3_m_coefficient")]
public System.Nullable<float> Method3MCoefficient { get; set; } = null;
        

[JsonProperty("method_3_water_area")]
public System.Nullable<float> Method3WaterArea { get; set; } = null;
        

[JsonProperty("method_3_f_adjustment_factor")]
public System.Nullable<float> Method3FAdjustmentFactor { get; set; } = null;
        

[JsonProperty("method_4_hxl1_coefficient")]
public System.Nullable<float> Method4Hxl1Coefficient { get; set; } = null;
        

[JsonProperty("method_4_hxl2_coefficient")]
public System.Nullable<float> Method4Hxl2Coefficient { get; set; } = null;
        

[JsonProperty("method_4_condensation_threshold")]
public System.Nullable<float> Method4CondensationThreshold { get; set; } = null;
    }
    
    public enum Generator_FuelCell_ExhaustGasToWaterHeatExchanger_HeatExchangerCalculationMethod
    {
        
        [JsonProperty("Condensing")]
        Condensing = 0,
        
        [JsonProperty("EmpiricalUAeff")]
        EmpiricalUAeff = 1,
        
        [JsonProperty("FixedEffectiveness")]
        FixedEffectiveness = 2,
        
        [JsonProperty("FundementalUAeff")]
        FundementalUAeff = 3,
    }
    
    [Description("Used to describe the electrical storage subsystem for a fuel cell power generator" +
        ". The electrical storage model is a very simple \"constrained bucket\" model. Note" +
        " that this electrical storage is embedded within the FC device.")]
    [JsonObject("Generator:FuelCell:ElectricalStorage")]
    public class Generator_FuelCell_ElectricalStorage : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("choice_of_model")]
public Generator_FuelCell_ElectricalStorage_ChoiceOfModel ChoiceOfModel { get; set; } = (Generator_FuelCell_ElectricalStorage_ChoiceOfModel)Enum.Parse(typeof(Generator_FuelCell_ElectricalStorage_ChoiceOfModel), "SimpleEfficiencyWithConstraints");
        

[JsonProperty("nominal_charging_energetic_efficiency")]
public System.Nullable<float> NominalChargingEnergeticEfficiency { get; set; } = null;
        

[JsonProperty("nominal_discharging_energetic_efficiency")]
public System.Nullable<float> NominalDischargingEnergeticEfficiency { get; set; } = null;
        

[JsonProperty("simple_maximum_capacity")]
public System.Nullable<float> SimpleMaximumCapacity { get; set; } = null;
        

[JsonProperty("simple_maximum_power_draw")]
public System.Nullable<float> SimpleMaximumPowerDraw { get; set; } = null;
        

[JsonProperty("simple_maximum_power_store")]
public System.Nullable<float> SimpleMaximumPowerStore { get; set; } = null;
        

[JsonProperty("initial_charge_state")]
public System.Nullable<float> InitialChargeState { get; set; } = null;
    }
    
    public enum Generator_FuelCell_ElectricalStorage_ChoiceOfModel
    {
        
        [JsonProperty("SimpleEfficiencyWithConstraints")]
        SimpleEfficiencyWithConstraints = 0,
    }
    
    [Description("Used to describe the power condition unit subsystem of a fuel cell power generato" +
        "r. This object models an inverter system contained within a fuel cell system tha" +
        "t converts from direct current (DC) to alternating current (AC).")]
    [JsonObject("Generator:FuelCell:Inverter")]
    public class Generator_FuelCell_Inverter : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("inverter_efficiency_calculation_mode")]
public Generator_FuelCell_Inverter_InverterEfficiencyCalculationMode InverterEfficiencyCalculationMode { get; set; } = (Generator_FuelCell_Inverter_InverterEfficiencyCalculationMode)Enum.Parse(typeof(Generator_FuelCell_Inverter_InverterEfficiencyCalculationMode), "Constant");
        

[JsonProperty("inverter_efficiency")]
public System.Nullable<float> InverterEfficiency { get; set; } = null;
        

[JsonProperty("efficiency_function_of_dc_power_curve_name")]
public string EfficiencyFunctionOfDcPowerCurveName { get; set; } = "";
    }
    
    public enum Generator_FuelCell_Inverter_InverterEfficiencyCalculationMode
    {
        
        [JsonProperty("Constant")]
        Constant = 0,
        
        [JsonProperty("Quadratic")]
        Quadratic = 1,
    }
    
    [Description("This object is optional and is used to define details needed to model the stack c" +
        "ooler on PEMFC.")]
    [JsonObject("Generator:FuelCell:StackCooler")]
    public class Generator_FuelCell_StackCooler : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("heat_recovery_water_inlet_node_name")]
public string HeatRecoveryWaterInletNodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_water_outlet_node_name")]
public string HeatRecoveryWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("nominal_stack_temperature")]
public System.Nullable<float> NominalStackTemperature { get; set; } = null;
        

[JsonProperty("actual_stack_temperature")]
public System.Nullable<float> ActualStackTemperature { get; set; } = null;
        

[JsonProperty("coefficient_r0")]
public System.Nullable<float> CoefficientR0 { get; set; } = null;
        

[JsonProperty("coefficient_r1")]
public System.Nullable<float> CoefficientR1 { get; set; } = null;
        

[JsonProperty("coefficient_r2")]
public System.Nullable<float> CoefficientR2 { get; set; } = null;
        

[JsonProperty("coefficient_r3")]
public System.Nullable<float> CoefficientR3 { get; set; } = null;
        

[JsonProperty("stack_coolant_flow_rate")]
public System.Nullable<float> StackCoolantFlowRate { get; set; } = null;
        

[JsonProperty("stack_cooler_u_factor_times_area_value")]
public System.Nullable<float> StackCoolerUFactorTimesAreaValue { get; set; } = null;
        

[JsonProperty("fs_cogen_adjustment_factor")]
public System.Nullable<float> FsCogenAdjustmentFactor { get; set; } = null;
        

[JsonProperty("stack_cogeneration_exchanger_area")]
public System.Nullable<float> StackCogenerationExchangerArea { get; set; } = null;
        

[JsonProperty("stack_cogeneration_exchanger_nominal_flow_rate")]
public System.Nullable<float> StackCogenerationExchangerNominalFlowRate { get; set; } = null;
        

[JsonProperty("stack_cogeneration_exchanger_nominal_heat_transfer_coefficient")]
public System.Nullable<float> StackCogenerationExchangerNominalHeatTransferCoefficient { get; set; } = null;
        

[JsonProperty("stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent")]
public System.Nullable<float> StackCogenerationExchangerNominalHeatTransferCoefficientExponent { get; set; } = null;
        

[JsonProperty("stack_cooler_pump_power")]
public System.Nullable<float> StackCoolerPumpPower { get; set; } = null;
        

[JsonProperty("stack_cooler_pump_heat_loss_fraction")]
public System.Nullable<float> StackCoolerPumpHeatLossFraction { get; set; } = null;
        

[JsonProperty("stack_air_cooler_fan_coefficient_f0")]
public System.Nullable<float> StackAirCoolerFanCoefficientF0 { get; set; } = null;
        

[JsonProperty("stack_air_cooler_fan_coefficient_f1")]
public System.Nullable<float> StackAirCoolerFanCoefficientF1 { get; set; } = null;
        

[JsonProperty("stack_air_cooler_fan_coefficient_f2")]
public System.Nullable<float> StackAirCoolerFanCoefficientF2 { get; set; } = null;
    }
    
    [Description(@"Small-scale combined heat and power (micro CHP) electric generator using the model developed by IEA/ECBCS Annex 42 see www.cogen-sim.net. The model was developed for both internal combustion and Stirling cycle engines, but might be used for other types of residential CHP devices.")]
    [JsonObject("Generator:MicroCHP")]
    public class Generator_MicroCHP : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of a Generator:MicroCHP:NonNormalizedParameters object.")]
[JsonProperty("performance_parameters_name")]
public string PerformanceParametersName { get; set; } = "";
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("cooling_water_inlet_node_name")]
public string CoolingWaterInletNodeName { get; set; } = "";
        

[JsonProperty("cooling_water_outlet_node_name")]
public string CoolingWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Enter the name of a Generator:FuelSupply object.")]
[JsonProperty("generator_fuel_supply_name")]
public string GeneratorFuelSupplyName { get; set; } = "";
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
    }
    
    [Description("This object is referenced by a Generator:MicroCHP object and provides the non-nor" +
        "malized parameters for the MicroCHP generator model.")]
    [JsonObject("Generator:MicroCHP:NonNormalizedParameters")]
    public class Generator_MicroCHP_NonNormalizedParameters : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("maximum_electric_power")]
public System.Nullable<float> MaximumElectricPower { get; set; } = null;
        

[JsonProperty("minimum_electric_power")]
public System.Nullable<float> MinimumElectricPower { get; set; } = null;
        

[JsonProperty("minimum_cooling_water_flow_rate")]
public System.Nullable<float> MinimumCoolingWaterFlowRate { get; set; } = null;
        

[JsonProperty("maximum_cooling_water_temperature")]
public System.Nullable<float> MaximumCoolingWaterTemperature { get; set; } = null;
        

[Description("TriQuadratic")]
[JsonProperty("electrical_efficiency_curve_name")]
public string ElectricalEfficiencyCurveName { get; set; } = "";
        

[Description("TriQuadratic")]
[JsonProperty("thermal_efficiency_curve_name")]
public string ThermalEfficiencyCurveName { get; set; } = "";
        

[JsonProperty("cooling_water_flow_rate_mode")]
public Generator_MicroCHP_NonNormalizedParameters_CoolingWaterFlowRateMode CoolingWaterFlowRateMode { get; set; } = (Generator_MicroCHP_NonNormalizedParameters_CoolingWaterFlowRateMode)Enum.Parse(typeof(Generator_MicroCHP_NonNormalizedParameters_CoolingWaterFlowRateMode), "InternalControl");
        

[JsonProperty("cooling_water_flow_rate_curve_name")]
public string CoolingWaterFlowRateCurveName { get; set; } = "";
        

[JsonProperty("air_flow_rate_curve_name")]
public string AirFlowRateCurveName { get; set; } = "";
        

[JsonProperty("maximum_net_electrical_power_rate_of_change")]
public System.Nullable<float> MaximumNetElectricalPowerRateOfChange { get; set; } = null;
        

[JsonProperty("maximum_fuel_flow_rate_of_change")]
public System.Nullable<float> MaximumFuelFlowRateOfChange { get; set; } = null;
        

[JsonProperty("heat_exchanger_u_factor_times_area_value")]
public System.Nullable<float> HeatExchangerUFactorTimesAreaValue { get; set; } = null;
        

[JsonProperty("skin_loss_u_factor_times_area_value")]
public System.Nullable<float> SkinLossUFactorTimesAreaValue { get; set; } = null;
        

[JsonProperty("skin_loss_radiative_fraction")]
public System.Nullable<float> SkinLossRadiativeFraction { get; set; } = null;
        

[JsonProperty("aggregated_thermal_mass_of_energy_conversion_portion_of_generator")]
public System.Nullable<float> AggregatedThermalMassOfEnergyConversionPortionOfGenerator { get; set; } = null;
        

[JsonProperty("aggregated_thermal_mass_of_heat_recovery_portion_of_generator")]
public System.Nullable<float> AggregatedThermalMassOfHeatRecoveryPortionOfGenerator { get; set; } = null;
        

[JsonProperty("standby_power")]
public System.Nullable<float> StandbyPower { get; set; } = null;
        

[Description("Stirling engines use Nominal Engine Temperature Internal combustion engines use T" +
    "ime Delay")]
[JsonProperty("warm_up_mode")]
public Generator_MicroCHP_NonNormalizedParameters_WarmUpMode WarmUpMode { get; set; } = (Generator_MicroCHP_NonNormalizedParameters_WarmUpMode)Enum.Parse(typeof(Generator_MicroCHP_NonNormalizedParameters_WarmUpMode), "NominalEngineTemperature");
        

[JsonProperty("warm_up_fuel_flow_rate_coefficient")]
public System.Nullable<float> WarmUpFuelFlowRateCoefficient { get; set; } = null;
        

[JsonProperty("nominal_engine_operating_temperature")]
public System.Nullable<float> NominalEngineOperatingTemperature { get; set; } = null;
        

[JsonProperty("warm_up_power_coefficient")]
public System.Nullable<float> WarmUpPowerCoefficient { get; set; } = null;
        

[JsonProperty("warm_up_fuel_flow_rate_limit_ratio")]
public System.Nullable<float> WarmUpFuelFlowRateLimitRatio { get; set; } = null;
        

[JsonProperty("warm_up_delay_time")]
public System.Nullable<float> WarmUpDelayTime { get; set; } = null;
        

[JsonProperty("cool_down_power")]
public System.Nullable<float> CoolDownPower { get; set; } = null;
        

[JsonProperty("cool_down_delay_time")]
public System.Nullable<float> CoolDownDelayTime { get; set; } = null;
        

[JsonProperty("restart_mode")]
public Generator_MicroCHP_NonNormalizedParameters_RestartMode RestartMode { get; set; } = (Generator_MicroCHP_NonNormalizedParameters_RestartMode)Enum.Parse(typeof(Generator_MicroCHP_NonNormalizedParameters_RestartMode), "MandatoryCoolDown");
    }
    
    public enum Generator_MicroCHP_NonNormalizedParameters_CoolingWaterFlowRateMode
    {
        
        [JsonProperty("InternalControl")]
        InternalControl = 0,
        
        [JsonProperty("PlantControl")]
        PlantControl = 1,
    }
    
    public enum Generator_MicroCHP_NonNormalizedParameters_WarmUpMode
    {
        
        [JsonProperty("NominalEngineTemperature")]
        NominalEngineTemperature = 0,
        
        [JsonProperty("TimeDelay")]
        TimeDelay = 1,
    }
    
    public enum Generator_MicroCHP_NonNormalizedParameters_RestartMode
    {
        
        [JsonProperty("MandatoryCoolDown")]
        MandatoryCoolDown = 0,
        
        [JsonProperty("OptionalCoolDown")]
        OptionalCoolDown = 1,
    }
    
    [Description("Used only with Generator:FuelCell and Generator:MicroCHP")]
    [JsonObject("Generator:FuelSupply")]
    public class Generator_FuelSupply : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("fuel_temperature_modeling_mode")]
public Generator_FuelSupply_FuelTemperatureModelingMode FuelTemperatureModelingMode { get; set; } = (Generator_FuelSupply_FuelTemperatureModelingMode)Enum.Parse(typeof(Generator_FuelSupply_FuelTemperatureModelingMode), "Scheduled");
        

[JsonProperty("fuel_temperature_reference_node_name")]
public string FuelTemperatureReferenceNodeName { get; set; } = "";
        

[JsonProperty("fuel_temperature_schedule_name")]
public string FuelTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("compressor_power_multiplier_function_of_fuel_rate_curve_name")]
public string CompressorPowerMultiplierFunctionOfFuelRateCurveName { get; set; } = "";
        

[JsonProperty("compressor_heat_loss_factor")]
public System.Nullable<float> CompressorHeatLossFactor { get; set; } = null;
        

[JsonProperty("fuel_type")]
public Generator_FuelSupply_FuelType FuelType { get; set; } = (Generator_FuelSupply_FuelType)Enum.Parse(typeof(Generator_FuelSupply_FuelType), "GaseousConstituents");
        

[JsonProperty("liquid_generic_fuel_lower_heating_value")]
public System.Nullable<float> LiquidGenericFuelLowerHeatingValue { get; set; } = null;
        

[JsonProperty("liquid_generic_fuel_higher_heating_value")]
public System.Nullable<float> LiquidGenericFuelHigherHeatingValue { get; set; } = null;
        

[JsonProperty("liquid_generic_fuel_molecular_weight")]
public System.Nullable<float> LiquidGenericFuelMolecularWeight { get; set; } = null;
        

[JsonProperty("liquid_generic_fuel_co2_emission_factor")]
public System.Nullable<float> LiquidGenericFuelCo2EmissionFactor { get; set; } = null;
        

[JsonProperty("number_of_constituents_in_gaseous_constituent_fuel_supply")]
public System.Nullable<float> NumberOfConstituentsInGaseousConstituentFuelSupply { get; set; } = null;
        

[JsonProperty("constituent_1_name")]
public Generator_FuelSupply_Constituent1Name Constituent1Name { get; set; } = (Generator_FuelSupply_Constituent1Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent1Name), "Argon");
        

[JsonProperty("constituent_1_molar_fraction")]
public System.Nullable<float> Constituent1MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_2_name")]
public Generator_FuelSupply_Constituent2Name Constituent2Name { get; set; } = (Generator_FuelSupply_Constituent2Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent2Name), "Argon");
        

[JsonProperty("constituent_2_molar_fraction")]
public System.Nullable<float> Constituent2MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_3_name")]
public Generator_FuelSupply_Constituent3Name Constituent3Name { get; set; } = (Generator_FuelSupply_Constituent3Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent3Name), "Argon");
        

[JsonProperty("constituent_3_molar_fraction")]
public System.Nullable<float> Constituent3MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_4_name")]
public Generator_FuelSupply_Constituent4Name Constituent4Name { get; set; } = (Generator_FuelSupply_Constituent4Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent4Name), "Argon");
        

[JsonProperty("constituent_4_molar_fraction")]
public System.Nullable<float> Constituent4MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_5_name")]
public Generator_FuelSupply_Constituent5Name Constituent5Name { get; set; } = (Generator_FuelSupply_Constituent5Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent5Name), "Argon");
        

[JsonProperty("constituent_5_molar_fraction")]
public System.Nullable<float> Constituent5MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_6_name")]
public Generator_FuelSupply_Constituent6Name Constituent6Name { get; set; } = (Generator_FuelSupply_Constituent6Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent6Name), "Argon");
        

[JsonProperty("constituent_6_molar_fraction")]
public System.Nullable<float> Constituent6MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_7_name")]
public Generator_FuelSupply_Constituent7Name Constituent7Name { get; set; } = (Generator_FuelSupply_Constituent7Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent7Name), "Butane");
        

[JsonProperty("constituent_7_molar_fraction")]
public System.Nullable<float> Constituent7MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_8_name")]
public Generator_FuelSupply_Constituent8Name Constituent8Name { get; set; } = (Generator_FuelSupply_Constituent8Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent8Name), "Argon");
        

[JsonProperty("constituent_8_molar_fraction")]
public System.Nullable<float> Constituent8MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_9_name")]
public Generator_FuelSupply_Constituent9Name Constituent9Name { get; set; } = (Generator_FuelSupply_Constituent9Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent9Name), "Argon");
        

[JsonProperty("constituent_9_molar_fraction")]
public System.Nullable<float> Constituent9MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_10_name")]
public Generator_FuelSupply_Constituent10Name Constituent10Name { get; set; } = (Generator_FuelSupply_Constituent10Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent10Name), "Argon");
        

[JsonProperty("constituent_10_molar_fraction")]
public System.Nullable<float> Constituent10MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_11_name")]
public Generator_FuelSupply_Constituent11Name Constituent11Name { get; set; } = (Generator_FuelSupply_Constituent11Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent11Name), "Argon");
        

[JsonProperty("constituent_11_molar_fraction")]
public System.Nullable<float> Constituent11MolarFraction { get; set; } = null;
        

[JsonProperty("constituent_12_name")]
public Generator_FuelSupply_Constituent12Name Constituent12Name { get; set; } = (Generator_FuelSupply_Constituent12Name)Enum.Parse(typeof(Generator_FuelSupply_Constituent12Name), "Argon");
        

[JsonProperty("constituent_12_molar_fraction")]
public System.Nullable<float> Constituent12MolarFraction { get; set; } = null;
    }
    
    public enum Generator_FuelSupply_FuelTemperatureModelingMode
    {
        
        [JsonProperty("Scheduled")]
        Scheduled = 0,
        
        [JsonProperty("TemperatureFromAirNode")]
        TemperatureFromAirNode = 1,
    }
    
    public enum Generator_FuelSupply_FuelType
    {
        
        [JsonProperty("GaseousConstituents")]
        GaseousConstituents = 0,
        
        [JsonProperty("LiquidGeneric")]
        LiquidGeneric = 1,
    }
    
    public enum Generator_FuelSupply_Constituent1Name
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    public enum Generator_FuelSupply_Constituent2Name
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    public enum Generator_FuelSupply_Constituent3Name
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    public enum Generator_FuelSupply_Constituent4Name
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    public enum Generator_FuelSupply_Constituent5Name
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    public enum Generator_FuelSupply_Constituent6Name
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    public enum Generator_FuelSupply_Constituent7Name
    {
        
        [JsonProperty("Butane")]
        Butane = 0,
        
        [JsonProperty("Ethane")]
        Ethane = 1,
        
        [JsonProperty("Ethanol")]
        Ethanol = 2,
        
        [JsonProperty("Hexane")]
        Hexane = 3,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 4,
        
        [JsonProperty("Methane")]
        Methane = 5,
        
        [JsonProperty("Methanol")]
        Methanol = 6,
        
        [JsonProperty("Pentane")]
        Pentane = 7,
        
        [JsonProperty("Propane")]
        Propane = 8,
    }
    
    public enum Generator_FuelSupply_Constituent8Name
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    public enum Generator_FuelSupply_Constituent9Name
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    public enum Generator_FuelSupply_Constituent10Name
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    public enum Generator_FuelSupply_Constituent11Name
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    public enum Generator_FuelSupply_Constituent12Name
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    [Description("Wind turbine generator.")]
    [JsonObject("Generator:WindTurbine")]
    public class Generator_WindTurbine : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("allowed values are: Horizontal Axis Wind Turbine or Vertical Axis Wind Turbine")]
[JsonProperty("rotor_type")]
public Generator_WindTurbine_RotorType RotorType { get; set; } = (Generator_WindTurbine_RotorType)Enum.Parse(typeof(Generator_WindTurbine_RotorType), "HorizontalAxisWindTurbine");
        

[Description("Constant power output is obtained in the last three control types when the wind s" +
    "peed exceeds the rated wind speed. allowed values are: Fixed Speed Fixed Pitch, " +
    "Fixed Speed Variable Pitch, Variable Speed Fixed Pitch or Variable Speed Variabl" +
    "e Pitch")]
[JsonProperty("power_control")]
public Generator_WindTurbine_PowerControl PowerControl { get; set; } = (Generator_WindTurbine_PowerControl)Enum.Parse(typeof(Generator_WindTurbine_PowerControl), "VariableSpeedVariablePitch");
        

[JsonProperty("rated_rotor_speed")]
public System.Nullable<float> RatedRotorSpeed { get; set; } = null;
        

[Description("This field is the diameter of the perpendicular circle of the Vertical Axis Wind " +
    "Turbine system from the upright pole on the ground.")]
[JsonProperty("rotor_diameter")]
public System.Nullable<float> RotorDiameter { get; set; } = null;
        

[Description("This field is the height of the hub for the Horizontal Axis Wind Turbines and of " +
    "the pole for the Vertical Axis Wind Turbines.")]
[JsonProperty("overall_height")]
public System.Nullable<float> OverallHeight { get; set; } = null;
        

[JsonProperty("number_of_blades")]
public System.Nullable<float> NumberOfBlades { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description("This field is the nominal power at the rated wind speed. Users should input maxim" +
    "um power in case of Fixed Speed Fixed Pitch control type.")]
[JsonProperty("rated_power")]
public System.Nullable<float> RatedPower { get; set; } = null;
        

[JsonProperty("rated_wind_speed")]
public System.Nullable<float> RatedWindSpeed { get; set; } = null;
        

[JsonProperty("cut_in_wind_speed")]
public System.Nullable<float> CutInWindSpeed { get; set; } = null;
        

[JsonProperty("cut_out_wind_speed")]
public System.Nullable<float> CutOutWindSpeed { get; set; } = null;
        

[JsonProperty("fraction_system_efficiency")]
public System.Nullable<float> FractionSystemEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.835", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_tip_speed_ratio")]
public System.Nullable<float> MaximumTipSpeedRatio { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[Description("This field should be input if the rotor type is Horizontal Axis Wind Turbine")]
[JsonProperty("maximum_power_coefficient")]
public System.Nullable<float> MaximumPowerCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0.25", CultureInfo.InvariantCulture);
        

[JsonProperty("annual_local_average_wind_speed")]
public System.Nullable<float> AnnualLocalAverageWindSpeed { get; set; } = null;
        

[JsonProperty("height_for_local_average_wind_speed")]
public System.Nullable<float> HeightForLocalAverageWindSpeed { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[JsonProperty("blade_chord_area")]
public System.Nullable<float> BladeChordArea { get; set; } = null;
        

[Description("This field is only for Vertical Axis Wind Turbine.. The user must input this fiel" +
    "d if the rotor type is Vertical Axis Wind Turbine.")]
[JsonProperty("blade_drag_coefficient")]
public System.Nullable<float> BladeDragCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("This field is only for Vertical Axis Wind Turbine.. The user must input this fiel" +
    "d if the rotor type is Vertical Axis Wind Turbine.")]
[JsonProperty("blade_lift_coefficient")]
public System.Nullable<float> BladeLiftCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0.05", CultureInfo.InvariantCulture);
        

[Description(@"This field is only available for Horizontal Axis Wind Turbine. The user should input all six parameters so that the analytic approximation is assumed. The simple approximation will be assumed, if any field C1 through C6 is not input. Leave this field blank, if the manufacturer's data is unavailable so that the simple approximation will be assumed.")]
[JsonProperty("power_coefficient_c1")]
public System.Nullable<float> PowerCoefficientC1 { get; set; } = (System.Nullable<float>)Single.Parse("0.5176", CultureInfo.InvariantCulture);
        

[JsonProperty("power_coefficient_c2")]
public System.Nullable<float> PowerCoefficientC2 { get; set; } = (System.Nullable<float>)Single.Parse("116", CultureInfo.InvariantCulture);
        

[JsonProperty("power_coefficient_c3")]
public System.Nullable<float> PowerCoefficientC3 { get; set; } = (System.Nullable<float>)Single.Parse("0.4", CultureInfo.InvariantCulture);
        

[JsonProperty("power_coefficient_c4")]
public System.Nullable<float> PowerCoefficientC4 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("power_coefficient_c5")]
public System.Nullable<float> PowerCoefficientC5 { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[JsonProperty("power_coefficient_c6")]
public System.Nullable<float> PowerCoefficientC6 { get; set; } = (System.Nullable<float>)Single.Parse("21", CultureInfo.InvariantCulture);
    }
    
    public enum Generator_WindTurbine_RotorType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("HorizontalAxisWindTurbine")]
        HorizontalAxisWindTurbine = 1,
        
        [JsonProperty("VerticalAxisWindTurbine")]
        VerticalAxisWindTurbine = 2,
    }
    
    public enum Generator_WindTurbine_PowerControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FixedSpeedFixedPitch")]
        FixedSpeedFixedPitch = 1,
        
        [JsonProperty("FixedSpeedVariablePitch")]
        FixedSpeedVariablePitch = 2,
        
        [JsonProperty("VariableSpeedFixedPitch")]
        VariableSpeedFixedPitch = 3,
        
        [JsonProperty("VariableSpeedVariablePitch")]
        VariableSpeedVariablePitch = 4,
    }
    
    [Description("List of electric power generators to include in the simulation including the name" +
        " and type of each generators along with availability schedule, rated power outpu" +
        "t, and thermal-to-electrical power ratio.")]
    [JsonObject("ElectricLoadCenter:Generators")]
    public class ElectricLoadCenter_Generators : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("generator_outputs")]
public string GeneratorOutputs { get; set; } = "";
    }
    
    [Description("Electric power inverter to convert from direct current (DC) to alternating curren" +
        "t (AC) in an electric load center that contains photovoltaic modules. This input" +
        " object is for the simplest inverter model and uses a fixed efficiency.")]
    [JsonObject("ElectricLoadCenter:Inverter:Simple")]
    public class ElectricLoadCenter_Inverter_Simple : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("enter name of zone to receive inverter losses as heat if blank then inverter is a" +
    "ssumed to be outdoors")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("radiative_fraction")]
public System.Nullable<float> RadiativeFraction { get; set; } = null;
        

[JsonProperty("inverter_efficiency")]
public System.Nullable<float> InverterEfficiency { get; set; } = null;
    }
    
    [Description("Electric power inverter to convert from direct current (DC) to alternating curren" +
        "t (AC) in an electric load center that contains photovoltaic modules. This input" +
        " object is for an inverter model where efficiency is a function of normalized po" +
        "wer.")]
    [JsonObject("ElectricLoadCenter:Inverter:FunctionOfPower")]
    public class ElectricLoadCenter_Inverter_FunctionOfPower : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Enter name of zone to receive inverter losses as heat if blank then inverter is a" +
    "ssumed to be outdoors")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("radiative_fraction")]
public System.Nullable<float> RadiativeFraction { get; set; } = null;
        

[Description("curve describes efficiency as a function of power curve is normalized relative to" +
    " rated power in next field")]
[JsonProperty("efficiency_function_of_power_curve_name")]
public string EfficiencyFunctionOfPowerCurveName { get; set; } = "";
        

[JsonProperty("rated_maximum_continuous_input_power")]
public System.Nullable<float> RatedMaximumContinuousInputPower { get; set; } = null;
        

[JsonProperty("minimum_efficiency")]
public System.Nullable<float> MinimumEfficiency { get; set; } = null;
        

[JsonProperty("maximum_efficiency")]
public System.Nullable<float> MaximumEfficiency { get; set; } = null;
        

[JsonProperty("minimum_power_output")]
public System.Nullable<float> MinimumPowerOutput { get; set; } = null;
        

[JsonProperty("maximum_power_output")]
public System.Nullable<float> MaximumPowerOutput { get; set; } = null;
        

[JsonProperty("ancillary_power_consumed_in_standby")]
public System.Nullable<float> AncillaryPowerConsumedInStandby { get; set; } = null;
    }
    
    [Description("California Energy Commission tests and publishes data on inverters This inverter " +
        "model interpolates using CEC test data Input data are at http://www.gosolarcalif" +
        "ornia.org/equipment/inverter_tests/summaries")]
    [JsonObject("ElectricLoadCenter:Inverter:LookUpTable")]
    public class ElectricLoadCenter_Inverter_LookUpTable : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Enter name of zone to receive inverter losses as heat if blank then inverter is a" +
    "ssumed to be outdoors")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("radiative_fraction")]
public System.Nullable<float> RadiativeFraction { get; set; } = null;
        

[JsonProperty("rated_maximum_continuous_output_power")]
public System.Nullable<float> RatedMaximumContinuousOutputPower { get; set; } = null;
        

[JsonProperty("night_tare_loss_power")]
public System.Nullable<float> NightTareLossPower { get; set; } = null;
        

[JsonProperty("nominal_voltage_input")]
public System.Nullable<float> NominalVoltageInput { get; set; } = null;
        

[JsonProperty("efficiency_at_10_power_and_nominal_voltage")]
public System.Nullable<float> EfficiencyAt10PowerAndNominalVoltage { get; set; } = null;
        

[JsonProperty("efficiency_at_20_power_and_nominal_voltage")]
public System.Nullable<float> EfficiencyAt20PowerAndNominalVoltage { get; set; } = null;
        

[JsonProperty("efficiency_at_30_power_and_nominal_voltage")]
public System.Nullable<float> EfficiencyAt30PowerAndNominalVoltage { get; set; } = null;
        

[JsonProperty("efficiency_at_50_power_and_nominal_voltage")]
public System.Nullable<float> EfficiencyAt50PowerAndNominalVoltage { get; set; } = null;
        

[JsonProperty("efficiency_at_75_power_and_nominal_voltage")]
public System.Nullable<float> EfficiencyAt75PowerAndNominalVoltage { get; set; } = null;
        

[JsonProperty("efficiency_at_100_power_and_nominal_voltage")]
public System.Nullable<float> EfficiencyAt100PowerAndNominalVoltage { get; set; } = null;
    }
    
    [Description(@"Used to model storage of electricity in an electric load center. This is a simple model that does not attempt to represent any of the characteristics of a real storage device such as a battery. The type of power, AC or DC, depends on the configuration chosen as the Electrical Buss Type in the ElectricLoadCenter:Distribution object.")]
    [JsonObject("ElectricLoadCenter:Storage:Simple")]
    public class ElectricLoadCenter_Storage_Simple : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Enter name of zone to receive storage losses as heat if blank then storage is ass" +
    "umed to be outdoors")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("radiative_fraction_for_zone_heat_gains")]
public System.Nullable<float> RadiativeFractionForZoneHeatGains { get; set; } = null;
        

[JsonProperty("nominal_energetic_efficiency_for_charging")]
public System.Nullable<float> NominalEnergeticEfficiencyForCharging { get; set; } = null;
        

[JsonProperty("nominal_discharging_energetic_efficiency")]
public System.Nullable<float> NominalDischargingEnergeticEfficiency { get; set; } = null;
        

[JsonProperty("maximum_storage_capacity")]
public System.Nullable<float> MaximumStorageCapacity { get; set; } = null;
        

[JsonProperty("maximum_power_for_discharging")]
public System.Nullable<float> MaximumPowerForDischarging { get; set; } = null;
        

[JsonProperty("maximum_power_for_charging")]
public System.Nullable<float> MaximumPowerForCharging { get; set; } = null;
        

[JsonProperty("initial_state_of_charge")]
public System.Nullable<float> InitialStateOfCharge { get; set; } = null;
    }
    
    [Description(@"Uses the kinetic battery model (KiBaM) to simulate rechargeable battery banks in an electrical load center. The battery bank is a collection of one or more individual battery modules. Given the surplus or deficit power from the electrical system and the state of charge from the previous time step, this object can model the voltage, current, and energy losses with charging and discharging during each time step. The cumulative battery damage can be also modeled and reported at the end of each simulation run.")]
    [JsonObject("ElectricLoadCenter:Storage:Battery")]
    public class ElectricLoadCenter_Storage_Battery : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Enter name of zone to receive electrical storage losses as heat if blank then ele" +
    "ctrical storage losses are dissipated to outdoors")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("radiative_fraction")]
public System.Nullable<float> RadiativeFraction { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("A module usually consists of several cells. The total number of modules in the ba" +
    "ttery bank is equal to number of modules in parallel times number of modules in " +
    "series.")]
[JsonProperty("number_of_battery_modules_in_parallel")]
public System.Nullable<float> NumberOfBatteryModulesInParallel { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("A module usually consists of several cells. The total number of modules in the ba" +
    "ttery bank is equal to number of modules in parallel times number of modules in " +
    "series.")]
[JsonProperty("number_of_battery_modules_in_series")]
public System.Nullable<float> NumberOfBatteryModulesInSeries { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("The capacity is for each module. A model parameter from manufacturer\'s data or te" +
    "st data.")]
[JsonProperty("maximum_module_capacity")]
public System.Nullable<float> MaximumModuleCapacity { get; set; } = null;
        

[Description("The state of charge is evaluated based on the maximum capacity defined in the nex" +
    "t field.")]
[JsonProperty("initial_fractional_state_of_charge")]
public System.Nullable<float> InitialFractionalStateOfCharge { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("A model parameter usually derived from test data by curve fitting.")]
[JsonProperty("fraction_of_available_charge_capacity")]
public System.Nullable<float> FractionOfAvailableChargeCapacity { get; set; } = null;
        

[Description("A model parameter usually derived from test data by curve fitting.")]
[JsonProperty("change_rate_from_bound_charge_to_available_charge")]
public System.Nullable<float> ChangeRateFromBoundChargeToAvailableCharge { get; set; } = null;
        

[Description("The voltage is for each battery module.")]
[JsonProperty("fully_charged_module_open_circuit_voltage")]
public System.Nullable<float> FullyChargedModuleOpenCircuitVoltage { get; set; } = null;
        

[Description("The voltage is for each battery module.")]
[JsonProperty("fully_discharged_module_open_circuit_voltage")]
public System.Nullable<float> FullyDischargedModuleOpenCircuitVoltage { get; set; } = null;
        

[Description("Determines how the open circuit voltage change with state of charge relative to t" +
    "he fully discharged state.")]
[JsonProperty("voltage_change_curve_name_for_charging")]
public string VoltageChangeCurveNameForCharging { get; set; } = "";
        

[Description("Determines how the open circuit voltage change with state of charge relative to t" +
    "he fully charged state.")]
[JsonProperty("voltage_change_curve_name_for_discharging")]
public string VoltageChangeCurveNameForDischarging { get; set; } = "";
        

[Description("A model parameter from manufacture or derived from test data. Internal resistance" +
    " is assumed to be constant. The internal resistance is for each battery module.")]
[JsonProperty("module_internal_electrical_resistance")]
public System.Nullable<float> ModuleInternalElectricalResistance { get; set; } = null;
        

[Description("The constraint on discharging current is for each battery module.")]
[JsonProperty("maximum_module_discharging_current")]
public System.Nullable<float> MaximumModuleDischargingCurrent { get; set; } = null;
        

[Description("The voltage constraint is for each battery module.")]
[JsonProperty("module_cut_off_voltage")]
public System.Nullable<float> ModuleCutOffVoltage { get; set; } = null;
        

[Description("units 1/hr Charge rate limit is the division between charging current the remaini" +
    "ng capacity. The constraint on charging current is for each module.")]
[JsonProperty("module_charge_rate_limit")]
public System.Nullable<float> ModuleChargeRateLimit { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("battery_life_calculation")]
public EmptyNoYes BatteryLifeCalculation { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Only required when battery life calculation is activated")]
[JsonProperty("number_of_cycle_bins")]
public System.Nullable<float> NumberOfCycleBins { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("Determines the number of cycles to failure in relation to cycle range. Only requi" +
    "red when battery life calculation is activated.")]
[JsonProperty("battery_life_curve_name")]
public string BatteryLifeCurveName { get; set; } = "";
    }
    
    [Description(@"Uses Lithium Ion NMC model to simulate rechargeable battery banks in an electrical load center. The battery bank is a collection of one or more individual battery modules. Given the surplus or deficit power from the electrical system and the state of charge from the previous time step, this object can model the voltage, current, and energy losses with charging and discharging during each time step. The cumulative battery damage can be also modeled and reported at the end of each simulation run.")]
    [JsonObject("ElectricLoadCenter:Storage:LiIonNMCBattery")]
    public class ElectricLoadCenter_Storage_LiIonNMCBattery : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Enter name of zone to receive electrical storage losses as heat if blank then ele" +
    "ctrical storage losses are dissipated to outdoors")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("radiative_fraction")]
public System.Nullable<float> RadiativeFraction { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("lifetime_model")]
public ElectricLoadCenter_Storage_LiIonNMCBattery_LifetimeModel LifetimeModel { get; set; } = (ElectricLoadCenter_Storage_LiIonNMCBattery_LifetimeModel)Enum.Parse(typeof(ElectricLoadCenter_Storage_LiIonNMCBattery_LifetimeModel), "KandlerSmith");
        

[Description("Battery voltage is calculated by multiplying this field by the nominal cell volta" +
    "ge (N13, default 3.342V)")]
[JsonProperty("number_of_cells_in_series")]
public System.Nullable<float> NumberOfCellsInSeries { get; set; } = null;
        

[Description("Capacity (Ah) is determined by multiplying this field by the cell capacity (N14, " +
    "default 3.2 Ah)")]
[JsonProperty("number_of_strings_in_parallel")]
public System.Nullable<float> NumberOfStringsInParallel { get; set; } = null;
        

[Description("The state of charge is evaluated based on the maximum capacity defined in the nex" +
    "t field.")]
[JsonProperty("initial_fractional_state_of_charge")]
public System.Nullable<float> InitialFractionalStateOfCharge { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[JsonProperty("dc_to_dc_charging_efficiency")]
public System.Nullable<float> DcToDcChargingEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.95", CultureInfo.InvariantCulture);
        

[JsonProperty("battery_mass")]
public System.Nullable<float> BatteryMass { get; set; } = null;
        

[JsonProperty("battery_surface_area")]
public System.Nullable<float> BatterySurfaceArea { get; set; } = null;
        

[JsonProperty("battery_specific_heat_capacity")]
public System.Nullable<float> BatterySpecificHeatCapacity { get; set; } = (System.Nullable<float>)Single.Parse("1500", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_transfer_coefficient_between_battery_and_ambient")]
public System.Nullable<float> HeatTransferCoefficientBetweenBatteryAndAmbient { get; set; } = (System.Nullable<float>)Single.Parse("7.5", CultureInfo.InvariantCulture);
        

[Description("Most users should not need to change this value.")]
[JsonProperty("fully_charged_cell_voltage")]
public System.Nullable<float> FullyChargedCellVoltage { get; set; } = (System.Nullable<float>)Single.Parse("4.2", CultureInfo.InvariantCulture);
        

[Description("Most users should not need to change this value.")]
[JsonProperty("cell_voltage_at_end_of_exponential_zone")]
public System.Nullable<float> CellVoltageAtEndOfExponentialZone { get; set; } = (System.Nullable<float>)Single.Parse("3.53", CultureInfo.InvariantCulture);
        

[Description("Most users should not need to change this value.")]
[JsonProperty("cell_voltage_at_end_of_nominal_zone")]
public System.Nullable<float> CellVoltageAtEndOfNominalZone { get; set; } = (System.Nullable<float>)Single.Parse("3.342", CultureInfo.InvariantCulture);
        

[Description("Most users should not need to change this value.")]
[JsonProperty("default_nominal_cell_voltage")]
public System.Nullable<float> DefaultNominalCellVoltage { get; set; } = (System.Nullable<float>)Single.Parse("3.342", CultureInfo.InvariantCulture);
        

[Description("Most users should not need to change this value.")]
[JsonProperty("fully_charged_cell_capacity")]
public System.Nullable<float> FullyChargedCellCapacity { get; set; } = (System.Nullable<float>)Single.Parse("3.2", CultureInfo.InvariantCulture);
        

[Description("Most users should not need to change this value.")]
[JsonProperty("fraction_of_cell_capacity_removed_at_the_end_of_exponential_zone")]
public System.Nullable<float> FractionOfCellCapacityRemovedAtTheEndOfExponentialZone { get; set; } = (System.Nullable<float>)Single.Parse("0.8075", CultureInfo.InvariantCulture);
        

[Description("Most users should not need to change this value.")]
[JsonProperty("fraction_of_cell_capacity_removed_at_the_end_of_nominal_zone")]
public System.Nullable<float> FractionOfCellCapacityRemovedAtTheEndOfNominalZone { get; set; } = (System.Nullable<float>)Single.Parse("0.976875", CultureInfo.InvariantCulture);
        

[Description("Most users should not need to change this value.")]
[JsonProperty("charge_rate_at_which_voltage_vs_capacity_curve_was_generated")]
public System.Nullable<float> ChargeRateAtWhichVoltageVsCapacityCurveWasGenerated { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("for a single cell Most users should not need to change this value.")]
[JsonProperty("battery_cell_internal_electrical_resistance")]
public System.Nullable<float> BatteryCellInternalElectricalResistance { get; set; } = (System.Nullable<float>)Single.Parse("0.09", CultureInfo.InvariantCulture);
    }
    
    public enum ElectricLoadCenter_Storage_LiIonNMCBattery_LifetimeModel
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("KandlerSmith")]
        KandlerSmith = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    [Description("a list of meters that can be reported are available after a run on the meter dict" +
        "ionary file (.mdd) if the Output:VariableDictionary has been requested.")]
    [JsonObject("ElectricLoadCenter:Transformer")]
    public class ElectricLoadCenter_Transformer : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description(@"A transformer can be used to transfer electric energy from utility grid to building (PowerInFromGrid)or from building on-site generation to the grid (PowerOutToGrid) or within a load center to match generation to the facility service main panel (LoadCenterPowerConditioning)")]
[JsonProperty("transformer_usage")]
public ElectricLoadCenter_Transformer_TransformerUsage TransformerUsage { get; set; } = (ElectricLoadCenter_Transformer_TransformerUsage)Enum.Parse(typeof(ElectricLoadCenter_Transformer_TransformerUsage), "PowerInFromGrid");
        

[Description("Enter name of zone to receive transformer losses as heat if blank then transforme" +
    "r losses are dissipated to outdoors")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("radiative_fraction")]
public System.Nullable<float> RadiativeFraction { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("the unit is VA, instead of kVA as usually shown on transformer nameplates.")]
[JsonProperty("rated_capacity")]
public System.Nullable<float> RatedCapacity { get; set; } = null;
        

[Description("Must be single or three phase transformer. NOT used in the current model.")]
[JsonProperty("phase")]
public string Phase { get; set; } = (System.String)"3";
        

[Description("Winding material used by the transformer.")]
[JsonProperty("conductor_material")]
public ElectricLoadCenter_Transformer_ConductorMaterial ConductorMaterial { get; set; } = (ElectricLoadCenter_Transformer_ConductorMaterial)Enum.Parse(typeof(ElectricLoadCenter_Transformer_ConductorMaterial), "Aluminum");
        

[JsonProperty("full_load_temperature_rise")]
public System.Nullable<float> FullLoadTemperatureRise { get; set; } = (System.Nullable<float>)Single.Parse("150", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_of_eddy_current_losses")]
public System.Nullable<float> FractionOfEddyCurrentLosses { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[Description("User can define transformer performance by specifying load and no load losses at " +
    "rated conditions or nameplate efficiency and maximum efficiency")]
[JsonProperty("performance_input_method")]
public ElectricLoadCenter_Transformer_PerformanceInputMethod PerformanceInputMethod { get; set; } = (ElectricLoadCenter_Transformer_PerformanceInputMethod)Enum.Parse(typeof(ElectricLoadCenter_Transformer_PerformanceInputMethod), "RatedLosses");
        

[Description("Only required when RatedLosses is the performance input method")]
[JsonProperty("rated_no_load_loss")]
public System.Nullable<float> RatedNoLoadLoss { get; set; } = null;
        

[Description("Only required when RatedLosses is the performance input method")]
[JsonProperty("rated_load_loss")]
public System.Nullable<float> RatedLoadLoss { get; set; } = null;
        

[Description("Only required when NominalEfficiency is the performance input method")]
[JsonProperty("nameplate_efficiency")]
public System.Nullable<float> NameplateEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.98", CultureInfo.InvariantCulture);
        

[Description("Percentage of the rated capacity at which the nameplate efficiency is defined Onl" +
    "y required when NominalEfficiency is the performance input method")]
[JsonProperty("per_unit_load_for_nameplate_efficiency")]
public System.Nullable<float> PerUnitLoadForNameplateEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.35", CultureInfo.InvariantCulture);
        

[Description("Conductor operating temperature at which the nameplate efficiency is defined Only" +
    " required when NominalEfficiency is the performance input method")]
[JsonProperty("reference_temperature_for_nameplate_efficiency")]
public System.Nullable<float> ReferenceTemperatureForNameplateEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("75", CultureInfo.InvariantCulture);
        

[Description("Percentage of the rate capacity at which the maximum efficiency is obtained Only " +
    "required when NominalEfficiency is the performance input method")]
[JsonProperty("per_unit_load_for_maximum_efficiency")]
public System.Nullable<float> PerUnitLoadForMaximumEfficiency { get; set; } = null;
        

[Description("Only required when the transformer is used for power in from the utility grid")]
[JsonProperty("consider_transformer_loss_for_utility_cost")]
public EmptyNoYes ConsiderTransformerLossForUtilityCost { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("meters")]
public string Meters { get; set; } = "";
    }
    
    public enum ElectricLoadCenter_Transformer_TransformerUsage
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LoadCenterPowerConditioning")]
        LoadCenterPowerConditioning = 1,
        
        [JsonProperty("PowerInFromGrid")]
        PowerInFromGrid = 2,
        
        [JsonProperty("PowerOutToGrid")]
        PowerOutToGrid = 3,
    }
    
    public enum ElectricLoadCenter_Transformer_ConductorMaterial
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Aluminum")]
        Aluminum = 1,
        
        [JsonProperty("Copper")]
        Copper = 2,
    }
    
    public enum ElectricLoadCenter_Transformer_PerformanceInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("NominalEfficiency")]
        NominalEfficiency = 1,
        
        [JsonProperty("RatedLosses")]
        RatedLosses = 2,
    }
    
    [Description("Describes a subpanel a list of meters that can be reported are available after a " +
        "run on the meter dictionary file (.mdd) if the Output:VariableDictionary has bee" +
        "n requested.")]
    [JsonObject("ElectricLoadCenter:Distribution")]
    public class ElectricLoadCenter_Distribution : BHoMObject, IEnergyPlusClass
    {
        

[Description("Name of an ElectricLoadCenter:Generators object")]
[JsonProperty("generator_list_name")]
public string GeneratorListName { get; set; } = "";
        

[Description("Determines how generators are to be controlled Required if Generator List is ente" +
    "red.")]
[JsonProperty("generator_operation_scheme_type")]
public ElectricLoadCenter_Distribution_GeneratorOperationSchemeType GeneratorOperationSchemeType { get; set; } = (ElectricLoadCenter_Distribution_GeneratorOperationSchemeType)Enum.Parse(typeof(ElectricLoadCenter_Distribution_GeneratorOperationSchemeType), "Baseload");
        

[JsonProperty("generator_demand_limit_scheme_purchased_electric_demand_limit")]
public System.Nullable<float> GeneratorDemandLimitSchemePurchasedElectricDemandLimit { get; set; } = null;
        

[Description("required when Generator Operation Scheme Type=TrackSchedule schedule values in Wa" +
    "tts")]
[JsonProperty("generator_track_schedule_name_scheme_schedule_name")]
public string GeneratorTrackScheduleNameSchemeScheduleName { get; set; } = "";
        

[Description("required when Generator Operation Scheme Type=TrackMeter")]
[JsonProperty("generator_track_meter_scheme_meter_name")]
public string GeneratorTrackMeterSchemeMeterName { get; set; } = "";
        

[JsonProperty("electrical_buss_type")]
public ElectricLoadCenter_Distribution_ElectricalBussType ElectricalBussType { get; set; } = (ElectricLoadCenter_Distribution_ElectricalBussType)Enum.Parse(typeof(ElectricLoadCenter_Distribution_ElectricalBussType), "AlternatingCurrent");
        

[Description("required when Electrical Buss Type=DirectCurrentWithInverter, DirectCurrentWithIn" +
    "verterDCStorage, or DirectCurrentWithInverterACStorage")]
[JsonProperty("inverter_name")]
public string InverterName { get; set; } = "";
        

[Description("required when Electrical Buss Type=AlternatingCurrentWithStorage, DirectCurrentWi" +
    "thInverterDCStorage, or DirectCurrentWithInverterACStorage")]
[JsonProperty("electrical_storage_object_name")]
public string ElectricalStorageObjectName { get; set; } = "";
        

[Description("required when power needs to be output from on-site generation or storage to the " +
    "grid via transformer")]
[JsonProperty("transformer_object_name")]
public string TransformerObjectName { get; set; } = "";
        

[Description("Select method to govern how storage charge and discharge is controlled TrackFacil" +
    "ityElectricDemandStoreExcessOnSite indicates that storage control will follow th" +
    "e facility power demand while accounting for any on-site generation. Only excess" +
    " on site generation  gets stored (legacy behavior). TrackMeterDemandStoreExcessO" +
    "nSite indicates that storage discharge control will follow an electric meter nam" +
    "ed in the field called Storage Control Track Meter Name. This scheme is similiar" +
    " to TrackFacilityElectricDemandStoreExcessOnSite except that instead of the main" +
    " facility electric meter, the control is based off of a user-selected meter. Tra" +
    "ckChargeDischargeSchedules indicates that control will follow the charging and d" +
    "ischarging power and schedules defined in the fields called Maximum Storage Char" +
    "ge Grid Supply Power, Storage Charge Grid Supply Power Fraction Schedule Name, D" +
    "esign Storage Discharge Grid Export Power, and Storage Discharge Grid Export Fra" +
    "ction Schedule Name. FacilityDemandLeveling indicates that storage control will " +
    "attempt to control the facility\'s power demand drawn from the utility service to" +
    " a prescribed level. The target utility demand is entered in the fields called S" +
    "torage Control Utility Demand Limit and Storage Control Utility Demand Limit Fra" +
    "ction Schedule Name This scheme first accounts for any on-site generation and du" +
    "ring times of high use will discharge storage to reduce facility grid demand to " +
    "meet the target level and during times of low use will charge storage from the g" +
    "rid to increase facility grid demand to meet the target level.")]
[JsonProperty("storage_operation_scheme")]
public ElectricLoadCenter_Distribution_StorageOperationScheme StorageOperationScheme { get; set; } = (ElectricLoadCenter_Distribution_StorageOperationScheme)Enum.Parse(typeof(ElectricLoadCenter_Distribution_StorageOperationScheme), "TrackFacilityElectricDemandStoreExcessOnSite");
        

[Description("required when Storage Operation Scheme is set to TrackMeterDemandStoreExcessOnSit" +
    "e.")]
[JsonProperty("storage_control_track_meter_name")]
public string StorageControlTrackMeterName { get; set; } = "";
        

[Description(@"Name of an ElectricLoadCenter:Storage:Converter used to convert AC to DC when charging DC storage from grid supply. A converter is expected when using Storage Operation Schemes FacilityDemandLeveling or TrackChargeDischargeSchedules A single bidirectional device will reference both an inverter object (DC to AC) and a converter object (AC to DC).")]
[JsonProperty("storage_converter_object_name")]
public string StorageConverterObjectName { get; set; } = "";
        

[Description("Fraction of storage capacity used as upper limit for controlling charging, for al" +
    "l storage operation schemes.")]
[JsonProperty("maximum_storage_state_of_charge_fraction")]
public System.Nullable<float> MaximumStorageStateOfChargeFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Fraction of storage capacity used as lower limit for controlling discharging, for" +
    " all storage operation schemes.")]
[JsonProperty("minimum_storage_state_of_charge_fraction")]
public System.Nullable<float> MinimumStorageStateOfChargeFraction { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Maximum rate that electric power can be charged into storage. Storage charging adjusted downward for conversion losses. Rate is modified by fractional values in the schedule named in the next field. Required field when using Storage Operation Schemes FacilityDemandLeveling or TrackChargeDischargeSchedules.")]
[JsonProperty("design_storage_control_charge_power")]
public System.Nullable<float> DesignStorageControlChargePower { get; set; } = null;
        

[Description("Controls timing and magnitude of charging storage. Required field if Storage Oper" +
    "ation Scheme is set to TrackChargeDischargeSchedules. Schedule values should be " +
    "fractions from 0.0 to 1.0, inclusive.")]
[JsonProperty("storage_charge_power_fraction_schedule_name")]
public string StorageChargePowerFractionScheduleName { get; set; } = "";
        

[Description("Maximum rate that electric power can be discharged from storage. Rate is modified" +
    " by fractional values in the schedule named in the next field. Required field wh" +
    "en using Storage Operation Schemes FacilityDemandLeveling or TrackChargeDischarg" +
    "eSchedules.")]
[JsonProperty("design_storage_control_discharge_power")]
public System.Nullable<float> DesignStorageControlDischargePower { get; set; } = null;
        

[Description("Controls timing and magnitude of discharging storage Required field if Storage Op" +
    "eration Scheme is set to TrackChargeDischargeSchedules. Schedule values should b" +
    "e fractions from 0.0 to 1.0, inclusive.")]
[JsonProperty("storage_discharge_power_fraction_schedule_name")]
public string StorageDischargePowerFractionScheduleName { get; set; } = "";
        

[Description("Target utility service demand power for discharge control. Storage draws are adju" +
    "sted upwards for conversion losses. Required field for FacilityDemandLeveling st" +
    "orage operation scheme")]
[JsonProperty("storage_control_utility_demand_target")]
public System.Nullable<float> StorageControlUtilityDemandTarget { get; set; } = null;
        

[Description(@"Modifies the target utility service demand power over time. Schedule values should be fractions from -1.0 to 1.0, inclusive. if omitted a schedule value of 1.0 is used. Negative values indicate export to grid Schedule is used if Storage Operation Scheme is set to FacilityDemandLeveling.")]
[JsonProperty("storage_control_utility_demand_target_fraction_schedule_name")]
public string StorageControlUtilityDemandTargetFractionScheduleName { get; set; } = "";
    }
    
    public enum ElectricLoadCenter_Distribution_GeneratorOperationSchemeType
    {
        
        [JsonProperty("Baseload")]
        Baseload = 0,
        
        [JsonProperty("DemandLimit")]
        DemandLimit = 1,
        
        [JsonProperty("FollowThermal")]
        FollowThermal = 2,
        
        [JsonProperty("FollowThermalLimitElectrical")]
        FollowThermalLimitElectrical = 3,
        
        [JsonProperty("TrackElectrical")]
        TrackElectrical = 4,
        
        [JsonProperty("TrackMeter")]
        TrackMeter = 5,
        
        [JsonProperty("TrackSchedule")]
        TrackSchedule = 6,
    }
    
    public enum ElectricLoadCenter_Distribution_ElectricalBussType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlternatingCurrent")]
        AlternatingCurrent = 1,
        
        [JsonProperty("AlternatingCurrentWithStorage")]
        AlternatingCurrentWithStorage = 2,
        
        [JsonProperty("DirectCurrentWithInverter")]
        DirectCurrentWithInverter = 3,
        
        [JsonProperty("DirectCurrentWithInverterACStorage")]
        DirectCurrentWithInverterACStorage = 4,
        
        [JsonProperty("DirectCurrentWithInverterDCStorage")]
        DirectCurrentWithInverterDCStorage = 5,
    }
    
    public enum ElectricLoadCenter_Distribution_StorageOperationScheme
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FacilityDemandLeveling")]
        FacilityDemandLeveling = 1,
        
        [JsonProperty("TrackChargeDischargeSchedules")]
        TrackChargeDischargeSchedules = 2,
        
        [JsonProperty("TrackFacilityElectricDemandStoreExcessOnSite")]
        TrackFacilityElectricDemandStoreExcessOnSite = 3,
        
        [JsonProperty("TrackMeterDemandStoreExcessOnSite")]
        TrackMeterDemandStoreExcessOnSite = 4,
    }
    
    [Description("This model is for converting AC to DC for grid-supplied charging of DC storage")]
    [JsonObject("ElectricLoadCenter:Storage:Converter")]
    public class ElectricLoadCenter_Storage_Converter : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the converter is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("SimpleFixed indicates power conversion losses are based on Simple Fixed Efficienc" +
    "y FunctionOfPower indicates power conversion losses are a function of normalized" +
    " power using a curve or table.")]
[JsonProperty("power_conversion_efficiency_method")]
public ElectricLoadCenter_Storage_Converter_PowerConversionEfficiencyMethod PowerConversionEfficiencyMethod { get; set; } = (ElectricLoadCenter_Storage_Converter_PowerConversionEfficiencyMethod)Enum.Parse(typeof(ElectricLoadCenter_Storage_Converter_PowerConversionEfficiencyMethod), "SimpleFixed");
        

[Description("Constant efficiency for conversion of AC to DC at all power levels. Field is only" +
    " used when Power Conversion Efficiency Method is set to SimpleFixed.")]
[JsonProperty("simple_fixed_efficiency")]
public System.Nullable<float> SimpleFixedEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.95", CultureInfo.InvariantCulture);
        

[Description("Required field when Power Conversion Efficiency Method is set to FunctionOfPower." +
    "")]
[JsonProperty("design_maximum_continuous_input_power")]
public System.Nullable<float> DesignMaximumContinuousInputPower { get; set; } = null;
        

[Description(@"Curve or table with a single independent variable that describes efficiency as a function of normalized power. The ""x"" input for curve or table is the ratio of current input power divided by design power in the previous field Required field when Power Conversion Efficiency Method is set to FunctionOfPower.")]
[JsonProperty("efficiency_function_of_power_curve_name")]
public string EfficiencyFunctionOfPowerCurveName { get; set; } = "";
        

[Description("Optional standby power consumed when converter is available but no power is being" +
    " conditioned.")]
[JsonProperty("ancillary_power_consumed_in_standby")]
public System.Nullable<float> AncillaryPowerConsumedInStandby { get; set; } = null;
        

[Description("enter name of zone to receive converter losses as heat if blank then converter is" +
    " assumed to be outdoors")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("fraction of zone heat gains treated as thermal radiation")]
[JsonProperty("radiative_fraction")]
public System.Nullable<float> RadiativeFraction { get; set; } = null;
    }
    
    public enum ElectricLoadCenter_Storage_Converter_PowerConversionEfficiencyMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FunctionOfPower")]
        FunctionOfPower = 1,
        
        [JsonProperty("SimpleFixed")]
        SimpleFixed = 2,
    }
}
namespace BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Declares EMS variable as a sensor a list of output variables and meters that can " +
        "be reported are available after a run on the report (.rdd) or meter dictionary f" +
        "ile (.mdd) if the Output:VariableDictionary has been requested.")]
    [JsonObject("EnergyManagementSystem:Sensor")]
    public class EnergyManagementSystem_Sensor : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("output_variable_or_output_meter_index_key_name")]
public string OutputVariableOrOutputMeterIndexKeyName { get; set; } = "";
        

[JsonProperty("output_variable_or_output_meter_name")]
public string OutputVariableOrOutputMeterName { get; set; } = "";
    }
    
    [Description("Hardware portion of EMS used to set up actuators in the model")]
    [JsonObject("EnergyManagementSystem:Actuator")]
    public class EnergyManagementSystem_Actuator : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("actuated_component_unique_name")]
public string ActuatedComponentUniqueName { get; set; } = "";
        

[JsonProperty("actuated_component_type")]
public string ActuatedComponentType { get; set; } = "";
        

[JsonProperty("actuated_component_control_type")]
public string ActuatedComponentControlType { get; set; } = "";
    }
    
    [Description("Input EMS program. a program needs a name a description of when it should be call" +
        "ed and then lines of program code for EMS Runtime language")]
    [JsonObject("EnergyManagementSystem:ProgramCallingManager")]
    public class EnergyManagementSystem_ProgramCallingManager : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("energyplus_model_calling_point")]
public EnergyManagementSystem_ProgramCallingManager_EnergyplusModelCallingPoint EnergyplusModelCallingPoint { get; set; } = (EnergyManagementSystem_ProgramCallingManager_EnergyplusModelCallingPoint)Enum.Parse(typeof(EnergyManagementSystem_ProgramCallingManager_EnergyplusModelCallingPoint), "AfterComponentInputReadIn");
        

[JsonProperty("programs")]
public string Programs { get; set; } = "";
    }
    
    public enum EnergyManagementSystem_ProgramCallingManager_EnergyplusModelCallingPoint
    {
        
        [JsonProperty("AfterComponentInputReadIn")]
        AfterComponentInputReadIn = 0,
        
        [JsonProperty("AfterNewEnvironmentWarmUpIsComplete")]
        AfterNewEnvironmentWarmUpIsComplete = 1,
        
        [JsonProperty("AfterPredictorAfterHVACManagers")]
        AfterPredictorAfterHVACManagers = 2,
        
        [JsonProperty("AfterPredictorBeforeHVACManagers")]
        AfterPredictorBeforeHVACManagers = 3,
        
        [JsonProperty("BeginNewEnvironment")]
        BeginNewEnvironment = 4,
        
        [JsonProperty("BeginTimestepBeforePredictor")]
        BeginTimestepBeforePredictor = 5,
        
        [JsonProperty("BeginZoneTimestepAfterInitHeatBalance")]
        BeginZoneTimestepAfterInitHeatBalance = 6,
        
        [JsonProperty("BeginZoneTimestepBeforeInitHeatBalance")]
        BeginZoneTimestepBeforeInitHeatBalance = 7,
        
        [JsonProperty("BeginZoneTimestepBeforeSetCurrentWeather")]
        BeginZoneTimestepBeforeSetCurrentWeather = 8,
        
        [JsonProperty("EndOfSystemSizing")]
        EndOfSystemSizing = 9,
        
        [JsonProperty("EndOfSystemTimestepAfterHVACReporting")]
        EndOfSystemTimestepAfterHVACReporting = 10,
        
        [JsonProperty("EndOfSystemTimestepBeforeHVACReporting")]
        EndOfSystemTimestepBeforeHVACReporting = 11,
        
        [JsonProperty("EndOfZoneSizing")]
        EndOfZoneSizing = 12,
        
        [JsonProperty("EndOfZoneTimestepAfterZoneReporting")]
        EndOfZoneTimestepAfterZoneReporting = 13,
        
        [JsonProperty("EndOfZoneTimestepBeforeZoneReporting")]
        EndOfZoneTimestepBeforeZoneReporting = 14,
        
        [JsonProperty("InsideHVACSystemIterationLoop")]
        InsideHVACSystemIterationLoop = 15,
        
        [JsonProperty("UnitarySystemSizing")]
        UnitarySystemSizing = 16,
        
        [JsonProperty("UserDefinedComponentModel")]
        UserDefinedComponentModel = 17,
    }
    
    [Description("This input defines an Erl program Each field after the name is a line of EMS Runt" +
        "ime Language")]
    [JsonObject("EnergyManagementSystem:Program")]
    public class EnergyManagementSystem_Program : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("lines")]
public string Lines { get; set; } = "";
    }
    
    [Description("This input defines an Erl program subroutine Each field after the name is a line " +
        "of EMS Runtime Language")]
    [JsonObject("EnergyManagementSystem:Subroutine")]
    public class EnergyManagementSystem_Subroutine : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("lines")]
public string Lines { get; set; } = "";
    }
    
    [Description("Declares Erl variable as having global scope No spaces allowed in names used for " +
        "Erl variables")]
    [JsonObject("EnergyManagementSystem:GlobalVariable")]
    public class EnergyManagementSystem_GlobalVariable : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("variables")]
public string Variables { get; set; } = "";
    }
    
    [Description("This object sets up an EnergyPlus output variable from an Erl variable")]
    [JsonObject("EnergyManagementSystem:OutputVariable")]
    public class EnergyManagementSystem_OutputVariable : BHoMObject, IEnergyPlusClass
    {
        

[Description("must be an acceptable EMS variable")]
[JsonProperty("ems_variable_name")]
public string EmsVariableName { get; set; } = "";
        

[JsonProperty("type_of_data_in_variable")]
public EnergyManagementSystem_OutputVariable_TypeOfDataInVariable TypeOfDataInVariable { get; set; } = (EnergyManagementSystem_OutputVariable_TypeOfDataInVariable)Enum.Parse(typeof(EnergyManagementSystem_OutputVariable_TypeOfDataInVariable), "Averaged");
        

[JsonProperty("update_frequency")]
public EnergyManagementSystem_OutputVariable_UpdateFrequency UpdateFrequency { get; set; } = (EnergyManagementSystem_OutputVariable_UpdateFrequency)Enum.Parse(typeof(EnergyManagementSystem_OutputVariable_UpdateFrequency), "SystemTimestep");
        

[Description("optional for global scope variables, required for local scope variables")]
[JsonProperty("ems_program_or_subroutine_name")]
public string EmsProgramOrSubroutineName { get; set; } = "";
        

[Description("optional but will result in dimensionless units for blank EnergyPlus units are st" +
    "andard SI units")]
[JsonProperty("units")]
public string Units { get; set; } = "";
    }
    
    public enum EnergyManagementSystem_OutputVariable_TypeOfDataInVariable
    {
        
        [JsonProperty("Averaged")]
        Averaged = 0,
        
        [JsonProperty("Summed")]
        Summed = 1,
    }
    
    public enum EnergyManagementSystem_OutputVariable_UpdateFrequency
    {
        
        [JsonProperty("SystemTimestep")]
        SystemTimestep = 0,
        
        [JsonProperty("ZoneTimestep")]
        ZoneTimestep = 1,
    }
    
    [Description("This object sets up an EnergyPlus output variable from an Erl variable")]
    [JsonObject("EnergyManagementSystem:MeteredOutputVariable")]
    public class EnergyManagementSystem_MeteredOutputVariable : BHoMObject, IEnergyPlusClass
    {
        

[Description("must be an acceptable EMS variable, no spaces")]
[JsonProperty("ems_variable_name")]
public string EmsVariableName { get; set; } = "";
        

[JsonProperty("update_frequency")]
public EnergyManagementSystem_MeteredOutputVariable_UpdateFrequency UpdateFrequency { get; set; } = (EnergyManagementSystem_MeteredOutputVariable_UpdateFrequency)Enum.Parse(typeof(EnergyManagementSystem_MeteredOutputVariable_UpdateFrequency), "SystemTimestep");
        

[Description("optional for global scope variables, required for local scope variables")]
[JsonProperty("ems_program_or_subroutine_name")]
public string EmsProgramOrSubroutineName { get; set; } = "";
        

[Description("choose the type of fuel, water, electricity, pollution or heat rate that should b" +
    "e metered.")]
[JsonProperty("resource_type")]
public EnergyManagementSystem_MeteredOutputVariable_ResourceType ResourceType { get; set; } = (EnergyManagementSystem_MeteredOutputVariable_ResourceType)Enum.Parse(typeof(EnergyManagementSystem_MeteredOutputVariable_ResourceType), "Coal");
        

[Description("choose a general classification, building (internal services), HVAC (air systems)" +
    ", or plant (hydronic systems), or system")]
[JsonProperty("group_type")]
public EnergyManagementSystem_MeteredOutputVariable_GroupType GroupType { get; set; } = (EnergyManagementSystem_MeteredOutputVariable_GroupType)Enum.Parse(typeof(EnergyManagementSystem_MeteredOutputVariable_GroupType), "Building");
        

[Description("choose how the metered output should be classified for end-use category")]
[JsonProperty("end_use_category")]
public EnergyManagementSystem_MeteredOutputVariable_EndUseCategory EndUseCategory { get; set; } = (EnergyManagementSystem_MeteredOutputVariable_EndUseCategory)Enum.Parse(typeof(EnergyManagementSystem_MeteredOutputVariable_EndUseCategory), "Baseboard");
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table. enter a user-defined subcategory for this metered output")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = "";
        

[Description("optional but will result in dimensionless units for blank EnergyPlus units are st" +
    "andard SI units")]
[JsonProperty("units")]
public string Units { get; set; } = "";
    }
    
    public enum EnergyManagementSystem_MeteredOutputVariable_UpdateFrequency
    {
        
        [JsonProperty("SystemTimestep")]
        SystemTimestep = 0,
        
        [JsonProperty("ZoneTimestep")]
        ZoneTimestep = 1,
    }
    
    public enum EnergyManagementSystem_MeteredOutputVariable_ResourceType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("CondensateWaterCollected")]
        CondensateWaterCollected = 1,
        
        [JsonProperty("Diesel")]
        Diesel = 2,
        
        [JsonProperty("DistrictCooling")]
        DistrictCooling = 3,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 4,
        
        [JsonProperty("Electricity")]
        Electricity = 5,
        
        [JsonProperty("ElectricityProducedOnSite")]
        ElectricityProducedOnSite = 6,
        
        [JsonProperty("EnergyTransfer")]
        EnergyTransfer = 7,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 8,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 9,
        
        [JsonProperty("Gasoline")]
        Gasoline = 10,
        
        [JsonProperty("MainsWaterSupply")]
        MainsWaterSupply = 11,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 12,
        
        [JsonProperty("OnSiteWaterProduced")]
        OnSiteWaterProduced = 13,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 14,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 15,
        
        [JsonProperty("Propane")]
        Propane = 16,
        
        [JsonProperty("RainWaterCollected")]
        RainWaterCollected = 17,
        
        [JsonProperty("SolarAirHeating")]
        SolarAirHeating = 18,
        
        [JsonProperty("SolarWaterHeating")]
        SolarWaterHeating = 19,
        
        [JsonProperty("Steam")]
        Steam = 20,
        
        [JsonProperty("WaterUse")]
        WaterUse = 21,
        
        [JsonProperty("WellWaterDrawn")]
        WellWaterDrawn = 22,
    }
    
    public enum EnergyManagementSystem_MeteredOutputVariable_GroupType
    {
        
        [JsonProperty("Building")]
        Building = 0,
        
        [JsonProperty("HVAC")]
        HVAC = 1,
        
        [JsonProperty("Plant")]
        Plant = 2,
        
        [JsonProperty("System")]
        System = 3,
    }
    
    public enum EnergyManagementSystem_MeteredOutputVariable_EndUseCategory
    {
        
        [JsonProperty("Baseboard")]
        Baseboard = 0,
        
        [JsonProperty("Boilers")]
        Boilers = 1,
        
        [JsonProperty("Chillers")]
        Chillers = 2,
        
        [JsonProperty("Cooling")]
        Cooling = 3,
        
        [JsonProperty("CoolingCoils")]
        CoolingCoils = 4,
        
        [JsonProperty("ExteriorEquipment")]
        ExteriorEquipment = 5,
        
        [JsonProperty("ExteriorLights")]
        ExteriorLights = 6,
        
        [JsonProperty("Fans")]
        Fans = 7,
        
        [JsonProperty("HeatRecovery")]
        HeatRecovery = 8,
        
        [JsonProperty("HeatRecoveryForCooling")]
        HeatRecoveryForCooling = 9,
        
        [JsonProperty("HeatRecoveryForHeating")]
        HeatRecoveryForHeating = 10,
        
        [JsonProperty("HeatRejection")]
        HeatRejection = 11,
        
        [JsonProperty("Heating")]
        Heating = 12,
        
        [JsonProperty("HeatingCoils")]
        HeatingCoils = 13,
        
        [JsonProperty("Humidifier")]
        Humidifier = 14,
        
        [JsonProperty("InteriorEquipment")]
        InteriorEquipment = 15,
        
        [JsonProperty("InteriorLights")]
        InteriorLights = 16,
        
        [JsonProperty("OnSiteGeneration")]
        OnSiteGeneration = 17,
        
        [JsonProperty("Pumps")]
        Pumps = 18,
        
        [JsonProperty("Refrigeration")]
        Refrigeration = 19,
        
        [JsonProperty("WaterSystems")]
        WaterSystems = 20,
    }
    
    [Description("This object sets up an EMS trend variable from an Erl variable A trend variable l" +
        "ogs values across timesteps")]
    [JsonObject("EnergyManagementSystem:TrendVariable")]
    public class EnergyManagementSystem_TrendVariable : BHoMObject, IEnergyPlusClass
    {
        

[Description("must be a global scope EMS variable")]
[JsonProperty("ems_variable_name")]
public string EmsVariableName { get; set; } = "";
        

[JsonProperty("number_of_timesteps_to_be_logged")]
public System.Nullable<float> NumberOfTimestepsToBeLogged { get; set; } = null;
    }
    
    [Description("Declares EMS variable as an internal data variable")]
    [JsonObject("EnergyManagementSystem:InternalVariable")]
    public class EnergyManagementSystem_InternalVariable : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("internal_data_index_key_name")]
public string InternalDataIndexKeyName { get; set; } = "";
        

[JsonProperty("internal_data_type")]
public string InternalDataType { get; set; } = "";
    }
    
    [Description("Declares EMS variable that identifies a curve or table")]
    [JsonObject("EnergyManagementSystem:CurveOrTableIndexVariable")]
    public class EnergyManagementSystem_CurveOrTableIndexVariable : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("curve_or_table_object_name")]
public string CurveOrTableObjectName { get; set; } = "";
    }
    
    [Description("Declares EMS variable that identifies a construction")]
    [JsonObject("EnergyManagementSystem:ConstructionIndexVariable")]
    public class EnergyManagementSystem_ConstructionIndexVariable : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("construction_object_name")]
public string ConstructionObjectName { get; set; } = "";
    }
}
namespace BH.oM.Adapters.EnergyPlus.EvaporativeCoolers
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Direct evaporative cooler with rigid media evaporative pad and recirculating wate" +
        "r pump. This model has no controls other than its availability schedule.")]
    [JsonObject("EvaporativeCooler:Direct:CelDekPad")]
    public class EvaporativeCooler_Direct_CelDekPad : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("direct_pad_area")]
public string DirectPadArea { get; set; } = (System.String)"Autosize";
        

[JsonProperty("direct_pad_depth")]
public string DirectPadDepth { get; set; } = (System.String)"Autosize";
        

[JsonProperty("recirculating_water_pump_power_consumption")]
public System.Nullable<float> RecirculatingWaterPumpPowerConsumption { get; set; } = null;
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("This field is not currently used and can be left blank")]
[JsonProperty("control_type")]
public string ControlType { get; set; } = "";
        

[JsonProperty("water_supply_storage_tank_name")]
public string WaterSupplyStorageTankName { get; set; } = "";
    }
    
    [Description("Indirect evaporative cooler with rigid media evaporative pad, recirculating water" +
        " pump, and secondary air fan. This model has no controls other than its availabi" +
        "lity schedule.")]
    [JsonObject("EvaporativeCooler:Indirect:CelDekPad")]
    public class EvaporativeCooler_Indirect_CelDekPad : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("direct_pad_area")]
public string DirectPadArea { get; set; } = (System.String)"Autosize";
        

[JsonProperty("direct_pad_depth")]
public string DirectPadDepth { get; set; } = (System.String)"Autosize";
        

[JsonProperty("recirculating_water_pump_power_consumption")]
public System.Nullable<float> RecirculatingWaterPumpPowerConsumption { get; set; } = null;
        

[JsonProperty("secondary_air_fan_flow_rate")]
public System.Nullable<float> SecondaryAirFanFlowRate { get; set; } = null;
        

[JsonProperty("secondary_air_fan_total_efficiency")]
public System.Nullable<float> SecondaryAirFanTotalEfficiency { get; set; } = null;
        

[JsonProperty("secondary_air_fan_delta_pressure")]
public System.Nullable<float> SecondaryAirFanDeltaPressure { get; set; } = null;
        

[JsonProperty("indirect_heat_exchanger_effectiveness")]
public System.Nullable<float> IndirectHeatExchangerEffectiveness { get; set; } = null;
        

[JsonProperty("primary_air_inlet_node_name")]
public string PrimaryAirInletNodeName { get; set; } = "";
        

[JsonProperty("primary_air_outlet_node_name")]
public string PrimaryAirOutletNodeName { get; set; } = "";
        

[Description("This field is not currently used and can be left blank")]
[JsonProperty("control_type")]
public string ControlType { get; set; } = "";
        

[JsonProperty("water_supply_storage_tank_name")]
public string WaterSupplyStorageTankName { get; set; } = "";
        

[Description("Enter the name of an outdoor air node")]
[JsonProperty("secondary_air_inlet_node_name")]
public string SecondaryAirInletNodeName { get; set; } = "";
    }
    
    [Description("Indirect evaporative cooler with wetted coil, recirculating water pump, and secon" +
        "dary air fan. This model has no controls other than its availability schedule.")]
    [JsonObject("EvaporativeCooler:Indirect:WetCoil")]
    public class EvaporativeCooler_Indirect_WetCoil : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("coil_maximum_efficiency")]
public System.Nullable<float> CoilMaximumEfficiency { get; set; } = null;
        

[JsonProperty("coil_flow_ratio")]
public System.Nullable<float> CoilFlowRatio { get; set; } = null;
        

[JsonProperty("recirculating_water_pump_power_consumption")]
public System.Nullable<float> RecirculatingWaterPumpPowerConsumption { get; set; } = null;
        

[JsonProperty("secondary_air_fan_flow_rate")]
public System.Nullable<float> SecondaryAirFanFlowRate { get; set; } = null;
        

[JsonProperty("secondary_air_fan_total_efficiency")]
public System.Nullable<float> SecondaryAirFanTotalEfficiency { get; set; } = null;
        

[JsonProperty("secondary_air_fan_delta_pressure")]
public System.Nullable<float> SecondaryAirFanDeltaPressure { get; set; } = null;
        

[JsonProperty("primary_air_inlet_node_name")]
public string PrimaryAirInletNodeName { get; set; } = "";
        

[JsonProperty("primary_air_outlet_node_name")]
public string PrimaryAirOutletNodeName { get; set; } = "";
        

[Description("This field is not currently used and can be left blank")]
[JsonProperty("control_type")]
public string ControlType { get; set; } = "";
        

[JsonProperty("water_supply_storage_tank_name")]
public string WaterSupplyStorageTankName { get; set; } = "";
        

[Description("Enter the name of an outdoor air node")]
[JsonProperty("secondary_air_inlet_node_name")]
public string SecondaryAirInletNodeName { get; set; } = "";
    }
    
    [Description("Indirect evaporative cooler with user-specified effectiveness (can represent rigi" +
        "d pad or wetted coil), recirculating water pump, and secondary air fan. This mod" +
        "el is controlled to meet the primary air outlet temperature setpoint.")]
    [JsonObject("EvaporativeCooler:Indirect:ResearchSpecial")]
    public class EvaporativeCooler_Indirect_ResearchSpecial : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("wet operation effectiveness with respect to wetbulb depression this is the nomina" +
    "l design wetbulb effectiveness at design air flow rates and water rate")]
[JsonProperty("cooler_wetbulb_design_effectiveness")]
public System.Nullable<float> CoolerWetbulbDesignEffectiveness { get; set; } = null;
        

[Description(@"this curve modifies the wetbulb effectiveness in the previous field (eff_wb_design) by multiplying the value by the result of this curve, eff_wb = eff_wb_design * func(HXFlowRatio) x = HXFlowRatio = sum of the primary and secondary flow rates divided by the sum of the design flow rates. If this input field is left blank, constant cooler wetbulb effectiveness is assumed. This input field is required in order to use operating range control based on the following three input fields: Evaporative Operation Minimum Limit Secondary Air Drybulb Temperature, Evaporative Operation Maximum Limit Outdoor Wetbulb Temperature, and Dry Operation Maximum Limit Outdoor Drybulb Temperature")]
[JsonProperty("wetbulb_effectiveness_flow_ratio_modifier_curve_name")]
public string WetbulbEffectivenessFlowRatioModifierCurveName { get; set; } = "";
        

[Description("dry operation effectiveness with respect to drybulb temperature difference this i" +
    "s the nominal design dryblub effectiveness at design air flow rates, no evaporat" +
    "ion water active")]
[JsonProperty("cooler_drybulb_design_effectiveness")]
public System.Nullable<float> CoolerDrybulbDesignEffectiveness { get; set; } = null;
        

[Description(@"this curve modifies the drybulb effectiveness in the previous field (eff_db_design) by multiplying the value by the result of this curve, eff_db = eff_db_design * f(HXFlowRatio) x = HXFlowRatio = sum of the primary and secondary flow rates divided by the sum of the design flow rates. If this input field is left blank, constant cooler drybulb effectiveness is assumed. This input field is required in order to use operating range control based on the following three input fields: Evaporative Operation Minimum Limit Secondary Air Drybulb Temperature, Evaporative Operation Maximum Limit Outdoor Wetbulb Temperature, and Dry Operation Maximum Limit Outdoor Drybulb Temperature")]
[JsonProperty("drybulb_effectiveness_flow_ratio_modifier_curve_name")]
public string DrybulbEffectivenessFlowRatioModifierCurveName { get; set; } = "";
        

[Description("This is the nominal design pump power of water recirculation and spray for evapor" +
    "ation at design air flow rates and cooler design effectiveness")]
[JsonProperty("recirculating_water_pump_design_power")]
public string RecirculatingWaterPumpDesignPower { get; set; } = (System.String)"Autosize";
        

[Description(@"This field is used when the previous field is set to autosize. The pump power is scaled with Secondary Air Design Air Flow Rate. This value was backed out from inputs in energy plus example files. Average Pump Power sizing factor was estimated from pump power and secondary air design flow rates inputs from energyplus example files is about 90.0 [W/(m3/s)] (=90.0 ~ Pump Power / Secondary Air Design Flow Rate). The factor ranges from 55.0 to 150.0 [W/(m3/s)] were noted. The pump power can be sized to zero by setting this factor to zero.")]
[JsonProperty("water_pump_power_sizing_factor")]
public System.Nullable<float> WaterPumpPowerSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("90", CultureInfo.InvariantCulture);
        

[Description(@"this curve modifies the pump power in the previous field by multiplying the design power by the result of this curve. x = ff = flow fraction on the secondary side, secondary air flow rate during operation divided by Secondary Air Design Air Flow Rate. If this input field is left blank, pump power is assumed to be proportional to part load ratio.")]
[JsonProperty("water_pump_power_modifier_curve_name")]
public string WaterPumpPowerModifierCurveName { get; set; } = "";
        

[JsonProperty("secondary_air_design_flow_rate")]
public string SecondaryAirDesignFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("This field is used when the previous field is set to autoize. The Primary Design " +
    "Air Flow Rate is scaled using this factor to calculate the secondary design air " +
    "flow rate.")]
[JsonProperty("secondary_air_flow_scaling_factor")]
public System.Nullable<float> SecondaryAirFlowScalingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This is the fan design power at Secondary Design Air Flow Rate. This is the nomin" +
    "al design power at full speed.")]
[JsonProperty("secondary_air_fan_design_power")]
public string SecondaryAirFanDesignPower { get; set; } = (System.String)"Autosize";
        

[Description("This field is used when the previous field is set to autosize. The fan power is s" +
    "caled with Secondary Air Design Flow Rate. The default value is estimated from 1" +
    "25 Pa fan total pressure and fan total efficiency of 50.0% (250.0 = 125/0.5).")]
[JsonProperty("secondary_air_fan_sizing_specific_power")]
public System.Nullable<float> SecondaryAirFanSizingSpecificPower { get; set; } = (System.Nullable<float>)Single.Parse("250", CultureInfo.InvariantCulture);
        

[Description(@"this curve modifies the design fan power in the previous field by multiplying the value by the result of this curve. It should have a value of 1.0 at a x = 1.0. x = ff = flow fraction on the secondary side, secondary air flow rate during operation divided by Secondary Air Design Air Flow Rate. If this input field is left blank, the secondary fan power is assumed to be proportional to part load ratio.")]
[JsonProperty("secondary_air_fan_power_modifier_curve_name")]
public string SecondaryAirFanPowerModifierCurveName { get; set; } = "";
        

[JsonProperty("primary_air_inlet_node_name")]
public string PrimaryAirInletNodeName { get; set; } = "";
        

[JsonProperty("primary_air_outlet_node_name")]
public string PrimaryAirOutletNodeName { get; set; } = "";
        

[JsonProperty("primary_air_design_flow_rate")]
public string PrimaryAirDesignFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("dewpoint_effectiveness_factor")]
public System.Nullable<float> DewpointEffectivenessFactor { get; set; } = null;
        

[JsonProperty("secondary_air_inlet_node_name")]
public string SecondaryAirInletNodeName { get; set; } = "";
        

[JsonProperty("secondary_air_outlet_node_name")]
public string SecondaryAirOutletNodeName { get; set; } = "";
        

[JsonProperty("sensor_node_name")]
public string SensorNodeName { get; set; } = "";
        

[JsonProperty("relief_air_inlet_node_name")]
public string ReliefAirInletNodeName { get; set; } = "";
        

[JsonProperty("water_supply_storage_tank_name")]
public string WaterSupplyStorageTankName { get; set; } = "";
        

[Description("Rate of drift loss as a fraction of evaporated water flow rate. If this input fie" +
    "ld is left blank, then zero drift loss is assumed.")]
[JsonProperty("drift_loss_fraction")]
public System.Nullable<float> DriftLossFraction { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Characterizes the rate of blowdown in the evaporative cooler. Blowdown is water intentionally drained from the cooler in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. A typical value is 3. If left blank then there is no blowdown.")]
[JsonProperty("blowdown_concentration_ratio")]
public System.Nullable<float> BlowdownConcentrationRatio { get; set; } = null;
        

[Description(@"This input field value defines the secondary air inlet node drybulb temperature limits in degreeCelsius. When the secondary side entering air dry bulb temperature drops below this limit, then the evaporative cooler operation mode changes to dry heat exchanger. Users specify their own limits. If this field is left blank, then there is no drybulb temperature lower limit for evaporative cooler operation. If operating range control is desired then this input field and the next two input fields should be specified or all the three should be left blank or left out. If no minimum drybulb temperature limit is desired while there are maximum drybulb and wetbulb temperature limits then specify very low minimum temperature limit value (e.g. -99.0C).")]
[JsonProperty("evaporative_operation_minimum_limit_secondary_air_drybulb_temperature")]
public System.Nullable<float> EvaporativeOperationMinimumLimitSecondaryAirDrybulbTemperature { get; set; } = null;
        

[Description(@"This input field value defines the secondary air inlet node wetbulb temperature limits in degree Celsius. When the secondary side entering air wet bulb temperature exceeds this limit, then the evaporative cooler urns off and does not attempt to do any cooling. If this field is left blank, then there is no wetbulb temperature upper limit for evaporative cooler wet operation mode. If this input field is left blank then, the previous and the next input fields should also be left blank. If no maximum wetbulb temperature limits is desired while there are minimum drybulb and maximum drybulb upper temperature limits then specify very high maximum wetbulb temperature limit value (e.g. 99.0 C).")]
[JsonProperty("evaporative_operation_maximum_limit_outdoor_wetbulb_temperature")]
public System.Nullable<float> EvaporativeOperationMaximumLimitOutdoorWetbulbTemperature { get; set; } = null;
        

[Description(@"This input field value defines the secondary air inlet node drybulb temperature limits in degree Celsius. When the secondary side entering air drybulb temperature exceeds this limit, then the evaporative cooler will not run in dry operation mode or may be turned off depending on its wetbulb temperature. If this field is left blank, then there is no drybulb temperature maximum limit for evaporative cooler operation. If this input field is left blank then, the previous and the next input fields should also be left blank. If no maximum drybulb temperature limit is desired while there are minimum drybulb and maximum wetbulb upper temperature limits then specify very high maximum drybulb temperature limit value (e.g. 99.0 C).")]
[JsonProperty("dry_operation_maximum_limit_outdoor_drybulb_temperature")]
public System.Nullable<float> DryOperationMaximumLimitOutdoorDrybulbTemperature { get; set; } = null;
    }
    
    [Description("Direct evaporative cooler with user-specified effectiveness (can represent rigid " +
        "pad or similar media), and recirculating water pump, and secondary air fan. This" +
        " model is controlled to meet the primary air outlet temperature setpoint.")]
    [JsonObject("EvaporativeCooler:Direct:ResearchSpecial")]
    public class EvaporativeCooler_Direct_ResearchSpecial : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("effectiveness with respect to wet-bulb depression")]
[JsonProperty("cooler_design_effectiveness")]
public System.Nullable<float> CoolerDesignEffectiveness { get; set; } = null;
        

[Description(@"this curve modifies the design effectiveness in the previous field by multiplying the value by the result of this curve. The effectiveness flow modifier curve is a function of flow fraction. Flow fraction is the ratio of current primary air flow rate to the primary air design flow rate. If this input field is left blank then, the effectiveness is assumed to be constant.")]
[JsonProperty("effectiveness_flow_ratio_modifier_curve_name")]
public string EffectivenessFlowRatioModifierCurveName { get; set; } = "";
        

[JsonProperty("primary_air_design_flow_rate")]
public string PrimaryAirDesignFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("This is the design water pump or spray for evaporation at the primary air design " +
    "air flow rates and cooler design effectiveness")]
[JsonProperty("recirculating_water_pump_design_power")]
public string RecirculatingWaterPumpDesignPower { get; set; } = (System.String)"Autosize";
        

[Description(@"This field is used when the previous field is set to autosize. The pump power is scaled with Primary Air Design Air Flow Rate. This value was backed out from inputs in energy plus example files. Average Pump Power sizing factor was estimated from pump power and primary air design flow rates inputs from energyplus example files is about 90.0 [W/(m3/s)] (=90.0 ~ Pump Power / Primary Air Design Flow Rate). The factor ranges from 55.0 to 150.0 [W/(m3/s)]. The pump power can be sized to zero by setting this factor to zero.")]
[JsonProperty("water_pump_power_sizing_factor")]
public System.Nullable<float> WaterPumpPowerSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("90", CultureInfo.InvariantCulture);
        

[Description(@"this curve modifies the pump power in the previous field by multiplying the design power by the result of this curve. x = ff = flow fraction on the primary air. The flow fraction is the primary air flow rate during current operation divided by Primary Air Design Flow Rate")]
[JsonProperty("water_pump_power_modifier_curve_name")]
public string WaterPumpPowerModifierCurveName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("sensor_node_name")]
public string SensorNodeName { get; set; } = "";
        

[JsonProperty("water_supply_storage_tank_name")]
public string WaterSupplyStorageTankName { get; set; } = "";
        

[Description("Rate of drift loss as a fraction of evaporated water flow rate")]
[JsonProperty("drift_loss_fraction")]
public System.Nullable<float> DriftLossFraction { get; set; } = null;
        

[Description(@"Characterizes the rate of blowdown in the evaporative cooler. Blowdown is water intentionally drained from the cooler in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. A typical value is 3. If left blank then there is no blowdown.")]
[JsonProperty("blowdown_concentration_ratio")]
public System.Nullable<float> BlowdownConcentrationRatio { get; set; } = null;
        

[Description(@"This numeric field defines the evaporative cooler air inlet node drybulb temperature minimum limit in degrees Celsius. The evaporative cooler will be turned off when the evaporator cooler air inlet node dry-bulb temperature falls below this limit. The typical minimum value is 16degC. Users are allowed to specify their own limits. If this field is left blank, then there is no drybulb lower temperature limit for evaporative cooler operation.")]
[JsonProperty("evaporative_operation_minimum_drybulb_temperature")]
public System.Nullable<float> EvaporativeOperationMinimumDrybulbTemperature { get; set; } = null;
        

[Description(@"when outdoor wetbulb temperature rises above this limit the cooler shuts down. This numeric field defines the evaporative cooler air inlet node wet-bulb temperature maximum limit in degrees Celsius. The evaporative cooler will be turned off when the evaporative cooler air inlet node wet-bulb temperature exceeds this limit. The typical maximum value is 24degC. Users are allowed to specify their own limits. If this field is left blank, then there is no upper wetbulb temperature limit for evaporative cooler operation.")]
[JsonProperty("evaporative_operation_maximum_limit_wetbulb_temperature")]
public System.Nullable<float> EvaporativeOperationMaximumLimitWetbulbTemperature { get; set; } = null;
        

[Description(@"This numeric field defines the evaporative cooler air inlet node dry-bulb temperature maximum limit in degrees Celsius. The evaporative cooler will be turned off when its air inlet node drybulb temperature exceeds this limit. The typical maximum value is 26degC. Users are allowed to specify their own limits. If this field is left blank, then there is no upper temperature limit for evaporative cooler operation.")]
[JsonProperty("evaporative_operation_maximum_limit_drybulb_temperature")]
public System.Nullable<float> EvaporativeOperationMaximumLimitDrybulbTemperature { get; set; } = null;
    }
}
namespace BH.oM.Adapters.EnergyPlus.ExteriorEquipment
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("only used for Meter type reporting, does not affect building loads")]
    [JsonObject("Exterior:Lights")]
    public class Exterior_Lights : BHoMObject, IEnergyPlusClass
    {
        

[Description("units in schedule should be fraction applied to capacity of the exterior lights e" +
    "quipment, generally (0.0 - 1.0)")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[JsonProperty("design_level")]
public System.Nullable<float> DesignLevel { get; set; } = null;
        

[Description("Astronomical Clock option overrides schedule to turn lights off when sun is up")]
[JsonProperty("control_option")]
public Exterior_Lights_ControlOption ControlOption { get; set; } = (Exterior_Lights_ControlOption)Enum.Parse(typeof(Exterior_Lights_ControlOption), "AstronomicalClock");
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum Exterior_Lights_ControlOption
    {
        
        [JsonProperty("AstronomicalClock")]
        AstronomicalClock = 0,
        
        [JsonProperty("ScheduleNameOnly")]
        ScheduleNameOnly = 1,
    }
    
    [Description("only used for Meter type reporting, does not affect building loads")]
    [JsonObject("Exterior:FuelEquipment")]
    public class Exterior_FuelEquipment : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("fuel_use_type")]
public Exterior_FuelEquipment_FuelUseType FuelUseType { get; set; } = (Exterior_FuelEquipment_FuelUseType)Enum.Parse(typeof(Exterior_FuelEquipment_FuelUseType), "Coal");
        

[Description("units in schedule should be fraction applied to capacity of the exterior fuel equ" +
    "ipment, generally (0.0 - 1.0)")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[JsonProperty("design_level")]
public System.Nullable<float> DesignLevel { get; set; } = null;
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum Exterior_FuelEquipment_FuelUseType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("DistrictCooling")]
        DistrictCooling = 2,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 3,
        
        [JsonProperty("Electricity")]
        Electricity = 4,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 5,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 6,
        
        [JsonProperty("Gasoline")]
        Gasoline = 7,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 8,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 9,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 10,
        
        [JsonProperty("Propane")]
        Propane = 11,
        
        [JsonProperty("Steam")]
        Steam = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    [Description("only used for Meter type reporting, does not affect building loads")]
    [JsonObject("Exterior:WaterEquipment")]
    public class Exterior_WaterEquipment : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("fuel_use_type")]
public Exterior_WaterEquipment_FuelUseType FuelUseType { get; set; } = (Exterior_WaterEquipment_FuelUseType)Enum.Parse(typeof(Exterior_WaterEquipment_FuelUseType), "Water");
        

[Description("units in Schedule should be fraction applied to capacity of the exterior water eq" +
    "uipment, generally (0.0 - 1.0)")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[JsonProperty("design_level")]
public System.Nullable<float> DesignLevel { get; set; } = null;
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum Exterior_WaterEquipment_FuelUseType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Water")]
        Water = 1,
    }
}
namespace BH.oM.Adapters.EnergyPlus.ExternalInterface
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"This object activates the external interface of EnergyPlus. If the object ExternalInterface is present, then all ExtnernalInterface:* objects will receive their values from the BCVTB interface or from FMUs at each zone time step. If this object is not present, then the values of these objects will be fixed at the value declared in the ""initial value"" field of the corresponding object, and a warning will be written to the EnergyPlus error file.")]
    [JsonObject("ExternalInterface")]
    public class ExternalInterface : BHoMObject, IEnergyPlusClass
    {
        

[Description("Name of External Interface Currently, the only valid entries are PtolemyServer, F" +
    "unctionalMockupUnitImport, and FunctionalMockupUnitExport.")]
[JsonProperty("name_of_external_interface")]
public ExternalInterface_NameOfExternalInterface NameOfExternalInterface { get; set; } = (ExternalInterface_NameOfExternalInterface)Enum.Parse(typeof(ExternalInterface_NameOfExternalInterface), "FunctionalMockupUnitExport");
    }
    
    public enum ExternalInterface_NameOfExternalInterface
    {
        
        [JsonProperty("FunctionalMockupUnitExport")]
        FunctionalMockupUnitExport = 0,
        
        [JsonProperty("FunctionalMockupUnitImport")]
        FunctionalMockupUnitImport = 1,
        
        [JsonProperty("PtolemyServer")]
        PtolemyServer = 2,
    }
    
    [Description("A ExternalInterface:Schedule contains only one value, which is used during the wa" +
        "rm-up period and the system sizing.")]
    [JsonObject("ExternalInterface:Schedule")]
    public class ExternalInterface_Schedule : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("schedule_type_limits_name")]
public string ScheduleTypeLimitsName { get; set; } = "";
        

[Description("Used during warm-up and system sizing.")]
[JsonProperty("initial_value")]
public System.Nullable<float> InitialValue { get; set; } = null;
    }
    
    [Description(@"This input object is similar to EnergyManagementSystem:GlobalVariable. However, at the beginning of each zone time step, its value is set to the value received from the external interface. During the warm-up period and the system sizing, its value is set to the value specified by the field ""initial value."" This object can be used to move data into Erl subroutines.")]
    [JsonObject("ExternalInterface:Variable")]
    public class ExternalInterface_Variable : BHoMObject, IEnergyPlusClass
    {
        

[Description("Used during warm-up and system sizing.")]
[JsonProperty("initial_value")]
public System.Nullable<float> InitialValue { get; set; } = null;
    }
    
    [Description("Hardware portion of EMS used to set up actuators in the model")]
    [JsonObject("ExternalInterface:Actuator")]
    public class ExternalInterface_Actuator : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("actuated_component_unique_name")]
public string ActuatedComponentUniqueName { get; set; } = "";
        

[JsonProperty("actuated_component_type")]
public string ActuatedComponentType { get; set; } = "";
        

[JsonProperty("actuated_component_control_type")]
public string ActuatedComponentControlType { get; set; } = "";
        

[Description("If specified, it is used during warm-up and system sizing. If not specified, then" +
    " the actuator only overwrites the actuated component after the warm-up and syste" +
    "m sizing.")]
[JsonProperty("optional_initial_value")]
public System.Nullable<float> OptionalInitialValue { get; set; } = null;
    }
    
    [Description("This object declares an FMU")]
    [JsonObject("ExternalInterface:FunctionalMockupUnitImport")]
    public class ExternalInterface_FunctionalMockupUnitImport : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("fmu_file_name")]
public string FmuFileName { get; set; } = "";
        

[Description("in milli-seconds")]
[JsonProperty("fmu_timeout")]
public System.Nullable<float> FmuTimeout { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("fmu_loggingon")]
public System.Nullable<float> FmuLoggingon { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    [Description("This object declares an FMU input variable")]
    [JsonObject("ExternalInterface:FunctionalMockupUnitImport:From:Variable")]
    public class ExternalInterface_FunctionalMockupUnitImport_From_Variable : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("output_variable_index_key_name")]
public string OutputVariableIndexKeyName { get; set; } = "";
        

[JsonProperty("output_variable_name")]
public string OutputVariableName { get; set; } = "";
        

[JsonProperty("fmu_file_name")]
public string FmuFileName { get; set; } = "";
        

[JsonProperty("fmu_instance_name")]
public string FmuInstanceName { get; set; } = "";
        

[JsonProperty("fmu_variable_name")]
public string FmuVariableName { get; set; } = "";
    }
    
    [Description("This objects contains only one value, which is used during the first call of Ener" +
        "gyPlus")]
    [JsonObject("ExternalInterface:FunctionalMockupUnitImport:To:Schedule")]
    public class ExternalInterface_FunctionalMockupUnitImport_To_Schedule : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("schedule_type_limits_names")]
public string ScheduleTypeLimitsNames { get; set; } = "";
        

[JsonProperty("fmu_file_name")]
public string FmuFileName { get; set; } = "";
        

[JsonProperty("fmu_instance_name")]
public string FmuInstanceName { get; set; } = "";
        

[JsonProperty("fmu_variable_name")]
public string FmuVariableName { get; set; } = "";
        

[Description("Used during the first call of EnergyPlus.")]
[JsonProperty("initial_value")]
public System.Nullable<float> InitialValue { get; set; } = null;
    }
    
    [Description("Hardware portion of EMS used to set up actuators in the model that are dynamicall" +
        "y updated from the FMU.")]
    [JsonObject("ExternalInterface:FunctionalMockupUnitImport:To:Actuator")]
    public class ExternalInterface_FunctionalMockupUnitImport_To_Actuator : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("actuated_component_unique_name")]
public string ActuatedComponentUniqueName { get; set; } = "";
        

[JsonProperty("actuated_component_type")]
public string ActuatedComponentType { get; set; } = "";
        

[JsonProperty("actuated_component_control_type")]
public string ActuatedComponentControlType { get; set; } = "";
        

[JsonProperty("fmu_file_name")]
public string FmuFileName { get; set; } = "";
        

[JsonProperty("fmu_instance_name")]
public string FmuInstanceName { get; set; } = "";
        

[JsonProperty("fmu_variable_name")]
public string FmuVariableName { get; set; } = "";
        

[Description("Used during the first call of EnergyPlus.")]
[JsonProperty("initial_value")]
public System.Nullable<float> InitialValue { get; set; } = null;
    }
    
    [Description("Declares Erl variable as having global scope No spaces allowed in names used for " +
        "Erl variables")]
    [JsonObject("ExternalInterface:FunctionalMockupUnitImport:To:Variable")]
    public class ExternalInterface_FunctionalMockupUnitImport_To_Variable : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("fmu_file_name")]
public string FmuFileName { get; set; } = "";
        

[JsonProperty("fmu_instance_name")]
public string FmuInstanceName { get; set; } = "";
        

[JsonProperty("fmu_variable_name")]
public string FmuVariableName { get; set; } = "";
        

[Description("Used during the first call of EnergyPlus.")]
[JsonProperty("initial_value")]
public System.Nullable<float> InitialValue { get; set; } = null;
    }
    
    [Description("This object declares an FMU input variable")]
    [JsonObject("ExternalInterface:FunctionalMockupUnitExport:From:Variable")]
    public class ExternalInterface_FunctionalMockupUnitExport_From_Variable : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("output_variable_index_key_name")]
public string OutputVariableIndexKeyName { get; set; } = "";
        

[JsonProperty("output_variable_name")]
public string OutputVariableName { get; set; } = "";
        

[JsonProperty("fmu_variable_name")]
public string FmuVariableName { get; set; } = "";
    }
    
    [Description("This objects contains only one value, which is used during the first call of Ener" +
        "gyPlus")]
    [JsonObject("ExternalInterface:FunctionalMockupUnitExport:To:Schedule")]
    public class ExternalInterface_FunctionalMockupUnitExport_To_Schedule : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[JsonProperty("schedule_type_limits_names")]
public string ScheduleTypeLimitsNames { get; set; } = "";
        

[JsonProperty("fmu_variable_name")]
public string FmuVariableName { get; set; } = "";
        

[Description("Used during the first call of EnergyPlus.")]
[JsonProperty("initial_value")]
public System.Nullable<float> InitialValue { get; set; } = null;
    }
    
    [Description("Hardware portion of EMS used to set up actuators in the model that are dynamicall" +
        "y updated from the FMU.")]
    [JsonObject("ExternalInterface:FunctionalMockupUnitExport:To:Actuator")]
    public class ExternalInterface_FunctionalMockupUnitExport_To_Actuator : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("actuated_component_unique_name")]
public string ActuatedComponentUniqueName { get; set; } = "";
        

[JsonProperty("actuated_component_type")]
public string ActuatedComponentType { get; set; } = "";
        

[JsonProperty("actuated_component_control_type")]
public string ActuatedComponentControlType { get; set; } = "";
        

[JsonProperty("fmu_variable_name")]
public string FmuVariableName { get; set; } = "";
        

[Description("Used during the first call of EnergyPlus.")]
[JsonProperty("initial_value")]
public System.Nullable<float> InitialValue { get; set; } = null;
    }
    
    [Description("Declares Erl variable as having global scope No spaces allowed in names used for " +
        "Erl variables")]
    [JsonObject("ExternalInterface:FunctionalMockupUnitExport:To:Variable")]
    public class ExternalInterface_FunctionalMockupUnitExport_To_Variable : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("fmu_variable_name")]
public string FmuVariableName { get; set; } = "";
        

[Description("Used during the first call of EnergyPlus.")]
[JsonProperty("initial_value")]
public System.Nullable<float> InitialValue { get; set; } = null;
    }
}
namespace BH.oM.Adapters.EnergyPlus.Fans
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Versatile simple fan that can be used in variable air volume, constant volume, on-off cycling, two-speed or multi-speed applications. Performance at different flow rates, or speed levels, is determined using separate performance curve or table or prescribed power fractions at discrete speed levels for two-speed or multi-speed fans.")]
    [JsonObject("Fan:SystemModel")]
    public class Fan_SystemModel : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this fan. Schedule value > 0 means the fan is avai" +
    "lable. If this field is blank, the fan is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("design_maximum_air_flow_rate")]
public string DesignMaximumAirFlowRate { get; set; } = "";
        

[JsonProperty("speed_control_method")]
public Fan_SystemModel_SpeedControlMethod SpeedControlMethod { get; set; } = (Fan_SystemModel_SpeedControlMethod)Enum.Parse(typeof(Fan_SystemModel_SpeedControlMethod), "Discrete");
        

[JsonProperty("electric_power_minimum_flow_rate_fraction")]
public System.Nullable<float> ElectricPowerMinimumFlowRateFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("design_pressure_rise")]
public System.Nullable<float> DesignPressureRise { get; set; } = null;
        

[JsonProperty("motor_efficiency")]
public System.Nullable<float> MotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("0.0 means fan motor outside of air stream, 1.0 means motor inside of air stream")]
[JsonProperty("motor_in_air_stream_fraction")]
public System.Nullable<float> MotorInAirStreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Fan power consumption at maximum air flow rate. If autosized the method used to s" +
    "cale power is chosen in the following field")]
[JsonProperty("design_electric_power_consumption")]
public string DesignElectricPowerConsumption { get; set; } = (System.String)"Autosize";
        

[JsonProperty("design_power_sizing_method")]
public Fan_SystemModel_DesignPowerSizingMethod DesignPowerSizingMethod { get; set; } = (Fan_SystemModel_DesignPowerSizingMethod)Enum.Parse(typeof(Fan_SystemModel_DesignPowerSizingMethod), "PowerPerFlowPerPressure");
        

[JsonProperty("electric_power_per_unit_flow_rate")]
public System.Nullable<float> ElectricPowerPerUnitFlowRate { get; set; } = null;
        

[JsonProperty("electric_power_per_unit_flow_rate_per_unit_pressure")]
public System.Nullable<float> ElectricPowerPerUnitFlowRatePerUnitPressure { get; set; } = (System.Nullable<float>)Single.Parse("1.66667", CultureInfo.InvariantCulture);
        

[JsonProperty("fan_total_efficiency")]
public System.Nullable<float> FanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[Description(@"independent variable is normalized flow rate, current flow divided by Design Maximum Air Flow Rate. dependent variable is modification factor multiplied by Design Power Consumption. This field is required if Speed Control Method is set to Continuous or if the Number of Speeds is greater than 1 and Speed Electric Power Fraction fields are not used.")]
[JsonProperty("electric_power_function_of_flow_fraction_curve_name")]
public string ElectricPowerFunctionOfFlowFractionCurveName { get; set; } = "";
        

[Description("Total system fan pressure rise at the fan when in night mode using AvailabilityMa" +
    "nager:NightVentilation")]
[JsonProperty("night_ventilation_mode_pressure_rise")]
public System.Nullable<float> NightVentilationModePressureRise { get; set; } = null;
        

[Description("Fraction of Design Maximum Air Flow Rate to use when in night mode using Availabi" +
    "lityManager:NightVentilation")]
[JsonProperty("night_ventilation_mode_flow_fraction")]
public System.Nullable<float> NightVentilationModeFlowFraction { get; set; } = null;
        

[Description("optional, if used fan motor heat losses that not added to air stream are transfer" +
    "red to zone as internal gains")]
[JsonProperty("motor_loss_zone_name")]
public string MotorLossZoneName { get; set; } = "";
        

[Description("optional. If zone identified in previous field then this determines the split bet" +
    "ween convection and radiation for the fan motor\'s skin losses")]
[JsonProperty("motor_loss_radiative_fraction")]
public System.Nullable<float> MotorLossRadiativeFraction { get; set; } = null;
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
        

[Description(@"number of different speed levels available when Speed Control Method is set to Discrete Speed need to be arranged in increasing order in remaining field sets. If set to 1, or omitted, and Speed Control Method is Discrete then constant fan speed is the design maximum.")]
[JsonProperty("number_of_speeds")]
public System.Nullable<float> NumberOfSpeeds { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("speed_fractions")]
public string SpeedFractions { get; set; } = "";
    }
    
    public enum Fan_SystemModel_SpeedControlMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Continuous")]
        Continuous = 1,
        
        [JsonProperty("Discrete")]
        Discrete = 2,
    }
    
    public enum Fan_SystemModel_DesignPowerSizingMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("PowerPerFlow")]
        PowerPerFlow = 1,
        
        [JsonProperty("PowerPerFlowPerPressure")]
        PowerPerFlowPerPressure = 2,
        
        [JsonProperty("TotalEfficiencyAndPressure")]
        TotalEfficiencyAndPressure = 3,
    }
    
    [Description("Constant volume fan that is intended to operate continuously based on a time sche" +
        "dule. This fan will not cycle on and off based on cooling/heating load or other " +
        "control signals.")]
    [JsonObject("Fan:ConstantVolume")]
    public class Fan_ConstantVolume : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("fan_total_efficiency")]
public System.Nullable<float> FanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("pressure_rise")]
public System.Nullable<float> PressureRise { get; set; } = null;
        

[JsonProperty("maximum_flow_rate")]
public string MaximumFlowRate { get; set; } = "";
        

[JsonProperty("motor_efficiency")]
public System.Nullable<float> MotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("0.0 means fan motor outside of air stream, 1.0 means motor inside of air stream")]
[JsonProperty("motor_in_airstream_fraction")]
public System.Nullable<float> MotorInAirstreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    [Description("Variable air volume fan where the electric power input varies according to a perf" +
        "ormance curve as a function of flow fraction.")]
    [JsonObject("Fan:VariableVolume")]
    public class Fan_VariableVolume : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("fan_total_efficiency")]
public System.Nullable<float> FanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("pressure_rise")]
public System.Nullable<float> PressureRise { get; set; } = null;
        

[JsonProperty("maximum_flow_rate")]
public string MaximumFlowRate { get; set; } = "";
        

[JsonProperty("fan_power_minimum_flow_rate_input_method")]
public Fan_VariableVolume_FanPowerMinimumFlowRateInputMethod FanPowerMinimumFlowRateInputMethod { get; set; } = (Fan_VariableVolume_FanPowerMinimumFlowRateInputMethod)Enum.Parse(typeof(Fan_VariableVolume_FanPowerMinimumFlowRateInputMethod), "Fraction");
        

[JsonProperty("fan_power_minimum_flow_fraction")]
public System.Nullable<float> FanPowerMinimumFlowFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.25", CultureInfo.InvariantCulture);
        

[JsonProperty("fan_power_minimum_air_flow_rate")]
public System.Nullable<float> FanPowerMinimumAirFlowRate { get; set; } = null;
        

[JsonProperty("motor_efficiency")]
public System.Nullable<float> MotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("0.0 means fan motor outside of air stream, 1.0 means motor inside of air stream")]
[JsonProperty("motor_in_airstream_fraction")]
public System.Nullable<float> MotorInAirstreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("all Fan Power Coefficients should not be 0.0 or no fan power will be consumed. Fa" +
    "n Power Coefficents are specified as function of full flow rate/power Equation:")]
[JsonProperty("fan_power_coefficient_1")]
public System.Nullable<float> FanPowerCoefficient1 { get; set; } = null;
        

[JsonProperty("fan_power_coefficient_2")]
public System.Nullable<float> FanPowerCoefficient2 { get; set; } = null;
        

[JsonProperty("fan_power_coefficient_3")]
public System.Nullable<float> FanPowerCoefficient3 { get; set; } = null;
        

[JsonProperty("fan_power_coefficient_4")]
public System.Nullable<float> FanPowerCoefficient4 { get; set; } = null;
        

[JsonProperty("fan_power_coefficient_5")]
public System.Nullable<float> FanPowerCoefficient5 { get; set; } = null;
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum Fan_VariableVolume_FanPowerMinimumFlowRateInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FixedFlowRate")]
        FixedFlowRate = 1,
        
        [JsonProperty("Fraction")]
        Fraction = 2,
    }
    
    [Description("Constant volume fan that is intended to cycle on and off based on cooling/heating" +
        " load or other control signals. This fan can also operate continuously like Fan:" +
        "ConstantVolume.")]
    [JsonObject("Fan:OnOff")]
    public class Fan_OnOff : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("fan_total_efficiency")]
public System.Nullable<float> FanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.6", CultureInfo.InvariantCulture);
        

[JsonProperty("pressure_rise")]
public System.Nullable<float> PressureRise { get; set; } = null;
        

[JsonProperty("maximum_flow_rate")]
public string MaximumFlowRate { get; set; } = "";
        

[JsonProperty("motor_efficiency")]
public System.Nullable<float> MotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[Description("0.0 means fan motor outside of air stream, 1.0 means motor inside of air stream")]
[JsonProperty("motor_in_airstream_fraction")]
public System.Nullable<float> MotorInAirstreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("fan_power_ratio_function_of_speed_ratio_curve_name")]
public string FanPowerRatioFunctionOfSpeedRatioCurveName { get; set; } = "";
        

[JsonProperty("fan_efficiency_ratio_function_of_speed_ratio_curve_name")]
public string FanEfficiencyRatioFunctionOfSpeedRatioCurveName { get; set; } = "";
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    [Description("Models a fan that exhausts air from a zone.")]
    [JsonObject("Fan:ZoneExhaust")]
    public class Fan_ZoneExhaust : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("fan_total_efficiency")]
public System.Nullable<float> FanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.6", CultureInfo.InvariantCulture);
        

[JsonProperty("pressure_rise")]
public System.Nullable<float> PressureRise { get; set; } = null;
        

[JsonProperty("maximum_flow_rate")]
public System.Nullable<float> MaximumFlowRate { get; set; } = null;
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
        

[Description("If field is used, then when fan runs the exhausted air flow rate is controlled to" +
    " be the scheduled fraction times the Maximum Flow Rate")]
[JsonProperty("flow_fraction_schedule_name")]
public string FlowFractionScheduleName { get; set; } = "";
        

[Description("Control if fan is to be interlocked with HVAC system Availability Managers or not" +
    ".")]
[JsonProperty("system_availability_manager_coupling_mode")]
public Fan_ZoneExhaust_SystemAvailabilityManagerCouplingMode SystemAvailabilityManagerCouplingMode { get; set; } = (Fan_ZoneExhaust_SystemAvailabilityManagerCouplingMode)Enum.Parse(typeof(Fan_ZoneExhaust_SystemAvailabilityManagerCouplingMode), "Coupled");
        

[Description("If field is used, the exhaust fan will not run if the zone temperature is lower t" +
    "han this limit")]
[JsonProperty("minimum_zone_temperature_limit_schedule_name")]
public string MinimumZoneTemperatureLimitScheduleName { get; set; } = "";
        

[Description("Used to control fan\'s impact on flow at the return air node. Enter the portion of" +
    " the exhaust that is balanced by simple airflows.")]
[JsonProperty("balanced_exhaust_fraction_schedule_name")]
public string BalancedExhaustFractionScheduleName { get; set; } = "";
    }
    
    public enum Fan_ZoneExhaust_SystemAvailabilityManagerCouplingMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Coupled")]
        Coupled = 1,
        
        [JsonProperty("Decoupled")]
        Decoupled = 2,
    }
    
    [Description(@"Specifies an alternate set of performance parameters for a fan. These alternate parameters are used when a system manager (such as AvailabilityManager:NightVentilation) sets a specified flow rate. May be used with Fan:ConstantVolume, Fan:VariableVolume and Fan:ComponentModel. If the fan model senses that a fixed flow rate has been set, it will use these alternate performance parameters. It is assumed that the fan will run at a fixed speed in the alternate mode.")]
    [JsonObject("FanPerformance:NightVentilation")]
    public class FanPerformance_NightVentilation : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("fan_name")]
public string FanName { get; set; } = "";
        

[JsonProperty("fan_total_efficiency")]
public System.Nullable<float> FanTotalEfficiency { get; set; } = null;
        

[JsonProperty("pressure_rise")]
public System.Nullable<float> PressureRise { get; set; } = null;
        

[JsonProperty("maximum_flow_rate")]
public string MaximumFlowRate { get; set; } = "";
        

[JsonProperty("motor_efficiency")]
public System.Nullable<float> MotorEfficiency { get; set; } = null;
        

[Description("0.0 means fan motor outside of airstream 1.0 means fan motor inside of airstream")]
[JsonProperty("motor_in_airstream_fraction")]
public System.Nullable<float> MotorInAirstreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    [Description("A detailed fan type for constant-air-volume (CAV) and variable-air-volume (VAV) s" +
        "ystems. It includes inputs that describe the air-distribution system as well as " +
        "the fan, drive belt (if used), motor, and variable-frequency-drive (if used).")]
    [JsonObject("Fan:ComponentModel")]
    public class Fan_ComponentModel : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("maximum_flow_rate")]
public string MaximumFlowRate { get; set; } = "";
        

[JsonProperty("minimum_flow_rate")]
public string MinimumFlowRate { get; set; } = "";
        

[Description("Applied to specified or autosized max fan airflow")]
[JsonProperty("fan_sizing_factor")]
public System.Nullable<float> FanSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Diameter of wheel outer circumference")]
[JsonProperty("fan_wheel_diameter")]
public System.Nullable<float> FanWheelDiameter { get; set; } = null;
        

[Description("Area at fan outlet plane for determining discharge velocity pressure")]
[JsonProperty("fan_outlet_area")]
public System.Nullable<float> FanOutletArea { get; set; } = null;
        

[Description("Maximum ratio between power delivered to air and fan shaft input power Determined" +
    " from fan performance data")]
[JsonProperty("maximum_fan_static_efficiency")]
public System.Nullable<float> MaximumFanStaticEfficiency { get; set; } = null;
        

[Description("Euler number (Eu) determined from fan performance data")]
[JsonProperty("euler_number_at_maximum_fan_static_efficiency")]
public System.Nullable<float> EulerNumberAtMaximumFanStaticEfficiency { get; set; } = null;
        

[Description("Corresponds to maximum ratio between fan airflow and fan shaft rotational speed f" +
    "or specified fan wheel diameter Determined from fan performance data")]
[JsonProperty("maximum_dimensionless_fan_airflow")]
public System.Nullable<float> MaximumDimensionlessFanAirflow { get; set; } = null;
        

[Description("Ratio of motor pulley diameter to fan pulley diameter")]
[JsonProperty("motor_fan_pulley_ratio")]
public string MotorFanPulleyRatio { get; set; } = (System.String)"1";
        

[Description("Maximum torque transmitted by belt")]
[JsonProperty("belt_maximum_torque")]
public string BeltMaximumTorque { get; set; } = "";
        

[Description("Applied to specified or autosized max torque transmitted by belt")]
[JsonProperty("belt_sizing_factor")]
public System.Nullable<float> BeltSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Region 1 to 2 curve transition for belt normalized efficiency")]
[JsonProperty("belt_fractional_torque_transition")]
public System.Nullable<float> BeltFractionalTorqueTransition { get; set; } = (System.Nullable<float>)Single.Parse("0.167", CultureInfo.InvariantCulture);
        

[Description("Maximum rotational speed of fan motor shaft")]
[JsonProperty("motor_maximum_speed")]
public System.Nullable<float> MotorMaximumSpeed { get; set; } = null;
        

[Description("Maximum power input to drive belt by motor")]
[JsonProperty("maximum_motor_output_power")]
public string MaximumMotorOutputPower { get; set; } = "";
        

[Description("Applied to specified or autosized motor output power")]
[JsonProperty("motor_sizing_factor")]
public System.Nullable<float> MotorSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("0.0 means motor outside air stream 1.0 means motor inside air stream")]
[JsonProperty("motor_in_airstream_fraction")]
public System.Nullable<float> MotorInAirstreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Efficiency depends on fraction of full-load motor speed Efficiency depends on  fr" +
    "action of full-load motor input power If field blank, then assumes constant VFD " +
    "efficiency (0.97)")]
[JsonProperty("vfd_efficiency_type")]
public Fan_ComponentModel_VfdEfficiencyType VfdEfficiencyType { get; set; } = (Fan_ComponentModel_VfdEfficiencyType)Enum.Parse(typeof(Fan_ComponentModel_VfdEfficiencyType), "Power");
        

[Description("Maximum power input to motor by VFD")]
[JsonProperty("maximum_vfd_output_power")]
public string MaximumVfdOutputPower { get; set; } = "";
        

[Description("Applied to specified or autosized VFD output power")]
[JsonProperty("vfd_sizing_factor")]
public System.Nullable<float> VfdSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Pressure rise depends on volumetric flow, system resistances, system leakage, and" +
    " duct static pressure set point")]
[JsonProperty("fan_pressure_rise_curve_name")]
public string FanPressureRiseCurveName { get; set; } = "";
        

[Description("Function of fan volumetric flow Minimum and maximum fan airflows correspond respe" +
    "ctively to minimum and maximum duct static pressure set points")]
[JsonProperty("duct_static_pressure_reset_curve_name")]
public string DuctStaticPressureResetCurveName { get; set; } = "";
        

[Description("xfan <= 0 Curve should have maximum of 1.0")]
[JsonProperty("normalized_fan_static_efficiency_curve_name_non_stall_region")]
public string NormalizedFanStaticEfficiencyCurveNameNonStallRegion { get; set; } = "";
        

[Description("xfan > 0 Curve should have maximum of 1.0")]
[JsonProperty("normalized_fan_static_efficiency_curve_name_stall_region")]
public string NormalizedFanStaticEfficiencyCurveNameStallRegion { get; set; } = "";
        

[Description("xspd <= 0 Curve should have maximum of 1.0")]
[JsonProperty("normalized_dimensionless_airflow_curve_name_non_stall_region")]
public string NormalizedDimensionlessAirflowCurveNameNonStallRegion { get; set; } = "";
        

[Description("xspd > 0 Curve should have maximum of 1.0")]
[JsonProperty("normalized_dimensionless_airflow_curve_name_stall_region")]
public string NormalizedDimensionlessAirflowCurveNameStallRegion { get; set; } = "";
        

[Description("Determines maximum fan drive belt efficiency in log space as function of xbelt,ma" +
    "x Curve should have minimum of -4.6 and maximum of 0.0 If field blank, assumes o" +
    "utput of curve is always 1.0")]
[JsonProperty("maximum_belt_efficiency_curve_name")]
public string MaximumBeltEfficiencyCurveName { get; set; } = "";
        

[Description("Region 1 (0 <= xbelt < xbelt,trans) Curve should have minimum > 0.0 and maximum o" +
    "f 1.0 If field blank, assumes output of curve is always 1.0 in Region 1")]
[JsonProperty("normalized_belt_efficiency_curve_name_region_1")]
public string NormalizedBeltEfficiencyCurveNameRegion1 { get; set; } = "";
        

[Description("Region 2 (xbelt,trans <= xbelt <= 1) Curve should have minimum > 0.0 and maximum " +
    "of 1.0 If field blank, assumes output of curve is always 1.0 in Region 2")]
[JsonProperty("normalized_belt_efficiency_curve_name_region_2")]
public string NormalizedBeltEfficiencyCurveNameRegion2 { get; set; } = "";
        

[Description("Determines normalized drive belt efficiency Region 3 (xbelt > 1) Curve should hav" +
    "e minimum > 0.0 and maximum of 1.0 If field blank, assumes output of curve is al" +
    "ways 1.0 in Region 3")]
[JsonProperty("normalized_belt_efficiency_curve_name_region_3")]
public string NormalizedBeltEfficiencyCurveNameRegion3 { get; set; } = "";
        

[Description("Curve should have minimum > 0.0 and maximum of 1.0 If field blank, assumes output" +
    " of curve is always 1.0")]
[JsonProperty("maximum_motor_efficiency_curve_name")]
public string MaximumMotorEfficiencyCurveName { get; set; } = "";
        

[Description("Curve should have minimum > 0.0 and maximum of 1.0 If field blank, assumes output" +
    " of curve is always 1.0")]
[JsonProperty("normalized_motor_efficiency_curve_name")]
public string NormalizedMotorEfficiencyCurveName { get; set; } = "";
        

[Description("Determines VFD efficiency as function of motor load or speed fraction Curve shoul" +
    "d have minimum > 0.0 and maximum of 1.0 If field blank, assumes constant VFD eff" +
    "iciency (0.97)")]
[JsonProperty("vfd_efficiency_curve_name")]
public string VfdEfficiencyCurveName { get; set; } = "";
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum Fan_ComponentModel_VfdEfficiencyType
    {
        
        [JsonProperty("Power")]
        Power = 0,
        
        [JsonProperty("Speed")]
        Speed = 1,
    }
}
namespace BH.oM.Adapters.EnergyPlus.FluidProperties
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("potential fluid name/type in the input file repeat this object for each fluid")]
    [JsonObject("FluidProperties:Name")]
    public class FluidProperties_Name : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("fluid_name")]
public string FluidName { get; set; } = "";
        

[JsonProperty("fluid_type")]
public FluidProperties_Name_FluidType FluidType { get; set; } = (FluidProperties_Name_FluidType)Enum.Parse(typeof(FluidProperties_Name_FluidType), "Glycol");
    }
    
    public enum FluidProperties_Name_FluidType
    {
        
        [JsonProperty("Glycol")]
        Glycol = 0,
        
        [JsonProperty("Refrigerant")]
        Refrigerant = 1,
    }
    
    [Description("glycol and what concentration it is")]
    [JsonObject("FluidProperties:GlycolConcentration")]
    public class FluidProperties_GlycolConcentration : BHoMObject, IEnergyPlusClass
    {
        

[Description("or UserDefined Fluid (must show up as a glycol in FluidProperties:Name object)")]
[JsonProperty("glycol_type")]
public FluidProperties_GlycolConcentration_GlycolType GlycolType { get; set; } = (FluidProperties_GlycolConcentration_GlycolType)Enum.Parse(typeof(FluidProperties_GlycolConcentration_GlycolType), "EthyleneGlycol");
        

[JsonProperty("user_defined_glycol_name")]
public string UserDefinedGlycolName { get; set; } = "";
        

[JsonProperty("glycol_concentration")]
public System.Nullable<float> GlycolConcentration { get; set; } = null;
    }
    
    public enum FluidProperties_GlycolConcentration_GlycolType
    {
        
        [JsonProperty("EthyleneGlycol")]
        EthyleneGlycol = 0,
        
        [JsonProperty("PropyleneGlycol")]
        PropyleneGlycol = 1,
        
        [JsonProperty("UserDefinedGlycolType")]
        UserDefinedGlycolType = 2,
    }
    
    [Description(@"property values for fluid properties list of up to 250 temperatures, note that number of property values must match the number of properties in other words, there must be a one-to-one correspondence between the property values in this list and the actual properties list in other syntax degrees C (for all temperature inputs)")]
    [JsonObject("FluidProperties:Temperatures")]
    public class FluidProperties_Temperatures : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("temperature_1")]
public System.Nullable<float> Temperature1 { get; set; } = null;
        

[JsonProperty("temperature_2")]
public System.Nullable<float> Temperature2 { get; set; } = null;
        

[JsonProperty("temperature_3")]
public System.Nullable<float> Temperature3 { get; set; } = null;
        

[JsonProperty("temperature_4")]
public System.Nullable<float> Temperature4 { get; set; } = null;
        

[JsonProperty("temperature_5")]
public System.Nullable<float> Temperature5 { get; set; } = null;
        

[JsonProperty("temperature_6")]
public System.Nullable<float> Temperature6 { get; set; } = null;
        

[JsonProperty("temperature_7")]
public System.Nullable<float> Temperature7 { get; set; } = null;
        

[JsonProperty("temperature_8")]
public System.Nullable<float> Temperature8 { get; set; } = null;
        

[JsonProperty("temperature_9")]
public System.Nullable<float> Temperature9 { get; set; } = null;
        

[JsonProperty("temperature_10")]
public System.Nullable<float> Temperature10 { get; set; } = null;
        

[JsonProperty("temperature_11")]
public System.Nullable<float> Temperature11 { get; set; } = null;
        

[JsonProperty("temperature_12")]
public System.Nullable<float> Temperature12 { get; set; } = null;
        

[JsonProperty("temperature_13")]
public System.Nullable<float> Temperature13 { get; set; } = null;
        

[JsonProperty("temperature_14")]
public System.Nullable<float> Temperature14 { get; set; } = null;
        

[JsonProperty("temperature_15")]
public System.Nullable<float> Temperature15 { get; set; } = null;
        

[JsonProperty("temperature_16")]
public System.Nullable<float> Temperature16 { get; set; } = null;
        

[JsonProperty("temperature_17")]
public System.Nullable<float> Temperature17 { get; set; } = null;
        

[JsonProperty("temperature_18")]
public System.Nullable<float> Temperature18 { get; set; } = null;
        

[JsonProperty("temperature_19")]
public System.Nullable<float> Temperature19 { get; set; } = null;
        

[JsonProperty("temperature_20")]
public System.Nullable<float> Temperature20 { get; set; } = null;
        

[JsonProperty("temperature_21")]
public System.Nullable<float> Temperature21 { get; set; } = null;
        

[JsonProperty("temperature_22")]
public System.Nullable<float> Temperature22 { get; set; } = null;
        

[JsonProperty("temperature_23")]
public System.Nullable<float> Temperature23 { get; set; } = null;
        

[JsonProperty("temperature_24")]
public System.Nullable<float> Temperature24 { get; set; } = null;
        

[JsonProperty("temperature_25")]
public System.Nullable<float> Temperature25 { get; set; } = null;
        

[JsonProperty("temperature_26")]
public System.Nullable<float> Temperature26 { get; set; } = null;
        

[JsonProperty("temperature_27")]
public System.Nullable<float> Temperature27 { get; set; } = null;
        

[JsonProperty("temperature_28")]
public System.Nullable<float> Temperature28 { get; set; } = null;
        

[JsonProperty("temperature_29")]
public System.Nullable<float> Temperature29 { get; set; } = null;
        

[JsonProperty("temperature_30")]
public System.Nullable<float> Temperature30 { get; set; } = null;
        

[JsonProperty("temperature_31")]
public System.Nullable<float> Temperature31 { get; set; } = null;
        

[JsonProperty("temperature_32")]
public System.Nullable<float> Temperature32 { get; set; } = null;
        

[JsonProperty("temperature_33")]
public System.Nullable<float> Temperature33 { get; set; } = null;
        

[JsonProperty("temperature_34")]
public System.Nullable<float> Temperature34 { get; set; } = null;
        

[JsonProperty("temperature_35")]
public System.Nullable<float> Temperature35 { get; set; } = null;
        

[JsonProperty("temperature_36")]
public System.Nullable<float> Temperature36 { get; set; } = null;
        

[JsonProperty("temperature_37")]
public System.Nullable<float> Temperature37 { get; set; } = null;
        

[JsonProperty("temperature_38")]
public System.Nullable<float> Temperature38 { get; set; } = null;
        

[JsonProperty("temperature_39")]
public System.Nullable<float> Temperature39 { get; set; } = null;
        

[JsonProperty("temperature_40")]
public System.Nullable<float> Temperature40 { get; set; } = null;
        

[JsonProperty("temperature_41")]
public System.Nullable<float> Temperature41 { get; set; } = null;
        

[JsonProperty("temperature_42")]
public System.Nullable<float> Temperature42 { get; set; } = null;
        

[JsonProperty("temperature_43")]
public System.Nullable<float> Temperature43 { get; set; } = null;
        

[JsonProperty("temperature_44")]
public System.Nullable<float> Temperature44 { get; set; } = null;
        

[JsonProperty("temperature_45")]
public System.Nullable<float> Temperature45 { get; set; } = null;
        

[JsonProperty("temperature_46")]
public System.Nullable<float> Temperature46 { get; set; } = null;
        

[JsonProperty("temperature_47")]
public System.Nullable<float> Temperature47 { get; set; } = null;
        

[JsonProperty("temperature_48")]
public System.Nullable<float> Temperature48 { get; set; } = null;
        

[JsonProperty("temperature_49")]
public System.Nullable<float> Temperature49 { get; set; } = null;
        

[JsonProperty("temperature_50")]
public System.Nullable<float> Temperature50 { get; set; } = null;
        

[JsonProperty("temperature_51")]
public System.Nullable<float> Temperature51 { get; set; } = null;
        

[JsonProperty("temperature_52")]
public System.Nullable<float> Temperature52 { get; set; } = null;
        

[JsonProperty("temperature_53")]
public System.Nullable<float> Temperature53 { get; set; } = null;
        

[JsonProperty("temperature_54")]
public System.Nullable<float> Temperature54 { get; set; } = null;
        

[JsonProperty("temperature_55")]
public System.Nullable<float> Temperature55 { get; set; } = null;
        

[JsonProperty("temperature_56")]
public System.Nullable<float> Temperature56 { get; set; } = null;
        

[JsonProperty("temperature_57")]
public System.Nullable<float> Temperature57 { get; set; } = null;
        

[JsonProperty("temperature_58")]
public System.Nullable<float> Temperature58 { get; set; } = null;
        

[JsonProperty("temperature_59")]
public System.Nullable<float> Temperature59 { get; set; } = null;
        

[JsonProperty("temperature_60")]
public System.Nullable<float> Temperature60 { get; set; } = null;
        

[JsonProperty("temperature_61")]
public System.Nullable<float> Temperature61 { get; set; } = null;
        

[JsonProperty("temperature_62")]
public System.Nullable<float> Temperature62 { get; set; } = null;
        

[JsonProperty("temperature_63")]
public System.Nullable<float> Temperature63 { get; set; } = null;
        

[JsonProperty("temperature_64")]
public System.Nullable<float> Temperature64 { get; set; } = null;
        

[JsonProperty("temperature_65")]
public System.Nullable<float> Temperature65 { get; set; } = null;
        

[JsonProperty("temperature_66")]
public System.Nullable<float> Temperature66 { get; set; } = null;
        

[JsonProperty("temperature_67")]
public System.Nullable<float> Temperature67 { get; set; } = null;
        

[JsonProperty("temperature_68")]
public System.Nullable<float> Temperature68 { get; set; } = null;
        

[JsonProperty("temperature_69")]
public System.Nullable<float> Temperature69 { get; set; } = null;
        

[JsonProperty("temperature_70")]
public System.Nullable<float> Temperature70 { get; set; } = null;
        

[JsonProperty("temperature_71")]
public System.Nullable<float> Temperature71 { get; set; } = null;
        

[JsonProperty("temperature_72")]
public System.Nullable<float> Temperature72 { get; set; } = null;
        

[JsonProperty("temperature_73")]
public System.Nullable<float> Temperature73 { get; set; } = null;
        

[JsonProperty("temperature_74")]
public System.Nullable<float> Temperature74 { get; set; } = null;
        

[JsonProperty("temperature_75")]
public System.Nullable<float> Temperature75 { get; set; } = null;
        

[JsonProperty("temperature_76")]
public System.Nullable<float> Temperature76 { get; set; } = null;
        

[JsonProperty("temperature_77")]
public System.Nullable<float> Temperature77 { get; set; } = null;
        

[JsonProperty("temperature_78")]
public System.Nullable<float> Temperature78 { get; set; } = null;
        

[JsonProperty("temperature_79")]
public System.Nullable<float> Temperature79 { get; set; } = null;
        

[JsonProperty("temperature_80")]
public System.Nullable<float> Temperature80 { get; set; } = null;
        

[JsonProperty("temperature_81")]
public System.Nullable<float> Temperature81 { get; set; } = null;
        

[JsonProperty("temperature_82")]
public System.Nullable<float> Temperature82 { get; set; } = null;
        

[JsonProperty("temperature_83")]
public System.Nullable<float> Temperature83 { get; set; } = null;
        

[JsonProperty("temperature_84")]
public System.Nullable<float> Temperature84 { get; set; } = null;
        

[JsonProperty("temperature_85")]
public System.Nullable<float> Temperature85 { get; set; } = null;
        

[JsonProperty("temperature_86")]
public System.Nullable<float> Temperature86 { get; set; } = null;
        

[JsonProperty("temperature_87")]
public System.Nullable<float> Temperature87 { get; set; } = null;
        

[JsonProperty("temperature_88")]
public System.Nullable<float> Temperature88 { get; set; } = null;
        

[JsonProperty("temperature_89")]
public System.Nullable<float> Temperature89 { get; set; } = null;
        

[JsonProperty("temperature_90")]
public System.Nullable<float> Temperature90 { get; set; } = null;
        

[JsonProperty("temperature_91")]
public System.Nullable<float> Temperature91 { get; set; } = null;
        

[JsonProperty("temperature_92")]
public System.Nullable<float> Temperature92 { get; set; } = null;
        

[JsonProperty("temperature_93")]
public System.Nullable<float> Temperature93 { get; set; } = null;
        

[JsonProperty("temperature_94")]
public System.Nullable<float> Temperature94 { get; set; } = null;
        

[JsonProperty("temperature_95")]
public System.Nullable<float> Temperature95 { get; set; } = null;
        

[JsonProperty("temperature_96")]
public System.Nullable<float> Temperature96 { get; set; } = null;
        

[JsonProperty("temperature_97")]
public System.Nullable<float> Temperature97 { get; set; } = null;
        

[JsonProperty("temperature_98")]
public System.Nullable<float> Temperature98 { get; set; } = null;
        

[JsonProperty("temperature_99")]
public System.Nullable<float> Temperature99 { get; set; } = null;
        

[JsonProperty("temperature_100")]
public System.Nullable<float> Temperature100 { get; set; } = null;
        

[JsonProperty("temperature_101")]
public System.Nullable<float> Temperature101 { get; set; } = null;
        

[JsonProperty("temperature_102")]
public System.Nullable<float> Temperature102 { get; set; } = null;
        

[JsonProperty("temperature_103")]
public System.Nullable<float> Temperature103 { get; set; } = null;
        

[JsonProperty("temperature_104")]
public System.Nullable<float> Temperature104 { get; set; } = null;
        

[JsonProperty("temperature_105")]
public System.Nullable<float> Temperature105 { get; set; } = null;
        

[JsonProperty("temperature_106")]
public System.Nullable<float> Temperature106 { get; set; } = null;
        

[JsonProperty("temperature_107")]
public System.Nullable<float> Temperature107 { get; set; } = null;
        

[JsonProperty("temperature_108")]
public System.Nullable<float> Temperature108 { get; set; } = null;
        

[JsonProperty("temperature_109")]
public System.Nullable<float> Temperature109 { get; set; } = null;
        

[JsonProperty("temperature_110")]
public System.Nullable<float> Temperature110 { get; set; } = null;
        

[JsonProperty("temperature_111")]
public System.Nullable<float> Temperature111 { get; set; } = null;
        

[JsonProperty("temperature_112")]
public System.Nullable<float> Temperature112 { get; set; } = null;
        

[JsonProperty("temperature_113")]
public System.Nullable<float> Temperature113 { get; set; } = null;
        

[JsonProperty("temperature_114")]
public System.Nullable<float> Temperature114 { get; set; } = null;
        

[JsonProperty("temperature_115")]
public System.Nullable<float> Temperature115 { get; set; } = null;
        

[JsonProperty("temperature_116")]
public System.Nullable<float> Temperature116 { get; set; } = null;
        

[JsonProperty("temperature_117")]
public System.Nullable<float> Temperature117 { get; set; } = null;
        

[JsonProperty("temperature_118")]
public System.Nullable<float> Temperature118 { get; set; } = null;
        

[JsonProperty("temperature_119")]
public System.Nullable<float> Temperature119 { get; set; } = null;
        

[JsonProperty("temperature_120")]
public System.Nullable<float> Temperature120 { get; set; } = null;
        

[JsonProperty("temperature_121")]
public System.Nullable<float> Temperature121 { get; set; } = null;
        

[JsonProperty("temperature_122")]
public System.Nullable<float> Temperature122 { get; set; } = null;
        

[JsonProperty("temperature_123")]
public System.Nullable<float> Temperature123 { get; set; } = null;
        

[JsonProperty("temperature_124")]
public System.Nullable<float> Temperature124 { get; set; } = null;
        

[JsonProperty("temperature_125")]
public System.Nullable<float> Temperature125 { get; set; } = null;
        

[JsonProperty("temperature_126")]
public System.Nullable<float> Temperature126 { get; set; } = null;
        

[JsonProperty("temperature_127")]
public System.Nullable<float> Temperature127 { get; set; } = null;
        

[JsonProperty("temperature_128")]
public System.Nullable<float> Temperature128 { get; set; } = null;
        

[JsonProperty("temperature_129")]
public System.Nullable<float> Temperature129 { get; set; } = null;
        

[JsonProperty("temperature_130")]
public System.Nullable<float> Temperature130 { get; set; } = null;
        

[JsonProperty("temperature_131")]
public System.Nullable<float> Temperature131 { get; set; } = null;
        

[JsonProperty("temperature_132")]
public System.Nullable<float> Temperature132 { get; set; } = null;
        

[JsonProperty("temperature_133")]
public System.Nullable<float> Temperature133 { get; set; } = null;
        

[JsonProperty("temperature_134")]
public System.Nullable<float> Temperature134 { get; set; } = null;
        

[JsonProperty("temperature_135")]
public System.Nullable<float> Temperature135 { get; set; } = null;
        

[JsonProperty("temperature_136")]
public System.Nullable<float> Temperature136 { get; set; } = null;
        

[JsonProperty("temperature_137")]
public System.Nullable<float> Temperature137 { get; set; } = null;
        

[JsonProperty("temperature_138")]
public System.Nullable<float> Temperature138 { get; set; } = null;
        

[JsonProperty("temperature_139")]
public System.Nullable<float> Temperature139 { get; set; } = null;
        

[JsonProperty("temperature_140")]
public System.Nullable<float> Temperature140 { get; set; } = null;
        

[JsonProperty("temperature_141")]
public System.Nullable<float> Temperature141 { get; set; } = null;
        

[JsonProperty("temperature_142")]
public System.Nullable<float> Temperature142 { get; set; } = null;
        

[JsonProperty("temperature_143")]
public System.Nullable<float> Temperature143 { get; set; } = null;
        

[JsonProperty("temperature_144")]
public System.Nullable<float> Temperature144 { get; set; } = null;
        

[JsonProperty("temperature_145")]
public System.Nullable<float> Temperature145 { get; set; } = null;
        

[JsonProperty("temperature_146")]
public System.Nullable<float> Temperature146 { get; set; } = null;
        

[JsonProperty("temperature_147")]
public System.Nullable<float> Temperature147 { get; set; } = null;
        

[JsonProperty("temperature_148")]
public System.Nullable<float> Temperature148 { get; set; } = null;
        

[JsonProperty("temperature_149")]
public System.Nullable<float> Temperature149 { get; set; } = null;
        

[JsonProperty("temperature_150")]
public System.Nullable<float> Temperature150 { get; set; } = null;
        

[JsonProperty("temperature_151")]
public System.Nullable<float> Temperature151 { get; set; } = null;
        

[JsonProperty("temperature_152")]
public System.Nullable<float> Temperature152 { get; set; } = null;
        

[JsonProperty("temperature_153")]
public System.Nullable<float> Temperature153 { get; set; } = null;
        

[JsonProperty("temperature_154")]
public System.Nullable<float> Temperature154 { get; set; } = null;
        

[JsonProperty("temperature_155")]
public System.Nullable<float> Temperature155 { get; set; } = null;
        

[JsonProperty("temperature_156")]
public System.Nullable<float> Temperature156 { get; set; } = null;
        

[JsonProperty("temperature_157")]
public System.Nullable<float> Temperature157 { get; set; } = null;
        

[JsonProperty("temperature_158")]
public System.Nullable<float> Temperature158 { get; set; } = null;
        

[JsonProperty("temperature_159")]
public System.Nullable<float> Temperature159 { get; set; } = null;
        

[JsonProperty("temperature_160")]
public System.Nullable<float> Temperature160 { get; set; } = null;
        

[JsonProperty("temperature_161")]
public System.Nullable<float> Temperature161 { get; set; } = null;
        

[JsonProperty("temperature_162")]
public System.Nullable<float> Temperature162 { get; set; } = null;
        

[JsonProperty("temperature_163")]
public System.Nullable<float> Temperature163 { get; set; } = null;
        

[JsonProperty("temperature_164")]
public System.Nullable<float> Temperature164 { get; set; } = null;
        

[JsonProperty("temperature_165")]
public System.Nullable<float> Temperature165 { get; set; } = null;
        

[JsonProperty("temperature_166")]
public System.Nullable<float> Temperature166 { get; set; } = null;
        

[JsonProperty("temperature_167")]
public System.Nullable<float> Temperature167 { get; set; } = null;
        

[JsonProperty("temperature_168")]
public System.Nullable<float> Temperature168 { get; set; } = null;
        

[JsonProperty("temperature_169")]
public System.Nullable<float> Temperature169 { get; set; } = null;
        

[JsonProperty("temperature_170")]
public System.Nullable<float> Temperature170 { get; set; } = null;
        

[JsonProperty("temperature_171")]
public System.Nullable<float> Temperature171 { get; set; } = null;
        

[JsonProperty("temperature_172")]
public System.Nullable<float> Temperature172 { get; set; } = null;
        

[JsonProperty("temperature_173")]
public System.Nullable<float> Temperature173 { get; set; } = null;
        

[JsonProperty("temperature_174")]
public System.Nullable<float> Temperature174 { get; set; } = null;
        

[JsonProperty("temperature_175")]
public System.Nullable<float> Temperature175 { get; set; } = null;
        

[JsonProperty("temperature_176")]
public System.Nullable<float> Temperature176 { get; set; } = null;
        

[JsonProperty("temperature_177")]
public System.Nullable<float> Temperature177 { get; set; } = null;
        

[JsonProperty("temperature_178")]
public System.Nullable<float> Temperature178 { get; set; } = null;
        

[JsonProperty("temperature_179")]
public System.Nullable<float> Temperature179 { get; set; } = null;
        

[JsonProperty("temperature_180")]
public System.Nullable<float> Temperature180 { get; set; } = null;
        

[JsonProperty("temperature_181")]
public System.Nullable<float> Temperature181 { get; set; } = null;
        

[JsonProperty("temperature_182")]
public System.Nullable<float> Temperature182 { get; set; } = null;
        

[JsonProperty("temperature_183")]
public System.Nullable<float> Temperature183 { get; set; } = null;
        

[JsonProperty("temperature_184")]
public System.Nullable<float> Temperature184 { get; set; } = null;
        

[JsonProperty("temperature_185")]
public System.Nullable<float> Temperature185 { get; set; } = null;
        

[JsonProperty("temperature_186")]
public System.Nullable<float> Temperature186 { get; set; } = null;
        

[JsonProperty("temperature_187")]
public System.Nullable<float> Temperature187 { get; set; } = null;
        

[JsonProperty("temperature_188")]
public System.Nullable<float> Temperature188 { get; set; } = null;
        

[JsonProperty("temperature_189")]
public System.Nullable<float> Temperature189 { get; set; } = null;
        

[JsonProperty("temperature_190")]
public System.Nullable<float> Temperature190 { get; set; } = null;
        

[JsonProperty("temperature_191")]
public System.Nullable<float> Temperature191 { get; set; } = null;
        

[JsonProperty("temperature_192")]
public System.Nullable<float> Temperature192 { get; set; } = null;
        

[JsonProperty("temperature_193")]
public System.Nullable<float> Temperature193 { get; set; } = null;
        

[JsonProperty("temperature_194")]
public System.Nullable<float> Temperature194 { get; set; } = null;
        

[JsonProperty("temperature_195")]
public System.Nullable<float> Temperature195 { get; set; } = null;
        

[JsonProperty("temperature_196")]
public System.Nullable<float> Temperature196 { get; set; } = null;
        

[JsonProperty("temperature_197")]
public System.Nullable<float> Temperature197 { get; set; } = null;
        

[JsonProperty("temperature_198")]
public System.Nullable<float> Temperature198 { get; set; } = null;
        

[JsonProperty("temperature_199")]
public System.Nullable<float> Temperature199 { get; set; } = null;
        

[JsonProperty("temperature_200")]
public System.Nullable<float> Temperature200 { get; set; } = null;
        

[JsonProperty("temperature_201")]
public System.Nullable<float> Temperature201 { get; set; } = null;
        

[JsonProperty("temperature_202")]
public System.Nullable<float> Temperature202 { get; set; } = null;
        

[JsonProperty("temperature_203")]
public System.Nullable<float> Temperature203 { get; set; } = null;
        

[JsonProperty("temperature_204")]
public System.Nullable<float> Temperature204 { get; set; } = null;
        

[JsonProperty("temperature_205")]
public System.Nullable<float> Temperature205 { get; set; } = null;
        

[JsonProperty("temperature_206")]
public System.Nullable<float> Temperature206 { get; set; } = null;
        

[JsonProperty("temperature_207")]
public System.Nullable<float> Temperature207 { get; set; } = null;
        

[JsonProperty("temperature_208")]
public System.Nullable<float> Temperature208 { get; set; } = null;
        

[JsonProperty("temperature_209")]
public System.Nullable<float> Temperature209 { get; set; } = null;
        

[JsonProperty("temperature_210")]
public System.Nullable<float> Temperature210 { get; set; } = null;
        

[JsonProperty("temperature_211")]
public System.Nullable<float> Temperature211 { get; set; } = null;
        

[JsonProperty("temperature_212")]
public System.Nullable<float> Temperature212 { get; set; } = null;
        

[JsonProperty("temperature_213")]
public System.Nullable<float> Temperature213 { get; set; } = null;
        

[JsonProperty("temperature_214")]
public System.Nullable<float> Temperature214 { get; set; } = null;
        

[JsonProperty("temperature_215")]
public System.Nullable<float> Temperature215 { get; set; } = null;
        

[JsonProperty("temperature_216")]
public System.Nullable<float> Temperature216 { get; set; } = null;
        

[JsonProperty("temperature_217")]
public System.Nullable<float> Temperature217 { get; set; } = null;
        

[JsonProperty("temperature_218")]
public System.Nullable<float> Temperature218 { get; set; } = null;
        

[JsonProperty("temperature_219")]
public System.Nullable<float> Temperature219 { get; set; } = null;
        

[JsonProperty("temperature_220")]
public System.Nullable<float> Temperature220 { get; set; } = null;
        

[JsonProperty("temperature_221")]
public System.Nullable<float> Temperature221 { get; set; } = null;
        

[JsonProperty("temperature_222")]
public System.Nullable<float> Temperature222 { get; set; } = null;
        

[JsonProperty("temperature_223")]
public System.Nullable<float> Temperature223 { get; set; } = null;
        

[JsonProperty("temperature_224")]
public System.Nullable<float> Temperature224 { get; set; } = null;
        

[JsonProperty("temperature_225")]
public System.Nullable<float> Temperature225 { get; set; } = null;
        

[JsonProperty("temperature_226")]
public System.Nullable<float> Temperature226 { get; set; } = null;
        

[JsonProperty("temperature_227")]
public System.Nullable<float> Temperature227 { get; set; } = null;
        

[JsonProperty("temperature_228")]
public System.Nullable<float> Temperature228 { get; set; } = null;
        

[JsonProperty("temperature_229")]
public System.Nullable<float> Temperature229 { get; set; } = null;
        

[JsonProperty("temperature_230")]
public System.Nullable<float> Temperature230 { get; set; } = null;
        

[JsonProperty("temperature_231")]
public System.Nullable<float> Temperature231 { get; set; } = null;
        

[JsonProperty("temperature_232")]
public System.Nullable<float> Temperature232 { get; set; } = null;
        

[JsonProperty("temperature_233")]
public System.Nullable<float> Temperature233 { get; set; } = null;
        

[JsonProperty("temperature_234")]
public System.Nullable<float> Temperature234 { get; set; } = null;
        

[JsonProperty("temperature_235")]
public System.Nullable<float> Temperature235 { get; set; } = null;
        

[JsonProperty("temperature_236")]
public System.Nullable<float> Temperature236 { get; set; } = null;
        

[JsonProperty("temperature_237")]
public System.Nullable<float> Temperature237 { get; set; } = null;
        

[JsonProperty("temperature_238")]
public System.Nullable<float> Temperature238 { get; set; } = null;
        

[JsonProperty("temperature_239")]
public System.Nullable<float> Temperature239 { get; set; } = null;
        

[JsonProperty("temperature_240")]
public System.Nullable<float> Temperature240 { get; set; } = null;
        

[JsonProperty("temperature_241")]
public System.Nullable<float> Temperature241 { get; set; } = null;
        

[JsonProperty("temperature_242")]
public System.Nullable<float> Temperature242 { get; set; } = null;
        

[JsonProperty("temperature_243")]
public System.Nullable<float> Temperature243 { get; set; } = null;
        

[JsonProperty("temperature_244")]
public System.Nullable<float> Temperature244 { get; set; } = null;
        

[JsonProperty("temperature_245")]
public System.Nullable<float> Temperature245 { get; set; } = null;
        

[JsonProperty("temperature_246")]
public System.Nullable<float> Temperature246 { get; set; } = null;
        

[JsonProperty("temperature_247")]
public System.Nullable<float> Temperature247 { get; set; } = null;
        

[JsonProperty("temperature_248")]
public System.Nullable<float> Temperature248 { get; set; } = null;
        

[JsonProperty("temperature_249")]
public System.Nullable<float> Temperature249 { get; set; } = null;
        

[JsonProperty("temperature_250")]
public System.Nullable<float> Temperature250 { get; set; } = null;
    }
    
    [Description("fluid properties for the saturated region")]
    [JsonObject("FluidProperties:Saturated")]
    public class FluidProperties_Saturated : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("fluid_name")]
public string FluidName { get; set; } = "";
        

[Description("Enthalpy Units are J/kg Density Units are kg/m3 SpecificHeat Units are J/kg-K Pre" +
    "ssure Units are Pa")]
[JsonProperty("fluid_property_type")]
public FluidProperties_Saturated_FluidPropertyType FluidPropertyType { get; set; } = (FluidProperties_Saturated_FluidPropertyType)Enum.Parse(typeof(FluidProperties_Saturated_FluidPropertyType), "Density");
        

[Description("Fluid=saturated fluid FluidGas=saturated vapor")]
[JsonProperty("fluid_phase")]
public FluidProperties_Saturated_FluidPhase FluidPhase { get; set; } = (FluidProperties_Saturated_FluidPhase)Enum.Parse(typeof(FluidProperties_Saturated_FluidPhase), "Fluid");
        

[Description("Enter the name of a FluidProperties:Temperatures object.")]
[JsonProperty("temperature_values_name")]
public string TemperatureValuesName { get; set; } = "";
        

[JsonProperty("property_value_1")]
public System.Nullable<float> PropertyValue1 { get; set; } = null;
        

[JsonProperty("property_value_2")]
public System.Nullable<float> PropertyValue2 { get; set; } = null;
        

[JsonProperty("property_value_3")]
public System.Nullable<float> PropertyValue3 { get; set; } = null;
        

[JsonProperty("property_value_4")]
public System.Nullable<float> PropertyValue4 { get; set; } = null;
        

[JsonProperty("property_value_5")]
public System.Nullable<float> PropertyValue5 { get; set; } = null;
        

[JsonProperty("property_value_6")]
public System.Nullable<float> PropertyValue6 { get; set; } = null;
        

[JsonProperty("property_value_7")]
public System.Nullable<float> PropertyValue7 { get; set; } = null;
        

[JsonProperty("property_value_8")]
public System.Nullable<float> PropertyValue8 { get; set; } = null;
        

[JsonProperty("property_value_9")]
public System.Nullable<float> PropertyValue9 { get; set; } = null;
        

[JsonProperty("property_value_10")]
public System.Nullable<float> PropertyValue10 { get; set; } = null;
        

[JsonProperty("property_value_11")]
public System.Nullable<float> PropertyValue11 { get; set; } = null;
        

[JsonProperty("property_value_12")]
public System.Nullable<float> PropertyValue12 { get; set; } = null;
        

[JsonProperty("property_value_13")]
public System.Nullable<float> PropertyValue13 { get; set; } = null;
        

[JsonProperty("property_value_14")]
public System.Nullable<float> PropertyValue14 { get; set; } = null;
        

[JsonProperty("property_value_15")]
public System.Nullable<float> PropertyValue15 { get; set; } = null;
        

[JsonProperty("property_value_16")]
public System.Nullable<float> PropertyValue16 { get; set; } = null;
        

[JsonProperty("property_value_17")]
public System.Nullable<float> PropertyValue17 { get; set; } = null;
        

[JsonProperty("property_value_18")]
public System.Nullable<float> PropertyValue18 { get; set; } = null;
        

[JsonProperty("property_value_19")]
public System.Nullable<float> PropertyValue19 { get; set; } = null;
        

[JsonProperty("property_value_20")]
public System.Nullable<float> PropertyValue20 { get; set; } = null;
        

[JsonProperty("property_value_21")]
public System.Nullable<float> PropertyValue21 { get; set; } = null;
        

[JsonProperty("property_value_22")]
public System.Nullable<float> PropertyValue22 { get; set; } = null;
        

[JsonProperty("property_value_23")]
public System.Nullable<float> PropertyValue23 { get; set; } = null;
        

[JsonProperty("property_value_24")]
public System.Nullable<float> PropertyValue24 { get; set; } = null;
        

[JsonProperty("property_value_25")]
public System.Nullable<float> PropertyValue25 { get; set; } = null;
        

[JsonProperty("property_value_26")]
public System.Nullable<float> PropertyValue26 { get; set; } = null;
        

[JsonProperty("property_value_27")]
public System.Nullable<float> PropertyValue27 { get; set; } = null;
        

[JsonProperty("property_value_28")]
public System.Nullable<float> PropertyValue28 { get; set; } = null;
        

[JsonProperty("property_value_29")]
public System.Nullable<float> PropertyValue29 { get; set; } = null;
        

[JsonProperty("property_value_30")]
public System.Nullable<float> PropertyValue30 { get; set; } = null;
        

[JsonProperty("property_value_31")]
public System.Nullable<float> PropertyValue31 { get; set; } = null;
        

[JsonProperty("property_value_32")]
public System.Nullable<float> PropertyValue32 { get; set; } = null;
        

[JsonProperty("property_value_33")]
public System.Nullable<float> PropertyValue33 { get; set; } = null;
        

[JsonProperty("property_value_34")]
public System.Nullable<float> PropertyValue34 { get; set; } = null;
        

[JsonProperty("property_value_35")]
public System.Nullable<float> PropertyValue35 { get; set; } = null;
        

[JsonProperty("property_value_36")]
public System.Nullable<float> PropertyValue36 { get; set; } = null;
        

[JsonProperty("property_value_37")]
public System.Nullable<float> PropertyValue37 { get; set; } = null;
        

[JsonProperty("property_value_38")]
public System.Nullable<float> PropertyValue38 { get; set; } = null;
        

[JsonProperty("property_value_39")]
public System.Nullable<float> PropertyValue39 { get; set; } = null;
        

[JsonProperty("property_value_40")]
public System.Nullable<float> PropertyValue40 { get; set; } = null;
        

[JsonProperty("property_value_41")]
public System.Nullable<float> PropertyValue41 { get; set; } = null;
        

[JsonProperty("property_value_42")]
public System.Nullable<float> PropertyValue42 { get; set; } = null;
        

[JsonProperty("property_value_43")]
public System.Nullable<float> PropertyValue43 { get; set; } = null;
        

[JsonProperty("property_value_44")]
public System.Nullable<float> PropertyValue44 { get; set; } = null;
        

[JsonProperty("property_value_45")]
public System.Nullable<float> PropertyValue45 { get; set; } = null;
        

[JsonProperty("property_value_46")]
public System.Nullable<float> PropertyValue46 { get; set; } = null;
        

[JsonProperty("property_value_47")]
public System.Nullable<float> PropertyValue47 { get; set; } = null;
        

[JsonProperty("property_value_48")]
public System.Nullable<float> PropertyValue48 { get; set; } = null;
        

[JsonProperty("property_value_49")]
public System.Nullable<float> PropertyValue49 { get; set; } = null;
        

[JsonProperty("property_value_50")]
public System.Nullable<float> PropertyValue50 { get; set; } = null;
        

[JsonProperty("property_value_51")]
public System.Nullable<float> PropertyValue51 { get; set; } = null;
        

[JsonProperty("property_value_52")]
public System.Nullable<float> PropertyValue52 { get; set; } = null;
        

[JsonProperty("property_value_53")]
public System.Nullable<float> PropertyValue53 { get; set; } = null;
        

[JsonProperty("property_value_54")]
public System.Nullable<float> PropertyValue54 { get; set; } = null;
        

[JsonProperty("property_value_55")]
public System.Nullable<float> PropertyValue55 { get; set; } = null;
        

[JsonProperty("property_value_56")]
public System.Nullable<float> PropertyValue56 { get; set; } = null;
        

[JsonProperty("property_value_57")]
public System.Nullable<float> PropertyValue57 { get; set; } = null;
        

[JsonProperty("property_value_58")]
public System.Nullable<float> PropertyValue58 { get; set; } = null;
        

[JsonProperty("property_value_59")]
public System.Nullable<float> PropertyValue59 { get; set; } = null;
        

[JsonProperty("property_value_60")]
public System.Nullable<float> PropertyValue60 { get; set; } = null;
        

[JsonProperty("property_value_61")]
public System.Nullable<float> PropertyValue61 { get; set; } = null;
        

[JsonProperty("property_value_62")]
public System.Nullable<float> PropertyValue62 { get; set; } = null;
        

[JsonProperty("property_value_63")]
public System.Nullable<float> PropertyValue63 { get; set; } = null;
        

[JsonProperty("property_value_64")]
public System.Nullable<float> PropertyValue64 { get; set; } = null;
        

[JsonProperty("property_value_65")]
public System.Nullable<float> PropertyValue65 { get; set; } = null;
        

[JsonProperty("property_value_66")]
public System.Nullable<float> PropertyValue66 { get; set; } = null;
        

[JsonProperty("property_value_67")]
public System.Nullable<float> PropertyValue67 { get; set; } = null;
        

[JsonProperty("property_value_68")]
public System.Nullable<float> PropertyValue68 { get; set; } = null;
        

[JsonProperty("property_value_69")]
public System.Nullable<float> PropertyValue69 { get; set; } = null;
        

[JsonProperty("property_value_70")]
public System.Nullable<float> PropertyValue70 { get; set; } = null;
        

[JsonProperty("property_value_71")]
public System.Nullable<float> PropertyValue71 { get; set; } = null;
        

[JsonProperty("property_value_72")]
public System.Nullable<float> PropertyValue72 { get; set; } = null;
        

[JsonProperty("property_value_73")]
public System.Nullable<float> PropertyValue73 { get; set; } = null;
        

[JsonProperty("property_value_74")]
public System.Nullable<float> PropertyValue74 { get; set; } = null;
        

[JsonProperty("property_value_75")]
public System.Nullable<float> PropertyValue75 { get; set; } = null;
        

[JsonProperty("property_value_76")]
public System.Nullable<float> PropertyValue76 { get; set; } = null;
        

[JsonProperty("property_value_77")]
public System.Nullable<float> PropertyValue77 { get; set; } = null;
        

[JsonProperty("property_value_78")]
public System.Nullable<float> PropertyValue78 { get; set; } = null;
        

[JsonProperty("property_value_79")]
public System.Nullable<float> PropertyValue79 { get; set; } = null;
        

[JsonProperty("property_value_80")]
public System.Nullable<float> PropertyValue80 { get; set; } = null;
        

[JsonProperty("property_value_81")]
public System.Nullable<float> PropertyValue81 { get; set; } = null;
        

[JsonProperty("property_value_82")]
public System.Nullable<float> PropertyValue82 { get; set; } = null;
        

[JsonProperty("property_value_83")]
public System.Nullable<float> PropertyValue83 { get; set; } = null;
        

[JsonProperty("property_value_84")]
public System.Nullable<float> PropertyValue84 { get; set; } = null;
        

[JsonProperty("property_value_85")]
public System.Nullable<float> PropertyValue85 { get; set; } = null;
        

[JsonProperty("property_value_86")]
public System.Nullable<float> PropertyValue86 { get; set; } = null;
        

[JsonProperty("property_value_87")]
public System.Nullable<float> PropertyValue87 { get; set; } = null;
        

[JsonProperty("property_value_88")]
public System.Nullable<float> PropertyValue88 { get; set; } = null;
        

[JsonProperty("property_value_89")]
public System.Nullable<float> PropertyValue89 { get; set; } = null;
        

[JsonProperty("property_value_90")]
public System.Nullable<float> PropertyValue90 { get; set; } = null;
        

[JsonProperty("property_value_91")]
public System.Nullable<float> PropertyValue91 { get; set; } = null;
        

[JsonProperty("property_value_92")]
public System.Nullable<float> PropertyValue92 { get; set; } = null;
        

[JsonProperty("property_value_93")]
public System.Nullable<float> PropertyValue93 { get; set; } = null;
        

[JsonProperty("property_value_94")]
public System.Nullable<float> PropertyValue94 { get; set; } = null;
        

[JsonProperty("property_value_95")]
public System.Nullable<float> PropertyValue95 { get; set; } = null;
        

[JsonProperty("property_value_96")]
public System.Nullable<float> PropertyValue96 { get; set; } = null;
        

[JsonProperty("property_value_97")]
public System.Nullable<float> PropertyValue97 { get; set; } = null;
        

[JsonProperty("property_value_98")]
public System.Nullable<float> PropertyValue98 { get; set; } = null;
        

[JsonProperty("property_value_99")]
public System.Nullable<float> PropertyValue99 { get; set; } = null;
        

[JsonProperty("property_value_100")]
public System.Nullable<float> PropertyValue100 { get; set; } = null;
        

[JsonProperty("property_value_101")]
public System.Nullable<float> PropertyValue101 { get; set; } = null;
        

[JsonProperty("property_value_102")]
public System.Nullable<float> PropertyValue102 { get; set; } = null;
        

[JsonProperty("property_value_103")]
public System.Nullable<float> PropertyValue103 { get; set; } = null;
        

[JsonProperty("property_value_104")]
public System.Nullable<float> PropertyValue104 { get; set; } = null;
        

[JsonProperty("property_value_105")]
public System.Nullable<float> PropertyValue105 { get; set; } = null;
        

[JsonProperty("property_value_106")]
public System.Nullable<float> PropertyValue106 { get; set; } = null;
        

[JsonProperty("property_value_107")]
public System.Nullable<float> PropertyValue107 { get; set; } = null;
        

[JsonProperty("property_value_108")]
public System.Nullable<float> PropertyValue108 { get; set; } = null;
        

[JsonProperty("property_value_109")]
public System.Nullable<float> PropertyValue109 { get; set; } = null;
        

[JsonProperty("property_value_110")]
public System.Nullable<float> PropertyValue110 { get; set; } = null;
        

[JsonProperty("property_value_111")]
public System.Nullable<float> PropertyValue111 { get; set; } = null;
        

[JsonProperty("property_value_112")]
public System.Nullable<float> PropertyValue112 { get; set; } = null;
        

[JsonProperty("property_value_113")]
public System.Nullable<float> PropertyValue113 { get; set; } = null;
        

[JsonProperty("property_value_114")]
public System.Nullable<float> PropertyValue114 { get; set; } = null;
        

[JsonProperty("property_value_115")]
public System.Nullable<float> PropertyValue115 { get; set; } = null;
        

[JsonProperty("property_value_116")]
public System.Nullable<float> PropertyValue116 { get; set; } = null;
        

[JsonProperty("property_value_117")]
public System.Nullable<float> PropertyValue117 { get; set; } = null;
        

[JsonProperty("property_value_118")]
public System.Nullable<float> PropertyValue118 { get; set; } = null;
        

[JsonProperty("property_value_119")]
public System.Nullable<float> PropertyValue119 { get; set; } = null;
        

[JsonProperty("property_value_120")]
public System.Nullable<float> PropertyValue120 { get; set; } = null;
        

[JsonProperty("property_value_121")]
public System.Nullable<float> PropertyValue121 { get; set; } = null;
        

[JsonProperty("property_value_122")]
public System.Nullable<float> PropertyValue122 { get; set; } = null;
        

[JsonProperty("property_value_123")]
public System.Nullable<float> PropertyValue123 { get; set; } = null;
        

[JsonProperty("property_value_124")]
public System.Nullable<float> PropertyValue124 { get; set; } = null;
        

[JsonProperty("property_value_125")]
public System.Nullable<float> PropertyValue125 { get; set; } = null;
        

[JsonProperty("property_value_126")]
public System.Nullable<float> PropertyValue126 { get; set; } = null;
        

[JsonProperty("property_value_127")]
public System.Nullable<float> PropertyValue127 { get; set; } = null;
        

[JsonProperty("property_value_128")]
public System.Nullable<float> PropertyValue128 { get; set; } = null;
        

[JsonProperty("property_value_129")]
public System.Nullable<float> PropertyValue129 { get; set; } = null;
        

[JsonProperty("property_value_130")]
public System.Nullable<float> PropertyValue130 { get; set; } = null;
        

[JsonProperty("property_value_131")]
public System.Nullable<float> PropertyValue131 { get; set; } = null;
        

[JsonProperty("property_value_132")]
public System.Nullable<float> PropertyValue132 { get; set; } = null;
        

[JsonProperty("property_value_133")]
public System.Nullable<float> PropertyValue133 { get; set; } = null;
        

[JsonProperty("property_value_134")]
public System.Nullable<float> PropertyValue134 { get; set; } = null;
        

[JsonProperty("property_value_135")]
public System.Nullable<float> PropertyValue135 { get; set; } = null;
        

[JsonProperty("property_value_136")]
public System.Nullable<float> PropertyValue136 { get; set; } = null;
        

[JsonProperty("property_value_137")]
public System.Nullable<float> PropertyValue137 { get; set; } = null;
        

[JsonProperty("property_value_138")]
public System.Nullable<float> PropertyValue138 { get; set; } = null;
        

[JsonProperty("property_value_139")]
public System.Nullable<float> PropertyValue139 { get; set; } = null;
        

[JsonProperty("property_value_140")]
public System.Nullable<float> PropertyValue140 { get; set; } = null;
        

[JsonProperty("property_value_141")]
public System.Nullable<float> PropertyValue141 { get; set; } = null;
        

[JsonProperty("property_value_142")]
public System.Nullable<float> PropertyValue142 { get; set; } = null;
        

[JsonProperty("property_value_143")]
public System.Nullable<float> PropertyValue143 { get; set; } = null;
        

[JsonProperty("property_value_144")]
public System.Nullable<float> PropertyValue144 { get; set; } = null;
        

[JsonProperty("property_value_145")]
public System.Nullable<float> PropertyValue145 { get; set; } = null;
        

[JsonProperty("property_value_146")]
public System.Nullable<float> PropertyValue146 { get; set; } = null;
        

[JsonProperty("property_value_147")]
public System.Nullable<float> PropertyValue147 { get; set; } = null;
        

[JsonProperty("property_value_148")]
public System.Nullable<float> PropertyValue148 { get; set; } = null;
        

[JsonProperty("property_value_149")]
public System.Nullable<float> PropertyValue149 { get; set; } = null;
        

[JsonProperty("property_value_150")]
public System.Nullable<float> PropertyValue150 { get; set; } = null;
        

[JsonProperty("property_value_151")]
public System.Nullable<float> PropertyValue151 { get; set; } = null;
        

[JsonProperty("property_value_152")]
public System.Nullable<float> PropertyValue152 { get; set; } = null;
        

[JsonProperty("property_value_153")]
public System.Nullable<float> PropertyValue153 { get; set; } = null;
        

[JsonProperty("property_value_154")]
public System.Nullable<float> PropertyValue154 { get; set; } = null;
        

[JsonProperty("property_value_155")]
public System.Nullable<float> PropertyValue155 { get; set; } = null;
        

[JsonProperty("property_value_156")]
public System.Nullable<float> PropertyValue156 { get; set; } = null;
        

[JsonProperty("property_value_157")]
public System.Nullable<float> PropertyValue157 { get; set; } = null;
        

[JsonProperty("property_value_158")]
public System.Nullable<float> PropertyValue158 { get; set; } = null;
        

[JsonProperty("property_value_159")]
public System.Nullable<float> PropertyValue159 { get; set; } = null;
        

[JsonProperty("property_value_160")]
public System.Nullable<float> PropertyValue160 { get; set; } = null;
        

[JsonProperty("property_value_161")]
public System.Nullable<float> PropertyValue161 { get; set; } = null;
        

[JsonProperty("property_value_162")]
public System.Nullable<float> PropertyValue162 { get; set; } = null;
        

[JsonProperty("property_value_163")]
public System.Nullable<float> PropertyValue163 { get; set; } = null;
        

[JsonProperty("property_value_164")]
public System.Nullable<float> PropertyValue164 { get; set; } = null;
        

[JsonProperty("property_value_165")]
public System.Nullable<float> PropertyValue165 { get; set; } = null;
        

[JsonProperty("property_value_166")]
public System.Nullable<float> PropertyValue166 { get; set; } = null;
        

[JsonProperty("property_value_167")]
public System.Nullable<float> PropertyValue167 { get; set; } = null;
        

[JsonProperty("property_value_168")]
public System.Nullable<float> PropertyValue168 { get; set; } = null;
        

[JsonProperty("property_value_169")]
public System.Nullable<float> PropertyValue169 { get; set; } = null;
        

[JsonProperty("property_value_170")]
public System.Nullable<float> PropertyValue170 { get; set; } = null;
        

[JsonProperty("property_value_171")]
public System.Nullable<float> PropertyValue171 { get; set; } = null;
        

[JsonProperty("property_value_172")]
public System.Nullable<float> PropertyValue172 { get; set; } = null;
        

[JsonProperty("property_value_173")]
public System.Nullable<float> PropertyValue173 { get; set; } = null;
        

[JsonProperty("property_value_174")]
public System.Nullable<float> PropertyValue174 { get; set; } = null;
        

[JsonProperty("property_value_175")]
public System.Nullable<float> PropertyValue175 { get; set; } = null;
        

[JsonProperty("property_value_176")]
public System.Nullable<float> PropertyValue176 { get; set; } = null;
        

[JsonProperty("property_value_177")]
public System.Nullable<float> PropertyValue177 { get; set; } = null;
        

[JsonProperty("property_value_178")]
public System.Nullable<float> PropertyValue178 { get; set; } = null;
        

[JsonProperty("property_value_179")]
public System.Nullable<float> PropertyValue179 { get; set; } = null;
        

[JsonProperty("property_value_180")]
public System.Nullable<float> PropertyValue180 { get; set; } = null;
        

[JsonProperty("property_value_181")]
public System.Nullable<float> PropertyValue181 { get; set; } = null;
        

[JsonProperty("property_value_182")]
public System.Nullable<float> PropertyValue182 { get; set; } = null;
        

[JsonProperty("property_value_183")]
public System.Nullable<float> PropertyValue183 { get; set; } = null;
        

[JsonProperty("property_value_184")]
public System.Nullable<float> PropertyValue184 { get; set; } = null;
        

[JsonProperty("property_value_185")]
public System.Nullable<float> PropertyValue185 { get; set; } = null;
        

[JsonProperty("property_value_186")]
public System.Nullable<float> PropertyValue186 { get; set; } = null;
        

[JsonProperty("property_value_187")]
public System.Nullable<float> PropertyValue187 { get; set; } = null;
        

[JsonProperty("property_value_188")]
public System.Nullable<float> PropertyValue188 { get; set; } = null;
        

[JsonProperty("property_value_189")]
public System.Nullable<float> PropertyValue189 { get; set; } = null;
        

[JsonProperty("property_value_190")]
public System.Nullable<float> PropertyValue190 { get; set; } = null;
        

[JsonProperty("property_value_191")]
public System.Nullable<float> PropertyValue191 { get; set; } = null;
        

[JsonProperty("property_value_192")]
public System.Nullable<float> PropertyValue192 { get; set; } = null;
        

[JsonProperty("property_value_193")]
public System.Nullable<float> PropertyValue193 { get; set; } = null;
        

[JsonProperty("property_value_194")]
public System.Nullable<float> PropertyValue194 { get; set; } = null;
        

[JsonProperty("property_value_195")]
public System.Nullable<float> PropertyValue195 { get; set; } = null;
        

[JsonProperty("property_value_196")]
public System.Nullable<float> PropertyValue196 { get; set; } = null;
        

[JsonProperty("property_value_197")]
public System.Nullable<float> PropertyValue197 { get; set; } = null;
        

[JsonProperty("property_value_198")]
public System.Nullable<float> PropertyValue198 { get; set; } = null;
        

[JsonProperty("property_value_199")]
public System.Nullable<float> PropertyValue199 { get; set; } = null;
        

[JsonProperty("property_value_200")]
public System.Nullable<float> PropertyValue200 { get; set; } = null;
        

[JsonProperty("property_value_201")]
public System.Nullable<float> PropertyValue201 { get; set; } = null;
        

[JsonProperty("property_value_202")]
public System.Nullable<float> PropertyValue202 { get; set; } = null;
        

[JsonProperty("property_value_203")]
public System.Nullable<float> PropertyValue203 { get; set; } = null;
        

[JsonProperty("property_value_204")]
public System.Nullable<float> PropertyValue204 { get; set; } = null;
        

[JsonProperty("property_value_205")]
public System.Nullable<float> PropertyValue205 { get; set; } = null;
        

[JsonProperty("property_value_206")]
public System.Nullable<float> PropertyValue206 { get; set; } = null;
        

[JsonProperty("property_value_207")]
public System.Nullable<float> PropertyValue207 { get; set; } = null;
        

[JsonProperty("property_value_208")]
public System.Nullable<float> PropertyValue208 { get; set; } = null;
        

[JsonProperty("property_value_209")]
public System.Nullable<float> PropertyValue209 { get; set; } = null;
        

[JsonProperty("property_value_210")]
public System.Nullable<float> PropertyValue210 { get; set; } = null;
        

[JsonProperty("property_value_211")]
public System.Nullable<float> PropertyValue211 { get; set; } = null;
        

[JsonProperty("property_value_212")]
public System.Nullable<float> PropertyValue212 { get; set; } = null;
        

[JsonProperty("property_value_213")]
public System.Nullable<float> PropertyValue213 { get; set; } = null;
        

[JsonProperty("property_value_214")]
public System.Nullable<float> PropertyValue214 { get; set; } = null;
        

[JsonProperty("property_value_215")]
public System.Nullable<float> PropertyValue215 { get; set; } = null;
        

[JsonProperty("property_value_216")]
public System.Nullable<float> PropertyValue216 { get; set; } = null;
        

[JsonProperty("property_value_217")]
public System.Nullable<float> PropertyValue217 { get; set; } = null;
        

[JsonProperty("property_value_218")]
public System.Nullable<float> PropertyValue218 { get; set; } = null;
        

[JsonProperty("property_value_219")]
public System.Nullable<float> PropertyValue219 { get; set; } = null;
        

[JsonProperty("property_value_220")]
public System.Nullable<float> PropertyValue220 { get; set; } = null;
        

[JsonProperty("property_value_221")]
public System.Nullable<float> PropertyValue221 { get; set; } = null;
        

[JsonProperty("property_value_222")]
public System.Nullable<float> PropertyValue222 { get; set; } = null;
        

[JsonProperty("property_value_223")]
public System.Nullable<float> PropertyValue223 { get; set; } = null;
        

[JsonProperty("property_value_224")]
public System.Nullable<float> PropertyValue224 { get; set; } = null;
        

[JsonProperty("property_value_225")]
public System.Nullable<float> PropertyValue225 { get; set; } = null;
        

[JsonProperty("property_value_226")]
public System.Nullable<float> PropertyValue226 { get; set; } = null;
        

[JsonProperty("property_value_227")]
public System.Nullable<float> PropertyValue227 { get; set; } = null;
        

[JsonProperty("property_value_228")]
public System.Nullable<float> PropertyValue228 { get; set; } = null;
        

[JsonProperty("property_value_229")]
public System.Nullable<float> PropertyValue229 { get; set; } = null;
        

[JsonProperty("property_value_230")]
public System.Nullable<float> PropertyValue230 { get; set; } = null;
        

[JsonProperty("property_value_231")]
public System.Nullable<float> PropertyValue231 { get; set; } = null;
        

[JsonProperty("property_value_232")]
public System.Nullable<float> PropertyValue232 { get; set; } = null;
        

[JsonProperty("property_value_233")]
public System.Nullable<float> PropertyValue233 { get; set; } = null;
        

[JsonProperty("property_value_234")]
public System.Nullable<float> PropertyValue234 { get; set; } = null;
        

[JsonProperty("property_value_235")]
public System.Nullable<float> PropertyValue235 { get; set; } = null;
        

[JsonProperty("property_value_236")]
public System.Nullable<float> PropertyValue236 { get; set; } = null;
        

[JsonProperty("property_value_237")]
public System.Nullable<float> PropertyValue237 { get; set; } = null;
        

[JsonProperty("property_value_238")]
public System.Nullable<float> PropertyValue238 { get; set; } = null;
        

[JsonProperty("property_value_239")]
public System.Nullable<float> PropertyValue239 { get; set; } = null;
        

[JsonProperty("property_value_240")]
public System.Nullable<float> PropertyValue240 { get; set; } = null;
        

[JsonProperty("property_value_241")]
public System.Nullable<float> PropertyValue241 { get; set; } = null;
        

[JsonProperty("property_value_242")]
public System.Nullable<float> PropertyValue242 { get; set; } = null;
        

[JsonProperty("property_value_243")]
public System.Nullable<float> PropertyValue243 { get; set; } = null;
        

[JsonProperty("property_value_244")]
public System.Nullable<float> PropertyValue244 { get; set; } = null;
        

[JsonProperty("property_value_245")]
public System.Nullable<float> PropertyValue245 { get; set; } = null;
        

[JsonProperty("property_value_246")]
public System.Nullable<float> PropertyValue246 { get; set; } = null;
        

[JsonProperty("property_value_247")]
public System.Nullable<float> PropertyValue247 { get; set; } = null;
        

[JsonProperty("property_value_248")]
public System.Nullable<float> PropertyValue248 { get; set; } = null;
        

[JsonProperty("property_value_249")]
public System.Nullable<float> PropertyValue249 { get; set; } = null;
        

[JsonProperty("property_value_250")]
public System.Nullable<float> PropertyValue250 { get; set; } = null;
    }
    
    public enum FluidProperties_Saturated_FluidPropertyType
    {
        
        [JsonProperty("Density")]
        Density = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("Pressure")]
        Pressure = 2,
        
        [JsonProperty("SpecificHeat")]
        SpecificHeat = 3,
    }
    
    public enum FluidProperties_Saturated_FluidPhase
    {
        
        [JsonProperty("Fluid")]
        Fluid = 0,
        
        [JsonProperty("FluidGas")]
        FluidGas = 1,
    }
    
    [Description("fluid properties for the superheated region")]
    [JsonObject("FluidProperties:Superheated")]
    public class FluidProperties_Superheated : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("fluid_name")]
public string FluidName { get; set; } = "";
        

[Description("Enthalpy Units are J/kg Density Units are kg/m3")]
[JsonProperty("fluid_property_type")]
public FluidProperties_Superheated_FluidPropertyType FluidPropertyType { get; set; } = (FluidProperties_Superheated_FluidPropertyType)Enum.Parse(typeof(FluidProperties_Superheated_FluidPropertyType), "Density");
        

[Description("Enter the name of a FluidProperties:Temperatures object.")]
[JsonProperty("temperature_values_name")]
public string TemperatureValuesName { get; set; } = "";
        

[Description("pressure for this list of properties")]
[JsonProperty("pressure")]
public System.Nullable<float> Pressure { get; set; } = null;
        

[JsonProperty("property_value_1")]
public System.Nullable<float> PropertyValue1 { get; set; } = null;
        

[JsonProperty("property_value_2")]
public System.Nullable<float> PropertyValue2 { get; set; } = null;
        

[JsonProperty("property_value_3")]
public System.Nullable<float> PropertyValue3 { get; set; } = null;
        

[JsonProperty("property_value_4")]
public System.Nullable<float> PropertyValue4 { get; set; } = null;
        

[JsonProperty("property_value_5")]
public System.Nullable<float> PropertyValue5 { get; set; } = null;
        

[JsonProperty("property_value_6")]
public System.Nullable<float> PropertyValue6 { get; set; } = null;
        

[JsonProperty("property_value_7")]
public System.Nullable<float> PropertyValue7 { get; set; } = null;
        

[JsonProperty("property_value_8")]
public System.Nullable<float> PropertyValue8 { get; set; } = null;
        

[JsonProperty("property_value_9")]
public System.Nullable<float> PropertyValue9 { get; set; } = null;
        

[JsonProperty("property_value_10")]
public System.Nullable<float> PropertyValue10 { get; set; } = null;
        

[JsonProperty("property_value_11")]
public System.Nullable<float> PropertyValue11 { get; set; } = null;
        

[JsonProperty("property_value_12")]
public System.Nullable<float> PropertyValue12 { get; set; } = null;
        

[JsonProperty("property_value_13")]
public System.Nullable<float> PropertyValue13 { get; set; } = null;
        

[JsonProperty("property_value_14")]
public System.Nullable<float> PropertyValue14 { get; set; } = null;
        

[JsonProperty("property_value_15")]
public System.Nullable<float> PropertyValue15 { get; set; } = null;
        

[JsonProperty("property_value_16")]
public System.Nullable<float> PropertyValue16 { get; set; } = null;
        

[JsonProperty("property_value_17")]
public System.Nullable<float> PropertyValue17 { get; set; } = null;
        

[JsonProperty("property_value_18")]
public System.Nullable<float> PropertyValue18 { get; set; } = null;
        

[JsonProperty("property_value_19")]
public System.Nullable<float> PropertyValue19 { get; set; } = null;
        

[JsonProperty("property_value_20")]
public System.Nullable<float> PropertyValue20 { get; set; } = null;
        

[JsonProperty("property_value_21")]
public System.Nullable<float> PropertyValue21 { get; set; } = null;
        

[JsonProperty("property_value_22")]
public System.Nullable<float> PropertyValue22 { get; set; } = null;
        

[JsonProperty("property_value_23")]
public System.Nullable<float> PropertyValue23 { get; set; } = null;
        

[JsonProperty("property_value_24")]
public System.Nullable<float> PropertyValue24 { get; set; } = null;
        

[JsonProperty("property_value_25")]
public System.Nullable<float> PropertyValue25 { get; set; } = null;
        

[JsonProperty("property_value_26")]
public System.Nullable<float> PropertyValue26 { get; set; } = null;
        

[JsonProperty("property_value_27")]
public System.Nullable<float> PropertyValue27 { get; set; } = null;
        

[JsonProperty("property_value_28")]
public System.Nullable<float> PropertyValue28 { get; set; } = null;
        

[JsonProperty("property_value_29")]
public System.Nullable<float> PropertyValue29 { get; set; } = null;
        

[JsonProperty("property_value_30")]
public System.Nullable<float> PropertyValue30 { get; set; } = null;
        

[JsonProperty("property_value_31")]
public System.Nullable<float> PropertyValue31 { get; set; } = null;
        

[JsonProperty("property_value_32")]
public System.Nullable<float> PropertyValue32 { get; set; } = null;
        

[JsonProperty("property_value_33")]
public System.Nullable<float> PropertyValue33 { get; set; } = null;
        

[JsonProperty("property_value_34")]
public System.Nullable<float> PropertyValue34 { get; set; } = null;
        

[JsonProperty("property_value_35")]
public System.Nullable<float> PropertyValue35 { get; set; } = null;
        

[JsonProperty("property_value_36")]
public System.Nullable<float> PropertyValue36 { get; set; } = null;
        

[JsonProperty("property_value_37")]
public System.Nullable<float> PropertyValue37 { get; set; } = null;
        

[JsonProperty("property_value_38")]
public System.Nullable<float> PropertyValue38 { get; set; } = null;
        

[JsonProperty("property_value_39")]
public System.Nullable<float> PropertyValue39 { get; set; } = null;
        

[JsonProperty("property_value_40")]
public System.Nullable<float> PropertyValue40 { get; set; } = null;
        

[JsonProperty("property_value_41")]
public System.Nullable<float> PropertyValue41 { get; set; } = null;
        

[JsonProperty("property_value_42")]
public System.Nullable<float> PropertyValue42 { get; set; } = null;
        

[JsonProperty("property_value_43")]
public System.Nullable<float> PropertyValue43 { get; set; } = null;
        

[JsonProperty("property_value_44")]
public System.Nullable<float> PropertyValue44 { get; set; } = null;
        

[JsonProperty("property_value_45")]
public System.Nullable<float> PropertyValue45 { get; set; } = null;
        

[JsonProperty("property_value_46")]
public System.Nullable<float> PropertyValue46 { get; set; } = null;
        

[JsonProperty("property_value_47")]
public System.Nullable<float> PropertyValue47 { get; set; } = null;
        

[JsonProperty("property_value_48")]
public System.Nullable<float> PropertyValue48 { get; set; } = null;
        

[JsonProperty("property_value_49")]
public System.Nullable<float> PropertyValue49 { get; set; } = null;
        

[JsonProperty("property_value_50")]
public System.Nullable<float> PropertyValue50 { get; set; } = null;
        

[JsonProperty("property_value_51")]
public System.Nullable<float> PropertyValue51 { get; set; } = null;
        

[JsonProperty("property_value_52")]
public System.Nullable<float> PropertyValue52 { get; set; } = null;
        

[JsonProperty("property_value_53")]
public System.Nullable<float> PropertyValue53 { get; set; } = null;
        

[JsonProperty("property_value_54")]
public System.Nullable<float> PropertyValue54 { get; set; } = null;
        

[JsonProperty("property_value_55")]
public System.Nullable<float> PropertyValue55 { get; set; } = null;
        

[JsonProperty("property_value_56")]
public System.Nullable<float> PropertyValue56 { get; set; } = null;
        

[JsonProperty("property_value_57")]
public System.Nullable<float> PropertyValue57 { get; set; } = null;
        

[JsonProperty("property_value_58")]
public System.Nullable<float> PropertyValue58 { get; set; } = null;
        

[JsonProperty("property_value_59")]
public System.Nullable<float> PropertyValue59 { get; set; } = null;
        

[JsonProperty("property_value_60")]
public System.Nullable<float> PropertyValue60 { get; set; } = null;
        

[JsonProperty("property_value_61")]
public System.Nullable<float> PropertyValue61 { get; set; } = null;
        

[JsonProperty("property_value_62")]
public System.Nullable<float> PropertyValue62 { get; set; } = null;
        

[JsonProperty("property_value_63")]
public System.Nullable<float> PropertyValue63 { get; set; } = null;
        

[JsonProperty("property_value_64")]
public System.Nullable<float> PropertyValue64 { get; set; } = null;
        

[JsonProperty("property_value_65")]
public System.Nullable<float> PropertyValue65 { get; set; } = null;
        

[JsonProperty("property_value_66")]
public System.Nullable<float> PropertyValue66 { get; set; } = null;
        

[JsonProperty("property_value_67")]
public System.Nullable<float> PropertyValue67 { get; set; } = null;
        

[JsonProperty("property_value_68")]
public System.Nullable<float> PropertyValue68 { get; set; } = null;
        

[JsonProperty("property_value_69")]
public System.Nullable<float> PropertyValue69 { get; set; } = null;
        

[JsonProperty("property_value_70")]
public System.Nullable<float> PropertyValue70 { get; set; } = null;
        

[JsonProperty("property_value_71")]
public System.Nullable<float> PropertyValue71 { get; set; } = null;
        

[JsonProperty("property_value_72")]
public System.Nullable<float> PropertyValue72 { get; set; } = null;
        

[JsonProperty("property_value_73")]
public System.Nullable<float> PropertyValue73 { get; set; } = null;
        

[JsonProperty("property_value_74")]
public System.Nullable<float> PropertyValue74 { get; set; } = null;
        

[JsonProperty("property_value_75")]
public System.Nullable<float> PropertyValue75 { get; set; } = null;
        

[JsonProperty("property_value_76")]
public System.Nullable<float> PropertyValue76 { get; set; } = null;
        

[JsonProperty("property_value_77")]
public System.Nullable<float> PropertyValue77 { get; set; } = null;
        

[JsonProperty("property_value_78")]
public System.Nullable<float> PropertyValue78 { get; set; } = null;
        

[JsonProperty("property_value_79")]
public System.Nullable<float> PropertyValue79 { get; set; } = null;
        

[JsonProperty("property_value_80")]
public System.Nullable<float> PropertyValue80 { get; set; } = null;
        

[JsonProperty("property_value_81")]
public System.Nullable<float> PropertyValue81 { get; set; } = null;
        

[JsonProperty("property_value_82")]
public System.Nullable<float> PropertyValue82 { get; set; } = null;
        

[JsonProperty("property_value_83")]
public System.Nullable<float> PropertyValue83 { get; set; } = null;
        

[JsonProperty("property_value_84")]
public System.Nullable<float> PropertyValue84 { get; set; } = null;
        

[JsonProperty("property_value_85")]
public System.Nullable<float> PropertyValue85 { get; set; } = null;
        

[JsonProperty("property_value_86")]
public System.Nullable<float> PropertyValue86 { get; set; } = null;
        

[JsonProperty("property_value_87")]
public System.Nullable<float> PropertyValue87 { get; set; } = null;
        

[JsonProperty("property_value_88")]
public System.Nullable<float> PropertyValue88 { get; set; } = null;
        

[JsonProperty("property_value_89")]
public System.Nullable<float> PropertyValue89 { get; set; } = null;
        

[JsonProperty("property_value_90")]
public System.Nullable<float> PropertyValue90 { get; set; } = null;
        

[JsonProperty("property_value_91")]
public System.Nullable<float> PropertyValue91 { get; set; } = null;
        

[JsonProperty("property_value_92")]
public System.Nullable<float> PropertyValue92 { get; set; } = null;
        

[JsonProperty("property_value_93")]
public System.Nullable<float> PropertyValue93 { get; set; } = null;
        

[JsonProperty("property_value_94")]
public System.Nullable<float> PropertyValue94 { get; set; } = null;
        

[JsonProperty("property_value_95")]
public System.Nullable<float> PropertyValue95 { get; set; } = null;
        

[JsonProperty("property_value_96")]
public System.Nullable<float> PropertyValue96 { get; set; } = null;
        

[JsonProperty("property_value_97")]
public System.Nullable<float> PropertyValue97 { get; set; } = null;
        

[JsonProperty("property_value_98")]
public System.Nullable<float> PropertyValue98 { get; set; } = null;
        

[JsonProperty("property_value_99")]
public System.Nullable<float> PropertyValue99 { get; set; } = null;
        

[JsonProperty("property_value_100")]
public System.Nullable<float> PropertyValue100 { get; set; } = null;
        

[JsonProperty("property_value_101")]
public System.Nullable<float> PropertyValue101 { get; set; } = null;
        

[JsonProperty("property_value_102")]
public System.Nullable<float> PropertyValue102 { get; set; } = null;
        

[JsonProperty("property_value_103")]
public System.Nullable<float> PropertyValue103 { get; set; } = null;
        

[JsonProperty("property_value_104")]
public System.Nullable<float> PropertyValue104 { get; set; } = null;
        

[JsonProperty("property_value_105")]
public System.Nullable<float> PropertyValue105 { get; set; } = null;
        

[JsonProperty("property_value_106")]
public System.Nullable<float> PropertyValue106 { get; set; } = null;
        

[JsonProperty("property_value_107")]
public System.Nullable<float> PropertyValue107 { get; set; } = null;
        

[JsonProperty("property_value_108")]
public System.Nullable<float> PropertyValue108 { get; set; } = null;
        

[JsonProperty("property_value_109")]
public System.Nullable<float> PropertyValue109 { get; set; } = null;
        

[JsonProperty("property_value_110")]
public System.Nullable<float> PropertyValue110 { get; set; } = null;
        

[JsonProperty("property_value_111")]
public System.Nullable<float> PropertyValue111 { get; set; } = null;
        

[JsonProperty("property_value_112")]
public System.Nullable<float> PropertyValue112 { get; set; } = null;
        

[JsonProperty("property_value_113")]
public System.Nullable<float> PropertyValue113 { get; set; } = null;
        

[JsonProperty("property_value_114")]
public System.Nullable<float> PropertyValue114 { get; set; } = null;
        

[JsonProperty("property_value_115")]
public System.Nullable<float> PropertyValue115 { get; set; } = null;
        

[JsonProperty("property_value_116")]
public System.Nullable<float> PropertyValue116 { get; set; } = null;
        

[JsonProperty("property_value_117")]
public System.Nullable<float> PropertyValue117 { get; set; } = null;
        

[JsonProperty("property_value_118")]
public System.Nullable<float> PropertyValue118 { get; set; } = null;
        

[JsonProperty("property_value_119")]
public System.Nullable<float> PropertyValue119 { get; set; } = null;
        

[JsonProperty("property_value_120")]
public System.Nullable<float> PropertyValue120 { get; set; } = null;
        

[JsonProperty("property_value_121")]
public System.Nullable<float> PropertyValue121 { get; set; } = null;
        

[JsonProperty("property_value_122")]
public System.Nullable<float> PropertyValue122 { get; set; } = null;
        

[JsonProperty("property_value_123")]
public System.Nullable<float> PropertyValue123 { get; set; } = null;
        

[JsonProperty("property_value_124")]
public System.Nullable<float> PropertyValue124 { get; set; } = null;
        

[JsonProperty("property_value_125")]
public System.Nullable<float> PropertyValue125 { get; set; } = null;
        

[JsonProperty("property_value_126")]
public System.Nullable<float> PropertyValue126 { get; set; } = null;
        

[JsonProperty("property_value_127")]
public System.Nullable<float> PropertyValue127 { get; set; } = null;
        

[JsonProperty("property_value_128")]
public System.Nullable<float> PropertyValue128 { get; set; } = null;
        

[JsonProperty("property_value_129")]
public System.Nullable<float> PropertyValue129 { get; set; } = null;
        

[JsonProperty("property_value_130")]
public System.Nullable<float> PropertyValue130 { get; set; } = null;
        

[JsonProperty("property_value_131")]
public System.Nullable<float> PropertyValue131 { get; set; } = null;
        

[JsonProperty("property_value_132")]
public System.Nullable<float> PropertyValue132 { get; set; } = null;
        

[JsonProperty("property_value_133")]
public System.Nullable<float> PropertyValue133 { get; set; } = null;
        

[JsonProperty("property_value_134")]
public System.Nullable<float> PropertyValue134 { get; set; } = null;
        

[JsonProperty("property_value_135")]
public System.Nullable<float> PropertyValue135 { get; set; } = null;
        

[JsonProperty("property_value_136")]
public System.Nullable<float> PropertyValue136 { get; set; } = null;
        

[JsonProperty("property_value_137")]
public System.Nullable<float> PropertyValue137 { get; set; } = null;
        

[JsonProperty("property_value_138")]
public System.Nullable<float> PropertyValue138 { get; set; } = null;
        

[JsonProperty("property_value_139")]
public System.Nullable<float> PropertyValue139 { get; set; } = null;
        

[JsonProperty("property_value_140")]
public System.Nullable<float> PropertyValue140 { get; set; } = null;
        

[JsonProperty("property_value_141")]
public System.Nullable<float> PropertyValue141 { get; set; } = null;
        

[JsonProperty("property_value_142")]
public System.Nullable<float> PropertyValue142 { get; set; } = null;
        

[JsonProperty("property_value_143")]
public System.Nullable<float> PropertyValue143 { get; set; } = null;
        

[JsonProperty("property_value_144")]
public System.Nullable<float> PropertyValue144 { get; set; } = null;
        

[JsonProperty("property_value_145")]
public System.Nullable<float> PropertyValue145 { get; set; } = null;
        

[JsonProperty("property_value_146")]
public System.Nullable<float> PropertyValue146 { get; set; } = null;
        

[JsonProperty("property_value_147")]
public System.Nullable<float> PropertyValue147 { get; set; } = null;
        

[JsonProperty("property_value_148")]
public System.Nullable<float> PropertyValue148 { get; set; } = null;
        

[JsonProperty("property_value_149")]
public System.Nullable<float> PropertyValue149 { get; set; } = null;
        

[JsonProperty("property_value_150")]
public System.Nullable<float> PropertyValue150 { get; set; } = null;
        

[JsonProperty("property_value_151")]
public System.Nullable<float> PropertyValue151 { get; set; } = null;
        

[JsonProperty("property_value_152")]
public System.Nullable<float> PropertyValue152 { get; set; } = null;
        

[JsonProperty("property_value_153")]
public System.Nullable<float> PropertyValue153 { get; set; } = null;
        

[JsonProperty("property_value_154")]
public System.Nullable<float> PropertyValue154 { get; set; } = null;
        

[JsonProperty("property_value_155")]
public System.Nullable<float> PropertyValue155 { get; set; } = null;
        

[JsonProperty("property_value_156")]
public System.Nullable<float> PropertyValue156 { get; set; } = null;
        

[JsonProperty("property_value_157")]
public System.Nullable<float> PropertyValue157 { get; set; } = null;
        

[JsonProperty("property_value_158")]
public System.Nullable<float> PropertyValue158 { get; set; } = null;
        

[JsonProperty("property_value_159")]
public System.Nullable<float> PropertyValue159 { get; set; } = null;
        

[JsonProperty("property_value_160")]
public System.Nullable<float> PropertyValue160 { get; set; } = null;
        

[JsonProperty("property_value_161")]
public System.Nullable<float> PropertyValue161 { get; set; } = null;
        

[JsonProperty("property_value_162")]
public System.Nullable<float> PropertyValue162 { get; set; } = null;
        

[JsonProperty("property_value_163")]
public System.Nullable<float> PropertyValue163 { get; set; } = null;
        

[JsonProperty("property_value_164")]
public System.Nullable<float> PropertyValue164 { get; set; } = null;
        

[JsonProperty("property_value_165")]
public System.Nullable<float> PropertyValue165 { get; set; } = null;
        

[JsonProperty("property_value_166")]
public System.Nullable<float> PropertyValue166 { get; set; } = null;
        

[JsonProperty("property_value_167")]
public System.Nullable<float> PropertyValue167 { get; set; } = null;
        

[JsonProperty("property_value_168")]
public System.Nullable<float> PropertyValue168 { get; set; } = null;
        

[JsonProperty("property_value_169")]
public System.Nullable<float> PropertyValue169 { get; set; } = null;
        

[JsonProperty("property_value_170")]
public System.Nullable<float> PropertyValue170 { get; set; } = null;
        

[JsonProperty("property_value_171")]
public System.Nullable<float> PropertyValue171 { get; set; } = null;
        

[JsonProperty("property_value_172")]
public System.Nullable<float> PropertyValue172 { get; set; } = null;
        

[JsonProperty("property_value_173")]
public System.Nullable<float> PropertyValue173 { get; set; } = null;
        

[JsonProperty("property_value_174")]
public System.Nullable<float> PropertyValue174 { get; set; } = null;
        

[JsonProperty("property_value_175")]
public System.Nullable<float> PropertyValue175 { get; set; } = null;
        

[JsonProperty("property_value_176")]
public System.Nullable<float> PropertyValue176 { get; set; } = null;
        

[JsonProperty("property_value_177")]
public System.Nullable<float> PropertyValue177 { get; set; } = null;
        

[JsonProperty("property_value_178")]
public System.Nullable<float> PropertyValue178 { get; set; } = null;
        

[JsonProperty("property_value_179")]
public System.Nullable<float> PropertyValue179 { get; set; } = null;
        

[JsonProperty("property_value_180")]
public System.Nullable<float> PropertyValue180 { get; set; } = null;
        

[JsonProperty("property_value_181")]
public System.Nullable<float> PropertyValue181 { get; set; } = null;
        

[JsonProperty("property_value_182")]
public System.Nullable<float> PropertyValue182 { get; set; } = null;
        

[JsonProperty("property_value_183")]
public System.Nullable<float> PropertyValue183 { get; set; } = null;
        

[JsonProperty("property_value_184")]
public System.Nullable<float> PropertyValue184 { get; set; } = null;
        

[JsonProperty("property_value_185")]
public System.Nullable<float> PropertyValue185 { get; set; } = null;
        

[JsonProperty("property_value_186")]
public System.Nullable<float> PropertyValue186 { get; set; } = null;
        

[JsonProperty("property_value_187")]
public System.Nullable<float> PropertyValue187 { get; set; } = null;
        

[JsonProperty("property_value_188")]
public System.Nullable<float> PropertyValue188 { get; set; } = null;
        

[JsonProperty("property_value_189")]
public System.Nullable<float> PropertyValue189 { get; set; } = null;
        

[JsonProperty("property_value_190")]
public System.Nullable<float> PropertyValue190 { get; set; } = null;
        

[JsonProperty("property_value_191")]
public System.Nullable<float> PropertyValue191 { get; set; } = null;
        

[JsonProperty("property_value_192")]
public System.Nullable<float> PropertyValue192 { get; set; } = null;
        

[JsonProperty("property_value_193")]
public System.Nullable<float> PropertyValue193 { get; set; } = null;
        

[JsonProperty("property_value_194")]
public System.Nullable<float> PropertyValue194 { get; set; } = null;
        

[JsonProperty("property_value_195")]
public System.Nullable<float> PropertyValue195 { get; set; } = null;
        

[JsonProperty("property_value_196")]
public System.Nullable<float> PropertyValue196 { get; set; } = null;
        

[JsonProperty("property_value_197")]
public System.Nullable<float> PropertyValue197 { get; set; } = null;
        

[JsonProperty("property_value_198")]
public System.Nullable<float> PropertyValue198 { get; set; } = null;
        

[JsonProperty("property_value_199")]
public System.Nullable<float> PropertyValue199 { get; set; } = null;
        

[JsonProperty("property_value_200")]
public System.Nullable<float> PropertyValue200 { get; set; } = null;
        

[JsonProperty("property_value_201")]
public System.Nullable<float> PropertyValue201 { get; set; } = null;
        

[JsonProperty("property_value_202")]
public System.Nullable<float> PropertyValue202 { get; set; } = null;
        

[JsonProperty("property_value_203")]
public System.Nullable<float> PropertyValue203 { get; set; } = null;
        

[JsonProperty("property_value_204")]
public System.Nullable<float> PropertyValue204 { get; set; } = null;
        

[JsonProperty("property_value_205")]
public System.Nullable<float> PropertyValue205 { get; set; } = null;
        

[JsonProperty("property_value_206")]
public System.Nullable<float> PropertyValue206 { get; set; } = null;
        

[JsonProperty("property_value_207")]
public System.Nullable<float> PropertyValue207 { get; set; } = null;
        

[JsonProperty("property_value_208")]
public System.Nullable<float> PropertyValue208 { get; set; } = null;
        

[JsonProperty("property_value_209")]
public System.Nullable<float> PropertyValue209 { get; set; } = null;
        

[JsonProperty("property_value_210")]
public System.Nullable<float> PropertyValue210 { get; set; } = null;
        

[JsonProperty("property_value_211")]
public System.Nullable<float> PropertyValue211 { get; set; } = null;
        

[JsonProperty("property_value_212")]
public System.Nullable<float> PropertyValue212 { get; set; } = null;
        

[JsonProperty("property_value_213")]
public System.Nullable<float> PropertyValue213 { get; set; } = null;
        

[JsonProperty("property_value_214")]
public System.Nullable<float> PropertyValue214 { get; set; } = null;
        

[JsonProperty("property_value_215")]
public System.Nullable<float> PropertyValue215 { get; set; } = null;
        

[JsonProperty("property_value_216")]
public System.Nullable<float> PropertyValue216 { get; set; } = null;
        

[JsonProperty("property_value_217")]
public System.Nullable<float> PropertyValue217 { get; set; } = null;
        

[JsonProperty("property_value_218")]
public System.Nullable<float> PropertyValue218 { get; set; } = null;
        

[JsonProperty("property_value_219")]
public System.Nullable<float> PropertyValue219 { get; set; } = null;
        

[JsonProperty("property_value_220")]
public System.Nullable<float> PropertyValue220 { get; set; } = null;
        

[JsonProperty("property_value_221")]
public System.Nullable<float> PropertyValue221 { get; set; } = null;
        

[JsonProperty("property_value_222")]
public System.Nullable<float> PropertyValue222 { get; set; } = null;
        

[JsonProperty("property_value_223")]
public System.Nullable<float> PropertyValue223 { get; set; } = null;
        

[JsonProperty("property_value_224")]
public System.Nullable<float> PropertyValue224 { get; set; } = null;
        

[JsonProperty("property_value_225")]
public System.Nullable<float> PropertyValue225 { get; set; } = null;
        

[JsonProperty("property_value_226")]
public System.Nullable<float> PropertyValue226 { get; set; } = null;
        

[JsonProperty("property_value_227")]
public System.Nullable<float> PropertyValue227 { get; set; } = null;
        

[JsonProperty("property_value_228")]
public System.Nullable<float> PropertyValue228 { get; set; } = null;
        

[JsonProperty("property_value_229")]
public System.Nullable<float> PropertyValue229 { get; set; } = null;
        

[JsonProperty("property_value_230")]
public System.Nullable<float> PropertyValue230 { get; set; } = null;
        

[JsonProperty("property_value_231")]
public System.Nullable<float> PropertyValue231 { get; set; } = null;
        

[JsonProperty("property_value_232")]
public System.Nullable<float> PropertyValue232 { get; set; } = null;
        

[JsonProperty("property_value_233")]
public System.Nullable<float> PropertyValue233 { get; set; } = null;
        

[JsonProperty("property_value_234")]
public System.Nullable<float> PropertyValue234 { get; set; } = null;
        

[JsonProperty("property_value_235")]
public System.Nullable<float> PropertyValue235 { get; set; } = null;
        

[JsonProperty("property_value_236")]
public System.Nullable<float> PropertyValue236 { get; set; } = null;
        

[JsonProperty("property_value_237")]
public System.Nullable<float> PropertyValue237 { get; set; } = null;
        

[JsonProperty("property_value_238")]
public System.Nullable<float> PropertyValue238 { get; set; } = null;
        

[JsonProperty("property_value_239")]
public System.Nullable<float> PropertyValue239 { get; set; } = null;
        

[JsonProperty("property_value_240")]
public System.Nullable<float> PropertyValue240 { get; set; } = null;
        

[JsonProperty("property_value_241")]
public System.Nullable<float> PropertyValue241 { get; set; } = null;
        

[JsonProperty("property_value_242")]
public System.Nullable<float> PropertyValue242 { get; set; } = null;
        

[JsonProperty("property_value_243")]
public System.Nullable<float> PropertyValue243 { get; set; } = null;
        

[JsonProperty("property_value_244")]
public System.Nullable<float> PropertyValue244 { get; set; } = null;
        

[JsonProperty("property_value_245")]
public System.Nullable<float> PropertyValue245 { get; set; } = null;
        

[JsonProperty("property_value_246")]
public System.Nullable<float> PropertyValue246 { get; set; } = null;
        

[JsonProperty("property_value_247")]
public System.Nullable<float> PropertyValue247 { get; set; } = null;
        

[JsonProperty("property_value_248")]
public System.Nullable<float> PropertyValue248 { get; set; } = null;
        

[JsonProperty("property_value_249")]
public System.Nullable<float> PropertyValue249 { get; set; } = null;
        

[JsonProperty("property_value_250")]
public System.Nullable<float> PropertyValue250 { get; set; } = null;
    }
    
    public enum FluidProperties_Superheated_FluidPropertyType
    {
        
        [JsonProperty("Density")]
        Density = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
    }
    
    [Description("fluid properties for water/other fluid mixtures")]
    [JsonObject("FluidProperties:Concentration")]
    public class FluidProperties_Concentration : BHoMObject, IEnergyPlusClass
    {
        

[Description("should not be any of the defaults (Water, EthyleneGlycol, or PropyleneGlycol)")]
[JsonProperty("fluid_name")]
public string FluidName { get; set; } = "";
        

[Description("Density Units are kg/m3 SpecificHeat Units are J/kg-K Conductivity Units are W/m-" +
    "K Viscosity Units are N-s/m2")]
[JsonProperty("fluid_property_type")]
public FluidProperties_Concentration_FluidPropertyType FluidPropertyType { get; set; } = (FluidProperties_Concentration_FluidPropertyType)Enum.Parse(typeof(FluidProperties_Concentration_FluidPropertyType), "Conductivity");
        

[Description("Enter the name of a FluidProperties:Temperatures object.")]
[JsonProperty("temperature_values_name")]
public string TemperatureValuesName { get; set; } = "";
        

[Description("Glycol concentration for this list of properties entered as a fraction")]
[JsonProperty("concentration")]
public System.Nullable<float> Concentration { get; set; } = null;
        

[JsonProperty("property_value_1")]
public System.Nullable<float> PropertyValue1 { get; set; } = null;
        

[JsonProperty("property_value_2")]
public System.Nullable<float> PropertyValue2 { get; set; } = null;
        

[JsonProperty("property_value_3")]
public System.Nullable<float> PropertyValue3 { get; set; } = null;
        

[JsonProperty("property_value_4")]
public System.Nullable<float> PropertyValue4 { get; set; } = null;
        

[JsonProperty("property_value_5")]
public System.Nullable<float> PropertyValue5 { get; set; } = null;
        

[JsonProperty("property_value_6")]
public System.Nullable<float> PropertyValue6 { get; set; } = null;
        

[JsonProperty("property_value_7")]
public System.Nullable<float> PropertyValue7 { get; set; } = null;
        

[JsonProperty("property_value_8")]
public System.Nullable<float> PropertyValue8 { get; set; } = null;
        

[JsonProperty("property_value_9")]
public System.Nullable<float> PropertyValue9 { get; set; } = null;
        

[JsonProperty("property_value_10")]
public System.Nullable<float> PropertyValue10 { get; set; } = null;
        

[JsonProperty("property_value_11")]
public System.Nullable<float> PropertyValue11 { get; set; } = null;
        

[JsonProperty("property_value_12")]
public System.Nullable<float> PropertyValue12 { get; set; } = null;
        

[JsonProperty("property_value_13")]
public System.Nullable<float> PropertyValue13 { get; set; } = null;
        

[JsonProperty("property_value_14")]
public System.Nullable<float> PropertyValue14 { get; set; } = null;
        

[JsonProperty("property_value_15")]
public System.Nullable<float> PropertyValue15 { get; set; } = null;
        

[JsonProperty("property_value_16")]
public System.Nullable<float> PropertyValue16 { get; set; } = null;
        

[JsonProperty("property_value_17")]
public System.Nullable<float> PropertyValue17 { get; set; } = null;
        

[JsonProperty("property_value_18")]
public System.Nullable<float> PropertyValue18 { get; set; } = null;
        

[JsonProperty("property_value_19")]
public System.Nullable<float> PropertyValue19 { get; set; } = null;
        

[JsonProperty("property_value_20")]
public System.Nullable<float> PropertyValue20 { get; set; } = null;
        

[JsonProperty("property_value_21")]
public System.Nullable<float> PropertyValue21 { get; set; } = null;
        

[JsonProperty("property_value_22")]
public System.Nullable<float> PropertyValue22 { get; set; } = null;
        

[JsonProperty("property_value_23")]
public System.Nullable<float> PropertyValue23 { get; set; } = null;
        

[JsonProperty("property_value_24")]
public System.Nullable<float> PropertyValue24 { get; set; } = null;
        

[JsonProperty("property_value_25")]
public System.Nullable<float> PropertyValue25 { get; set; } = null;
        

[JsonProperty("property_value_26")]
public System.Nullable<float> PropertyValue26 { get; set; } = null;
        

[JsonProperty("property_value_27")]
public System.Nullable<float> PropertyValue27 { get; set; } = null;
        

[JsonProperty("property_value_28")]
public System.Nullable<float> PropertyValue28 { get; set; } = null;
        

[JsonProperty("property_value_29")]
public System.Nullable<float> PropertyValue29 { get; set; } = null;
        

[JsonProperty("property_value_30")]
public System.Nullable<float> PropertyValue30 { get; set; } = null;
        

[JsonProperty("property_value_31")]
public System.Nullable<float> PropertyValue31 { get; set; } = null;
        

[JsonProperty("property_value_32")]
public System.Nullable<float> PropertyValue32 { get; set; } = null;
        

[JsonProperty("property_value_33")]
public System.Nullable<float> PropertyValue33 { get; set; } = null;
        

[JsonProperty("property_value_34")]
public System.Nullable<float> PropertyValue34 { get; set; } = null;
        

[JsonProperty("property_value_35")]
public System.Nullable<float> PropertyValue35 { get; set; } = null;
        

[JsonProperty("property_value_36")]
public System.Nullable<float> PropertyValue36 { get; set; } = null;
        

[JsonProperty("property_value_37")]
public System.Nullable<float> PropertyValue37 { get; set; } = null;
        

[JsonProperty("property_value_38")]
public System.Nullable<float> PropertyValue38 { get; set; } = null;
        

[JsonProperty("property_value_39")]
public System.Nullable<float> PropertyValue39 { get; set; } = null;
        

[JsonProperty("property_value_40")]
public System.Nullable<float> PropertyValue40 { get; set; } = null;
        

[JsonProperty("property_value_41")]
public System.Nullable<float> PropertyValue41 { get; set; } = null;
        

[JsonProperty("property_value_42")]
public System.Nullable<float> PropertyValue42 { get; set; } = null;
        

[JsonProperty("property_value_43")]
public System.Nullable<float> PropertyValue43 { get; set; } = null;
        

[JsonProperty("property_value_44")]
public System.Nullable<float> PropertyValue44 { get; set; } = null;
        

[JsonProperty("property_value_45")]
public System.Nullable<float> PropertyValue45 { get; set; } = null;
        

[JsonProperty("property_value_46")]
public System.Nullable<float> PropertyValue46 { get; set; } = null;
        

[JsonProperty("property_value_47")]
public System.Nullable<float> PropertyValue47 { get; set; } = null;
        

[JsonProperty("property_value_48")]
public System.Nullable<float> PropertyValue48 { get; set; } = null;
        

[JsonProperty("property_value_49")]
public System.Nullable<float> PropertyValue49 { get; set; } = null;
        

[JsonProperty("property_value_50")]
public System.Nullable<float> PropertyValue50 { get; set; } = null;
        

[JsonProperty("property_value_51")]
public System.Nullable<float> PropertyValue51 { get; set; } = null;
        

[JsonProperty("property_value_52")]
public System.Nullable<float> PropertyValue52 { get; set; } = null;
        

[JsonProperty("property_value_53")]
public System.Nullable<float> PropertyValue53 { get; set; } = null;
        

[JsonProperty("property_value_54")]
public System.Nullable<float> PropertyValue54 { get; set; } = null;
        

[JsonProperty("property_value_55")]
public System.Nullable<float> PropertyValue55 { get; set; } = null;
        

[JsonProperty("property_value_56")]
public System.Nullable<float> PropertyValue56 { get; set; } = null;
        

[JsonProperty("property_value_57")]
public System.Nullable<float> PropertyValue57 { get; set; } = null;
        

[JsonProperty("property_value_58")]
public System.Nullable<float> PropertyValue58 { get; set; } = null;
        

[JsonProperty("property_value_59")]
public System.Nullable<float> PropertyValue59 { get; set; } = null;
        

[JsonProperty("property_value_60")]
public System.Nullable<float> PropertyValue60 { get; set; } = null;
        

[JsonProperty("property_value_61")]
public System.Nullable<float> PropertyValue61 { get; set; } = null;
        

[JsonProperty("property_value_62")]
public System.Nullable<float> PropertyValue62 { get; set; } = null;
        

[JsonProperty("property_value_63")]
public System.Nullable<float> PropertyValue63 { get; set; } = null;
        

[JsonProperty("property_value_64")]
public System.Nullable<float> PropertyValue64 { get; set; } = null;
        

[JsonProperty("property_value_65")]
public System.Nullable<float> PropertyValue65 { get; set; } = null;
        

[JsonProperty("property_value_66")]
public System.Nullable<float> PropertyValue66 { get; set; } = null;
        

[JsonProperty("property_value_67")]
public System.Nullable<float> PropertyValue67 { get; set; } = null;
        

[JsonProperty("property_value_68")]
public System.Nullable<float> PropertyValue68 { get; set; } = null;
        

[JsonProperty("property_value_69")]
public System.Nullable<float> PropertyValue69 { get; set; } = null;
        

[JsonProperty("property_value_70")]
public System.Nullable<float> PropertyValue70 { get; set; } = null;
        

[JsonProperty("property_value_71")]
public System.Nullable<float> PropertyValue71 { get; set; } = null;
        

[JsonProperty("property_value_72")]
public System.Nullable<float> PropertyValue72 { get; set; } = null;
        

[JsonProperty("property_value_73")]
public System.Nullable<float> PropertyValue73 { get; set; } = null;
        

[JsonProperty("property_value_74")]
public System.Nullable<float> PropertyValue74 { get; set; } = null;
        

[JsonProperty("property_value_75")]
public System.Nullable<float> PropertyValue75 { get; set; } = null;
        

[JsonProperty("property_value_76")]
public System.Nullable<float> PropertyValue76 { get; set; } = null;
        

[JsonProperty("property_value_77")]
public System.Nullable<float> PropertyValue77 { get; set; } = null;
        

[JsonProperty("property_value_78")]
public System.Nullable<float> PropertyValue78 { get; set; } = null;
        

[JsonProperty("property_value_79")]
public System.Nullable<float> PropertyValue79 { get; set; } = null;
        

[JsonProperty("property_value_80")]
public System.Nullable<float> PropertyValue80 { get; set; } = null;
        

[JsonProperty("property_value_81")]
public System.Nullable<float> PropertyValue81 { get; set; } = null;
        

[JsonProperty("property_value_82")]
public System.Nullable<float> PropertyValue82 { get; set; } = null;
        

[JsonProperty("property_value_83")]
public System.Nullable<float> PropertyValue83 { get; set; } = null;
        

[JsonProperty("property_value_84")]
public System.Nullable<float> PropertyValue84 { get; set; } = null;
        

[JsonProperty("property_value_85")]
public System.Nullable<float> PropertyValue85 { get; set; } = null;
        

[JsonProperty("property_value_86")]
public System.Nullable<float> PropertyValue86 { get; set; } = null;
        

[JsonProperty("property_value_87")]
public System.Nullable<float> PropertyValue87 { get; set; } = null;
        

[JsonProperty("property_value_88")]
public System.Nullable<float> PropertyValue88 { get; set; } = null;
        

[JsonProperty("property_value_89")]
public System.Nullable<float> PropertyValue89 { get; set; } = null;
        

[JsonProperty("property_value_90")]
public System.Nullable<float> PropertyValue90 { get; set; } = null;
        

[JsonProperty("property_value_91")]
public System.Nullable<float> PropertyValue91 { get; set; } = null;
        

[JsonProperty("property_value_92")]
public System.Nullable<float> PropertyValue92 { get; set; } = null;
        

[JsonProperty("property_value_93")]
public System.Nullable<float> PropertyValue93 { get; set; } = null;
        

[JsonProperty("property_value_94")]
public System.Nullable<float> PropertyValue94 { get; set; } = null;
        

[JsonProperty("property_value_95")]
public System.Nullable<float> PropertyValue95 { get; set; } = null;
        

[JsonProperty("property_value_96")]
public System.Nullable<float> PropertyValue96 { get; set; } = null;
        

[JsonProperty("property_value_97")]
public System.Nullable<float> PropertyValue97 { get; set; } = null;
        

[JsonProperty("property_value_98")]
public System.Nullable<float> PropertyValue98 { get; set; } = null;
        

[JsonProperty("property_value_99")]
public System.Nullable<float> PropertyValue99 { get; set; } = null;
        

[JsonProperty("property_value_100")]
public System.Nullable<float> PropertyValue100 { get; set; } = null;
        

[JsonProperty("property_value_101")]
public System.Nullable<float> PropertyValue101 { get; set; } = null;
        

[JsonProperty("property_value_102")]
public System.Nullable<float> PropertyValue102 { get; set; } = null;
        

[JsonProperty("property_value_103")]
public System.Nullable<float> PropertyValue103 { get; set; } = null;
        

[JsonProperty("property_value_104")]
public System.Nullable<float> PropertyValue104 { get; set; } = null;
        

[JsonProperty("property_value_105")]
public System.Nullable<float> PropertyValue105 { get; set; } = null;
        

[JsonProperty("property_value_106")]
public System.Nullable<float> PropertyValue106 { get; set; } = null;
        

[JsonProperty("property_value_107")]
public System.Nullable<float> PropertyValue107 { get; set; } = null;
        

[JsonProperty("property_value_108")]
public System.Nullable<float> PropertyValue108 { get; set; } = null;
        

[JsonProperty("property_value_109")]
public System.Nullable<float> PropertyValue109 { get; set; } = null;
        

[JsonProperty("property_value_110")]
public System.Nullable<float> PropertyValue110 { get; set; } = null;
        

[JsonProperty("property_value_111")]
public System.Nullable<float> PropertyValue111 { get; set; } = null;
        

[JsonProperty("property_value_112")]
public System.Nullable<float> PropertyValue112 { get; set; } = null;
        

[JsonProperty("property_value_113")]
public System.Nullable<float> PropertyValue113 { get; set; } = null;
        

[JsonProperty("property_value_114")]
public System.Nullable<float> PropertyValue114 { get; set; } = null;
        

[JsonProperty("property_value_115")]
public System.Nullable<float> PropertyValue115 { get; set; } = null;
        

[JsonProperty("property_value_116")]
public System.Nullable<float> PropertyValue116 { get; set; } = null;
        

[JsonProperty("property_value_117")]
public System.Nullable<float> PropertyValue117 { get; set; } = null;
        

[JsonProperty("property_value_118")]
public System.Nullable<float> PropertyValue118 { get; set; } = null;
        

[JsonProperty("property_value_119")]
public System.Nullable<float> PropertyValue119 { get; set; } = null;
        

[JsonProperty("property_value_120")]
public System.Nullable<float> PropertyValue120 { get; set; } = null;
        

[JsonProperty("property_value_121")]
public System.Nullable<float> PropertyValue121 { get; set; } = null;
        

[JsonProperty("property_value_122")]
public System.Nullable<float> PropertyValue122 { get; set; } = null;
        

[JsonProperty("property_value_123")]
public System.Nullable<float> PropertyValue123 { get; set; } = null;
        

[JsonProperty("property_value_124")]
public System.Nullable<float> PropertyValue124 { get; set; } = null;
        

[JsonProperty("property_value_125")]
public System.Nullable<float> PropertyValue125 { get; set; } = null;
        

[JsonProperty("property_value_126")]
public System.Nullable<float> PropertyValue126 { get; set; } = null;
        

[JsonProperty("property_value_127")]
public System.Nullable<float> PropertyValue127 { get; set; } = null;
        

[JsonProperty("property_value_128")]
public System.Nullable<float> PropertyValue128 { get; set; } = null;
        

[JsonProperty("property_value_129")]
public System.Nullable<float> PropertyValue129 { get; set; } = null;
        

[JsonProperty("property_value_130")]
public System.Nullable<float> PropertyValue130 { get; set; } = null;
        

[JsonProperty("property_value_131")]
public System.Nullable<float> PropertyValue131 { get; set; } = null;
        

[JsonProperty("property_value_132")]
public System.Nullable<float> PropertyValue132 { get; set; } = null;
        

[JsonProperty("property_value_133")]
public System.Nullable<float> PropertyValue133 { get; set; } = null;
        

[JsonProperty("property_value_134")]
public System.Nullable<float> PropertyValue134 { get; set; } = null;
        

[JsonProperty("property_value_135")]
public System.Nullable<float> PropertyValue135 { get; set; } = null;
        

[JsonProperty("property_value_136")]
public System.Nullable<float> PropertyValue136 { get; set; } = null;
        

[JsonProperty("property_value_137")]
public System.Nullable<float> PropertyValue137 { get; set; } = null;
        

[JsonProperty("property_value_138")]
public System.Nullable<float> PropertyValue138 { get; set; } = null;
        

[JsonProperty("property_value_139")]
public System.Nullable<float> PropertyValue139 { get; set; } = null;
        

[JsonProperty("property_value_140")]
public System.Nullable<float> PropertyValue140 { get; set; } = null;
        

[JsonProperty("property_value_141")]
public System.Nullable<float> PropertyValue141 { get; set; } = null;
        

[JsonProperty("property_value_142")]
public System.Nullable<float> PropertyValue142 { get; set; } = null;
        

[JsonProperty("property_value_143")]
public System.Nullable<float> PropertyValue143 { get; set; } = null;
        

[JsonProperty("property_value_144")]
public System.Nullable<float> PropertyValue144 { get; set; } = null;
        

[JsonProperty("property_value_145")]
public System.Nullable<float> PropertyValue145 { get; set; } = null;
        

[JsonProperty("property_value_146")]
public System.Nullable<float> PropertyValue146 { get; set; } = null;
        

[JsonProperty("property_value_147")]
public System.Nullable<float> PropertyValue147 { get; set; } = null;
        

[JsonProperty("property_value_148")]
public System.Nullable<float> PropertyValue148 { get; set; } = null;
        

[JsonProperty("property_value_149")]
public System.Nullable<float> PropertyValue149 { get; set; } = null;
        

[JsonProperty("property_value_150")]
public System.Nullable<float> PropertyValue150 { get; set; } = null;
        

[JsonProperty("property_value_151")]
public System.Nullable<float> PropertyValue151 { get; set; } = null;
        

[JsonProperty("property_value_152")]
public System.Nullable<float> PropertyValue152 { get; set; } = null;
        

[JsonProperty("property_value_153")]
public System.Nullable<float> PropertyValue153 { get; set; } = null;
        

[JsonProperty("property_value_154")]
public System.Nullable<float> PropertyValue154 { get; set; } = null;
        

[JsonProperty("property_value_155")]
public System.Nullable<float> PropertyValue155 { get; set; } = null;
        

[JsonProperty("property_value_156")]
public System.Nullable<float> PropertyValue156 { get; set; } = null;
        

[JsonProperty("property_value_157")]
public System.Nullable<float> PropertyValue157 { get; set; } = null;
        

[JsonProperty("property_value_158")]
public System.Nullable<float> PropertyValue158 { get; set; } = null;
        

[JsonProperty("property_value_159")]
public System.Nullable<float> PropertyValue159 { get; set; } = null;
        

[JsonProperty("property_value_160")]
public System.Nullable<float> PropertyValue160 { get; set; } = null;
        

[JsonProperty("property_value_161")]
public System.Nullable<float> PropertyValue161 { get; set; } = null;
        

[JsonProperty("property_value_162")]
public System.Nullable<float> PropertyValue162 { get; set; } = null;
        

[JsonProperty("property_value_163")]
public System.Nullable<float> PropertyValue163 { get; set; } = null;
        

[JsonProperty("property_value_164")]
public System.Nullable<float> PropertyValue164 { get; set; } = null;
        

[JsonProperty("property_value_165")]
public System.Nullable<float> PropertyValue165 { get; set; } = null;
        

[JsonProperty("property_value_166")]
public System.Nullable<float> PropertyValue166 { get; set; } = null;
        

[JsonProperty("property_value_167")]
public System.Nullable<float> PropertyValue167 { get; set; } = null;
        

[JsonProperty("property_value_168")]
public System.Nullable<float> PropertyValue168 { get; set; } = null;
        

[JsonProperty("property_value_169")]
public System.Nullable<float> PropertyValue169 { get; set; } = null;
        

[JsonProperty("property_value_170")]
public System.Nullable<float> PropertyValue170 { get; set; } = null;
        

[JsonProperty("property_value_171")]
public System.Nullable<float> PropertyValue171 { get; set; } = null;
        

[JsonProperty("property_value_172")]
public System.Nullable<float> PropertyValue172 { get; set; } = null;
        

[JsonProperty("property_value_173")]
public System.Nullable<float> PropertyValue173 { get; set; } = null;
        

[JsonProperty("property_value_174")]
public System.Nullable<float> PropertyValue174 { get; set; } = null;
        

[JsonProperty("property_value_175")]
public System.Nullable<float> PropertyValue175 { get; set; } = null;
        

[JsonProperty("property_value_176")]
public System.Nullable<float> PropertyValue176 { get; set; } = null;
        

[JsonProperty("property_value_177")]
public System.Nullable<float> PropertyValue177 { get; set; } = null;
        

[JsonProperty("property_value_178")]
public System.Nullable<float> PropertyValue178 { get; set; } = null;
        

[JsonProperty("property_value_179")]
public System.Nullable<float> PropertyValue179 { get; set; } = null;
        

[JsonProperty("property_value_180")]
public System.Nullable<float> PropertyValue180 { get; set; } = null;
        

[JsonProperty("property_value_181")]
public System.Nullable<float> PropertyValue181 { get; set; } = null;
        

[JsonProperty("property_value_182")]
public System.Nullable<float> PropertyValue182 { get; set; } = null;
        

[JsonProperty("property_value_183")]
public System.Nullable<float> PropertyValue183 { get; set; } = null;
        

[JsonProperty("property_value_184")]
public System.Nullable<float> PropertyValue184 { get; set; } = null;
        

[JsonProperty("property_value_185")]
public System.Nullable<float> PropertyValue185 { get; set; } = null;
        

[JsonProperty("property_value_186")]
public System.Nullable<float> PropertyValue186 { get; set; } = null;
        

[JsonProperty("property_value_187")]
public System.Nullable<float> PropertyValue187 { get; set; } = null;
        

[JsonProperty("property_value_188")]
public System.Nullable<float> PropertyValue188 { get; set; } = null;
        

[JsonProperty("property_value_189")]
public System.Nullable<float> PropertyValue189 { get; set; } = null;
        

[JsonProperty("property_value_190")]
public System.Nullable<float> PropertyValue190 { get; set; } = null;
        

[JsonProperty("property_value_191")]
public System.Nullable<float> PropertyValue191 { get; set; } = null;
        

[JsonProperty("property_value_192")]
public System.Nullable<float> PropertyValue192 { get; set; } = null;
        

[JsonProperty("property_value_193")]
public System.Nullable<float> PropertyValue193 { get; set; } = null;
        

[JsonProperty("property_value_194")]
public System.Nullable<float> PropertyValue194 { get; set; } = null;
        

[JsonProperty("property_value_195")]
public System.Nullable<float> PropertyValue195 { get; set; } = null;
        

[JsonProperty("property_value_196")]
public System.Nullable<float> PropertyValue196 { get; set; } = null;
        

[JsonProperty("property_value_197")]
public System.Nullable<float> PropertyValue197 { get; set; } = null;
        

[JsonProperty("property_value_198")]
public System.Nullable<float> PropertyValue198 { get; set; } = null;
        

[JsonProperty("property_value_199")]
public System.Nullable<float> PropertyValue199 { get; set; } = null;
        

[JsonProperty("property_value_200")]
public System.Nullable<float> PropertyValue200 { get; set; } = null;
        

[JsonProperty("property_value_201")]
public System.Nullable<float> PropertyValue201 { get; set; } = null;
        

[JsonProperty("property_value_202")]
public System.Nullable<float> PropertyValue202 { get; set; } = null;
        

[JsonProperty("property_value_203")]
public System.Nullable<float> PropertyValue203 { get; set; } = null;
        

[JsonProperty("property_value_204")]
public System.Nullable<float> PropertyValue204 { get; set; } = null;
        

[JsonProperty("property_value_205")]
public System.Nullable<float> PropertyValue205 { get; set; } = null;
        

[JsonProperty("property_value_206")]
public System.Nullable<float> PropertyValue206 { get; set; } = null;
        

[JsonProperty("property_value_207")]
public System.Nullable<float> PropertyValue207 { get; set; } = null;
        

[JsonProperty("property_value_208")]
public System.Nullable<float> PropertyValue208 { get; set; } = null;
        

[JsonProperty("property_value_209")]
public System.Nullable<float> PropertyValue209 { get; set; } = null;
        

[JsonProperty("property_value_210")]
public System.Nullable<float> PropertyValue210 { get; set; } = null;
        

[JsonProperty("property_value_211")]
public System.Nullable<float> PropertyValue211 { get; set; } = null;
        

[JsonProperty("property_value_212")]
public System.Nullable<float> PropertyValue212 { get; set; } = null;
        

[JsonProperty("property_value_213")]
public System.Nullable<float> PropertyValue213 { get; set; } = null;
        

[JsonProperty("property_value_214")]
public System.Nullable<float> PropertyValue214 { get; set; } = null;
        

[JsonProperty("property_value_215")]
public System.Nullable<float> PropertyValue215 { get; set; } = null;
        

[JsonProperty("property_value_216")]
public System.Nullable<float> PropertyValue216 { get; set; } = null;
        

[JsonProperty("property_value_217")]
public System.Nullable<float> PropertyValue217 { get; set; } = null;
        

[JsonProperty("property_value_218")]
public System.Nullable<float> PropertyValue218 { get; set; } = null;
        

[JsonProperty("property_value_219")]
public System.Nullable<float> PropertyValue219 { get; set; } = null;
        

[JsonProperty("property_value_220")]
public System.Nullable<float> PropertyValue220 { get; set; } = null;
        

[JsonProperty("property_value_221")]
public System.Nullable<float> PropertyValue221 { get; set; } = null;
        

[JsonProperty("property_value_222")]
public System.Nullable<float> PropertyValue222 { get; set; } = null;
        

[JsonProperty("property_value_223")]
public System.Nullable<float> PropertyValue223 { get; set; } = null;
        

[JsonProperty("property_value_224")]
public System.Nullable<float> PropertyValue224 { get; set; } = null;
        

[JsonProperty("property_value_225")]
public System.Nullable<float> PropertyValue225 { get; set; } = null;
        

[JsonProperty("property_value_226")]
public System.Nullable<float> PropertyValue226 { get; set; } = null;
        

[JsonProperty("property_value_227")]
public System.Nullable<float> PropertyValue227 { get; set; } = null;
        

[JsonProperty("property_value_228")]
public System.Nullable<float> PropertyValue228 { get; set; } = null;
        

[JsonProperty("property_value_229")]
public System.Nullable<float> PropertyValue229 { get; set; } = null;
        

[JsonProperty("property_value_230")]
public System.Nullable<float> PropertyValue230 { get; set; } = null;
        

[JsonProperty("property_value_231")]
public System.Nullable<float> PropertyValue231 { get; set; } = null;
        

[JsonProperty("property_value_232")]
public System.Nullable<float> PropertyValue232 { get; set; } = null;
        

[JsonProperty("property_value_233")]
public System.Nullable<float> PropertyValue233 { get; set; } = null;
        

[JsonProperty("property_value_234")]
public System.Nullable<float> PropertyValue234 { get; set; } = null;
        

[JsonProperty("property_value_235")]
public System.Nullable<float> PropertyValue235 { get; set; } = null;
        

[JsonProperty("property_value_236")]
public System.Nullable<float> PropertyValue236 { get; set; } = null;
        

[JsonProperty("property_value_237")]
public System.Nullable<float> PropertyValue237 { get; set; } = null;
        

[JsonProperty("property_value_238")]
public System.Nullable<float> PropertyValue238 { get; set; } = null;
        

[JsonProperty("property_value_239")]
public System.Nullable<float> PropertyValue239 { get; set; } = null;
        

[JsonProperty("property_value_240")]
public System.Nullable<float> PropertyValue240 { get; set; } = null;
        

[JsonProperty("property_value_241")]
public System.Nullable<float> PropertyValue241 { get; set; } = null;
        

[JsonProperty("property_value_242")]
public System.Nullable<float> PropertyValue242 { get; set; } = null;
        

[JsonProperty("property_value_243")]
public System.Nullable<float> PropertyValue243 { get; set; } = null;
        

[JsonProperty("property_value_244")]
public System.Nullable<float> PropertyValue244 { get; set; } = null;
        

[JsonProperty("property_value_245")]
public System.Nullable<float> PropertyValue245 { get; set; } = null;
        

[JsonProperty("property_value_246")]
public System.Nullable<float> PropertyValue246 { get; set; } = null;
        

[JsonProperty("property_value_247")]
public System.Nullable<float> PropertyValue247 { get; set; } = null;
        

[JsonProperty("property_value_248")]
public System.Nullable<float> PropertyValue248 { get; set; } = null;
        

[JsonProperty("property_value_249")]
public System.Nullable<float> PropertyValue249 { get; set; } = null;
        

[JsonProperty("property_value_250")]
public System.Nullable<float> PropertyValue250 { get; set; } = null;
    }
    
    public enum FluidProperties_Concentration_FluidPropertyType
    {
        
        [JsonProperty("Conductivity")]
        Conductivity = 0,
        
        [JsonProperty("Density")]
        Density = 1,
        
        [JsonProperty("SpecificHeat")]
        SpecificHeat = 2,
        
        [JsonProperty("Viscosity")]
        Viscosity = 3,
    }
}
namespace BH.oM.Adapters.EnergyPlus.GeneralDataEntry
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("matrix data in row-major order list each row keeping the columns in order number " +
        "of values must equal N1 x N2")]
    [JsonObject("Matrix:TwoDimension")]
    public class Matrix_TwoDimension : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("number_of_rows")]
public System.Nullable<float> NumberOfRows { get; set; } = null;
        

[JsonProperty("number_of_columns")]
public System.Nullable<float> NumberOfColumns { get; set; } = null;
        

[JsonProperty("values")]
public string Values { get; set; } = "";
    }
}
namespace BH.oM.Adapters.EnergyPlus.HeatRecovery
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Flat plate air-to-air heat exchanger, typically used for exhaust or relief air he" +
        "at recovery.")]
    [JsonObject("HeatExchanger:AirToAir:FlatPlate")]
    public class HeatExchanger_AirToAir_FlatPlate : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("flow_arrangement_type")]
public HeatExchanger_AirToAir_FlatPlate_FlowArrangementType FlowArrangementType { get; set; } = (HeatExchanger_AirToAir_FlatPlate_FlowArrangementType)Enum.Parse(typeof(HeatExchanger_AirToAir_FlatPlate_FlowArrangementType), "CounterFlow");
        

[Description("Yes means that the heat exchanger will be locked out (off) when the economizer is" +
    " operating or high humidity control is active")]
[JsonProperty("economizer_lockout")]
public EmptyNoYes EconomizerLockout { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[Description("Ratio of h*A for supply side to h*A for exhaust side")]
[JsonProperty("ratio_of_supply_to_secondary_ha_values")]
public System.Nullable<float> RatioOfSupplyToSecondaryHaValues { get; set; } = null;
        

[JsonProperty("nominal_supply_air_flow_rate")]
public string NominalSupplyAirFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("nominal_supply_air_inlet_temperature")]
public System.Nullable<float> NominalSupplyAirInletTemperature { get; set; } = null;
        

[JsonProperty("nominal_supply_air_outlet_temperature")]
public System.Nullable<float> NominalSupplyAirOutletTemperature { get; set; } = null;
        

[JsonProperty("nominal_secondary_air_flow_rate")]
public string NominalSecondaryAirFlowRate { get; set; } = "";
        

[JsonProperty("nominal_secondary_air_inlet_temperature")]
public System.Nullable<float> NominalSecondaryAirInletTemperature { get; set; } = null;
        

[JsonProperty("nominal_electric_power")]
public System.Nullable<float> NominalElectricPower { get; set; } = null;
        

[JsonProperty("supply_air_inlet_node_name")]
public string SupplyAirInletNodeName { get; set; } = "";
        

[JsonProperty("supply_air_outlet_node_name")]
public string SupplyAirOutletNodeName { get; set; } = "";
        

[JsonProperty("secondary_air_inlet_node_name")]
public string SecondaryAirInletNodeName { get; set; } = "";
        

[JsonProperty("secondary_air_outlet_node_name")]
public string SecondaryAirOutletNodeName { get; set; } = "";
    }
    
    public enum HeatExchanger_AirToAir_FlatPlate_FlowArrangementType
    {
        
        [JsonProperty("CounterFlow")]
        CounterFlow = 0,
        
        [JsonProperty("CrossFlowBothUnmixed")]
        CrossFlowBothUnmixed = 1,
        
        [JsonProperty("ParallelFlow")]
        ParallelFlow = 2,
    }
    
    [Description("This object models an air-to-air heat exchanger using effectiveness relationships" +
        ". The heat exchanger can transfer sensible energy, latent energy, or both betwee" +
        "n the supply (primary) and exhaust (secondary) air streams.")]
    [JsonObject("HeatExchanger:AirToAir:SensibleAndLatent")]
    public class HeatExchanger_AirToAir_SensibleAndLatent : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("nominal_supply_air_flow_rate")]
public string NominalSupplyAirFlowRate { get; set; } = "";
        

[JsonProperty("sensible_effectiveness_at_100_heating_air_flow")]
public System.Nullable<float> SensibleEffectivenessAt100HeatingAirFlow { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("latent_effectiveness_at_100_heating_air_flow")]
public System.Nullable<float> LatentEffectivenessAt100HeatingAirFlow { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("sensible_effectiveness_at_75_heating_air_flow")]
public System.Nullable<float> SensibleEffectivenessAt75HeatingAirFlow { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("latent_effectiveness_at_75_heating_air_flow")]
public System.Nullable<float> LatentEffectivenessAt75HeatingAirFlow { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("sensible_effectiveness_at_100_cooling_air_flow")]
public System.Nullable<float> SensibleEffectivenessAt100CoolingAirFlow { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("latent_effectiveness_at_100_cooling_air_flow")]
public System.Nullable<float> LatentEffectivenessAt100CoolingAirFlow { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("sensible_effectiveness_at_75_cooling_air_flow")]
public System.Nullable<float> SensibleEffectivenessAt75CoolingAirFlow { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("latent_effectiveness_at_75_cooling_air_flow")]
public System.Nullable<float> LatentEffectivenessAt75CoolingAirFlow { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_air_inlet_node_name")]
public string SupplyAirInletNodeName { get; set; } = "";
        

[JsonProperty("supply_air_outlet_node_name")]
public string SupplyAirOutletNodeName { get; set; } = "";
        

[JsonProperty("exhaust_air_inlet_node_name")]
public string ExhaustAirInletNodeName { get; set; } = "";
        

[JsonProperty("exhaust_air_outlet_node_name")]
public string ExhaustAirOutletNodeName { get; set; } = "";
        

[JsonProperty("nominal_electric_power")]
public System.Nullable<float> NominalElectricPower { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_air_outlet_temperature_control")]
public EmptyNoYes SupplyAirOutletTemperatureControl { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("heat_exchanger_type")]
public HeatExchanger_AirToAir_SensibleAndLatent_HeatExchangerType HeatExchangerType { get; set; } = (HeatExchanger_AirToAir_SensibleAndLatent_HeatExchangerType)Enum.Parse(typeof(HeatExchanger_AirToAir_SensibleAndLatent_HeatExchangerType), "Plate");
        

[JsonProperty("frost_control_type")]
public HeatExchanger_AirToAir_SensibleAndLatent_FrostControlType FrostControlType { get; set; } = (HeatExchanger_AirToAir_SensibleAndLatent_FrostControlType)Enum.Parse(typeof(HeatExchanger_AirToAir_SensibleAndLatent_FrostControlType), "None");
        

[Description("Supply (outdoor) air inlet temp threshold for exhaust air recirculation and exhau" +
    "st only frost control types. Exhaust air outlet threshold Temperature for minimu" +
    "m exhaust temperature frost control type.")]
[JsonProperty("threshold_temperature")]
public System.Nullable<float> ThresholdTemperature { get; set; } = (System.Nullable<float>)Single.Parse("1.7", CultureInfo.InvariantCulture);
        

[Description("Fraction of the time when frost control will be invoked at the threshold temperat" +
    "ure. This field only used for exhaust air recirc and exhaust-only frost control " +
    "types.")]
[JsonProperty("initial_defrost_time_fraction")]
public System.Nullable<float> InitialDefrostTimeFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.083", CultureInfo.InvariantCulture);
        

[Description("Rate of increase in defrost time fraction as actual temp falls below threshold te" +
    "mperature. This field only used for exhaust air recirc and exhaust-only frost co" +
    "ntrol types.")]
[JsonProperty("rate_of_defrost_time_fraction_increase")]
public System.Nullable<float> RateOfDefrostTimeFractionIncrease { get; set; } = (System.Nullable<float>)Single.Parse("0.012", CultureInfo.InvariantCulture);
        

[Description("Yes means that the heat exchanger will be locked out (off) when the economizer is" +
    " operating or high humidity control is active")]
[JsonProperty("economizer_lockout")]
public EmptyNoYes EconomizerLockout { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
    }
    
    public enum HeatExchanger_AirToAir_SensibleAndLatent_HeatExchangerType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Plate")]
        Plate = 1,
        
        [JsonProperty("Rotary")]
        Rotary = 2,
    }
    
    public enum HeatExchanger_AirToAir_SensibleAndLatent_FrostControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ExhaustAirRecirculation")]
        ExhaustAirRecirculation = 1,
        
        [JsonProperty("ExhaustOnly")]
        ExhaustOnly = 2,
        
        [JsonProperty("MinimumExhaustTemperature")]
        MinimumExhaustTemperature = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    [Description(@"This object models a balanced desiccant heat exchanger. The heat exchanger transfers both sensible and latent energy between the process and regeneration air streams. The air flow rate and face velocity are assumed to be the same on both the process and regeneration sides of the heat exchanger.")]
    [JsonObject("HeatExchanger:Desiccant:BalancedFlow")]
    public class HeatExchanger_Desiccant_BalancedFlow : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("regeneration_air_inlet_node_name")]
public string RegenerationAirInletNodeName { get; set; } = "";
        

[JsonProperty("regeneration_air_outlet_node_name")]
public string RegenerationAirOutletNodeName { get; set; } = "";
        

[JsonProperty("process_air_inlet_node_name")]
public string ProcessAirInletNodeName { get; set; } = "";
        

[JsonProperty("process_air_outlet_node_name")]
public string ProcessAirOutletNodeName { get; set; } = "";
        

[JsonProperty("heat_exchanger_performance_object_type")]
public HeatExchanger_Desiccant_BalancedFlow_HeatExchangerPerformanceObjectType HeatExchangerPerformanceObjectType { get; set; } = (HeatExchanger_Desiccant_BalancedFlow_HeatExchangerPerformanceObjectType)Enum.Parse(typeof(HeatExchanger_Desiccant_BalancedFlow_HeatExchangerPerformanceObjectType), "Empty");
        

[JsonProperty("heat_exchanger_performance_name")]
public string HeatExchangerPerformanceName { get; set; } = "";
        

[Description("Yes means that the heat exchanger will be locked out (off) when the economizer is" +
    " operating or high humidity control is active")]
[JsonProperty("economizer_lockout")]
public EmptyNoYes EconomizerLockout { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
    }
    
    public enum HeatExchanger_Desiccant_BalancedFlow_HeatExchangerPerformanceObjectType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("HeatExchanger:Desiccant:BalancedFlow:PerformanceDataType1")]
        HeatExchangerDesiccantBalancedFlowPerformanceDataType1 = 1,
    }
    
    [Description(@"RTO = B1 + B2*RWI + B3*RTI + B4*(RWI/RTI) + B5*PWI + B6*PTI + B7*(PWI/PTI) + B8*RFV RWO = C1 + C2*RWI + C3*RTI + C4*(RWI/RTI) + C5*PWI + C6*PTI + C7*(PWI/PTI) + C8*RFV where, RTO = Dry-bulb temperature of the regeneration outlet air (C) RWO = Humidity ratio of the regeneration outlet air (kgWater/kgDryAir) RWI = Humidity ratio of the regeneration inlet air (kgWater/kgDryAir) RTI = Dry-bulb temperature of the regeneration inlet air (C) PWI = Humidity ratio of the process inlet air (kgWater/kgDryAir) PTI = Dry-bulb temperature of the process inlet air (C) RFV = Regeneration Face Velocity (m/s)")]
    [JsonObject("HeatExchanger:Desiccant:BalancedFlow:PerformanceDataType1")]
    public class HeatExchanger_Desiccant_BalancedFlow_PerformanceDataType1 : BHoMObject, IEnergyPlusClass
    {
        

[Description("Air flow rate at nominal conditions (assumed to be the same for both sides of the" +
    " heat exchanger).")]
[JsonProperty("nominal_air_flow_rate")]
public string NominalAirFlowRate { get; set; } = "";
        

[JsonProperty("nominal_air_face_velocity")]
public string NominalAirFaceVelocity { get; set; } = "";
        

[Description("Parasitic electric power (e.g., desiccant wheel motor)")]
[JsonProperty("nominal_electric_power")]
public System.Nullable<float> NominalElectricPower { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("temperature_equation_coefficient_1")]
public System.Nullable<float> TemperatureEquationCoefficient1 { get; set; } = null;
        

[JsonProperty("temperature_equation_coefficient_2")]
public System.Nullable<float> TemperatureEquationCoefficient2 { get; set; } = null;
        

[JsonProperty("temperature_equation_coefficient_3")]
public System.Nullable<float> TemperatureEquationCoefficient3 { get; set; } = null;
        

[JsonProperty("temperature_equation_coefficient_4")]
public System.Nullable<float> TemperatureEquationCoefficient4 { get; set; } = null;
        

[JsonProperty("temperature_equation_coefficient_5")]
public System.Nullable<float> TemperatureEquationCoefficient5 { get; set; } = null;
        

[JsonProperty("temperature_equation_coefficient_6")]
public System.Nullable<float> TemperatureEquationCoefficient6 { get; set; } = null;
        

[JsonProperty("temperature_equation_coefficient_7")]
public System.Nullable<float> TemperatureEquationCoefficient7 { get; set; } = null;
        

[JsonProperty("temperature_equation_coefficient_8")]
public System.Nullable<float> TemperatureEquationCoefficient8 { get; set; } = null;
        

[JsonProperty("minimum_regeneration_inlet_air_humidity_ratio_for_temperature_equation")]
public System.Nullable<float> MinimumRegenerationInletAirHumidityRatioForTemperatureEquation { get; set; } = null;
        

[JsonProperty("maximum_regeneration_inlet_air_humidity_ratio_for_temperature_equation")]
public System.Nullable<float> MaximumRegenerationInletAirHumidityRatioForTemperatureEquation { get; set; } = null;
        

[JsonProperty("minimum_regeneration_inlet_air_temperature_for_temperature_equation")]
public System.Nullable<float> MinimumRegenerationInletAirTemperatureForTemperatureEquation { get; set; } = null;
        

[JsonProperty("maximum_regeneration_inlet_air_temperature_for_temperature_equation")]
public System.Nullable<float> MaximumRegenerationInletAirTemperatureForTemperatureEquation { get; set; } = null;
        

[JsonProperty("minimum_process_inlet_air_humidity_ratio_for_temperature_equation")]
public System.Nullable<float> MinimumProcessInletAirHumidityRatioForTemperatureEquation { get; set; } = null;
        

[JsonProperty("maximum_process_inlet_air_humidity_ratio_for_temperature_equation")]
public System.Nullable<float> MaximumProcessInletAirHumidityRatioForTemperatureEquation { get; set; } = null;
        

[JsonProperty("minimum_process_inlet_air_temperature_for_temperature_equation")]
public System.Nullable<float> MinimumProcessInletAirTemperatureForTemperatureEquation { get; set; } = null;
        

[JsonProperty("maximum_process_inlet_air_temperature_for_temperature_equation")]
public System.Nullable<float> MaximumProcessInletAirTemperatureForTemperatureEquation { get; set; } = null;
        

[JsonProperty("minimum_regeneration_air_velocity_for_temperature_equation")]
public System.Nullable<float> MinimumRegenerationAirVelocityForTemperatureEquation { get; set; } = null;
        

[JsonProperty("maximum_regeneration_air_velocity_for_temperature_equation")]
public System.Nullable<float> MaximumRegenerationAirVelocityForTemperatureEquation { get; set; } = null;
        

[JsonProperty("minimum_regeneration_outlet_air_temperature_for_temperature_equation")]
public System.Nullable<float> MinimumRegenerationOutletAirTemperatureForTemperatureEquation { get; set; } = null;
        

[JsonProperty("maximum_regeneration_outlet_air_temperature_for_temperature_equation")]
public System.Nullable<float> MaximumRegenerationOutletAirTemperatureForTemperatureEquation { get; set; } = null;
        

[JsonProperty("minimum_regeneration_inlet_air_relative_humidity_for_temperature_equation")]
public System.Nullable<float> MinimumRegenerationInletAirRelativeHumidityForTemperatureEquation { get; set; } = null;
        

[JsonProperty("maximum_regeneration_inlet_air_relative_humidity_for_temperature_equation")]
public System.Nullable<float> MaximumRegenerationInletAirRelativeHumidityForTemperatureEquation { get; set; } = null;
        

[JsonProperty("minimum_process_inlet_air_relative_humidity_for_temperature_equation")]
public System.Nullable<float> MinimumProcessInletAirRelativeHumidityForTemperatureEquation { get; set; } = null;
        

[JsonProperty("maximum_process_inlet_air_relative_humidity_for_temperature_equation")]
public System.Nullable<float> MaximumProcessInletAirRelativeHumidityForTemperatureEquation { get; set; } = null;
        

[JsonProperty("humidity_ratio_equation_coefficient_1")]
public System.Nullable<float> HumidityRatioEquationCoefficient1 { get; set; } = null;
        

[JsonProperty("humidity_ratio_equation_coefficient_2")]
public System.Nullable<float> HumidityRatioEquationCoefficient2 { get; set; } = null;
        

[JsonProperty("humidity_ratio_equation_coefficient_3")]
public System.Nullable<float> HumidityRatioEquationCoefficient3 { get; set; } = null;
        

[JsonProperty("humidity_ratio_equation_coefficient_4")]
public System.Nullable<float> HumidityRatioEquationCoefficient4 { get; set; } = null;
        

[JsonProperty("humidity_ratio_equation_coefficient_5")]
public System.Nullable<float> HumidityRatioEquationCoefficient5 { get; set; } = null;
        

[JsonProperty("humidity_ratio_equation_coefficient_6")]
public System.Nullable<float> HumidityRatioEquationCoefficient6 { get; set; } = null;
        

[JsonProperty("humidity_ratio_equation_coefficient_7")]
public System.Nullable<float> HumidityRatioEquationCoefficient7 { get; set; } = null;
        

[JsonProperty("humidity_ratio_equation_coefficient_8")]
public System.Nullable<float> HumidityRatioEquationCoefficient8 { get; set; } = null;
        

[JsonProperty("minimum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation")]
public System.Nullable<float> MinimumRegenerationInletAirHumidityRatioForHumidityRatioEquation { get; set; } = null;
        

[JsonProperty("maximum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation")]
public System.Nullable<float> MaximumRegenerationInletAirHumidityRatioForHumidityRatioEquation { get; set; } = null;
        

[JsonProperty("minimum_regeneration_inlet_air_temperature_for_humidity_ratio_equation")]
public System.Nullable<float> MinimumRegenerationInletAirTemperatureForHumidityRatioEquation { get; set; } = null;
        

[JsonProperty("maximum_regeneration_inlet_air_temperature_for_humidity_ratio_equation")]
public System.Nullable<float> MaximumRegenerationInletAirTemperatureForHumidityRatioEquation { get; set; } = null;
        

[JsonProperty("minimum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation")]
public System.Nullable<float> MinimumProcessInletAirHumidityRatioForHumidityRatioEquation { get; set; } = null;
        

[JsonProperty("maximum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation")]
public System.Nullable<float> MaximumProcessInletAirHumidityRatioForHumidityRatioEquation { get; set; } = null;
        

[JsonProperty("minimum_process_inlet_air_temperature_for_humidity_ratio_equation")]
public System.Nullable<float> MinimumProcessInletAirTemperatureForHumidityRatioEquation { get; set; } = null;
        

[JsonProperty("maximum_process_inlet_air_temperature_for_humidity_ratio_equation")]
public System.Nullable<float> MaximumProcessInletAirTemperatureForHumidityRatioEquation { get; set; } = null;
        

[JsonProperty("minimum_regeneration_air_velocity_for_humidity_ratio_equation")]
public System.Nullable<float> MinimumRegenerationAirVelocityForHumidityRatioEquation { get; set; } = null;
        

[JsonProperty("maximum_regeneration_air_velocity_for_humidity_ratio_equation")]
public System.Nullable<float> MaximumRegenerationAirVelocityForHumidityRatioEquation { get; set; } = null;
        

[JsonProperty("minimum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation")]
public System.Nullable<float> MinimumRegenerationOutletAirHumidityRatioForHumidityRatioEquation { get; set; } = null;
        

[JsonProperty("maximum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation")]
public System.Nullable<float> MaximumRegenerationOutletAirHumidityRatioForHumidityRatioEquation { get; set; } = null;
        

[JsonProperty("minimum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation")]
public System.Nullable<float> MinimumRegenerationInletAirRelativeHumidityForHumidityRatioEquation { get; set; } = null;
        

[JsonProperty("maximum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation")]
public System.Nullable<float> MaximumRegenerationInletAirRelativeHumidityForHumidityRatioEquation { get; set; } = null;
        

[JsonProperty("minimum_process_inlet_air_relative_humidity_for_humidity_ratio_equation")]
public System.Nullable<float> MinimumProcessInletAirRelativeHumidityForHumidityRatioEquation { get; set; } = null;
        

[JsonProperty("maximum_process_inlet_air_relative_humidity_for_humidity_ratio_equation")]
public System.Nullable<float> MaximumProcessInletAirRelativeHumidityForHumidityRatioEquation { get; set; } = null;
    }
}
namespace BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Electrically heated steam humidifier with fan.")]
    [JsonObject("Humidifier:Steam:Electric")]
    public class Humidifier_Steam_Electric : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Capacity is m3/s of water at 5.05 C")]
[JsonProperty("rated_capacity")]
public string RatedCapacity { get; set; } = "";
        

[Description("if autosized the rated power is calculated from the rated capacity and enthalpy r" +
    "ise of water from 20.0C to 100.0C steam and assumes electric to thermal energy c" +
    "onversion efficiency of 100.0%")]
[JsonProperty("rated_power")]
public string RatedPower { get; set; } = "";
        

[JsonProperty("rated_fan_power")]
public System.Nullable<float> RatedFanPower { get; set; } = null;
        

[JsonProperty("standby_power")]
public System.Nullable<float> StandbyPower { get; set; } = null;
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("water_storage_tank_name")]
public string WaterStorageTankName { get; set; } = "";
    }
    
    [Description("Natural gas fired steam humidifier with optional blower fan.")]
    [JsonObject("Humidifier:Steam:Gas")]
    public class Humidifier_Steam_Gas : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Capacity is m3/s of water at 5.05 C The nominal full capacity water addition rate" +
    " in m3/s of water at 5.05 C")]
[JsonProperty("rated_capacity")]
public string RatedCapacity { get; set; } = "";
        

[Description(@"if auto-sized, the rated gas use rate is calculated from the rated capacity and enthalpy rise of water from 20.0C to 100.0C steam and user input thermal efficiency value specified in the next input field. If this input field is hard-sized and Inlet Water Temperature Option input field is selected as FixedInletWaterTemperature, then the thermal efficiency input field will not be used or else if the Inlet Water Temperature Option input field is selected as VariableInletWaterTemperature, then the thermal efficiency input value is overridden by a value calculated from the capacity, rated gas use rate and design condition.")]
[JsonProperty("rated_gas_use_rate")]
public string RatedGasUseRate { get; set; } = "";
        

[Description(@"Based on the higher heating value of fuel. If ""Rated Gas Use Rate"" in the field above is not auto-sized and the Inlet Water Temperature Option input field is specified as FixedInletWaterTemperature, then the thermal efficiency specified will not be used in the calculation, or else if the Inlet Water Temperature Option input field is selected as VariableInletWaterTemperature, then the thermal efficiency value is overridden by a value calculated from the capacity, rated gas use rate and design condition.")]
[JsonProperty("thermal_efficiency")]
public System.Nullable<float> ThermalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[Description(@"Linear, Quadratic and Cubic efficiency curves are solely a function of PLR. Linear = C1 + C2*PLR Quadratic = C1 + C2*PLR + C3*PLR^2 Cubic = C1 + C2*PLR + C3*PLR^2 + C4*PLR^3 This is thermal efficiency modifier curve name of gas fired steam humidifier. This curve is normalized, i.e., curve output value at rated condition is 1.0.")]
[JsonProperty("thermal_efficiency_modifier_curve_name")]
public string ThermalEfficiencyModifierCurveName { get; set; } = "";
        

[Description("The nominal full capacity electric power input to the blower fan in Watts. If no " +
    "blower fan is required to inject the dry steam to the supply air stream, then th" +
    "is input field is set to zero.")]
[JsonProperty("rated_fan_power")]
public System.Nullable<float> RatedFanPower { get; set; } = null;
        

[Description("The auxiliary electric power input in watts. This amount of power will be consume" +
    "d whenever the unit is available (as defined by the availability schedule). This" +
    " electric power is used for control purpose only.")]
[JsonProperty("auxiliary_electric_power")]
public System.Nullable<float> AuxiliaryElectricPower { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("water_storage_tank_name")]
public string WaterStorageTankName { get; set; } = "";
        

[Description(@"The inlet water temperature can be fixed at 20C as it is done for electric steam humidifier or it can be allowed to vary with temperature of the water source. Currently allowed water sources are main water or water storage tank in water use objects. if FixedInletWaterTemperature is specified, then a fixed 20C water temperature will be used, or else if VariableInletWaterTemperature is specified, then inlet water will vary depending the source water temperature. If this input field is left blank, then fixed inlet water temperature of 20C will be assumed.")]
[JsonProperty("inlet_water_temperature_option")]
public Humidifier_Steam_Gas_InletWaterTemperatureOption InletWaterTemperatureOption { get; set; } = (Humidifier_Steam_Gas_InletWaterTemperatureOption)Enum.Parse(typeof(Humidifier_Steam_Gas_InletWaterTemperatureOption), "FixedInletWaterTemperature");
    }
    
    public enum Humidifier_Steam_Gas_InletWaterTemperatureOption
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FixedInletWaterTemperature")]
        FixedInletWaterTemperature = 1,
        
        [JsonProperty("VariableInletWaterTemperature")]
        VariableInletWaterTemperature = 2,
    }
    
    [Description(@"This object models a solid desiccant dehumidifier. The process air stream is the air which is dehumidified. The regeneration air stream is the air which is heated to regenerate the desiccant. This object determines the process air outlet conditions, the load on the regeneration heating coil, the electric power consumption for the wheel rotor motor, and the regeneration air fan mass flow rate. All other heat exchangers are modeled as separate objects connected to the inlet and outlet nodes of the dehumidifier. The solid desiccant dehumidifier is typically used in an AirLoopHVAC:OutdoorAirSystem, but can also be specified in any AirLoopHVAC.")]
    [JsonObject("Dehumidifier:Desiccant:NoFans")]
    public class Dehumidifier_Desiccant_NoFans : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("This is the node entering the process side of the desiccant wheel.")]
[JsonProperty("process_air_inlet_node_name")]
public string ProcessAirInletNodeName { get; set; } = "";
        

[Description("This is the node leaving the process side of the desiccant wheel.")]
[JsonProperty("process_air_outlet_node_name")]
public string ProcessAirOutletNodeName { get; set; } = "";
        

[Description("This is the node entering the regeneration side of the desiccant wheel after the " +
    "regeneration coil.")]
[JsonProperty("regeneration_air_inlet_node_name")]
public string RegenerationAirInletNodeName { get; set; } = "";
        

[Description("Node for air entering the regeneration fan, mass flow is set by the desiccant deh" +
    "umidifier module.")]
[JsonProperty("regeneration_fan_inlet_node_name")]
public string RegenerationFanInletNodeName { get; set; } = "";
        

[Description(@"Type of setpoint control: LeavingMaximumHumidityRatioSetpoint means that the unit is controlled to deliver air at the Leaving Max Humidity Ratio Setpoint (see below), SystemNodeMaximumHumidityRatioSetpoint means that the leaving humidity ratio setpoint is the System Node Humidity Ratio Max property of the Process Air Outlet Node. A Setpoint object must be used to control this setpoint. Both control types use bypass dampers to prevent over drying.")]
[JsonProperty("control_type")]
public Dehumidifier_Desiccant_NoFans_ControlType ControlType { get; set; } = (Dehumidifier_Desiccant_NoFans_ControlType)Enum.Parse(typeof(Dehumidifier_Desiccant_NoFans_ControlType), "LeavingMaximumHumidityRatioSetpoint");
        

[Description("Fixed setpoint for maximum process air leaving humidity ratio Applicable only whe" +
    "n Control Type = LeavingMaximumHumidityRatioSetpoint.")]
[JsonProperty("leaving_maximum_humidity_ratio_setpoint")]
public System.Nullable<float> LeavingMaximumHumidityRatioSetpoint { get; set; } = null;
        

[Description("Process air flow rate at nominal conditions")]
[JsonProperty("nominal_process_air_flow_rate")]
public System.Nullable<float> NominalProcessAirFlowRate { get; set; } = null;
        

[Description("Process air velocity at nominal flow When using Performance Model Type of Default" +
    ", must be 2.032 to 4.064 m/s (400 to 800 fpm)")]
[JsonProperty("nominal_process_air_velocity")]
public System.Nullable<float> NominalProcessAirVelocity { get; set; } = null;
        

[Description("Power input to wheel rotor motor")]
[JsonProperty("rotor_power")]
public System.Nullable<float> RotorPower { get; set; } = null;
        

[Description("heating coil type works with gas, electric, hot water and steam heating coils")]
[JsonProperty("regeneration_coil_object_type")]
public Dehumidifier_Desiccant_NoFans_RegenerationCoilObjectType RegenerationCoilObjectType { get; set; } = (Dehumidifier_Desiccant_NoFans_RegenerationCoilObjectType)Enum.Parse(typeof(Dehumidifier_Desiccant_NoFans_RegenerationCoilObjectType), "CoilHeatingElectric");
        

[Description("Name of heating coil object for regeneration air")]
[JsonProperty("regeneration_coil_name")]
public string RegenerationCoilName { get; set; } = "";
        

[Description("Type of fan object for regeneration air. When using the Default Performance Model" +
    " Type (see below), only Fan:VariableVolume or Fan:SystemModel are valid.")]
[JsonProperty("regeneration_fan_object_type")]
public Dehumidifier_Desiccant_NoFans_RegenerationFanObjectType RegenerationFanObjectType { get; set; } = (Dehumidifier_Desiccant_NoFans_RegenerationFanObjectType)Enum.Parse(typeof(Dehumidifier_Desiccant_NoFans_RegenerationFanObjectType), "FanConstantVolume");
        

[Description("Name of fan object for regeneration air")]
[JsonProperty("regeneration_fan_name")]
public string RegenerationFanName { get; set; } = "";
        

[Description(@"Specifies whether the default performance model or user-specified curves should be used to model the performance. The default model is a generic solid desiccant wheel using performance curves of the form: curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*vel + C7*vel**2 + C8*edb*ew + C9*edb**2*ew**2 + C10*edb*vel + C11*edb**2*vel**2 + C12*ew*vel + C13*ew**2*vel**2 + C14*ALOG(edb) + C15*ALOG(ew) + C16*ALOG(vel) edb = process entering dry-bulb temperature [C] ew  = process entering humidity ratio [kgWater/kgDryAir] vel = process air velocity [m/s] If UserCurves are specified, then performance is calculated as follows: Leaving Dry-Bulb = (Leaving Dry-Bulb fTW Curve) * (Leaving Dry-Bulb fV Curve) Leaving Humidity Ratio = (Leaving Humidity Ratio fTW Curve) * (Leaving Humidity Ratio fV Curve) Regen Energy = (Regen Energy fTW Curve) * (Regen Energy fV Curve) Regen Velocity = (Regen Velocity fTW Curve) * (Regen Velocity fV Curve)")]
[JsonProperty("performance_model_type")]
public Dehumidifier_Desiccant_NoFans_PerformanceModelType PerformanceModelType { get; set; } = (Dehumidifier_Desiccant_NoFans_PerformanceModelType)Enum.Parse(typeof(Dehumidifier_Desiccant_NoFans_PerformanceModelType), "Default");
        

[Description(@"Leaving dry-bulb of process air as a function of entering dry-bulb and entering humidity ratio, biquadratic curve curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*edb*ew edb = process entering dry-bulb temperature [C] ew  = process entering humidity ratio [kgWater/kgDryAir]")]
[JsonProperty("leaving_dry_bulb_function_of_entering_dry_bulb_and_humidity_ratio_curve_name")]
public string LeavingDryBulbFunctionOfEnteringDryBulbAndHumidityRatioCurveName { get; set; } = "";
        

[Description("Leaving dry-bulb of process air as a function of air velocity, quadratic curve. c" +
    "urve = C1 + C2*v + C3*v**2 v = process air velocity [m/s]")]
[JsonProperty("leaving_dry_bulb_function_of_air_velocity_curve_name")]
public string LeavingDryBulbFunctionOfAirVelocityCurveName { get; set; } = "";
        

[Description(@"Leaving humidity ratio of process air as a function of entering dry-bulb and entering humidity ratio, biquadratic curve curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*edb*ew edb = process entering dry-bulb temperature [C] ew  = process entering humidity ratio [kgWater/kgDryAir]")]
[JsonProperty("leaving_humidity_ratio_function_of_entering_dry_bulb_and_humidity_ratio_curve_nam" +
    "e")]
public string LeavingHumidityRatioFunctionOfEnteringDryBulbAndHumidityRatioCurveName { get; set; } = "";
        

[Description("Leaving humidity ratio of process air as a function of process air velocity, quad" +
    "ratic curve. curve = C1 + C2*v + C3*v**2 v = process air velocity [m/s]")]
[JsonProperty("leaving_humidity_ratio_function_of_air_velocity_curve_name")]
public string LeavingHumidityRatioFunctionOfAirVelocityCurveName { get; set; } = "";
        

[Description(@"Regeneration energy [J/kg of water removed] as a function of entering dry-bulb and entering humidity ratio, biquadratic curve curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*edb*ew edb = process entering dry-bulb temperature [C] ew  = process entering humidity ratio [kgWater/kgDryAir]")]
[JsonProperty("regeneration_energy_function_of_entering_dry_bulb_and_humidity_ratio_curve_name")]
public string RegenerationEnergyFunctionOfEnteringDryBulbAndHumidityRatioCurveName { get; set; } = "";
        

[Description("Regeneration energy [J/kg of water removed] as a function of process air velocity" +
    ", quadratic curve. curve = C1 + C2*v + C3*v**2 v = process air velocity [m/s]")]
[JsonProperty("regeneration_energy_function_of_air_velocity_curve_name")]
public string RegenerationEnergyFunctionOfAirVelocityCurveName { get; set; } = "";
        

[Description(@"Regeneration velocity [m/s] as a function of entering dry-bulb and entering humidity ratio, biquadratic curve curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*edb*ew edb = process entering dry-bulb temperature [C] ew  = process entering humidity ratio [kgWater/kgDryAir]")]
[JsonProperty("regeneration_velocity_function_of_entering_dry_bulb_and_humidity_ratio_curve_name" +
    "")]
public string RegenerationVelocityFunctionOfEnteringDryBulbAndHumidityRatioCurveName { get; set; } = "";
        

[Description("Regeneration velocity [m/s] as a function of process air velocity, quadratic curv" +
    "e. curve = C1 + C2*v + C3*v**2 v = process air velocity [m/s]")]
[JsonProperty("regeneration_velocity_function_of_air_velocity_curve_name")]
public string RegenerationVelocityFunctionOfAirVelocityCurveName { get; set; } = "";
        

[Description("Nominal regen temperature upon which the regen energy modifier curve is based. No" +
    "t used if Default if chosen for the field Performance Mode Type. 121 C is a comm" +
    "only used value.")]
[JsonProperty("nominal_regeneration_temperature")]
public System.Nullable<float> NominalRegenerationTemperature { get; set; } = null;
    }
    
    public enum Dehumidifier_Desiccant_NoFans_ControlType
    {
        
        [JsonProperty("LeavingMaximumHumidityRatioSetpoint")]
        LeavingMaximumHumidityRatioSetpoint = 0,
        
        [JsonProperty("SystemNodeMaximumHumidityRatioSetpoint")]
        SystemNodeMaximumHumidityRatioSetpoint = 1,
    }
    
    public enum Dehumidifier_Desiccant_NoFans_RegenerationCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum Dehumidifier_Desiccant_NoFans_RegenerationFanObjectType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 1,
        
        [JsonProperty("Fan:VariableVolume")]
        FanVariableVolume = 2,
    }
    
    public enum Dehumidifier_Desiccant_NoFans_PerformanceModelType
    {
        
        [JsonProperty("Default")]
        Default = 0,
        
        [JsonProperty("UserCurves")]
        UserCurves = 1,
    }
    
    [Description(@"This compound object models a desiccant heat exchanger, an optional heater, and associated fans. The process air stream is the air which is dehumidified. The regeneration air stream is the air which is heated to regenerate the desiccant. The desiccant heat exchanger transfers both sensible and latent energy between the process and regeneration air streams. The desiccant dehumidifier is typically used in an AirLoopHVAC:OutdoorAirSystem, but can also be specified in any AirLoopHVAC.")]
    [JsonObject("Dehumidifier:Desiccant:System")]
    public class Dehumidifier_Desiccant_System : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("desiccant_heat_exchanger_object_type")]
public Dehumidifier_Desiccant_System_DesiccantHeatExchangerObjectType DesiccantHeatExchangerObjectType { get; set; } = (Dehumidifier_Desiccant_System_DesiccantHeatExchangerObjectType)Enum.Parse(typeof(Dehumidifier_Desiccant_System_DesiccantHeatExchangerObjectType), "HeatExchangerDesiccantBalancedFlow");
        

[JsonProperty("desiccant_heat_exchanger_name")]
public string DesiccantHeatExchangerName { get; set; } = "";
        

[JsonProperty("sensor_node_name")]
public string SensorNodeName { get; set; } = "";
        

[JsonProperty("regeneration_air_fan_object_type")]
public Dehumidifier_Desiccant_System_RegenerationAirFanObjectType RegenerationAirFanObjectType { get; set; } = (Dehumidifier_Desiccant_System_RegenerationAirFanObjectType)Enum.Parse(typeof(Dehumidifier_Desiccant_System_RegenerationAirFanObjectType), "FanConstantVolume");
        

[JsonProperty("regeneration_air_fan_name")]
public string RegenerationAirFanName { get; set; } = "";
        

[JsonProperty("regeneration_air_fan_placement")]
public Dehumidifier_Desiccant_System_RegenerationAirFanPlacement RegenerationAirFanPlacement { get; set; } = (Dehumidifier_Desiccant_System_RegenerationAirFanPlacement)Enum.Parse(typeof(Dehumidifier_Desiccant_System_RegenerationAirFanPlacement), "DrawThrough");
        

[Description(@"works with gas, electric, hot water and steam heating coils. For autosizing the regeneration air heating coil the Design Coil Inlet Air Condition used is the outdoor air condition if the desiccant system is on the primary air loop, or else if the desiccant system is on outdoor air system then it is the return air condition. The Design Coil Outlet Air Temperature is the Regeneration Inlet Air Setpoint Temperature specified in the input field below.")]
[JsonProperty("regeneration_air_heater_object_type")]
public Dehumidifier_Desiccant_System_RegenerationAirHeaterObjectType RegenerationAirHeaterObjectType { get; set; } = (Dehumidifier_Desiccant_System_RegenerationAirHeaterObjectType)Enum.Parse(typeof(Dehumidifier_Desiccant_System_RegenerationAirHeaterObjectType), "CoilHeatingElectric");
        

[JsonProperty("regeneration_air_heater_name")]
public string RegenerationAirHeaterName { get; set; } = "";
        

[Description("This value is also used as regeneration air heater design coil air outlet tempera" +
    "ture for autosizing calculation of the heater.")]
[JsonProperty("regeneration_inlet_air_setpoint_temperature")]
public System.Nullable<float> RegenerationInletAirSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("46", CultureInfo.InvariantCulture);
        

[JsonProperty("companion_cooling_coil_object_type")]
public Dehumidifier_Desiccant_System_CompanionCoolingCoilObjectType CompanionCoolingCoilObjectType { get; set; } = (Dehumidifier_Desiccant_System_CompanionCoolingCoilObjectType)Enum.Parse(typeof(Dehumidifier_Desiccant_System_CompanionCoolingCoilObjectType), "CoilCoolingDXSingleSpeed");
        

[JsonProperty("companion_cooling_coil_name")]
public string CompanionCoolingCoilName { get; set; } = "";
        

[Description("Select Yes if the companion cooling coil is located directly upstream of the desi" +
    "ccant heat exchanger\'s process air inlet node.")]
[JsonProperty("companion_cooling_coil_upstream_of_dehumidifier_process_inlet")]
public EmptyNoYes CompanionCoolingCoilUpstreamOfDehumidifierProcessInlet { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("companion_coil_regeneration_air_heating")]
public EmptyNoYes CompanionCoilRegenerationAirHeating { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("exhaust_fan_maximum_flow_rate")]
public System.Nullable<float> ExhaustFanMaximumFlowRate { get; set; } = null;
        

[JsonProperty("exhaust_fan_maximum_power")]
public System.Nullable<float> ExhaustFanMaximumPower { get; set; } = null;
        

[Description("Curve object type must be Curve:Quadratic or Curve:Cubic")]
[JsonProperty("exhaust_fan_power_curve_name")]
public string ExhaustFanPowerCurveName { get; set; } = "";
    }
    
    public enum Dehumidifier_Desiccant_System_DesiccantHeatExchangerObjectType
    {
        
        [JsonProperty("HeatExchanger:Desiccant:BalancedFlow")]
        HeatExchangerDesiccantBalancedFlow = 0,
    }
    
    public enum Dehumidifier_Desiccant_System_RegenerationAirFanObjectType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 2,
    }
    
    public enum Dehumidifier_Desiccant_System_RegenerationAirFanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum Dehumidifier_Desiccant_System_RegenerationAirHeaterObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum Dehumidifier_Desiccant_System_CompanionCoolingCoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:TwoStageWithHumidityControlMode")]
        CoilCoolingDXTwoStageWithHumidityControlMode = 1,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 2,
    }
}
namespace BH.oM.Adapters.EnergyPlus.HVACDesignObjects
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("This object is used to describe general outdoor air requirements which are refere" +
        "nced by other objects.")]
    [JsonObject("DesignSpecification:OutdoorAir")]
    public class DesignSpecification_OutdoorAir : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Flow/Person => Outdoor Air Flow per Person * Occupancy = Design Flow Rate, Flow/Area => Outdoor Air Flow per Zone Floor Area * Zone Floor Area = Design Flow Rate, Flow/Zone => Outdoor Air Flow per Zone = Design Flow Rate, AirChanges/Hour => Outdoor Air Flow Air Changes per Hour * Zone Volume adjusted for m3/s = Design Flow Rate")]
[JsonProperty("outdoor_air_method")]
public DesignSpecification_OutdoorAir_OutdoorAirMethod OutdoorAirMethod { get; set; } = (DesignSpecification_OutdoorAir_OutdoorAirMethod)Enum.Parse(typeof(DesignSpecification_OutdoorAir_OutdoorAirMethod), "Empty");
        

[Description(@"0.00944 m3/s is equivalent to 20 cfm per person This input is only used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum For sizing, the design number of occupants is used. For outdoor air flow control, the use of design occupants or current occupants depends on the component and DCV options. AirTerminal:SingleDuct:VAV:NoReheat, AirTerminal:SingleDuct:VAV:Reheat use the DCV flag specified in Controller:MechanicalVentilation AirTerminal:DualDuct:VAV:OutdoorAir and ZoneHVAC:IdealLoadsAirSystem have their own DCV control input. ZoneHVAC:FourPipeFanCoil always uses current occupants.")]
[JsonProperty("outdoor_air_flow_per_person")]
public System.Nullable<float> OutdoorAirFlowPerPerson { get; set; } = (System.Nullable<float>)Single.Parse("0.00944", CultureInfo.InvariantCulture);
        

[Description("This input is only used if the field Outdoor Air Method is Flow/Area, Sum, or Max" +
    "imum")]
[JsonProperty("outdoor_air_flow_per_zone_floor_area")]
public System.Nullable<float> OutdoorAirFlowPerZoneFloorArea { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This input is only used if the field Outdoor Air Method is Flow/Zone, Sum, or Max" +
    "imum")]
[JsonProperty("outdoor_air_flow_per_zone")]
public System.Nullable<float> OutdoorAirFlowPerZone { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This input is only used if the field Outdoor Air Method is AirChanges/Hour, Sum, " +
    "or Maximum")]
[JsonProperty("outdoor_air_flow_air_changes_per_hour")]
public System.Nullable<float> OutdoorAirFlowAirChangesPerHour { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Schedule values are multiplied by the Outdoor Air Flow rate calculated using the previous four inputs. Schedule values are limited to 0 to 1. If left blank, the schedule defaults to 1.0. This schedule is ignored during sizing. All other components which reference this design specification use the current schedule value to calculate the current outdoor air requirement. This includes AirTerminal:SingleDuct:VAV:NoReheat, AirTerminal:SingleDuct:VAV:Reheat, AirTerminal:DualDuct:VAV:OutdoorAir, ZoneHVAC:FourPipeFanCoil, and ZoneHVAC:IdealLoadsAirSystem. This schedule will also be applied by Controller:MechanicalVentilation for all System Outdoor Air Methods.")]
[JsonProperty("outdoor_air_schedule_name")]
public string OutdoorAirScheduleName { get; set; } = "";
        

[Description("This input is only used to calculate the minimum outdoor air flow rate when the f" +
    "ield System Outdoor Air Method = ProportionalControlBasedOnDesignOARate in Contr" +
    "oller:MechanicalVentilation.")]
[JsonProperty("proportional_control_minimum_outdoor_air_flow_rate_schedule_name")]
public string ProportionalControlMinimumOutdoorAirFlowRateScheduleName { get; set; } = "";
    }
    
    public enum DesignSpecification_OutdoorAir_OutdoorAirMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirChanges/Hour")]
        AirChangesHour = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("IndoorAirQualityProcedure")]
        IndoorAirQualityProcedure = 5,
        
        [JsonProperty("Maximum")]
        Maximum = 6,
        
        [JsonProperty("ProportionalControlBasedOnDesignOccupancy")]
        ProportionalControlBasedOnDesignOccupancy = 7,
        
        [JsonProperty("ProportionalControlBasedOnOccupancySchedule")]
        ProportionalControlBasedOnOccupancySchedule = 8,
        
        [JsonProperty("Sum")]
        Sum = 9,
    }
    
    [Description("This object is used to describe zone air distribution in terms of air distributio" +
        "n effectiveness and secondary recirculation fraction. It is referenced by Sizing" +
        ":Zone and Controller:MechanicalVentilation objects")]
    [JsonObject("DesignSpecification:ZoneAirDistribution")]
    public class DesignSpecification_ZoneAirDistribution : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_air_distribution_effectiveness_in_cooling_mode")]
public System.Nullable<float> ZoneAirDistributionEffectivenessInCoolingMode { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("zone_air_distribution_effectiveness_in_heating_mode")]
public System.Nullable<float> ZoneAirDistributionEffectivenessInHeatingMode { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("optionally used to replace Zone Air Distribution Effectiveness in Cooling and Hea" +
    "ting Mode")]
[JsonProperty("zone_air_distribution_effectiveness_schedule_name")]
public string ZoneAirDistributionEffectivenessScheduleName { get; set; } = "";
        

[JsonProperty("zone_secondary_recirculation_fraction")]
public System.Nullable<float> ZoneSecondaryRecirculationFraction { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("minimum_zone_ventilation_efficiency")]
public System.Nullable<float> MinimumZoneVentilationEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    [Description(@"Specifies global heating and cooling sizing factors/ratios. These ratios are applied at the zone level to all of the zone heating and cooling loads and air flow rates. Then these new loads and air flow rates are used to calculate the system level flow rates and capacities and are used in all component sizing calculations. Specifies the width (in load timesteps) of a moving average window which is used to smooth the peak load across more than one timestep.")]
    [JsonObject("Sizing:Parameters")]
    public class Sizing_Parameters : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("heating_sizing_factor")]
public System.Nullable<float> HeatingSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("cooling_sizing_factor")]
public System.Nullable<float> CoolingSizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("blank => set the timesteps in averaging window to Number of Timesteps per Hour re" +
    "sulting in a 1 hour averaging window default is number of timesteps for 1 hour a" +
    "veraging window")]
[JsonProperty("timesteps_in_averaging_window")]
public System.Nullable<float> TimestepsInAveragingWindow { get; set; } = null;
    }
    
    [Description(@"Specifies the data needed to perform a zone design air flow calculation. The calculation is done for every sizing period included in the input. The maximum cooling and heating load and cooling, heating, and ventilation air flows are then saved for system level and zone component design calculations.")]
    [JsonObject("Sizing:Zone")]
    public class Sizing_Zone : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_or_zonelist_name")]
public string ZoneOrZonelistName { get; set; } = "";
        

[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public Sizing_Zone_ZoneCoolingDesignSupplyAirTemperatureInputMethod ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (Sizing_Zone_ZoneCoolingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(Sizing_Zone_ZoneCoolingDesignSupplyAirTemperatureInputMethod), "SupplyAirTemperature");
        

[Description("Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_cooling_design_supply_air_temperature")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperature { get; set; } = null;
        

[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = null;
        

[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public Sizing_Zone_ZoneHeatingDesignSupplyAirTemperatureInputMethod ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (Sizing_Zone_ZoneHeatingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(Sizing_Zone_ZoneHeatingDesignSupplyAirTemperatureInputMethod), "SupplyAirTemperature");
        

[Description("Zone Heating Design Supply Air Temperature is only used when Zone Heating Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_heating_design_supply_air_temperature")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperature { get; set; } = null;
        

[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = null;
        

[JsonProperty("zone_cooling_design_supply_air_humidity_ratio")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirHumidityRatio { get; set; } = null;
        

[JsonProperty("zone_heating_design_supply_air_humidity_ratio")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirHumidityRatio { get; set; } = null;
        

[JsonProperty("design_specification_outdoor_air_object_name")]
public string DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        

[Description("if blank or zero, global heating sizing factor from Sizing:Parameters is used.")]
[JsonProperty("zone_heating_sizing_factor")]
public System.Nullable<float> ZoneHeatingSizingFactor { get; set; } = null;
        

[Description("if blank or zero, global cooling sizing factor from Sizing:Parameters is used.")]
[JsonProperty("zone_cooling_sizing_factor")]
public System.Nullable<float> ZoneCoolingSizingFactor { get; set; } = null;
        

[JsonProperty("cooling_design_air_flow_method")]
public Sizing_Zone_CoolingDesignAirFlowMethod CoolingDesignAirFlowMethod { get; set; } = (Sizing_Zone_CoolingDesignAirFlowMethod)Enum.Parse(typeof(Sizing_Zone_CoolingDesignAirFlowMethod), "DesignDay");
        

[Description("This input is used if Cooling Design Air Flow Method is Flow/Zone This value will" +
    " be multiplied by the global or zone sizing factor and by zone multipliers.")]
[JsonProperty("cooling_design_air_flow_rate")]
public System.Nullable<float> CoolingDesignAirFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("default is .15 cfm/ft2 This input is used if Cooling Design Air Flow Method is De" +
    "signDayWithLimit")]
[JsonProperty("cooling_minimum_air_flow_per_zone_floor_area")]
public System.Nullable<float> CoolingMinimumAirFlowPerZoneFloorArea { get; set; } = (System.Nullable<float>)Single.Parse("0.000762", CultureInfo.InvariantCulture);
        

[Description("This input is used if Cooling Design Air Flow Method is DesignDayWithLimit")]
[JsonProperty("cooling_minimum_air_flow")]
public System.Nullable<float> CoolingMinimumAirFlow { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("fraction of the Cooling design Air Flow Rate This input is currently used in sizi" +
    "ng the VAV air terminal unit and fan minimum flow rate It does not currently aff" +
    "ect other component autosizing.")]
[JsonProperty("cooling_minimum_air_flow_fraction")]
public System.Nullable<float> CoolingMinimumAirFlowFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_design_air_flow_method")]
public Sizing_Zone_HeatingDesignAirFlowMethod HeatingDesignAirFlowMethod { get; set; } = (Sizing_Zone_HeatingDesignAirFlowMethod)Enum.Parse(typeof(Sizing_Zone_HeatingDesignAirFlowMethod), "DesignDay");
        

[Description("This input is used if Heating Design Air Flow Method is Flow/Zone. This value wil" +
    "l be multiplied by the global or zone sizing factor and by zone multipliers.")]
[JsonProperty("heating_design_air_flow_rate")]
public System.Nullable<float> HeatingDesignAirFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("default is .40 cfm/ft2 This field is used to size the heating design flow rate wh" +
    "en Heating Design Air Flow Method = Flow/Zone. This input is used for autosizing" +
    " components when Heating Design Air Flow Method = DesignDayWithLimit.")]
[JsonProperty("heating_maximum_air_flow_per_zone_floor_area")]
public System.Nullable<float> HeatingMaximumAirFlowPerZoneFloorArea { get; set; } = (System.Nullable<float>)Single.Parse("0.002032", CultureInfo.InvariantCulture);
        

[Description("default is 300 cfm This input is used for autosizing components when Heating Desi" +
    "gn Air Flow Method = DesignDayWithLimit.")]
[JsonProperty("heating_maximum_air_flow")]
public System.Nullable<float> HeatingMaximumAirFlow { get; set; } = (System.Nullable<float>)Single.Parse("0.1415762", CultureInfo.InvariantCulture);
        

[Description("fraction of the Heating Design Air Flow Rate This input is used for autosizing co" +
    "mponents when Heating Design Air Flow Method = DesignDayWithLimit.")]
[JsonProperty("heating_maximum_air_flow_fraction")]
public System.Nullable<float> HeatingMaximumAirFlowFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.3", CultureInfo.InvariantCulture);
        

[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
        

[Description("account for effect of dedicated outdoor air system supplying air directly to the " +
    "zone")]
[JsonProperty("account_for_dedicated_outdoor_air_system")]
public EmptyNoYes AccountForDedicatedOutdoorAirSystem { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("1)supply neutral ventilation air; 2)supply neutral dehumidified and reheated vent" +
    "ilation air; 3)supply cold ventilation air")]
[JsonProperty("dedicated_outdoor_air_system_control_strategy")]
public Sizing_Zone_DedicatedOutdoorAirSystemControlStrategy DedicatedOutdoorAirSystemControlStrategy { get; set; } = (Sizing_Zone_DedicatedOutdoorAirSystemControlStrategy)Enum.Parse(typeof(Sizing_Zone_DedicatedOutdoorAirSystemControlStrategy), "NeutralSupplyAir");
        

[JsonProperty("dedicated_outdoor_air_low_setpoint_temperature_for_design")]
public string DedicatedOutdoorAirLowSetpointTemperatureForDesign { get; set; } = (System.String)"Autosize";
        

[JsonProperty("dedicated_outdoor_air_high_setpoint_temperature_for_design")]
public string DedicatedOutdoorAirHighSetpointTemperatureForDesign { get; set; } = (System.String)"Autosize";
    }
    
    public enum Sizing_Zone_ZoneCoolingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum Sizing_Zone_ZoneHeatingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum Sizing_Zone_CoolingDesignAirFlowMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DesignDay")]
        DesignDay = 1,
        
        [JsonProperty("DesignDayWithLimit")]
        DesignDayWithLimit = 2,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 3,
    }
    
    public enum Sizing_Zone_HeatingDesignAirFlowMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DesignDay")]
        DesignDay = 1,
        
        [JsonProperty("DesignDayWithLimit")]
        DesignDayWithLimit = 2,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 3,
    }
    
    public enum Sizing_Zone_DedicatedOutdoorAirSystemControlStrategy
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ColdSupplyAir")]
        ColdSupplyAir = 1,
        
        [JsonProperty("NeutralDehumidifiedSupplyAir")]
        NeutralDehumidifiedSupplyAir = 2,
        
        [JsonProperty("NeutralSupplyAir")]
        NeutralSupplyAir = 3,
    }
    
    [Description("This object is used to describe general scalable zone HVAC equipment sizing which" +
        " are referenced by other objects.")]
    [JsonObject("DesignSpecification:ZoneHVAC:Sizing")]
    public class DesignSpecification_ZoneHVAC_Sizing : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Enter the method used to determine the cooling supply air volume flow rate. None is used when a cooling coil is not included in the Zone HVAC Equip or this field may be blank. SupplyAirFlowRate => selected when the magnitude of the supply air volume flow rate is specified. FlowPerFloorArea => selected when the supply air volume flow rate is determined from total floor area served by the Zone HVAC unit and Flow Per Floor Area value specified. FractionOfAutosizedCoolingAirflow => is selected when the supply air volume is determined from a user specified fraction and the autosized cooling supply air flow rate value determined by the simulation. FlowPerCoolingCapacity => is selected when the supply air volume is determined from user specified flow per Cooling Capacity and Cooling Capacity determined by the simulation.")]
[JsonProperty("cooling_supply_air_flow_rate_method")]
public DesignSpecification_ZoneHVAC_Sizing_CoolingSupplyAirFlowRateMethod CoolingSupplyAirFlowRateMethod { get; set; } = (DesignSpecification_ZoneHVAC_Sizing_CoolingSupplyAirFlowRateMethod)Enum.Parse(typeof(DesignSpecification_ZoneHVAC_Sizing_CoolingSupplyAirFlowRateMethod), "SupplyAirFlowRate");
        

[Description("Enter the magnitude of supply air volume flow rate during cooling operation. Requ" +
    "ired field when Cooling Supply Air Flow Rate Method is SupplyAirFlowRate. This f" +
    "ield may be blank if a cooling coil is not included in the Zone HVAC equipment.")]
[JsonProperty("cooling_supply_air_flow_rate")]
public string CoolingSupplyAirFlowRate { get; set; } = "";
        

[Description("Enter the cooling supply air volume flow rate per total conditioned floor area. R" +
    "equired field when Cooling Supply Air Flow Rate Method is FlowPerFloorArea. This" +
    " field may be blank if a cooling coil is not included in the Zone HVAC equipment" +
    ".")]
[JsonProperty("cooling_supply_air_flow_rate_per_floor_area")]
public System.Nullable<float> CoolingSupplyAirFlowRatePerFloorArea { get; set; } = null;
        

[Description(@"Enter the supply air volume flow rate as a fraction of the cooling supply air flow rate. Required field when Cooling Supply Air Flow Rate Method is FractionOfAutosizedCoolingAirflow. This field may be blank if a cooling coil is not included in the Zone HVAC equipment.")]
[JsonProperty("cooling_fraction_of_autosized_cooling_supply_air_flow_rate")]
public System.Nullable<float> CoolingFractionOfAutosizedCoolingSupplyAirFlowRate { get; set; } = null;
        

[Description("Enter the cooling supply air volume flow rate unit cooling capacity. Required fie" +
    "ld when Cooling Supply Air Flow Rate Method is FlowPerCoolingCapacity. This fiel" +
    "d may be blank if a cooling coil is not included in the Zone HVAC equipment.")]
[JsonProperty("cooling_supply_air_flow_rate_per_unit_cooling_capacity")]
public System.Nullable<float> CoolingSupplyAirFlowRatePerUnitCoolingCapacity { get; set; } = null;
        

[Description(@"Enter the method used to determine the supply air volume flow rate When No Cooling or Heating is Required. None is used when a cooling or heating coil is not included in the Zone HVAC Equipment or this field may be blank. SupplyAirFlowRate => selected when the magnitude of the supply air volume flow rate is specified. FlowPerFloorArea => selected when the supply air volume flow rate is determined from total floor area served by the Zone HVAC unit and Flow Per Floor Area is specified. FractionOfAutosizedCoolingAirflow => is selected when the supply air volume is determined from a user specified fraction and the Autosized cooling supply air flow rate value determined by the simulation. FractionOfAutosizedHeatingAirflow => is selected when the supply air volume is determined from a user specified fraction and the Autosized heating supply air flow rate value determined by the simulation.")]
[JsonProperty("no_load_supply_air_flow_rate_method")]
public DesignSpecification_ZoneHVAC_Sizing_NoLoadSupplyAirFlowRateMethod NoLoadSupplyAirFlowRateMethod { get; set; } = (DesignSpecification_ZoneHVAC_Sizing_NoLoadSupplyAirFlowRateMethod)Enum.Parse(typeof(DesignSpecification_ZoneHVAC_Sizing_NoLoadSupplyAirFlowRateMethod), "SupplyAirFlowRate");
        

[Description("Enter the magnitude of the supply air volume flow rate during when no cooling or " +
    "heating is required. Required field when No Load Supply Air Flow Rate Method is " +
    "SupplyAirFlowRate.")]
[JsonProperty("no_load_supply_air_flow_rate")]
public string NoLoadSupplyAirFlowRate { get; set; } = "";
        

[Description("Enter the supply air volume flow rate per total floor area. Required field when N" +
    "o Load Supply Air Flow Rate Method is FlowPerFloorArea.")]
[JsonProperty("no_load_supply_air_flow_rate_per_floor_area")]
public System.Nullable<float> NoLoadSupplyAirFlowRatePerFloorArea { get; set; } = null;
        

[Description("Enter the supply air volume flow rate as a fraction of the cooling supply air flo" +
    "w rate. Required field when No Load Supply Air Flow Rate Method is FractionOfAut" +
    "osizedCoolingAirflow.")]
[JsonProperty("no_load_fraction_of_cooling_supply_air_flow_rate")]
public System.Nullable<float> NoLoadFractionOfCoolingSupplyAirFlowRate { get; set; } = null;
        

[Description("Enter the supply air volume flow rate as a fraction of the heating supply air flo" +
    "w rate. Required field when No Load Supply Air Flow Rate Method is FractionOfAut" +
    "osizedHeatingAirflow.")]
[JsonProperty("no_load_fraction_of_heating_supply_air_flow_rate")]
public System.Nullable<float> NoLoadFractionOfHeatingSupplyAirFlowRate { get; set; } = null;
        

[Description(@"Enter the method used to determine the heating supply air volume flow rate. None is used when a heating coil is not included in the Zone HVAC Equipment or this field may be blank. SupplyAirFlowRate => selected when the magnitude of the heating supply air volume flow rate is specified. FlowPerFloorArea => selected when the supply air volume flow rate is determined from total floor area served by a Zone HVAC unit and user specified value of Flow Per Floor Area. FractionOfAutosizedHeatingAirflow => is selected when the supply air volume is determined from a user specified fraction and the Autosized heating supply air flow rate value determined by the simulation. FlowPerHeatingCapacity => is selected when the supply air volume is determined from user specified flow per Heating Capacity and Heating Capacity determined by the simulation.")]
[JsonProperty("heating_supply_air_flow_rate_method")]
public DesignSpecification_ZoneHVAC_Sizing_HeatingSupplyAirFlowRateMethod HeatingSupplyAirFlowRateMethod { get; set; } = (DesignSpecification_ZoneHVAC_Sizing_HeatingSupplyAirFlowRateMethod)Enum.Parse(typeof(DesignSpecification_ZoneHVAC_Sizing_HeatingSupplyAirFlowRateMethod), "SupplyAirFlowRate");
        

[Description("Enter the magnitude of the supply air volume flow rate during heating operation. " +
    "Required field when Heating Supply Air Flow Rate Method is SupplyAirFlowRate. Th" +
    "is field may be blank if a heating coil is not included in the Zone HVAC equipme" +
    "nt.")]
[JsonProperty("heating_supply_air_flow_rate")]
public string HeatingSupplyAirFlowRate { get; set; } = "";
        

[Description("Enter the heating supply air volume flow rate per total conditioned floor area. R" +
    "equired field when Heating Supply Air Flow Rate Method is FlowPerFloorArea. This" +
    " field may be blank if a heating coil is not included in the Zone HVAC equipment" +
    ".")]
[JsonProperty("heating_supply_air_flow_rate_per_floor_area")]
public System.Nullable<float> HeatingSupplyAirFlowRatePerFloorArea { get; set; } = null;
        

[Description(@"Enter the supply air volume flow rate as a fraction of the heating supply air flow rate. Required field when Heating Supply Air Flow Rate Method is FractionOfAutosizedHeatingAirflow. This field may be blank if a heating coil is not included in the Zone HVAC equipment.")]
[JsonProperty("heating_fraction_of_heating_supply_air_flow_rate")]
public System.Nullable<float> HeatingFractionOfHeatingSupplyAirFlowRate { get; set; } = null;
        

[Description("Enter the supply air volume flow rate per unit heating capacity. Required field w" +
    "hen Heating Supply Air Flow Rate Method is FlowPerHeatingCapacity. This field ma" +
    "y be blank if a heating coil is not included in the Zone HVAC equipment.")]
[JsonProperty("heating_supply_air_flow_rate_per_unit_heating_capacity")]
public System.Nullable<float> HeatingSupplyAirFlowRatePerUnitHeatingCapacity { get; set; } = null;
        

[Description(@"Enter the method used to determine the cooling design capacity for scalable sizing. None is used when a cooling coils is not included in the Zone HVAC Equipment or this field may be blank. If this input field is left blank, then the design cooling capacity is set to zero. CoolingDesignCapacity => selected when the design cooling capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determine from user specified cooling capacity per floor area and zone floor area. FractionOfAutosizedCoolingCapacity => is selected when the design cooling capacity is determined from a user specified fraction and the auto-sized design cooling capacity.")]
[JsonProperty("cooling_design_capacity_method")]
public DesignSpecification_ZoneHVAC_Sizing_CoolingDesignCapacityMethod CoolingDesignCapacityMethod { get; set; } = (DesignSpecification_ZoneHVAC_Sizing_CoolingDesignCapacityMethod)Enum.Parse(typeof(DesignSpecification_ZoneHVAC_Sizing_CoolingDesignCapacityMethod), "None");
        

[Description("Enter the design cooling capacity. Required field when the cooling design capacit" +
    "y method CoolingDesignCapacity.")]
[JsonProperty("cooling_design_capacity")]
public string CoolingDesignCapacity { get; set; } = "";
        

[Description("Enter the cooling design capacity per zone floor area. Required field when the co" +
    "oling design capacity method field is CapacityPerFloorArea.")]
[JsonProperty("cooling_design_capacity_per_floor_area")]
public System.Nullable<float> CoolingDesignCapacityPerFloorArea { get; set; } = null;
        

[Description("Enter the fraction of auto-sized cooling design capacity. Required field when the" +
    " cooling design capacity method field is FractionOfAutosizedCoolingCapacity.")]
[JsonProperty("fraction_of_autosized_cooling_design_capacity")]
public System.Nullable<float> FractionOfAutosizedCoolingDesignCapacity { get; set; } = null;
        

[Description(@"Enter the method used to determine the heating design capacity for scalable sizing. None is used when a heating coil is not included in the Zone HVAC Equipment or this field may be blank. If this input field is left blank, then the design heating capacity is set to zero. HeatingDesignCapacity => selected when the design heating capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determine from user specified heating capacity per flow area and zone floor area. FractionOfAutosizedHeatingCapacity => is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity")]
[JsonProperty("heating_design_capacity_method")]
public DesignSpecification_ZoneHVAC_Sizing_HeatingDesignCapacityMethod HeatingDesignCapacityMethod { get; set; } = (DesignSpecification_ZoneHVAC_Sizing_HeatingDesignCapacityMethod)Enum.Parse(typeof(DesignSpecification_ZoneHVAC_Sizing_HeatingDesignCapacityMethod), "None");
        

[Description("Enter the design heating capacity. Required field when the heating design capacit" +
    "y method HeatingDesignCapacity.")]
[JsonProperty("heating_design_capacity")]
public string HeatingDesignCapacity { get; set; } = "";
        

[Description("Enter the heating design capacity per zone floor area. Required field when the he" +
    "ating design capacity method field is CapacityPerFloorArea.")]
[JsonProperty("heating_design_capacity_per_floor_area")]
public System.Nullable<float> HeatingDesignCapacityPerFloorArea { get; set; } = null;
        

[Description("Enter the fraction of auto-sized heating design capacity. Required field when cap" +
    "acity the heating design capacity method field is FractionOfAutosizedHeatingCapa" +
    "city.")]
[JsonProperty("fraction_of_autosized_heating_design_capacity")]
public System.Nullable<float> FractionOfAutosizedHeatingDesignCapacity { get; set; } = null;
    }
    
    public enum DesignSpecification_ZoneHVAC_Sizing_CoolingSupplyAirFlowRateMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FlowPerCoolingCapacity")]
        FlowPerCoolingCapacity = 1,
        
        [JsonProperty("FlowPerFloorArea")]
        FlowPerFloorArea = 2,
        
        [JsonProperty("FractionOfAutosizedCoolingAirflow")]
        FractionOfAutosizedCoolingAirflow = 3,
        
        [JsonProperty("None")]
        None = 4,
        
        [JsonProperty("SupplyAirFlowRate")]
        SupplyAirFlowRate = 5,
    }
    
    public enum DesignSpecification_ZoneHVAC_Sizing_NoLoadSupplyAirFlowRateMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FlowPerFloorArea")]
        FlowPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedCoolingAirflow")]
        FractionOfAutosizedCoolingAirflow = 2,
        
        [JsonProperty("FractionOfAutosizedHeatingAirflow")]
        FractionOfAutosizedHeatingAirflow = 3,
        
        [JsonProperty("None")]
        None = 4,
        
        [JsonProperty("SupplyAirFlowRate")]
        SupplyAirFlowRate = 5,
    }
    
    public enum DesignSpecification_ZoneHVAC_Sizing_HeatingSupplyAirFlowRateMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FlowPerFloorArea")]
        FlowPerFloorArea = 1,
        
        [JsonProperty("FlowPerHeatingCapacity")]
        FlowPerHeatingCapacity = 2,
        
        [JsonProperty("FractionOfAutosizedHeatingAirflow")]
        FractionOfAutosizedHeatingAirflow = 3,
        
        [JsonProperty("None")]
        None = 4,
        
        [JsonProperty("SupplyAirFlowRate")]
        SupplyAirFlowRate = 5,
    }
    
    public enum DesignSpecification_ZoneHVAC_Sizing_CoolingDesignCapacityMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("CoolingDesignCapacity")]
        CoolingDesignCapacity = 2,
        
        [JsonProperty("FractionOfAutosizedCoolingCapacity")]
        FractionOfAutosizedCoolingCapacity = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum DesignSpecification_ZoneHVAC_Sizing_HeatingDesignCapacityMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingCapacity")]
        FractionOfAutosizedHeatingCapacity = 2,
        
        [JsonProperty("HeatingDesignCapacity")]
        HeatingDesignCapacity = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    [Description("This object is used to scale the sizing of air terminal units.")]
    [JsonObject("DesignSpecification:AirTerminal:Sizing")]
    public class DesignSpecification_AirTerminal_Sizing : BHoMObject, IEnergyPlusClass
    {
        

[Description("The fraction of the design sensible cooling load to be met by this terminal unit." +
    " This fraction is applied after the Zone Cooling Sizing Factor (see Sizing:Zone)" +
    ".")]
[JsonProperty("fraction_of_design_cooling_load")]
public System.Nullable<float> FractionOfDesignCoolingLoad { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This ratio adjusts the supply air temperature difference used to calculate the co" +
    "oling design supply air flow rate for this terminal unit.")]
[JsonProperty("cooling_design_supply_air_temperature_difference_ratio")]
public System.Nullable<float> CoolingDesignSupplyAirTemperatureDifferenceRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("The fraction of the design sensible heating load to be met by this terminal unit." +
    " This fraction is applied after the Zone Heating Sizing Factor (see Sizing:Zone)" +
    ".")]
[JsonProperty("fraction_of_design_heating_load")]
public System.Nullable<float> FractionOfDesignHeatingLoad { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This ratio adjusts the supply air temperature difference used to calculate the he" +
    "ating design supply air flow rate for this terminal unit.")]
[JsonProperty("heating_design_supply_air_temperature_difference_ratio")]
public System.Nullable<float> HeatingDesignSupplyAirTemperatureDifferenceRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("The fraction of the zone minimum outdoor air requirement to be met by this termin" +
    "al unit.")]
[JsonProperty("fraction_of_minimum_outdoor_air_flow")]
public System.Nullable<float> FractionOfMinimumOutdoorAirFlow { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    [Description("Specifies the input needed to perform sizing calculations for a central forced ai" +
        "r system. System design air flow, heating capacity, and cooling capacity will be" +
        " calculated using this input data.")]
    [JsonObject("Sizing:System")]
    public class Sizing_System : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("airloop_name")]
public string AirloopName { get; set; } = "";
        

[Description(@"Specifies the basis for sizing the system supply air flow rate Sensible and Total use the zone design air flow rates to size the system supply air flow rate The cooling coil will then be sized at either the peak Sensible or Total flow rate and conditions The heating coil is always sized at the peak sensible heating load. VentilationRequirement uses the system ventilation requirement")]
[JsonProperty("type_of_load_to_size_on")]
public Sizing_System_TypeOfLoadToSizeOn TypeOfLoadToSizeOn { get; set; } = (Sizing_System_TypeOfLoadToSizeOn)Enum.Parse(typeof(Sizing_System_TypeOfLoadToSizeOn), "Sensible");
        

[JsonProperty("design_outdoor_air_flow_rate")]
public string DesignOutdoorAirFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("central_heating_maximum_system_air_flow_ratio")]
public string CentralHeatingMaximumSystemAirFlowRatio { get; set; } = (System.String)"Autosize";
        

[JsonProperty("preheat_design_temperature")]
public System.Nullable<float> PreheatDesignTemperature { get; set; } = null;
        

[JsonProperty("preheat_design_humidity_ratio")]
public System.Nullable<float> PreheatDesignHumidityRatio { get; set; } = null;
        

[JsonProperty("precool_design_temperature")]
public System.Nullable<float> PrecoolDesignTemperature { get; set; } = null;
        

[JsonProperty("precool_design_humidity_ratio")]
public System.Nullable<float> PrecoolDesignHumidityRatio { get; set; } = null;
        

[JsonProperty("central_cooling_design_supply_air_temperature")]
public System.Nullable<float> CentralCoolingDesignSupplyAirTemperature { get; set; } = null;
        

[JsonProperty("central_heating_design_supply_air_temperature")]
public System.Nullable<float> CentralHeatingDesignSupplyAirTemperature { get; set; } = null;
        

[JsonProperty("type_of_zone_sum_to_use")]
public Sizing_System_TypeOfZoneSumToUse TypeOfZoneSumToUse { get; set; } = (Sizing_System_TypeOfZoneSumToUse)Enum.Parse(typeof(Sizing_System_TypeOfZoneSumToUse), "NonCoincident");
        

[JsonProperty("100_outdoor_air_in_cooling")]
public EmptyNoYes _100OutdoorAirInCooling { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("100_outdoor_air_in_heating")]
public EmptyNoYes _100OutdoorAirInHeating { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("central_cooling_design_supply_air_humidity_ratio")]
public System.Nullable<float> CentralCoolingDesignSupplyAirHumidityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.008", CultureInfo.InvariantCulture);
        

[JsonProperty("central_heating_design_supply_air_humidity_ratio")]
public System.Nullable<float> CentralHeatingDesignSupplyAirHumidityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.008", CultureInfo.InvariantCulture);
        

[JsonProperty("cooling_supply_air_flow_rate_method")]
public Sizing_System_CoolingSupplyAirFlowRateMethod CoolingSupplyAirFlowRateMethod { get; set; } = (Sizing_System_CoolingSupplyAirFlowRateMethod)Enum.Parse(typeof(Sizing_System_CoolingSupplyAirFlowRateMethod), "DesignDay");
        

[Description("This input is used if Cooling Supply Air Flow Rate Method is Flow/System This val" +
    "ue will *not* be multiplied by any sizing factor or by zone multipliers. If usin" +
    "g zone multipliers, this value must be large enough to serve the multiplied zone" +
    "s.")]
[JsonProperty("cooling_supply_air_flow_rate")]
public System.Nullable<float> CoolingSupplyAirFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Enter the cooling supply air volume flow rate per total conditioned floor area. R" +
    "equired field when Cooling Supply Air Flow Rate Method is FlowPerFloorArea.")]
[JsonProperty("cooling_supply_air_flow_rate_per_floor_area")]
public System.Nullable<float> CoolingSupplyAirFlowRatePerFloorArea { get; set; } = null;
        

[Description("Enter the supply air volume flow rate as a fraction of the cooling supply air flo" +
    "w rate. Required field when Cooling Supply Air Flow Rate Method is FractionOfAut" +
    "osizedCoolingAirflow.")]
[JsonProperty("cooling_fraction_of_autosized_cooling_supply_air_flow_rate")]
public System.Nullable<float> CoolingFractionOfAutosizedCoolingSupplyAirFlowRate { get; set; } = null;
        

[Description("Enter the supply air volume flow rate per unit cooling capacity. Required field w" +
    "hen Cooling Supply Air Flow Rate Method is FlowPerCoolingCapacity.")]
[JsonProperty("cooling_supply_air_flow_rate_per_unit_cooling_capacity")]
public System.Nullable<float> CoolingSupplyAirFlowRatePerUnitCoolingCapacity { get; set; } = null;
        

[JsonProperty("heating_supply_air_flow_rate_method")]
public Sizing_System_HeatingSupplyAirFlowRateMethod HeatingSupplyAirFlowRateMethod { get; set; } = (Sizing_System_HeatingSupplyAirFlowRateMethod)Enum.Parse(typeof(Sizing_System_HeatingSupplyAirFlowRateMethod), "DesignDay");
        

[Description("Required field when Heating Supply Air Flow Rate Method is Flow/System This value" +
    " will *not* be multiplied by any sizing factor or by zone multipliers. If using " +
    "zone multipliers, this value must be large enough to serve the multiplied zones." +
    "")]
[JsonProperty("heating_supply_air_flow_rate")]
public System.Nullable<float> HeatingSupplyAirFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Enter the heating supply air volume flow rate per total conditioned floor area. R" +
    "equired field when Heating Supply Air Flow Rate Method is FlowPerFloorArea.")]
[JsonProperty("heating_supply_air_flow_rate_per_floor_area")]
public System.Nullable<float> HeatingSupplyAirFlowRatePerFloorArea { get; set; } = null;
        

[Description("Enter the supply air volume flow rate as a fraction of the heating supply air flo" +
    "w rate. Required field when Heating Supply Air Flow Rate Method is FractionOfAut" +
    "osizedHeatingAirflow.")]
[JsonProperty("heating_fraction_of_autosized_heating_supply_air_flow_rate")]
public System.Nullable<float> HeatingFractionOfAutosizedHeatingSupplyAirFlowRate { get; set; } = null;
        

[Description("Enter the supply air volume flow rate as a fraction of the cooling supply air flo" +
    "w rate. Required field when Heating Supply Air Flow Rate Method is FractionOfAut" +
    "osizedCoolingAirflow.")]
[JsonProperty("heating_fraction_of_autosized_cooling_supply_air_flow_rate")]
public System.Nullable<float> HeatingFractionOfAutosizedCoolingSupplyAirFlowRate { get; set; } = null;
        

[Description("Enter the heating supply air volume flow rate per unit heating capacity. Required" +
    " field when Heating Supply Air Flow Rate Method is FlowPerHeatingCapacity.")]
[JsonProperty("heating_supply_air_flow_rate_per_unit_heating_capacity")]
public System.Nullable<float> HeatingSupplyAirFlowRatePerUnitHeatingCapacity { get; set; } = null;
        

[JsonProperty("system_outdoor_air_method")]
public Sizing_System_SystemOutdoorAirMethod SystemOutdoorAirMethod { get; set; } = (Sizing_System_SystemOutdoorAirMethod)Enum.Parse(typeof(Sizing_System_SystemOutdoorAirMethod), "ZoneSum");
        

[JsonProperty("zone_maximum_outdoor_air_fraction")]
public System.Nullable<float> ZoneMaximumOutdoorAirFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description(@"Enter the method used to determine the system cooling design capacity for scalable sizing. None is used when a cooling coils is not included in an airloop or this field may be blank. If this input field is left blank, then the design cooling capacity is set to zero. CoolingDesignCapacity => selected when the design cooling capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determined from user specified cooling capacity per floor area and total floor area of cooled zones served by an airloop. FractionOfAutosizedCoolingCapacity => is selected when the design cooling capacity is determined from a user specified fraction and the auto-sized design cooling capacity of the system.")]
[JsonProperty("cooling_design_capacity_method")]
public Sizing_System_CoolingDesignCapacityMethod CoolingDesignCapacityMethod { get; set; } = (Sizing_System_CoolingDesignCapacityMethod)Enum.Parse(typeof(Sizing_System_CoolingDesignCapacityMethod), "CoolingDesignCapacity");
        

[Description("Enter the design cooling capacity.")]
[JsonProperty("cooling_design_capacity")]
public string CoolingDesignCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Enter the cooling design capacity per total floor area of cooled zones served by " +
    "an airloop. Required field when the cooling design capacity method field is Capa" +
    "cityPerFloorArea.")]
[JsonProperty("cooling_design_capacity_per_floor_area")]
public System.Nullable<float> CoolingDesignCapacityPerFloorArea { get; set; } = null;
        

[Description("Enter the fraction of auto-sized cooling design capacity. Required field when the" +
    " cooling design capacity method field is FractionOfAutosizedCoolingCapacity.")]
[JsonProperty("fraction_of_autosized_cooling_design_capacity")]
public System.Nullable<float> FractionOfAutosizedCoolingDesignCapacity { get; set; } = null;
        

[Description(@"Enter the method used to determine the heating design capacity for scalable sizing. None is used when a heating coil not included in an airloop or this field may be blank. If this input field is left blank, then the design heating capacity is set to zero. HeatingDesignCapacity => selected when the design heating capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design heating capacity is determined from user specified heating capacity per flow area and total floor area of heated zones served by an airloop. FractionOfAutosizedHeatingCapacity => is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity of the system.")]
[JsonProperty("heating_design_capacity_method")]
public Sizing_System_HeatingDesignCapacityMethod HeatingDesignCapacityMethod { get; set; } = (Sizing_System_HeatingDesignCapacityMethod)Enum.Parse(typeof(Sizing_System_HeatingDesignCapacityMethod), "HeatingDesignCapacity");
        

[Description("Enter the design heating capacity.")]
[JsonProperty("heating_design_capacity")]
public string HeatingDesignCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Enter the heating design capacity per zone floor area. Required field when the he" +
    "ating design capacity method field is CapacityPerFloorArea.")]
[JsonProperty("heating_design_capacity_per_floor_area")]
public System.Nullable<float> HeatingDesignCapacityPerFloorArea { get; set; } = null;
        

[Description("Enter the fraction of auto-sized heating design capacity. Required field when cap" +
    "acity the heating design capacity method field is FractionOfAutosizedHeatingCapa" +
    "city.")]
[JsonProperty("fraction_of_autosized_heating_design_capacity")]
public System.Nullable<float> FractionOfAutosizedHeatingDesignCapacity { get; set; } = null;
        

[Description("Method used to control the coil\'s output")]
[JsonProperty("central_cooling_capacity_control_method")]
public Sizing_System_CentralCoolingCapacityControlMethod CentralCoolingCapacityControlMethod { get; set; } = (Sizing_System_CentralCoolingCapacityControlMethod)Enum.Parse(typeof(Sizing_System_CentralCoolingCapacityControlMethod), "OnOff");
    }
    
    public enum Sizing_System_TypeOfLoadToSizeOn
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Sensible")]
        Sensible = 1,
        
        [JsonProperty("Total")]
        Total = 2,
        
        [JsonProperty("VentilationRequirement")]
        VentilationRequirement = 3,
    }
    
    public enum Sizing_System_TypeOfZoneSumToUse
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Coincident")]
        Coincident = 1,
        
        [JsonProperty("NonCoincident")]
        NonCoincident = 2,
    }
    
    public enum Sizing_System_CoolingSupplyAirFlowRateMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DesignDay")]
        DesignDay = 1,
        
        [JsonProperty("Flow/System")]
        FlowSystem = 2,
        
        [JsonProperty("FlowPerCoolingCapacity")]
        FlowPerCoolingCapacity = 3,
        
        [JsonProperty("FlowPerFloorArea")]
        FlowPerFloorArea = 4,
        
        [JsonProperty("FractionOfAutosizedCoolingAirflow")]
        FractionOfAutosizedCoolingAirflow = 5,
    }
    
    public enum Sizing_System_HeatingSupplyAirFlowRateMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DesignDay")]
        DesignDay = 1,
        
        [JsonProperty("Flow/System")]
        FlowSystem = 2,
        
        [JsonProperty("FlowPerFloorArea")]
        FlowPerFloorArea = 3,
        
        [JsonProperty("FlowPerHeatingCapacity")]
        FlowPerHeatingCapacity = 4,
        
        [JsonProperty("FractionOfAutosizedCoolingAirflow")]
        FractionOfAutosizedCoolingAirflow = 5,
        
        [JsonProperty("FractionOfAutosizedHeatingAirflow")]
        FractionOfAutosizedHeatingAirflow = 6,
    }
    
    public enum Sizing_System_SystemOutdoorAirMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("VentilationRateProcedure")]
        VentilationRateProcedure = 1,
        
        [JsonProperty("ZoneSum")]
        ZoneSum = 2,
    }
    
    public enum Sizing_System_CoolingDesignCapacityMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("CoolingDesignCapacity")]
        CoolingDesignCapacity = 2,
        
        [JsonProperty("FractionOfAutosizedCoolingCapacity")]
        FractionOfAutosizedCoolingCapacity = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum Sizing_System_HeatingDesignCapacityMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingCapacity")]
        FractionOfAutosizedHeatingCapacity = 2,
        
        [JsonProperty("HeatingDesignCapacity")]
        HeatingDesignCapacity = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum Sizing_System_CentralCoolingCapacityControlMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Bypass")]
        Bypass = 1,
        
        [JsonProperty("OnOff")]
        OnOff = 2,
        
        [JsonProperty("VAV")]
        VAV = 3,
        
        [JsonProperty("VT")]
        VT = 4,
    }
    
    [Description(@"Specifies the input needed to autosize plant loop flow rates and equipment capacities. This information is initially used by components that use water for heating or cooling such as hot or chilled water coils to calculate their maximum water flow rates. These flow rates are then summed for use in calculating the Plant Loop flow rates.")]
    [JsonObject("Sizing:Plant")]
    public class Sizing_Plant : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of a PlantLoop or a CondenserLoop object")]
[JsonProperty("plant_or_condenser_loop_name")]
public string PlantOrCondenserLoopName { get; set; } = "";
        

[JsonProperty("loop_type")]
public Sizing_Plant_LoopType LoopType { get; set; } = (Sizing_Plant_LoopType)Enum.Parse(typeof(Sizing_Plant_LoopType), "Condenser");
        

[JsonProperty("design_loop_exit_temperature")]
public System.Nullable<float> DesignLoopExitTemperature { get; set; } = null;
        

[JsonProperty("loop_design_temperature_difference")]
public System.Nullable<float> LoopDesignTemperatureDifference { get; set; } = null;
        

[Description("if Coincident is chosen, then sizing is based on HVAC Sizing Simulations and the " +
    "input field called Do HVAC Sizing Simulation for Sizing Periods in SimulationCon" +
    "trol must be set to Yes")]
[JsonProperty("sizing_option")]
public Sizing_Plant_SizingOption SizingOption { get; set; } = (Sizing_Plant_SizingOption)Enum.Parse(typeof(Sizing_Plant_SizingOption), "NonCoincident");
        

[Description("this is used in the coincident sizing algorithm to apply a running average to pea" +
    "k flow rates that occur during HVAC Sizing Simulations")]
[JsonProperty("zone_timesteps_in_averaging_window")]
public System.Nullable<float> ZoneTimestepsInAveragingWindow { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("this is used to adjust the result for coincident sizing by applying a sizing fact" +
    "or")]
[JsonProperty("coincident_sizing_factor_mode")]
public Sizing_Plant_CoincidentSizingFactorMode CoincidentSizingFactorMode { get; set; } = (Sizing_Plant_CoincidentSizingFactorMode)Enum.Parse(typeof(Sizing_Plant_CoincidentSizingFactorMode), "GlobalCoolingSizingFactor");
    }
    
    public enum Sizing_Plant_LoopType
    {
        
        [JsonProperty("Condenser")]
        Condenser = 0,
        
        [JsonProperty("Cooling")]
        Cooling = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
        
        [JsonProperty("Steam")]
        Steam = 3,
    }
    
    public enum Sizing_Plant_SizingOption
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Coincident")]
        Coincident = 1,
        
        [JsonProperty("NonCoincident")]
        NonCoincident = 2,
    }
    
    public enum Sizing_Plant_CoincidentSizingFactorMode
    {
        
        [JsonProperty("GlobalCoolingSizingFactor")]
        GlobalCoolingSizingFactor = 0,
        
        [JsonProperty("GlobalHeatingSizingFactor")]
        GlobalHeatingSizingFactor = 1,
        
        [JsonProperty("LoopComponentSizingFactor")]
        LoopComponentSizingFactor = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    [Description("Default style for the Sizing output files is comma -- this works well for importi" +
        "ng into spreadsheet programs such as Excel(tm) but not so well for word processi" +
        "ng programs -- there tab may be a better choice. Fixed puts spaces between the \"" +
        "columns\"")]
    [JsonObject("OutputControl:Sizing:Style")]
    public class OutputControl_Sizing_Style : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("column_separator")]
public OutputControl_Sizing_Style_ColumnSeparator ColumnSeparator { get; set; } = (OutputControl_Sizing_Style_ColumnSeparator)Enum.Parse(typeof(OutputControl_Sizing_Style_ColumnSeparator), "Comma");
    }
    
    public enum OutputControl_Sizing_Style_ColumnSeparator
    {
        
        [JsonProperty("Comma")]
        Comma = 0,
        
        [JsonProperty("Fixed")]
        Fixed = 1,
        
        [JsonProperty("Tab")]
        Tab = 2,
    }
}
namespace BH.oM.Adapters.EnergyPlus.HVACTemplates
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Zone thermostat control. Referenced schedules must be defined elsewhere in the idf. Thermostat control type is dual setpoint with deadband. It is not necessary to create a thermostat object for every zone, only for each unique set of setpoint schedules. For example, an office building may have two thermostat objects, one for ""Office"" and one for ""Storage"".")]
    [JsonObject("HVACTemplate:Thermostat")]
    public class HVACTemplate_Thermostat : BHoMObject, IEnergyPlusClass
    {
        

[Description("Leave blank if constant setpoint specified below, must enter schedule or constant" +
    " setpoint")]
[JsonProperty("heating_setpoint_schedule_name")]
public string HeatingSetpointScheduleName { get; set; } = "";
        

[Description("Ignored if schedule specified above, must enter schedule or constant setpoint")]
[JsonProperty("constant_heating_setpoint")]
public System.Nullable<float> ConstantHeatingSetpoint { get; set; } = null;
        

[Description("Leave blank if constant setpoint specified below, must enter schedule or constant" +
    " setpoint")]
[JsonProperty("cooling_setpoint_schedule_name")]
public string CoolingSetpointScheduleName { get; set; } = "";
        

[Description("Ignored if schedule specified above, must enter schedule or constant setpoint")]
[JsonProperty("constant_cooling_setpoint")]
public System.Nullable<float> ConstantCoolingSetpoint { get; set; } = null;
    }
    
    [Description("Zone with ideal air system that meets heating or cooling loads")]
    [JsonObject("HVACTemplate:Zone:IdealLoadsAirSystem")]
    public class HVACTemplate_Zone_IdealLoadsAirSystem : BHoMObject, IEnergyPlusClass
    {
        

[Description("Zone name must match a building zone name")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed " +
    "that standard thermostat objects have been defined for this zone.")]
[JsonProperty("template_thermostat_name")]
public string TemplateThermostatName { get; set; } = "";
        

[Description("If blank, always on")]
[JsonProperty("system_availability_schedule_name")]
public string SystemAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("maximum_heating_supply_air_temperature")]
public System.Nullable<float> MaximumHeatingSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[JsonProperty("minimum_cooling_supply_air_temperature")]
public System.Nullable<float> MinimumCoolingSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_heating_supply_air_humidity_ratio")]
public System.Nullable<float> MaximumHeatingSupplyAirHumidityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.0156", CultureInfo.InvariantCulture);
        

[JsonProperty("minimum_cooling_supply_air_humidity_ratio")]
public System.Nullable<float> MinimumCoolingSupplyAirHumidityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.0077", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_limit")]
public HVACTemplate_Zone_IdealLoadsAirSystem_HeatingLimit HeatingLimit { get; set; } = (HVACTemplate_Zone_IdealLoadsAirSystem_HeatingLimit)Enum.Parse(typeof(HVACTemplate_Zone_IdealLoadsAirSystem_HeatingLimit), "NoLimit");
        

[Description("This field is ignored if Heating Limit = NoLimit If this field is blank, there is" +
    " no limit.")]
[JsonProperty("maximum_heating_air_flow_rate")]
public string MaximumHeatingAirFlowRate { get; set; } = "";
        

[Description("This field is ignored if Heating Limit = NoLimit If this field is blank, there is" +
    " no limit.")]
[JsonProperty("maximum_sensible_heating_capacity")]
public string MaximumSensibleHeatingCapacity { get; set; } = "";
        

[JsonProperty("cooling_limit")]
public HVACTemplate_Zone_IdealLoadsAirSystem_CoolingLimit CoolingLimit { get; set; } = (HVACTemplate_Zone_IdealLoadsAirSystem_CoolingLimit)Enum.Parse(typeof(HVACTemplate_Zone_IdealLoadsAirSystem_CoolingLimit), "NoLimit");
        

[Description("This field is ignored if Cooling Limit = NoLimit This field is required if Outdoo" +
    "r Air Economizer Type is anything other than NoEconomizer.")]
[JsonProperty("maximum_cooling_air_flow_rate")]
public string MaximumCoolingAirFlowRate { get; set; } = "";
        

[Description("This field is ignored if Cooling Limit = NoLimit")]
[JsonProperty("maximum_total_cooling_capacity")]
public string MaximumTotalCoolingCapacity { get; set; } = "";
        

[Description("If blank, heating is always available.")]
[JsonProperty("heating_availability_schedule_name")]
public string HeatingAvailabilityScheduleName { get; set; } = "";
        

[Description("If blank, cooling is always available.")]
[JsonProperty("cooling_availability_schedule_name")]
public string CoolingAvailabilityScheduleName { get; set; } = "";
        

[Description(@"ConstantSensibleHeatRatio means that the ideal loads system will be controlled to meet the sensible cooling load, and the latent cooling rate will be computed using a constant sensible heat ratio (SHR) Humidistat means that there is a ZoneControl:Humidistat for this zone and the ideal loads system will attempt to satisfy the humidistat. None means that there is no dehumidification. ConstantSupplyHumidityRatio means that during cooling the supply air will always be at the Minimum Cooling Supply Humidity Ratio.")]
[JsonProperty("dehumidification_control_type")]
public HVACTemplate_Zone_IdealLoadsAirSystem_DehumidificationControlType DehumidificationControlType { get; set; } = (HVACTemplate_Zone_IdealLoadsAirSystem_DehumidificationControlType)Enum.Parse(typeof(HVACTemplate_Zone_IdealLoadsAirSystem_DehumidificationControlType), "ConstantSensibleHeatRatio");
        

[Description("This field is applicable only when Dehumidification Control Type is ConstantSensi" +
    "bleHeatRatio")]
[JsonProperty("cooling_sensible_heat_ratio")]
public System.Nullable<float> CoolingSensibleHeatRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[Description("Zone relative humidity setpoint in percent (0 to 100)")]
[JsonProperty("dehumidification_setpoint")]
public System.Nullable<float> DehumidificationSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("60", CultureInfo.InvariantCulture);
        

[Description(@"None means that there is no humidification. Humidistat means that there is a ZoneControl:Humidistat for this zone and the ideal loads system will attempt to satisfy the humidistat. ConstantSupplyHumidityRatio means that during heating the supply air will always be at the Maximum Heating Supply Humidity Ratio.")]
[JsonProperty("humidification_control_type")]
public HVACTemplate_Zone_IdealLoadsAirSystem_HumidificationControlType HumidificationControlType { get; set; } = (HVACTemplate_Zone_IdealLoadsAirSystem_HumidificationControlType)Enum.Parse(typeof(HVACTemplate_Zone_IdealLoadsAirSystem_HumidificationControlType), "None");
        

[Description("Zone relative humidity setpoint in percent (0 to 100)")]
[JsonProperty("humidification_setpoint")]
public System.Nullable<float> HumidificationSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[Description(@"None means there is no outdoor air and all related fields will be ignored Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty("outdoor_air_method")]
public HVACTemplate_Zone_IdealLoadsAirSystem_OutdoorAirMethod OutdoorAirMethod { get; set; } = (HVACTemplate_Zone_IdealLoadsAirSystem_OutdoorAirMethod)Enum.Parse(typeof(HVACTemplate_Zone_IdealLoadsAirSystem_OutdoorAirMethod), "None");
        

[Description("Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air " +
    "Method is Flow/Person, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_person")]
public System.Nullable<float> OutdoorAirFlowRatePerPerson { get; set; } = (System.Nullable<float>)Single.Parse("0.00944", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public System.Nullable<float> OutdoorAirFlowRatePerZoneFloorArea { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone")]
public System.Nullable<float> OutdoorAirFlowRatePerZone { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"When the name of a DesignSpecification:OutdoorAir object is entered, the minimum outdoor air flow rate will be computed using these specifications. The outdoor air flow rate will also be affected by the next two fields. If this field is blank, there will be no outdoor air and the remaining fields will be ignored.")]
[JsonProperty("design_specification_outdoor_air_object_name")]
public string DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        

[Description(@"This field controls how the minimum outdoor air flow rate is calculated. None means that design occupancy will be used to compute the minimum outdoor air flow rate OccupancySchedule means that current occupancy level will be used. CO2Setpoint means that the design occupancy will be used to compute the minimum outdoor air flow rate and the outdoor air flow rate may be increased if necessary to maintain the indoor air carbon dioxide setpoint defined in a ZoneControl:ContaminantController object.")]
[JsonProperty("demand_controlled_ventilation_type")]
public HVACTemplate_Zone_IdealLoadsAirSystem_DemandControlledVentilationType DemandControlledVentilationType { get; set; } = (HVACTemplate_Zone_IdealLoadsAirSystem_DemandControlledVentilationType)Enum.Parse(typeof(HVACTemplate_Zone_IdealLoadsAirSystem_DemandControlledVentilationType), "None");
        

[Description("DifferentialDryBulb and DifferentialEnthalpy will increase the outdoor air flow r" +
    "ate when there is a cooling load and the outdoor air temperature or enthalpy is " +
    "below the zone exhaust air temperature or enthalpy.")]
[JsonProperty("outdoor_air_economizer_type")]
public HVACTemplate_Zone_IdealLoadsAirSystem_OutdoorAirEconomizerType OutdoorAirEconomizerType { get; set; } = (HVACTemplate_Zone_IdealLoadsAirSystem_OutdoorAirEconomizerType)Enum.Parse(typeof(HVACTemplate_Zone_IdealLoadsAirSystem_OutdoorAirEconomizerType), "NoEconomizer");
        

[JsonProperty("heat_recovery_type")]
public HVACTemplate_Zone_IdealLoadsAirSystem_HeatRecoveryType HeatRecoveryType { get; set; } = (HVACTemplate_Zone_IdealLoadsAirSystem_HeatRecoveryType)Enum.Parse(typeof(HVACTemplate_Zone_IdealLoadsAirSystem_HeatRecoveryType), "None");
        

[JsonProperty("sensible_heat_recovery_effectiveness")]
public System.Nullable<float> SensibleHeatRecoveryEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[Description("Applicable only if Heat Recovery Type is Enthalpy.")]
[JsonProperty("latent_heat_recovery_effectiveness")]
public System.Nullable<float> LatentHeatRecoveryEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
    }
    
    public enum HVACTemplate_Zone_IdealLoadsAirSystem_HeatingLimit
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LimitCapacity")]
        LimitCapacity = 1,
        
        [JsonProperty("LimitFlowRate")]
        LimitFlowRate = 2,
        
        [JsonProperty("LimitFlowRateAndCapacity")]
        LimitFlowRateAndCapacity = 3,
        
        [JsonProperty("NoLimit")]
        NoLimit = 4,
    }
    
    public enum HVACTemplate_Zone_IdealLoadsAirSystem_CoolingLimit
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LimitCapacity")]
        LimitCapacity = 1,
        
        [JsonProperty("LimitFlowRate")]
        LimitFlowRate = 2,
        
        [JsonProperty("LimitFlowRateAndCapacity")]
        LimitFlowRateAndCapacity = 3,
        
        [JsonProperty("NoLimit")]
        NoLimit = 4,
    }
    
    public enum HVACTemplate_Zone_IdealLoadsAirSystem_DehumidificationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantSensibleHeatRatio")]
        ConstantSensibleHeatRatio = 1,
        
        [JsonProperty("ConstantSupplyHumidityRatio")]
        ConstantSupplyHumidityRatio = 2,
        
        [JsonProperty("Humidistat")]
        Humidistat = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HVACTemplate_Zone_IdealLoadsAirSystem_HumidificationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantSupplyHumidityRatio")]
        ConstantSupplyHumidityRatio = 1,
        
        [JsonProperty("Humidistat")]
        Humidistat = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum HVACTemplate_Zone_IdealLoadsAirSystem_OutdoorAirMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("None")]
        None = 6,
        
        [JsonProperty("Sum")]
        Sum = 7,
    }
    
    public enum HVACTemplate_Zone_IdealLoadsAirSystem_DemandControlledVentilationType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CO2Setpoint")]
        CO2Setpoint = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("OccupancySchedule")]
        OccupancySchedule = 3,
    }
    
    public enum HVACTemplate_Zone_IdealLoadsAirSystem_OutdoorAirEconomizerType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DifferentialDryBulb")]
        DifferentialDryBulb = 1,
        
        [JsonProperty("DifferentialEnthalpy")]
        DifferentialEnthalpy = 2,
        
        [JsonProperty("NoEconomizer")]
        NoEconomizer = 3,
    }
    
    public enum HVACTemplate_Zone_IdealLoadsAirSystem_HeatRecoveryType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Sensible")]
        Sensible = 3,
    }
    
    [Description("Zone baseboard heating system.")]
    [JsonObject("HVACTemplate:Zone:BaseboardHeat")]
    public class HVACTemplate_Zone_BaseboardHeat : BHoMObject, IEnergyPlusClass
    {
        

[Description("Zone name must match a building zone name")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed " +
    "that standard thermostat objects have been defined for this zone.")]
[JsonProperty("template_thermostat_name")]
public string TemplateThermostatName { get; set; } = "";
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_heating_sizing_factor")]
public System.Nullable<float> ZoneHeatingSizingFactor { get; set; } = null;
        

[JsonProperty("baseboard_heating_type")]
public HVACTemplate_Zone_BaseboardHeat_BaseboardHeatingType BaseboardHeatingType { get; set; } = (HVACTemplate_Zone_BaseboardHeat_BaseboardHeatingType)Enum.Parse(typeof(HVACTemplate_Zone_BaseboardHeat_BaseboardHeatingType), "HotWater");
        

[Description("If blank, always on")]
[JsonProperty("baseboard_heating_availability_schedule_name")]
public string BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("baseboard_heating_capacity")]
public string BaseboardHeatingCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this zone " +
    "is served by a separate dedicated outdoor air system (DOAS). Leave field blank i" +
    "f no DOAS serves this zone.")]
[JsonProperty("dedicated_outdoor_air_system_name")]
public string DedicatedOutdoorAirSystemName { get; set; } = "";
        

[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty("outdoor_air_method")]
public HVACTemplate_Zone_BaseboardHeat_OutdoorAirMethod OutdoorAirMethod { get; set; } = (HVACTemplate_Zone_BaseboardHeat_OutdoorAirMethod)Enum.Parse(typeof(HVACTemplate_Zone_BaseboardHeat_OutdoorAirMethod), "Empty");
        

[Description("Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air " +
    "Method is Flow/Person, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_person")]
public System.Nullable<float> OutdoorAirFlowRatePerPerson { get; set; } = (System.Nullable<float>)Single.Parse("0.00944", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public System.Nullable<float> OutdoorAirFlowRatePerZoneFloorArea { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone")]
public System.Nullable<float> OutdoorAirFlowRatePerZone { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty("design_specification_outdoor_air_object_name")]
public string DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        

[Description("This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
    }
    
    public enum HVACTemplate_Zone_BaseboardHeat_BaseboardHeatingType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
    }
    
    public enum HVACTemplate_Zone_BaseboardHeat_OutdoorAirMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    [Description("4 pipe fan coil unit with optional outdoor air.")]
    [JsonObject("HVACTemplate:Zone:FanCoil")]
    public class HVACTemplate_Zone_FanCoil : BHoMObject, IEnergyPlusClass
    {
        

[Description("Zone name must match a building zone name")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed " +
    "that standard thermostat objects have been defined for this zone.")]
[JsonProperty("template_thermostat_name")]
public string TemplateThermostatName { get; set; } = "";
        

[Description("This field may be set to \"autosize\". If a value is entered, it will be multiplied" +
    " by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty("supply_air_maximum_flow_rate")]
public string SupplyAirMaximumFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_heating_sizing_factor")]
public System.Nullable<float> ZoneHeatingSizingFactor { get; set; } = null;
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_cooling_sizing_factor")]
public System.Nullable<float> ZoneCoolingSizingFactor { get; set; } = null;
        

[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty("outdoor_air_method")]
public HVACTemplate_Zone_FanCoil_OutdoorAirMethod OutdoorAirMethod { get; set; } = (HVACTemplate_Zone_FanCoil_OutdoorAirMethod)Enum.Parse(typeof(HVACTemplate_Zone_FanCoil_OutdoorAirMethod), "Empty");
        

[Description("Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air " +
    "Method is Flow/Person, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_person")]
public System.Nullable<float> OutdoorAirFlowRatePerPerson { get; set; } = (System.Nullable<float>)Single.Parse("0.00944", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public System.Nullable<float> OutdoorAirFlowRatePerZoneFloorArea { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone")]
public System.Nullable<float> OutdoorAirFlowRatePerZone { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("If blank, always on")]
[JsonProperty("system_availability_schedule_name")]
public string SystemAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("supply_fan_total_efficiency")]
public System.Nullable<float> SupplyFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_delta_pressure")]
public System.Nullable<float> SupplyFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("75", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_motor_efficiency")]
public System.Nullable<float> SupplyFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_motor_in_air_stream_fraction")]
public System.Nullable<float> SupplyFanMotorInAirStreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("cooling_coil_type")]
public HVACTemplate_Zone_FanCoil_CoolingCoilType CoolingCoilType { get; set; } = (HVACTemplate_Zone_FanCoil_CoolingCoilType)Enum.Parse(typeof(HVACTemplate_Zone_FanCoil_CoolingCoilType), "ChilledWater");
        

[Description("If blank, always on")]
[JsonProperty("cooling_coil_availability_schedule_name")]
public string CoolingCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Used for sizing when Zone Cooling Design Supply Air Temperature Input Method = Su" +
    "pplyAirTemperature")]
[JsonProperty("cooling_coil_design_setpoint")]
public System.Nullable<float> CoolingCoilDesignSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("14", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_coil_type")]
public HVACTemplate_Zone_FanCoil_HeatingCoilType HeatingCoilType { get; set; } = (HVACTemplate_Zone_FanCoil_HeatingCoilType)Enum.Parse(typeof(HVACTemplate_Zone_FanCoil_HeatingCoilType), "HotWater");
        

[Description("If blank, always on")]
[JsonProperty("heating_coil_availability_schedule_name")]
public string HeatingCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Used for sizing when Zone Heating Design Supply Air Temperature Input Method = Su" +
    "pplyAirTemperature")]
[JsonProperty("heating_coil_design_setpoint")]
public System.Nullable<float> HeatingCoilDesignSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[Description("Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this zone " +
    "is served by a separate dedicated outdoor air system (DOAS). Leave field blank i" +
    "f no DOAS serves this zone.")]
[JsonProperty("dedicated_outdoor_air_system_name")]
public string DedicatedOutdoorAirSystemName { get; set; } = "";
        

[Description("SupplyAirTemperature = use the value from Cooling Coil Design Setpoint (above) Te" +
    "mperatureDifference = use the value from Zone Cooling Design Supply Air Temperat" +
    "ure Difference")]
[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_FanCoil_ZoneCoolingDesignSupplyAirTemperatureInputMethod ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_FanCoil_ZoneCoolingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_FanCoil_ZoneCoolingDesignSupplyAirTemperatureInputMethod), "SupplyAirTemperature");
        

[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("11.11", CultureInfo.InvariantCulture);
        

[Description("SupplyAirTemperature = use the value from Heating Coil Design Setpoint (above) Te" +
    "mperatureDifference = use the value from Zone Heating Design Supply Air Temperat" +
    "ure Difference")]
[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_FanCoil_ZoneHeatingDesignSupplyAirTemperatureInputMethod ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_FanCoil_ZoneHeatingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_FanCoil_ZoneHeatingDesignSupplyAirTemperatureInputMethod), "SupplyAirTemperature");
        

[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[Description("This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty("design_specification_outdoor_air_object_name")]
public string DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        

[Description("This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
        

[Description("If this field is left blank, it will default to CyclingFan if a Dedicated Outdoor" +
    " Air System is specified (see above), otherwise it will default to ConstantFanVa" +
    "riableFlow.")]
[JsonProperty("capacity_control_method")]
public HVACTemplate_Zone_FanCoil_CapacityControlMethod CapacityControlMethod { get; set; } = (HVACTemplate_Zone_FanCoil_CapacityControlMethod)Enum.Parse(typeof(HVACTemplate_Zone_FanCoil_CapacityControlMethod), "ASHRAE90VariableFan");
        

[JsonProperty("low_speed_supply_air_flow_ratio")]
public System.Nullable<float> LowSpeedSupplyAirFlowRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.33", CultureInfo.InvariantCulture);
        

[Description("Medium Speed Supply Air Flow Ratio should be greater than Low Speed Supply Air Fl" +
    "ow Ratio")]
[JsonProperty("medium_speed_supply_air_flow_ratio")]
public System.Nullable<float> MediumSpeedSupplyAirFlowRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.66", CultureInfo.InvariantCulture);
        

[Description("Value of schedule multiplies maximum outdoor air flow rate This schedule is ignor" +
    "ed if this zone is served by an HVACTemplate dedicated outdoor air system.")]
[JsonProperty("outdoor_air_schedule_name")]
public string OutdoorAirScheduleName { get; set; } = "";
        

[JsonProperty("baseboard_heating_type")]
public HVACTemplate_Zone_FanCoil_BaseboardHeatingType BaseboardHeatingType { get; set; } = (HVACTemplate_Zone_FanCoil_BaseboardHeatingType)Enum.Parse(typeof(HVACTemplate_Zone_FanCoil_BaseboardHeatingType), "None");
        

[Description("If blank, always on")]
[JsonProperty("baseboard_heating_availability_schedule_name")]
public string BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("baseboard_heating_capacity")]
public string BaseboardHeatingCapacity { get; set; } = (System.String)"Autosize";
    }
    
    public enum HVACTemplate_Zone_FanCoil_OutdoorAirMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum HVACTemplate_Zone_FanCoil_CoolingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ChilledWater")]
        ChilledWater = 1,
        
        [JsonProperty("ChilledWaterDetailedFlatModel")]
        ChilledWaterDetailedFlatModel = 2,
        
        [JsonProperty("HeatExchangerAssistedChilledWater")]
        HeatExchangerAssistedChilledWater = 3,
    }
    
    public enum HVACTemplate_Zone_FanCoil_HeatingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
    }
    
    public enum HVACTemplate_Zone_FanCoil_ZoneCoolingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum HVACTemplate_Zone_FanCoil_ZoneHeatingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum HVACTemplate_Zone_FanCoil_CapacityControlMethod
    {
        
        [JsonProperty("ASHRAE90VariableFan")]
        ASHRAE90VariableFan = 0,
        
        [JsonProperty("ConstantFanVariableFlow")]
        ConstantFanVariableFlow = 1,
        
        [JsonProperty("CyclingFan")]
        CyclingFan = 2,
        
        [JsonProperty("MultiSpeedFan")]
        MultiSpeedFan = 3,
        
        [JsonProperty("VariableFanConstantFlow")]
        VariableFanConstantFlow = 4,
        
        [JsonProperty("VariableFanVariableFlow")]
        VariableFanVariableFlow = 5,
    }
    
    public enum HVACTemplate_Zone_FanCoil_BaseboardHeatingType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    [Description("Packaged Terminal Air Conditioner")]
    [JsonObject("HVACTemplate:Zone:PTAC")]
    public class HVACTemplate_Zone_PTAC : BHoMObject, IEnergyPlusClass
    {
        

[Description("Zone name must match a building zone name")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed " +
    "that standard thermostat objects have been defined for this zone.")]
[JsonProperty("template_thermostat_name")]
public string TemplateThermostatName { get; set; } = "";
        

[Description("Supply air flow rate during cooling operation This field may be set to \"autosize\"" +
    ". If a value is entered, it will be multiplied by the Supply Air Sizing Factor a" +
    "nd by zone multipliers.")]
[JsonProperty("cooling_supply_air_flow_rate")]
public string CoolingSupplyAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("Supply air flow rate during heating operation This field may be set to \"autosize\"" +
    ". If a value is entered, it will be multiplied by the Supply Air Sizing Factor a" +
    "nd by zone multipliers.")]
[JsonProperty("heating_supply_air_flow_rate")]
public string HeatingSupplyAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description(@"Supply air flow rate when no cooling or heating is needed Only used when heat pump fan operating mode is continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used. A value entered in this field will *not* be multiplied by the sizing factor or by zone multipliers. It is best to autosize or leave blank when using zone multipliers.")]
[JsonProperty("no_load_supply_air_flow_rate")]
public string NoLoadSupplyAirFlowRate { get; set; } = "";
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_heating_sizing_factor")]
public System.Nullable<float> ZoneHeatingSizingFactor { get; set; } = null;
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_cooling_sizing_factor")]
public System.Nullable<float> ZoneCoolingSizingFactor { get; set; } = null;
        

[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty("outdoor_air_method")]
public HVACTemplate_Zone_PTAC_OutdoorAirMethod OutdoorAirMethod { get; set; } = (HVACTemplate_Zone_PTAC_OutdoorAirMethod)Enum.Parse(typeof(HVACTemplate_Zone_PTAC_OutdoorAirMethod), "Empty");
        

[Description("Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air " +
    "Method is Flow/Person, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_person")]
public System.Nullable<float> OutdoorAirFlowRatePerPerson { get; set; } = (System.Nullable<float>)Single.Parse("0.00944", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public System.Nullable<float> OutdoorAirFlowRatePerZoneFloorArea { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone")]
public System.Nullable<float> OutdoorAirFlowRatePerZone { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("If blank, always on")]
[JsonProperty("system_availability_schedule_name")]
public string SystemAvailabilityScheduleName { get; set; } = "";
        

[Description("Refers to a schedule to specify unitary supply fan operating mode. Schedule Name " +
    "values of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous" +
    " fan (on) If this field is left blank, a schedule of always zero (cycling fan) w" +
    "ill be used.")]
[JsonProperty("supply_fan_operating_mode_schedule_name")]
public string SupplyFanOperatingModeScheduleName { get; set; } = "";
        

[JsonProperty("supply_fan_placement")]
public HVACTemplate_Zone_PTAC_SupplyFanPlacement SupplyFanPlacement { get; set; } = (HVACTemplate_Zone_PTAC_SupplyFanPlacement)Enum.Parse(typeof(HVACTemplate_Zone_PTAC_SupplyFanPlacement), "DrawThrough");
        

[JsonProperty("supply_fan_total_efficiency")]
public System.Nullable<float> SupplyFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_delta_pressure")]
public System.Nullable<float> SupplyFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("75", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_motor_efficiency")]
public System.Nullable<float> SupplyFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("cooling_coil_type")]
public HVACTemplate_Zone_PTAC_CoolingCoilType CoolingCoilType { get; set; } = (HVACTemplate_Zone_PTAC_CoolingCoilType)Enum.Parse(typeof(HVACTemplate_Zone_PTAC_CoolingCoilType), "SingleSpeedDX");
        

[Description("If blank, always on")]
[JsonProperty("cooling_coil_availability_schedule_name")]
public string CoolingCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat Ratin" +
    "g point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and a" +
    "ir entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty("cooling_coil_gross_rated_total_capacity")]
public string CoolingCoilGrossRatedTotalCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Rated sensible heat ratio (gross sensible capacity/gross total capacity) Sensible" +
    " and total capacities do not include effect of supply fan heat")]
[JsonProperty("cooling_coil_gross_rated_sensible_heat_ratio")]
public string CoolingCoilGrossRatedSensibleHeatRatio { get; set; } = (System.String)"Autosize";
        

[Description("Gross cooling capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty("cooling_coil_gross_rated_cooling_cop")]
public System.Nullable<float> CoolingCoilGrossRatedCoolingCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_coil_type")]
public HVACTemplate_Zone_PTAC_HeatingCoilType HeatingCoilType { get; set; } = (HVACTemplate_Zone_PTAC_HeatingCoilType)Enum.Parse(typeof(HVACTemplate_Zone_PTAC_HeatingCoilType), "Electric");
        

[Description("If blank, always on")]
[JsonProperty("heating_coil_availability_schedule_name")]
public string HeatingCoilAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("heating_coil_capacity")]
public string HeatingCoilCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Applies only if Heating Coil Type is Gas")]
[JsonProperty("gas_heating_coil_efficiency")]
public System.Nullable<float> GasHeatingCoilEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[Description("Applies only if Heating Coil Type is Gas")]
[JsonProperty("gas_heating_coil_parasitic_electric_load")]
public System.Nullable<float> GasHeatingCoilParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this zone " +
    "is served by a separate dedicated outdoor air system (DOAS). Leave field blank i" +
    "f no DOAS serves this zone.")]
[JsonProperty("dedicated_outdoor_air_system_name")]
public string DedicatedOutdoorAirSystemName { get; set; } = "";
        

[Description("SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperat" +
    "ure TemperatureDifference = use the value from Zone Cooling Design Supply Air Te" +
    "mperature Difference")]
[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_PTAC_ZoneCoolingDesignSupplyAirTemperatureInputMethod ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_PTAC_ZoneCoolingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_PTAC_ZoneCoolingDesignSupplyAirTemperatureInputMethod), "SupplyAirTemperature");
        

[Description("Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_cooling_design_supply_air_temperature")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("14", CultureInfo.InvariantCulture);
        

[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("11.11", CultureInfo.InvariantCulture);
        

[Description("SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperat" +
    "ure TemperatureDifference = use the value from Zone Heating Design Supply Air Te" +
    "mperature Difference")]
[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_PTAC_ZoneHeatingDesignSupplyAirTemperatureInputMethod ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_PTAC_ZoneHeatingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_PTAC_ZoneHeatingDesignSupplyAirTemperatureInputMethod), "SupplyAirTemperature");
        

[Description("Zone Heating Design Supply Air Temperature is only used when Zone Heating Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_heating_design_supply_air_temperature")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[Description("This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty("design_specification_outdoor_air_object_name")]
public string DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        

[Description("This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
        

[JsonProperty("baseboard_heating_type")]
public HVACTemplate_Zone_PTAC_BaseboardHeatingType BaseboardHeatingType { get; set; } = (HVACTemplate_Zone_PTAC_BaseboardHeatingType)Enum.Parse(typeof(HVACTemplate_Zone_PTAC_BaseboardHeatingType), "None");
        

[Description("If blank, always on")]
[JsonProperty("baseboard_heating_availability_schedule_name")]
public string BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("baseboard_heating_capacity")]
public string BaseboardHeatingCapacity { get; set; } = (System.String)"Autosize";
        

[JsonProperty("capacity_control_method")]
public HVACTemplate_Zone_PTAC_CapacityControlMethod CapacityControlMethod { get; set; } = (HVACTemplate_Zone_PTAC_CapacityControlMethod)Enum.Parse(typeof(HVACTemplate_Zone_PTAC_CapacityControlMethod), "None");
    }
    
    public enum HVACTemplate_Zone_PTAC_OutdoorAirMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum HVACTemplate_Zone_PTAC_SupplyFanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum HVACTemplate_Zone_PTAC_CoolingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SingleSpeedDX")]
        SingleSpeedDX = 1,
    }
    
    public enum HVACTemplate_Zone_PTAC_HeatingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
    }
    
    public enum HVACTemplate_Zone_PTAC_ZoneCoolingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum HVACTemplate_Zone_PTAC_ZoneHeatingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum HVACTemplate_Zone_PTAC_BaseboardHeatingType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum HVACTemplate_Zone_PTAC_CapacityControlMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("SingleZoneVAV")]
        SingleZoneVAV = 2,
    }
    
    [Description("Packaged Terminal Heat Pump")]
    [JsonObject("HVACTemplate:Zone:PTHP")]
    public class HVACTemplate_Zone_PTHP : BHoMObject, IEnergyPlusClass
    {
        

[Description("Zone name must match a building zone name")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed " +
    "that standard thermostat objects have been defined for this zone.")]
[JsonProperty("template_thermostat_name")]
public string TemplateThermostatName { get; set; } = "";
        

[Description("Supply air flow rate during cooling operation This field may be set to \"autosize\"" +
    ". If a value is entered, it will be multiplied by the Supply Air Sizing Factor a" +
    "nd by zone multipliers.")]
[JsonProperty("cooling_supply_air_flow_rate")]
public string CoolingSupplyAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("Supply air flow rate during heating operation This field may be set to \"autosize\"" +
    ". If a value is entered, it will be multiplied by the Supply Air Sizing Factor a" +
    "nd by zone multipliers.")]
[JsonProperty("heating_supply_air_flow_rate")]
public string HeatingSupplyAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description(@"Supply air flow rate when no cooling or heating is needed Only used when heat pump fan operating mode is continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used. A value entered in this field will *not* be multiplied by the sizing factor or by zone multipliers. It is best to autosize or leave blank when using zone multipliers.")]
[JsonProperty("no_load_supply_air_flow_rate")]
public string NoLoadSupplyAirFlowRate { get; set; } = "";
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_heating_sizing_factor")]
public System.Nullable<float> ZoneHeatingSizingFactor { get; set; } = null;
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_cooling_sizing_factor")]
public System.Nullable<float> ZoneCoolingSizingFactor { get; set; } = null;
        

[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty("outdoor_air_method")]
public HVACTemplate_Zone_PTHP_OutdoorAirMethod OutdoorAirMethod { get; set; } = (HVACTemplate_Zone_PTHP_OutdoorAirMethod)Enum.Parse(typeof(HVACTemplate_Zone_PTHP_OutdoorAirMethod), "Empty");
        

[Description("Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air " +
    "Method is Flow/Person, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_person")]
public System.Nullable<float> OutdoorAirFlowRatePerPerson { get; set; } = (System.Nullable<float>)Single.Parse("0.00944", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public System.Nullable<float> OutdoorAirFlowRatePerZoneFloorArea { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone")]
public System.Nullable<float> OutdoorAirFlowRatePerZone { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("If blank, always on")]
[JsonProperty("system_availability_schedule_name")]
public string SystemAvailabilityScheduleName { get; set; } = "";
        

[Description("Refers to a schedule to specify unitary supply fan operating mode. Schedule value" +
    "s of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous fan " +
    "(on) If this field is left blank, a schedule of always zero (cycling fan) will b" +
    "e used.")]
[JsonProperty("supply_fan_operating_mode_schedule_name")]
public string SupplyFanOperatingModeScheduleName { get; set; } = "";
        

[JsonProperty("supply_fan_placement")]
public HVACTemplate_Zone_PTHP_SupplyFanPlacement SupplyFanPlacement { get; set; } = (HVACTemplate_Zone_PTHP_SupplyFanPlacement)Enum.Parse(typeof(HVACTemplate_Zone_PTHP_SupplyFanPlacement), "DrawThrough");
        

[JsonProperty("supply_fan_total_efficiency")]
public System.Nullable<float> SupplyFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_delta_pressure")]
public System.Nullable<float> SupplyFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("75", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_motor_efficiency")]
public System.Nullable<float> SupplyFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("cooling_coil_type")]
public HVACTemplate_Zone_PTHP_CoolingCoilType CoolingCoilType { get; set; } = (HVACTemplate_Zone_PTHP_CoolingCoilType)Enum.Parse(typeof(HVACTemplate_Zone_PTHP_CoolingCoilType), "SingleSpeedDX");
        

[Description("If blank, always on")]
[JsonProperty("cooling_coil_availability_schedule_name")]
public string CoolingCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat Ratin" +
    "g point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and a" +
    "ir entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty("cooling_coil_gross_rated_total_capacity")]
public string CoolingCoilGrossRatedTotalCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Rated sensible heat ratio (gross sensible capacity/gross total capacity) Sensible" +
    " and total capacities do not include effect of supply fan heat")]
[JsonProperty("cooling_coil_gross_rated_sensible_heat_ratio")]
public string CoolingCoilGrossRatedSensibleHeatRatio { get; set; } = (System.String)"Autosize";
        

[Description("Gross cooling capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty("cooling_coil_gross_rated_cop")]
public System.Nullable<float> CoolingCoilGrossRatedCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_pump_heating_coil_type")]
public HVACTemplate_Zone_PTHP_HeatPumpHeatingCoilType HeatPumpHeatingCoilType { get; set; } = (HVACTemplate_Zone_PTHP_HeatPumpHeatingCoilType)Enum.Parse(typeof(HVACTemplate_Zone_PTHP_HeatPumpHeatingCoilType), "SingleSpeedDXHeatPump");
        

[Description("If blank, always on")]
[JsonProperty("heat_pump_heating_coil_availability_schedule_name")]
public string HeatPumpHeatingCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Capacity excluding supply air fan heat Rating point outdoor dry-bulb temp 8.33 C," +
    " outdoor wet-bulb temp 6.11 C Rating point heating coil entering air dry-bulb 21" +
    ".11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty("heat_pump_heating_coil_gross_rated_capacity")]
public string HeatPumpHeatingCoilGrossRatedCapacity { get; set; } = (System.String)"Autosize";
        

[Description(@"Heat Pump Heating Coil Rated Capacity divided by power input to the compressor and outdoor fan, Does not include supply air fan heat or supply air fan electrical energy Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty("heat_pump_heating_coil_gross_rated_cop")]
public System.Nullable<float> HeatPumpHeatingCoilGrossRatedCop { get; set; } = (System.Nullable<float>)Single.Parse("2.75", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_pump_heating_minimum_outdoor_dry_bulb_temperature")]
public System.Nullable<float> HeatPumpHeatingMinimumOutdoorDryBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("-8", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_pump_defrost_maximum_outdoor_dry_bulb_temperature")]
public System.Nullable<float> HeatPumpDefrostMaximumOutdoorDryBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_pump_defrost_strategy")]
public HVACTemplate_Zone_PTHP_HeatPumpDefrostStrategy HeatPumpDefrostStrategy { get; set; } = (HVACTemplate_Zone_PTHP_HeatPumpDefrostStrategy)Enum.Parse(typeof(HVACTemplate_Zone_PTHP_HeatPumpDefrostStrategy), "ReverseCycle");
        

[JsonProperty("heat_pump_defrost_control")]
public HVACTemplate_Zone_PTHP_HeatPumpDefrostControl HeatPumpDefrostControl { get; set; } = (HVACTemplate_Zone_PTHP_HeatPumpDefrostControl)Enum.Parse(typeof(HVACTemplate_Zone_PTHP_HeatPumpDefrostControl), "Timed");
        

[Description("Fraction of time in defrost mode only applicable if Timed defrost control is spec" +
    "ified")]
[JsonProperty("heat_pump_defrost_time_period_fraction")]
public System.Nullable<float> HeatPumpDefrostTimePeriodFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.058333", CultureInfo.InvariantCulture);
        

[JsonProperty("supplemental_heating_coil_type")]
public HVACTemplate_Zone_PTHP_SupplementalHeatingCoilType SupplementalHeatingCoilType { get; set; } = (HVACTemplate_Zone_PTHP_SupplementalHeatingCoilType)Enum.Parse(typeof(HVACTemplate_Zone_PTHP_SupplementalHeatingCoilType), "Electric");
        

[Description("If blank, always on")]
[JsonProperty("supplemental_heating_coil_availability_schedule_name")]
public string SupplementalHeatingCoilAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("supplemental_heating_coil_capacity")]
public string SupplementalHeatingCoilCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Supplemental heater will not operate when outdoor temperature exceeds this value." +
    "")]
[JsonProperty("supplemental_heating_coil_maximum_outdoor_dry_bulb_temperature")]
public System.Nullable<float> SupplementalHeatingCoilMaximumOutdoorDryBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("21", CultureInfo.InvariantCulture);
        

[Description("Applies only if Supplemental Heating Coil Type is Gas")]
[JsonProperty("supplemental_gas_heating_coil_efficiency")]
public System.Nullable<float> SupplementalGasHeatingCoilEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[Description("Applies only if Supplemental Heating Coil Type is Gas")]
[JsonProperty("supplemental_gas_heating_coil_parasitic_electric_load")]
public System.Nullable<float> SupplementalGasHeatingCoilParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this zone " +
    "is served by a separate dedicated outdoor air system (DOAS). Leave field blank i" +
    "f no DOAS serves this zone.")]
[JsonProperty("dedicated_outdoor_air_system_name")]
public string DedicatedOutdoorAirSystemName { get; set; } = "";
        

[Description("SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperat" +
    "ure TemperatureDifference = use the value from Zone Cooling Design Supply Air Te" +
    "mperature Difference")]
[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_PTHP_ZoneCoolingDesignSupplyAirTemperatureInputMethod ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_PTHP_ZoneCoolingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_PTHP_ZoneCoolingDesignSupplyAirTemperatureInputMethod), "SupplyAirTemperature");
        

[Description("Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_cooling_design_supply_air_temperature")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("14", CultureInfo.InvariantCulture);
        

[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("11.11", CultureInfo.InvariantCulture);
        

[Description("SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperat" +
    "ure TemperatureDifference = use the value from Zone Heating Design Supply Air Te" +
    "mperature Difference")]
[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_PTHP_ZoneHeatingDesignSupplyAirTemperatureInputMethod ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_PTHP_ZoneHeatingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_PTHP_ZoneHeatingDesignSupplyAirTemperatureInputMethod), "SupplyAirTemperature");
        

[Description("Zone Heating Design Supply Air Temperature is only used when Zone Heating Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_heating_design_supply_air_temperature")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[Description("This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty("design_specification_outdoor_air_object_name")]
public string DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        

[Description("This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
        

[JsonProperty("baseboard_heating_type")]
public HVACTemplate_Zone_PTHP_BaseboardHeatingType BaseboardHeatingType { get; set; } = (HVACTemplate_Zone_PTHP_BaseboardHeatingType)Enum.Parse(typeof(HVACTemplate_Zone_PTHP_BaseboardHeatingType), "None");
        

[Description("If blank, always on")]
[JsonProperty("baseboard_heating_availability_schedule_name")]
public string BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("baseboard_heating_capacity")]
public string BaseboardHeatingCapacity { get; set; } = (System.String)"Autosize";
        

[JsonProperty("capacity_control_method")]
public HVACTemplate_Zone_PTHP_CapacityControlMethod CapacityControlMethod { get; set; } = (HVACTemplate_Zone_PTHP_CapacityControlMethod)Enum.Parse(typeof(HVACTemplate_Zone_PTHP_CapacityControlMethod), "None");
    }
    
    public enum HVACTemplate_Zone_PTHP_OutdoorAirMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum HVACTemplate_Zone_PTHP_SupplyFanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum HVACTemplate_Zone_PTHP_CoolingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SingleSpeedDX")]
        SingleSpeedDX = 1,
    }
    
    public enum HVACTemplate_Zone_PTHP_HeatPumpHeatingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SingleSpeedDXHeatPump")]
        SingleSpeedDXHeatPump = 1,
    }
    
    public enum HVACTemplate_Zone_PTHP_HeatPumpDefrostStrategy
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Resistive")]
        Resistive = 1,
        
        [JsonProperty("ReverseCycle")]
        ReverseCycle = 2,
    }
    
    public enum HVACTemplate_Zone_PTHP_HeatPumpDefrostControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("OnDemand")]
        OnDemand = 1,
        
        [JsonProperty("Timed")]
        Timed = 2,
    }
    
    public enum HVACTemplate_Zone_PTHP_SupplementalHeatingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
    }
    
    public enum HVACTemplate_Zone_PTHP_ZoneCoolingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum HVACTemplate_Zone_PTHP_ZoneHeatingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum HVACTemplate_Zone_PTHP_BaseboardHeatingType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum HVACTemplate_Zone_PTHP_CapacityControlMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("SingleZoneVAV")]
        SingleZoneVAV = 2,
    }
    
    [Description("Water to Air Heat Pump to be used with HVACTemplate:Plant:MixedWaterLoop")]
    [JsonObject("HVACTemplate:Zone:WaterToAirHeatPump")]
    public class HVACTemplate_Zone_WaterToAirHeatPump : BHoMObject, IEnergyPlusClass
    {
        

[Description("Zone name must match a building zone name")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed " +
    "that standard thermostat objects have been defined for this zone.")]
[JsonProperty("template_thermostat_name")]
public string TemplateThermostatName { get; set; } = "";
        

[Description("Supply air flow rate during cooling operation This field may be set to \"autosize\"" +
    ". If a value is entered, it will be multiplied by the Supply Air Sizing Factor a" +
    "nd by zone multipliers.")]
[JsonProperty("cooling_supply_air_flow_rate")]
public string CoolingSupplyAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("Supply air flow rate during heating operation This field may be set to \"autosize\"" +
    ". If a value is entered, it will be multiplied by the Supply Air Sizing Factor a" +
    "nd by zone multipliers.")]
[JsonProperty("heating_supply_air_flow_rate")]
public string HeatingSupplyAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description(@"Supply air flow rate when no cooling or heating is needed Only used when heat pump fan operating mode is continuous. This air flow rate is used when no heating or cooling is required. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used. A value entered in this field will *not* be multiplied by the sizing factor or by zone multipliers. It is best to autosize or leave blank when using zone multipliers.")]
[JsonProperty("no_load_supply_air_flow_rate")]
public string NoLoadSupplyAirFlowRate { get; set; } = "";
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_heating_sizing_factor")]
public System.Nullable<float> ZoneHeatingSizingFactor { get; set; } = null;
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_cooling_sizing_factor")]
public System.Nullable<float> ZoneCoolingSizingFactor { get; set; } = null;
        

[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty("outdoor_air_method")]
public HVACTemplate_Zone_WaterToAirHeatPump_OutdoorAirMethod OutdoorAirMethod { get; set; } = (HVACTemplate_Zone_WaterToAirHeatPump_OutdoorAirMethod)Enum.Parse(typeof(HVACTemplate_Zone_WaterToAirHeatPump_OutdoorAirMethod), "Empty");
        

[Description("Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air " +
    "Method is Flow/Person, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_person")]
public System.Nullable<float> OutdoorAirFlowRatePerPerson { get; set; } = (System.Nullable<float>)Single.Parse("0.00944", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public System.Nullable<float> OutdoorAirFlowRatePerZoneFloorArea { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone")]
public System.Nullable<float> OutdoorAirFlowRatePerZone { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("If blank, always on")]
[JsonProperty("system_availability_schedule_name")]
public string SystemAvailabilityScheduleName { get; set; } = "";
        

[Description("Refers to a schedule to specify unitary supply fan operating mode. Schedule value" +
    "s of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous fan " +
    "(on) If this field is left blank, a schedule of always zero (cycling fan) will b" +
    "e used.")]
[JsonProperty("supply_fan_operating_mode_schedule_name")]
public string SupplyFanOperatingModeScheduleName { get; set; } = "";
        

[JsonProperty("supply_fan_placement")]
public HVACTemplate_Zone_WaterToAirHeatPump_SupplyFanPlacement SupplyFanPlacement { get; set; } = (HVACTemplate_Zone_WaterToAirHeatPump_SupplyFanPlacement)Enum.Parse(typeof(HVACTemplate_Zone_WaterToAirHeatPump_SupplyFanPlacement), "DrawThrough");
        

[JsonProperty("supply_fan_total_efficiency")]
public System.Nullable<float> SupplyFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_delta_pressure")]
public System.Nullable<float> SupplyFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("75", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_motor_efficiency")]
public System.Nullable<float> SupplyFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("cooling_coil_type")]
public HVACTemplate_Zone_WaterToAirHeatPump_CoolingCoilType CoolingCoilType { get; set; } = (HVACTemplate_Zone_WaterToAirHeatPump_CoolingCoilType)Enum.Parse(typeof(HVACTemplate_Zone_WaterToAirHeatPump_CoolingCoilType), "Empty");
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("cooling_coil_gross_rated_total_capacity")]
public string CoolingCoilGrossRatedTotalCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Rated sensible heat ratio (gross sensible capacity/gross total capacity) Sensible" +
    " and total capacities do not include effect of supply fan heat")]
[JsonProperty("cooling_coil_gross_rated_sensible_heat_ratio")]
public string CoolingCoilGrossRatedSensibleHeatRatio { get; set; } = (System.String)"Autosize";
        

[Description("Gross cooling capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply fan heat or supply fan electric power input")]
[JsonProperty("cooling_coil_gross_rated_cop")]
public System.Nullable<float> CoolingCoilGrossRatedCop { get; set; } = (System.Nullable<float>)Single.Parse("3.5", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_pump_heating_coil_type")]
public HVACTemplate_Zone_WaterToAirHeatPump_HeatPumpHeatingCoilType HeatPumpHeatingCoilType { get; set; } = (HVACTemplate_Zone_WaterToAirHeatPump_HeatPumpHeatingCoilType)Enum.Parse(typeof(HVACTemplate_Zone_WaterToAirHeatPump_HeatPumpHeatingCoilType), "Empty");
        

[Description("Capacity excluding supply air fan heat")]
[JsonProperty("heat_pump_heating_coil_gross_rated_capacity")]
public string HeatPumpHeatingCoilGrossRatedCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Heat Pump Heating Coil Rated Capacity divided by power input to the compressor an" +
    "d outdoor fan, does not include supply air fan heat or supply air fan electric p" +
    "ower input")]
[JsonProperty("heat_pump_heating_coil_gross_rated_cop")]
public System.Nullable<float> HeatPumpHeatingCoilGrossRatedCop { get; set; } = (System.Nullable<float>)Single.Parse("4.2", CultureInfo.InvariantCulture);
        

[Description("If blank, always on")]
[JsonProperty("supplemental_heating_coil_availability_schedule_name")]
public string SupplementalHeatingCoilAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("supplemental_heating_coil_capacity")]
public string SupplementalHeatingCoilCapacity { get; set; } = (System.String)"Autosize";
        

[Description("The maximum on-off cycling rate for the compressor Suggested value is 2.5 for a t" +
    "ypical heat pump")]
[JsonProperty("maximum_cycling_rate")]
public System.Nullable<float> MaximumCyclingRate { get; set; } = (System.Nullable<float>)Single.Parse("2.5", CultureInfo.InvariantCulture);
        

[Description("Time constant for the cooling coil\'s capacity to reach steady state after startup" +
    " Suggested value is 60 for a typical heat pump")]
[JsonProperty("heat_pump_time_constant")]
public System.Nullable<float> HeatPumpTimeConstant { get; set; } = (System.Nullable<float>)Single.Parse("60", CultureInfo.InvariantCulture);
        

[Description("The fraction of on-cycle power use to adjust the part load fraction based on the " +
    "off-cycle power consumption due to crankcase heaters, controls, fans, and etc. S" +
    "uggested value is 0.01 for a typical heat pump")]
[JsonProperty("fraction_of_on_cycle_power_use")]
public System.Nullable<float> FractionOfOnCyclePowerUse { get; set; } = (System.Nullable<float>)Single.Parse("0.01", CultureInfo.InvariantCulture);
        

[Description("Programmed time delay for heat pump fan to shut off after compressor cycle off. O" +
    "nly required when fan operating mode is cycling Enter 0 when fan operating mode " +
    "is continuous")]
[JsonProperty("heat_pump_fan_delay_time")]
public System.Nullable<float> HeatPumpFanDelayTime { get; set; } = (System.Nullable<float>)Single.Parse("60", CultureInfo.InvariantCulture);
        

[Description("Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this zone " +
    "is served by a separate dedicated outdoor air system (DOAS). Leave field blank i" +
    "f no DOAS serves this zone.")]
[JsonProperty("dedicated_outdoor_air_system_name")]
public string DedicatedOutdoorAirSystemName { get; set; } = "";
        

[JsonProperty("supplemental_heating_coil_type")]
public HVACTemplate_Zone_WaterToAirHeatPump_SupplementalHeatingCoilType SupplementalHeatingCoilType { get; set; } = (HVACTemplate_Zone_WaterToAirHeatPump_SupplementalHeatingCoilType)Enum.Parse(typeof(HVACTemplate_Zone_WaterToAirHeatPump_SupplementalHeatingCoilType), "Electric");
        

[Description("SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperat" +
    "ure TemperatureDifference = use the value from Zone Cooling Design Supply Air Te" +
    "mperature Difference")]
[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_WaterToAirHeatPump_ZoneCoolingDesignSupplyAirTemperatureInputMethod ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_WaterToAirHeatPump_ZoneCoolingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_WaterToAirHeatPump_ZoneCoolingDesignSupplyAirTemperatureInputMethod), "SupplyAirTemperature");
        

[Description("Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_cooling_design_supply_air_temperature")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("14", CultureInfo.InvariantCulture);
        

[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("11.11", CultureInfo.InvariantCulture);
        

[Description("SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperat" +
    "ure TemperatureDifference = use the value from Zone Heating Design Supply Air Te" +
    "mperature Difference")]
[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_WaterToAirHeatPump_ZoneHeatingDesignSupplyAirTemperatureInputMethod ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_WaterToAirHeatPump_ZoneHeatingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_WaterToAirHeatPump_ZoneHeatingDesignSupplyAirTemperatureInputMethod), "SupplyAirTemperature");
        

[Description("Zone Heating Design Supply Air Temperature is only used when Zone Heating Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_heating_design_supply_air_temperature")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[Description(@"used only when the heat pump coils are of the type WaterToAirHeatPump:EquationFit Constant results in 100% water flow regardless of compressor PLR Cycling results in water flow that matches compressor PLR ConstantOnDemand results in 100% water flow whenever the coil is on, but is 0% whenever the coil has no load")]
[JsonProperty("heat_pump_coil_water_flow_mode")]
public HVACTemplate_Zone_WaterToAirHeatPump_HeatPumpCoilWaterFlowMode HeatPumpCoilWaterFlowMode { get; set; } = (HVACTemplate_Zone_WaterToAirHeatPump_HeatPumpCoilWaterFlowMode)Enum.Parse(typeof(HVACTemplate_Zone_WaterToAirHeatPump_HeatPumpCoilWaterFlowMode), "Cycling");
        

[Description("This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty("design_specification_outdoor_air_object_name")]
public string DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        

[Description("This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
        

[JsonProperty("baseboard_heating_type")]
public HVACTemplate_Zone_WaterToAirHeatPump_BaseboardHeatingType BaseboardHeatingType { get; set; } = (HVACTemplate_Zone_WaterToAirHeatPump_BaseboardHeatingType)Enum.Parse(typeof(HVACTemplate_Zone_WaterToAirHeatPump_BaseboardHeatingType), "None");
        

[Description("If blank, always on")]
[JsonProperty("baseboard_heating_availability_schedule_name")]
public string BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("baseboard_heating_capacity")]
public string BaseboardHeatingCapacity { get; set; } = (System.String)"Autosize";
    }
    
    public enum HVACTemplate_Zone_WaterToAirHeatPump_OutdoorAirMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum HVACTemplate_Zone_WaterToAirHeatPump_SupplyFanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum HVACTemplate_Zone_WaterToAirHeatPump_CoolingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Coil:Cooling:WaterToAirHeatPump:EquationFit")]
        CoilCoolingWaterToAirHeatPumpEquationFit = 1,
    }
    
    public enum HVACTemplate_Zone_WaterToAirHeatPump_HeatPumpHeatingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Coil:Heating:WaterToAirHeatPump:EquationFit")]
        CoilHeatingWaterToAirHeatPumpEquationFit = 1,
    }
    
    public enum HVACTemplate_Zone_WaterToAirHeatPump_SupplementalHeatingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
    }
    
    public enum HVACTemplate_Zone_WaterToAirHeatPump_ZoneCoolingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum HVACTemplate_Zone_WaterToAirHeatPump_ZoneHeatingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum HVACTemplate_Zone_WaterToAirHeatPump_HeatPumpCoilWaterFlowMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Constant")]
        Constant = 1,
        
        [JsonProperty("ConstantOnDemand")]
        ConstantOnDemand = 2,
        
        [JsonProperty("Cycling")]
        Cycling = 3,
    }
    
    public enum HVACTemplate_Zone_WaterToAirHeatPump_BaseboardHeatingType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    [Description("Zone terminal unit with variable refrigerant flow (VRF) DX cooling and heating co" +
        "ils (air-to-air or water-to-air heat pump). The VRF terminal units are served by" +
        " an HVACTemplate:System:VRF system.")]
    [JsonObject("HVACTemplate:Zone:VRF")]
    public class HVACTemplate_Zone_VRF : BHoMObject, IEnergyPlusClass
    {
        

[Description("Zone name must match a building zone name")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Name of a HVACTemplate:System:VRF object serving this zone")]
[JsonProperty("template_vrf_system_name")]
public string TemplateVrfSystemName { get; set; } = "";
        

[Description("Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed " +
    "that standard thermostat objects have been defined for this zone.")]
[JsonProperty("template_thermostat_name")]
public string TemplateThermostatName { get; set; } = "";
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_heating_sizing_factor")]
public System.Nullable<float> ZoneHeatingSizingFactor { get; set; } = null;
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_cooling_sizing_factor")]
public System.Nullable<float> ZoneCoolingSizingFactor { get; set; } = null;
        

[Description(@"If this terminal unit's heating coil is autosized, the heating capacity is sized to be equal to the cooling capacity multiplied by this sizing ratio. This input applies to the terminal unit heating coil and overrides the sizing ratio entered in the HVACTemplate:System:VRF object.")]
[JsonProperty("rated_total_heating_capacity_sizing_ratio")]
public System.Nullable<float> RatedTotalHeatingCapacitySizingRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This field may be set to \"autosize\". If a value is entered, it will be multiplied" +
    " by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty("cooling_supply_air_flow_rate")]
public string CoolingSupplyAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("This flow rate is used when the terminal is not cooling and the previous mode was" +
    " cooling. This field may be set to \"autosize\". If a value is entered, it will be" +
    " multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty("no_cooling_supply_air_flow_rate")]
public string NoCoolingSupplyAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("This field may be set to \"autosize\". If a value is entered, it will be multiplied" +
    " by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty("heating_supply_air_flow_rate")]
public string HeatingSupplyAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("This flow rate is used when the terminal is not heating and the previous mode was" +
    " heating. This field may be set to \"autosize\". If a value is entered, it will be" +
    " multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty("no_heating_supply_air_flow_rate")]
public string NoHeatingSupplyAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("If this field is set to autosize it will be sized based on the outdoor air inputs" +
    " below, unless a dedicated outdoor air system is specified for this zone and the" +
    "n it will be set to zero.")]
[JsonProperty("cooling_outdoor_air_flow_rate")]
public string CoolingOutdoorAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("If this field is set to autosize it will be sized based on the outdoor air inputs" +
    " below, unless a dedicated outdoor air system is specified for this zone and the" +
    "n it will be set to zero.")]
[JsonProperty("heating_outdoor_air_flow_rate")]
public string HeatingOutdoorAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("If this field is set to autosize it will be sized based on the outdoor air inputs" +
    " below, unless a dedicated outdoor air system is specified for this zone and the" +
    "n it will be set to zero.")]
[JsonProperty("no_load_outdoor_air_flow_rate")]
public string NoLoadOutdoorAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty("outdoor_air_method")]
public HVACTemplate_Zone_VRF_OutdoorAirMethod OutdoorAirMethod { get; set; } = (HVACTemplate_Zone_VRF_OutdoorAirMethod)Enum.Parse(typeof(HVACTemplate_Zone_VRF_OutdoorAirMethod), "Empty");
        

[Description("Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air " +
    "Method is Flow/Person, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_person")]
public System.Nullable<float> OutdoorAirFlowRatePerPerson { get; set; } = (System.Nullable<float>)Single.Parse("0.00944", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public System.Nullable<float> OutdoorAirFlowRatePerZoneFloorArea { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone")]
public System.Nullable<float> OutdoorAirFlowRatePerZone { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty("design_specification_outdoor_air_object_name")]
public string DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        

[Description("This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
        

[Description("If blank, always on")]
[JsonProperty("system_availability_schedule_name")]
public string SystemAvailabilityScheduleName { get; set; } = "";
        

[Description("Refers to a schedule to specify unitary supply fan operating mode. Schedule value" +
    "s of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous fan " +
    "(on) If this field is left blank, a schedule of always zero (cycling fan) will b" +
    "e used.")]
[JsonProperty("supply_fan_operating_mode_schedule_name")]
public string SupplyFanOperatingModeScheduleName { get; set; } = "";
        

[Description("Select fan placement as either blow through or draw through.")]
[JsonProperty("supply_air_fan_placement")]
public HVACTemplate_Zone_VRF_SupplyAirFanPlacement SupplyAirFanPlacement { get; set; } = (HVACTemplate_Zone_VRF_SupplyAirFanPlacement)Enum.Parse(typeof(HVACTemplate_Zone_VRF_SupplyAirFanPlacement), "BlowThrough");
        

[JsonProperty("supply_fan_total_efficiency")]
public System.Nullable<float> SupplyFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_delta_pressure")]
public System.Nullable<float> SupplyFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("75", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_motor_efficiency")]
public System.Nullable<float> SupplyFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("cooling_coil_type")]
public HVACTemplate_Zone_VRF_CoolingCoilType CoolingCoilType { get; set; } = (HVACTemplate_Zone_VRF_CoolingCoilType)Enum.Parse(typeof(HVACTemplate_Zone_VRF_CoolingCoilType), "VariableRefrigerantFlowDX");
        

[Description("If blank, always on")]
[JsonProperty("cooling_coil_availability_schedule_name")]
public string CoolingCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat Ratin" +
    "g point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and a" +
    "ir entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty("cooling_coil_gross_rated_total_capacity")]
public string CoolingCoilGrossRatedTotalCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Rated sensible heat ratio (gross sensible capacity/gross total capacity) Sensible" +
    " and total capacities do not include effect of supply fan heat")]
[JsonProperty("cooling_coil_gross_rated_sensible_heat_ratio")]
public string CoolingCoilGrossRatedSensibleHeatRatio { get; set; } = (System.String)"Autosize";
        

[JsonProperty("heat_pump_heating_coil_type")]
public HVACTemplate_Zone_VRF_HeatPumpHeatingCoilType HeatPumpHeatingCoilType { get; set; } = (HVACTemplate_Zone_VRF_HeatPumpHeatingCoilType)Enum.Parse(typeof(HVACTemplate_Zone_VRF_HeatPumpHeatingCoilType), "VariableRefrigerantFlowDX");
        

[Description("If blank, always on")]
[JsonProperty("heat_pump_heating_coil_availability_schedule_name")]
public string HeatPumpHeatingCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Capacity excluding supply air fan heat Rating point outdoor dry-bulb temp 8.33 C," +
    " outdoor wet-bulb temp 6.11 C Rating point heating coil entering air dry-bulb 21" +
    ".11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty("heat_pump_heating_coil_gross_rated_capacity")]
public string HeatPumpHeatingCoilGrossRatedCapacity { get; set; } = (System.String)"Autosize";
        

[JsonProperty("zone_terminal_unit_on_parasitic_electric_energy_use")]
public System.Nullable<float> ZoneTerminalUnitOnParasiticElectricEnergyUse { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("zone_terminal_unit_off_parasitic_electric_energy_use")]
public System.Nullable<float> ZoneTerminalUnitOffParasiticElectricEnergyUse { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this zone " +
    "is served by a separate dedicated outdoor air system (DOAS). Leave field blank i" +
    "f no DOAS serves this zone.")]
[JsonProperty("dedicated_outdoor_air_system_name")]
public string DedicatedOutdoorAirSystemName { get; set; } = "";
        

[Description("SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperat" +
    "ure TemperatureDifference = use the value from Zone Cooling Design Supply Air Te" +
    "mperature Difference")]
[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_VRF_ZoneCoolingDesignSupplyAirTemperatureInputMethod ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_VRF_ZoneCoolingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_VRF_ZoneCoolingDesignSupplyAirTemperatureInputMethod), "SupplyAirTemperature");
        

[Description("Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_cooling_design_supply_air_temperature")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("14", CultureInfo.InvariantCulture);
        

[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("11.11", CultureInfo.InvariantCulture);
        

[Description("SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperat" +
    "ure TemperatureDifference = use the value from Zone Heating Design Supply Air Te" +
    "mperature Difference")]
[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_VRF_ZoneHeatingDesignSupplyAirTemperatureInputMethod ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_VRF_ZoneHeatingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_VRF_ZoneHeatingDesignSupplyAirTemperatureInputMethod), "SupplyAirTemperature");
        

[Description("Zone Heating Design Supply Air Temperature is only used when Zone Heating Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_heating_design_supply_air_temperature")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[JsonProperty("baseboard_heating_type")]
public HVACTemplate_Zone_VRF_BaseboardHeatingType BaseboardHeatingType { get; set; } = (HVACTemplate_Zone_VRF_BaseboardHeatingType)Enum.Parse(typeof(HVACTemplate_Zone_VRF_BaseboardHeatingType), "None");
        

[Description("If blank, always on")]
[JsonProperty("baseboard_heating_availability_schedule_name")]
public string BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("baseboard_heating_capacity")]
public string BaseboardHeatingCapacity { get; set; } = (System.String)"Autosize";
    }
    
    public enum HVACTemplate_Zone_VRF_OutdoorAirMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum HVACTemplate_Zone_VRF_SupplyAirFanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum HVACTemplate_Zone_VRF_CoolingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("VariableRefrigerantFlowDX")]
        VariableRefrigerantFlowDX = 2,
    }
    
    public enum HVACTemplate_Zone_VRF_HeatPumpHeatingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("VariableRefrigerantFlowDX")]
        VariableRefrigerantFlowDX = 2,
    }
    
    public enum HVACTemplate_Zone_VRF_ZoneCoolingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum HVACTemplate_Zone_VRF_ZoneHeatingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum HVACTemplate_Zone_VRF_BaseboardHeatingType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    [Description("Zone terminal unit, constant volume, no controls.")]
    [JsonObject("HVACTemplate:Zone:Unitary")]
    public class HVACTemplate_Zone_Unitary : BHoMObject, IEnergyPlusClass
    {
        

[Description("Zone name must match a building zone name")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Enter the name of an HVACTemplate:System:Unitary, HVACTemplate:System:UnitaryHeat" +
    "Pump:AirTtoAir, or HVACTemplate:System:UnitarySystem object serving this zone.")]
[JsonProperty("template_unitary_system_name")]
public string TemplateUnitarySystemName { get; set; } = "";
        

[Description("Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed " +
    "that standard thermostat objects have been defined for this zone.")]
[JsonProperty("template_thermostat_name")]
public string TemplateThermostatName { get; set; } = "";
        

[Description("This field may be set to \"autosize\". If a value is entered, it will be multiplied" +
    " by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty("supply_air_maximum_flow_rate")]
public string SupplyAirMaximumFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_heating_sizing_factor")]
public System.Nullable<float> ZoneHeatingSizingFactor { get; set; } = null;
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_cooling_sizing_factor")]
public System.Nullable<float> ZoneCoolingSizingFactor { get; set; } = null;
        

[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty("outdoor_air_method")]
public HVACTemplate_Zone_Unitary_OutdoorAirMethod OutdoorAirMethod { get; set; } = (HVACTemplate_Zone_Unitary_OutdoorAirMethod)Enum.Parse(typeof(HVACTemplate_Zone_Unitary_OutdoorAirMethod), "Empty");
        

[Description("Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air " +
    "Method is Flow/Person, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_person")]
public System.Nullable<float> OutdoorAirFlowRatePerPerson { get; set; } = (System.Nullable<float>)Single.Parse("0.00944", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public System.Nullable<float> OutdoorAirFlowRatePerZoneFloorArea { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone")]
public System.Nullable<float> OutdoorAirFlowRatePerZone { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Plenum zone name. Supply plenum runs through only this zone. Blank if none.")]
[JsonProperty("supply_plenum_name")]
public string SupplyPlenumName { get; set; } = "";
        

[Description("Plenum zone name. Return plenum runs through only this zone. Blank if none.")]
[JsonProperty("return_plenum_name")]
public string ReturnPlenumName { get; set; } = "";
        

[JsonProperty("baseboard_heating_type")]
public HVACTemplate_Zone_Unitary_BaseboardHeatingType BaseboardHeatingType { get; set; } = (HVACTemplate_Zone_Unitary_BaseboardHeatingType)Enum.Parse(typeof(HVACTemplate_Zone_Unitary_BaseboardHeatingType), "None");
        

[Description("If blank, always on")]
[JsonProperty("baseboard_heating_availability_schedule_name")]
public string BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("baseboard_heating_capacity")]
public string BaseboardHeatingCapacity { get; set; } = (System.String)"Autosize";
        

[Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:Unitary or HVACTemplate:System:UnitaryHeatPump:AirToAir Cooling Design Supply Air Temperature")]
[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_Unitary_ZoneCoolingDesignSupplyAirTemperatureInputMethod ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_Unitary_ZoneCoolingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_Unitary_ZoneCoolingDesignSupplyAirTemperatureInputMethod), "SystemSupplyAirTemperature");
        

[Description("Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_cooling_design_supply_air_temperature")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("12.8", CultureInfo.InvariantCulture);
        

[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("11.11", CultureInfo.InvariantCulture);
        

[Description(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:Unitary or HVACTemplate:System:UnitaryHeatPump:AirToAir Heating Design Supply Air Temperature")]
[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_Unitary_ZoneHeatingDesignSupplyAirTemperatureInputMethod ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_Unitary_ZoneHeatingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_Unitary_ZoneHeatingDesignSupplyAirTemperatureInputMethod), "SystemSupplyAirTemperature");
        

[Description("Zone Heating Design Supply Air Temperature is only used when Zone Heating Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_heating_design_supply_air_temperature")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[Description("This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty("design_specification_outdoor_air_object_name")]
public string DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        

[Description("This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
    }
    
    public enum HVACTemplate_Zone_Unitary_OutdoorAirMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum HVACTemplate_Zone_Unitary_BaseboardHeatingType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum HVACTemplate_Zone_Unitary_ZoneCoolingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("SystemSupplyAirTemperature")]
        SystemSupplyAirTemperature = 2,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 3,
    }
    
    public enum HVACTemplate_Zone_Unitary_ZoneHeatingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("SystemSupplyAirTemperature")]
        SystemSupplyAirTemperature = 2,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 3,
    }
    
    [Description("Zone terminal unit, variable volume, reheat optional. For heating, this unit acti" +
        "vates reheat coil first, then increases airflow (if reverse action specified).")]
    [JsonObject("HVACTemplate:Zone:VAV")]
    public class HVACTemplate_Zone_VAV : BHoMObject, IEnergyPlusClass
    {
        

[Description("Zone name must match a building zone name")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Name of a HVACTemplate:System:VAV or HVACTemplate:System:PackagedVAV object servi" +
    "ng this zone")]
[JsonProperty("template_vav_system_name")]
public string TemplateVavSystemName { get; set; } = "";
        

[Description("Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed " +
    "that standard thermostat objects have been defined for this zone.")]
[JsonProperty("template_thermostat_name")]
public string TemplateThermostatName { get; set; } = "";
        

[Description("This field may be set to \"autosize\". If a value is entered, it will be multiplied" +
    " by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty("supply_air_maximum_flow_rate")]
public string SupplyAirMaximumFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_heating_sizing_factor")]
public System.Nullable<float> ZoneHeatingSizingFactor { get; set; } = null;
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_cooling_sizing_factor")]
public System.Nullable<float> ZoneCoolingSizingFactor { get; set; } = null;
        

[Description("Constant = Constant Minimum Air Flow Fraction (a fraction of Maximum Air Flow Rat" +
    "e) FixedFlowRate = Fixed Minimum Air Flow Rate (a fixed minimum air volume flow " +
    "rate) Scheduled = Scheduled Minimum Air Flow Fraction (a fraction of Maximum Air" +
    " Flow")]
[JsonProperty("zone_minimum_air_flow_input_method")]
public HVACTemplate_Zone_VAV_ZoneMinimumAirFlowInputMethod ZoneMinimumAirFlowInputMethod { get; set; } = (HVACTemplate_Zone_VAV_ZoneMinimumAirFlowInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_VAV_ZoneMinimumAirFlowInputMethod), "Constant");
        

[Description(@"This field is used if the field Zone Minimum Air Flow Input Method is Constant If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional. If a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the following field are entered, the larger result is used.")]
[JsonProperty("constant_minimum_air_flow_fraction")]
public System.Nullable<float> ConstantMinimumAirFlowFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description(@"This field is used if the field Zone Minimum Air Flow Input Method is FixedFlowRate. If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional. If a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the previous field are entered, the larger result is used.")]
[JsonProperty("fixed_minimum_air_flow_rate")]
public System.Nullable<float> FixedMinimumAirFlowRate { get; set; } = null;
        

[Description(@"This field is used if the field Zone Minimum Air Flow Input Method is Scheduled Schedule values are fractions, 0.0 to 1.0. If the field Constant Minimum Air Flow Fraction is blank, then the average of the minimum and maximum schedule values is used for sizing normal-action reheat coils.")]
[JsonProperty("minimum_air_flow_fraction_schedule_name")]
public string MinimumAirFlowFractionScheduleName { get; set; } = "";
        

[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty("outdoor_air_method")]
public HVACTemplate_Zone_VAV_OutdoorAirMethod OutdoorAirMethod { get; set; } = (HVACTemplate_Zone_VAV_OutdoorAirMethod)Enum.Parse(typeof(HVACTemplate_Zone_VAV_OutdoorAirMethod), "Empty");
        

[Description("Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air " +
    "Method is Flow/Person, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_person")]
public System.Nullable<float> OutdoorAirFlowRatePerPerson { get; set; } = (System.Nullable<float>)Single.Parse("0.00944", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public System.Nullable<float> OutdoorAirFlowRatePerZoneFloorArea { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone")]
public System.Nullable<float> OutdoorAirFlowRatePerZone { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("reheat_coil_type")]
public HVACTemplate_Zone_VAV_ReheatCoilType ReheatCoilType { get; set; } = (HVACTemplate_Zone_VAV_ReheatCoilType)Enum.Parse(typeof(HVACTemplate_Zone_VAV_ReheatCoilType), "None");
        

[Description("If blank, always on")]
[JsonProperty("reheat_coil_availability_schedule_name")]
public string ReheatCoilAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("damper_heating_action")]
public HVACTemplate_Zone_VAV_DamperHeatingAction DamperHeatingAction { get; set; } = (HVACTemplate_Zone_VAV_DamperHeatingAction)Enum.Parse(typeof(HVACTemplate_Zone_VAV_DamperHeatingAction), "Reverse");
        

[Description(@"Used only when Reheat Coil Object Type = Coil:Heating:Water and Damper Heating Action = Reverse When autocalculating, the maximum flow per zone is set to 0.002032 m3/s-m2 (0.4 cfm/sqft) This optional field limits the maximum flow allowed in reheat mode. If this field and the following field are left blank, the maximum flow will not be limited. At no time will the maximum flow rate calculated here exceed the value of Maximum Air Flow Rate.")]
[JsonProperty("maximum_flow_per_zone_floor_area_during_reheat")]
public string MaximumFlowPerZoneFloorAreaDuringReheat { get; set; } = "";
        

[Description(@"Used only when Reheat Coil Object Type = Coil:Heating:Water and Damper Heating Action = Reverse When autocalculating, the maximum flow fraction is set to the ratio of 0.002032 m3/s-m2 (0.4 cfm/sqft) multiplied by the zone floor area and the Maximum Air Flow Rate. This optional field limits the maximum flow allowed in reheat mode. If this field and the previous field are left blank, the maximum flow will not be limited. At no time will the maximum flow rate calculated here exceed the value of Maximum Air Flow Rate.")]
[JsonProperty("maximum_flow_fraction_during_reheat")]
public string MaximumFlowFractionDuringReheat { get; set; } = "";
        

[Description("Specifies the maximum allowable supply air temperature leaving the reheat coil. I" +
    "f left blank, there is no limit and no default. If unknown, 35C (95F) is recomme" +
    "nded.")]
[JsonProperty("maximum_reheat_air_temperature")]
public System.Nullable<float> MaximumReheatAirTemperature { get; set; } = null;
        

[Description(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will increase flow as needed to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on the current number of occupants in the zone. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate. If this field is blank, then the terminal unit will not be controlled for outdoor air flow. Note that this field is used only for specifying the design outdoor air flow rate used for control. The field Design Specification Outdoor Air Object Name for Sizing (see below) is used to specify the design outdoor air flow rate.")]
[JsonProperty("design_specification_outdoor_air_object_name_for_control")]
public string DesignSpecificationOutdoorAirObjectNameForControl { get; set; } = "";
        

[Description("Plenum zone name. Supply plenum runs through only this zone. Blank if none.")]
[JsonProperty("supply_plenum_name")]
public string SupplyPlenumName { get; set; } = "";
        

[Description("Plenum zone name. Return plenum runs through only this zone. Blank if none.")]
[JsonProperty("return_plenum_name")]
public string ReturnPlenumName { get; set; } = "";
        

[JsonProperty("baseboard_heating_type")]
public HVACTemplate_Zone_VAV_BaseboardHeatingType BaseboardHeatingType { get; set; } = (HVACTemplate_Zone_VAV_BaseboardHeatingType)Enum.Parse(typeof(HVACTemplate_Zone_VAV_BaseboardHeatingType), "None");
        

[Description("If blank, always on")]
[JsonProperty("baseboard_heating_availability_schedule_name")]
public string BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("baseboard_heating_capacity")]
public string BaseboardHeatingCapacity { get; set; } = (System.String)"Autosize";
        

[Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint")]
[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_VAV_ZoneCoolingDesignSupplyAirTemperatureInputMethod ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_VAV_ZoneCoolingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_VAV_ZoneCoolingDesignSupplyAirTemperatureInputMethod), "SystemSupplyAirTemperature");
        

[Description("Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_cooling_design_supply_air_temperature")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("12.8", CultureInfo.InvariantCulture);
        

[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("11.11", CultureInfo.InvariantCulture);
        

[Description("SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperat" +
    "ure TemperatureDifference = use the value from Zone Heating Design Supply Air Te" +
    "mperature Difference")]
[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_VAV_ZoneHeatingDesignSupplyAirTemperatureInputMethod ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_VAV_ZoneHeatingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_VAV_ZoneHeatingDesignSupplyAirTemperatureInputMethod), "SupplyAirTemperature");
        

[Description("Zone Heating Design Supply Air Temperature is only used when Zone Heating Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_heating_design_supply_air_temperature")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification. Note that this field is used only for specifying the design outdoor air flow rate used for sizing. The field Design Specification Outdoor Air Object Name for Control (see above) is used to actively control the VAV terminal air flow rate.")]
[JsonProperty("design_specification_outdoor_air_object_name_for_sizing")]
public string DesignSpecificationOutdoorAirObjectNameForSizing { get; set; } = "";
        

[Description("This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
    }
    
    public enum HVACTemplate_Zone_VAV_ZoneMinimumAirFlowInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Constant")]
        Constant = 1,
        
        [JsonProperty("FixedFlowRate")]
        FixedFlowRate = 2,
        
        [JsonProperty("Scheduled")]
        Scheduled = 3,
    }
    
    public enum HVACTemplate_Zone_VAV_OutdoorAirMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum HVACTemplate_Zone_VAV_ReheatCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HVACTemplate_Zone_VAV_DamperHeatingAction
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Normal")]
        Normal = 1,
        
        [JsonProperty("Reverse")]
        Reverse = 2,
    }
    
    public enum HVACTemplate_Zone_VAV_BaseboardHeatingType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum HVACTemplate_Zone_VAV_ZoneCoolingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("SystemSupplyAirTemperature")]
        SystemSupplyAirTemperature = 2,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 3,
    }
    
    public enum HVACTemplate_Zone_VAV_ZoneHeatingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    [Description("Zone terminal unit, fan powered variable volume, reheat optional. Referenced sche" +
        "dules must be defined elsewhere in the idf.")]
    [JsonObject("HVACTemplate:Zone:VAV:FanPowered")]
    public class HVACTemplate_Zone_VAV_FanPowered : BHoMObject, IEnergyPlusClass
    {
        

[Description("Zone Name must match a building zone name")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Enter the name of a HVACTemplate:System:VAV or HVACTemplate:System:PackagedVAV ob" +
    "ject serving this zone.")]
[JsonProperty("template_vav_system_name")]
public string TemplateVavSystemName { get; set; } = "";
        

[Description("Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed " +
    "that standard thermostat objects have been defined for this zone.")]
[JsonProperty("template_thermostat_name")]
public string TemplateThermostatName { get; set; } = "";
        

[Description("This field may be set to \"autosize\". If a value is entered, it will be multiplied" +
    " by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty("primary_supply_air_maximum_flow_rate")]
public string PrimarySupplyAirMaximumFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_heating_sizing_factor")]
public System.Nullable<float> ZoneHeatingSizingFactor { get; set; } = null;
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_cooling_sizing_factor")]
public System.Nullable<float> ZoneCoolingSizingFactor { get; set; } = null;
        

[JsonProperty("primary_supply_air_minimum_flow_fraction")]
public string PrimarySupplyAirMinimumFlowFraction { get; set; } = (System.String)"Autosize";
        

[Description("This field may be set to \"autosize\". If a value is entered, it will be multiplied" +
    " by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty("secondary_supply_air_maximum_flow_rate")]
public string SecondarySupplyAirMaximumFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("flow_type")]
public HVACTemplate_Zone_VAV_FanPowered_FlowType FlowType { get; set; } = (HVACTemplate_Zone_VAV_FanPowered_FlowType)Enum.Parse(typeof(HVACTemplate_Zone_VAV_FanPowered_FlowType), "Parallel");
        

[Description("The fraction of the primary air flow at which fan turns on Applicable only to Par" +
    "allel Flow Type")]
[JsonProperty("parallel_fan_on_flow_fraction")]
public string ParallelFanOnFlowFraction { get; set; } = (System.String)"Autosize";
        

[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty("outdoor_air_method")]
public HVACTemplate_Zone_VAV_FanPowered_OutdoorAirMethod OutdoorAirMethod { get; set; } = (HVACTemplate_Zone_VAV_FanPowered_OutdoorAirMethod)Enum.Parse(typeof(HVACTemplate_Zone_VAV_FanPowered_OutdoorAirMethod), "Empty");
        

[Description("Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air " +
    "Method is Flow/Person, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_person")]
public System.Nullable<float> OutdoorAirFlowRatePerPerson { get; set; } = (System.Nullable<float>)Single.Parse("0.00944", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/area, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public System.Nullable<float> OutdoorAirFlowRatePerZoneFloorArea { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone")]
public System.Nullable<float> OutdoorAirFlowRatePerZone { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("reheat_coil_type")]
public HVACTemplate_Zone_VAV_FanPowered_ReheatCoilType ReheatCoilType { get; set; } = (HVACTemplate_Zone_VAV_FanPowered_ReheatCoilType)Enum.Parse(typeof(HVACTemplate_Zone_VAV_FanPowered_ReheatCoilType), "Electric");
        

[Description("If blank, always on")]
[JsonProperty("reheat_coil_availability_schedule_name")]
public string ReheatCoilAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("fan_total_efficiency")]
public System.Nullable<float> FanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("fan_delta_pressure")]
public System.Nullable<float> FanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("1000", CultureInfo.InvariantCulture);
        

[JsonProperty("fan_motor_efficiency")]
public System.Nullable<float> FanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("Plenum zone name. Supply plenum runs through only this zone. Blank if none.")]
[JsonProperty("supply_plenum_name")]
public string SupplyPlenumName { get; set; } = "";
        

[Description("Plenum zone name. Return plenum runs through only this zone. Blank if none.")]
[JsonProperty("return_plenum_name")]
public string ReturnPlenumName { get; set; } = "";
        

[JsonProperty("baseboard_heating_type")]
public HVACTemplate_Zone_VAV_FanPowered_BaseboardHeatingType BaseboardHeatingType { get; set; } = (HVACTemplate_Zone_VAV_FanPowered_BaseboardHeatingType)Enum.Parse(typeof(HVACTemplate_Zone_VAV_FanPowered_BaseboardHeatingType), "None");
        

[Description("If blank, always on")]
[JsonProperty("baseboard_heating_availability_schedule_name")]
public string BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("baseboard_heating_capacity")]
public string BaseboardHeatingCapacity { get; set; } = (System.String)"Autosize";
        

[Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint")]
[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_VAV_FanPowered_ZoneCoolingDesignSupplyAirTemperatureInputMethod ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_VAV_FanPowered_ZoneCoolingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_VAV_FanPowered_ZoneCoolingDesignSupplyAirTemperatureInputMethod), "SystemSupplyAirTemperature");
        

[Description("Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_cooling_design_supply_air_temperature")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("12.8", CultureInfo.InvariantCulture);
        

[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("11.11", CultureInfo.InvariantCulture);
        

[Description("SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperat" +
    "ure TemperatureDifference = use the value from Zone Heating Design Supply Air Te" +
    "mperature Difference")]
[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_VAV_FanPowered_ZoneHeatingDesignSupplyAirTemperatureInputMethod ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_VAV_FanPowered_ZoneHeatingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_VAV_FanPowered_ZoneHeatingDesignSupplyAirTemperatureInputMethod), "SupplyAirTemperature");
        

[Description("Zone Heating Design Supply Air Temperature is only used when Zone Heating Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_heating_design_supply_air_temperature")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[Description(@"This is the operating schedule for the zone PIU fan. For a parallel PIU, the fan operates only when the primary air flow is below the Parallel Fan On Flow Fraction and the Zone PIU Fan Schedule is on, or it is activated by an availability manager. For a series PIU, the zone fan operates whenever the Zone PIU Fan Schedule is on, or it is activated by an availability manager. If this field is left blank, the System Availability Schedule for the HVACTemplate:System serving this zone will be used.")]
[JsonProperty("zone_piu_fan_schedule_name")]
public string ZonePiuFanScheduleName { get; set; } = "";
        

[JsonProperty("design_specification_outdoor_air_object_name")]
public string DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        

[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
    }
    
    public enum HVACTemplate_Zone_VAV_FanPowered_FlowType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Parallel")]
        Parallel = 1,
        
        [JsonProperty("ParallelFromPlenum")]
        ParallelFromPlenum = 2,
        
        [JsonProperty("Series")]
        Series = 3,
        
        [JsonProperty("SeriesFromPlenum")]
        SeriesFromPlenum = 4,
    }
    
    public enum HVACTemplate_Zone_VAV_FanPowered_OutdoorAirMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum HVACTemplate_Zone_VAV_FanPowered_ReheatCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
    }
    
    public enum HVACTemplate_Zone_VAV_FanPowered_BaseboardHeatingType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum HVACTemplate_Zone_VAV_FanPowered_ZoneCoolingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("SystemSupplyAirTemperature")]
        SystemSupplyAirTemperature = 2,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 3,
    }
    
    public enum HVACTemplate_Zone_VAV_FanPowered_ZoneHeatingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    [Description("VAV system with VAV for both heating and cooling and optional reheat coil. For he" +
        "ating, this unit increases airflow first, then activates reheat coil.")]
    [JsonObject("HVACTemplate:Zone:VAV:HeatAndCool")]
    public class HVACTemplate_Zone_VAV_HeatAndCool : BHoMObject, IEnergyPlusClass
    {
        

[Description("Zone name must match a building zone name")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Name of a HVACTemplate:System:VAV or HVACTemplate:System:PackagedVAV object servi" +
    "ng this zone")]
[JsonProperty("template_vav_system_name")]
public string TemplateVavSystemName { get; set; } = "";
        

[Description("Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed " +
    "that standard thermostat objects have been defined for this zone.")]
[JsonProperty("template_thermostat_name")]
public string TemplateThermostatName { get; set; } = "";
        

[Description("This field may be set to \"autosize\". If a value is entered, it will be multiplied" +
    " by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty("supply_air_maximum_flow_rate")]
public string SupplyAirMaximumFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_heating_sizing_factor")]
public System.Nullable<float> ZoneHeatingSizingFactor { get; set; } = null;
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_cooling_sizing_factor")]
public System.Nullable<float> ZoneCoolingSizingFactor { get; set; } = null;
        

[Description(@"This field is used if the field Zone Minimum Air Flow Input Method is Constant If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional. If a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the following field are entered, the larger result is used.")]
[JsonProperty("constant_minimum_air_flow_fraction")]
public System.Nullable<float> ConstantMinimumAirFlowFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty("outdoor_air_method")]
public HVACTemplate_Zone_VAV_HeatAndCool_OutdoorAirMethod OutdoorAirMethod { get; set; } = (HVACTemplate_Zone_VAV_HeatAndCool_OutdoorAirMethod)Enum.Parse(typeof(HVACTemplate_Zone_VAV_HeatAndCool_OutdoorAirMethod), "Empty");
        

[Description("Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air " +
    "Method is Flow/Person, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_person")]
public System.Nullable<float> OutdoorAirFlowRatePerPerson { get; set; } = (System.Nullable<float>)Single.Parse("0.00944", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public System.Nullable<float> OutdoorAirFlowRatePerZoneFloorArea { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone")]
public System.Nullable<float> OutdoorAirFlowRatePerZone { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification. Note that this field is used only for specifying the design outdoor air flow rate used for sizing. The field Design Specification Outdoor Air Object Name for Control (see above) is used to actively control the VAV terminal air flow rate.")]
[JsonProperty("design_specification_outdoor_air_object_name_for_sizing")]
public string DesignSpecificationOutdoorAirObjectNameForSizing { get; set; } = "";
        

[Description("This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
        

[JsonProperty("reheat_coil_type")]
public HVACTemplate_Zone_VAV_HeatAndCool_ReheatCoilType ReheatCoilType { get; set; } = (HVACTemplate_Zone_VAV_HeatAndCool_ReheatCoilType)Enum.Parse(typeof(HVACTemplate_Zone_VAV_HeatAndCool_ReheatCoilType), "None");
        

[Description("If blank, always on")]
[JsonProperty("reheat_coil_availability_schedule_name")]
public string ReheatCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Specifies the maximum allowable supply air temperature leaving the reheat coil. I" +
    "f left blank, there is no limit and no default. If unknown, 35C (95F) is recomme" +
    "nded.")]
[JsonProperty("maximum_reheat_air_temperature")]
public System.Nullable<float> MaximumReheatAirTemperature { get; set; } = null;
        

[Description("Plenum zone name. Supply plenum runs through only this zone. Blank if none.")]
[JsonProperty("supply_plenum_name")]
public string SupplyPlenumName { get; set; } = "";
        

[Description("Plenum zone name. Return plenum runs through only this zone. Blank if none.")]
[JsonProperty("return_plenum_name")]
public string ReturnPlenumName { get; set; } = "";
        

[JsonProperty("baseboard_heating_type")]
public HVACTemplate_Zone_VAV_HeatAndCool_BaseboardHeatingType BaseboardHeatingType { get; set; } = (HVACTemplate_Zone_VAV_HeatAndCool_BaseboardHeatingType)Enum.Parse(typeof(HVACTemplate_Zone_VAV_HeatAndCool_BaseboardHeatingType), "None");
        

[Description("If blank, always on")]
[JsonProperty("baseboard_heating_availability_schedule_name")]
public string BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("baseboard_heating_capacity")]
public string BaseboardHeatingCapacity { get; set; } = (System.String)"Autosize";
        

[Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint")]
[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_VAV_HeatAndCool_ZoneCoolingDesignSupplyAirTemperatureInputMethod ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_VAV_HeatAndCool_ZoneCoolingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_VAV_HeatAndCool_ZoneCoolingDesignSupplyAirTemperatureInputMethod), "SystemSupplyAirTemperature");
        

[Description("Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_cooling_design_supply_air_temperature")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("12.8", CultureInfo.InvariantCulture);
        

[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("11.11", CultureInfo.InvariantCulture);
        

[Description(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Heating Coil Design Setpoint TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference")]
[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_VAV_HeatAndCool_ZoneHeatingDesignSupplyAirTemperatureInputMethod ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_VAV_HeatAndCool_ZoneHeatingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_VAV_HeatAndCool_ZoneHeatingDesignSupplyAirTemperatureInputMethod), "SupplyAirTemperature");
        

[Description("Zone Heating Design Supply Air Temperature is only used when Zone Heating Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_heating_design_supply_air_temperature")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
    }
    
    public enum HVACTemplate_Zone_VAV_HeatAndCool_OutdoorAirMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum HVACTemplate_Zone_VAV_HeatAndCool_ReheatCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HVACTemplate_Zone_VAV_HeatAndCool_BaseboardHeatingType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum HVACTemplate_Zone_VAV_HeatAndCool_ZoneCoolingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("SystemSupplyAirTemperature")]
        SystemSupplyAirTemperature = 2,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 3,
    }
    
    public enum HVACTemplate_Zone_VAV_HeatAndCool_ZoneHeatingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    [Description("Zone terminal unit, constant volume, reheat optional. Referenced schedules must b" +
        "e defined elsewhere in the idf.")]
    [JsonObject("HVACTemplate:Zone:ConstantVolume")]
    public class HVACTemplate_Zone_ConstantVolume : BHoMObject, IEnergyPlusClass
    {
        

[Description("Zone name must match a building zone name")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Name of a HVACTemplate:System:ConstantVolume object serving this zone")]
[JsonProperty("template_constant_volume_system_name")]
public string TemplateConstantVolumeSystemName { get; set; } = "";
        

[Description("Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed " +
    "that standard thermostat objects have been defined for this zone.")]
[JsonProperty("template_thermostat_name")]
public string TemplateThermostatName { get; set; } = "";
        

[Description("This field may be set to \"autosize\". If a value is entered, it will be multiplied" +
    " by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty("supply_air_maximum_flow_rate")]
public string SupplyAirMaximumFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_heating_sizing_factor")]
public System.Nullable<float> ZoneHeatingSizingFactor { get; set; } = null;
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_cooling_sizing_factor")]
public System.Nullable<float> ZoneCoolingSizingFactor { get; set; } = null;
        

[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty("outdoor_air_method")]
public HVACTemplate_Zone_ConstantVolume_OutdoorAirMethod OutdoorAirMethod { get; set; } = (HVACTemplate_Zone_ConstantVolume_OutdoorAirMethod)Enum.Parse(typeof(HVACTemplate_Zone_ConstantVolume_OutdoorAirMethod), "Empty");
        

[Description("Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air " +
    "Method is Flow/Person, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_person")]
public System.Nullable<float> OutdoorAirFlowRatePerPerson { get; set; } = (System.Nullable<float>)Single.Parse("0.00944", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public System.Nullable<float> OutdoorAirFlowRatePerZoneFloorArea { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone")]
public System.Nullable<float> OutdoorAirFlowRatePerZone { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty("design_specification_outdoor_air_object_name")]
public string DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        

[Description("This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
        

[JsonProperty("reheat_coil_type")]
public HVACTemplate_Zone_ConstantVolume_ReheatCoilType ReheatCoilType { get; set; } = (HVACTemplate_Zone_ConstantVolume_ReheatCoilType)Enum.Parse(typeof(HVACTemplate_Zone_ConstantVolume_ReheatCoilType), "None");
        

[Description("If blank, always on")]
[JsonProperty("reheat_coil_availability_schedule_name")]
public string ReheatCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Specifies the maximum allowable supply air temperature leaving the reheat coil. I" +
    "f left blank, there is no limit and no default. If unknown, 35C (95F) is recomme" +
    "nded.")]
[JsonProperty("maximum_reheat_air_temperature")]
public System.Nullable<float> MaximumReheatAirTemperature { get; set; } = null;
        

[Description("Plenum zone name. Supply plenum runs through only this zone. Blank if none.")]
[JsonProperty("supply_plenum_name")]
public string SupplyPlenumName { get; set; } = "";
        

[Description("Plenum zone name. Return plenum runs through only this zone. Blank if none.")]
[JsonProperty("return_plenum_name")]
public string ReturnPlenumName { get; set; } = "";
        

[JsonProperty("baseboard_heating_type")]
public HVACTemplate_Zone_ConstantVolume_BaseboardHeatingType BaseboardHeatingType { get; set; } = (HVACTemplate_Zone_ConstantVolume_BaseboardHeatingType)Enum.Parse(typeof(HVACTemplate_Zone_ConstantVolume_BaseboardHeatingType), "None");
        

[Description("If blank, always on")]
[JsonProperty("baseboard_heating_availability_schedule_name")]
public string BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("baseboard_heating_capacity")]
public string BaseboardHeatingCapacity { get; set; } = (System.String)"Autosize";
        

[Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint")]
[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_ConstantVolume_ZoneCoolingDesignSupplyAirTemperatureInputMethod ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_ConstantVolume_ZoneCoolingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_ConstantVolume_ZoneCoolingDesignSupplyAirTemperatureInputMethod), "SystemSupplyAirTemperature");
        

[Description("Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_cooling_design_supply_air_temperature")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("12.8", CultureInfo.InvariantCulture);
        

[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("11.11", CultureInfo.InvariantCulture);
        

[Description("SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperat" +
    "ure TemperatureDifference = use the value from Zone Heating Design Supply Air Te" +
    "mperature Difference")]
[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_ConstantVolume_ZoneHeatingDesignSupplyAirTemperatureInputMethod ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_ConstantVolume_ZoneHeatingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_ConstantVolume_ZoneHeatingDesignSupplyAirTemperatureInputMethod), "SupplyAirTemperature");
        

[Description("Zone Heating Design Supply Air Temperature is only used when Zone Heating Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_heating_design_supply_air_temperature")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature")]
[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
    }
    
    public enum HVACTemplate_Zone_ConstantVolume_OutdoorAirMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum HVACTemplate_Zone_ConstantVolume_ReheatCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HVACTemplate_Zone_ConstantVolume_BaseboardHeatingType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum HVACTemplate_Zone_ConstantVolume_ZoneCoolingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("SystemSupplyAirTemperature")]
        SystemSupplyAirTemperature = 2,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 3,
    }
    
    public enum HVACTemplate_Zone_ConstantVolume_ZoneHeatingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    [Description("Zone terminal unit, dual-duct, constant or variable volume.")]
    [JsonObject("HVACTemplate:Zone:DualDuct")]
    public class HVACTemplate_Zone_DualDuct : BHoMObject, IEnergyPlusClass
    {
        

[Description("Zone name must match a building zone name")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Name of a HVACTemplate:System:DualDuct object serving this zone")]
[JsonProperty("template_dual_duct_system_name")]
public string TemplateDualDuctSystemName { get; set; } = "";
        

[Description("Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed " +
    "that standard thermostat objects have been defined for this zone.")]
[JsonProperty("template_thermostat_name")]
public string TemplateThermostatName { get; set; } = "";
        

[Description("This field may be set to \"autosize\". If a value is entered, it will be multiplied" +
    " by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty("supply_air_maximum_flow_rate")]
public string SupplyAirMaximumFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_heating_sizing_factor")]
public System.Nullable<float> ZoneHeatingSizingFactor { get; set; } = null;
        

[Description("If blank, value from Sizing:Parameters will be used.")]
[JsonProperty("zone_cooling_sizing_factor")]
public System.Nullable<float> ZoneCoolingSizingFactor { get; set; } = null;
        

[Description("This field is the Zone Minimum Air Flow Fraction specified as a fraction of the m" +
    "aximum air flow rate. This field is ignored if the system serving this zone is c" +
    "onstant volume.")]
[JsonProperty("zone_minimum_air_flow_fraction")]
public System.Nullable<float> ZoneMinimumAirFlowFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty("outdoor_air_method")]
public HVACTemplate_Zone_DualDuct_OutdoorAirMethod OutdoorAirMethod { get; set; } = (HVACTemplate_Zone_DualDuct_OutdoorAirMethod)Enum.Parse(typeof(HVACTemplate_Zone_DualDuct_OutdoorAirMethod), "Empty");
        

[Description("Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air " +
    "Method is Flow/Person, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_person")]
public System.Nullable<float> OutdoorAirFlowRatePerPerson { get; set; } = (System.Nullable<float>)Single.Parse("0.00944", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public System.Nullable<float> OutdoorAirFlowRatePerZoneFloorArea { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty("outdoor_air_flow_rate_per_zone")]
public System.Nullable<float> OutdoorAirFlowRatePerZone { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification. Note that this field is used only for specifying the design outdoor air flow rate used for sizing. The field Design Specification Outdoor Air Object Name for Control (see above) is used to actively control the VAV terminal air flow rate.")]
[JsonProperty("design_specification_outdoor_air_object_name_for_sizing")]
public string DesignSpecificationOutdoorAirObjectNameForSizing { get; set; } = "";
        

[Description("This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
        

[Description(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will increase flow as needed to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on the current number of occupants in the zone. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate. If this field is blank, then the terminal unit will not be controlled for outdoor air flow. Note that this field is used only for specifying the design outdoor air flow rate used for control. The field Design Specification Outdoor Air Object Name for Sizing (see below) is used to specify the design outdoor air flow rate.")]
[JsonProperty("design_specification_outdoor_air_object_name_for_control")]
public string DesignSpecificationOutdoorAirObjectNameForControl { get; set; } = "";
        

[Description("Plenum zone name. Cold supply plenum that serves only this zone. Blank if none.")]
[JsonProperty("cold_supply_plenum_name")]
public string ColdSupplyPlenumName { get; set; } = "";
        

[Description("Plenum zone name. Hot supply plenum that serves only this zone. Blank if none.")]
[JsonProperty("hot_supply_plenum_name")]
public string HotSupplyPlenumName { get; set; } = "";
        

[Description("Plenum zone name. Return plenum that serves only this zone. Blank if none.")]
[JsonProperty("return_plenum_name")]
public string ReturnPlenumName { get; set; } = "";
        

[JsonProperty("baseboard_heating_type")]
public HVACTemplate_Zone_DualDuct_BaseboardHeatingType BaseboardHeatingType { get; set; } = (HVACTemplate_Zone_DualDuct_BaseboardHeatingType)Enum.Parse(typeof(HVACTemplate_Zone_DualDuct_BaseboardHeatingType), "None");
        

[Description("If blank, always on")]
[JsonProperty("baseboard_heating_availability_schedule_name")]
public string BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("baseboard_heating_capacity")]
public string BaseboardHeatingCapacity { get; set; } = (System.String)"Autosize";
        

[Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:DualDuct Cooling Coil Design Setpoint")]
[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_DualDuct_ZoneCoolingDesignSupplyAirTemperatureInputMethod ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_DualDuct_ZoneCoolingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_DualDuct_ZoneCoolingDesignSupplyAirTemperatureInputMethod), "SystemSupplyAirTemperature");
        

[Description("Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_cooling_design_supply_air_temperature")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("12.8", CultureInfo.InvariantCulture);
        

[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("11.11", CultureInfo.InvariantCulture);
        

[Description(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:DualDuct Heating Coil Design Setpoint")]
[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public HVACTemplate_Zone_DualDuct_ZoneHeatingDesignSupplyAirTemperatureInputMethod ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (HVACTemplate_Zone_DualDuct_ZoneHeatingDesignSupplyAirTemperatureInputMethod)Enum.Parse(typeof(HVACTemplate_Zone_DualDuct_ZoneHeatingDesignSupplyAirTemperatureInputMethod), "SystemSupplyAirTemperature");
        

[Description("Zone Heating Design Supply Air Temperature is only used when Zone Heating Design " +
    "Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty("zone_heating_design_supply_air_temperature")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public System.Nullable<float> ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
    }
    
    public enum HVACTemplate_Zone_DualDuct_OutdoorAirMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum HVACTemplate_Zone_DualDuct_BaseboardHeatingType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum HVACTemplate_Zone_DualDuct_ZoneCoolingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("SystemSupplyAirTemperature")]
        SystemSupplyAirTemperature = 2,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 3,
    }
    
    public enum HVACTemplate_Zone_DualDuct_ZoneHeatingDesignSupplyAirTemperatureInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("SystemSupplyAirTemperature")]
        SystemSupplyAirTemperature = 2,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 3,
    }
    
    [Description("Variable refrigerant flow (VRF) heat pump condensing unit. Serves one or more VRF" +
        " zone terminal units (HVACTemplate:Zone:VRF).")]
    [JsonObject("HVACTemplate:System:VRF")]
    public class HVACTemplate_System_VRF : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("system_availability_schedule_name")]
public string SystemAvailabilityScheduleName { get; set; } = "";
        

[Description("Enter the total cooling capacity in watts at rated conditions or set to autosize." +
    " Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("gross_rated_total_cooling_capacity")]
public string GrossRatedTotalCoolingCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Enter the coefficient of performance at rated conditions or leave blank to use de" +
    "fault. COP includes compressor and condenser fan electrical energy input COP doe" +
    "s not include supply fan heat or supply fan electric power input")]
[JsonProperty("gross_rated_cooling_cop")]
public System.Nullable<float> GrossRatedCoolingCop { get; set; } = (System.Nullable<float>)Single.Parse("3.3", CultureInfo.InvariantCulture);
        

[Description("Enter the minimum outdoor temperature allowed for cooling operation. Cooling is d" +
    "isabled below this temperature.")]
[JsonProperty("minimum_outdoor_temperature_in_cooling_mode")]
public System.Nullable<float> MinimumOutdoorTemperatureInCoolingMode { get; set; } = (System.Nullable<float>)Single.Parse("-6", CultureInfo.InvariantCulture);
        

[Description("Enter the maximum outdoor temperature allowed for cooling operation. Cooling is d" +
    "isabled above this temperature.")]
[JsonProperty("maximum_outdoor_temperature_in_cooling_mode")]
public System.Nullable<float> MaximumOutdoorTemperatureInCoolingMode { get; set; } = (System.Nullable<float>)Single.Parse("43", CultureInfo.InvariantCulture);
        

[Description("Enter the heating capacity in watts at rated conditions or set to autosize. Heati" +
    "ng capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("gross_rated_heating_capacity")]
public string GrossRatedHeatingCapacity { get; set; } = (System.String)"Autosize";
        

[Description(@"If the Gross Rated Heating Capacity is autosized, the heating capacity is sized to be equal to the cooling capacity multiplied by this sizing ratio. The zone terminal unit heating coils are also sized using this ratio unless the sizing ratio input in the ZoneHVAC:TerminalUnit:VariableRefrigerantFlow object is entered.")]
[JsonProperty("rated_heating_capacity_sizing_ratio")]
public System.Nullable<float> RatedHeatingCapacitySizingRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("COP includes compressor and condenser fan electrical energy input COP does not in" +
    "clude supply fan heat or supply fan electrical energy input")]
[JsonProperty("gross_rated_heating_cop")]
public System.Nullable<float> GrossRatedHeatingCop { get; set; } = (System.Nullable<float>)Single.Parse("3.4", CultureInfo.InvariantCulture);
        

[Description("Enter the minimum outdoor temperature allowed for heating operation.")]
[JsonProperty("minimum_outdoor_temperature_in_heating_mode")]
public System.Nullable<float> MinimumOutdoorTemperatureInHeatingMode { get; set; } = (System.Nullable<float>)Single.Parse("-20", CultureInfo.InvariantCulture);
        

[Description("Enter the maximum outdoor temperature allowed for heating operation.")]
[JsonProperty("maximum_outdoor_temperature_in_heating_mode")]
public System.Nullable<float> MaximumOutdoorTemperatureInHeatingMode { get; set; } = (System.Nullable<float>)Single.Parse("16", CultureInfo.InvariantCulture);
        

[Description("Enter the minimum heat pump part-load ratio (PLR). When the cooling or heating PL" +
    "R is below this value, the heat pump compressor will cycle to meet the cooling o" +
    "r heating demand.")]
[JsonProperty("minimum_heat_pump_part_load_ratio")]
public System.Nullable<float> MinimumHeatPumpPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.15", CultureInfo.InvariantCulture);
        

[Description("Enter the name of the zone where the master thermostat is located.")]
[JsonProperty("zone_name_for_master_thermostat_location")]
public string ZoneNameForMasterThermostatLocation { get; set; } = "";
        

[Description("Choose a thermostat control logic scheme. If these control types fail to control " +
    "zone temperature within a reasonable limit, consider using multiple VRF systems")]
[JsonProperty("master_thermostat_priority_control_type")]
public HVACTemplate_System_VRF_MasterThermostatPriorityControlType MasterThermostatPriorityControlType { get; set; } = (HVACTemplate_System_VRF_MasterThermostatPriorityControlType)Enum.Parse(typeof(HVACTemplate_System_VRF_MasterThermostatPriorityControlType), "MasterThermostatPriority");
        

[Description("this field is required if Master Thermostat Priority Control Type is Scheduled. S" +
    "chedule values of 0 denote cooling, 1 for heating, and all other values disable " +
    "the system.")]
[JsonProperty("thermostat_priority_schedule_name")]
public string ThermostatPriorityScheduleName { get; set; } = "";
        

[Description("This field is reserved for future use. The only valid choice is No.")]
[JsonProperty("heat_pump_waste_heat_recovery")]
public EmptyNoYes HeatPumpWasteHeatRecovery { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Enter the equivalent length of the farthest terminal unit from the condenser")]
[JsonProperty("equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode")]
public System.Nullable<float> EquivalentPipingLengthUsedForPipingCorrectionFactorInCoolingMode { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[Description("Enter the height difference between the highest and lowest terminal unit")]
[JsonProperty("vertical_height_used_for_piping_correction_factor")]
public System.Nullable<float> VerticalHeightUsedForPipingCorrectionFactor { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("Enter the equivalent length of the farthest terminal unit from the condenser")]
[JsonProperty("equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode")]
public System.Nullable<float> EquivalentPipingLengthUsedForPipingCorrectionFactorInHeatingMode { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[Description("Enter the value of the resistive heater located in the compressor(s). This heater" +
    " is used to warm the refrigerant and oil when the compressor is off.")]
[JsonProperty("crankcase_heater_power_per_compressor")]
public System.Nullable<float> CrankcaseHeaterPowerPerCompressor { get; set; } = (System.Nullable<float>)Single.Parse("33", CultureInfo.InvariantCulture);
        

[Description("Enter the total number of compressor. This input is used only for crankcase heate" +
    "r calculations.")]
[JsonProperty("number_of_compressors")]
public System.Nullable<float> NumberOfCompressors { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description("Enter the ratio of the first stage compressor to total compressor capacity. All o" +
    "ther compressors are assumed to be equally sized. This inputs is used only for c" +
    "rankcase heater calculations.")]
[JsonProperty("ratio_of_compressor_size_to_total_compressor_capacity")]
public System.Nullable<float> RatioOfCompressorSizeToTotalCompressorCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[Description("Enter the maximum outdoor temperature above which the crankcase heaters are disab" +
    "led.")]
[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForCrankcaseHeater { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[Description("Select a defrost strategy. Reverse cycle reverses the operating mode from heating" +
    " to cooling to melt frost formation on the condenser coil. The resistive strateg" +
    "y uses a resistive heater to melt the frost.")]
[JsonProperty("defrost_strategy")]
public HVACTemplate_System_VRF_DefrostStrategy DefrostStrategy { get; set; } = (HVACTemplate_System_VRF_DefrostStrategy)Enum.Parse(typeof(HVACTemplate_System_VRF_DefrostStrategy), "Resistive");
        

[Description("Choose a defrost control type. Either use a fixed Timed defrost period or select " +
    "OnDemand to defrost only when necessary.")]
[JsonProperty("defrost_control")]
public HVACTemplate_System_VRF_DefrostControl DefrostControl { get; set; } = (HVACTemplate_System_VRF_DefrostControl)Enum.Parse(typeof(HVACTemplate_System_VRF_DefrostControl), "Timed");
        

[Description("Fraction of time in defrost mode. Only applicable if timed defrost control is spe" +
    "cified.")]
[JsonProperty("defrost_time_period_fraction")]
public System.Nullable<float> DefrostTimePeriodFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.058333", CultureInfo.InvariantCulture);
        

[Description("Enter the size of the resistive defrost heating element. Only applicable if resis" +
    "tive defrost strategy is specified")]
[JsonProperty("resistive_defrost_heater_capacity")]
public string ResistiveDefrostHeaterCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Enter the maximum outdoor temperature above which defrost operation is disabled.")]
[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_defrost_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForDefrostOperation { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[Description("Select either an air cooled or evaporatively cooled condenser.")]
[JsonProperty("condenser_type")]
public HVACTemplate_System_VRF_CondenserType CondenserType { get; set; } = (HVACTemplate_System_VRF_CondenserType)Enum.Parse(typeof(HVACTemplate_System_VRF_CondenserType), "AirCooled");
        

[Description("Only used when Condenser Type = WaterCooled.")]
[JsonProperty("water_condenser_volume_flow_rate")]
public string WaterCondenserVolumeFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("Enter the effectiveness of the evaporatively cooled condenser. This field is only" +
    " used when the Condenser Type = EvaporativelyCooled.")]
[JsonProperty("evaporative_condenser_effectiveness")]
public System.Nullable<float> EvaporativeCondenserEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("Used to calculate evaporative condenser water use. This field is only used when t" +
    "he Condenser Type = EvaporativelyCooled.")]
[JsonProperty("evaporative_condenser_air_flow_rate")]
public string EvaporativeCondenserAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("Rated power consumed by the evaporative condenser\'s water pump. This field is onl" +
    "y used when the Condenser Type = EvaporativelyCooled.")]
[JsonProperty("evaporative_condenser_pump_rated_power_consumption")]
public string EvaporativeCondenserPumpRatedPowerConsumption { get; set; } = (System.String)"0";
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
[JsonProperty("basin_heater_capacity")]
public System.Nullable<float> BasinHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdo" +
    "or dry-bulb temperature when the basin heater turns on.")]
[JsonProperty("basin_heater_setpoint_temperature")]
public System.Nullable<float> BasinHeaterSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty("basin_heater_operating_schedule_name")]
public string BasinHeaterOperatingScheduleName { get; set; } = "";
        

[JsonProperty("fuel_type")]
public HVACTemplate_System_VRF_FuelType FuelType { get; set; } = (HVACTemplate_System_VRF_FuelType)Enum.Parse(typeof(HVACTemplate_System_VRF_FuelType), "Electricity");
        

[Description("The minimum outdoor temperature below which heat recovery mode will not operate.")]
[JsonProperty("minimum_outdoor_temperature_in_heat_recovery_mode")]
public System.Nullable<float> MinimumOutdoorTemperatureInHeatRecoveryMode { get; set; } = (System.Nullable<float>)Single.Parse("-15", CultureInfo.InvariantCulture);
        

[Description("The maximum outdoor temperature above which heat recovery mode will not operate.")]
[JsonProperty("maximum_outdoor_temperature_in_heat_recovery_mode")]
public System.Nullable<float> MaximumOutdoorTemperatureInHeatRecoveryMode { get; set; } = (System.Nullable<float>)Single.Parse("45", CultureInfo.InvariantCulture);
    }
    
    public enum HVACTemplate_System_VRF_MasterThermostatPriorityControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LoadPriority")]
        LoadPriority = 1,
        
        [JsonProperty("MasterThermostatPriority")]
        MasterThermostatPriority = 2,
        
        [JsonProperty("Scheduled")]
        Scheduled = 3,
        
        [JsonProperty("ThermostatOffsetPriority")]
        ThermostatOffsetPriority = 4,
        
        [JsonProperty("ZonePriority")]
        ZonePriority = 5,
    }
    
    public enum HVACTemplate_System_VRF_DefrostStrategy
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Resistive")]
        Resistive = 1,
        
        [JsonProperty("ReverseCycle")]
        ReverseCycle = 2,
    }
    
    public enum HVACTemplate_System_VRF_DefrostControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("OnDemand")]
        OnDemand = 1,
        
        [JsonProperty("Timed")]
        Timed = 2,
    }
    
    public enum HVACTemplate_System_VRF_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 3,
    }
    
    public enum HVACTemplate_System_VRF_FuelType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("Electricity")]
        Electricity = 2,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 3,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 4,
        
        [JsonProperty("Gasoline")]
        Gasoline = 5,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 6,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 7,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 8,
        
        [JsonProperty("Propane")]
        Propane = 9,
    }
    
    [Description("Unitary furnace with air conditioner")]
    [JsonObject("HVACTemplate:System:Unitary")]
    public class HVACTemplate_System_Unitary : BHoMObject, IEnergyPlusClass
    {
        

[Description("If blank, always on; Unitary System always on. Schedule is used in availability m" +
    "anager and fan scheduling. Also see \"Night Cycle Control\" field.")]
[JsonProperty("system_availability_schedule_name")]
public string SystemAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("control_zone_or_thermostat_location_name")]
public string ControlZoneOrThermostatLocationName { get; set; } = "";
        

[Description("This field may be set to \"autosize\". If a value is entered, it will *not* be mult" +
    "iplied by any sizing factor or by zone multipliers. If using zone multipliers a " +
    "value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty("supply_fan_maximum_flow_rate")]
public string SupplyFanMaximumFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("Refers to a schedule to specify unitary supply fan operating mode. Schedule value" +
    "s of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous fan " +
    "(on) If this field is left blank, a schedule of always zero (cycling fan) will b" +
    "e used.")]
[JsonProperty("supply_fan_operating_mode_schedule_name")]
public string SupplyFanOperatingModeScheduleName { get; set; } = "";
        

[JsonProperty("supply_fan_total_efficiency")]
public System.Nullable<float> SupplyFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_delta_pressure")]
public System.Nullable<float> SupplyFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("600", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_motor_efficiency")]
public System.Nullable<float> SupplyFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_motor_in_air_stream_fraction")]
public System.Nullable<float> SupplyFanMotorInAirStreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("cooling_coil_type")]
public HVACTemplate_System_Unitary_CoolingCoilType CoolingCoilType { get; set; } = (HVACTemplate_System_Unitary_CoolingCoilType)Enum.Parse(typeof(HVACTemplate_System_Unitary_CoolingCoilType), "SingleSpeedDX");
        

[Description("If blank, always on")]
[JsonProperty("cooling_coil_availability_schedule_name")]
public string CoolingCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Used for sizing.")]
[JsonProperty("cooling_design_supply_air_temperature")]
public System.Nullable<float> CoolingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("12.8", CultureInfo.InvariantCulture);
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("cooling_coil_gross_rated_total_capacity")]
public string CoolingCoilGrossRatedTotalCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Gross SHR")]
[JsonProperty("cooling_coil_gross_rated_sensible_heat_ratio")]
public string CoolingCoilGrossRatedSensibleHeatRatio { get; set; } = (System.String)"Autosize";
        

[Description("Gross cooling capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply air fan heat or supply air fan electric power")]
[JsonProperty("cooling_coil_gross_rated_cop")]
public System.Nullable<float> CoolingCoilGrossRatedCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_coil_type")]
public HVACTemplate_System_Unitary_HeatingCoilType HeatingCoilType { get; set; } = (HVACTemplate_System_Unitary_HeatingCoilType)Enum.Parse(typeof(HVACTemplate_System_Unitary_HeatingCoilType), "Electric");
        

[Description("If blank, always on")]
[JsonProperty("heating_coil_availability_schedule_name")]
public string HeatingCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Used for sizing.")]
[JsonProperty("heating_design_supply_air_temperature")]
public System.Nullable<float> HeatingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_coil_capacity")]
public string HeatingCoilCapacity { get; set; } = (System.String)"Autosize";
        

[JsonProperty("gas_heating_coil_efficiency")]
public System.Nullable<float> GasHeatingCoilEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[JsonProperty("gas_heating_coil_parasitic_electric_load")]
public System.Nullable<float> GasHeatingCoilParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string MaximumOutdoorAirFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("minimum_outdoor_air_flow_rate")]
public string MinimumOutdoorAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("Schedule values multiply the minimum outdoor air flow rate If blank, always one")]
[JsonProperty("minimum_outdoor_air_schedule_name")]
public string MinimumOutdoorAirScheduleName { get; set; } = "";
        

[JsonProperty("economizer_type")]
public HVACTemplate_System_Unitary_EconomizerType EconomizerType { get; set; } = (HVACTemplate_System_Unitary_EconomizerType)Enum.Parse(typeof(HVACTemplate_System_Unitary_EconomizerType), "NoEconomizer");
        

[JsonProperty("economizer_lockout")]
public HVACTemplate_System_Unitary_EconomizerLockout EconomizerLockout { get; set; } = (HVACTemplate_System_Unitary_EconomizerLockout)Enum.Parse(typeof(HVACTemplate_System_Unitary_EconomizerLockout), "NoLockout");
        

[Description("Outdoor temperature above which economizer is disabled and heat recovery is enabl" +
    "ed (if available). Blank means no limit.")]
[JsonProperty("economizer_upper_temperature_limit")]
public System.Nullable<float> EconomizerUpperTemperatureLimit { get; set; } = null;
        

[Description("Outdoor temperature below which economizer is disabled and heat recovery is enabl" +
    "ed (if available). Blank means no limit.")]
[JsonProperty("economizer_lower_temperature_limit")]
public System.Nullable<float> EconomizerLowerTemperatureLimit { get; set; } = null;
        

[Description("Outdoor enthalpy above which economizer is disabled and heat recovery is enabled " +
    "(if available). Blank means no limit.")]
[JsonProperty("economizer_upper_enthalpy_limit")]
public System.Nullable<float> EconomizerUpperEnthalpyLimit { get; set; } = null;
        

[Description("Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb " +
    "economizer control type. No input or blank input means this limit is not operati" +
    "ve. Limit is applied regardless of economizer control type.")]
[JsonProperty("economizer_maximum_limit_dewpoint_temperature")]
public System.Nullable<float> EconomizerMaximumLimitDewpointTemperature { get; set; } = null;
        

[Description("Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
[JsonProperty("supply_plenum_name")]
public string SupplyPlenumName { get; set; } = "";
        

[Description("Plenum zone name. Return plenum serves all zones on this system. Blank if none.")]
[JsonProperty("return_plenum_name")]
public string ReturnPlenumName { get; set; } = "";
        

[JsonProperty("supply_fan_placement")]
public HVACTemplate_System_Unitary_SupplyFanPlacement SupplyFanPlacement { get; set; } = (HVACTemplate_System_Unitary_SupplyFanPlacement)Enum.Parse(typeof(HVACTemplate_System_Unitary_SupplyFanPlacement), "BlowThrough");
        

[JsonProperty("night_cycle_control")]
public HVACTemplate_System_Unitary_NightCycleControl NightCycleControl { get; set; } = (HVACTemplate_System_Unitary_NightCycleControl)Enum.Parse(typeof(HVACTemplate_System_Unitary_NightCycleControl), "StayOff");
        

[Description("Applicable only if Night Cycle Control is Cycle On Control Zone.")]
[JsonProperty("night_cycle_control_zone_name")]
public string NightCycleControlZoneName { get; set; } = "";
        

[JsonProperty("heat_recovery_type")]
public HVACTemplate_System_Unitary_HeatRecoveryType HeatRecoveryType { get; set; } = (HVACTemplate_System_Unitary_HeatRecoveryType)Enum.Parse(typeof(HVACTemplate_System_Unitary_HeatRecoveryType), "None");
        

[JsonProperty("sensible_heat_recovery_effectiveness")]
public System.Nullable<float> SensibleHeatRecoveryEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[Description("Applicable only if Heat Recovery Type is Enthalpy.")]
[JsonProperty("latent_heat_recovery_effectiveness")]
public System.Nullable<float> LatentHeatRecoveryEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
        

[Description(@"None = meet sensible cooling load only CoolReheatHeatingCoil = cool beyond the dry-bulb setpoint as required to meet the humidity setpoint, reheat with main heating coil. CoolReheatDesuperheater = cool beyond the dry-bulb setpoint as required to meet the humidity setpoint, reheat with desuperheater coil.")]
[JsonProperty("dehumidification_control_type")]
public HVACTemplate_System_Unitary_DehumidificationControlType DehumidificationControlType { get; set; } = (HVACTemplate_System_Unitary_DehumidificationControlType)Enum.Parse(typeof(HVACTemplate_System_Unitary_DehumidificationControlType), "None");
        

[Description("Zone relative humidity setpoint in percent (0 to 100)")]
[JsonProperty("dehumidification_setpoint")]
public System.Nullable<float> DehumidificationSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("60", CultureInfo.InvariantCulture);
        

[JsonProperty("humidifier_type")]
public HVACTemplate_System_Unitary_HumidifierType HumidifierType { get; set; } = (HVACTemplate_System_Unitary_HumidifierType)Enum.Parse(typeof(HVACTemplate_System_Unitary_HumidifierType), "None");
        

[Description("If blank, always available")]
[JsonProperty("humidifier_availability_schedule_name")]
public string HumidifierAvailabilityScheduleName { get; set; } = "";
        

[Description("Moisture output rate at full rated power input. The humidifier does not currently" +
    " autosize, so the default is very large to allow for adequate capacity.")]
[JsonProperty("humidifier_rated_capacity")]
public System.Nullable<float> HumidifierRatedCapacity { get; set; } = (System.Nullable<float>)Single.Parse("1E-06", CultureInfo.InvariantCulture);
        

[Description("Electric power input at rated capacity moisture output. Power consumption is prop" +
    "ortional to moisture output with no part-load penalty.")]
[JsonProperty("humidifier_rated_electric_power")]
public string HumidifierRatedElectricPower { get; set; } = (System.String)"Autosize";
        

[Description("Zone name where humidistat is located")]
[JsonProperty("humidifier_control_zone_name")]
public string HumidifierControlZoneName { get; set; } = "";
        

[Description("Zone relative humidity setpoint in percent (0 to 100)")]
[JsonProperty("humidifier_setpoint")]
public System.Nullable<float> HumidifierSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[Description("Specifies if the system has a return fan.")]
[JsonProperty("return_fan")]
public EmptyNoYes ReturnFan { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("return_fan_total_efficiency")]
public System.Nullable<float> ReturnFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_delta_pressure")]
public System.Nullable<float> ReturnFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("500", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_motor_efficiency")]
public System.Nullable<float> ReturnFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_motor_in_air_stream_fraction")]
public System.Nullable<float> ReturnFanMotorInAirStreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    public enum HVACTemplate_System_Unitary_CoolingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("SingleSpeedDX")]
        SingleSpeedDX = 2,
    }
    
    public enum HVACTemplate_System_Unitary_HeatingCoilType
    {
        
        [JsonProperty("Electric")]
        Electric = 0,
        
        [JsonProperty("Gas")]
        Gas = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
    }
    
    public enum HVACTemplate_System_Unitary_EconomizerType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DifferentialDryBulb")]
        DifferentialDryBulb = 1,
        
        [JsonProperty("DifferentialDryBulbAndEnthalpy")]
        DifferentialDryBulbAndEnthalpy = 2,
        
        [JsonProperty("DifferentialEnthalpy")]
        DifferentialEnthalpy = 3,
        
        [JsonProperty("ElectronicEnthalpy")]
        ElectronicEnthalpy = 4,
        
        [JsonProperty("FixedDewPointAndDryBulb")]
        FixedDewPointAndDryBulb = 5,
        
        [JsonProperty("FixedDryBulb")]
        FixedDryBulb = 6,
        
        [JsonProperty("FixedEnthalpy")]
        FixedEnthalpy = 7,
        
        [JsonProperty("NoEconomizer")]
        NoEconomizer = 8,
    }
    
    public enum HVACTemplate_System_Unitary_EconomizerLockout
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LockoutWithCompressor")]
        LockoutWithCompressor = 1,
        
        [JsonProperty("LockoutWithHeating")]
        LockoutWithHeating = 2,
        
        [JsonProperty("NoLockout")]
        NoLockout = 3,
    }
    
    public enum HVACTemplate_System_Unitary_SupplyFanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum HVACTemplate_System_Unitary_NightCycleControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CycleOnAny")]
        CycleOnAny = 1,
        
        [JsonProperty("CycleOnControlZone")]
        CycleOnControlZone = 2,
        
        [JsonProperty("StayOff")]
        StayOff = 3,
    }
    
    public enum HVACTemplate_System_Unitary_HeatRecoveryType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Sensible")]
        Sensible = 3,
    }
    
    public enum HVACTemplate_System_Unitary_DehumidificationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CoolReheatDesuperheater")]
        CoolReheatDesuperheater = 1,
        
        [JsonProperty("CoolReheatHeatingCoil")]
        CoolReheatHeatingCoil = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum HVACTemplate_System_Unitary_HumidifierType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ElectricSteam")]
        ElectricSteam = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    [Description("Unitary furnace with electric air-to-air heat pump")]
    [JsonObject("HVACTemplate:System:UnitaryHeatPump:AirToAir")]
    public class HVACTemplate_System_UnitaryHeatPump_AirToAir : BHoMObject, IEnergyPlusClass
    {
        

[Description("If blank, always on; Unitary System always on. Schedule is used in availability m" +
    "anager and fan scheduling. Also see \"Night Cycle Control\" field.")]
[JsonProperty("system_availability_schedule_name")]
public string SystemAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("control_zone_or_thermostat_location_name")]
public string ControlZoneOrThermostatLocationName { get; set; } = "";
        

[Description(@"Supply air flow rate during cooling operation This field may be set to ""autosize"". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty("cooling_supply_air_flow_rate")]
public string CoolingSupplyAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description(@"Supply air flow rate during heating operation This field may be set to ""autosize"". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty("heating_supply_air_flow_rate")]
public string HeatingSupplyAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description(@"Supply air flow rate when no cooling or heating is needed Only used when heat pump fan operating mode is Continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used. This field may be set to ""autosize"". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty("no_load_supply_air_flow_rate")]
public string NoLoadSupplyAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("Refers to a schedule to specify unitary supply fan operating mode. Schedule value" +
    "s of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous fan " +
    "(on) If this field is left blank, a schedule of always zero (cycling fan) will b" +
    "e used.")]
[JsonProperty("supply_fan_operating_mode_schedule_name")]
public string SupplyFanOperatingModeScheduleName { get; set; } = "";
        

[JsonProperty("supply_fan_placement")]
public HVACTemplate_System_UnitaryHeatPump_AirToAir_SupplyFanPlacement SupplyFanPlacement { get; set; } = (HVACTemplate_System_UnitaryHeatPump_AirToAir_SupplyFanPlacement)Enum.Parse(typeof(HVACTemplate_System_UnitaryHeatPump_AirToAir_SupplyFanPlacement), "BlowThrough");
        

[JsonProperty("supply_fan_total_efficiency")]
public System.Nullable<float> SupplyFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_delta_pressure")]
public System.Nullable<float> SupplyFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("600", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_motor_efficiency")]
public System.Nullable<float> SupplyFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_motor_in_air_stream_fraction")]
public System.Nullable<float> SupplyFanMotorInAirStreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("cooling_coil_type")]
public HVACTemplate_System_UnitaryHeatPump_AirToAir_CoolingCoilType CoolingCoilType { get; set; } = (HVACTemplate_System_UnitaryHeatPump_AirToAir_CoolingCoilType)Enum.Parse(typeof(HVACTemplate_System_UnitaryHeatPump_AirToAir_CoolingCoilType), "SingleSpeedDX");
        

[Description("If blank, always on")]
[JsonProperty("cooling_coil_availability_schedule_name")]
public string CoolingCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Used for sizing.")]
[JsonProperty("cooling_design_supply_air_temperature")]
public System.Nullable<float> CoolingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("12.8", CultureInfo.InvariantCulture);
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat Ratin" +
    "g point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and a" +
    "ir entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty("cooling_coil_gross_rated_total_capacity")]
public string CoolingCoilGrossRatedTotalCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Rated sensible heat ratio (gross sensible capacity/gross total capacity) Sensible" +
    " and total capacities do not include effect of supply fan heat")]
[JsonProperty("cooling_coil_gross_rated_sensible_heat_ratio")]
public string CoolingCoilGrossRatedSensibleHeatRatio { get; set; } = (System.String)"Autosize";
        

[Description("Gross cooling capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply fan heat or supply fan electric power input")]
[JsonProperty("cooling_coil_gross_rated_cop")]
public System.Nullable<float> CoolingCoilGrossRatedCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_pump_heating_coil_type")]
public HVACTemplate_System_UnitaryHeatPump_AirToAir_HeatPumpHeatingCoilType HeatPumpHeatingCoilType { get; set; } = (HVACTemplate_System_UnitaryHeatPump_AirToAir_HeatPumpHeatingCoilType)Enum.Parse(typeof(HVACTemplate_System_UnitaryHeatPump_AirToAir_HeatPumpHeatingCoilType), "SingleSpeedDXHeatPump");
        

[Description("If blank, always on")]
[JsonProperty("heat_pump_heating_coil_availability_schedule_name")]
public string HeatPumpHeatingCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Used for sizing.")]
[JsonProperty("heating_design_supply_air_temperature")]
public System.Nullable<float> HeatingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[Description("Rated heating capacity excluding the effect of supply air fan heat Rating point o" +
    "utdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C Rating point heating c" +
    "oil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty("heat_pump_heating_coil_gross_rated_capacity")]
public string HeatPumpHeatingCoilGrossRatedCapacity { get; set; } = (System.String)"Autosize";
        

[Description(@"Heat Pump Heating Coil Rated Capacity divided by power input to the compressor and outdoor fan, does not include supply air fan heat or supply air fan electrical energy. Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty("heat_pump_heating_coil_rated_cop")]
public System.Nullable<float> HeatPumpHeatingCoilRatedCop { get; set; } = (System.Nullable<float>)Single.Parse("2.75", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_pump_heating_minimum_outdoor_dry_bulb_temperature")]
public System.Nullable<float> HeatPumpHeatingMinimumOutdoorDryBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("-8", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_pump_defrost_maximum_outdoor_dry_bulb_temperature")]
public System.Nullable<float> HeatPumpDefrostMaximumOutdoorDryBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_pump_defrost_strategy")]
public HVACTemplate_System_UnitaryHeatPump_AirToAir_HeatPumpDefrostStrategy HeatPumpDefrostStrategy { get; set; } = (HVACTemplate_System_UnitaryHeatPump_AirToAir_HeatPumpDefrostStrategy)Enum.Parse(typeof(HVACTemplate_System_UnitaryHeatPump_AirToAir_HeatPumpDefrostStrategy), "ReverseCycle");
        

[JsonProperty("heat_pump_defrost_control")]
public HVACTemplate_System_UnitaryHeatPump_AirToAir_HeatPumpDefrostControl HeatPumpDefrostControl { get; set; } = (HVACTemplate_System_UnitaryHeatPump_AirToAir_HeatPumpDefrostControl)Enum.Parse(typeof(HVACTemplate_System_UnitaryHeatPump_AirToAir_HeatPumpDefrostControl), "Timed");
        

[Description("Fraction of time in defrost mode only applicable if Timed defrost control is spec" +
    "ified")]
[JsonProperty("heat_pump_defrost_time_period_fraction")]
public System.Nullable<float> HeatPumpDefrostTimePeriodFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.058333", CultureInfo.InvariantCulture);
        

[JsonProperty("supplemental_heating_coil_type")]
public HVACTemplate_System_UnitaryHeatPump_AirToAir_SupplementalHeatingCoilType SupplementalHeatingCoilType { get; set; } = (HVACTemplate_System_UnitaryHeatPump_AirToAir_SupplementalHeatingCoilType)Enum.Parse(typeof(HVACTemplate_System_UnitaryHeatPump_AirToAir_SupplementalHeatingCoilType), "Electric");
        

[Description("If blank, always on")]
[JsonProperty("supplemental_heating_coil_availability_schedule_name")]
public string SupplementalHeatingCoilAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("supplemental_heating_coil_capacity")]
public string SupplementalHeatingCoilCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Supplemental heater will not operate when outdoor temperature exceeds this value." +
    "")]
[JsonProperty("supplemental_heating_coil_maximum_outdoor_dry_bulb_temperature")]
public System.Nullable<float> SupplementalHeatingCoilMaximumOutdoorDryBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("21", CultureInfo.InvariantCulture);
        

[Description("Applies only if Supplemental Heating Coil Type is Gas")]
[JsonProperty("supplemental_gas_heating_coil_efficiency")]
public System.Nullable<float> SupplementalGasHeatingCoilEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[Description("Applies only if Supplemental Heating Coil Type is Gas")]
[JsonProperty("supplemental_gas_heating_coil_parasitic_electric_load")]
public System.Nullable<float> SupplementalGasHeatingCoilParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string MaximumOutdoorAirFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("minimum_outdoor_air_flow_rate")]
public string MinimumOutdoorAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("Schedule values multiply the minimum outdoor air flow rate If blank, multiplier i" +
    "s always one")]
[JsonProperty("minimum_outdoor_air_schedule_name")]
public string MinimumOutdoorAirScheduleName { get; set; } = "";
        

[JsonProperty("economizer_type")]
public HVACTemplate_System_UnitaryHeatPump_AirToAir_EconomizerType EconomizerType { get; set; } = (HVACTemplate_System_UnitaryHeatPump_AirToAir_EconomizerType)Enum.Parse(typeof(HVACTemplate_System_UnitaryHeatPump_AirToAir_EconomizerType), "NoEconomizer");
        

[JsonProperty("economizer_lockout")]
public HVACTemplate_System_UnitaryHeatPump_AirToAir_EconomizerLockout EconomizerLockout { get; set; } = (HVACTemplate_System_UnitaryHeatPump_AirToAir_EconomizerLockout)Enum.Parse(typeof(HVACTemplate_System_UnitaryHeatPump_AirToAir_EconomizerLockout), "NoLockout");
        

[Description("Enter the maximum outdoor dry-bulb temperature limit for FixedDryBulb economizer " +
    "control type. No input or blank input means this limit is not operative. Limit i" +
    "s applied regardless of economizer control type.")]
[JsonProperty("economizer_maximum_limit_dry_bulb_temperature")]
public System.Nullable<float> EconomizerMaximumLimitDryBulbTemperature { get; set; } = null;
        

[Description("Enter the maximum outdoor enthalpy limit for FixedEnthalpy economizer control typ" +
    "e. No input or blank input means this limit is not operative Limit is applied re" +
    "gardless of economizer control type.")]
[JsonProperty("economizer_maximum_limit_enthalpy")]
public System.Nullable<float> EconomizerMaximumLimitEnthalpy { get; set; } = null;
        

[Description("Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb " +
    "economizer control type. No input or blank input means this limit is not operati" +
    "ve. Limit is applied regardless of economizer control type.")]
[JsonProperty("economizer_maximum_limit_dewpoint_temperature")]
public System.Nullable<float> EconomizerMaximumLimitDewpointTemperature { get; set; } = null;
        

[Description("Enter the minimum outdoor dry-bulb temperature limit for economizer control. No i" +
    "nput or blank input means this limit is not operative Limit is applied regardles" +
    "s of economizer control type.")]
[JsonProperty("economizer_minimum_limit_dry_bulb_temperature")]
public System.Nullable<float> EconomizerMinimumLimitDryBulbTemperature { get; set; } = null;
        

[Description("Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
[JsonProperty("supply_plenum_name")]
public string SupplyPlenumName { get; set; } = "";
        

[Description("Plenum zone name. Return plenum serves all zones on this system. Blank if none.")]
[JsonProperty("return_plenum_name")]
public string ReturnPlenumName { get; set; } = "";
        

[JsonProperty("night_cycle_control")]
public HVACTemplate_System_UnitaryHeatPump_AirToAir_NightCycleControl NightCycleControl { get; set; } = (HVACTemplate_System_UnitaryHeatPump_AirToAir_NightCycleControl)Enum.Parse(typeof(HVACTemplate_System_UnitaryHeatPump_AirToAir_NightCycleControl), "StayOff");
        

[Description("Applicable only if Night Cycle Control is Cycle On Control Zone.")]
[JsonProperty("night_cycle_control_zone_name")]
public string NightCycleControlZoneName { get; set; } = "";
        

[JsonProperty("heat_recovery_type")]
public HVACTemplate_System_UnitaryHeatPump_AirToAir_HeatRecoveryType HeatRecoveryType { get; set; } = (HVACTemplate_System_UnitaryHeatPump_AirToAir_HeatRecoveryType)Enum.Parse(typeof(HVACTemplate_System_UnitaryHeatPump_AirToAir_HeatRecoveryType), "None");
        

[JsonProperty("sensible_heat_recovery_effectiveness")]
public System.Nullable<float> SensibleHeatRecoveryEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[Description("Applicable only if Heat Recovery Type is Enthalpy.")]
[JsonProperty("latent_heat_recovery_effectiveness")]
public System.Nullable<float> LatentHeatRecoveryEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
        

[JsonProperty("humidifier_type")]
public HVACTemplate_System_UnitaryHeatPump_AirToAir_HumidifierType HumidifierType { get; set; } = (HVACTemplate_System_UnitaryHeatPump_AirToAir_HumidifierType)Enum.Parse(typeof(HVACTemplate_System_UnitaryHeatPump_AirToAir_HumidifierType), "None");
        

[Description("If blank, always available")]
[JsonProperty("humidifier_availability_schedule_name")]
public string HumidifierAvailabilityScheduleName { get; set; } = "";
        

[Description("Moisture output rate at full rated power input. The humidifier does not currently" +
    " autosize, so the default is very large to allow for adequate capacity.")]
[JsonProperty("humidifier_rated_capacity")]
public System.Nullable<float> HumidifierRatedCapacity { get; set; } = (System.Nullable<float>)Single.Parse("1E-06", CultureInfo.InvariantCulture);
        

[Description("Electric power input at rated capacity moisture output. Power consumption is prop" +
    "ortional to moisture output with no part-load penalty.")]
[JsonProperty("humidifier_rated_electric_power")]
public string HumidifierRatedElectricPower { get; set; } = (System.String)"Autosize";
        

[Description("Zone name where humidistat is located")]
[JsonProperty("humidifier_control_zone_name")]
public string HumidifierControlZoneName { get; set; } = "";
        

[Description("Zone relative humidity setpoint in percent (0 to 100)")]
[JsonProperty("humidifier_setpoint")]
public System.Nullable<float> HumidifierSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[Description("Specifies if the system has a return fan.")]
[JsonProperty("return_fan")]
public EmptyNoYes ReturnFan { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("return_fan_total_efficiency")]
public System.Nullable<float> ReturnFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_delta_pressure")]
public System.Nullable<float> ReturnFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("500", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_motor_efficiency")]
public System.Nullable<float> ReturnFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_motor_in_air_stream_fraction")]
public System.Nullable<float> ReturnFanMotorInAirStreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    public enum HVACTemplate_System_UnitaryHeatPump_AirToAir_SupplyFanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum HVACTemplate_System_UnitaryHeatPump_AirToAir_CoolingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SingleSpeedDX")]
        SingleSpeedDX = 1,
    }
    
    public enum HVACTemplate_System_UnitaryHeatPump_AirToAir_HeatPumpHeatingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SingleSpeedDXHeatPump")]
        SingleSpeedDXHeatPump = 1,
    }
    
    public enum HVACTemplate_System_UnitaryHeatPump_AirToAir_HeatPumpDefrostStrategy
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Resistive")]
        Resistive = 1,
        
        [JsonProperty("ReverseCycle")]
        ReverseCycle = 2,
    }
    
    public enum HVACTemplate_System_UnitaryHeatPump_AirToAir_HeatPumpDefrostControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("OnDemand")]
        OnDemand = 1,
        
        [JsonProperty("Timed")]
        Timed = 2,
    }
    
    public enum HVACTemplate_System_UnitaryHeatPump_AirToAir_SupplementalHeatingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
    }
    
    public enum HVACTemplate_System_UnitaryHeatPump_AirToAir_EconomizerType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DifferentialDryBulb")]
        DifferentialDryBulb = 1,
        
        [JsonProperty("DifferentialDryBulbAndEnthalpy")]
        DifferentialDryBulbAndEnthalpy = 2,
        
        [JsonProperty("DifferentialEnthalpy")]
        DifferentialEnthalpy = 3,
        
        [JsonProperty("ElectronicEnthalpy")]
        ElectronicEnthalpy = 4,
        
        [JsonProperty("FixedDewPointAndDryBulb")]
        FixedDewPointAndDryBulb = 5,
        
        [JsonProperty("FixedDryBulb")]
        FixedDryBulb = 6,
        
        [JsonProperty("FixedEnthalpy")]
        FixedEnthalpy = 7,
        
        [JsonProperty("NoEconomizer")]
        NoEconomizer = 8,
    }
    
    public enum HVACTemplate_System_UnitaryHeatPump_AirToAir_EconomizerLockout
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LockoutWithCompressor")]
        LockoutWithCompressor = 1,
        
        [JsonProperty("LockoutWithHeating")]
        LockoutWithHeating = 2,
        
        [JsonProperty("NoLockout")]
        NoLockout = 3,
    }
    
    public enum HVACTemplate_System_UnitaryHeatPump_AirToAir_NightCycleControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CycleOnAny")]
        CycleOnAny = 1,
        
        [JsonProperty("CycleOnControlZone")]
        CycleOnControlZone = 2,
        
        [JsonProperty("StayOff")]
        StayOff = 3,
    }
    
    public enum HVACTemplate_System_UnitaryHeatPump_AirToAir_HeatRecoveryType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Sensible")]
        Sensible = 3,
    }
    
    public enum HVACTemplate_System_UnitaryHeatPump_AirToAir_HumidifierType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ElectricSteam")]
        ElectricSteam = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    [Description("Unitary HVAC system with optional cooling and heating. Supports DX and chilled wa" +
        "ter, cooling, gas, electric, and hot water heating, air-to-air and water-to-air " +
        "heat pumps.")]
    [JsonObject("HVACTemplate:System:UnitarySystem")]
    public class HVACTemplate_System_UnitarySystem : BHoMObject, IEnergyPlusClass
    {
        

[Description("If blank, always available. Also see Supply Fan Operating Mode Schedule Name fiel" +
    "d.")]
[JsonProperty("system_availability_schedule_name")]
public string SystemAvailabilityScheduleName { get; set; } = "";
        

[Description("Load control requires a Controlling Zone name. SetPoint control requires set poin" +
    "ts at coil outlet nodes. The user must add appropriate SetpointManager objects t" +
    "o the idf file.")]
[JsonProperty("control_type")]
public HVACTemplate_System_UnitarySystem_ControlType ControlType { get; set; } = (HVACTemplate_System_UnitarySystem_ControlType)Enum.Parse(typeof(HVACTemplate_System_UnitarySystem_ControlType), "Load");
        

[Description("This field is required if Control Type is Load.")]
[JsonProperty("control_zone_or_thermostat_location_name")]
public string ControlZoneOrThermostatLocationName { get; set; } = "";
        

[Description(@"Supply air flow rate during cooling operation This field may be set to ""autosize"". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty("cooling_supply_air_flow_rate")]
public string CoolingSupplyAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description(@"Supply air flow rate during heating operation This field may be set to ""autosize"". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty("heating_supply_air_flow_rate")]
public string HeatingSupplyAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description(@"Supply air flow rate when no cooling or heating is needed Only used when heat pump fan operating mode is Continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used. This field may be set to ""autosize"". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty("no_load_supply_air_flow_rate")]
public string NoLoadSupplyAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("Refers to a schedule to specify unitary supply fan operating mode. Schedule value" +
    "s of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous fan " +
    "(on) If this field is left blank, a schedule of always zero (cycling fan) will b" +
    "e used.")]
[JsonProperty("supply_fan_operating_mode_schedule_name")]
public string SupplyFanOperatingModeScheduleName { get; set; } = "";
        

[JsonProperty("supply_fan_placement")]
public HVACTemplate_System_UnitarySystem_SupplyFanPlacement SupplyFanPlacement { get; set; } = (HVACTemplate_System_UnitarySystem_SupplyFanPlacement)Enum.Parse(typeof(HVACTemplate_System_UnitarySystem_SupplyFanPlacement), "BlowThrough");
        

[JsonProperty("supply_fan_total_efficiency")]
public System.Nullable<float> SupplyFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_delta_pressure")]
public System.Nullable<float> SupplyFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("600", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_motor_efficiency")]
public System.Nullable<float> SupplyFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_motor_in_air_stream_fraction")]
public System.Nullable<float> SupplyFanMotorInAirStreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("cooling_coil_type")]
public HVACTemplate_System_UnitarySystem_CoolingCoilType CoolingCoilType { get; set; } = (HVACTemplate_System_UnitarySystem_CoolingCoilType)Enum.Parse(typeof(HVACTemplate_System_UnitarySystem_CoolingCoilType), "SingleSpeedDX");
        

[Description("Used only for Cooling Coil Type = MultiSpeedDX.")]
[JsonProperty("number_of_speeds_for_cooling")]
public System.Nullable<float> NumberOfSpeedsForCooling { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("If blank, always on")]
[JsonProperty("cooling_coil_availability_schedule_name")]
public string CoolingCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Used for sizing.")]
[JsonProperty("cooling_design_supply_air_temperature")]
public System.Nullable<float> CoolingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("12.8", CultureInfo.InvariantCulture);
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat Ratin" +
    "g point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and a" +
    "ir entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty("dx_cooling_coil_gross_rated_total_capacity")]
public string DxCoolingCoilGrossRatedTotalCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Rated sensible heat ratio (gross sensible capacity/gross total capacity) Sensible" +
    " and total capacities do not include effect of supply fan heat")]
[JsonProperty("dx_cooling_coil_gross_rated_sensible_heat_ratio")]
public string DxCoolingCoilGrossRatedSensibleHeatRatio { get; set; } = (System.String)"Autosize";
        

[Description("Gross cooling capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply fan heat or supply fan electric power input")]
[JsonProperty("dx_cooling_coil_gross_rated_cop")]
public System.Nullable<float> DxCoolingCoilGrossRatedCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_coil_type")]
public HVACTemplate_System_UnitarySystem_HeatingCoilType HeatingCoilType { get; set; } = (HVACTemplate_System_UnitarySystem_HeatingCoilType)Enum.Parse(typeof(HVACTemplate_System_UnitarySystem_HeatingCoilType), "Gas");
        

[Description("Used only for Heating Coil Type = MultiSpeedDXHeatPumpAirSource), MultiStageElect" +
    "ric, or MultiStageGas.")]
[JsonProperty("number_of_speeds_or_stages_for_heating")]
public System.Nullable<float> NumberOfSpeedsOrStagesForHeating { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("If blank, always on")]
[JsonProperty("heating_coil_availability_schedule_name")]
public string HeatingCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Used for sizing.")]
[JsonProperty("heating_design_supply_air_temperature")]
public System.Nullable<float> HeatingDesignSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[Description("Rated heating capacity excluding the effect of supply air fan heat Rating point o" +
    "utdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C Rating point heating c" +
    "oil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty("heating_coil_gross_rated_capacity")]
public string HeatingCoilGrossRatedCapacity { get; set; } = (System.String)"Autosize";
        

[JsonProperty("gas_heating_coil_efficiency")]
public System.Nullable<float> GasHeatingCoilEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[JsonProperty("gas_heating_coil_parasitic_electric_load")]
public System.Nullable<float> GasHeatingCoilParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Heating Coil Rated Capacity divided by power input to the compressor and outdoor fan, does not include supply air fan heat or supply air fan electrical energy. Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C Applies only to DX coils")]
[JsonProperty("heat_pump_heating_coil_gross_rated_cop")]
public System.Nullable<float> HeatPumpHeatingCoilGrossRatedCop { get; set; } = (System.Nullable<float>)Single.Parse("2.75", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_pump_heating_minimum_outdoor_dry_bulb_temperature")]
public System.Nullable<float> HeatPumpHeatingMinimumOutdoorDryBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("-8", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_pump_defrost_maximum_outdoor_dry_bulb_temperature")]
public System.Nullable<float> HeatPumpDefrostMaximumOutdoorDryBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_pump_defrost_strategy")]
public HVACTemplate_System_UnitarySystem_HeatPumpDefrostStrategy HeatPumpDefrostStrategy { get; set; } = (HVACTemplate_System_UnitarySystem_HeatPumpDefrostStrategy)Enum.Parse(typeof(HVACTemplate_System_UnitarySystem_HeatPumpDefrostStrategy), "ReverseCycle");
        

[JsonProperty("heat_pump_defrost_control")]
public HVACTemplate_System_UnitarySystem_HeatPumpDefrostControl HeatPumpDefrostControl { get; set; } = (HVACTemplate_System_UnitarySystem_HeatPumpDefrostControl)Enum.Parse(typeof(HVACTemplate_System_UnitarySystem_HeatPumpDefrostControl), "Timed");
        

[Description("Fraction of time in defrost mode only applicable if Timed defrost control is spec" +
    "ified")]
[JsonProperty("heat_pump_defrost_time_period_fraction")]
public System.Nullable<float> HeatPumpDefrostTimePeriodFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.058333", CultureInfo.InvariantCulture);
        

[JsonProperty("supplemental_heating_or_reheat_coil_type")]
public HVACTemplate_System_UnitarySystem_SupplementalHeatingOrReheatCoilType SupplementalHeatingOrReheatCoilType { get; set; } = (HVACTemplate_System_UnitarySystem_SupplementalHeatingOrReheatCoilType)Enum.Parse(typeof(HVACTemplate_System_UnitarySystem_SupplementalHeatingOrReheatCoilType), "None");
        

[Description("If blank, always on")]
[JsonProperty("supplemental_heating_or_reheat_coil_availability_schedule_name")]
public string SupplementalHeatingOrReheatCoilAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("supplemental_heating_or_reheat_coil_capacity")]
public string SupplementalHeatingOrReheatCoilCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Supplemental heater will not operate when outdoor temperature exceeds this value." +
    "")]
[JsonProperty("supplemental_heating_or_reheat_coil_maximum_outdoor_dry_bulb_temperature")]
public System.Nullable<float> SupplementalHeatingOrReheatCoilMaximumOutdoorDryBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("21", CultureInfo.InvariantCulture);
        

[Description("Applies only if Supplemental Heating Coil Type is Gas")]
[JsonProperty("supplemental_gas_heating_or_reheat_coil_efficiency")]
public System.Nullable<float> SupplementalGasHeatingOrReheatCoilEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[Description("Applies only if Supplemental Heating Coil Type is Gas")]
[JsonProperty("supplemental_gas_heating_or_reheat_coil_parasitic_electric_load")]
public System.Nullable<float> SupplementalGasHeatingOrReheatCoilParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string MaximumOutdoorAirFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("minimum_outdoor_air_flow_rate")]
public string MinimumOutdoorAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("Schedule values multiply the minimum outdoor air flow rate If blank, multiplier i" +
    "s always one")]
[JsonProperty("minimum_outdoor_air_schedule_name")]
public string MinimumOutdoorAirScheduleName { get; set; } = "";
        

[JsonProperty("economizer_type")]
public HVACTemplate_System_UnitarySystem_EconomizerType EconomizerType { get; set; } = (HVACTemplate_System_UnitarySystem_EconomizerType)Enum.Parse(typeof(HVACTemplate_System_UnitarySystem_EconomizerType), "NoEconomizer");
        

[JsonProperty("economizer_lockout")]
public HVACTemplate_System_UnitarySystem_EconomizerLockout EconomizerLockout { get; set; } = (HVACTemplate_System_UnitarySystem_EconomizerLockout)Enum.Parse(typeof(HVACTemplate_System_UnitarySystem_EconomizerLockout), "NoLockout");
        

[Description("Enter the maximum outdoor dry-bulb temperature limit for FixedDryBulb economizer " +
    "control type. No input or blank input means this limit is not operative. Limit i" +
    "s applied regardless of economizer control type.")]
[JsonProperty("economizer_maximum_limit_dry_bulb_temperature")]
public System.Nullable<float> EconomizerMaximumLimitDryBulbTemperature { get; set; } = null;
        

[Description("Enter the maximum outdoor enthalpy limit for FixedEnthalpy economizer control typ" +
    "e. No input or blank input means this limit is not operative Limit is applied re" +
    "gardless of economizer control type.")]
[JsonProperty("economizer_maximum_limit_enthalpy")]
public System.Nullable<float> EconomizerMaximumLimitEnthalpy { get; set; } = null;
        

[Description("Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb " +
    "economizer control type. No input or blank input means this limit is not operati" +
    "ve. Limit is applied regardless of economizer control type.")]
[JsonProperty("economizer_maximum_limit_dewpoint_temperature")]
public System.Nullable<float> EconomizerMaximumLimitDewpointTemperature { get; set; } = null;
        

[Description("Enter the minimum outdoor dry-bulb temperature limit for economizer control. No i" +
    "nput or blank input means this limit is not operative Limit is applied regardles" +
    "s of economizer control type.")]
[JsonProperty("economizer_minimum_limit_dry_bulb_temperature")]
public System.Nullable<float> EconomizerMinimumLimitDryBulbTemperature { get; set; } = null;
        

[Description("Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
[JsonProperty("supply_plenum_name")]
public string SupplyPlenumName { get; set; } = "";
        

[Description("Plenum zone name. Return plenum serves all zones on this system. Blank if none.")]
[JsonProperty("return_plenum_name")]
public string ReturnPlenumName { get; set; } = "";
        

[JsonProperty("heat_recovery_type")]
public HVACTemplate_System_UnitarySystem_HeatRecoveryType HeatRecoveryType { get; set; } = (HVACTemplate_System_UnitarySystem_HeatRecoveryType)Enum.Parse(typeof(HVACTemplate_System_UnitarySystem_HeatRecoveryType), "None");
        

[JsonProperty("sensible_heat_recovery_effectiveness")]
public System.Nullable<float> SensibleHeatRecoveryEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[Description("Applicable only if Heat Recovery Type is Enthalpy.")]
[JsonProperty("latent_heat_recovery_effectiveness")]
public System.Nullable<float> LatentHeatRecoveryEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_recovery_heat_exchanger_type")]
public HVACTemplate_System_UnitarySystem_HeatRecoveryHeatExchangerType HeatRecoveryHeatExchangerType { get; set; } = (HVACTemplate_System_UnitarySystem_HeatRecoveryHeatExchangerType)Enum.Parse(typeof(HVACTemplate_System_UnitarySystem_HeatRecoveryHeatExchangerType), "Plate");
        

[JsonProperty("heat_recovery_frost_control_type")]
public HVACTemplate_System_UnitarySystem_HeatRecoveryFrostControlType HeatRecoveryFrostControlType { get; set; } = (HVACTemplate_System_UnitarySystem_HeatRecoveryFrostControlType)Enum.Parse(typeof(HVACTemplate_System_UnitarySystem_HeatRecoveryFrostControlType), "None");
        

[Description(@"None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint, reheat with reheat coil If no reheat coil specified, cold supply temps may occur. Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only for Cooling Coil Type = TwoStageHumidityControlDX or HeatExchangerAssistedDX")]
[JsonProperty("dehumidification_control_type")]
public HVACTemplate_System_UnitarySystem_DehumidificationControlType DehumidificationControlType { get; set; } = (HVACTemplate_System_UnitarySystem_DehumidificationControlType)Enum.Parse(typeof(HVACTemplate_System_UnitarySystem_DehumidificationControlType), "None");
        

[Description("Zone relative humidity setpoint in percent (0 to 100) Ignored if Dehumidification" +
    " Relative Humidity Setpoint Schedule specified below")]
[JsonProperty("dehumidification_relative_humidity_setpoint")]
public System.Nullable<float> DehumidificationRelativeHumiditySetpoint { get; set; } = (System.Nullable<float>)Single.Parse("60", CultureInfo.InvariantCulture);
        

[Description("Leave blank to use constant setpoint specified in Dehumidification Relative Humid" +
    "ity Setpoint above. Schedule values must be in percent relative humidity (0 to 1" +
    "00).")]
[JsonProperty("dehumidification_relative_humidity_setpoint_schedule_name")]
public string DehumidificationRelativeHumiditySetpointScheduleName { get; set; } = "";
        

[JsonProperty("humidifier_type")]
public HVACTemplate_System_UnitarySystem_HumidifierType HumidifierType { get; set; } = (HVACTemplate_System_UnitarySystem_HumidifierType)Enum.Parse(typeof(HVACTemplate_System_UnitarySystem_HumidifierType), "None");
        

[Description("If blank, always available")]
[JsonProperty("humidifier_availability_schedule_name")]
public string HumidifierAvailabilityScheduleName { get; set; } = "";
        

[Description("Moisture output rate at full rated power input. The humidifier does not currently" +
    " autosize, so the default is very large to allow for adequate capacity.")]
[JsonProperty("humidifier_rated_capacity")]
public System.Nullable<float> HumidifierRatedCapacity { get; set; } = (System.Nullable<float>)Single.Parse("1E-06", CultureInfo.InvariantCulture);
        

[Description("Electric power input at rated capacity moisture output. Power consumption is prop" +
    "ortional to moisture output with no part-load penalty.")]
[JsonProperty("humidifier_rated_electric_power")]
public string HumidifierRatedElectricPower { get; set; } = (System.String)"Autosize";
        

[Description("Zone name where humidistat is located")]
[JsonProperty("humidifier_control_zone_name")]
public string HumidifierControlZoneName { get; set; } = "";
        

[Description("Zone relative humidity setpoint in percent (0 to 100). Ignored if Humidifier Rela" +
    "tive Humidity Setpoint Schedule specified below")]
[JsonProperty("humidifier_relative_humidity_setpoint")]
public System.Nullable<float> HumidifierRelativeHumiditySetpoint { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[Description("Leave blank to use constant setpoint specified in Humidifier Relative Humidity Se" +
    "tpoint above. Schedule values must be in percent relative humidity (0 to 100).")]
[JsonProperty("humidifier_relative_humidity_setpoint_schedule_name")]
public string HumidifierRelativeHumiditySetpointScheduleName { get; set; } = "";
        

[Description("Select whether autosized system supply flow rate is the sum of Coincident or NonC" +
    "oincident zone air flow rates.")]
[JsonProperty("sizing_option")]
public HVACTemplate_System_UnitarySystem_SizingOption SizingOption { get; set; } = (HVACTemplate_System_UnitarySystem_SizingOption)Enum.Parse(typeof(HVACTemplate_System_UnitarySystem_SizingOption), "NonCoincident");
        

[Description("Specifies if the system has a return fan.")]
[JsonProperty("return_fan")]
public EmptyNoYes ReturnFan { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("return_fan_total_efficiency")]
public System.Nullable<float> ReturnFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_delta_pressure")]
public System.Nullable<float> ReturnFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("300", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_motor_efficiency")]
public System.Nullable<float> ReturnFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_motor_in_air_stream_fraction")]
public System.Nullable<float> ReturnFanMotorInAirStreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    public enum HVACTemplate_System_UnitarySystem_ControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Load")]
        Load = 1,
        
        [JsonProperty("SetPoint")]
        SetPoint = 2,
    }
    
    public enum HVACTemplate_System_UnitarySystem_SupplyFanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum HVACTemplate_System_UnitarySystem_CoolingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ChilledWater")]
        ChilledWater = 1,
        
        [JsonProperty("ChilledWaterDetailedFlatModel")]
        ChilledWaterDetailedFlatModel = 2,
        
        [JsonProperty("HeatExchangerAssistedChilledWater")]
        HeatExchangerAssistedChilledWater = 3,
        
        [JsonProperty("HeatExchangerAssistedDX")]
        HeatExchangerAssistedDX = 4,
        
        [JsonProperty("MultiSpeedDX")]
        MultiSpeedDX = 5,
        
        [JsonProperty("None")]
        None = 6,
        
        [JsonProperty("SingleSpeedDX")]
        SingleSpeedDX = 7,
        
        [JsonProperty("SingleSpeedDXWaterCooled")]
        SingleSpeedDXWaterCooled = 8,
        
        [JsonProperty("TwoSpeedDX")]
        TwoSpeedDX = 9,
        
        [JsonProperty("TwoStageDX")]
        TwoStageDX = 10,
        
        [JsonProperty("TwoStageHumidityControlDX")]
        TwoStageHumidityControlDX = 11,
    }
    
    public enum HVACTemplate_System_UnitarySystem_HeatingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("MultiSpeedDXHeatPumpAirSource")]
        MultiSpeedDXHeatPumpAirSource = 4,
        
        [JsonProperty("MultiStageElectric")]
        MultiStageElectric = 5,
        
        [JsonProperty("MultiStageGas")]
        MultiStageGas = 6,
        
        [JsonProperty("None")]
        None = 7,
        
        [JsonProperty("SingleSpeedDXHeatPumpAirSource")]
        SingleSpeedDXHeatPumpAirSource = 8,
        
        [JsonProperty("SingleSpeedDXHeatPumpWaterSource")]
        SingleSpeedDXHeatPumpWaterSource = 9,
    }
    
    public enum HVACTemplate_System_UnitarySystem_HeatPumpDefrostStrategy
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Resistive")]
        Resistive = 1,
        
        [JsonProperty("ReverseCycle")]
        ReverseCycle = 2,
    }
    
    public enum HVACTemplate_System_UnitarySystem_HeatPumpDefrostControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("OnDemand")]
        OnDemand = 1,
        
        [JsonProperty("Timed")]
        Timed = 2,
    }
    
    public enum HVACTemplate_System_UnitarySystem_SupplementalHeatingOrReheatCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DesuperHeater")]
        DesuperHeater = 1,
        
        [JsonProperty("Electric")]
        Electric = 2,
        
        [JsonProperty("Gas")]
        Gas = 3,
        
        [JsonProperty("HotWater")]
        HotWater = 4,
        
        [JsonProperty("None")]
        None = 5,
    }
    
    public enum HVACTemplate_System_UnitarySystem_EconomizerType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DifferentialDryBulb")]
        DifferentialDryBulb = 1,
        
        [JsonProperty("DifferentialDryBulbAndEnthalpy")]
        DifferentialDryBulbAndEnthalpy = 2,
        
        [JsonProperty("DifferentialEnthalpy")]
        DifferentialEnthalpy = 3,
        
        [JsonProperty("ElectronicEnthalpy")]
        ElectronicEnthalpy = 4,
        
        [JsonProperty("FixedDewPointAndDryBulb")]
        FixedDewPointAndDryBulb = 5,
        
        [JsonProperty("FixedDryBulb")]
        FixedDryBulb = 6,
        
        [JsonProperty("FixedEnthalpy")]
        FixedEnthalpy = 7,
        
        [JsonProperty("NoEconomizer")]
        NoEconomizer = 8,
    }
    
    public enum HVACTemplate_System_UnitarySystem_EconomizerLockout
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LockoutWithCompressor")]
        LockoutWithCompressor = 1,
        
        [JsonProperty("LockoutWithHeating")]
        LockoutWithHeating = 2,
        
        [JsonProperty("NoLockout")]
        NoLockout = 3,
    }
    
    public enum HVACTemplate_System_UnitarySystem_HeatRecoveryType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Sensible")]
        Sensible = 3,
    }
    
    public enum HVACTemplate_System_UnitarySystem_HeatRecoveryHeatExchangerType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Plate")]
        Plate = 1,
        
        [JsonProperty("Rotary")]
        Rotary = 2,
    }
    
    public enum HVACTemplate_System_UnitarySystem_HeatRecoveryFrostControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ExhaustAirRecirculation")]
        ExhaustAirRecirculation = 1,
        
        [JsonProperty("ExhaustOnly")]
        ExhaustOnly = 2,
        
        [JsonProperty("MinimumExhaustTemperature")]
        MinimumExhaustTemperature = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HVACTemplate_System_UnitarySystem_DehumidificationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("Multimode")]
        Multimode = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum HVACTemplate_System_UnitarySystem_HumidifierType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ElectricSteam")]
        ElectricSteam = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    public enum HVACTemplate_System_UnitarySystem_SizingOption
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Coincident")]
        Coincident = 1,
        
        [JsonProperty("NonCoincident")]
        NonCoincident = 2,
    }
    
    [Description("Variable Air Volume (VAV) air loop with optional heating coil and optional prehea" +
        "t.")]
    [JsonObject("HVACTemplate:System:VAV")]
    public class HVACTemplate_System_VAV : BHoMObject, IEnergyPlusClass
    {
        

[Description("If blank, always on; VAV System always on. Schedule is used in availability manag" +
    "er and fan scheduling. Also see \"Night Cycle Control\" field.")]
[JsonProperty("system_availability_schedule_name")]
public string SystemAvailabilityScheduleName { get; set; } = "";
        

[Description("This field may be set to \"autosize\". If a value is entered, it will *not* be mult" +
    "iplied by any sizing factor or by zone multipliers. If using zone multipliers a " +
    "value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty("supply_fan_maximum_flow_rate")]
public string SupplyFanMaximumFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("This field is only used to set a minimum part load on the VAV fan power curve. Au" +
    "tosize or zero is recommended.")]
[JsonProperty("supply_fan_minimum_flow_rate")]
public string SupplyFanMinimumFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("supply_fan_total_efficiency")]
public System.Nullable<float> SupplyFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_delta_pressure")]
public System.Nullable<float> SupplyFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("1000", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_motor_efficiency")]
public System.Nullable<float> SupplyFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_motor_in_air_stream_fraction")]
public System.Nullable<float> SupplyFanMotorInAirStreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("cooling_coil_type")]
public HVACTemplate_System_VAV_CoolingCoilType CoolingCoilType { get; set; } = (HVACTemplate_System_VAV_CoolingCoilType)Enum.Parse(typeof(HVACTemplate_System_VAV_CoolingCoilType), "ChilledWater");
        

[Description("If blank, always on")]
[JsonProperty("cooling_coil_availability_schedule_name")]
public string CoolingCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Leave blank if constant setpoint")]
[JsonProperty("cooling_coil_setpoint_schedule_name")]
public string CoolingCoilSetpointScheduleName { get; set; } = "";
        

[Description("Used for sizing and as constant setpoint if no Cooling Coil Setpoint Schedule Nam" +
    "e is specified.")]
[JsonProperty("cooling_coil_design_setpoint")]
public System.Nullable<float> CoolingCoilDesignSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("12.8", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_coil_type")]
public HVACTemplate_System_VAV_HeatingCoilType HeatingCoilType { get; set; } = (HVACTemplate_System_VAV_HeatingCoilType)Enum.Parse(typeof(HVACTemplate_System_VAV_HeatingCoilType), "None");
        

[Description("If blank, always on")]
[JsonProperty("heating_coil_availability_schedule_name")]
public string HeatingCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Leave blank if constant setpoint")]
[JsonProperty("heating_coil_setpoint_schedule_name")]
public string HeatingCoilSetpointScheduleName { get; set; } = "";
        

[Description("Used for sizing and as constant setpoint if no Heating Coil Setpoint Schedule Nam" +
    "e is specified.")]
[JsonProperty("heating_coil_design_setpoint")]
public System.Nullable<float> HeatingCoilDesignSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[JsonProperty("gas_heating_coil_efficiency")]
public System.Nullable<float> GasHeatingCoilEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[JsonProperty("gas_heating_coil_parasitic_electric_load")]
public System.Nullable<float> GasHeatingCoilParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("preheat_coil_type")]
public HVACTemplate_System_VAV_PreheatCoilType PreheatCoilType { get; set; } = (HVACTemplate_System_VAV_PreheatCoilType)Enum.Parse(typeof(HVACTemplate_System_VAV_PreheatCoilType), "None");
        

[Description("If blank, always on")]
[JsonProperty("preheat_coil_availability_schedule_name")]
public string PreheatCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Leave blank if constant setpoint")]
[JsonProperty("preheat_coil_setpoint_schedule_name")]
public string PreheatCoilSetpointScheduleName { get; set; } = "";
        

[Description("Used for sizing and as constant setpoint if no Preheat Coil Setpoint Schedule Nam" +
    "e specified.")]
[JsonProperty("preheat_coil_design_setpoint")]
public System.Nullable<float> PreheatCoilDesignSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("7.2", CultureInfo.InvariantCulture);
        

[JsonProperty("gas_preheat_coil_efficiency")]
public System.Nullable<float> GasPreheatCoilEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[JsonProperty("gas_preheat_coil_parasitic_electric_load")]
public System.Nullable<float> GasPreheatCoilParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string MaximumOutdoorAirFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("minimum_outdoor_air_flow_rate")]
public string MinimumOutdoorAirFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("minimum_outdoor_air_control_type")]
public HVACTemplate_System_VAV_MinimumOutdoorAirControlType MinimumOutdoorAirControlType { get; set; } = (HVACTemplate_System_VAV_MinimumOutdoorAirControlType)Enum.Parse(typeof(HVACTemplate_System_VAV_MinimumOutdoorAirControlType), "ProportionalMinimum");
        

[Description("Schedule values multiply the Minimum Outdoor Air Flow Rate If blank, multiplier i" +
    "s always one")]
[JsonProperty("minimum_outdoor_air_schedule_name")]
public string MinimumOutdoorAirScheduleName { get; set; } = "";
        

[JsonProperty("economizer_type")]
public HVACTemplate_System_VAV_EconomizerType EconomizerType { get; set; } = (HVACTemplate_System_VAV_EconomizerType)Enum.Parse(typeof(HVACTemplate_System_VAV_EconomizerType), "NoEconomizer");
        

[JsonProperty("economizer_lockout")]
public HVACTemplate_System_VAV_EconomizerLockout EconomizerLockout { get; set; } = (HVACTemplate_System_VAV_EconomizerLockout)Enum.Parse(typeof(HVACTemplate_System_VAV_EconomizerLockout), "NoLockout");
        

[Description("Outdoor temperature above which economizer is disabled and heat recovery is enabl" +
    "ed (if available). Blank means no limit.")]
[JsonProperty("economizer_upper_temperature_limit")]
public System.Nullable<float> EconomizerUpperTemperatureLimit { get; set; } = null;
        

[Description("Outdoor temperature below which economizer is disabled and heat recovery is enabl" +
    "ed (if available). Blank means no limit.")]
[JsonProperty("economizer_lower_temperature_limit")]
public System.Nullable<float> EconomizerLowerTemperatureLimit { get; set; } = null;
        

[Description("Outdoor enthalpy above which economizer is disabled and heat recovery is enabled " +
    "(if available). Blank means no limit.")]
[JsonProperty("economizer_upper_enthalpy_limit")]
public System.Nullable<float> EconomizerUpperEnthalpyLimit { get; set; } = null;
        

[Description("Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb " +
    "economizer control type. No input or blank input means this limit is not operati" +
    "ve. Limit is applied regardless of economizer control type.")]
[JsonProperty("economizer_maximum_limit_dewpoint_temperature")]
public System.Nullable<float> EconomizerMaximumLimitDewpointTemperature { get; set; } = null;
        

[Description("Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
[JsonProperty("supply_plenum_name")]
public string SupplyPlenumName { get; set; } = "";
        

[Description("Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
[JsonProperty("return_plenum_name")]
public string ReturnPlenumName { get; set; } = "";
        

[JsonProperty("supply_fan_placement")]
public HVACTemplate_System_VAV_SupplyFanPlacement SupplyFanPlacement { get; set; } = (HVACTemplate_System_VAV_SupplyFanPlacement)Enum.Parse(typeof(HVACTemplate_System_VAV_SupplyFanPlacement), "DrawThrough");
        

[Description("This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-20" +
    "04 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of" +
    " coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Va" +
    "lues table.")]
[JsonProperty("supply_fan_part_load_power_coefficients")]
public HVACTemplate_System_VAV_SupplyFanPartLoadPowerCoefficients SupplyFanPartLoadPowerCoefficients { get; set; } = (HVACTemplate_System_VAV_SupplyFanPartLoadPowerCoefficients)Enum.Parse(typeof(HVACTemplate_System_VAV_SupplyFanPartLoadPowerCoefficients), "InletVaneDampers");
        

[JsonProperty("night_cycle_control")]
public HVACTemplate_System_VAV_NightCycleControl NightCycleControl { get; set; } = (HVACTemplate_System_VAV_NightCycleControl)Enum.Parse(typeof(HVACTemplate_System_VAV_NightCycleControl), "StayOff");
        

[Description("Applicable only if Night Cycle Control is Cycle On Control Zone.")]
[JsonProperty("night_cycle_control_zone_name")]
public string NightCycleControlZoneName { get; set; } = "";
        

[JsonProperty("heat_recovery_type")]
public HVACTemplate_System_VAV_HeatRecoveryType HeatRecoveryType { get; set; } = (HVACTemplate_System_VAV_HeatRecoveryType)Enum.Parse(typeof(HVACTemplate_System_VAV_HeatRecoveryType), "None");
        

[JsonProperty("sensible_heat_recovery_effectiveness")]
public System.Nullable<float> SensibleHeatRecoveryEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("latent_heat_recovery_effectiveness")]
public System.Nullable<float> LatentHeatRecoveryEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
        

[Description(@"Overrides Cooling Coil Setpoint Schedule Name None = no reset, control to Cooling Coil Design Setpoint Temperature or Schedule Warmest = reset as warm as possible yet meet all zone cooling loads at max supply air flow rate OutdoorAirTemperatureReset = reset based on outdoor air temperature (18.0C at 15.6C ODB, to the Cooling Design Setpoint at 26.7C) WarmestTemperatureFirst = reset as warm as possible yet meet all zone cooling loads at min supply air flow rate")]
[JsonProperty("cooling_coil_setpoint_reset_type")]
public HVACTemplate_System_VAV_CoolingCoilSetpointResetType CoolingCoilSetpointResetType { get; set; } = (HVACTemplate_System_VAV_CoolingCoilSetpointResetType)Enum.Parse(typeof(HVACTemplate_System_VAV_CoolingCoilSetpointResetType), "None");
        

[Description(@"Overrides Heating Coil Setpoint Schedule Name None = no reset, control to Heating Coil Design Setpoint Temperature or Schedule OutdoorAirTemperatureReset = reset based on outdoor air temperature (Heating Design Setpoint at -6.7C ODB to Heating Design Setpoint minus 5.2C at 10C ODB) min supply air flow rate")]
[JsonProperty("heating_coil_setpoint_reset_type")]
public HVACTemplate_System_VAV_HeatingCoilSetpointResetType HeatingCoilSetpointResetType { get; set; } = (HVACTemplate_System_VAV_HeatingCoilSetpointResetType)Enum.Parse(typeof(HVACTemplate_System_VAV_HeatingCoilSetpointResetType), "None");
        

[Description("None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint as " +
    "required to meet the humidity setpoint.")]
[JsonProperty("dehumidification_control_type")]
public HVACTemplate_System_VAV_DehumidificationControlType DehumidificationControlType { get; set; } = (HVACTemplate_System_VAV_DehumidificationControlType)Enum.Parse(typeof(HVACTemplate_System_VAV_DehumidificationControlType), "None");
        

[Description("Zone name where humidistat is located")]
[JsonProperty("dehumidification_control_zone_name")]
public string DehumidificationControlZoneName { get; set; } = "";
        

[Description("Zone relative humidity setpoint in percent (0 to 100)")]
[JsonProperty("dehumidification_setpoint")]
public System.Nullable<float> DehumidificationSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("60", CultureInfo.InvariantCulture);
        

[JsonProperty("humidifier_type")]
public HVACTemplate_System_VAV_HumidifierType HumidifierType { get; set; } = (HVACTemplate_System_VAV_HumidifierType)Enum.Parse(typeof(HVACTemplate_System_VAV_HumidifierType), "None");
        

[Description("If blank, always available")]
[JsonProperty("humidifier_availability_schedule_name")]
public string HumidifierAvailabilityScheduleName { get; set; } = "";
        

[Description("Moisture output rate at full rated power input. The humidifier does not currently" +
    " autosize, so the default is very large to allow for adequate capacity.")]
[JsonProperty("humidifier_rated_capacity")]
public System.Nullable<float> HumidifierRatedCapacity { get; set; } = (System.Nullable<float>)Single.Parse("1E-06", CultureInfo.InvariantCulture);
        

[Description("Electric power input at rated capacity moisture output. Power consumption is prop" +
    "ortional to moisture output with no part-load penalty.")]
[JsonProperty("humidifier_rated_electric_power")]
public string HumidifierRatedElectricPower { get; set; } = (System.String)"Autosize";
        

[Description("Zone name where humidistat is located")]
[JsonProperty("humidifier_control_zone_name")]
public string HumidifierControlZoneName { get; set; } = "";
        

[Description("Zone relative humidity setpoint in percent (0 to 100)")]
[JsonProperty("humidifier_setpoint")]
public System.Nullable<float> HumidifierSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[Description("Select whether autosized system supply flow rate is the sum of Coincident or NonC" +
    "oincident zone air flow rates.")]
[JsonProperty("sizing_option")]
public HVACTemplate_System_VAV_SizingOption SizingOption { get; set; } = (HVACTemplate_System_VAV_SizingOption)Enum.Parse(typeof(HVACTemplate_System_VAV_SizingOption), "NonCoincident");
        

[Description("Specifies if the system has a return fan.")]
[JsonProperty("return_fan")]
public EmptyNoYes ReturnFan { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("return_fan_total_efficiency")]
public System.Nullable<float> ReturnFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_delta_pressure")]
public System.Nullable<float> ReturnFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("500", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_motor_efficiency")]
public System.Nullable<float> ReturnFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_motor_in_air_stream_fraction")]
public System.Nullable<float> ReturnFanMotorInAirStreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-20" +
    "04 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of" +
    " coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Va" +
    "lues table.")]
[JsonProperty("return_fan_part_load_power_coefficients")]
public HVACTemplate_System_VAV_ReturnFanPartLoadPowerCoefficients ReturnFanPartLoadPowerCoefficients { get; set; } = (HVACTemplate_System_VAV_ReturnFanPartLoadPowerCoefficients)Enum.Parse(typeof(HVACTemplate_System_VAV_ReturnFanPartLoadPowerCoefficients), "InletVaneDampers");
    }
    
    public enum HVACTemplate_System_VAV_CoolingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ChilledWater")]
        ChilledWater = 1,
        
        [JsonProperty("ChilledWaterDetailedFlatModel")]
        ChilledWaterDetailedFlatModel = 2,
    }
    
    public enum HVACTemplate_System_VAV_HeatingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HVACTemplate_System_VAV_PreheatCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HVACTemplate_System_VAV_MinimumOutdoorAirControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FixedMinimum")]
        FixedMinimum = 1,
        
        [JsonProperty("ProportionalMinimum")]
        ProportionalMinimum = 2,
    }
    
    public enum HVACTemplate_System_VAV_EconomizerType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DifferentialDryBulb")]
        DifferentialDryBulb = 1,
        
        [JsonProperty("DifferentialDryBulbAndEnthalpy")]
        DifferentialDryBulbAndEnthalpy = 2,
        
        [JsonProperty("DifferentialEnthalpy")]
        DifferentialEnthalpy = 3,
        
        [JsonProperty("ElectronicEnthalpy")]
        ElectronicEnthalpy = 4,
        
        [JsonProperty("FixedDewPointAndDryBulb")]
        FixedDewPointAndDryBulb = 5,
        
        [JsonProperty("FixedDryBulb")]
        FixedDryBulb = 6,
        
        [JsonProperty("FixedEnthalpy")]
        FixedEnthalpy = 7,
        
        [JsonProperty("NoEconomizer")]
        NoEconomizer = 8,
    }
    
    public enum HVACTemplate_System_VAV_EconomizerLockout
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("NoLockout")]
        NoLockout = 1,
    }
    
    public enum HVACTemplate_System_VAV_SupplyFanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum HVACTemplate_System_VAV_SupplyFanPartLoadPowerCoefficients
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAE90.1-2004AppendixG")]
        ASHRAE9012004AppendixG = 1,
        
        [JsonProperty("InletVaneDampers")]
        InletVaneDampers = 2,
        
        [JsonProperty("OutletDampers")]
        OutletDampers = 3,
        
        [JsonProperty("VariableSpeedMotor")]
        VariableSpeedMotor = 4,
        
        [JsonProperty("VariableSpeedMotorPressureReset")]
        VariableSpeedMotorPressureReset = 5,
    }
    
    public enum HVACTemplate_System_VAV_NightCycleControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CycleOnAny")]
        CycleOnAny = 1,
        
        [JsonProperty("CycleOnAnyZoneFansOnly")]
        CycleOnAnyZoneFansOnly = 2,
        
        [JsonProperty("CycleOnControlZone")]
        CycleOnControlZone = 3,
        
        [JsonProperty("StayOff")]
        StayOff = 4,
    }
    
    public enum HVACTemplate_System_VAV_HeatRecoveryType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Sensible")]
        Sensible = 3,
    }
    
    public enum HVACTemplate_System_VAV_CoolingCoilSetpointResetType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 2,
        
        [JsonProperty("Warmest")]
        Warmest = 3,
        
        [JsonProperty("WarmestTemperatureFirst")]
        WarmestTemperatureFirst = 4,
    }
    
    public enum HVACTemplate_System_VAV_HeatingCoilSetpointResetType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 2,
    }
    
    public enum HVACTemplate_System_VAV_DehumidificationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    public enum HVACTemplate_System_VAV_HumidifierType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ElectricSteam")]
        ElectricSteam = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    public enum HVACTemplate_System_VAV_SizingOption
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Coincident")]
        Coincident = 1,
        
        [JsonProperty("NonCoincident")]
        NonCoincident = 2,
    }
    
    public enum HVACTemplate_System_VAV_ReturnFanPartLoadPowerCoefficients
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAE90.1-2004AppendixG")]
        ASHRAE9012004AppendixG = 1,
        
        [JsonProperty("InletVaneDampers")]
        InletVaneDampers = 2,
        
        [JsonProperty("OutletDampers")]
        OutletDampers = 3,
        
        [JsonProperty("VariableSpeedMotor")]
        VariableSpeedMotor = 4,
        
        [JsonProperty("VariableSpeedMotorPressureReset")]
        VariableSpeedMotorPressureReset = 5,
    }
    
    [Description("Packaged Variable Air Volume (PVAV) air loop with optional heating coil and optio" +
        "nal preheat.")]
    [JsonObject("HVACTemplate:System:PackagedVAV")]
    public class HVACTemplate_System_PackagedVAV : BHoMObject, IEnergyPlusClass
    {
        

[Description("If blank, always on; PVAV System always on. Schedule is used in availability mana" +
    "ger and fan scheduling. Also see \"Night Cycle Control\" field.")]
[JsonProperty("system_availability_schedule_name")]
public string SystemAvailabilityScheduleName { get; set; } = "";
        

[Description("This field may be set to \"autosize\". If a value is entered, it will *not* be mult" +
    "iplied by any sizing factor or by zone multipliers. If using zone multipliers a " +
    "value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty("supply_fan_maximum_flow_rate")]
public string SupplyFanMaximumFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("This field is only used to set a minimum part load on the VAV fan power curve. Au" +
    "tosize or zero is recommended.")]
[JsonProperty("supply_fan_minimum_flow_rate")]
public string SupplyFanMinimumFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("supply_fan_placement")]
public HVACTemplate_System_PackagedVAV_SupplyFanPlacement SupplyFanPlacement { get; set; } = (HVACTemplate_System_PackagedVAV_SupplyFanPlacement)Enum.Parse(typeof(HVACTemplate_System_PackagedVAV_SupplyFanPlacement), "DrawThrough");
        

[JsonProperty("supply_fan_total_efficiency")]
public System.Nullable<float> SupplyFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_delta_pressure")]
public System.Nullable<float> SupplyFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("1000", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_motor_efficiency")]
public System.Nullable<float> SupplyFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_motor_in_air_stream_fraction")]
public System.Nullable<float> SupplyFanMotorInAirStreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("cooling_coil_type")]
public HVACTemplate_System_PackagedVAV_CoolingCoilType CoolingCoilType { get; set; } = (HVACTemplate_System_PackagedVAV_CoolingCoilType)Enum.Parse(typeof(HVACTemplate_System_PackagedVAV_CoolingCoilType), "TwoSpeedDX");
        

[Description("If blank, always on")]
[JsonProperty("cooling_coil_availability_schedule_name")]
public string CoolingCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Leave blank if constant setpoint")]
[JsonProperty("cooling_coil_setpoint_schedule_name")]
public string CoolingCoilSetpointScheduleName { get; set; } = "";
        

[Description("Used for sizing and as constant setpoint if no Cooling Coil Setpoint Schedule Nam" +
    "e is specified.")]
[JsonProperty("cooling_coil_design_setpoint")]
public System.Nullable<float> CoolingCoilDesignSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("12.8", CultureInfo.InvariantCulture);
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("cooling_coil_gross_rated_total_capacity")]
public string CoolingCoilGrossRatedTotalCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Gross SHR")]
[JsonProperty("cooling_coil_gross_rated_sensible_heat_ratio")]
public string CoolingCoilGrossRatedSensibleHeatRatio { get; set; } = (System.String)"Autosize";
        

[Description("Gross cooling capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply fan heat or supply fan electric power input")]
[JsonProperty("cooling_coil_gross_rated_cop")]
public System.Nullable<float> CoolingCoilGrossRatedCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_coil_type")]
public HVACTemplate_System_PackagedVAV_HeatingCoilType HeatingCoilType { get; set; } = (HVACTemplate_System_PackagedVAV_HeatingCoilType)Enum.Parse(typeof(HVACTemplate_System_PackagedVAV_HeatingCoilType), "None");
        

[Description("If blank, always on")]
[JsonProperty("heating_coil_availability_schedule_name")]
public string HeatingCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Leave blank if constant setpoint")]
[JsonProperty("heating_coil_setpoint_schedule_name")]
public string HeatingCoilSetpointScheduleName { get; set; } = "";
        

[Description("Used for sizing and as constant setpoint if no Heating Coil Setpoint Schedule Nam" +
    "e is specified.")]
[JsonProperty("heating_coil_design_setpoint")]
public System.Nullable<float> HeatingCoilDesignSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_coil_capacity")]
public string HeatingCoilCapacity { get; set; } = (System.String)"Autosize";
        

[JsonProperty("gas_heating_coil_efficiency")]
public System.Nullable<float> GasHeatingCoilEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[JsonProperty("gas_heating_coil_parasitic_electric_load")]
public System.Nullable<float> GasHeatingCoilParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string MaximumOutdoorAirFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("minimum_outdoor_air_flow_rate")]
public string MinimumOutdoorAirFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("minimum_outdoor_air_control_type")]
public HVACTemplate_System_PackagedVAV_MinimumOutdoorAirControlType MinimumOutdoorAirControlType { get; set; } = (HVACTemplate_System_PackagedVAV_MinimumOutdoorAirControlType)Enum.Parse(typeof(HVACTemplate_System_PackagedVAV_MinimumOutdoorAirControlType), "ProportionalMinimum");
        

[Description("Schedule values multiply the Minimum Outdoor Air Flow Rate If blank, multiplier i" +
    "s always one")]
[JsonProperty("minimum_outdoor_air_schedule_name")]
public string MinimumOutdoorAirScheduleName { get; set; } = "";
        

[JsonProperty("economizer_type")]
public HVACTemplate_System_PackagedVAV_EconomizerType EconomizerType { get; set; } = (HVACTemplate_System_PackagedVAV_EconomizerType)Enum.Parse(typeof(HVACTemplate_System_PackagedVAV_EconomizerType), "NoEconomizer");
        

[JsonProperty("economizer_lockout")]
public HVACTemplate_System_PackagedVAV_EconomizerLockout EconomizerLockout { get; set; } = (HVACTemplate_System_PackagedVAV_EconomizerLockout)Enum.Parse(typeof(HVACTemplate_System_PackagedVAV_EconomizerLockout), "NoLockout");
        

[Description("Enter the maximum outdoor dry-bulb temperature limit for FixedDryBulb economizer " +
    "control type. No input or blank input means this limit is not operative. Limit i" +
    "s applied regardless of economizer control type.")]
[JsonProperty("economizer_maximum_limit_dry_bulb_temperature")]
public System.Nullable<float> EconomizerMaximumLimitDryBulbTemperature { get; set; } = null;
        

[Description("Enter the maximum outdoor enthalpy limit for FixedEnthalpy economizer control typ" +
    "e. No input or blank input means this limit is not operative Limit is applied re" +
    "gardless of economizer control type.")]
[JsonProperty("economizer_maximum_limit_enthalpy")]
public System.Nullable<float> EconomizerMaximumLimitEnthalpy { get; set; } = null;
        

[Description("Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb " +
    "economizer control type. No input or blank input means this limit is not operati" +
    "ve. Limit is applied regardless of economizer control type.")]
[JsonProperty("economizer_maximum_limit_dewpoint_temperature")]
public System.Nullable<float> EconomizerMaximumLimitDewpointTemperature { get; set; } = null;
        

[Description("Enter the minimum outdoor dry-bulb temperature limit for economizer control. No i" +
    "nput or blank input means this limit is not operative Limit is applied regardles" +
    "s of economizer control type.")]
[JsonProperty("economizer_minimum_limit_dry_bulb_temperature")]
public System.Nullable<float> EconomizerMinimumLimitDryBulbTemperature { get; set; } = null;
        

[Description("Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
[JsonProperty("supply_plenum_name")]
public string SupplyPlenumName { get; set; } = "";
        

[Description("Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
[JsonProperty("return_plenum_name")]
public string ReturnPlenumName { get; set; } = "";
        

[Description("This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-20" +
    "04 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of" +
    " coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Va" +
    "lues table.")]
[JsonProperty("supply_fan_part_load_power_coefficients")]
public HVACTemplate_System_PackagedVAV_SupplyFanPartLoadPowerCoefficients SupplyFanPartLoadPowerCoefficients { get; set; } = (HVACTemplate_System_PackagedVAV_SupplyFanPartLoadPowerCoefficients)Enum.Parse(typeof(HVACTemplate_System_PackagedVAV_SupplyFanPartLoadPowerCoefficients), "InletVaneDampers");
        

[JsonProperty("night_cycle_control")]
public HVACTemplate_System_PackagedVAV_NightCycleControl NightCycleControl { get; set; } = (HVACTemplate_System_PackagedVAV_NightCycleControl)Enum.Parse(typeof(HVACTemplate_System_PackagedVAV_NightCycleControl), "StayOff");
        

[Description("Applicable only if Night Cycle Control is Cycle On Control Zone.")]
[JsonProperty("night_cycle_control_zone_name")]
public string NightCycleControlZoneName { get; set; } = "";
        

[JsonProperty("heat_recovery_type")]
public HVACTemplate_System_PackagedVAV_HeatRecoveryType HeatRecoveryType { get; set; } = (HVACTemplate_System_PackagedVAV_HeatRecoveryType)Enum.Parse(typeof(HVACTemplate_System_PackagedVAV_HeatRecoveryType), "None");
        

[JsonProperty("sensible_heat_recovery_effectiveness")]
public System.Nullable<float> SensibleHeatRecoveryEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("latent_heat_recovery_effectiveness")]
public System.Nullable<float> LatentHeatRecoveryEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
        

[Description(@"Overrides Cooling Coil Setpoint Schedule Name None = no reset, control to Cooling Coil Design Setpoint Temperature or Schedule Warmest = reset as warm as possible yet meet all zone cooling loads at max supply air flow rate OutdoorAirTemperatureReset = reset based on outdoor air temperature (18.0C at 15.6C ODB, to the Cooling Design Setpoint at 26.7C) WarmestTemperatureFirst = reset as warm as possible yet meet all zone cooling loads at min supply air flow rate")]
[JsonProperty("cooling_coil_setpoint_reset_type")]
public HVACTemplate_System_PackagedVAV_CoolingCoilSetpointResetType CoolingCoilSetpointResetType { get; set; } = (HVACTemplate_System_PackagedVAV_CoolingCoilSetpointResetType)Enum.Parse(typeof(HVACTemplate_System_PackagedVAV_CoolingCoilSetpointResetType), "None");
        

[Description(@"Overrides Heating Coil Setpoint Schedule Name None = no reset, control to Heating Coil Design Setpoint Temperature or Schedule OutdoorAirTemperatureReset = reset based on outdoor air temperature (Heating Design Setpoint at -6.7C ODB to Heating Design Setpoint minus 5.2C at 10C ODB) min supply air flow rate")]
[JsonProperty("heating_coil_setpoint_reset_type")]
public HVACTemplate_System_PackagedVAV_HeatingCoilSetpointResetType HeatingCoilSetpointResetType { get; set; } = (HVACTemplate_System_PackagedVAV_HeatingCoilSetpointResetType)Enum.Parse(typeof(HVACTemplate_System_PackagedVAV_HeatingCoilSetpointResetType), "None");
        

[Description("None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint as " +
    "required to meet the humidity setpoint.")]
[JsonProperty("dehumidification_control_type")]
public HVACTemplate_System_PackagedVAV_DehumidificationControlType DehumidificationControlType { get; set; } = (HVACTemplate_System_PackagedVAV_DehumidificationControlType)Enum.Parse(typeof(HVACTemplate_System_PackagedVAV_DehumidificationControlType), "None");
        

[Description("Zone name where humidistat is located")]
[JsonProperty("dehumidification_control_zone_name")]
public string DehumidificationControlZoneName { get; set; } = "";
        

[Description("Zone relative humidity setpoint in percent (0 to 100)")]
[JsonProperty("dehumidification_setpoint")]
public System.Nullable<float> DehumidificationSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("60", CultureInfo.InvariantCulture);
        

[JsonProperty("humidifier_type")]
public HVACTemplate_System_PackagedVAV_HumidifierType HumidifierType { get; set; } = (HVACTemplate_System_PackagedVAV_HumidifierType)Enum.Parse(typeof(HVACTemplate_System_PackagedVAV_HumidifierType), "None");
        

[Description("If blank, always available")]
[JsonProperty("humidifier_availability_schedule_name")]
public string HumidifierAvailabilityScheduleName { get; set; } = "";
        

[Description("Moisture output rate at full rated power input. The humidifier does not currently" +
    " autosize, so the default is very large to allow for adequate capacity.")]
[JsonProperty("humidifier_rated_capacity")]
public System.Nullable<float> HumidifierRatedCapacity { get; set; } = (System.Nullable<float>)Single.Parse("1E-06", CultureInfo.InvariantCulture);
        

[Description("Electric power input at rated capacity moisture output. Power consumption is prop" +
    "ortional to moisture output with no part-load penalty.")]
[JsonProperty("humidifier_rated_electric_power")]
public string HumidifierRatedElectricPower { get; set; } = (System.String)"Autosize";
        

[Description("Zone name where humidistat is located")]
[JsonProperty("humidifier_control_zone_name")]
public string HumidifierControlZoneName { get; set; } = "";
        

[Description("Zone relative humidity setpoint in percent (0 to 100)")]
[JsonProperty("humidifier_setpoint")]
public System.Nullable<float> HumidifierSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[Description("Select whether autosized system supply flow rate is the sum of Coincident or NonC" +
    "oincident zone air flow rates.")]
[JsonProperty("sizing_option")]
public HVACTemplate_System_PackagedVAV_SizingOption SizingOption { get; set; } = (HVACTemplate_System_PackagedVAV_SizingOption)Enum.Parse(typeof(HVACTemplate_System_PackagedVAV_SizingOption), "NonCoincident");
        

[Description("Specifies if the system has a return fan.")]
[JsonProperty("return_fan")]
public EmptyNoYes ReturnFan { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("return_fan_total_efficiency")]
public System.Nullable<float> ReturnFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_delta_pressure")]
public System.Nullable<float> ReturnFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("500", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_motor_efficiency")]
public System.Nullable<float> ReturnFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_motor_in_air_stream_fraction")]
public System.Nullable<float> ReturnFanMotorInAirStreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-20" +
    "04 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of" +
    " coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Va" +
    "lues table.")]
[JsonProperty("return_fan_part_load_power_coefficients")]
public HVACTemplate_System_PackagedVAV_ReturnFanPartLoadPowerCoefficients ReturnFanPartLoadPowerCoefficients { get; set; } = (HVACTemplate_System_PackagedVAV_ReturnFanPartLoadPowerCoefficients)Enum.Parse(typeof(HVACTemplate_System_PackagedVAV_ReturnFanPartLoadPowerCoefficients), "InletVaneDampers");
    }
    
    public enum HVACTemplate_System_PackagedVAV_SupplyFanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum HVACTemplate_System_PackagedVAV_CoolingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("TwoSpeedDX")]
        TwoSpeedDX = 1,
        
        [JsonProperty("TwoSpeedHumidControlDX")]
        TwoSpeedHumidControlDX = 2,
    }
    
    public enum HVACTemplate_System_PackagedVAV_HeatingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HVACTemplate_System_PackagedVAV_MinimumOutdoorAirControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FixedMinimum")]
        FixedMinimum = 1,
        
        [JsonProperty("ProportionalMinimum")]
        ProportionalMinimum = 2,
    }
    
    public enum HVACTemplate_System_PackagedVAV_EconomizerType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DifferentialDryBulb")]
        DifferentialDryBulb = 1,
        
        [JsonProperty("DifferentialDryBulbAndEnthalpy")]
        DifferentialDryBulbAndEnthalpy = 2,
        
        [JsonProperty("DifferentialEnthalpy")]
        DifferentialEnthalpy = 3,
        
        [JsonProperty("ElectronicEnthalpy")]
        ElectronicEnthalpy = 4,
        
        [JsonProperty("FixedDewPointAndDryBulb")]
        FixedDewPointAndDryBulb = 5,
        
        [JsonProperty("FixedDryBulb")]
        FixedDryBulb = 6,
        
        [JsonProperty("FixedEnthalpy")]
        FixedEnthalpy = 7,
        
        [JsonProperty("NoEconomizer")]
        NoEconomizer = 8,
    }
    
    public enum HVACTemplate_System_PackagedVAV_EconomizerLockout
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LockoutWithCompressor")]
        LockoutWithCompressor = 1,
        
        [JsonProperty("LockoutWithHeating")]
        LockoutWithHeating = 2,
        
        [JsonProperty("NoLockout")]
        NoLockout = 3,
    }
    
    public enum HVACTemplate_System_PackagedVAV_SupplyFanPartLoadPowerCoefficients
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAE90.1-2004AppendixG")]
        ASHRAE9012004AppendixG = 1,
        
        [JsonProperty("InletVaneDampers")]
        InletVaneDampers = 2,
        
        [JsonProperty("OutletDampers")]
        OutletDampers = 3,
        
        [JsonProperty("VariableSpeedMotor")]
        VariableSpeedMotor = 4,
        
        [JsonProperty("VariableSpeedMotorPressureReset")]
        VariableSpeedMotorPressureReset = 5,
    }
    
    public enum HVACTemplate_System_PackagedVAV_NightCycleControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CycleOnAny")]
        CycleOnAny = 1,
        
        [JsonProperty("CycleOnAnyZoneFansOnly")]
        CycleOnAnyZoneFansOnly = 2,
        
        [JsonProperty("CycleOnControlZone")]
        CycleOnControlZone = 3,
        
        [JsonProperty("StayOff")]
        StayOff = 4,
    }
    
    public enum HVACTemplate_System_PackagedVAV_HeatRecoveryType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Sensible")]
        Sensible = 3,
    }
    
    public enum HVACTemplate_System_PackagedVAV_CoolingCoilSetpointResetType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 2,
        
        [JsonProperty("Warmest")]
        Warmest = 3,
        
        [JsonProperty("WarmestTemperatureFirst")]
        WarmestTemperatureFirst = 4,
    }
    
    public enum HVACTemplate_System_PackagedVAV_HeatingCoilSetpointResetType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 2,
    }
    
    public enum HVACTemplate_System_PackagedVAV_DehumidificationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    public enum HVACTemplate_System_PackagedVAV_HumidifierType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ElectricSteam")]
        ElectricSteam = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    public enum HVACTemplate_System_PackagedVAV_SizingOption
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Coincident")]
        Coincident = 1,
        
        [JsonProperty("NonCoincident")]
        NonCoincident = 2,
    }
    
    public enum HVACTemplate_System_PackagedVAV_ReturnFanPartLoadPowerCoefficients
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAE90.1-2004AppendixG")]
        ASHRAE9012004AppendixG = 1,
        
        [JsonProperty("InletVaneDampers")]
        InletVaneDampers = 2,
        
        [JsonProperty("OutletDampers")]
        OutletDampers = 3,
        
        [JsonProperty("VariableSpeedMotor")]
        VariableSpeedMotor = 4,
        
        [JsonProperty("VariableSpeedMotorPressureReset")]
        VariableSpeedMotorPressureReset = 5,
    }
    
    [Description("Constant Air Volume air loop with optional chilled water cooling coil, optional h" +
        "eating coil and optional preheat.")]
    [JsonObject("HVACTemplate:System:ConstantVolume")]
    public class HVACTemplate_System_ConstantVolume : BHoMObject, IEnergyPlusClass
    {
        

[Description("If blank, always on;  Schedule is used in availability manager and fan scheduling" +
    ". Also see \"Night Cycle Control\" field.")]
[JsonProperty("system_availability_schedule_name")]
public string SystemAvailabilityScheduleName { get; set; } = "";
        

[Description("This field may be set to \"autosize\". If a value is entered, it will *not* be mult" +
    "iplied by any sizing factor or by zone multipliers. If using zone multipliers a " +
    "value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty("supply_fan_maximum_flow_rate")]
public string SupplyFanMaximumFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("supply_fan_total_efficiency")]
public System.Nullable<float> SupplyFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_delta_pressure")]
public System.Nullable<float> SupplyFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("600", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_motor_efficiency")]
public System.Nullable<float> SupplyFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_motor_in_air_stream_fraction")]
public System.Nullable<float> SupplyFanMotorInAirStreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_placement")]
public HVACTemplate_System_ConstantVolume_SupplyFanPlacement SupplyFanPlacement { get; set; } = (HVACTemplate_System_ConstantVolume_SupplyFanPlacement)Enum.Parse(typeof(HVACTemplate_System_ConstantVolume_SupplyFanPlacement), "DrawThrough");
        

[JsonProperty("cooling_coil_type")]
public HVACTemplate_System_ConstantVolume_CoolingCoilType CoolingCoilType { get; set; } = (HVACTemplate_System_ConstantVolume_CoolingCoilType)Enum.Parse(typeof(HVACTemplate_System_ConstantVolume_CoolingCoilType), "ChilledWater");
        

[Description("If blank, always on")]
[JsonProperty("cooling_coil_availability_schedule_name")]
public string CoolingCoilAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("cooling_coil_setpoint_control_type")]
public HVACTemplate_System_ConstantVolume_CoolingCoilSetpointControlType CoolingCoilSetpointControlType { get; set; } = (HVACTemplate_System_ConstantVolume_CoolingCoilSetpointControlType)Enum.Parse(typeof(HVACTemplate_System_ConstantVolume_CoolingCoilSetpointControlType), "FixedSetpoint");
        

[Description("name of the HVACTemplate:ZoneConstantVolume object that contains the cooling ther" +
    "mostat when Cooling Coil Setpoint Control Type = ControlZone")]
[JsonProperty("cooling_coil_control_zone_name")]
public string CoolingCoilControlZoneName { get; set; } = "";
        

[Description("Used for sizing and as constant setpoint if no Cooling Coil Setpoint Schedule Nam" +
    "e is specified.")]
[JsonProperty("cooling_coil_design_setpoint_temperature")]
public System.Nullable<float> CoolingCoilDesignSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("12.8", CultureInfo.InvariantCulture);
        

[Description("Leave blank if constant setpoint")]
[JsonProperty("cooling_coil_setpoint_schedule_name")]
public string CoolingCoilSetpointScheduleName { get; set; } = "";
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("cooling_coil_setpoint_at_outdoor_dry_bulb_low")]
public System.Nullable<float> CoolingCoilSetpointAtOutdoorDryBulbLow { get; set; } = (System.Nullable<float>)Single.Parse("15.6", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control. Defaults are 15.6C (60F) " +
    "at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)")]
[JsonProperty("cooling_coil_reset_outdoor_dry_bulb_low")]
public System.Nullable<float> CoolingCoilResetOutdoorDryBulbLow { get; set; } = (System.Nullable<float>)Single.Parse("15.6", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("cooling_coil_setpoint_at_outdoor_dry_bulb_high")]
public System.Nullable<float> CoolingCoilSetpointAtOutdoorDryBulbHigh { get; set; } = (System.Nullable<float>)Single.Parse("12.8", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("cooling_coil_reset_outdoor_dry_bulb_high")]
public System.Nullable<float> CoolingCoilResetOutdoorDryBulbHigh { get; set; } = (System.Nullable<float>)Single.Parse("23.3", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_coil_type")]
public HVACTemplate_System_ConstantVolume_HeatingCoilType HeatingCoilType { get; set; } = (HVACTemplate_System_ConstantVolume_HeatingCoilType)Enum.Parse(typeof(HVACTemplate_System_ConstantVolume_HeatingCoilType), "HotWater");
        

[Description("If blank, always on")]
[JsonProperty("heating_coil_availability_schedule_name")]
public string HeatingCoilAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("heating_coil_setpoint_control_type")]
public HVACTemplate_System_ConstantVolume_HeatingCoilSetpointControlType HeatingCoilSetpointControlType { get; set; } = (HVACTemplate_System_ConstantVolume_HeatingCoilSetpointControlType)Enum.Parse(typeof(HVACTemplate_System_ConstantVolume_HeatingCoilSetpointControlType), "FixedSetpoint");
        

[Description("name of the HVACTemplate:ZoneConstantVolume object that contains the heating ther" +
    "mostat")]
[JsonProperty("heating_coil_control_zone_name")]
public string HeatingCoilControlZoneName { get; set; } = "";
        

[Description("Used for sizing and as constant setpoint if no Heating Coil Setpoint Schedule Nam" +
    "e is specified.")]
[JsonProperty("heating_coil_design_setpoint")]
public System.Nullable<float> HeatingCoilDesignSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("Leave blank if constant setpoint")]
[JsonProperty("heating_coil_setpoint_schedule_name")]
public string HeatingCoilSetpointScheduleName { get; set; } = "";
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("heating_coil_setpoint_at_outdoor_dry_bulb_low")]
public System.Nullable<float> HeatingCoilSetpointAtOutdoorDryBulbLow { get; set; } = (System.Nullable<float>)Single.Parse("15", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control. Defaults are 15.6C (60F) " +
    "at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)")]
[JsonProperty("heating_coil_reset_outdoor_dry_bulb_low")]
public System.Nullable<float> HeatingCoilResetOutdoorDryBulbLow { get; set; } = (System.Nullable<float>)Single.Parse("7.8", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("heating_coil_setpoint_at_outdoor_dry_bulb_high")]
public System.Nullable<float> HeatingCoilSetpointAtOutdoorDryBulbHigh { get; set; } = (System.Nullable<float>)Single.Parse("12.2", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("heating_coil_reset_outdoor_dry_bulb_high")]
public System.Nullable<float> HeatingCoilResetOutdoorDryBulbHigh { get; set; } = (System.Nullable<float>)Single.Parse("12.2", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_coil_capacity")]
public string HeatingCoilCapacity { get; set; } = (System.String)"Autosize";
        

[JsonProperty("gas_heating_coil_efficiency")]
public System.Nullable<float> GasHeatingCoilEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[JsonProperty("gas_heating_coil_parasitic_electric_load")]
public System.Nullable<float> GasHeatingCoilParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("preheat_coil_type")]
public HVACTemplate_System_ConstantVolume_PreheatCoilType PreheatCoilType { get; set; } = (HVACTemplate_System_ConstantVolume_PreheatCoilType)Enum.Parse(typeof(HVACTemplate_System_ConstantVolume_PreheatCoilType), "None");
        

[Description("If blank, always on")]
[JsonProperty("preheat_coil_availability_schedule_name")]
public string PreheatCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Used for sizing and as constant setpoint if no Preheat Coil Setpoint Schedule Nam" +
    "e specified.")]
[JsonProperty("preheat_coil_design_setpoint")]
public System.Nullable<float> PreheatCoilDesignSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("7.2", CultureInfo.InvariantCulture);
        

[Description("Leave blank if constant setpoint")]
[JsonProperty("preheat_coil_setpoint_schedule_name")]
public string PreheatCoilSetpointScheduleName { get; set; } = "";
        

[JsonProperty("gas_preheat_coil_efficiency")]
public System.Nullable<float> GasPreheatCoilEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[JsonProperty("gas_preheat_coil_parasitic_electric_load")]
public System.Nullable<float> GasPreheatCoilParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string MaximumOutdoorAirFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("minimum_outdoor_air_flow_rate")]
public string MinimumOutdoorAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("Schedule values multiply the Minimum Outdoor Air Flow Rate If blank, multiplier i" +
    "s always one")]
[JsonProperty("minimum_outdoor_air_schedule_name")]
public string MinimumOutdoorAirScheduleName { get; set; } = "";
        

[JsonProperty("economizer_type")]
public HVACTemplate_System_ConstantVolume_EconomizerType EconomizerType { get; set; } = (HVACTemplate_System_ConstantVolume_EconomizerType)Enum.Parse(typeof(HVACTemplate_System_ConstantVolume_EconomizerType), "NoEconomizer");
        

[Description("Outdoor temperature above which economizer is disabled and heat recovery is enabl" +
    "ed (if available). Blank means no limit.")]
[JsonProperty("economizer_upper_temperature_limit")]
public System.Nullable<float> EconomizerUpperTemperatureLimit { get; set; } = null;
        

[Description("Outdoor temperature below which economizer is disabled and heat recovery is enabl" +
    "ed (if available). Blank means no limit.")]
[JsonProperty("economizer_lower_temperature_limit")]
public System.Nullable<float> EconomizerLowerTemperatureLimit { get; set; } = null;
        

[Description("Outdoor enthalpy above which economizer is disabled and heat recovery is enabled " +
    "(if available). Blank means no limit.")]
[JsonProperty("economizer_upper_enthalpy_limit")]
public System.Nullable<float> EconomizerUpperEnthalpyLimit { get; set; } = null;
        

[Description("Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb " +
    "economizer control type. No input or blank input means this limit is not operati" +
    "ve. Limit is applied regardless of economizer control type.")]
[JsonProperty("economizer_maximum_limit_dewpoint_temperature")]
public System.Nullable<float> EconomizerMaximumLimitDewpointTemperature { get; set; } = null;
        

[Description("Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
[JsonProperty("supply_plenum_name")]
public string SupplyPlenumName { get; set; } = "";
        

[Description("Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
[JsonProperty("return_plenum_name")]
public string ReturnPlenumName { get; set; } = "";
        

[JsonProperty("night_cycle_control")]
public HVACTemplate_System_ConstantVolume_NightCycleControl NightCycleControl { get; set; } = (HVACTemplate_System_ConstantVolume_NightCycleControl)Enum.Parse(typeof(HVACTemplate_System_ConstantVolume_NightCycleControl), "StayOff");
        

[Description("Applicable only if Night Cycle Control is Cycle On Control Zone.")]
[JsonProperty("night_cycle_control_zone_name")]
public string NightCycleControlZoneName { get; set; } = "";
        

[JsonProperty("heat_recovery_type")]
public HVACTemplate_System_ConstantVolume_HeatRecoveryType HeatRecoveryType { get; set; } = (HVACTemplate_System_ConstantVolume_HeatRecoveryType)Enum.Parse(typeof(HVACTemplate_System_ConstantVolume_HeatRecoveryType), "None");
        

[JsonProperty("sensible_heat_recovery_effectiveness")]
public System.Nullable<float> SensibleHeatRecoveryEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("latent_heat_recovery_effectiveness")]
public System.Nullable<float> LatentHeatRecoveryEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_recovery_heat_exchanger_type")]
public HVACTemplate_System_ConstantVolume_HeatRecoveryHeatExchangerType HeatRecoveryHeatExchangerType { get; set; } = (HVACTemplate_System_ConstantVolume_HeatRecoveryHeatExchangerType)Enum.Parse(typeof(HVACTemplate_System_ConstantVolume_HeatRecoveryHeatExchangerType), "Plate");
        

[JsonProperty("heat_recovery_frost_control_type")]
public HVACTemplate_System_ConstantVolume_HeatRecoveryFrostControlType HeatRecoveryFrostControlType { get; set; } = (HVACTemplate_System_ConstantVolume_HeatRecoveryFrostControlType)Enum.Parse(typeof(HVACTemplate_System_ConstantVolume_HeatRecoveryFrostControlType), "None");
        

[Description("None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint as " +
    "required to meet the humidity setpoint.")]
[JsonProperty("dehumidification_control_type")]
public HVACTemplate_System_ConstantVolume_DehumidificationControlType DehumidificationControlType { get; set; } = (HVACTemplate_System_ConstantVolume_DehumidificationControlType)Enum.Parse(typeof(HVACTemplate_System_ConstantVolume_DehumidificationControlType), "None");
        

[Description("Zone name where humidistat is located")]
[JsonProperty("dehumidification_control_zone_name")]
public string DehumidificationControlZoneName { get; set; } = "";
        

[Description("Zone relative humidity setpoint in percent (0 to 100) Ignored if Dehumidification" +
    " Relative Humidity Setpoint Schedule specified below")]
[JsonProperty("dehumidification_relative_humidity_setpoint")]
public System.Nullable<float> DehumidificationRelativeHumiditySetpoint { get; set; } = (System.Nullable<float>)Single.Parse("60", CultureInfo.InvariantCulture);
        

[Description("Leave blank to use constant setpoint specified in Dehumidification Relative Humid" +
    "ity Setpoint above. Schedule values must be in percent relative humidity (0 to 1" +
    "00).")]
[JsonProperty("dehumidification_relative_humidity_setpoint_schedule_name")]
public string DehumidificationRelativeHumiditySetpointScheduleName { get; set; } = "";
        

[JsonProperty("humidifier_type")]
public HVACTemplate_System_ConstantVolume_HumidifierType HumidifierType { get; set; } = (HVACTemplate_System_ConstantVolume_HumidifierType)Enum.Parse(typeof(HVACTemplate_System_ConstantVolume_HumidifierType), "None");
        

[Description("If blank, always available")]
[JsonProperty("humidifier_availability_schedule_name")]
public string HumidifierAvailabilityScheduleName { get; set; } = "";
        

[Description("Moisture output rate at full rated power input. The humidifier does not currently" +
    " autosize, so the default is very large to allow for adequate capacity.")]
[JsonProperty("humidifier_rated_capacity")]
public System.Nullable<float> HumidifierRatedCapacity { get; set; } = (System.Nullable<float>)Single.Parse("1E-06", CultureInfo.InvariantCulture);
        

[Description("Electric power input at rated capacity moisture output. Power consumption is prop" +
    "ortional to moisture output with no part-load penalty.")]
[JsonProperty("humidifier_rated_electric_power")]
public string HumidifierRatedElectricPower { get; set; } = (System.String)"Autosize";
        

[Description("Zone name where humidistat is located")]
[JsonProperty("humidifier_control_zone_name")]
public string HumidifierControlZoneName { get; set; } = "";
        

[Description("Zone relative humidity setpoint in percent (0 to 100). Ignored if Humidifier Rela" +
    "tive Humidity Setpoint Schedule specified below")]
[JsonProperty("humidifier_relative_humidity_setpoint")]
public System.Nullable<float> HumidifierRelativeHumiditySetpoint { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[Description("Leave blank to use constant setpoint specified in Humidifier Relative Humidity Se" +
    "tpoint above. Schedule values must be in percent relative humidity (0 to 100).")]
[JsonProperty("humidifier_relative_humidity_setpoint_schedule_name")]
public string HumidifierRelativeHumiditySetpointScheduleName { get; set; } = "";
        

[Description("Specifies if the system has a return fan.")]
[JsonProperty("return_fan")]
public EmptyNoYes ReturnFan { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("return_fan_total_efficiency")]
public System.Nullable<float> ReturnFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_delta_pressure")]
public System.Nullable<float> ReturnFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("300", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_motor_efficiency")]
public System.Nullable<float> ReturnFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_motor_in_air_stream_fraction")]
public System.Nullable<float> ReturnFanMotorInAirStreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    public enum HVACTemplate_System_ConstantVolume_SupplyFanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum HVACTemplate_System_ConstantVolume_CoolingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ChilledWater")]
        ChilledWater = 1,
        
        [JsonProperty("ChilledWaterDetailedFlatModel")]
        ChilledWaterDetailedFlatModel = 2,
        
        [JsonProperty("HeatExchangerAssistedChilledWater")]
        HeatExchangerAssistedChilledWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HVACTemplate_System_ConstantVolume_CoolingCoilSetpointControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ControlZone")]
        ControlZone = 1,
        
        [JsonProperty("FixedSetpoint")]
        FixedSetpoint = 2,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 3,
        
        [JsonProperty("Scheduled")]
        Scheduled = 4,
        
        [JsonProperty("Warmest")]
        Warmest = 5,
    }
    
    public enum HVACTemplate_System_ConstantVolume_HeatingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HVACTemplate_System_ConstantVolume_HeatingCoilSetpointControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ControlZone")]
        ControlZone = 1,
        
        [JsonProperty("FixedSetpoint")]
        FixedSetpoint = 2,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 3,
        
        [JsonProperty("Scheduled")]
        Scheduled = 4,
    }
    
    public enum HVACTemplate_System_ConstantVolume_PreheatCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HVACTemplate_System_ConstantVolume_EconomizerType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DifferentialDryBulb")]
        DifferentialDryBulb = 1,
        
        [JsonProperty("DifferentialDryBulbAndEnthalpy")]
        DifferentialDryBulbAndEnthalpy = 2,
        
        [JsonProperty("DifferentialEnthalpy")]
        DifferentialEnthalpy = 3,
        
        [JsonProperty("ElectronicEnthalpy")]
        ElectronicEnthalpy = 4,
        
        [JsonProperty("FixedDewPointAndDryBulb")]
        FixedDewPointAndDryBulb = 5,
        
        [JsonProperty("FixedDryBulb")]
        FixedDryBulb = 6,
        
        [JsonProperty("FixedEnthalpy")]
        FixedEnthalpy = 7,
        
        [JsonProperty("NoEconomizer")]
        NoEconomizer = 8,
    }
    
    public enum HVACTemplate_System_ConstantVolume_NightCycleControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CycleOnAny")]
        CycleOnAny = 1,
        
        [JsonProperty("CycleOnAnyZoneFansOnly")]
        CycleOnAnyZoneFansOnly = 2,
        
        [JsonProperty("CycleOnControlZone")]
        CycleOnControlZone = 3,
        
        [JsonProperty("StayOff")]
        StayOff = 4,
    }
    
    public enum HVACTemplate_System_ConstantVolume_HeatRecoveryType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Sensible")]
        Sensible = 3,
    }
    
    public enum HVACTemplate_System_ConstantVolume_HeatRecoveryHeatExchangerType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Plate")]
        Plate = 1,
        
        [JsonProperty("Rotary")]
        Rotary = 2,
    }
    
    public enum HVACTemplate_System_ConstantVolume_HeatRecoveryFrostControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ExhaustAirRecirculation")]
        ExhaustAirRecirculation = 1,
        
        [JsonProperty("ExhaustOnly")]
        ExhaustOnly = 2,
        
        [JsonProperty("MinimumExhaustTemperature")]
        MinimumExhaustTemperature = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HVACTemplate_System_ConstantVolume_DehumidificationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    public enum HVACTemplate_System_ConstantVolume_HumidifierType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ElectricSteam")]
        ElectricSteam = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    [Description("Dual-duct constant volume or variable volume air loop")]
    [JsonObject("HVACTemplate:System:DualDuct")]
    public class HVACTemplate_System_DualDuct : BHoMObject, IEnergyPlusClass
    {
        

[Description("If blank, always on;  Schedule is used in availability manager and fan scheduling" +
    ". Also see \"Night Cycle Control\" field.")]
[JsonProperty("system_availability_schedule_name")]
public string SystemAvailabilityScheduleName { get; set; } = "";
        

[Description("SingleFan - a single supply fan before the split to dual ducts DualFan - two supp" +
    "ly fans, one each for the cold and hot ducts ConstantVolume - constant volume Va" +
    "riableVolume - variable volume")]
[JsonProperty("system_configuration_type")]
public HVACTemplate_System_DualDuct_SystemConfigurationType SystemConfigurationType { get; set; } = (HVACTemplate_System_DualDuct_SystemConfigurationType)Enum.Parse(typeof(HVACTemplate_System_DualDuct_SystemConfigurationType), "SingleFanConstantVolume");
        

[Description("This field may be set to \"autosize\". If a value is entered, it will *not* be mult" +
    "iplied by any sizing factor or by zone multipliers. If using zone multipliers a " +
    "value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty("main_supply_fan_maximum_flow_rate")]
public string MainSupplyFanMaximumFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("main_supply_fan_minimum_flow_fraction")]
public System.Nullable<float> MainSupplyFanMinimumFlowFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("main_supply_fan_total_efficiency")]
public System.Nullable<float> MainSupplyFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("main_supply_fan_delta_pressure")]
public System.Nullable<float> MainSupplyFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("1000", CultureInfo.InvariantCulture);
        

[JsonProperty("main_supply_fan_motor_efficiency")]
public System.Nullable<float> MainSupplyFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("main_supply_fan_motor_in_air_stream_fraction")]
public System.Nullable<float> MainSupplyFanMotorInAirStreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-20" +
    "04 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of" +
    " coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Va" +
    "lues table.")]
[JsonProperty("main_supply_fan_part_load_power_coefficients")]
public HVACTemplate_System_DualDuct_MainSupplyFanPartLoadPowerCoefficients MainSupplyFanPartLoadPowerCoefficients { get; set; } = (HVACTemplate_System_DualDuct_MainSupplyFanPartLoadPowerCoefficients)Enum.Parse(typeof(HVACTemplate_System_DualDuct_MainSupplyFanPartLoadPowerCoefficients), "InletVaneDampers");
        

[Description("This field may be set to \"autosize\". If a value is entered, it will *not* be mult" +
    "iplied by any sizing factor or by zone multipliers. If using zone multipliers a " +
    "value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty("cold_duct_supply_fan_maximum_flow_rate")]
public string ColdDuctSupplyFanMaximumFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("cold_duct_supply_fan_minimum_flow_fraction")]
public System.Nullable<float> ColdDuctSupplyFanMinimumFlowFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("cold_duct_supply_fan_total_efficiency")]
public System.Nullable<float> ColdDuctSupplyFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("cold_duct_supply_fan_delta_pressure")]
public System.Nullable<float> ColdDuctSupplyFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("1000", CultureInfo.InvariantCulture);
        

[JsonProperty("cold_duct_supply_fan_motor_efficiency")]
public System.Nullable<float> ColdDuctSupplyFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("cold_duct_supply_fan_motor_in_air_stream_fraction")]
public System.Nullable<float> ColdDuctSupplyFanMotorInAirStreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-20" +
    "04 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of" +
    " coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Va" +
    "lues table.")]
[JsonProperty("cold_duct_supply_fan_part_load_power_coefficients")]
public HVACTemplate_System_DualDuct_ColdDuctSupplyFanPartLoadPowerCoefficients ColdDuctSupplyFanPartLoadPowerCoefficients { get; set; } = (HVACTemplate_System_DualDuct_ColdDuctSupplyFanPartLoadPowerCoefficients)Enum.Parse(typeof(HVACTemplate_System_DualDuct_ColdDuctSupplyFanPartLoadPowerCoefficients), "InletVaneDampers");
        

[JsonProperty("cold_duct_supply_fan_placement")]
public HVACTemplate_System_DualDuct_ColdDuctSupplyFanPlacement ColdDuctSupplyFanPlacement { get; set; } = (HVACTemplate_System_DualDuct_ColdDuctSupplyFanPlacement)Enum.Parse(typeof(HVACTemplate_System_DualDuct_ColdDuctSupplyFanPlacement), "DrawThrough");
        

[Description("This field may be set to \"autosize\". If a value is entered, it will *not* be mult" +
    "iplied by any sizing factor or by zone multipliers. If using zone multipliers a " +
    "value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty("hot_duct_supply_fan_maximum_flow_rate")]
public string HotDuctSupplyFanMaximumFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("hot_duct_supply_fan_minimum_flow_fraction")]
public System.Nullable<float> HotDuctSupplyFanMinimumFlowFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("hot_duct_supply_fan_total_efficiency")]
public System.Nullable<float> HotDuctSupplyFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("hot_duct_supply_fan_delta_pressure")]
public System.Nullable<float> HotDuctSupplyFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("1000", CultureInfo.InvariantCulture);
        

[JsonProperty("hot_duct_supply_fan_motor_efficiency")]
public System.Nullable<float> HotDuctSupplyFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("hot_duct_supply_fan_motor_in_air_stream_fraction")]
public System.Nullable<float> HotDuctSupplyFanMotorInAirStreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-20" +
    "04 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of" +
    " coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Va" +
    "lues table.")]
[JsonProperty("hot_duct_supply_fan_part_load_power_coefficients")]
public HVACTemplate_System_DualDuct_HotDuctSupplyFanPartLoadPowerCoefficients HotDuctSupplyFanPartLoadPowerCoefficients { get; set; } = (HVACTemplate_System_DualDuct_HotDuctSupplyFanPartLoadPowerCoefficients)Enum.Parse(typeof(HVACTemplate_System_DualDuct_HotDuctSupplyFanPartLoadPowerCoefficients), "InletVaneDampers");
        

[JsonProperty("hot_duct_supply_fan_placement")]
public HVACTemplate_System_DualDuct_HotDuctSupplyFanPlacement HotDuctSupplyFanPlacement { get; set; } = (HVACTemplate_System_DualDuct_HotDuctSupplyFanPlacement)Enum.Parse(typeof(HVACTemplate_System_DualDuct_HotDuctSupplyFanPlacement), "DrawThrough");
        

[JsonProperty("cooling_coil_type")]
public HVACTemplate_System_DualDuct_CoolingCoilType CoolingCoilType { get; set; } = (HVACTemplate_System_DualDuct_CoolingCoilType)Enum.Parse(typeof(HVACTemplate_System_DualDuct_CoolingCoilType), "ChilledWater");
        

[Description("If blank, always on")]
[JsonProperty("cooling_coil_availability_schedule_name")]
public string CoolingCoilAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("cooling_coil_setpoint_control_type")]
public HVACTemplate_System_DualDuct_CoolingCoilSetpointControlType CoolingCoilSetpointControlType { get; set; } = (HVACTemplate_System_DualDuct_CoolingCoilSetpointControlType)Enum.Parse(typeof(HVACTemplate_System_DualDuct_CoolingCoilSetpointControlType), "FixedSetpoint");
        

[Description("Used for sizing and as constant setpoint if no Cooling Coil Setpoint Schedule Nam" +
    "e is specified.")]
[JsonProperty("cooling_coil_design_setpoint_temperature")]
public System.Nullable<float> CoolingCoilDesignSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("12.8", CultureInfo.InvariantCulture);
        

[Description("Leave blank if constant setpoint")]
[JsonProperty("cooling_coil_setpoint_schedule_name")]
public string CoolingCoilSetpointScheduleName { get; set; } = "";
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("cooling_coil_setpoint_at_outdoor_dry_bulb_low")]
public System.Nullable<float> CoolingCoilSetpointAtOutdoorDryBulbLow { get; set; } = (System.Nullable<float>)Single.Parse("15.6", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control. Defaults are 15.6C (60F) " +
    "at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)")]
[JsonProperty("cooling_coil_reset_outdoor_dry_bulb_low")]
public System.Nullable<float> CoolingCoilResetOutdoorDryBulbLow { get; set; } = (System.Nullable<float>)Single.Parse("15.6", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("cooling_coil_setpoint_at_outdoor_dry_bulb_high")]
public System.Nullable<float> CoolingCoilSetpointAtOutdoorDryBulbHigh { get; set; } = (System.Nullable<float>)Single.Parse("12.8", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("cooling_coil_reset_outdoor_dry_bulb_high")]
public System.Nullable<float> CoolingCoilResetOutdoorDryBulbHigh { get; set; } = (System.Nullable<float>)Single.Parse("23.3", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_coil_type")]
public HVACTemplate_System_DualDuct_HeatingCoilType HeatingCoilType { get; set; } = (HVACTemplate_System_DualDuct_HeatingCoilType)Enum.Parse(typeof(HVACTemplate_System_DualDuct_HeatingCoilType), "HotWater");
        

[Description("If blank, always on")]
[JsonProperty("heating_coil_availability_schedule_name")]
public string HeatingCoilAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("heating_coil_setpoint_control_type")]
public HVACTemplate_System_DualDuct_HeatingCoilSetpointControlType HeatingCoilSetpointControlType { get; set; } = (HVACTemplate_System_DualDuct_HeatingCoilSetpointControlType)Enum.Parse(typeof(HVACTemplate_System_DualDuct_HeatingCoilSetpointControlType), "FixedSetpoint");
        

[Description("Used for sizing and as constant setpoint if no Heating Coil Setpoint Schedule Nam" +
    "e is specified.")]
[JsonProperty("heating_coil_design_setpoint")]
public System.Nullable<float> HeatingCoilDesignSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[Description("Leave blank if constant setpoint")]
[JsonProperty("heating_coil_setpoint_schedule_name")]
public string HeatingCoilSetpointScheduleName { get; set; } = "";
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("heating_coil_setpoint_at_outdoor_dry_bulb_low")]
public System.Nullable<float> HeatingCoilSetpointAtOutdoorDryBulbLow { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control. Defaults are 15.6C (60F) " +
    "at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)")]
[JsonProperty("heating_coil_reset_outdoor_dry_bulb_low")]
public System.Nullable<float> HeatingCoilResetOutdoorDryBulbLow { get; set; } = (System.Nullable<float>)Single.Parse("7.8", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("heating_coil_setpoint_at_outdoor_dry_bulb_high")]
public System.Nullable<float> HeatingCoilSetpointAtOutdoorDryBulbHigh { get; set; } = (System.Nullable<float>)Single.Parse("20", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("heating_coil_reset_outdoor_dry_bulb_high")]
public System.Nullable<float> HeatingCoilResetOutdoorDryBulbHigh { get; set; } = (System.Nullable<float>)Single.Parse("12.2", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_coil_capacity")]
public string HeatingCoilCapacity { get; set; } = (System.String)"Autosize";
        

[JsonProperty("gas_heating_coil_efficiency")]
public System.Nullable<float> GasHeatingCoilEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[JsonProperty("gas_heating_coil_parasitic_electric_load")]
public System.Nullable<float> GasHeatingCoilParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("preheat_coil_type")]
public HVACTemplate_System_DualDuct_PreheatCoilType PreheatCoilType { get; set; } = (HVACTemplate_System_DualDuct_PreheatCoilType)Enum.Parse(typeof(HVACTemplate_System_DualDuct_PreheatCoilType), "None");
        

[Description("If blank, always on")]
[JsonProperty("preheat_coil_availability_schedule_name")]
public string PreheatCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("Used for sizing and as constant setpoint if no Preheat Coil Setpoint Schedule Nam" +
    "e specified.")]
[JsonProperty("preheat_coil_design_setpoint")]
public System.Nullable<float> PreheatCoilDesignSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("7.2", CultureInfo.InvariantCulture);
        

[Description("Leave blank if constant setpoint")]
[JsonProperty("preheat_coil_setpoint_schedule_name")]
public string PreheatCoilSetpointScheduleName { get; set; } = "";
        

[JsonProperty("gas_preheat_coil_efficiency")]
public System.Nullable<float> GasPreheatCoilEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[JsonProperty("gas_preheat_coil_parasitic_electric_load")]
public System.Nullable<float> GasPreheatCoilParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string MaximumOutdoorAirFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("minimum_outdoor_air_flow_rate")]
public string MinimumOutdoorAirFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("minimum_outdoor_air_control_type")]
public HVACTemplate_System_DualDuct_MinimumOutdoorAirControlType MinimumOutdoorAirControlType { get; set; } = (HVACTemplate_System_DualDuct_MinimumOutdoorAirControlType)Enum.Parse(typeof(HVACTemplate_System_DualDuct_MinimumOutdoorAirControlType), "ProportionalMinimum");
        

[Description("Schedule values multiply the Minimum Outdoor Air Flow Rate If blank, multiplier i" +
    "s always one")]
[JsonProperty("minimum_outdoor_air_schedule_name")]
public string MinimumOutdoorAirScheduleName { get; set; } = "";
        

[JsonProperty("economizer_type")]
public HVACTemplate_System_DualDuct_EconomizerType EconomizerType { get; set; } = (HVACTemplate_System_DualDuct_EconomizerType)Enum.Parse(typeof(HVACTemplate_System_DualDuct_EconomizerType), "NoEconomizer");
        

[JsonProperty("economizer_lockout")]
public HVACTemplate_System_DualDuct_EconomizerLockout EconomizerLockout { get; set; } = (HVACTemplate_System_DualDuct_EconomizerLockout)Enum.Parse(typeof(HVACTemplate_System_DualDuct_EconomizerLockout), "NoLockout");
        

[Description("Outdoor temperature above which economizer is disabled and heat recovery is enabl" +
    "ed (if available). Blank means no limit.")]
[JsonProperty("economizer_upper_temperature_limit")]
public System.Nullable<float> EconomizerUpperTemperatureLimit { get; set; } = null;
        

[Description("Outdoor temperature below which economizer is disabled and heat recovery is enabl" +
    "ed (if available). Blank means no limit.")]
[JsonProperty("economizer_lower_temperature_limit")]
public System.Nullable<float> EconomizerLowerTemperatureLimit { get; set; } = null;
        

[Description("Outdoor enthalpy above which economizer is disabled and heat recovery is enabled " +
    "(if available). Blank means no limit.")]
[JsonProperty("economizer_upper_enthalpy_limit")]
public System.Nullable<float> EconomizerUpperEnthalpyLimit { get; set; } = null;
        

[Description("Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb " +
    "economizer control type. No input or blank input means this limit is not operati" +
    "ve. Limit is applied regardless of economizer control type.")]
[JsonProperty("economizer_maximum_limit_dewpoint_temperature")]
public System.Nullable<float> EconomizerMaximumLimitDewpointTemperature { get; set; } = null;
        

[Description("Plenum zone name. Supply plenum serves the cold inlets of all zones on this syste" +
    "m. Blank if none.")]
[JsonProperty("cold_supply_plenum_name")]
public string ColdSupplyPlenumName { get; set; } = "";
        

[Description("Plenum zone name. Supply plenum serves the hot inlets of all zones on this system" +
    ". Blank if none.")]
[JsonProperty("hot_supply_plenum_name")]
public string HotSupplyPlenumName { get; set; } = "";
        

[Description("Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
[JsonProperty("return_plenum_name")]
public string ReturnPlenumName { get; set; } = "";
        

[JsonProperty("night_cycle_control")]
public HVACTemplate_System_DualDuct_NightCycleControl NightCycleControl { get; set; } = (HVACTemplate_System_DualDuct_NightCycleControl)Enum.Parse(typeof(HVACTemplate_System_DualDuct_NightCycleControl), "StayOff");
        

[Description("Applicable only if Night Cycle Control is Cycle On Control Zone.")]
[JsonProperty("night_cycle_control_zone_name")]
public string NightCycleControlZoneName { get; set; } = "";
        

[JsonProperty("heat_recovery_type")]
public HVACTemplate_System_DualDuct_HeatRecoveryType HeatRecoveryType { get; set; } = (HVACTemplate_System_DualDuct_HeatRecoveryType)Enum.Parse(typeof(HVACTemplate_System_DualDuct_HeatRecoveryType), "None");
        

[JsonProperty("sensible_heat_recovery_effectiveness")]
public System.Nullable<float> SensibleHeatRecoveryEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("latent_heat_recovery_effectiveness")]
public System.Nullable<float> LatentHeatRecoveryEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_recovery_heat_exchanger_type")]
public HVACTemplate_System_DualDuct_HeatRecoveryHeatExchangerType HeatRecoveryHeatExchangerType { get; set; } = (HVACTemplate_System_DualDuct_HeatRecoveryHeatExchangerType)Enum.Parse(typeof(HVACTemplate_System_DualDuct_HeatRecoveryHeatExchangerType), "Plate");
        

[JsonProperty("heat_recovery_frost_control_type")]
public HVACTemplate_System_DualDuct_HeatRecoveryFrostControlType HeatRecoveryFrostControlType { get; set; } = (HVACTemplate_System_DualDuct_HeatRecoveryFrostControlType)Enum.Parse(typeof(HVACTemplate_System_DualDuct_HeatRecoveryFrostControlType), "None");
        

[Description("None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint as " +
    "required to meet the humidity setpoint.")]
[JsonProperty("dehumidification_control_type")]
public HVACTemplate_System_DualDuct_DehumidificationControlType DehumidificationControlType { get; set; } = (HVACTemplate_System_DualDuct_DehumidificationControlType)Enum.Parse(typeof(HVACTemplate_System_DualDuct_DehumidificationControlType), "None");
        

[Description("Zone name where humidistat is located")]
[JsonProperty("dehumidification_control_zone_name")]
public string DehumidificationControlZoneName { get; set; } = "";
        

[Description("Zone relative humidity setpoint in percent (0 to 100) Ignored if Dehumidification" +
    " Relative Humidity Setpoint Schedule specified below")]
[JsonProperty("dehumidification_relative_humidity_setpoint")]
public System.Nullable<float> DehumidificationRelativeHumiditySetpoint { get; set; } = (System.Nullable<float>)Single.Parse("60", CultureInfo.InvariantCulture);
        

[Description("Leave blank to use constant setpoint specified in Dehumidification Relative Humid" +
    "ity Setpoint above. Schedule values must be in percent relative humidity (0 to 1" +
    "00).")]
[JsonProperty("dehumidification_relative_humidity_setpoint_schedule_name")]
public string DehumidificationRelativeHumiditySetpointScheduleName { get; set; } = "";
        

[JsonProperty("humidifier_type")]
public HVACTemplate_System_DualDuct_HumidifierType HumidifierType { get; set; } = (HVACTemplate_System_DualDuct_HumidifierType)Enum.Parse(typeof(HVACTemplate_System_DualDuct_HumidifierType), "None");
        

[Description("If blank, always available")]
[JsonProperty("humidifier_availability_schedule_name")]
public string HumidifierAvailabilityScheduleName { get; set; } = "";
        

[Description("Moisture output rate at full rated power input. The humidifier does not currently" +
    " autosize, so the default is very large to allow for adequate capacity.")]
[JsonProperty("humidifier_rated_capacity")]
public System.Nullable<float> HumidifierRatedCapacity { get; set; } = (System.Nullable<float>)Single.Parse("1E-06", CultureInfo.InvariantCulture);
        

[Description("Electric power input at rated capacity moisture output. Power consumption is prop" +
    "ortional to moisture output with no part-load penalty.")]
[JsonProperty("humidifier_rated_electric_power")]
public string HumidifierRatedElectricPower { get; set; } = (System.String)"Autosize";
        

[Description("Zone name where humidistat is located")]
[JsonProperty("humidifier_control_zone_name")]
public string HumidifierControlZoneName { get; set; } = "";
        

[Description("Zone relative humidity setpoint in percent (0 to 100). Ignored if Humidifier Rela" +
    "tive Humidity Setpoint Schedule specified below")]
[JsonProperty("humidifier_relative_humidity_setpoint")]
public System.Nullable<float> HumidifierRelativeHumiditySetpoint { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[Description("Leave blank to use constant setpoint specified in Humidifier Relative Humidity Se" +
    "tpoint above. Schedule values must be in percent relative humidity (0 to 100).")]
[JsonProperty("humidifier_relative_humidity_setpoint_schedule_name")]
public string HumidifierRelativeHumiditySetpointScheduleName { get; set; } = "";
        

[Description("Select whether autosized system supply flow rate is the sum of Coincident or NonC" +
    "oincident zone air flow rates.")]
[JsonProperty("sizing_option")]
public HVACTemplate_System_DualDuct_SizingOption SizingOption { get; set; } = (HVACTemplate_System_DualDuct_SizingOption)Enum.Parse(typeof(HVACTemplate_System_DualDuct_SizingOption), "NonCoincident");
        

[Description("Specifies if the system has a return fan.")]
[JsonProperty("return_fan")]
public EmptyNoYes ReturnFan { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("return_fan_total_efficiency")]
public System.Nullable<float> ReturnFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_delta_pressure")]
public System.Nullable<float> ReturnFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("500", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_motor_efficiency")]
public System.Nullable<float> ReturnFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("return_fan_motor_in_air_stream_fraction")]
public System.Nullable<float> ReturnFanMotorInAirStreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-20" +
    "04 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of" +
    " coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Va" +
    "lues table.")]
[JsonProperty("return_fan_part_load_power_coefficients")]
public HVACTemplate_System_DualDuct_ReturnFanPartLoadPowerCoefficients ReturnFanPartLoadPowerCoefficients { get; set; } = (HVACTemplate_System_DualDuct_ReturnFanPartLoadPowerCoefficients)Enum.Parse(typeof(HVACTemplate_System_DualDuct_ReturnFanPartLoadPowerCoefficients), "InletVaneDampers");
    }
    
    public enum HVACTemplate_System_DualDuct_SystemConfigurationType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DualFanConstantVolume")]
        DualFanConstantVolume = 1,
        
        [JsonProperty("DualFanVariableVolume")]
        DualFanVariableVolume = 2,
        
        [JsonProperty("SingleFanConstantVolume")]
        SingleFanConstantVolume = 3,
        
        [JsonProperty("SingleFanVariableVolume")]
        SingleFanVariableVolume = 4,
    }
    
    public enum HVACTemplate_System_DualDuct_MainSupplyFanPartLoadPowerCoefficients
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAE90.1-2004AppendixG")]
        ASHRAE9012004AppendixG = 1,
        
        [JsonProperty("InletVaneDampers")]
        InletVaneDampers = 2,
        
        [JsonProperty("OutletDampers")]
        OutletDampers = 3,
        
        [JsonProperty("VariableSpeedMotor")]
        VariableSpeedMotor = 4,
        
        [JsonProperty("VariableSpeedMotorPressureReset")]
        VariableSpeedMotorPressureReset = 5,
    }
    
    public enum HVACTemplate_System_DualDuct_ColdDuctSupplyFanPartLoadPowerCoefficients
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAE90.1-2004AppendixG")]
        ASHRAE9012004AppendixG = 1,
        
        [JsonProperty("InletVaneDampers")]
        InletVaneDampers = 2,
        
        [JsonProperty("OutletDampers")]
        OutletDampers = 3,
        
        [JsonProperty("VariableSpeedMotor")]
        VariableSpeedMotor = 4,
        
        [JsonProperty("VariableSpeedMotorPressureReset")]
        VariableSpeedMotorPressureReset = 5,
    }
    
    public enum HVACTemplate_System_DualDuct_ColdDuctSupplyFanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum HVACTemplate_System_DualDuct_HotDuctSupplyFanPartLoadPowerCoefficients
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAE90.1-2004AppendixG")]
        ASHRAE9012004AppendixG = 1,
        
        [JsonProperty("InletVaneDampers")]
        InletVaneDampers = 2,
        
        [JsonProperty("OutletDampers")]
        OutletDampers = 3,
        
        [JsonProperty("VariableSpeedMotor")]
        VariableSpeedMotor = 4,
        
        [JsonProperty("VariableSpeedMotorPressureReset")]
        VariableSpeedMotorPressureReset = 5,
    }
    
    public enum HVACTemplate_System_DualDuct_HotDuctSupplyFanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum HVACTemplate_System_DualDuct_CoolingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ChilledWater")]
        ChilledWater = 1,
        
        [JsonProperty("ChilledWaterDetailedFlatModel")]
        ChilledWaterDetailedFlatModel = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum HVACTemplate_System_DualDuct_CoolingCoilSetpointControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FixedSetpoint")]
        FixedSetpoint = 1,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 2,
        
        [JsonProperty("Scheduled")]
        Scheduled = 3,
        
        [JsonProperty("Warmest")]
        Warmest = 4,
    }
    
    public enum HVACTemplate_System_DualDuct_HeatingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HVACTemplate_System_DualDuct_HeatingCoilSetpointControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Coldest")]
        Coldest = 1,
        
        [JsonProperty("FixedSetpoint")]
        FixedSetpoint = 2,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 3,
        
        [JsonProperty("Scheduled")]
        Scheduled = 4,
    }
    
    public enum HVACTemplate_System_DualDuct_PreheatCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HVACTemplate_System_DualDuct_MinimumOutdoorAirControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FixedMinimum")]
        FixedMinimum = 1,
        
        [JsonProperty("ProportionalMinimum")]
        ProportionalMinimum = 2,
    }
    
    public enum HVACTemplate_System_DualDuct_EconomizerType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DifferentialDryBulb")]
        DifferentialDryBulb = 1,
        
        [JsonProperty("DifferentialDryBulbAndEnthalpy")]
        DifferentialDryBulbAndEnthalpy = 2,
        
        [JsonProperty("DifferentialEnthalpy")]
        DifferentialEnthalpy = 3,
        
        [JsonProperty("ElectronicEnthalpy")]
        ElectronicEnthalpy = 4,
        
        [JsonProperty("FixedDewPointAndDryBulb")]
        FixedDewPointAndDryBulb = 5,
        
        [JsonProperty("FixedDryBulb")]
        FixedDryBulb = 6,
        
        [JsonProperty("FixedEnthalpy")]
        FixedEnthalpy = 7,
        
        [JsonProperty("NoEconomizer")]
        NoEconomizer = 8,
    }
    
    public enum HVACTemplate_System_DualDuct_EconomizerLockout
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("NoLockout")]
        NoLockout = 1,
    }
    
    public enum HVACTemplate_System_DualDuct_NightCycleControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CycleOnAny")]
        CycleOnAny = 1,
        
        [JsonProperty("CycleOnControlZone")]
        CycleOnControlZone = 2,
        
        [JsonProperty("StayOff")]
        StayOff = 3,
    }
    
    public enum HVACTemplate_System_DualDuct_HeatRecoveryType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Sensible")]
        Sensible = 3,
    }
    
    public enum HVACTemplate_System_DualDuct_HeatRecoveryHeatExchangerType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Plate")]
        Plate = 1,
        
        [JsonProperty("Rotary")]
        Rotary = 2,
    }
    
    public enum HVACTemplate_System_DualDuct_HeatRecoveryFrostControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ExhaustAirRecirculation")]
        ExhaustAirRecirculation = 1,
        
        [JsonProperty("ExhaustOnly")]
        ExhaustOnly = 2,
        
        [JsonProperty("MinimumExhaustTemperature")]
        MinimumExhaustTemperature = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HVACTemplate_System_DualDuct_DehumidificationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    public enum HVACTemplate_System_DualDuct_HumidifierType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ElectricSteam")]
        ElectricSteam = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    public enum HVACTemplate_System_DualDuct_SizingOption
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Coincident")]
        Coincident = 1,
        
        [JsonProperty("NonCoincident")]
        NonCoincident = 2,
    }
    
    public enum HVACTemplate_System_DualDuct_ReturnFanPartLoadPowerCoefficients
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAE90.1-2004AppendixG")]
        ASHRAE9012004AppendixG = 1,
        
        [JsonProperty("InletVaneDampers")]
        InletVaneDampers = 2,
        
        [JsonProperty("OutletDampers")]
        OutletDampers = 3,
        
        [JsonProperty("VariableSpeedMotor")]
        VariableSpeedMotor = 4,
        
        [JsonProperty("VariableSpeedMotorPressureReset")]
        VariableSpeedMotorPressureReset = 5,
    }
    
    [Description("This object creates a dedicated outdoor air system that must be used with HVACTem" +
        "plate:Zone:* objects for BaseboardHeat FanCoil PTAC PTHP WaterToAirHeatPump and " +
        "VRF. Does not support HVACTemplate:Zone:VAV or other central multizone systems")]
    [JsonObject("HVACTemplate:System:DedicatedOutdoorAir")]
    public class HVACTemplate_System_DedicatedOutdoorAir : BHoMObject, IEnergyPlusClass
    {
        

[Description("If blank, always on; DOAS System always on. Schedule is used in availability mana" +
    "ger and fan scheduling.")]
[JsonProperty("system_availability_schedule_name")]
public string SystemAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("air_outlet_type")]
public HVACTemplate_System_DedicatedOutdoorAir_AirOutletType AirOutletType { get; set; } = (HVACTemplate_System_DedicatedOutdoorAir_AirOutletType)Enum.Parse(typeof(HVACTemplate_System_DedicatedOutdoorAir_AirOutletType), "DirectIntoZone");
        

[JsonProperty("supply_fan_flow_rate")]
public string SupplyFanFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("supply_fan_total_efficiency")]
public System.Nullable<float> SupplyFanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_delta_pressure")]
public System.Nullable<float> SupplyFanDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("1000", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_motor_efficiency")]
public System.Nullable<float> SupplyFanMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_motor_in_air_stream_fraction")]
public System.Nullable<float> SupplyFanMotorInAirStreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_fan_placement")]
public HVACTemplate_System_DedicatedOutdoorAir_SupplyFanPlacement SupplyFanPlacement { get; set; } = (HVACTemplate_System_DedicatedOutdoorAir_SupplyFanPlacement)Enum.Parse(typeof(HVACTemplate_System_DedicatedOutdoorAir_SupplyFanPlacement), "DrawThrough");
        

[JsonProperty("cooling_coil_type")]
public HVACTemplate_System_DedicatedOutdoorAir_CoolingCoilType CoolingCoilType { get; set; } = (HVACTemplate_System_DedicatedOutdoorAir_CoolingCoilType)Enum.Parse(typeof(HVACTemplate_System_DedicatedOutdoorAir_CoolingCoilType), "ChilledWater");
        

[Description("If blank, always on")]
[JsonProperty("cooling_coil_availability_schedule_name")]
public string CoolingCoilAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("cooling_coil_setpoint_control_type")]
public HVACTemplate_System_DedicatedOutdoorAir_CoolingCoilSetpointControlType CoolingCoilSetpointControlType { get; set; } = (HVACTemplate_System_DedicatedOutdoorAir_CoolingCoilSetpointControlType)Enum.Parse(typeof(HVACTemplate_System_DedicatedOutdoorAir_CoolingCoilSetpointControlType), "FixedSetpoint");
        

[Description("Used for sizing and as constant setpoint if no Cooling Coil Setpoint Schedule Nam" +
    "e is specified.")]
[JsonProperty("cooling_coil_design_setpoint")]
public System.Nullable<float> CoolingCoilDesignSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("12.8", CultureInfo.InvariantCulture);
        

[Description("Leave blank if constant setpoint")]
[JsonProperty("cooling_coil_setpoint_schedule_name")]
public string CoolingCoilSetpointScheduleName { get; set; } = "";
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("cooling_coil_setpoint_at_outdoor_dry_bulb_low")]
public System.Nullable<float> CoolingCoilSetpointAtOutdoorDryBulbLow { get; set; } = (System.Nullable<float>)Single.Parse("15.6", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control. Defaults are 15.6C (60F) " +
    "at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)")]
[JsonProperty("cooling_coil_reset_outdoor_dry_bulb_low")]
public System.Nullable<float> CoolingCoilResetOutdoorDryBulbLow { get; set; } = (System.Nullable<float>)Single.Parse("15.6", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("cooling_coil_setpoint_at_outdoor_dry_bulb_high")]
public System.Nullable<float> CoolingCoilSetpointAtOutdoorDryBulbHigh { get; set; } = (System.Nullable<float>)Single.Parse("12.8", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("cooling_coil_reset_outdoor_dry_bulb_high")]
public System.Nullable<float> CoolingCoilResetOutdoorDryBulbHigh { get; set; } = (System.Nullable<float>)Single.Parse("23.3", CultureInfo.InvariantCulture);
        

[Description("Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("dx_cooling_coil_gross_rated_total_capacity")]
public string DxCoolingCoilGrossRatedTotalCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Gross SHR")]
[JsonProperty("dx_cooling_coil_gross_rated_sensible_heat_ratio")]
public string DxCoolingCoilGrossRatedSensibleHeatRatio { get; set; } = (System.String)"Autosize";
        

[Description("Gross cooling capacity divided by power input to the compressor and outdoor fan, " +
    "does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty("dx_cooling_coil_gross_rated_cop")]
public System.Nullable<float> DxCoolingCoilGrossRatedCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_coil_type")]
public HVACTemplate_System_DedicatedOutdoorAir_HeatingCoilType HeatingCoilType { get; set; } = (HVACTemplate_System_DedicatedOutdoorAir_HeatingCoilType)Enum.Parse(typeof(HVACTemplate_System_DedicatedOutdoorAir_HeatingCoilType), "HotWater");
        

[Description("If blank, always on")]
[JsonProperty("heating_coil_availability_schedule_name")]
public string HeatingCoilAvailabilityScheduleName { get; set; } = "";
        

[Description("When selecting OutdoorAirTemperatureReset, the Heating Coil Design Setpoint may n" +
    "eed to be changed")]
[JsonProperty("heating_coil_setpoint_control_type")]
public HVACTemplate_System_DedicatedOutdoorAir_HeatingCoilSetpointControlType HeatingCoilSetpointControlType { get; set; } = (HVACTemplate_System_DedicatedOutdoorAir_HeatingCoilSetpointControlType)Enum.Parse(typeof(HVACTemplate_System_DedicatedOutdoorAir_HeatingCoilSetpointControlType), "FixedSetpoint");
        

[Description("Used for sizing and as constant setpoint if no Heating Coil Setpoint Schedule Nam" +
    "e is specified.")]
[JsonProperty("heating_coil_design_setpoint")]
public System.Nullable<float> HeatingCoilDesignSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("12.2", CultureInfo.InvariantCulture);
        

[Description("Leave blank if constant setpoint")]
[JsonProperty("heating_coil_setpoint_schedule_name")]
public string HeatingCoilSetpointScheduleName { get; set; } = "";
        

[Description("Applicable only for OutdoorAirTemperatureReset control. Defaults 15.0C (59F) at 7" +
    ".8C (46F) to 12.2C (54F) at 12.2C (54F)")]
[JsonProperty("heating_coil_setpoint_at_outdoor_dry_bulb_low")]
public System.Nullable<float> HeatingCoilSetpointAtOutdoorDryBulbLow { get; set; } = (System.Nullable<float>)Single.Parse("15", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("heating_coil_reset_outdoor_dry_bulb_low")]
public System.Nullable<float> HeatingCoilResetOutdoorDryBulbLow { get; set; } = (System.Nullable<float>)Single.Parse("7.8", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("heating_coil_setpoint_at_outdoor_dry_bulb_high")]
public System.Nullable<float> HeatingCoilSetpointAtOutdoorDryBulbHigh { get; set; } = (System.Nullable<float>)Single.Parse("12.2", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("heating_coil_reset_outdoor_dry_bulb_high")]
public System.Nullable<float> HeatingCoilResetOutdoorDryBulbHigh { get; set; } = (System.Nullable<float>)Single.Parse("12.2", CultureInfo.InvariantCulture);
        

[JsonProperty("gas_heating_coil_efficiency")]
public System.Nullable<float> GasHeatingCoilEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[JsonProperty("gas_heating_coil_parasitic_electric_load")]
public System.Nullable<float> GasHeatingCoilParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_recovery_type")]
public HVACTemplate_System_DedicatedOutdoorAir_HeatRecoveryType HeatRecoveryType { get; set; } = (HVACTemplate_System_DedicatedOutdoorAir_HeatRecoveryType)Enum.Parse(typeof(HVACTemplate_System_DedicatedOutdoorAir_HeatRecoveryType), "None");
        

[JsonProperty("heat_recovery_sensible_effectiveness")]
public System.Nullable<float> HeatRecoverySensibleEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_recovery_latent_effectiveness")]
public System.Nullable<float> HeatRecoveryLatentEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_recovery_heat_exchanger_type")]
public HVACTemplate_System_DedicatedOutdoorAir_HeatRecoveryHeatExchangerType HeatRecoveryHeatExchangerType { get; set; } = (HVACTemplate_System_DedicatedOutdoorAir_HeatRecoveryHeatExchangerType)Enum.Parse(typeof(HVACTemplate_System_DedicatedOutdoorAir_HeatRecoveryHeatExchangerType), "Plate");
        

[JsonProperty("heat_recovery_frost_control_type")]
public HVACTemplate_System_DedicatedOutdoorAir_HeatRecoveryFrostControlType HeatRecoveryFrostControlType { get; set; } = (HVACTemplate_System_DedicatedOutdoorAir_HeatRecoveryFrostControlType)Enum.Parse(typeof(HVACTemplate_System_DedicatedOutdoorAir_HeatRecoveryFrostControlType), "None");
        

[Description(@"None = meet sensible load only CoolReheatHeatingCoil = cool beyond the dry-bulb setpoint, reheat with heating coil Valid for all cooling coil types. If no heating coil specified, cold supply temps may occur. CoolReheatDesuperheater = cool beyond the dry-bulb setpoint as required to meet the humidity setpoint, reheat with desuperheater coil. Valid only for Cooling Coil Type = TwoSpeedDX, TwoStageDX, TwoStageHumidityControlDX, or HeatExchangerAssistedDX. Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only for Cooling Coil Type = TwoStageHumidityControlDX or HeatExchangerAssistedDX")]
[JsonProperty("dehumidification_control_type")]
public HVACTemplate_System_DedicatedOutdoorAir_DehumidificationControlType DehumidificationControlType { get; set; } = (HVACTemplate_System_DedicatedOutdoorAir_DehumidificationControlType)Enum.Parse(typeof(HVACTemplate_System_DedicatedOutdoorAir_DehumidificationControlType), "None");
        

[Description("The supply air humidity ratio for dehumidification control. Default of 0.00924 kg" +
    "Water/kgDryAir is equivalent to 12.8C (55F) dewpoint. Ignored if Dehumidificatio" +
    "n Setpoint Schedule specified below")]
[JsonProperty("dehumidification_setpoint")]
public System.Nullable<float> DehumidificationSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("0.00924", CultureInfo.InvariantCulture);
        

[JsonProperty("humidifier_type")]
public HVACTemplate_System_DedicatedOutdoorAir_HumidifierType HumidifierType { get; set; } = (HVACTemplate_System_DedicatedOutdoorAir_HumidifierType)Enum.Parse(typeof(HVACTemplate_System_DedicatedOutdoorAir_HumidifierType), "None");
        

[Description("If blank, always available")]
[JsonProperty("humidifier_availability_schedule_name")]
public string HumidifierAvailabilityScheduleName { get; set; } = "";
        

[Description("Moisture output rate at full rated power input. The humidifier does not currently" +
    " autosize, so the default is very large to allow for adequate capacity.")]
[JsonProperty("humidifier_rated_capacity")]
public System.Nullable<float> HumidifierRatedCapacity { get; set; } = (System.Nullable<float>)Single.Parse("1E-06", CultureInfo.InvariantCulture);
        

[Description("Electric power input at rated capacity moisture output. Power consumption is prop" +
    "ortional to moisture output with no part-load penalty.")]
[JsonProperty("humidifier_rated_electric_power")]
public string HumidifierRatedElectricPower { get; set; } = (System.String)"Autosize";
        

[Description("The supply air humidity ratio for humidification control. Ignored if Humidifier S" +
    "etpoint Schedule specified below")]
[JsonProperty("humidifier_constant_setpoint")]
public System.Nullable<float> HumidifierConstantSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("0.003", CultureInfo.InvariantCulture);
        

[Description("Leave blank to use constant setpoint specified in Dehumidification Setpoint above" +
    ". Schedule values must be in units of humidity ratio (kgWater/kgDryAir or lbWate" +
    "r/lbDryAir)")]
[JsonProperty("dehumidification_setpoint_schedule_name")]
public string DehumidificationSetpointScheduleName { get; set; } = "";
        

[Description("Leave blank to use constant setpoint specified in Humidifier Constant Setpoint ab" +
    "ove. Schedule values must be in units of humidity ratio (kgWater/kgDryAir or lbW" +
    "ater/lbDryAir)")]
[JsonProperty("humidifier_setpoint_schedule_name")]
public string HumidifierSetpointScheduleName { get; set; } = "";
    }
    
    public enum HVACTemplate_System_DedicatedOutdoorAir_AirOutletType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DirectIntoZone")]
        DirectIntoZone = 1,
    }
    
    public enum HVACTemplate_System_DedicatedOutdoorAir_SupplyFanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum HVACTemplate_System_DedicatedOutdoorAir_CoolingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ChilledWater")]
        ChilledWater = 1,
        
        [JsonProperty("ChilledWaterDetailedFlatModel")]
        ChilledWaterDetailedFlatModel = 2,
        
        [JsonProperty("HeatExchangerAssistedChilledWater")]
        HeatExchangerAssistedChilledWater = 3,
        
        [JsonProperty("HeatExchangerAssistedDX")]
        HeatExchangerAssistedDX = 4,
        
        [JsonProperty("None")]
        None = 5,
        
        [JsonProperty("TwoSpeedDX")]
        TwoSpeedDX = 6,
        
        [JsonProperty("TwoStageDX")]
        TwoStageDX = 7,
        
        [JsonProperty("TwoStageHumidityControlDX")]
        TwoStageHumidityControlDX = 8,
    }
    
    public enum HVACTemplate_System_DedicatedOutdoorAir_CoolingCoilSetpointControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FixedSetpoint")]
        FixedSetpoint = 1,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 2,
        
        [JsonProperty("Scheduled")]
        Scheduled = 3,
    }
    
    public enum HVACTemplate_System_DedicatedOutdoorAir_HeatingCoilType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HVACTemplate_System_DedicatedOutdoorAir_HeatingCoilSetpointControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FixedSetpoint")]
        FixedSetpoint = 1,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 2,
        
        [JsonProperty("Scheduled")]
        Scheduled = 3,
    }
    
    public enum HVACTemplate_System_DedicatedOutdoorAir_HeatRecoveryType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Sensible")]
        Sensible = 3,
    }
    
    public enum HVACTemplate_System_DedicatedOutdoorAir_HeatRecoveryHeatExchangerType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Plate")]
        Plate = 1,
        
        [JsonProperty("Rotary")]
        Rotary = 2,
    }
    
    public enum HVACTemplate_System_DedicatedOutdoorAir_HeatRecoveryFrostControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ExhaustAirRecirculation")]
        ExhaustAirRecirculation = 1,
        
        [JsonProperty("ExhaustOnly")]
        ExhaustOnly = 2,
        
        [JsonProperty("MinimumExhaustTemperature")]
        MinimumExhaustTemperature = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HVACTemplate_System_DedicatedOutdoorAir_DehumidificationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CoolReheatDesuperheater")]
        CoolReheatDesuperheater = 1,
        
        [JsonProperty("CoolReheatHeatingCoil")]
        CoolReheatHeatingCoil = 2,
        
        [JsonProperty("Multimode")]
        Multimode = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HVACTemplate_System_DedicatedOutdoorAir_HumidifierType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ElectricSteam")]
        ElectricSteam = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    [Description("Plant and condenser loops to serve all HVACTemplate chilled water coils, chillers" +
        ", and towers.")]
    [JsonObject("HVACTemplate:Plant:ChilledWaterLoop")]
    public class HVACTemplate_Plant_ChilledWaterLoop : BHoMObject, IEnergyPlusClass
    {
        

[Description("If blank, always available Applies to both chilled water and condenser loop pumps" +
    "")]
[JsonProperty("pump_schedule_name")]
public string PumpScheduleName { get; set; } = "";
        

[Description("Applies to both chilled water and condenser loop pumps")]
[JsonProperty("pump_control_type")]
public HVACTemplate_Plant_ChilledWaterLoop_PumpControlType PumpControlType { get; set; } = (HVACTemplate_Plant_ChilledWaterLoop_PumpControlType)Enum.Parse(typeof(HVACTemplate_Plant_ChilledWaterLoop_PumpControlType), "Intermittent");
        

[Description("Default operation type makes all equipment available at all times operating in or" +
    "der of Priority specified in HVACTemplate:Plant:Chiller objects.")]
[JsonProperty("chiller_plant_operation_scheme_type")]
public HVACTemplate_Plant_ChilledWaterLoop_ChillerPlantOperationSchemeType ChillerPlantOperationSchemeType { get; set; } = (HVACTemplate_Plant_ChilledWaterLoop_ChillerPlantOperationSchemeType)Enum.Parse(typeof(HVACTemplate_Plant_ChilledWaterLoop_ChillerPlantOperationSchemeType), "Default");
        

[Description("Name of a PlantEquipmentOperationSchemes object Ignored if Chiller Plant Operatio" +
    "n Scheme Type = Default")]
[JsonProperty("chiller_plant_equipment_operation_schemes_name")]
public string ChillerPlantEquipmentOperationSchemesName { get; set; } = "";
        

[Description("Leave blank if constant setpoint")]
[JsonProperty("chilled_water_setpoint_schedule_name")]
public string ChilledWaterSetpointScheduleName { get; set; } = "";
        

[Description("Used for sizing and as constant setpoint if no Chilled Water Setpoint Schedule Na" +
    "me is specified.")]
[JsonProperty("chilled_water_design_setpoint")]
public System.Nullable<float> ChilledWaterDesignSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("7.22", CultureInfo.InvariantCulture);
        

[Description(@"VariablePrimaryNoSecondary - variable flow to chillers and coils ConstantPrimaryNoSecondary - constant flow to chillers and coils, excess bypassed ConstantPrimaryVariableSecondary - constant flow to chillers, variable flow to coils VariablePrimaryConstantSecondary - currently unsupported - variable flow to chillers, constant flow to coils")]
[JsonProperty("chilled_water_pump_configuration")]
public HVACTemplate_Plant_ChilledWaterLoop_ChilledWaterPumpConfiguration ChilledWaterPumpConfiguration { get; set; } = (HVACTemplate_Plant_ChilledWaterLoop_ChilledWaterPumpConfiguration)Enum.Parse(typeof(HVACTemplate_Plant_ChilledWaterLoop_ChilledWaterPumpConfiguration), "ConstantPrimaryNoSecondary");
        

[Description("default head is 60 feet H2O")]
[JsonProperty("primary_chilled_water_pump_rated_head")]
public System.Nullable<float> PrimaryChilledWaterPumpRatedHead { get; set; } = (System.Nullable<float>)Single.Parse("179352", CultureInfo.InvariantCulture);
        

[Description("default head is 60 feet H2O")]
[JsonProperty("secondary_chilled_water_pump_rated_head")]
public System.Nullable<float> SecondaryChilledWaterPumpRatedHead { get; set; } = (System.Nullable<float>)Single.Parse("179352", CultureInfo.InvariantCulture);
        

[Description("Default operation type makes all equipment available at all times operating in or" +
    "der of Priority specified in HVACTemplate:Plant:Tower objects. May be left blank" +
    " if not serving any water cooled chillers")]
[JsonProperty("condenser_plant_operation_scheme_type")]
public HVACTemplate_Plant_ChilledWaterLoop_CondenserPlantOperationSchemeType CondenserPlantOperationSchemeType { get; set; } = (HVACTemplate_Plant_ChilledWaterLoop_CondenserPlantOperationSchemeType)Enum.Parse(typeof(HVACTemplate_Plant_ChilledWaterLoop_CondenserPlantOperationSchemeType), "Default");
        

[Description("Name of a CondenserEquipmentOperationSchemes object Ignored if Condenser Plant Op" +
    "eration Scheme Type = Default May be left blank if not serving any water cooled " +
    "chillers")]
[JsonProperty("condenser_equipment_operation_schemes_name")]
public string CondenserEquipmentOperationSchemesName { get; set; } = "";
        

[Description("May be left blank if not serving any water cooled chillers")]
[JsonProperty("condenser_water_temperature_control_type")]
public HVACTemplate_Plant_ChilledWaterLoop_CondenserWaterTemperatureControlType CondenserWaterTemperatureControlType { get; set; } = (HVACTemplate_Plant_ChilledWaterLoop_CondenserWaterTemperatureControlType)Enum.Parse(typeof(HVACTemplate_Plant_ChilledWaterLoop_CondenserWaterTemperatureControlType), "OutdoorWetBulbTemperature");
        

[Description("Leave blank if constant setpoint May be left blank if not serving any water coole" +
    "d chillers")]
[JsonProperty("condenser_water_setpoint_schedule_name")]
public string CondenserWaterSetpointScheduleName { get; set; } = "";
        

[Description("Used for sizing and as constant setpoint if no Condenser Water Setpoint Schedule " +
    "Name is specified. May be left blank if not serving any water cooled chillers")]
[JsonProperty("condenser_water_design_setpoint")]
public System.Nullable<float> CondenserWaterDesignSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("29.4", CultureInfo.InvariantCulture);
        

[Description("May be left blank if not serving any water cooled chillers default head is 60 fee" +
    "t H2O")]
[JsonProperty("condenser_water_pump_rated_head")]
public System.Nullable<float> CondenserWaterPumpRatedHead { get; set; } = (System.Nullable<float>)Single.Parse("179352", CultureInfo.InvariantCulture);
        

[Description("Overrides Chilled Water Setpoint Schedule Name")]
[JsonProperty("chilled_water_setpoint_reset_type")]
public HVACTemplate_Plant_ChilledWaterLoop_ChilledWaterSetpointResetType ChilledWaterSetpointResetType { get; set; } = (HVACTemplate_Plant_ChilledWaterLoop_ChilledWaterSetpointResetType)Enum.Parse(typeof(HVACTemplate_Plant_ChilledWaterLoop_ChilledWaterSetpointResetType), "None");
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("chilled_water_setpoint_at_outdoor_dry_bulb_low")]
public System.Nullable<float> ChilledWaterSetpointAtOutdoorDryBulbLow { get; set; } = (System.Nullable<float>)Single.Parse("12.2", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("chilled_water_reset_outdoor_dry_bulb_low")]
public System.Nullable<float> ChilledWaterResetOutdoorDryBulbLow { get; set; } = (System.Nullable<float>)Single.Parse("15.6", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("chilled_water_setpoint_at_outdoor_dry_bulb_high")]
public System.Nullable<float> ChilledWaterSetpointAtOutdoorDryBulbHigh { get; set; } = (System.Nullable<float>)Single.Parse("6.7", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("chilled_water_reset_outdoor_dry_bulb_high")]
public System.Nullable<float> ChilledWaterResetOutdoorDryBulbHigh { get; set; } = (System.Nullable<float>)Single.Parse("26.7", CultureInfo.InvariantCulture);
        

[Description("Describes the type of pump configuration used for the primary portion of the chil" +
    "led water loop.")]
[JsonProperty("chilled_water_primary_pump_type")]
public HVACTemplate_Plant_ChilledWaterLoop_ChilledWaterPrimaryPumpType ChilledWaterPrimaryPumpType { get; set; } = (HVACTemplate_Plant_ChilledWaterLoop_ChilledWaterPrimaryPumpType)Enum.Parse(typeof(HVACTemplate_Plant_ChilledWaterLoop_ChilledWaterPrimaryPumpType), "SinglePump");
        

[Description("Describes the type of pump configuration used for the secondary portion of the ch" +
    "illed water loop.")]
[JsonProperty("chilled_water_secondary_pump_type")]
public HVACTemplate_Plant_ChilledWaterLoop_ChilledWaterSecondaryPumpType ChilledWaterSecondaryPumpType { get; set; } = (HVACTemplate_Plant_ChilledWaterLoop_ChilledWaterSecondaryPumpType)Enum.Parse(typeof(HVACTemplate_Plant_ChilledWaterLoop_ChilledWaterSecondaryPumpType), "SinglePump");
        

[Description("Describes the type of pump configuration used for the condenser water loop.")]
[JsonProperty("condenser_water_pump_type")]
public HVACTemplate_Plant_ChilledWaterLoop_CondenserWaterPumpType CondenserWaterPumpType { get; set; } = (HVACTemplate_Plant_ChilledWaterLoop_CondenserWaterPumpType)Enum.Parse(typeof(HVACTemplate_Plant_ChilledWaterLoop_CondenserWaterPumpType), "SinglePump");
        

[Description("Determines if a supply side bypass pipe is present in the chilled water loop.")]
[JsonProperty("chilled_water_supply_side_bypass_pipe")]
public EmptyNoYes ChilledWaterSupplySideBypassPipe { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[Description("Determines if a demand side bypass pipe is present in the chilled water loop.")]
[JsonProperty("chilled_water_demand_side_bypass_pipe")]
public EmptyNoYes ChilledWaterDemandSideBypassPipe { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[Description("Determines if a supply side bypass pipe is present in the condenser water loop.")]
[JsonProperty("condenser_water_supply_side_bypass_pipe")]
public EmptyNoYes CondenserWaterSupplySideBypassPipe { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[Description("Determines if a demand side bypass pipe is present in the condenser water loop.")]
[JsonProperty("condenser_water_demand_side_bypass_pipe")]
public EmptyNoYes CondenserWaterDemandSideBypassPipe { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("fluid_type")]
public HVACTemplate_Plant_ChilledWaterLoop_FluidType FluidType { get; set; } = (HVACTemplate_Plant_ChilledWaterLoop_FluidType)Enum.Parse(typeof(HVACTemplate_Plant_ChilledWaterLoop_FluidType), "Water");
        

[Description("The temperature difference used in sizing the loop flow rate.")]
[JsonProperty("loop_design_delta_temperature")]
public System.Nullable<float> LoopDesignDeltaTemperature { get; set; } = (System.Nullable<float>)Single.Parse("6.67", CultureInfo.InvariantCulture);
        

[Description("The minimum outdoor dry-bulb temperature that the chilled water loops operate. Le" +
    "ave blank for no limit.")]
[JsonProperty("minimum_outdoor_dry_bulb_temperature")]
public System.Nullable<float> MinimumOutdoorDryBulbTemperature { get; set; } = null;
        

[JsonProperty("chilled_water_load_distribution_scheme")]
public HVACTemplate_Plant_ChilledWaterLoop_ChilledWaterLoadDistributionScheme ChilledWaterLoadDistributionScheme { get; set; } = (HVACTemplate_Plant_ChilledWaterLoop_ChilledWaterLoadDistributionScheme)Enum.Parse(typeof(HVACTemplate_Plant_ChilledWaterLoop_ChilledWaterLoadDistributionScheme), "SequentialLoad");
        

[JsonProperty("condenser_water_load_distribution_scheme")]
public HVACTemplate_Plant_ChilledWaterLoop_CondenserWaterLoadDistributionScheme CondenserWaterLoadDistributionScheme { get; set; } = (HVACTemplate_Plant_ChilledWaterLoop_CondenserWaterLoadDistributionScheme)Enum.Parse(typeof(HVACTemplate_Plant_ChilledWaterLoop_CondenserWaterLoadDistributionScheme), "SequentialLoad");
    }
    
    public enum HVACTemplate_Plant_ChilledWaterLoop_PumpControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Continuous")]
        Continuous = 1,
        
        [JsonProperty("Intermittent")]
        Intermittent = 2,
    }
    
    public enum HVACTemplate_Plant_ChilledWaterLoop_ChillerPlantOperationSchemeType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Default")]
        Default = 1,
        
        [JsonProperty("UserDefined")]
        UserDefined = 2,
    }
    
    public enum HVACTemplate_Plant_ChilledWaterLoop_ChilledWaterPumpConfiguration
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantPrimaryNoSecondary")]
        ConstantPrimaryNoSecondary = 1,
        
        [JsonProperty("ConstantPrimaryVariableSecondary")]
        ConstantPrimaryVariableSecondary = 2,
        
        [JsonProperty("VariablePrimaryNoSecondary")]
        VariablePrimaryNoSecondary = 3,
    }
    
    public enum HVACTemplate_Plant_ChilledWaterLoop_CondenserPlantOperationSchemeType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Default")]
        Default = 1,
        
        [JsonProperty("UserDefined")]
        UserDefined = 2,
    }
    
    public enum HVACTemplate_Plant_ChilledWaterLoop_CondenserWaterTemperatureControlType
    {
        
        [JsonProperty("OutdoorWetBulbTemperature")]
        OutdoorWetBulbTemperature = 0,
        
        [JsonProperty("SpecifiedSetpoint")]
        SpecifiedSetpoint = 1,
    }
    
    public enum HVACTemplate_Plant_ChilledWaterLoop_ChilledWaterSetpointResetType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 2,
    }
    
    public enum HVACTemplate_Plant_ChilledWaterLoop_ChilledWaterPrimaryPumpType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FiveHeaderedPumps")]
        FiveHeaderedPumps = 1,
        
        [JsonProperty("FourHeaderedPumps")]
        FourHeaderedPumps = 2,
        
        [JsonProperty("PumpPerChiller")]
        PumpPerChiller = 3,
        
        [JsonProperty("SinglePump")]
        SinglePump = 4,
        
        [JsonProperty("ThreeHeaderedPumps")]
        ThreeHeaderedPumps = 5,
        
        [JsonProperty("TwoHeaderedPumps")]
        TwoHeaderedPumps = 6,
    }
    
    public enum HVACTemplate_Plant_ChilledWaterLoop_ChilledWaterSecondaryPumpType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FiveHeaderedPumps")]
        FiveHeaderedPumps = 1,
        
        [JsonProperty("FourHeaderedPumps")]
        FourHeaderedPumps = 2,
        
        [JsonProperty("SinglePump")]
        SinglePump = 3,
        
        [JsonProperty("ThreeHeaderedPumps")]
        ThreeHeaderedPumps = 4,
        
        [JsonProperty("TwoHeaderedPumps")]
        TwoHeaderedPumps = 5,
    }
    
    public enum HVACTemplate_Plant_ChilledWaterLoop_CondenserWaterPumpType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FiveHeaderedPumps")]
        FiveHeaderedPumps = 1,
        
        [JsonProperty("FourHeaderedPumps")]
        FourHeaderedPumps = 2,
        
        [JsonProperty("PumpPerTower")]
        PumpPerTower = 3,
        
        [JsonProperty("SinglePump")]
        SinglePump = 4,
        
        [JsonProperty("ThreeHeaderedPumps")]
        ThreeHeaderedPumps = 5,
        
        [JsonProperty("TwoHeaderedPumps")]
        TwoHeaderedPumps = 6,
    }
    
    public enum HVACTemplate_Plant_ChilledWaterLoop_FluidType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("EthyleneGlycol30")]
        EthyleneGlycol30 = 1,
        
        [JsonProperty("EthyleneGlycol40")]
        EthyleneGlycol40 = 2,
        
        [JsonProperty("EthyleneGlycol50")]
        EthyleneGlycol50 = 3,
        
        [JsonProperty("EthyleneGlycol60")]
        EthyleneGlycol60 = 4,
        
        [JsonProperty("PropyleneGlycol30")]
        PropyleneGlycol30 = 5,
        
        [JsonProperty("PropyleneGlycol40")]
        PropyleneGlycol40 = 6,
        
        [JsonProperty("PropyleneGlycol50")]
        PropyleneGlycol50 = 7,
        
        [JsonProperty("PropyleneGlycol60")]
        PropyleneGlycol60 = 8,
        
        [JsonProperty("Water")]
        Water = 9,
    }
    
    public enum HVACTemplate_Plant_ChilledWaterLoop_ChilledWaterLoadDistributionScheme
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Optimal")]
        Optimal = 1,
        
        [JsonProperty("SequentialLoad")]
        SequentialLoad = 2,
        
        [JsonProperty("SequentialUniformPLR")]
        SequentialUniformPLR = 3,
        
        [JsonProperty("UniformLoad")]
        UniformLoad = 4,
        
        [JsonProperty("UniformPLR")]
        UniformPLR = 5,
    }
    
    public enum HVACTemplate_Plant_ChilledWaterLoop_CondenserWaterLoadDistributionScheme
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Optimal")]
        Optimal = 1,
        
        [JsonProperty("SequentialLoad")]
        SequentialLoad = 2,
        
        [JsonProperty("SequentialUniformPLR")]
        SequentialUniformPLR = 3,
        
        [JsonProperty("UniformLoad")]
        UniformLoad = 4,
        
        [JsonProperty("UniformPLR")]
        UniformPLR = 5,
    }
    
    [Description("This object adds a chiller to an HVACTemplate:Plant:ChilledWaterLoop.")]
    [JsonObject("HVACTemplate:Plant:Chiller")]
    public class HVACTemplate_Plant_Chiller : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("chiller_type")]
public HVACTemplate_Plant_Chiller_ChillerType ChillerType { get; set; } = (HVACTemplate_Plant_Chiller_ChillerType)Enum.Parse(typeof(HVACTemplate_Plant_Chiller_ChillerType), "DistrictChilledWater");
        

[JsonProperty("capacity")]
public string Capacity { get; set; } = (System.String)"Autosize";
        

[Description("Not applicable if Chiller Type is DistrictChilledWater Electric Reciprocating Chi" +
    "ller")]
[JsonProperty("nominal_cop")]
public System.Nullable<float> NominalCop { get; set; } = null;
        

[Description("Not applicable if Chiller Type is DistrictChilledWater")]
[JsonProperty("condenser_type")]
public HVACTemplate_Plant_Chiller_CondenserType CondenserType { get; set; } = (HVACTemplate_Plant_Chiller_CondenserType)Enum.Parse(typeof(HVACTemplate_Plant_Chiller_CondenserType), "WaterCooled");
        

[Description("If Chiller Plant Operation Scheme Type=Default in HVACTemplate:Plant:ChilledWater" +
    "Loop, then equipment operates in Priority order, 1, 2, 3, etc.")]
[JsonProperty("priority")]
public string Priority { get; set; } = "";
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Part load ratio below which the chiller starts cycling on/off to meet the load. M" +
    "ust be less than or equal to Maximum Part Load Ratio.")]
[JsonProperty("minimum_part_load_ratio")]
public System.Nullable<float> MinimumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Maximum allowable part load ratio. Must be greater than or equal to Minimum Part " +
    "Load Ratio.")]
[JsonProperty("maximum_part_load_ratio")]
public System.Nullable<float> MaximumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Optimum part load ratio where the chiller is most efficient. Must be greater than" +
    " or equal to the Minimum Part Load Ratio and less than or equal to the Maximum P" +
    "art Load Ratio.")]
[JsonProperty("optimum_part_load_ratio")]
public System.Nullable<float> OptimumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Part load ratio where the chiller can no longer unload and false loading begins. " +
    "Minimum unloading ratio must be greater than or equal to the Minimum Part Load R" +
    "atio and less than or equal to the Maximum Part Load Ratio.")]
[JsonProperty("minimum_unloading_ratio")]
public System.Nullable<float> MinimumUnloadingRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.25", CultureInfo.InvariantCulture);
        

[JsonProperty("leaving_chilled_water_lower_temperature_limit")]
public System.Nullable<float> LeavingChilledWaterLowerTemperatureLimit { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
    }
    
    public enum HVACTemplate_Plant_Chiller_ChillerType
    {
        
        [JsonProperty("DistrictChilledWater")]
        DistrictChilledWater = 0,
        
        [JsonProperty("ElectricCentrifugalChiller")]
        ElectricCentrifugalChiller = 1,
        
        [JsonProperty("ElectricReciprocatingChiller")]
        ElectricReciprocatingChiller = 2,
        
        [JsonProperty("ElectricScrewChiller")]
        ElectricScrewChiller = 3,
    }
    
    public enum HVACTemplate_Plant_Chiller_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 3,
    }
    
    [Description("This object references a detailed chiller object and adds it to an HVACTemplate:P" +
        "lant:ChilledWaterLoop. The user must create a complete detailed chiller object w" +
        "ith all required curve or performance objects.")]
    [JsonObject("HVACTemplate:Plant:Chiller:ObjectReference")]
    public class HVACTemplate_Plant_Chiller_ObjectReference : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("chiller_object_type")]
public HVACTemplate_Plant_Chiller_ObjectReference_ChillerObjectType ChillerObjectType { get; set; } = (HVACTemplate_Plant_Chiller_ObjectReference_ChillerObjectType)Enum.Parse(typeof(HVACTemplate_Plant_Chiller_ObjectReference_ChillerObjectType), "Empty");
        

[Description("The name of the detailed chiller object.")]
[JsonProperty("chiller_name")]
public string ChillerName { get; set; } = "";
        

[Description("If Chiller Plant Operation Scheme Type=Default in HVACTemplate:Plant:ChilledWater" +
    "Loop, then equipment operates in Priority order, 1, 2, 3, etc.")]
[JsonProperty("priority")]
public System.Nullable<float> Priority { get; set; } = null;
    }
    
    public enum HVACTemplate_Plant_Chiller_ObjectReference_ChillerObjectType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 1,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 2,
    }
    
    [Description("This object adds a cooling tower to an HVACTemplate:Plant:ChilledWaterLoop or Mix" +
        "edWaterLoop.")]
    [JsonObject("HVACTemplate:Plant:Tower")]
    public class HVACTemplate_Plant_Tower : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("tower_type")]
public HVACTemplate_Plant_Tower_TowerType TowerType { get; set; } = (HVACTemplate_Plant_Tower_TowerType)Enum.Parse(typeof(HVACTemplate_Plant_Tower_TowerType), "SingleSpeed");
        

[Description(@"Applicable for tower type SingleSpeed and TwoSpeed Nominal tower capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature, with the tower fan operating at high speed. Design water flow rate assumed to be 5.382E-8 m3/s per watt(3 gpm/ton). Nominal tower capacity times (1.25) gives the actual tower heat rejection at these operating conditions.")]
[JsonProperty("high_speed_nominal_capacity")]
public string HighSpeedNominalCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Applicable for tower type SingleSpeed and TwoSpeed")]
[JsonProperty("high_speed_fan_power")]
public string HighSpeedFanPower { get; set; } = (System.String)"Autosize";
        

[Description(@"Applicable only for Tower Type TwoSpeed Nominal tower capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature, with the tower fan operating at low speed. Design water flow rate assumed to be 5.382E-8 m3/s per watt of tower high-speed nominal capacity (3 gpm/ton). Nominal tower capacity times (1.25) gives the actual tower heat rejection at these operating conditions.")]
[JsonProperty("low_speed_nominal_capacity")]
public string LowSpeedNominalCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Applicable only for Tower Type TwoSpeed")]
[JsonProperty("low_speed_fan_power")]
public string LowSpeedFanPower { get; set; } = (System.String)"Autosize";
        

[Description(@"Applicable for Tower Type SingleSpeed and TwoSpeed Tower capacity in free convection regime with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt of tower high-speed nominal capacity (3 gpm/ton). Tower free convection capacity times (1.25) gives the actual tower heat rejection at these operating conditions.")]
[JsonProperty("free_convection_capacity")]
public string FreeConvectionCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Applicable for all Tower Types If Condenser Plant Operation Scheme Type=Default i" +
    "n HVACTemplate:Plant:ChilledWaterLoop, then equipment operates in Priority order" +
    ", 1, 2, 3, etc.")]
[JsonProperty("priority")]
public string Priority { get; set; } = "";
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Specifies if this tower serves a template chilled water loop or mixed water loop " +
    "If left blank, will serve a chilled water loop if present, or a mixed water loop" +
    " (if no chilled water loop is present).")]
[JsonProperty("template_plant_loop_type")]
public HVACTemplate_Plant_Tower_TemplatePlantLoopType TemplatePlantLoopType { get; set; } = (HVACTemplate_Plant_Tower_TemplatePlantLoopType)Enum.Parse(typeof(HVACTemplate_Plant_Tower_TemplatePlantLoopType), "ChilledWater");
    }
    
    public enum HVACTemplate_Plant_Tower_TowerType
    {
        
        [JsonProperty("SingleSpeed")]
        SingleSpeed = 0,
        
        [JsonProperty("TwoSpeed")]
        TwoSpeed = 1,
    }
    
    public enum HVACTemplate_Plant_Tower_TemplatePlantLoopType
    {
        
        [JsonProperty("ChilledWater")]
        ChilledWater = 0,
        
        [JsonProperty("MixedWater")]
        MixedWater = 1,
    }
    
    [Description("This object references a detailed cooling tower object and adds it to an HVACTemp" +
        "late:Plant:ChilledWaterLoop or MixedWaterLoop. The user must create a complete d" +
        "etailed cooling tower object with all required curve or performance objects.")]
    [JsonObject("HVACTemplate:Plant:Tower:ObjectReference")]
    public class HVACTemplate_Plant_Tower_ObjectReference : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("cooling_tower_object_type")]
public HVACTemplate_Plant_Tower_ObjectReference_CoolingTowerObjectType CoolingTowerObjectType { get; set; } = (HVACTemplate_Plant_Tower_ObjectReference_CoolingTowerObjectType)Enum.Parse(typeof(HVACTemplate_Plant_Tower_ObjectReference_CoolingTowerObjectType), "Empty");
        

[Description("The name of the detailed cooling tower object.")]
[JsonProperty("cooling_tower_name")]
public string CoolingTowerName { get; set; } = "";
        

[Description("If Condenser Plant Operation Scheme Type=Default in HVACTemplate:Plant:ChilledWat" +
    "erLoop or MixedWaterLoop, then equipment operates in Priority order, 1, 2, 3, et" +
    "c.")]
[JsonProperty("priority")]
public System.Nullable<float> Priority { get; set; } = null;
        

[Description("Specifies if this tower serves a template chilled water loop or mixed water loop " +
    "If left blank, will serve a chilled water loop if present, or a mixed water loop" +
    " (if no chilled water loop is present).")]
[JsonProperty("template_plant_loop_type")]
public HVACTemplate_Plant_Tower_ObjectReference_TemplatePlantLoopType TemplatePlantLoopType { get; set; } = (HVACTemplate_Plant_Tower_ObjectReference_TemplatePlantLoopType)Enum.Parse(typeof(HVACTemplate_Plant_Tower_ObjectReference_TemplatePlantLoopType), "ChilledWater");
    }
    
    public enum HVACTemplate_Plant_Tower_ObjectReference_CoolingTowerObjectType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CoolingTower:SingleSpeed")]
        CoolingTowerSingleSpeed = 1,
        
        [JsonProperty("CoolingTower:TwoSpeed")]
        CoolingTowerTwoSpeed = 2,
        
        [JsonProperty("CoolingTower:VariableSpeed")]
        CoolingTowerVariableSpeed = 3,
    }
    
    public enum HVACTemplate_Plant_Tower_ObjectReference_TemplatePlantLoopType
    {
        
        [JsonProperty("ChilledWater")]
        ChilledWater = 0,
        
        [JsonProperty("MixedWater")]
        MixedWater = 1,
    }
    
    [Description("Plant loop to serve all HVACTemplate hot water coils and boilers.")]
    [JsonObject("HVACTemplate:Plant:HotWaterLoop")]
    public class HVACTemplate_Plant_HotWaterLoop : BHoMObject, IEnergyPlusClass
    {
        

[Description("If blank, always available")]
[JsonProperty("pump_schedule_name")]
public string PumpScheduleName { get; set; } = "";
        

[JsonProperty("pump_control_type")]
public HVACTemplate_Plant_HotWaterLoop_PumpControlType PumpControlType { get; set; } = (HVACTemplate_Plant_HotWaterLoop_PumpControlType)Enum.Parse(typeof(HVACTemplate_Plant_HotWaterLoop_PumpControlType), "Intermittent");
        

[Description("Default operation type makes all equipment available at all times operating in or" +
    "der of Priority specified in HVACTemplate:Plant:Boiler objects.")]
[JsonProperty("hot_water_plant_operation_scheme_type")]
public HVACTemplate_Plant_HotWaterLoop_HotWaterPlantOperationSchemeType HotWaterPlantOperationSchemeType { get; set; } = (HVACTemplate_Plant_HotWaterLoop_HotWaterPlantOperationSchemeType)Enum.Parse(typeof(HVACTemplate_Plant_HotWaterLoop_HotWaterPlantOperationSchemeType), "Default");
        

[Description("Name of a PlantEquipmentOperationSchemes object Ignored if Plant Operation Scheme" +
    " Type = Default")]
[JsonProperty("hot_water_plant_equipment_operation_schemes_name")]
public string HotWaterPlantEquipmentOperationSchemesName { get; set; } = "";
        

[Description("Leave blank if constant setpoint")]
[JsonProperty("hot_water_setpoint_schedule_name")]
public string HotWaterSetpointScheduleName { get; set; } = "";
        

[Description("Used for sizing and as constant setpoint if no Setpoint Schedule Name is specifie" +
    "d.")]
[JsonProperty("hot_water_design_setpoint")]
public System.Nullable<float> HotWaterDesignSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("82", CultureInfo.InvariantCulture);
        

[Description("VariableFlow - variable flow to boilers and coils, excess bypassed ConstantFlow -" +
    " constant flow to boilers and coils, excess bypassed")]
[JsonProperty("hot_water_pump_configuration")]
public HVACTemplate_Plant_HotWaterLoop_HotWaterPumpConfiguration HotWaterPumpConfiguration { get; set; } = (HVACTemplate_Plant_HotWaterLoop_HotWaterPumpConfiguration)Enum.Parse(typeof(HVACTemplate_Plant_HotWaterLoop_HotWaterPumpConfiguration), "ConstantFlow");
        

[Description("Default head is 60 feet H2O")]
[JsonProperty("hot_water_pump_rated_head")]
public System.Nullable<float> HotWaterPumpRatedHead { get; set; } = (System.Nullable<float>)Single.Parse("179352", CultureInfo.InvariantCulture);
        

[Description("Overrides Hot Water Setpoint Schedule Name")]
[JsonProperty("hot_water_setpoint_reset_type")]
public HVACTemplate_Plant_HotWaterLoop_HotWaterSetpointResetType HotWaterSetpointResetType { get; set; } = (HVACTemplate_Plant_HotWaterLoop_HotWaterSetpointResetType)Enum.Parse(typeof(HVACTemplate_Plant_HotWaterLoop_HotWaterSetpointResetType), "None");
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("hot_water_setpoint_at_outdoor_dry_bulb_low")]
public System.Nullable<float> HotWaterSetpointAtOutdoorDryBulbLow { get; set; } = (System.Nullable<float>)Single.Parse("82.2", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("hot_water_reset_outdoor_dry_bulb_low")]
public System.Nullable<float> HotWaterResetOutdoorDryBulbLow { get; set; } = (System.Nullable<float>)Single.Parse("-6.7", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("hot_water_setpoint_at_outdoor_dry_bulb_high")]
public System.Nullable<float> HotWaterSetpointAtOutdoorDryBulbHigh { get; set; } = (System.Nullable<float>)Single.Parse("65.6", CultureInfo.InvariantCulture);
        

[Description("Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty("hot_water_reset_outdoor_dry_bulb_high")]
public System.Nullable<float> HotWaterResetOutdoorDryBulbHigh { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("Describes the type of pump configuration used for the hot water loop.")]
[JsonProperty("hot_water_pump_type")]
public HVACTemplate_Plant_HotWaterLoop_HotWaterPumpType HotWaterPumpType { get; set; } = (HVACTemplate_Plant_HotWaterLoop_HotWaterPumpType)Enum.Parse(typeof(HVACTemplate_Plant_HotWaterLoop_HotWaterPumpType), "SinglePump");
        

[Description("Determines if a supply side bypass pipe is present in the hot water loop.")]
[JsonProperty("supply_side_bypass_pipe")]
public EmptyNoYes SupplySideBypassPipe { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[Description("Determines if a demand side bypass pipe is present in the hot water loop.")]
[JsonProperty("demand_side_bypass_pipe")]
public EmptyNoYes DemandSideBypassPipe { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("fluid_type")]
public HVACTemplate_Plant_HotWaterLoop_FluidType FluidType { get; set; } = (HVACTemplate_Plant_HotWaterLoop_FluidType)Enum.Parse(typeof(HVACTemplate_Plant_HotWaterLoop_FluidType), "Water");
        

[Description("The temperature difference used in sizing the loop flow rate.")]
[JsonProperty("loop_design_delta_temperature")]
public System.Nullable<float> LoopDesignDeltaTemperature { get; set; } = (System.Nullable<float>)Single.Parse("11", CultureInfo.InvariantCulture);
        

[Description("The maximum outdoor dry-bulb temperature that the hot water loops operate. Leave " +
    "blank for no limit.")]
[JsonProperty("maximum_outdoor_dry_bulb_temperature")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperature { get; set; } = null;
        

[JsonProperty("load_distribution_scheme")]
public HVACTemplate_Plant_HotWaterLoop_LoadDistributionScheme LoadDistributionScheme { get; set; } = (HVACTemplate_Plant_HotWaterLoop_LoadDistributionScheme)Enum.Parse(typeof(HVACTemplate_Plant_HotWaterLoop_LoadDistributionScheme), "SequentialLoad");
    }
    
    public enum HVACTemplate_Plant_HotWaterLoop_PumpControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Continuous")]
        Continuous = 1,
        
        [JsonProperty("Intermittent")]
        Intermittent = 2,
    }
    
    public enum HVACTemplate_Plant_HotWaterLoop_HotWaterPlantOperationSchemeType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Default")]
        Default = 1,
        
        [JsonProperty("UserDefined")]
        UserDefined = 2,
    }
    
    public enum HVACTemplate_Plant_HotWaterLoop_HotWaterPumpConfiguration
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("VariableFlow")]
        VariableFlow = 2,
    }
    
    public enum HVACTemplate_Plant_HotWaterLoop_HotWaterSetpointResetType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 2,
    }
    
    public enum HVACTemplate_Plant_HotWaterLoop_HotWaterPumpType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FiveHeaderedPumps")]
        FiveHeaderedPumps = 1,
        
        [JsonProperty("FourHeaderedPumps")]
        FourHeaderedPumps = 2,
        
        [JsonProperty("PumpPerBoiler")]
        PumpPerBoiler = 3,
        
        [JsonProperty("SinglePump")]
        SinglePump = 4,
        
        [JsonProperty("ThreeHeaderedPumps")]
        ThreeHeaderedPumps = 5,
        
        [JsonProperty("TwoHeaderedPumps")]
        TwoHeaderedPumps = 6,
    }
    
    public enum HVACTemplate_Plant_HotWaterLoop_FluidType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("EthyleneGlycol30")]
        EthyleneGlycol30 = 1,
        
        [JsonProperty("EthyleneGlycol40")]
        EthyleneGlycol40 = 2,
        
        [JsonProperty("EthyleneGlycol50")]
        EthyleneGlycol50 = 3,
        
        [JsonProperty("EthyleneGlycol60")]
        EthyleneGlycol60 = 4,
        
        [JsonProperty("PropyleneGlycol30")]
        PropyleneGlycol30 = 5,
        
        [JsonProperty("PropyleneGlycol40")]
        PropyleneGlycol40 = 6,
        
        [JsonProperty("PropyleneGlycol50")]
        PropyleneGlycol50 = 7,
        
        [JsonProperty("PropyleneGlycol60")]
        PropyleneGlycol60 = 8,
        
        [JsonProperty("Water")]
        Water = 9,
    }
    
    public enum HVACTemplate_Plant_HotWaterLoop_LoadDistributionScheme
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Optimal")]
        Optimal = 1,
        
        [JsonProperty("SequentialLoad")]
        SequentialLoad = 2,
        
        [JsonProperty("SequentialUniformPLR")]
        SequentialUniformPLR = 3,
        
        [JsonProperty("UniformLoad")]
        UniformLoad = 4,
        
        [JsonProperty("UniformPLR")]
        UniformPLR = 5,
    }
    
    [Description("This object adds a boiler to an HVACTemplate:Plant:HotWaterLoop or MixedWaterLoop" +
        ".")]
    [JsonObject("HVACTemplate:Plant:Boiler")]
    public class HVACTemplate_Plant_Boiler : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("boiler_type")]
public HVACTemplate_Plant_Boiler_BoilerType BoilerType { get; set; } = (HVACTemplate_Plant_Boiler_BoilerType)Enum.Parse(typeof(HVACTemplate_Plant_Boiler_BoilerType), "CondensingHotWaterBoiler");
        

[JsonProperty("capacity")]
public string Capacity { get; set; } = (System.String)"Autosize";
        

[Description("Not applicable  if Boiler Type is DistrictHotWater")]
[JsonProperty("efficiency")]
public System.Nullable<float> Efficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[Description("Not applicable  if Boiler Type is DistrictHotWater")]
[JsonProperty("fuel_type")]
public HVACTemplate_Plant_Boiler_FuelType FuelType { get; set; } = (HVACTemplate_Plant_Boiler_FuelType)Enum.Parse(typeof(HVACTemplate_Plant_Boiler_FuelType), "Coal");
        

[Description("If Hot Water Plant Operation Scheme Type=Default in HVACTemplate:Plant:HotWaterLo" +
    "op, then equipment operates in priority order, 1, 2, 3, etc.")]
[JsonProperty("priority")]
public string Priority { get; set; } = "";
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("minimum_part_load_ratio")]
public System.Nullable<float> MinimumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_part_load_ratio")]
public System.Nullable<float> MaximumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("1.1", CultureInfo.InvariantCulture);
        

[JsonProperty("optimum_part_load_ratio")]
public System.Nullable<float> OptimumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("water_outlet_upper_temperature_limit")]
public System.Nullable<float> WaterOutletUpperTemperatureLimit { get; set; } = (System.Nullable<float>)Single.Parse("100", CultureInfo.InvariantCulture);
        

[Description("Specifies if this boiler serves a template hot water loop or mixed water loop If " +
    "left blank, will serve a hot water loop if present, or a mixed water loop (if no" +
    " hot water loop is present).")]
[JsonProperty("template_plant_loop_type")]
public HVACTemplate_Plant_Boiler_TemplatePlantLoopType TemplatePlantLoopType { get; set; } = (HVACTemplate_Plant_Boiler_TemplatePlantLoopType)Enum.Parse(typeof(HVACTemplate_Plant_Boiler_TemplatePlantLoopType), "HotWater");
    }
    
    public enum HVACTemplate_Plant_Boiler_BoilerType
    {
        
        [JsonProperty("CondensingHotWaterBoiler")]
        CondensingHotWaterBoiler = 0,
        
        [JsonProperty("DistrictHotWater")]
        DistrictHotWater = 1,
        
        [JsonProperty("HotWaterBoiler")]
        HotWaterBoiler = 2,
    }
    
    public enum HVACTemplate_Plant_Boiler_FuelType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("Electricity")]
        Electricity = 2,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 3,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 4,
        
        [JsonProperty("Gasoline")]
        Gasoline = 5,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 6,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 7,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 8,
        
        [JsonProperty("Propane")]
        Propane = 9,
    }
    
    public enum HVACTemplate_Plant_Boiler_TemplatePlantLoopType
    {
        
        [JsonProperty("HotWater")]
        HotWater = 0,
        
        [JsonProperty("MixedWater")]
        MixedWater = 1,
    }
    
    [Description("This object references a detailed boiler object and adds it to an HVACTemplate:Pl" +
        "ant:HotWaterLoop or MixedWaterLoop. The user must create a complete detailed boi" +
        "ler object with all required curve or performance objects.")]
    [JsonObject("HVACTemplate:Plant:Boiler:ObjectReference")]
    public class HVACTemplate_Plant_Boiler_ObjectReference : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("boiler_object_type")]
public HVACTemplate_Plant_Boiler_ObjectReference_BoilerObjectType BoilerObjectType { get; set; } = (HVACTemplate_Plant_Boiler_ObjectReference_BoilerObjectType)Enum.Parse(typeof(HVACTemplate_Plant_Boiler_ObjectReference_BoilerObjectType), "Empty");
        

[Description("The name of the detailed boiler object.")]
[JsonProperty("boiler_name")]
public string BoilerName { get; set; } = "";
        

[Description("If Hot Water Plant Operation Scheme Type=Default in HVACTemplate:Plant:HotWaterLo" +
    "op or MixedWaterLoop, then equipment operates in Priority order, 1, 2, 3, etc.")]
[JsonProperty("priority")]
public System.Nullable<float> Priority { get; set; } = null;
        

[Description("Specifies if this boiler serves a template hot water loop or mixed water loop If " +
    "left blank, will serve a hot water loop if present, or a mixed water loop (if no" +
    " hot water loop is present).")]
[JsonProperty("template_plant_loop_type")]
public HVACTemplate_Plant_Boiler_ObjectReference_TemplatePlantLoopType TemplatePlantLoopType { get; set; } = (HVACTemplate_Plant_Boiler_ObjectReference_TemplatePlantLoopType)Enum.Parse(typeof(HVACTemplate_Plant_Boiler_ObjectReference_TemplatePlantLoopType), "HotWater");
    }
    
    public enum HVACTemplate_Plant_Boiler_ObjectReference_BoilerObjectType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Boiler:HotWater")]
        BoilerHotWater = 1,
    }
    
    public enum HVACTemplate_Plant_Boiler_ObjectReference_TemplatePlantLoopType
    {
        
        [JsonProperty("HotWater")]
        HotWater = 0,
        
        [JsonProperty("MixedWater")]
        MixedWater = 1,
    }
    
    [Description("Central plant loop portion of a water source heat pump system.")]
    [JsonObject("HVACTemplate:Plant:MixedWaterLoop")]
    public class HVACTemplate_Plant_MixedWaterLoop : BHoMObject, IEnergyPlusClass
    {
        

[Description("If blank, always available Applies to both chilled water and condenser loop pumps" +
    "")]
[JsonProperty("pump_schedule_name")]
public string PumpScheduleName { get; set; } = "";
        

[Description("Applies to both chilled water and condenser loop pumps")]
[JsonProperty("pump_control_type")]
public HVACTemplate_Plant_MixedWaterLoop_PumpControlType PumpControlType { get; set; } = (HVACTemplate_Plant_MixedWaterLoop_PumpControlType)Enum.Parse(typeof(HVACTemplate_Plant_MixedWaterLoop_PumpControlType), "Intermittent");
        

[Description("Default operation type makes all equipment available at all times operating in or" +
    "der of Priority specified in HVACTemplate:Plant:Boiler and HVACTemplate:Plant:To" +
    "wer objects.")]
[JsonProperty("operation_scheme_type")]
public HVACTemplate_Plant_MixedWaterLoop_OperationSchemeType OperationSchemeType { get; set; } = (HVACTemplate_Plant_MixedWaterLoop_OperationSchemeType)Enum.Parse(typeof(HVACTemplate_Plant_MixedWaterLoop_OperationSchemeType), "Default");
        

[Description("Name of a PlantEquipmentOperationSchemes object Ignored if Plant Operation Scheme" +
    " Type = Default")]
[JsonProperty("equipment_operation_schemes_name")]
public string EquipmentOperationSchemesName { get; set; } = "";
        

[Description("Leave blank if constant setpoint")]
[JsonProperty("high_temperature_setpoint_schedule_name")]
public string HighTemperatureSetpointScheduleName { get; set; } = "";
        

[Description("Used for sizing and as constant setpoint if no Setpoint Schedule Name is specifie" +
    "d.")]
[JsonProperty("high_temperature_design_setpoint")]
public System.Nullable<float> HighTemperatureDesignSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("33", CultureInfo.InvariantCulture);
        

[Description("Leave blank if constant setpoint May be left blank if not serving any water coole" +
    "d chillers")]
[JsonProperty("low_temperature_setpoint_schedule_name")]
public string LowTemperatureSetpointScheduleName { get; set; } = "";
        

[Description("Used for sizing and as constant setpoint if no Condenser Water Setpoint Schedule " +
    "Name is specified. May be left blank if not serving any water cooled chillers")]
[JsonProperty("low_temperature_design_setpoint")]
public System.Nullable<float> LowTemperatureDesignSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("20", CultureInfo.InvariantCulture);
        

[Description("VariableFlow - variable flow to boilers and coils, excess bypassed ConstantFlow -" +
    " constant flow to boilers and coils, excess bypassed")]
[JsonProperty("water_pump_configuration")]
public HVACTemplate_Plant_MixedWaterLoop_WaterPumpConfiguration WaterPumpConfiguration { get; set; } = (HVACTemplate_Plant_MixedWaterLoop_WaterPumpConfiguration)Enum.Parse(typeof(HVACTemplate_Plant_MixedWaterLoop_WaterPumpConfiguration), "ConstantFlow");
        

[Description("May be left blank if not serving any water cooled chillers default head is 60 fee" +
    "t H2O")]
[JsonProperty("water_pump_rated_head")]
public System.Nullable<float> WaterPumpRatedHead { get; set; } = (System.Nullable<float>)Single.Parse("179352", CultureInfo.InvariantCulture);
        

[Description("Describes the type of pump configuration used for the mixed water loop.")]
[JsonProperty("water_pump_type")]
public HVACTemplate_Plant_MixedWaterLoop_WaterPumpType WaterPumpType { get; set; } = (HVACTemplate_Plant_MixedWaterLoop_WaterPumpType)Enum.Parse(typeof(HVACTemplate_Plant_MixedWaterLoop_WaterPumpType), "SinglePump");
        

[Description("Determines if a supply side bypass pipe is present in the hot water loop.")]
[JsonProperty("supply_side_bypass_pipe")]
public EmptyNoYes SupplySideBypassPipe { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[Description("Determines if a demand side bypass pipe is present in the hot water loop.")]
[JsonProperty("demand_side_bypass_pipe")]
public EmptyNoYes DemandSideBypassPipe { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("fluid_type")]
public HVACTemplate_Plant_MixedWaterLoop_FluidType FluidType { get; set; } = (HVACTemplate_Plant_MixedWaterLoop_FluidType)Enum.Parse(typeof(HVACTemplate_Plant_MixedWaterLoop_FluidType), "Water");
        

[Description("The temperature difference used in sizing the loop flow rate.")]
[JsonProperty("loop_design_delta_temperature")]
public System.Nullable<float> LoopDesignDeltaTemperature { get; set; } = (System.Nullable<float>)Single.Parse("5.6", CultureInfo.InvariantCulture);
        

[JsonProperty("load_distribution_scheme")]
public HVACTemplate_Plant_MixedWaterLoop_LoadDistributionScheme LoadDistributionScheme { get; set; } = (HVACTemplate_Plant_MixedWaterLoop_LoadDistributionScheme)Enum.Parse(typeof(HVACTemplate_Plant_MixedWaterLoop_LoadDistributionScheme), "SequentialLoad");
    }
    
    public enum HVACTemplate_Plant_MixedWaterLoop_PumpControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Continuous")]
        Continuous = 1,
        
        [JsonProperty("Intermittent")]
        Intermittent = 2,
    }
    
    public enum HVACTemplate_Plant_MixedWaterLoop_OperationSchemeType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Default")]
        Default = 1,
        
        [JsonProperty("UserDefined")]
        UserDefined = 2,
    }
    
    public enum HVACTemplate_Plant_MixedWaterLoop_WaterPumpConfiguration
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("VariableFlow")]
        VariableFlow = 2,
    }
    
    public enum HVACTemplate_Plant_MixedWaterLoop_WaterPumpType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FiveHeaderedPumps")]
        FiveHeaderedPumps = 1,
        
        [JsonProperty("FourHeaderedPumps")]
        FourHeaderedPumps = 2,
        
        [JsonProperty("PumpPerTowerOrBoiler")]
        PumpPerTowerOrBoiler = 3,
        
        [JsonProperty("SinglePump")]
        SinglePump = 4,
        
        [JsonProperty("ThreeHeaderedPumps")]
        ThreeHeaderedPumps = 5,
        
        [JsonProperty("TwoHeaderedPumps")]
        TwoHeaderedPumps = 6,
    }
    
    public enum HVACTemplate_Plant_MixedWaterLoop_FluidType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("EthyleneGlycol30")]
        EthyleneGlycol30 = 1,
        
        [JsonProperty("EthyleneGlycol40")]
        EthyleneGlycol40 = 2,
        
        [JsonProperty("EthyleneGlycol50")]
        EthyleneGlycol50 = 3,
        
        [JsonProperty("EthyleneGlycol60")]
        EthyleneGlycol60 = 4,
        
        [JsonProperty("PropyleneGlycol30")]
        PropyleneGlycol30 = 5,
        
        [JsonProperty("PropyleneGlycol40")]
        PropyleneGlycol40 = 6,
        
        [JsonProperty("PropyleneGlycol50")]
        PropyleneGlycol50 = 7,
        
        [JsonProperty("PropyleneGlycol60")]
        PropyleneGlycol60 = 8,
        
        [JsonProperty("Water")]
        Water = 9,
    }
    
    public enum HVACTemplate_Plant_MixedWaterLoop_LoadDistributionScheme
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Optimal")]
        Optimal = 1,
        
        [JsonProperty("SequentialLoad")]
        SequentialLoad = 2,
        
        [JsonProperty("SequentialUniformPLR")]
        SequentialUniformPLR = 3,
        
        [JsonProperty("UniformLoad")]
        UniformLoad = 4,
        
        [JsonProperty("UniformPLR")]
        UniformPLR = 5,
    }
}
namespace BH.oM.Adapters.EnergyPlus.HybridModel
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Zones with measured air temperature data and a range of dates. If the range of te" +
        "mperature measurement dates includes a leap day, the weather data should include" +
        " a leap day.")]
    [JsonObject("HybridModel:Zone")]
    public class HybridModel_Zone : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Use measured zone air temperature to calculate zone internal thermal mass. If set" +
    " to Yes, the measured zone air temperature should be provided to calculate the t" +
    "hermal mass. If set to No, the inverse calculation of thermal mass will not be a" +
    "ctivated.")]
[JsonProperty("calculate_zone_internal_thermal_mass")]
public EmptyNoYes CalculateZoneInternalThermalMass { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description(@"Use measured temperature data (temperature, humidity ratio, or CO2 concentration) to calculate zone air infiltration air flow rate. Only one of field Calculate Zone Internal Thermal Mass, Calculate Zone Air Infiltration Rate, and Calculate Zone People Count can be set to YES at a time. By default, this field is set to NO. When set to NO, the inverse calculation of the zone air infiltration rate will not be activated. If this field is set to YES, one of the following fields (combinations) should be provided: 1. Measurements were conducted when HVAC is free-floating: 1.1 Zone Measured Air Temperature Schedule Name 1.2 Zone Measured Air Humidity Ratio Schedule Name 1.3 Zone Measured Air CO2 Concentration Schedule Name 2. Measurements were conducted when HVAC is on: 2.1 Zone Measured Air Temperature Schedule Name, Zone Input Supply Air Temperature Schedule Name, and Zone Input Supply Air Mass Flow Rate Schedule Name 2.2 Zone Measured Air Humidity Ratio Schedule Name, Zone Input Supply Air Temperature Schedule Name, Zone Input Supply Air Mass Flow Rate Schedule Name, and Zone Input Supply Air Humidity Ratio Schedule Name 2.3 Zone Measured Air CO2 Concentration Schedule Name, Zone Input Supply Air Mass Flow Rate Schedule Name, and Zone Input Supply Air CO2 Concentration Schedule Name")]
[JsonProperty("calculate_zone_air_infiltration_rate")]
public EmptyNoYes CalculateZoneAirInfiltrationRate { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Use measured humidity ratio data (temperature, humidity ratio, or CO2 concentrati" +
    "on) to calculate zone people count. Only one of field Calculate Zone Internal Th" +
    "ermal Mass, Calculate Zone Air Infiltration Rate, and Calculate Zone People Coun" +
    "t can be set to YES at a time. By default, this field is set to NO. When set to " +
    "NO, the inverse calculation of the zone people count will not be activated. If t" +
    "his field is set to YES, one of the following fields (combinations) should be pr" +
    "ovided: 1. Measurements were conducted when HVAC is free-floating: 1.1 Zone Meas" +
    "ured Air Temperature Schedule Name 1.2 Zone Measured Air Humidity Ratio Schedule" +
    " Name 1.3 Zone Measured Air CO2 Concentration Schedule Name 2. Measurements were" +
    " conducted when HVAC is on: 2.1 Zone Measured Air Temperature Schedule Name, Zon" +
    "e Input Supply Air Temperature Schedule Name, and Zone Input Supply Air Mass Flo" +
    "w Rate Schedule Name 2.2 Zone Measured Air Humidity Ratio Schedule Name, Zone In" +
    "put Supply Air Temperature Schedule Name, Zone Input Supply Air Mass Flow Rate S" +
    "chedule Name, and Zone Input Supply Air Humidity Ratio Schedule Name 2.3 Zone Me" +
    "asured Air CO2 Concentration Schedule Name, Zone Input Supply Air Mass Flow Rate" +
    " Schedule Name, and Zone Input Supply Air CO2 Concentration Schedule Name Field " +
    "Zone Input People Activity Schedule Name, Zone Input People Sensible Heat Fracti" +
    "on Schedule Name, Zone Input People Radiant Heat Fraction Schedule Name, Zone In" +
    "put People CO2 Generation Rate Schedule Name are optional. If provided, the defa" +
    "ult people activity level (130W), sensible heat generation rate (78W), latent he" +
    "at generation (52W) rate, and CO2 generation rate (0.0000000382 [m3/(s*W)]) will" +
    " be overwritten correspondingly.")]
[JsonProperty("calculate_zone_people_count")]
public EmptyNoYes CalculateZonePeopleCount { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("from Schedule:File")]
[JsonProperty("zone_measured_air_temperature_schedule_name")]
public string ZoneMeasuredAirTemperatureScheduleName { get; set; } = "";
        

[Description("from Schedule:File")]
[JsonProperty("zone_measured_air_humidity_ratio_schedule_name")]
public string ZoneMeasuredAirHumidityRatioScheduleName { get; set; } = "";
        

[Description("from Schedule:File")]
[JsonProperty("zone_measured_air_co2_concentration_schedule_name")]
public string ZoneMeasuredAirCo2ConcentrationScheduleName { get; set; } = "";
        

[Description("When this field is provided and valid, the default people activity level (used to" +
    " calculate people count) will be overwritten. from Schedule:File")]
[JsonProperty("zone_input_people_activity_schedule_name")]
public string ZoneInputPeopleActivityScheduleName { get; set; } = "";
        

[Description("When this field is provided and valid, the default sensible heat fraction from pe" +
    "ople (used to calculate people count) will be overwritten. from Schedule:File")]
[JsonProperty("zone_input_people_sensible_heat_fraction_schedule_name")]
public string ZoneInputPeopleSensibleHeatFractionScheduleName { get; set; } = "";
        

[Description("When this field is provided and valid, the default radiant heat portion of the se" +
    "nsible heat from people (used to calculate people count) will be overwritten. fr" +
    "om Schedule:File")]
[JsonProperty("zone_input_people_radiant_heat_fraction_schedule_name")]
public string ZoneInputPeopleRadiantHeatFractionScheduleName { get; set; } = "";
        

[Description("When this field is provided and valid, the default people CO2 generation rate (us" +
    "ed to calculate people count) will be overwritten. from Schedule:File")]
[JsonProperty("zone_input_people_co2_generation_rate_schedule_name")]
public string ZoneInputPeopleCo2GenerationRateScheduleName { get; set; } = "";
        

[Description("from Schedule:File")]
[JsonProperty("zone_input_supply_air_temperature_schedule_name")]
public string ZoneInputSupplyAirTemperatureScheduleName { get; set; } = "";
        

[Description("from Schedule:File")]
[JsonProperty("zone_input_supply_air_mass_flow_rate_schedule_name")]
public string ZoneInputSupplyAirMassFlowRateScheduleName { get; set; } = "";
        

[Description("from Schedule:File")]
[JsonProperty("zone_input_supply_air_humidity_ratio_schedule_name")]
public string ZoneInputSupplyAirHumidityRatioScheduleName { get; set; } = "";
        

[Description("from Schedule:File")]
[JsonProperty("zone_input_supply_air_co2_concentration_schedule_name")]
public string ZoneInputSupplyAirCo2ConcentrationScheduleName { get; set; } = "";
        

[JsonProperty("begin_month")]
public System.Nullable<float> BeginMonth { get; set; } = null;
        

[JsonProperty("begin_day_of_month")]
public System.Nullable<float> BeginDayOfMonth { get; set; } = null;
        

[JsonProperty("end_month")]
public System.Nullable<float> EndMonth { get; set; } = null;
        

[JsonProperty("end_day_of_month")]
public System.Nullable<float> EndDayOfMonth { get; set; } = null;
    }
}
namespace BH.oM.Adapters.EnergyPlus.InternalGains
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Sets internal gains and contaminant rates for occupants in the zone. If you use a" +
        " ZoneList in the Zone or ZoneList name field then this definition applies to all" +
        " the zones in the ZoneList.")]
    [JsonObject("People")]
    public class People : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_or_zonelist_name")]
public string ZoneOrZonelistName { get; set; } = "";
        

[Description("units in schedule should be fraction applied to number of people (0.0 - 1.0)")]
[JsonProperty("number_of_people_schedule_name")]
public string NumberOfPeopleScheduleName { get; set; } = "";
        

[Description(@"The entered calculation method is used to create the maximum number of people for this set of attributes (i.e. sensible fraction, schedule, etc) Choices: People -- simply enter number of occupants. People per Zone Floor Area -- enter the number to apply. Value * Floor Area = Number of people Zone Floor Area per Person -- enter the number to apply. Floor Area / Value = Number of people")]
[JsonProperty("number_of_people_calculation_method")]
public People_NumberOfPeopleCalculationMethod NumberOfPeopleCalculationMethod { get; set; } = (People_NumberOfPeopleCalculationMethod)Enum.Parse(typeof(People_NumberOfPeopleCalculationMethod), "People");
        

[JsonProperty("number_of_people")]
public System.Nullable<float> NumberOfPeople { get; set; } = null;
        

[JsonProperty("people_per_zone_floor_area")]
public System.Nullable<float> PeoplePerZoneFloorArea { get; set; } = null;
        

[JsonProperty("zone_floor_area_per_person")]
public System.Nullable<float> ZoneFloorAreaPerPerson { get; set; } = null;
        

[Description("This is radiant fraction of the sensible heat released by people in a zone. This " +
    "value will be multiplied by the total sensible heat released by people yields th" +
    "e amount of long wavelength radiation gain from people in a zone. Default value " +
    "is 0.30.")]
[JsonProperty("fraction_radiant")]
public System.Nullable<float> FractionRadiant { get; set; } = (System.Nullable<float>)Single.Parse("0.3", CultureInfo.InvariantCulture);
        

[Description("if input, overrides program calculated sensible/latent split")]
[JsonProperty("sensible_heat_fraction")]
public string SensibleHeatFraction { get; set; } = (System.String)"Autocalculate";
        

[Description("Note that W has to be converted to mets in TC routine units in schedule are W/per" +
    "son")]
[JsonProperty("activity_level_schedule_name")]
public string ActivityLevelScheduleName { get; set; } = "";
        

[Description("CO2 generation rate per unit of activity level. The default value is obtained fro" +
    "m ASHRAE Std 62.1 at 0.0084 cfm/met/person over the general adult population.")]
[JsonProperty("carbon_dioxide_generation_rate")]
public System.Nullable<float> CarbonDioxideGenerationRate { get; set; } = (System.Nullable<float>)Single.Parse("3.82E-08", CultureInfo.InvariantCulture);
        

[JsonProperty("enable_ashrae_55_comfort_warnings")]
public EmptyNoYes EnableAshrae55ComfortWarnings { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("optional (only required for thermal comfort runs)")]
[JsonProperty("mean_radiant_temperature_calculation_type")]
public People_MeanRadiantTemperatureCalculationType MeanRadiantTemperatureCalculationType { get; set; } = (People_MeanRadiantTemperatureCalculationType)Enum.Parse(typeof(People_MeanRadiantTemperatureCalculationType), "ZoneAveraged");
        

[Description("optional (only required for runs of thermal comfort models: Fanger, Pierce, KSU, " +
    "CoolingEffectASH55 and AnkleDraftASH55)")]
[JsonProperty("surface_name_angle_factor_list_name")]
public string SurfaceNameAngleFactorListName { get; set; } = "";
        

[Description("units in schedule are 0.0 to 1.0 optional (only required for runs of thermal comf" +
    "ort models: Fanger, Pierce, KSU, CoolingEffectASH55 and AnkleDraftASH55)")]
[JsonProperty("work_efficiency_schedule_name")]
public string WorkEfficiencyScheduleName { get; set; } = "";
        

[JsonProperty("clothing_insulation_calculation_method")]
public People_ClothingInsulationCalculationMethod ClothingInsulationCalculationMethod { get; set; } = (People_ClothingInsulationCalculationMethod)Enum.Parse(typeof(People_ClothingInsulationCalculationMethod), "ClothingInsulationSchedule");
        

[Description("a schedule value of 1 for the Scheduled method, and 2 for the DynamicClothingMode" +
    "lASHRAE55 method")]
[JsonProperty("clothing_insulation_calculation_method_schedule_name")]
public string ClothingInsulationCalculationMethodScheduleName { get; set; } = "";
        

[Description("use \"Clo\" from ASHRAE or Thermal Comfort guides optional (only required for runs " +
    "of thermal comfort models: Fanger, Pierce, KSU, CoolingEffectASH55 and AnkleDraf" +
    "tASH55)")]
[JsonProperty("clothing_insulation_schedule_name")]
public string ClothingInsulationScheduleName { get; set; } = "";
        

[Description("units in the schedule are m/s optional (only required for runs of thermal comfort" +
    " models: Fanger, Pierce, KSU, CoolingEffectASH55 and AnkleDraftASH55)")]
[JsonProperty("air_velocity_schedule_name")]
public string AirVelocityScheduleName { get; set; } = "";
        

[Description("optional (only needed for people thermal comfort results reporting)")]
[JsonProperty("thermal_comfort_model_1_type")]
public People_ThermalComfortModel1Type ThermalComfortModel1Type { get; set; } = (People_ThermalComfortModel1Type)Enum.Parse(typeof(People_ThermalComfortModel1Type), "AdaptiveASH55");
        

[Description("optional (second type of thermal comfort model and results reporting)")]
[JsonProperty("thermal_comfort_model_2_type")]
public People_ThermalComfortModel2Type ThermalComfortModel2Type { get; set; } = (People_ThermalComfortModel2Type)Enum.Parse(typeof(People_ThermalComfortModel2Type), "AdaptiveASH55");
        

[Description("optional (third thermal comfort model and report type)")]
[JsonProperty("thermal_comfort_model_3_type")]
public People_ThermalComfortModel3Type ThermalComfortModel3Type { get; set; } = (People_ThermalComfortModel3Type)Enum.Parse(typeof(People_ThermalComfortModel3Type), "AdaptiveASH55");
        

[Description("optional (fourth thermal comfort model and report type)")]
[JsonProperty("thermal_comfort_model_4_type")]
public People_ThermalComfortModel4Type ThermalComfortModel4Type { get; set; } = (People_ThermalComfortModel4Type)Enum.Parse(typeof(People_ThermalComfortModel4Type), "AdaptiveASH55");
        

[Description("optional (fifth thermal comfort model and report type)")]
[JsonProperty("thermal_comfort_model_5_type")]
public People_ThermalComfortModel5Type ThermalComfortModel5Type { get; set; } = (People_ThermalComfortModel5Type)Enum.Parse(typeof(People_ThermalComfortModel5Type), "AdaptiveASH55");
        

[Description("optional (sixth thermal comfort model and report type)")]
[JsonProperty("thermal_comfort_model_6_type")]
public People_ThermalComfortModel6Type ThermalComfortModel6Type { get; set; } = (People_ThermalComfortModel6Type)Enum.Parse(typeof(People_ThermalComfortModel6Type), "AdaptiveASH55");
        

[Description("optional (seventh thermal comfort model and report type)")]
[JsonProperty("thermal_comfort_model_7_type")]
public People_ThermalComfortModel7Type ThermalComfortModel7Type { get; set; } = (People_ThermalComfortModel7Type)Enum.Parse(typeof(People_ThermalComfortModel7Type), "AdaptiveASH55");
        

[Description("units in the schedule are m/s this is the schedule of the air speed at the 0.1 m " +
    "above the floor optional (only required for runs of thermal comfort models Ankle" +
    "DraftASH55)")]
[JsonProperty("ankle_level_air_velocity_schedule_name")]
public string AnkleLevelAirVelocityScheduleName { get; set; } = "";
    }
    
    public enum People_NumberOfPeopleCalculationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Area/Person")]
        AreaPerson = 1,
        
        [JsonProperty("People")]
        People = 2,
        
        [JsonProperty("People/Area")]
        PeopleArea = 3,
    }
    
    public enum People_MeanRadiantTemperatureCalculationType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AngleFactor")]
        AngleFactor = 1,
        
        [JsonProperty("SurfaceWeighted")]
        SurfaceWeighted = 2,
        
        [JsonProperty("ZoneAveraged")]
        ZoneAveraged = 3,
    }
    
    public enum People_ClothingInsulationCalculationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CalculationMethodSchedule")]
        CalculationMethodSchedule = 1,
        
        [JsonProperty("ClothingInsulationSchedule")]
        ClothingInsulationSchedule = 2,
        
        [JsonProperty("DynamicClothingModelASHRAE55")]
        DynamicClothingModelASHRAE55 = 3,
    }
    
    public enum People_ThermalComfortModel1Type
    {
        
        [JsonProperty("AdaptiveASH55")]
        AdaptiveASH55 = 0,
        
        [JsonProperty("AdaptiveCEN15251")]
        AdaptiveCEN15251 = 1,
        
        [JsonProperty("AnkleDraftASH55")]
        AnkleDraftASH55 = 2,
        
        [JsonProperty("CoolingEffectASH55")]
        CoolingEffectASH55 = 3,
        
        [JsonProperty("Fanger")]
        Fanger = 4,
        
        [JsonProperty("KSU")]
        KSU = 5,
        
        [JsonProperty("Pierce")]
        Pierce = 6,
    }
    
    public enum People_ThermalComfortModel2Type
    {
        
        [JsonProperty("AdaptiveASH55")]
        AdaptiveASH55 = 0,
        
        [JsonProperty("AdaptiveCEN15251")]
        AdaptiveCEN15251 = 1,
        
        [JsonProperty("AnkleDraftASH55")]
        AnkleDraftASH55 = 2,
        
        [JsonProperty("CoolingEffectASH55")]
        CoolingEffectASH55 = 3,
        
        [JsonProperty("Fanger")]
        Fanger = 4,
        
        [JsonProperty("KSU")]
        KSU = 5,
        
        [JsonProperty("Pierce")]
        Pierce = 6,
    }
    
    public enum People_ThermalComfortModel3Type
    {
        
        [JsonProperty("AdaptiveASH55")]
        AdaptiveASH55 = 0,
        
        [JsonProperty("AdaptiveCEN15251")]
        AdaptiveCEN15251 = 1,
        
        [JsonProperty("AnkleDraftASH55")]
        AnkleDraftASH55 = 2,
        
        [JsonProperty("CoolingEffectASH55")]
        CoolingEffectASH55 = 3,
        
        [JsonProperty("Fanger")]
        Fanger = 4,
        
        [JsonProperty("KSU")]
        KSU = 5,
        
        [JsonProperty("Pierce")]
        Pierce = 6,
    }
    
    public enum People_ThermalComfortModel4Type
    {
        
        [JsonProperty("AdaptiveASH55")]
        AdaptiveASH55 = 0,
        
        [JsonProperty("AdaptiveCEN15251")]
        AdaptiveCEN15251 = 1,
        
        [JsonProperty("AnkleDraftASH55")]
        AnkleDraftASH55 = 2,
        
        [JsonProperty("CoolingEffectASH55")]
        CoolingEffectASH55 = 3,
        
        [JsonProperty("Fanger")]
        Fanger = 4,
        
        [JsonProperty("KSU")]
        KSU = 5,
        
        [JsonProperty("Pierce")]
        Pierce = 6,
    }
    
    public enum People_ThermalComfortModel5Type
    {
        
        [JsonProperty("AdaptiveASH55")]
        AdaptiveASH55 = 0,
        
        [JsonProperty("AdaptiveCEN15251")]
        AdaptiveCEN15251 = 1,
        
        [JsonProperty("AnkleDraftASH55")]
        AnkleDraftASH55 = 2,
        
        [JsonProperty("CoolingEffectASH55")]
        CoolingEffectASH55 = 3,
        
        [JsonProperty("Fanger")]
        Fanger = 4,
        
        [JsonProperty("KSU")]
        KSU = 5,
        
        [JsonProperty("Pierce")]
        Pierce = 6,
    }
    
    public enum People_ThermalComfortModel6Type
    {
        
        [JsonProperty("AdaptiveASH55")]
        AdaptiveASH55 = 0,
        
        [JsonProperty("AdaptiveCEN15251")]
        AdaptiveCEN15251 = 1,
        
        [JsonProperty("AnkleDraftASH55")]
        AnkleDraftASH55 = 2,
        
        [JsonProperty("CoolingEffectASH55")]
        CoolingEffectASH55 = 3,
        
        [JsonProperty("Fanger")]
        Fanger = 4,
        
        [JsonProperty("KSU")]
        KSU = 5,
        
        [JsonProperty("Pierce")]
        Pierce = 6,
    }
    
    public enum People_ThermalComfortModel7Type
    {
        
        [JsonProperty("AdaptiveASH55")]
        AdaptiveASH55 = 0,
        
        [JsonProperty("AdaptiveCEN15251")]
        AdaptiveCEN15251 = 1,
        
        [JsonProperty("AnkleDraftASH55")]
        AnkleDraftASH55 = 2,
        
        [JsonProperty("CoolingEffectASH55")]
        CoolingEffectASH55 = 3,
        
        [JsonProperty("Fanger")]
        Fanger = 4,
        
        [JsonProperty("KSU")]
        KSU = 5,
        
        [JsonProperty("Pierce")]
        Pierce = 6,
    }
    
    [Description("Used to specify radiant view factors for thermal comfort calculations.")]
    [JsonObject("ComfortViewFactorAngles")]
    public class ComfortViewFactorAngles : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("surface_1_name")]
public string Surface1Name { get; set; } = "";
        

[JsonProperty("angle_factor_1")]
public System.Nullable<float> AngleFactor1 { get; set; } = null;
        

[JsonProperty("surface_2_name")]
public string Surface2Name { get; set; } = "";
        

[JsonProperty("angle_factor_2")]
public System.Nullable<float> AngleFactor2 { get; set; } = null;
        

[JsonProperty("surface_3_name")]
public string Surface3Name { get; set; } = "";
        

[JsonProperty("angle_factor_3")]
public System.Nullable<float> AngleFactor3 { get; set; } = null;
        

[JsonProperty("surface_4_name")]
public string Surface4Name { get; set; } = "";
        

[JsonProperty("angle_factor_4")]
public System.Nullable<float> AngleFactor4 { get; set; } = null;
        

[JsonProperty("surface_5_name")]
public string Surface5Name { get; set; } = "";
        

[JsonProperty("angle_factor_5")]
public System.Nullable<float> AngleFactor5 { get; set; } = null;
        

[JsonProperty("surface_6_name")]
public string Surface6Name { get; set; } = "";
        

[JsonProperty("angle_factor_6")]
public System.Nullable<float> AngleFactor6 { get; set; } = null;
        

[JsonProperty("surface_7_name")]
public string Surface7Name { get; set; } = "";
        

[JsonProperty("angle_factor_7")]
public System.Nullable<float> AngleFactor7 { get; set; } = null;
        

[JsonProperty("surface_8_name")]
public string Surface8Name { get; set; } = "";
        

[JsonProperty("angle_factor_8")]
public System.Nullable<float> AngleFactor8 { get; set; } = null;
        

[JsonProperty("surface_9_name")]
public string Surface9Name { get; set; } = "";
        

[JsonProperty("angle_factor_9")]
public System.Nullable<float> AngleFactor9 { get; set; } = null;
        

[JsonProperty("surface_10_name")]
public string Surface10Name { get; set; } = "";
        

[JsonProperty("angle_factor_10")]
public System.Nullable<float> AngleFactor10 { get; set; } = null;
        

[JsonProperty("surface_11_name")]
public string Surface11Name { get; set; } = "";
        

[JsonProperty("angle_factor_11")]
public System.Nullable<float> AngleFactor11 { get; set; } = null;
        

[JsonProperty("surface_12_name")]
public string Surface12Name { get; set; } = "";
        

[JsonProperty("angle_factor_12")]
public System.Nullable<float> AngleFactor12 { get; set; } = null;
        

[JsonProperty("surface_13_name")]
public string Surface13Name { get; set; } = "";
        

[JsonProperty("angle_factor_13")]
public System.Nullable<float> AngleFactor13 { get; set; } = null;
        

[JsonProperty("surface_14_name")]
public string Surface14Name { get; set; } = "";
        

[JsonProperty("angle_factor_14")]
public System.Nullable<float> AngleFactor14 { get; set; } = null;
        

[JsonProperty("surface_15_name")]
public string Surface15Name { get; set; } = "";
        

[JsonProperty("angle_factor_15")]
public System.Nullable<float> AngleFactor15 { get; set; } = null;
        

[JsonProperty("surface_16_name")]
public string Surface16Name { get; set; } = "";
        

[JsonProperty("angle_factor_16")]
public System.Nullable<float> AngleFactor16 { get; set; } = null;
        

[JsonProperty("surface_17_name")]
public string Surface17Name { get; set; } = "";
        

[JsonProperty("angle_factor_17")]
public System.Nullable<float> AngleFactor17 { get; set; } = null;
        

[JsonProperty("surface_18_name")]
public string Surface18Name { get; set; } = "";
        

[JsonProperty("angle_factor_18")]
public System.Nullable<float> AngleFactor18 { get; set; } = null;
        

[JsonProperty("surface_19_name")]
public string Surface19Name { get; set; } = "";
        

[JsonProperty("angle_factor_19")]
public System.Nullable<float> AngleFactor19 { get; set; } = null;
        

[JsonProperty("surface_20_name")]
public string Surface20Name { get; set; } = "";
        

[JsonProperty("angle_factor_20")]
public System.Nullable<float> AngleFactor20 { get; set; } = null;
    }
    
    [Description("Sets internal gains for lights in the zone. If you use a ZoneList in the Zone or " +
        "ZoneList name field then this definition applies to all the zones in the ZoneLis" +
        "t.")]
    [JsonObject("Lights")]
    public class Lights : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_or_zonelist_name")]
public string ZoneOrZonelistName { get; set; } = "";
        

[Description("units in schedule should be fraction applied to design level of lights, generally" +
    " (0.0 - 1.0)")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[Description(@"The entered calculation method is used to create the maximum amount of lights for this set of attributes Choices: LightingLevel => Lighting Level -- simply enter watts of lights Watts/Area => Watts per Zone Floor Area -- enter the number to apply. Value * Floor Area = Lights Watts/Person => Watts per Person -- enter the number to apply. Value * Occupants = Lights")]
[JsonProperty("design_level_calculation_method")]
public Lights_DesignLevelCalculationMethod DesignLevelCalculationMethod { get; set; } = (Lights_DesignLevelCalculationMethod)Enum.Parse(typeof(Lights_DesignLevelCalculationMethod), "LightingLevel");
        

[JsonProperty("lighting_level")]
public System.Nullable<float> LightingLevel { get; set; } = null;
        

[JsonProperty("watts_per_zone_floor_area")]
public System.Nullable<float> WattsPerZoneFloorArea { get; set; } = null;
        

[JsonProperty("watts_per_person")]
public System.Nullable<float> WattsPerPerson { get; set; } = null;
        

[Description("Used only for sizing calculation if return-air-fraction coefficients are specifie" +
    "d.")]
[JsonProperty("return_air_fraction")]
public System.Nullable<float> ReturnAirFraction { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_radiant")]
public System.Nullable<float> FractionRadiant { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_visible")]
public System.Nullable<float> FractionVisible { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("For Daylighting:Controls must be 0 or 1:  0 = no dimming control, 1 = full dimmin" +
    "g control")]
[JsonProperty("fraction_replaceable")]
public System.Nullable<float> FractionReplaceable { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
        

[JsonProperty("return_air_fraction_calculated_from_plenum_temperature")]
public EmptyNoYes ReturnAirFractionCalculatedFromPlenumTemperature { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Used only if Return Air Fraction Is Calculated from Plenum Temperature = Yes Equa" +
    "tion is Return Air Fraction = Coefficient#1 - Coefficient#2 X PlenumTemp(degC)")]
[JsonProperty("return_air_fraction_function_of_plenum_temperature_coefficient_1")]
public System.Nullable<float> ReturnAirFractionFunctionOfPlenumTemperatureCoefficient1 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Used only if Return Air Fraction Is Calculated from Plenum Temperature = Yes Equa" +
    "tion is Return Air Fraction = Coefficient#1 - Coefficient#2 X PlenumTemp(degC)")]
[JsonProperty("return_air_fraction_function_of_plenum_temperature_coefficient_2")]
public System.Nullable<float> ReturnAirFractionFunctionOfPlenumTemperatureCoefficient2 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Name of the return air node for this heat gain. If left blank, defaults to the fi" +
    "rst return air node for the zone. Leave this field blank when using a ZoneList n" +
    "ame.")]
[JsonProperty("return_air_heat_gain_node_name")]
public string ReturnAirHeatGainNodeName { get; set; } = "";
    }
    
    public enum Lights_DesignLevelCalculationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LightingLevel")]
        LightingLevel = 1,
        
        [JsonProperty("Watts/Area")]
        WattsArea = 2,
        
        [JsonProperty("Watts/Person")]
        WattsPerson = 3,
    }
    
    [Description("Sets internal gains for electric equipment in the zone. If you use a ZoneList in " +
        "the Zone or ZoneList name field then this definition applies to all the zones in" +
        " the ZoneList.")]
    [JsonObject("ElectricEquipment")]
    public class ElectricEquipment : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_or_zonelist_name")]
public string ZoneOrZonelistName { get; set; } = "";
        

[Description("units in schedule should be fraction applied to design level of electric equipmen" +
    "t, generally (0.0 - 1.0)")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[Description(@"The entered calculation method is used to create the maximum amount of electric equipment for this set of attributes Choices: EquipmentLevel => Equipment Level -- simply enter watts of equipment Watts/Area => Watts per Zone Floor Area -- enter the number to apply. Value * Floor Area = Equipment Level Watts/Person => Watts per Person -- enter the number to apply. Value * Occupants = Equipment Level")]
[JsonProperty("design_level_calculation_method")]
public ElectricEquipment_DesignLevelCalculationMethod DesignLevelCalculationMethod { get; set; } = (ElectricEquipment_DesignLevelCalculationMethod)Enum.Parse(typeof(ElectricEquipment_DesignLevelCalculationMethod), "EquipmentLevel");
        

[JsonProperty("design_level")]
public System.Nullable<float> DesignLevel { get; set; } = null;
        

[JsonProperty("watts_per_zone_floor_area")]
public System.Nullable<float> WattsPerZoneFloorArea { get; set; } = null;
        

[JsonProperty("watts_per_person")]
public System.Nullable<float> WattsPerPerson { get; set; } = null;
        

[JsonProperty("fraction_latent")]
public System.Nullable<float> FractionLatent { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_radiant")]
public System.Nullable<float> FractionRadiant { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_lost")]
public System.Nullable<float> FractionLost { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum ElectricEquipment_DesignLevelCalculationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("EquipmentLevel")]
        EquipmentLevel = 1,
        
        [JsonProperty("Watts/Area")]
        WattsArea = 2,
        
        [JsonProperty("Watts/Person")]
        WattsPerson = 3,
    }
    
    [Description("Sets internal gains and contaminant rates for gas equipment in the zone. If you u" +
        "se a ZoneList in the Zone name field then this definition applies to all those z" +
        "ones.")]
    [JsonObject("GasEquipment")]
    public class GasEquipment : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_or_zonelist_name")]
public string ZoneOrZonelistName { get; set; } = "";
        

[Description("units in Schedule should be fraction applied to design level of gas equipment, ge" +
    "nerally (0.0 - 1.0)")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[Description(@"The entered calculation method is used to create the maximum amount of gas equipment for this set of attributes Choices: EquipmentLevel => Design Level -- simply enter power input of equipment Watts/Area or Power/Area => Power per Zone Floor Area -- enter the number to apply. Value * Floor Area = Equipment Level Watts/Person or Power/Person => Power per Person -- enter the number to apply. Value * Occupants = Equipment Level")]
[JsonProperty("design_level_calculation_method")]
public GasEquipment_DesignLevelCalculationMethod DesignLevelCalculationMethod { get; set; } = (GasEquipment_DesignLevelCalculationMethod)Enum.Parse(typeof(GasEquipment_DesignLevelCalculationMethod), "EquipmentLevel");
        

[JsonProperty("design_level")]
public System.Nullable<float> DesignLevel { get; set; } = null;
        

[JsonProperty("power_per_zone_floor_area")]
public System.Nullable<float> PowerPerZoneFloorArea { get; set; } = null;
        

[JsonProperty("power_per_person")]
public System.Nullable<float> PowerPerPerson { get; set; } = null;
        

[JsonProperty("fraction_latent")]
public System.Nullable<float> FractionLatent { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_radiant")]
public System.Nullable<float> FractionRadiant { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_lost")]
public System.Nullable<float> FractionLost { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"CO2 generation rate per unit of power input The default value assumes the equipment is fully vented. For unvented equipment, a suggested value is 3.45E-8 m3/s-W. This value is converted from a natural gas CO2 emission rate of 117 lbs CO2 per million Btu. The maximum value assumes to be 10 times of the recommended value.")]
[JsonProperty("carbon_dioxide_generation_rate")]
public System.Nullable<float> CarbonDioxideGenerationRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum GasEquipment_DesignLevelCalculationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("EquipmentLevel")]
        EquipmentLevel = 1,
        
        [JsonProperty("Power/Area")]
        PowerArea = 2,
        
        [JsonProperty("Power/Person")]
        PowerPerson = 3,
        
        [JsonProperty("Watts/Area")]
        WattsArea = 4,
        
        [JsonProperty("Watts/Person")]
        WattsPerson = 5,
    }
    
    [Description("Sets internal gains for hot water equipment in the zone. If you use a ZoneList in" +
        " the Zone name field then this definition applies to all those zones.")]
    [JsonObject("HotWaterEquipment")]
    public class HotWaterEquipment : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_or_zonelist_name")]
public string ZoneOrZonelistName { get; set; } = "";
        

[Description("units in Schedule should be fraction applied to design level of hot water equipme" +
    "nt, generally (0.0 - 1.0)")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[Description(@"The entered calculation method is used to create the maximum amount of hot water equipment for this set of attributes Choices: EquipmentLevel => Design Level -- simply enter power input of equipment Watts/Area or Power/Area => Power per Zone Floor Area -- enter the number to apply. Value * Floor Area = Equipment Level Watts/Person or Power/Person => Power per Person -- enter the number to apply. Value * Occupants = Equipment Level")]
[JsonProperty("design_level_calculation_method")]
public HotWaterEquipment_DesignLevelCalculationMethod DesignLevelCalculationMethod { get; set; } = (HotWaterEquipment_DesignLevelCalculationMethod)Enum.Parse(typeof(HotWaterEquipment_DesignLevelCalculationMethod), "EquipmentLevel");
        

[JsonProperty("design_level")]
public System.Nullable<float> DesignLevel { get; set; } = null;
        

[JsonProperty("power_per_zone_floor_area")]
public System.Nullable<float> PowerPerZoneFloorArea { get; set; } = null;
        

[JsonProperty("power_per_person")]
public System.Nullable<float> PowerPerPerson { get; set; } = null;
        

[JsonProperty("fraction_latent")]
public System.Nullable<float> FractionLatent { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_radiant")]
public System.Nullable<float> FractionRadiant { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_lost")]
public System.Nullable<float> FractionLost { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum HotWaterEquipment_DesignLevelCalculationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("EquipmentLevel")]
        EquipmentLevel = 1,
        
        [JsonProperty("Power/Area")]
        PowerArea = 2,
        
        [JsonProperty("Power/Person")]
        PowerPerson = 3,
        
        [JsonProperty("Watts/Area")]
        WattsArea = 4,
        
        [JsonProperty("Watts/Person")]
        WattsPerson = 5,
    }
    
    [Description("Sets internal gains for steam equipment in the zone.")]
    [JsonObject("SteamEquipment")]
    public class SteamEquipment : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_or_zonelist_name")]
public string ZoneOrZonelistName { get; set; } = "";
        

[Description("units in Schedule should be fraction applied to design level of steam equipment, " +
    "generally (0.0 - 1.0)")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[Description(@"The entered calculation method is used to create the maximum amount of steam equipment for this set of attributes Choices: EquipmentLevel => Design Level -- simply enter power input of equipment Watts/Area or Power/Area => Power per Zone Floor Area -- enter the number to apply. Value * Floor Area = Equipment Level Watts/Person or Power/Person => Power per Person -- enter the number to apply. Value * Occupants = Equipment Level")]
[JsonProperty("design_level_calculation_method")]
public SteamEquipment_DesignLevelCalculationMethod DesignLevelCalculationMethod { get; set; } = (SteamEquipment_DesignLevelCalculationMethod)Enum.Parse(typeof(SteamEquipment_DesignLevelCalculationMethod), "EquipmentLevel");
        

[JsonProperty("design_level")]
public System.Nullable<float> DesignLevel { get; set; } = null;
        

[JsonProperty("power_per_zone_floor_area")]
public System.Nullable<float> PowerPerZoneFloorArea { get; set; } = null;
        

[JsonProperty("power_per_person")]
public System.Nullable<float> PowerPerPerson { get; set; } = null;
        

[JsonProperty("fraction_latent")]
public System.Nullable<float> FractionLatent { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_radiant")]
public System.Nullable<float> FractionRadiant { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_lost")]
public System.Nullable<float> FractionLost { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum SteamEquipment_DesignLevelCalculationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("EquipmentLevel")]
        EquipmentLevel = 1,
        
        [JsonProperty("Power/Area")]
        PowerArea = 2,
        
        [JsonProperty("Power/Person")]
        PowerPerson = 3,
        
        [JsonProperty("Watts/Area")]
        WattsArea = 4,
        
        [JsonProperty("Watts/Person")]
        WattsPerson = 5,
    }
    
    [Description("Sets internal gains or losses for \"other\" equipment in the zone.")]
    [JsonObject("OtherEquipment")]
    public class OtherEquipment : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("fuel_type")]
public OtherEquipment_FuelType FuelType { get; set; } = (OtherEquipment_FuelType)Enum.Parse(typeof(OtherEquipment_FuelType), "None");
        

[JsonProperty("zone_or_zonelist_name")]
public string ZoneOrZonelistName { get; set; } = "";
        

[Description("units in Schedule should be fraction applied to design level of other equipment, " +
    "generally (0.0 - 1.0)")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[Description(@"The entered calculation method is used to create the maximum amount of other equipment. to set a loss, use a negative value in the following fields. for this set of attributes Choices: EquipmentLevel => Design Level -- simply enter power input of equipment Watts/Area or Power/Area => Power per Zone Floor Area -- enter the number to apply. Value * Floor Area = Equipment Level Watts/Person or Power/Person => Power per Person -- enter the number to apply. Value * Occupants = Equipment Level")]
[JsonProperty("design_level_calculation_method")]
public OtherEquipment_DesignLevelCalculationMethod DesignLevelCalculationMethod { get; set; } = (OtherEquipment_DesignLevelCalculationMethod)Enum.Parse(typeof(OtherEquipment_DesignLevelCalculationMethod), "EquipmentLevel");
        

[JsonProperty("design_level")]
public System.Nullable<float> DesignLevel { get; set; } = null;
        

[JsonProperty("power_per_zone_floor_area")]
public System.Nullable<float> PowerPerZoneFloorArea { get; set; } = null;
        

[JsonProperty("power_per_person")]
public System.Nullable<float> PowerPerPerson { get; set; } = null;
        

[JsonProperty("fraction_latent")]
public System.Nullable<float> FractionLatent { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_radiant")]
public System.Nullable<float> FractionRadiant { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_lost")]
public System.Nullable<float> FractionLost { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("CO2 generation rate per unit of power input The default value assumes the equipme" +
    "nt is fully vented.")]
[JsonProperty("carbon_dioxide_generation_rate")]
public System.Nullable<float> CarbonDioxideGenerationRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum OtherEquipment_FuelType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Coal")]
        Coal = 1,
        
        [JsonProperty("Diesel")]
        Diesel = 2,
        
        [JsonProperty("DistrictCooling")]
        DistrictCooling = 3,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 4,
        
        [JsonProperty("Electricity")]
        Electricity = 5,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 6,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 7,
        
        [JsonProperty("Gasoline")]
        Gasoline = 8,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 9,
        
        [JsonProperty("None")]
        None = 10,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 11,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 12,
        
        [JsonProperty("Propane")]
        Propane = 13,
        
        [JsonProperty("Steam")]
        Steam = 14,
    }
    
    public enum OtherEquipment_DesignLevelCalculationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("EquipmentLevel")]
        EquipmentLevel = 1,
        
        [JsonProperty("Power/Area")]
        PowerArea = 2,
        
        [JsonProperty("Power/Person")]
        PowerPerson = 3,
        
        [JsonProperty("Watts/Area")]
        WattsArea = 4,
        
        [JsonProperty("Watts/Person")]
        WattsPerson = 5,
    }
    
    [Description("This object describes air-cooled electric information technology equipment (ITE) " +
        "which has variable power consumption as a function of loading and temperature.")]
    [JsonObject("ElectricEquipment:ITE:AirCooled")]
    public class ElectricEquipment_ITE_AirCooled : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description(@"The specified method is used to calculate the IT inlet temperature and zone return air temperature. If FlowFromSystem is chosen, the zone is assumed to be well-mixed. If FlowControlWithApproachTemperatures is chosen, Supply and Return approach temperature should be defined to indicate the temperature difference due to the air distribution. When FlowControlWithApproachTemperatures is chosen, the inputs of Air Inlet Connection Type, Design Recirculation Fraction and Recirculation Function of Loading and Supply Temperature Curve Name are ignored. For multiple ITE objects defined for one zone, the same calculation method should apply. The FlowControlWithApproachTemperatures only applies to ITE zones with single duct VAV terminal unit. Other return air heat gains from window or lights are not allowed when FlowControlWithApproachTemperatures is chosen.")]
[JsonProperty("air_flow_calculation_method")]
public ElectricEquipment_ITE_AirCooled_AirFlowCalculationMethod AirFlowCalculationMethod { get; set; } = (ElectricEquipment_ITE_AirCooled_AirFlowCalculationMethod)Enum.Parse(typeof(ElectricEquipment_ITE_AirCooled_AirFlowCalculationMethod), "FlowFromSystem");
        

[Description("The entered calculation method is used to specify the design power input Watts/Un" +
    "it => Watts per Unit -- Design Power = Watts per Unit * Number of Units Watts/Ar" +
    "ea => Watts per Zone Floor Area -- Design Power = Watts per Zone Floor Area * Fl" +
    "oor Area")]
[JsonProperty("design_power_input_calculation_method")]
public ElectricEquipment_ITE_AirCooled_DesignPowerInputCalculationMethod DesignPowerInputCalculationMethod { get; set; } = (ElectricEquipment_ITE_AirCooled_DesignPowerInputCalculationMethod)Enum.Parse(typeof(ElectricEquipment_ITE_AirCooled_DesignPowerInputCalculationMethod), "Empty");
        

[JsonProperty("watts_per_unit")]
public System.Nullable<float> WattsPerUnit { get; set; } = null;
        

[JsonProperty("number_of_units")]
public System.Nullable<float> NumberOfUnits { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("watts_per_zone_floor_area")]
public System.Nullable<float> WattsPerZoneFloorArea { get; set; } = null;
        

[Description("Operating schedule for this equipment, fraction applied to the design power input" +
    ", generally (0.0 - 1.0) If this field is blank, the schedule is assumed to alway" +
    "s be 1.0.")]
[JsonProperty("design_power_input_schedule_name")]
public string DesignPowerInputScheduleName { get; set; } = "";
        

[Description("CPU loading schedule for this equipment as a fraction from 0.0 (idle) to 1.0 (ful" +
    "l load). If this field is blank, the schedule is assumed to always be 1.0.")]
[JsonProperty("cpu_loading_schedule_name")]
public string CpuLoadingScheduleName { get; set; } = "";
        

[Description(@"The name of a two-variable curve or table lookup object which modifies the CPU power input as a function of CPU loading (x) and air inlet node temperature (y). This curve (table) should equal 1.0 at design conditions (CPU loading = 1.0 and Design Entering Air Temperature).")]
[JsonProperty("cpu_power_input_function_of_loading_and_air_temperature_curve_name")]
public string CpuPowerInputFunctionOfLoadingAndAirTemperatureCurveName { get; set; } = "";
        

[Description("The fraction of the total power input at design conditions which is for the cooli" +
    "ng fan(s)")]
[JsonProperty("design_fan_power_input_fraction")]
public System.Nullable<float> DesignFanPowerInputFraction { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The cooling fan air flow rate per total electric power input at design conditions" +
    "")]
[JsonProperty("design_fan_air_flow_rate_per_power_input")]
public System.Nullable<float> DesignFanAirFlowRatePerPowerInput { get; set; } = null;
        

[Description(@"The name of a two-variable curve or table lookup object which modifies the cooling air flow rate as a function of CPU loading (x) and air inlet node temperature (y). This curve (table) should equal 1.0 at design conditions (CPU loading = 1.0 and Design Entering Air Temperature).")]
[JsonProperty("air_flow_function_of_loading_and_air_temperature_curve_name")]
public string AirFlowFunctionOfLoadingAndAirTemperatureCurveName { get; set; } = "";
        

[Description("The name of a single-variable curve or table lookup object which modifies the coo" +
    "ling fan power as a function of flow fraction (x). This curve (table) should equ" +
    "al 1.0 at a flow fraction of 1.0.")]
[JsonProperty("fan_power_input_function_of_flow_curve_name")]
public string FanPowerInputFunctionOfFlowCurveName { get; set; } = "";
        

[Description("The entering air temperature at design conditions.")]
[JsonProperty("design_entering_air_temperature")]
public System.Nullable<float> DesignEnteringAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("15", CultureInfo.InvariantCulture);
        

[Description("Specifies the allowable operating conditions for the air inlet conditions. Used f" +
    "or reporting time outside allowable conditions.")]
[JsonProperty("environmental_class")]
public ElectricEquipment_ITE_AirCooled_EnvironmentalClass EnvironmentalClass { get; set; } = (ElectricEquipment_ITE_AirCooled_EnvironmentalClass)Enum.Parse(typeof(ElectricEquipment_ITE_AirCooled_EnvironmentalClass), "None");
        

[Description(@"Specifies the type of connection between the zone and the ITE air inlet node. AdjustedSupply = ITE inlet temperature will be the current Supply Air Node temperature adjusted by the current recirculation fraction. All heat output is added to the zone air heat balance as a convective gain. ZoneAirNode = ITE air inlet condition is  the average zone condition. All heat output is added to the zone air heat balance as a convective gain. RoomAirModel = ITE air inlet and outlet are connected to room air model nodes. This field is only used when Air Flow Calculation Method is FlowFromSystem.")]
[JsonProperty("air_inlet_connection_type")]
public ElectricEquipment_ITE_AirCooled_AirInletConnectionType AirInletConnectionType { get; set; } = (ElectricEquipment_ITE_AirCooled_AirInletConnectionType)Enum.Parse(typeof(ElectricEquipment_ITE_AirCooled_AirInletConnectionType), "AdjustedSupply");
        

[Description("Name of a RoomAir:Node object which is connected to the ITE air inlet.")]
[JsonProperty("air_inlet_room_air_model_node_name")]
public string AirInletRoomAirModelNodeName { get; set; } = "";
        

[Description("Name of a RoomAir:Node object which is connected to the ITE air outlet.")]
[JsonProperty("air_outlet_room_air_model_node_name")]
public string AirOutletRoomAirModelNodeName { get; set; } = "";
        

[Description("Name of the supply air inlet node serving this ITE. Required if the Air Node Conn" +
    "ection Type = AdjustedSupply. Also required if Calculation Method = FlowControlW" +
    "ithApproachTemperatures. Also required if reporting of Supply Heat Index is desi" +
    "red.")]
[JsonProperty("supply_air_node_name")]
public string SupplyAirNodeName { get; set; } = "";
        

[Description(@"The recirculation fraction for this equipment at design conditions. This field is used only if the Air Node Connection Type = AdjustedSupply. The default is 0.0 (no recirculation). This field is only used when Air Flow Calculation Method is FlowFromSystem.")]
[JsonProperty("design_recirculation_fraction")]
public System.Nullable<float> DesignRecirculationFraction { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"The name of a two-variable curve or table lookup object which modifies the recirculation fractionas a function of CPU loading (x) and supply air node temperature (y). This curve (table) should equal 1.0 at design conditions (CPU loading = 1.0 and Design Entering Air Temperature).This field is used only if the Air Node Connection Type = AdjustedSupply. If this curve is left blank, then the curve is assumed to always equal 1.0. This field is only used when Air Flow Calculation Method is FlowFromSystem.")]
[JsonProperty("recirculation_function_of_loading_and_supply_temperature_curve_name")]
public string RecirculationFunctionOfLoadingAndSupplyTemperatureCurveName { get; set; } = "";
        

[Description("The efficiency of the power supply system serving this ITE")]
[JsonProperty("design_electric_power_supply_efficiency")]
public System.Nullable<float> DesignElectricPowerSupplyEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description(@"The name of a single-variable curve or table lookup object which modifies the electric power supply efficiency as a function of part-load ratio (x). This curve (table) should equal 1.0 at full load (PLR = 1.0). If this curve is left blank, then the curve is assumed to always equal 1.0.")]
[JsonProperty("electric_power_supply_efficiency_function_of_part_load_ratio_curve_name")]
public string ElectricPowerSupplyEfficiencyFunctionOfPartLoadRatioCurveName { get; set; } = "";
        

[Description("Fraction of the electric power supply losses which are a heat gain to the zone If" +
    " this field is <1.0, the remainder of the losses are assumed to be lost to the o" +
    "utdoors.")]
[JsonProperty("fraction_of_electric_power_supply_losses_to_zone")]
public System.Nullable<float> FractionOfElectricPowerSupplyLossesToZone { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("cpu_end_use_subcategory")]
public string CpuEndUseSubcategory { get; set; } = (System.String)"ITE-CPU";
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("fan_end_use_subcategory")]
public string FanEndUseSubcategory { get; set; } = (System.String)"ITE-Fans";
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("electric_power_supply_end_use_subcategory")]
public string ElectricPowerSupplyEndUseSubcategory { get; set; } = (System.String)"ITE-UPS";
        

[Description(@"The difference of the IT inlet temperature from the AHU supply air temperature. Either Supply Temperature Difference or Supply Temperature Difference Schedule is required if Air Flow Calculation Method is set to FlowControlWithApproachTemperatures. This field is ignored when Air Flow Calculation Method is FlowFromSystem.")]
[JsonProperty("supply_temperature_difference")]
public System.Nullable<float> SupplyTemperatureDifference { get; set; } = null;
        

[Description(@"The difference schedule of the IT inlet temperature from the AHU supply air temperature. Either Supply Temperature Difference or Supply Temperature Difference Schedule is required if Air Flow Calculation Method is set to FlowControlWithApproachTemperatures. This field is ignored when Air Flow Calculation Method is FlowFromSystem.")]
[JsonProperty("supply_temperature_difference_schedule")]
public string SupplyTemperatureDifferenceSchedule { get; set; } = "";
        

[Description(@"The difference of the the actual AHU return air temperature to the IT equipment outlet temperature. Either Return Temperature Difference or Return Temperature Difference Schedule is required if Air Flow Calculation Method is set to FlowControlWithApproachTemperatures. This field is ignored when Air Flow Calculation Method is FlowFromSystem.")]
[JsonProperty("return_temperature_difference")]
public System.Nullable<float> ReturnTemperatureDifference { get; set; } = null;
        

[Description(@"The difference schedule of the actual AHU return air temperature to the IT equipment outlet temperature. Either Return Temperature Difference or Return Temperature Difference Schedule is required if Air Flow Calculation Method is set to FlowControlWithApproachTemperatures. This field is ignored when Air Flow Calculation Method is FlowFromSystem.")]
[JsonProperty("return_temperature_difference_schedule")]
public string ReturnTemperatureDifferenceSchedule { get; set; } = "";
    }
    
    public enum ElectricEquipment_ITE_AirCooled_AirFlowCalculationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FlowControlWithApproachTemperatures")]
        FlowControlWithApproachTemperatures = 1,
        
        [JsonProperty("FlowFromSystem")]
        FlowFromSystem = 2,
    }
    
    public enum ElectricEquipment_ITE_AirCooled_DesignPowerInputCalculationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Watts/Area")]
        WattsArea = 1,
        
        [JsonProperty("Watts/Unit")]
        WattsUnit = 2,
    }
    
    public enum ElectricEquipment_ITE_AirCooled_EnvironmentalClass
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("A1")]
        A1 = 1,
        
        [JsonProperty("A2")]
        A2 = 2,
        
        [JsonProperty("A3")]
        A3 = 3,
        
        [JsonProperty("A4")]
        A4 = 4,
        
        [JsonProperty("B")]
        B = 5,
        
        [JsonProperty("C")]
        C = 6,
        
        [JsonProperty("None")]
        None = 7,
    }
    
    public enum ElectricEquipment_ITE_AirCooled_AirInletConnectionType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AdjustedSupply")]
        AdjustedSupply = 1,
        
        [JsonProperty("RoomAirModel")]
        RoomAirModel = 2,
        
        [JsonProperty("ZoneAirNode")]
        ZoneAirNode = 3,
    }
    
    [Description("Specifies outside temperature-controlled electric baseboard heating.")]
    [JsonObject("ZoneBaseboard:OutdoorTemperatureControlled")]
    public class ZoneBaseboard_OutdoorTemperatureControlled : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("units in Schedule should be fraction applied to capacity of the baseboard heat eq" +
    "uipment, generally (0.0 - 1.0)")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[JsonProperty("capacity_at_low_temperature")]
public System.Nullable<float> CapacityAtLowTemperature { get; set; } = null;
        

[JsonProperty("low_temperature")]
public System.Nullable<float> LowTemperature { get; set; } = null;
        

[JsonProperty("capacity_at_high_temperature")]
public System.Nullable<float> CapacityAtHighTemperature { get; set; } = null;
        

[JsonProperty("high_temperature")]
public System.Nullable<float> HighTemperature { get; set; } = null;
        

[JsonProperty("fraction_radiant")]
public System.Nullable<float> FractionRadiant { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    [Description("Specifies an indoor swimming pools linked to a floor surface. The pool is assumed" +
        " to cover the entire floor to which it is linked.")]
    [JsonObject("SwimmingPool:Indoor")]
    public class SwimmingPool_Indoor : BHoMObject, IEnergyPlusClass
    {
        

[Description("Name of the floor surface where the pool is located.")]
[JsonProperty("surface_name")]
public string SurfaceName { get; set; } = "";
        

[JsonProperty("average_depth")]
public System.Nullable<float> AverageDepth { get; set; } = null;
        

[JsonProperty("activity_factor_schedule_name")]
public string ActivityFactorScheduleName { get; set; } = "";
        

[JsonProperty("make_up_water_supply_schedule_name")]
public string MakeUpWaterSupplyScheduleName { get; set; } = "";
        

[JsonProperty("cover_schedule_name")]
public string CoverScheduleName { get; set; } = "";
        

[JsonProperty("cover_evaporation_factor")]
public System.Nullable<float> CoverEvaporationFactor { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("cover_convection_factor")]
public System.Nullable<float> CoverConvectionFactor { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("cover_short_wavelength_radiation_factor")]
public System.Nullable<float> CoverShortWavelengthRadiationFactor { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("cover_long_wavelength_radiation_factor")]
public System.Nullable<float> CoverLongWavelengthRadiationFactor { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("pool_water_inlet_node")]
public string PoolWaterInletNode { get; set; } = "";
        

[JsonProperty("pool_water_outlet_node")]
public string PoolWaterOutletNode { get; set; } = "";
        

[JsonProperty("pool_heating_system_maximum_water_flow_rate")]
public System.Nullable<float> PoolHeatingSystemMaximumWaterFlowRate { get; set; } = null;
        

[Description("Power input per pool water flow rate")]
[JsonProperty("pool_miscellaneous_equipment_power")]
public System.Nullable<float> PoolMiscellaneousEquipmentPower { get; set; } = null;
        

[JsonProperty("setpoint_temperature_schedule")]
public string SetpointTemperatureSchedule { get; set; } = "";
        

[JsonProperty("maximum_number_of_people")]
public System.Nullable<float> MaximumNumberOfPeople { get; set; } = null;
        

[JsonProperty("people_schedule")]
public string PeopleSchedule { get; set; } = "";
        

[JsonProperty("people_heat_gain_schedule")]
public string PeopleHeatGainSchedule { get; set; } = "";
    }
    
    [Description("Represents internal CO2 gains and sinks in the zone.")]
    [JsonObject("ZoneContaminantSourceAndSink:CarbonDioxide")]
    public class ZoneContaminantSourceAndSink_CarbonDioxide : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Positive values represent sources and negative values represent sinks.")]
[JsonProperty("design_generation_rate")]
public System.Nullable<float> DesignGenerationRate { get; set; } = null;
        

[Description("Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the " +
    "Design Generation Rate")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
    }
    
    [Description("Sets internal generic contaminant gains and sinks in a zone with constant values." +
        "")]
    [JsonObject("ZoneContaminantSourceAndSink:Generic:Constant")]
    public class ZoneContaminantSourceAndSink_Generic_Constant : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("The values represent source.")]
[JsonProperty("design_generation_rate")]
public System.Nullable<float> DesignGenerationRate { get; set; } = null;
        

[Description("Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the " +
    "Design Generation Rate")]
[JsonProperty("generation_schedule_name")]
public string GenerationScheduleName { get; set; } = "";
        

[Description("The value represent sink.")]
[JsonProperty("design_removal_coefficient")]
public System.Nullable<float> DesignRemovalCoefficient { get; set; } = null;
        

[Description("Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the " +
    "Design removal Coefficient")]
[JsonProperty("removal_schedule_name")]
public string RemovalScheduleName { get; set; } = "";
    }
    
    [Description("Simulate generic contaminant source driven by the pressure difference across a su" +
        "rface.")]
    [JsonObject("SurfaceContaminantSourceAndSink:Generic:PressureDriven")]
    public class SurfaceContaminantSourceAndSink_Generic_PressureDriven : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("surface_name")]
public string SurfaceName { get; set; } = "";
        

[JsonProperty("design_generation_rate_coefficient")]
public System.Nullable<float> DesignGenerationRateCoefficient { get; set; } = null;
        

[Description("Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the " +
    "Design Generation Rate Coefficient")]
[JsonProperty("generation_schedule_name")]
public string GenerationScheduleName { get; set; } = "";
        

[JsonProperty("generation_exponent")]
public System.Nullable<float> GenerationExponent { get; set; } = null;
    }
    
    [Description("Simulate generic contaminant source driven by the cutoff concentration model.")]
    [JsonObject("ZoneContaminantSourceAndSink:Generic:CutoffModel")]
    public class ZoneContaminantSourceAndSink_Generic_CutoffModel : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("design_generation_rate_coefficient")]
public System.Nullable<float> DesignGenerationRateCoefficient { get; set; } = null;
        

[Description("Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the " +
    "Design Generation Rate Coefficient")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[Description("When the zone concentration level is greater than the cutoff level, emission stop" +
    "s, and the source level is zero.")]
[JsonProperty("cutoff_generic_contaminant_at_which_emission_ceases")]
public System.Nullable<float> CutoffGenericContaminantAtWhichEmissionCeases { get; set; } = null;
    }
    
    [Description("Simulate generic contaminant source driven by the cutoff concentration model.")]
    [JsonObject("ZoneContaminantSourceAndSink:Generic:DecaySource")]
    public class ZoneContaminantSourceAndSink_Generic_DecaySource : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("initial_emission_rate")]
public System.Nullable<float> InitialEmissionRate { get; set; } = null;
        

[Description("Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the " +
    "Initial Emission Rate. When the value is equal to 1.0, the time will be reset to" +
    " zero.")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[JsonProperty("delay_time_constant")]
public System.Nullable<float> DelayTimeConstant { get; set; } = null;
    }
    
    [Description("Simulate generic contaminant source driven by the boundary layer diffusion contro" +
        "lled model.")]
    [JsonObject("SurfaceContaminantSourceAndSink:Generic:BoundaryLayerDiffusion")]
    public class SurfaceContaminantSourceAndSink_Generic_BoundaryLayerDiffusion : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("surface_name")]
public string SurfaceName { get; set; } = "";
        

[JsonProperty("mass_transfer_coefficient")]
public System.Nullable<float> MassTransferCoefficient { get; set; } = null;
        

[Description("Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the " +
    "Initial Emission Rate. When the value is equal to 1.0, the time will be reset to" +
    " zero.")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[JsonProperty("henry_adsorption_constant_or_partition_coefficient")]
public System.Nullable<float> HenryAdsorptionConstantOrPartitionCoefficient { get; set; } = null;
    }
    
    [Description("Simulate generic contaminant source driven by the boundary layer diffusion contro" +
        "lled model.")]
    [JsonObject("SurfaceContaminantSourceAndSink:Generic:DepositionVelocitySink")]
    public class SurfaceContaminantSourceAndSink_Generic_DepositionVelocitySink : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("surface_name")]
public string SurfaceName { get; set; } = "";
        

[JsonProperty("deposition_velocity")]
public System.Nullable<float> DepositionVelocity { get; set; } = null;
        

[Description("Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the " +
    "Initial Emission Rate. When the value is equal to 1.0, the time will be reset to" +
    " zero.")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
    }
    
    [Description("Simulate generic contaminant source driven by the boundary layer diffusion contro" +
        "lled model.")]
    [JsonObject("ZoneContaminantSourceAndSink:Generic:DepositionRateSink")]
    public class ZoneContaminantSourceAndSink_Generic_DepositionRateSink : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("deposition_rate")]
public System.Nullable<float> DepositionRate { get; set; } = null;
        

[Description("Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the " +
    "Initial Emission Rate. When the value is equal to 1.0, the time will be reset to" +
    " zero.")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
    }
}
namespace BH.oM.Adapters.EnergyPlus.LocationandClimate
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Specifies the building\'s location. Only one location is allowed. Weather data fil" +
        "e location, if it exists, will override this object.")]
    [JsonObject("Site:Location")]
    public class Site_Location : BHoMObject, IEnergyPlusClass
    {
        

[Description("+ is North, - is South, degree minutes represented in decimal (i.e. 30 minutes is" +
    " .5)")]
[JsonProperty("latitude")]
public System.Nullable<float> Latitude { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("- is West, + is East, degree minutes represented in decimal (i.e. 30 minutes is ." +
    "5)")]
[JsonProperty("longitude")]
public System.Nullable<float> Longitude { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("basic these limits on the WorldTimeZone Map (2003) Time relative to GMT. Decimal " +
    "hours.")]
[JsonProperty("time_zone")]
public System.Nullable<float> TimeZone { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("elevation")]
public System.Nullable<float> Elevation { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    [Description("Captures the scheduling of a moving/reorienting building, or more likely a vessel" +
        "")]
    [JsonObject("Site:VariableLocation")]
    public class Site_VariableLocation : BHoMObject, IEnergyPlusClass
    {
        

[Description("The name of a schedule that defines the latitude of the building at any time. If " +
    "not entered, the latitude defined in the Site:Location, or the default latitude," +
    " will be used for the entirety of the simulation")]
[JsonProperty("building_location_latitude_schedule")]
public string BuildingLocationLatitudeSchedule { get; set; } = "";
        

[Description("The name of a schedule that defines the longitude of the building at any time. If" +
    " not entered, the longitude defined in the Site:Location, or the default longitu" +
    "de, will be used for the entirety of the simulation")]
[JsonProperty("building_location_longitude_schedule")]
public string BuildingLocationLongitudeSchedule { get; set; } = "";
        

[Description(@"The name of a schedule that defines the orientation of the building at any time. This orientation is based on a change from the original orientation. -- NEED TO REFINE THIS If not entered, the original orientation will be used for the entirety of the simulation")]
[JsonProperty("building_location_orientation_schedule")]
public string BuildingLocationOrientationSchedule { get; set; } = "";
    }
    
    [Description(@"The design day object creates the parameters for the program to create the 24 hour weather profile that can be used for sizing as well as running to test the other simulation parameters. Parameters in this include a date (month and day), a day type (which uses the appropriate schedules for either sizing or simple tests), min/max temperatures, wind speeds, and solar radiation values.")]
    [JsonObject("SizingPeriod:DesignDay")]
    public class SizingPeriod_DesignDay : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("month")]
public System.Nullable<float> Month { get; set; } = null;
        

[Description("must be valid for Month field")]
[JsonProperty("day_of_month")]
public System.Nullable<float> DayOfMonth { get; set; } = null;
        

[Description("Day Type selects the schedules appropriate for this design day")]
[JsonProperty("day_type")]
public SizingPeriod_DesignDay_DayType DayType { get; set; } = (SizingPeriod_DesignDay_DayType)Enum.Parse(typeof(SizingPeriod_DesignDay_DayType), "CustomDay1");
        

[Description("This field is required when field \"Dry-Bulb Temperature Range Modifier Type\" is n" +
    "ot \"TemperatureProfileSchedule\".")]
[JsonProperty("maximum_dry_bulb_temperature")]
public System.Nullable<float> MaximumDryBulbTemperature { get; set; } = null;
        

[Description("Must still produce appropriate maximum dry-bulb (within range) This field is not " +
    "needed if Dry-Bulb Temperature Range Modifier Type is \"delta\".")]
[JsonProperty("daily_dry_bulb_temperature_range")]
public System.Nullable<float> DailyDryBulbTemperatureRange { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Type of modifier to the dry-bulb temperature calculated for the timestep")]
[JsonProperty("dry_bulb_temperature_range_modifier_type")]
public SizingPeriod_DesignDay_DryBulbTemperatureRangeModifierType DryBulbTemperatureRangeModifierType { get; set; } = (SizingPeriod_DesignDay_DryBulbTemperatureRangeModifierType)Enum.Parse(typeof(SizingPeriod_DesignDay_DryBulbTemperatureRangeModifierType), "DefaultMultipliers");
        

[Description(@"Only used when previous field is ""MultiplierSchedule"", ""DifferenceSchedule"" or ""TemperatureProfileSchedule"". For type ""MultiplierSchedule""  the hour/time interval values should specify the fraction (0-1) of the dry-bulb temperature range to be subtracted from the maximum dry-bulb temperature for each timestep in the day For type ""DifferenceSchedule"" the values should specify a number to be subtracted from the maximum dry-bulb temperature for each timestep in the day. Note that numbers in the difference schedule cannot be negative as that would result in a higher maximum than the maximum previously specified. For type ""TemperatureProfileSchedule"" the values should specify the actual dry-bulb temperature for each timestep in the day.")]
[JsonProperty("dry_bulb_temperature_range_modifier_day_schedule_name")]
public string DryBulbTemperatureRangeModifierDayScheduleName { get; set; } = "";
        

[Description("values/schedules indicated here and in subsequent fields create the humidity valu" +
    "es in the 24 hour design day conditions profile.")]
[JsonProperty("humidity_condition_type")]
public SizingPeriod_DesignDay_HumidityConditionType HumidityConditionType { get; set; } = (SizingPeriod_DesignDay_HumidityConditionType)Enum.Parse(typeof(SizingPeriod_DesignDay_HumidityConditionType), "WetBulb");
        

[Description("Wetbulb or dewpoint temperature coincident with the maximum temperature. Required" +
    " only if field Humidity Condition Type is \"Wetbulb\", \"Dewpoint\", \"WetBulbProfile" +
    "MultiplierSchedule\", \"WetBulbProfileDifferenceSchedule\", or \"WetBulbProfileDefau" +
    "ltMultipliers\"")]
[JsonProperty("wetbulb_or_dewpoint_at_maximum_dry_bulb")]
public System.Nullable<float> WetbulbOrDewpointAtMaximumDryBulb { get; set; } = null;
        

[Description(@"Only used when Humidity Condition Type is ""RelativeHumiditySchedule"", ""WetBulbProfileMultiplierSchedule"", or ""WetBulbProfileDifferenceSchedule"" For type ""RelativeHumiditySchedule"", the hour/time interval values should specify relative humidity (percent) from 0.0 to 100.0. For type ""WetBulbProfileMultiplierSchedule"" the hour/time interval values should specify the fraction (0-1) of the wet-bulb temperature range to be subtracted from the maximum wet-bulb temperature for each timestep in the day (units = Fraction) For type ""WetBulbProfileDifferenceSchedule"" the values should specify a number to be subtracted from the maximum wet-bulb temperature for each timestep in the day. (units = deltaC)")]
[JsonProperty("humidity_condition_day_schedule_name")]
public string HumidityConditionDayScheduleName { get; set; } = "";
        

[Description("Humidity ratio coincident with the maximum temperature (constant humidity ratio t" +
    "hroughout day). Required only if field Humidity Condition Type is \"HumidityRatio" +
    "\".")]
[JsonProperty("humidity_ratio_at_maximum_dry_bulb")]
public System.Nullable<float> HumidityRatioAtMaximumDryBulb { get; set; } = null;
        

[Description("Enthalpy coincident with the maximum temperature. Required only if field Humidity" +
    " Condition Type is \"Enthalpy\".")]
[JsonProperty("enthalpy_at_maximum_dry_bulb")]
public System.Nullable<float> EnthalpyAtMaximumDryBulb { get; set; } = null;
        

[Description("Required only if Humidity Condition Type = \"WetbulbProfileMultiplierSchedule\" or " +
    "\"WetBulbProfileDefaultMultipliers\"")]
[JsonProperty("daily_wet_bulb_temperature_range")]
public System.Nullable<float> DailyWetBulbTemperatureRange { get; set; } = null;
        

[Description("This field\'s value is also checked against the calculated \"standard barometric pr" +
    "essure\" for the location. If out of range (>10%) or blank, then is replaced by s" +
    "tandard value.")]
[JsonProperty("barometric_pressure")]
public System.Nullable<float> BarometricPressure { get; set; } = null;
        

[JsonProperty("wind_speed")]
public System.Nullable<float> WindSpeed { get; set; } = null;
        

[Description("North=0.0 East=90.0 0 and 360 are the same direction.")]
[JsonProperty("wind_direction")]
public System.Nullable<float> WindDirection { get; set; } = null;
        

[Description("Yes is raining (all day), No is not raining")]
[JsonProperty("rain_indicator")]
public EmptyNoYes RainIndicator { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Yes is Snow on Ground, No is no Snow on Ground")]
[JsonProperty("snow_indicator")]
public EmptyNoYes SnowIndicator { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Yes -- use schedules modified for Daylight Saving Time Schedules. No - do not use" +
    " schedules modified for Daylight Saving Time Schedules")]
[JsonProperty("daylight_saving_time_indicator")]
public EmptyNoYes DaylightSavingTimeIndicator { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("solar_model_indicator")]
public SizingPeriod_DesignDay_SolarModelIndicator SolarModelIndicator { get; set; } = (SizingPeriod_DesignDay_SolarModelIndicator)Enum.Parse(typeof(SizingPeriod_DesignDay_SolarModelIndicator), "ASHRAEClearSky");
        

[Description("if Solar Model Indicator = Schedule, then beam schedule name (for day)")]
[JsonProperty("beam_solar_day_schedule_name")]
public string BeamSolarDayScheduleName { get; set; } = "";
        

[Description("if Solar Model Indicator = Schedule, then diffuse schedule name (for day)")]
[JsonProperty("diffuse_solar_day_schedule_name")]
public string DiffuseSolarDayScheduleName { get; set; } = "";
        

[Description("Required if Solar Model Indicator = ASHRAETau or ASHRAETau2017 ASHRAETau2017 sola" +
    "r model can be used with 2013 and 2017 HOF matching taub")]
[JsonProperty("ashrae_clear_sky_optical_depth_for_beam_irradiance_taub_")]
public System.Nullable<float> AshraeClearSkyOpticalDepthForBeamIrradianceTaub { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Required if Solar Model Indicator = ASHRAETau or ASHRAETau2017 ASHRAETau2017 sola" +
    "r model can be used with 2013 and 2017 HOF matching taud")]
[JsonProperty("ashrae_clear_sky_optical_depth_for_diffuse_irradiance_taud_")]
public System.Nullable<float> AshraeClearSkyOpticalDepthForDiffuseIrradianceTaud { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Used if Sky Model Indicator = ASHRAEClearSky or ZhangHuang 0.0 is totally unclear" +
    ", 1.0 is totally clear")]
[JsonProperty("sky_clearness")]
public System.Nullable<float> SkyClearness { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("If used this design day will be run with a custom limit on the maximum number of " +
    "days that are repeated for warmup. Limiting the number of warmup days can improv" +
    "e run time.")]
[JsonProperty("maximum_number_warmup_days")]
public System.Nullable<float> MaximumNumberWarmupDays { get; set; } = null;
        

[Description("If used this can control if you want the thermal history to be reset at the begin" +
    "ning of the design day. When using a series of similiar design days, this field " +
    "can be used to retain warmup state from the previous design day.")]
[JsonProperty("begin_environment_reset_mode")]
public SizingPeriod_DesignDay_BeginEnvironmentResetMode BeginEnvironmentResetMode { get; set; } = (SizingPeriod_DesignDay_BeginEnvironmentResetMode)Enum.Parse(typeof(SizingPeriod_DesignDay_BeginEnvironmentResetMode), "FullResetAtBeginEnvironment");
    }
    
    public enum SizingPeriod_DesignDay_DayType
    {
        
        [JsonProperty("CustomDay1")]
        CustomDay1 = 0,
        
        [JsonProperty("CustomDay2")]
        CustomDay2 = 1,
        
        [JsonProperty("Friday")]
        Friday = 2,
        
        [JsonProperty("Holiday")]
        Holiday = 3,
        
        [JsonProperty("Monday")]
        Monday = 4,
        
        [JsonProperty("Saturday")]
        Saturday = 5,
        
        [JsonProperty("SummerDesignDay")]
        SummerDesignDay = 6,
        
        [JsonProperty("Sunday")]
        Sunday = 7,
        
        [JsonProperty("Thursday")]
        Thursday = 8,
        
        [JsonProperty("Tuesday")]
        Tuesday = 9,
        
        [JsonProperty("Wednesday")]
        Wednesday = 10,
        
        [JsonProperty("WinterDesignDay")]
        WinterDesignDay = 11,
    }
    
    public enum SizingPeriod_DesignDay_DryBulbTemperatureRangeModifierType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DefaultMultipliers")]
        DefaultMultipliers = 1,
        
        [JsonProperty("DifferenceSchedule")]
        DifferenceSchedule = 2,
        
        [JsonProperty("MultiplierSchedule")]
        MultiplierSchedule = 3,
        
        [JsonProperty("TemperatureProfileSchedule")]
        TemperatureProfileSchedule = 4,
    }
    
    public enum SizingPeriod_DesignDay_HumidityConditionType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DewPoint")]
        DewPoint = 1,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 2,
        
        [JsonProperty("HumidityRatio")]
        HumidityRatio = 3,
        
        [JsonProperty("RelativeHumiditySchedule")]
        RelativeHumiditySchedule = 4,
        
        [JsonProperty("WetBulb")]
        WetBulb = 5,
        
        [JsonProperty("WetBulbProfileDefaultMultipliers")]
        WetBulbProfileDefaultMultipliers = 6,
        
        [JsonProperty("WetBulbProfileDifferenceSchedule")]
        WetBulbProfileDifferenceSchedule = 7,
        
        [JsonProperty("WetBulbProfileMultiplierSchedule")]
        WetBulbProfileMultiplierSchedule = 8,
    }
    
    public enum SizingPeriod_DesignDay_SolarModelIndicator
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASHRAEClearSky")]
        ASHRAEClearSky = 1,
        
        [JsonProperty("ASHRAETau")]
        ASHRAETau = 2,
        
        [JsonProperty("ASHRAETau2017")]
        ASHRAETau2017 = 3,
        
        [JsonProperty("Schedule")]
        Schedule = 4,
        
        [JsonProperty("ZhangHuang")]
        ZhangHuang = 5,
    }
    
    public enum SizingPeriod_DesignDay_BeginEnvironmentResetMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FullResetAtBeginEnvironment")]
        FullResetAtBeginEnvironment = 1,
        
        [JsonProperty("SuppressAllBeginEnvironmentResets")]
        SuppressAllBeginEnvironmentResets = 2,
    }
    
    [Description("Use a weather file period for design sizing calculations.")]
    [JsonObject("SizingPeriod:WeatherFileDays")]
    public class SizingPeriod_WeatherFileDays : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("begin_month")]
public System.Nullable<float> BeginMonth { get; set; } = null;
        

[JsonProperty("begin_day_of_month")]
public System.Nullable<float> BeginDayOfMonth { get; set; } = null;
        

[JsonProperty("end_month")]
public System.Nullable<float> EndMonth { get; set; } = null;
        

[JsonProperty("end_day_of_month")]
public System.Nullable<float> EndDayOfMonth { get; set; } = null;
        

[Description(@"=[|Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|SummerDesignDay|WinterDesignDay| |CustomDay1|CustomDay2]; if you use SummerDesignDay or WinterDesignDay or the CustomDays then this will apply to the whole period; other days (i.e., Monday) will signify a start day and normal sequence of subsequent days")]
[JsonProperty("day_of_week_for_start_day")]
public SizingPeriod_WeatherFileDays_DayOfWeekForStartDay DayOfWeekForStartDay { get; set; } = (SizingPeriod_WeatherFileDays_DayOfWeekForStartDay)Enum.Parse(typeof(SizingPeriod_WeatherFileDays_DayOfWeekForStartDay), "Monday");
        

[Description("If yes or blank, use daylight saving period as specified on Weatherfile. If no, d" +
    "o not use the daylight saving period as specified on the Weatherfile.")]
[JsonProperty("use_weather_file_daylight_saving_period")]
public EmptyNoYes UseWeatherFileDaylightSavingPeriod { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("use_weather_file_rain_and_snow_indicators")]
public EmptyNoYes UseWeatherFileRainAndSnowIndicators { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
    }
    
    public enum SizingPeriod_WeatherFileDays_DayOfWeekForStartDay
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CustomDay1")]
        CustomDay1 = 1,
        
        [JsonProperty("CustomDay2")]
        CustomDay2 = 2,
        
        [JsonProperty("Friday")]
        Friday = 3,
        
        [JsonProperty("Monday")]
        Monday = 4,
        
        [JsonProperty("Saturday")]
        Saturday = 5,
        
        [JsonProperty("SummerDesignDay")]
        SummerDesignDay = 6,
        
        [JsonProperty("Sunday")]
        Sunday = 7,
        
        [JsonProperty("Thursday")]
        Thursday = 8,
        
        [JsonProperty("Tuesday")]
        Tuesday = 9,
        
        [JsonProperty("Wednesday")]
        Wednesday = 10,
        
        [JsonProperty("WinterDesignDay")]
        WinterDesignDay = 11,
    }
    
    [Description("Use a weather file period for design sizing calculations. EPW weather files are c" +
        "reated with typical and extreme periods created heuristically from the weather f" +
        "ile data. For more details on these periods, see AuxiliaryPrograms document.")]
    [JsonObject("SizingPeriod:WeatherFileConditionType")]
    public class SizingPeriod_WeatherFileConditionType : BHoMObject, IEnergyPlusClass
    {
        

[Description("Following is a list of all possible types of Extreme and Typical periods that mig" +
    "ht be identified in the Weather File. Not all possible types are available for a" +
    "ll weather files.")]
[JsonProperty("period_selection")]
public SizingPeriod_WeatherFileConditionType_PeriodSelection PeriodSelection { get; set; } = (SizingPeriod_WeatherFileConditionType_PeriodSelection)Enum.Parse(typeof(SizingPeriod_WeatherFileConditionType_PeriodSelection), "AutumnTypical");
        

[Description(@"=[|Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|SummerDesignDay|WinterDesignDay| |CustomDay1|CustomDay2]; if you use SummerDesignDay or WinterDesignDay or the CustomDays then this will apply to the whole period; other days (i.e., Monday) will signify a start day and normal sequence of subsequent days")]
[JsonProperty("day_of_week_for_start_day")]
public SizingPeriod_WeatherFileConditionType_DayOfWeekForStartDay DayOfWeekForStartDay { get; set; } = (SizingPeriod_WeatherFileConditionType_DayOfWeekForStartDay)Enum.Parse(typeof(SizingPeriod_WeatherFileConditionType_DayOfWeekForStartDay), "Monday");
        

[Description("If yes or blank, use daylight saving period as specified on Weatherfile. If no, d" +
    "o not use the daylight saving period as specified on the Weatherfile.")]
[JsonProperty("use_weather_file_daylight_saving_period")]
public EmptyNoYes UseWeatherFileDaylightSavingPeriod { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("use_weather_file_rain_and_snow_indicators")]
public EmptyNoYes UseWeatherFileRainAndSnowIndicators { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
    }
    
    public enum SizingPeriod_WeatherFileConditionType_PeriodSelection
    {
        
        [JsonProperty("AutumnTypical")]
        AutumnTypical = 0,
        
        [JsonProperty("DrySeason")]
        DrySeason = 1,
        
        [JsonProperty("NoDrySeason")]
        NoDrySeason = 2,
        
        [JsonProperty("NoDrySeasonMax")]
        NoDrySeasonMax = 3,
        
        [JsonProperty("NoDrySeasonMin")]
        NoDrySeasonMin = 4,
        
        [JsonProperty("NoWetSeason")]
        NoWetSeason = 5,
        
        [JsonProperty("NoWetSeasonMax")]
        NoWetSeasonMax = 6,
        
        [JsonProperty("NoWetSeasonMin")]
        NoWetSeasonMin = 7,
        
        [JsonProperty("SpringTypical")]
        SpringTypical = 8,
        
        [JsonProperty("SummerExtreme")]
        SummerExtreme = 9,
        
        [JsonProperty("SummerTypical")]
        SummerTypical = 10,
        
        [JsonProperty("TropicalCold")]
        TropicalCold = 11,
        
        [JsonProperty("TropicalHot")]
        TropicalHot = 12,
        
        [JsonProperty("WetSeason")]
        WetSeason = 13,
        
        [JsonProperty("WinterExtreme")]
        WinterExtreme = 14,
        
        [JsonProperty("WinterTypical")]
        WinterTypical = 15,
    }
    
    public enum SizingPeriod_WeatherFileConditionType_DayOfWeekForStartDay
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CustomDay1")]
        CustomDay1 = 1,
        
        [JsonProperty("CustomDay2")]
        CustomDay2 = 2,
        
        [JsonProperty("Friday")]
        Friday = 3,
        
        [JsonProperty("Monday")]
        Monday = 4,
        
        [JsonProperty("Saturday")]
        Saturday = 5,
        
        [JsonProperty("SummerDesignDay")]
        SummerDesignDay = 6,
        
        [JsonProperty("Sunday")]
        Sunday = 7,
        
        [JsonProperty("Thursday")]
        Thursday = 8,
        
        [JsonProperty("Tuesday")]
        Tuesday = 9,
        
        [JsonProperty("Wednesday")]
        Wednesday = 10,
        
        [JsonProperty("WinterDesignDay")]
        WinterDesignDay = 11,
    }
    
    [Description("Specify a range of dates and other parameters for a simulation. Multiple run peri" +
        "ods may be input, but they may not overlap.")]
    [JsonObject("RunPeriod")]
    public class RunPeriod : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("begin_month")]
public System.Nullable<float> BeginMonth { get; set; } = null;
        

[JsonProperty("begin_day_of_month")]
public System.Nullable<float> BeginDayOfMonth { get; set; } = null;
        

[Description("Start year of the simulation, if this field is specified it must agree with the D" +
    "ay of Week for Start Day If this field is blank, the year will be selected to ma" +
    "tch the weekday, which is Sunday if not specified")]
[JsonProperty("begin_year")]
public System.Nullable<float> BeginYear { get; set; } = null;
        

[JsonProperty("end_month")]
public System.Nullable<float> EndMonth { get; set; } = null;
        

[JsonProperty("end_day_of_month")]
public System.Nullable<float> EndDayOfMonth { get; set; } = null;
        

[Description("end year of simulation, if specified")]
[JsonProperty("end_year")]
public System.Nullable<float> EndYear { get; set; } = null;
        

[Description("=[Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday]; If no year is input," +
    " this field will default to Sunday If a year is input and this field is blank, t" +
    "he correct weekday is determined")]
[JsonProperty("day_of_week_for_start_day")]
public RunPeriod_DayOfWeekForStartDay DayOfWeekForStartDay { get; set; } = (RunPeriod_DayOfWeekForStartDay)Enum.Parse(typeof(RunPeriod_DayOfWeekForStartDay), "Friday");
        

[Description("If yes or blank, use holidays as specified on Weatherfile. If no, do not use the " +
    "holidays specified on the Weatherfile. Note: You can still specify holidays/spec" +
    "ial days using the RunPeriodControl:SpecialDays object(s).")]
[JsonProperty("use_weather_file_holidays_and_special_days")]
public EmptyNoYes UseWeatherFileHolidaysAndSpecialDays { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[Description("If yes or blank, use daylight saving period as specified on Weatherfile. If no, d" +
    "o not use the daylight saving period as specified on the Weatherfile.")]
[JsonProperty("use_weather_file_daylight_saving_period")]
public EmptyNoYes UseWeatherFileDaylightSavingPeriod { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[Description("if yes and single day holiday falls on weekend, \"holiday\" occurs on following Mon" +
    "day")]
[JsonProperty("apply_weekend_holiday_rule")]
public EmptyNoYes ApplyWeekendHolidayRule { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("use_weather_file_rain_indicators")]
public EmptyNoYes UseWeatherFileRainIndicators { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("use_weather_file_snow_indicators")]
public EmptyNoYes UseWeatherFileSnowIndicators { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("treat_weather_as_actual")]
public EmptyNoYes TreatWeatherAsActual { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
    }
    
    public enum RunPeriod_DayOfWeekForStartDay
    {
        
        [JsonProperty("Friday")]
        Friday = 0,
        
        [JsonProperty("Monday")]
        Monday = 1,
        
        [JsonProperty("Saturday")]
        Saturday = 2,
        
        [JsonProperty("Sunday")]
        Sunday = 3,
        
        [JsonProperty("Thursday")]
        Thursday = 4,
        
        [JsonProperty("Tuesday")]
        Tuesday = 5,
        
        [JsonProperty("Wednesday")]
        Wednesday = 6,
    }
    
    [Description(@"This object sets up holidays/special days to be used during weather file run periods. (These are not used with SizingPeriod:* objects.) Depending on the value in the run period, days on the weather file may also be used. However, the weather file specification will take precedence over any specification shown here. (No error message on duplicate days or overlapping days).")]
    [JsonObject("RunPeriodControl:SpecialDays")]
    public class RunPeriodControl_SpecialDays : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Dates can be several formats: <number>/<number>  (month/day) <number> <Month> <Month> <number> <Nth> <Weekday> in <Month) Last <WeekDay> in <Month> <Month> can be January, February, March, April, May, June, July, August, September, October, November, December Months can be the first 3 letters of the month <Weekday> can be Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday <Nth> can be 1 or 1st, 2 or 2nd, etc. up to 5(?)")]
[JsonProperty("start_date")]
public string StartDate { get; set; } = "";
        

[JsonProperty("duration")]
public System.Nullable<float> Duration { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Special Day Type selects the schedules appropriate for each day so labeled")]
[JsonProperty("special_day_type")]
public RunPeriodControl_SpecialDays_SpecialDayType SpecialDayType { get; set; } = (RunPeriodControl_SpecialDays_SpecialDayType)Enum.Parse(typeof(RunPeriodControl_SpecialDays_SpecialDayType), "Holiday");
    }
    
    public enum RunPeriodControl_SpecialDays_SpecialDayType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CustomDay1")]
        CustomDay1 = 1,
        
        [JsonProperty("CustomDay2")]
        CustomDay2 = 2,
        
        [JsonProperty("Holiday")]
        Holiday = 3,
        
        [JsonProperty("SummerDesignDay")]
        SummerDesignDay = 4,
        
        [JsonProperty("WinterDesignDay")]
        WinterDesignDay = 5,
    }
    
    [Description(@"This object sets up the daylight saving time period for any RunPeriod. Ignores any daylight saving time period on the weather file and uses this definition. These are not used with SizingPeriod:DesignDay objects. Use with SizingPeriod:WeatherFileDays object can be controlled in that object.")]
    [JsonObject("RunPeriodControl:DaylightSavingTime")]
    public class RunPeriodControl_DaylightSavingTime : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("start_date")]
public string StartDate { get; set; } = "";
        

[Description(@"Dates can be several formats: <number>/<number>  (month/day) <number> <Month> <Month> <number> <Nth> <Weekday> in <Month) Last <WeekDay> in <Month> <Month> can be January, February, March, April, May, June, July, August, September, October, November, December Months can be the first 3 letters of the month <Weekday> can be Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday <Nth> can be 1 or 1st, 2 or 2nd, etc. up to 5(?)")]
[JsonProperty("end_date")]
public string EndDate { get; set; } = "";
    }
    
    [Description("This object is used to override internal sky temperature calculations.")]
    [JsonObject("WeatherProperty:SkyTemperature")]
    public class WeatherProperty_SkyTemperature : BHoMObject, IEnergyPlusClass
    {
        

[Description("The field indicates that the sky temperature will be imported from external sched" +
    "ules or calculated by alternative methods other than default.")]
[JsonProperty("calculation_type")]
public WeatherProperty_SkyTemperature_CalculationType CalculationType { get; set; } = (WeatherProperty_SkyTemperature_CalculationType)Enum.Parse(typeof(WeatherProperty_SkyTemperature_CalculationType), "ClarkAllen");
        

[Description(@"if name matches a SizingPeriod:DesignDay, put in a day schedule of this name if name is for a SizingPeriod:WeatherFileDays, SizingPeriod:WeatherFileConditionType or RunPeriod, put in a full year schedule that covers the appropriate days. Required if Calculation Type is ScheduleValue, DifferenceScheduleDryBulbValue or DifferenceScheduleDewPointValue.")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[Description(@"If yes or blank, use Horizontal IR values from weather file when present, otherwise use the specified sky model. If no, always use the specified sky model and ignore the horizontal IR values from the weather file. For Calculation Type = ScheduleValue, DifferenceScheduleDryBulbValue or DifferenceScheduleDewPointValue, this field is ignored and the scheduled values are used.")]
[JsonProperty("use_weather_file_horizontal_ir")]
public EmptyNoYes UseWeatherFileHorizontalIr { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
    }
    
    public enum WeatherProperty_SkyTemperature_CalculationType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BerdahlMartin")]
        BerdahlMartin = 1,
        
        [JsonProperty("Brunt")]
        Brunt = 2,
        
        [JsonProperty("ClarkAllen")]
        ClarkAllen = 3,
        
        [JsonProperty("DifferenceScheduleDewPointValue")]
        DifferenceScheduleDewPointValue = 4,
        
        [JsonProperty("DifferenceScheduleDryBulbValue")]
        DifferenceScheduleDryBulbValue = 5,
        
        [JsonProperty("Idso")]
        Idso = 6,
        
        [JsonProperty("ScheduleValue")]
        ScheduleValue = 7,
    }
    
    [Description("This object should only be used for non-standard weather data. Standard weather d" +
        "ata such as TMY2, IWEC, and ASHRAE design day data are all measured at the defau" +
        "lt conditions and do not require this object.")]
    [JsonObject("Site:WeatherStation")]
    public class Site_WeatherStation : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("wind_sensor_height_above_ground")]
public System.Nullable<float> WindSensorHeightAboveGround { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[JsonProperty("wind_speed_profile_exponent")]
public System.Nullable<float> WindSpeedProfileExponent { get; set; } = (System.Nullable<float>)Single.Parse("0.14", CultureInfo.InvariantCulture);
        

[JsonProperty("wind_speed_profile_boundary_layer_thickness")]
public System.Nullable<float> WindSpeedProfileBoundaryLayerThickness { get; set; } = (System.Nullable<float>)Single.Parse("270", CultureInfo.InvariantCulture);
        

[JsonProperty("air_temperature_sensor_height_above_ground")]
public System.Nullable<float> AirTemperatureSensorHeightAboveGround { get; set; } = (System.Nullable<float>)Single.Parse("1.5", CultureInfo.InvariantCulture);
    }
    
    [Description(@"This object is used if the user requires advanced control over height-dependent variations in wind speed and temperature. When this object is not present, the default model for temperature dependence on height is used, and the wind speed is modeled according to the Terrain field of the BUILDING object.")]
    [JsonObject("Site:HeightVariation")]
    public class Site_HeightVariation : BHoMObject, IEnergyPlusClass
    {
        

[Description("Set to zero for no wind speed dependence on height.")]
[JsonProperty("wind_speed_profile_exponent")]
public System.Nullable<float> WindSpeedProfileExponent { get; set; } = (System.Nullable<float>)Single.Parse("0.22", CultureInfo.InvariantCulture);
        

[JsonProperty("wind_speed_profile_boundary_layer_thickness")]
public System.Nullable<float> WindSpeedProfileBoundaryLayerThickness { get; set; } = (System.Nullable<float>)Single.Parse("370", CultureInfo.InvariantCulture);
        

[Description("Set to zero for no air temperature dependence on height.")]
[JsonProperty("air_temperature_gradient_coefficient")]
public System.Nullable<float> AirTemperatureGradientCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0.0065", CultureInfo.InvariantCulture);
    }
    
    [Description(@"These temperatures are specifically for those surfaces that have the outside environment of ""Ground"". Documentation about what values these should be is located in the Auxiliary programs document (Ground Heat Transfer) as well as the InputOutput Reference. CAUTION - Do not use the ""undisturbed"" ground temperatures from the weather data. These values are too extreme for the soil under a conditioned building. For best results, use the Slab or Basement program to calculate custom monthly average ground temperatures (see Auxiliary Programs). For typical commercial buildings in the USA, a reasonable default value is 2C less than the average indoor space temperature.")]
    [JsonObject("Site:GroundTemperature:BuildingSurface")]
    public class Site_GroundTemperature_BuildingSurface : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("january_ground_temperature")]
public System.Nullable<float> JanuaryGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("18", CultureInfo.InvariantCulture);
        

[JsonProperty("february_ground_temperature")]
public System.Nullable<float> FebruaryGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("18", CultureInfo.InvariantCulture);
        

[JsonProperty("march_ground_temperature")]
public System.Nullable<float> MarchGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("18", CultureInfo.InvariantCulture);
        

[JsonProperty("april_ground_temperature")]
public System.Nullable<float> AprilGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("18", CultureInfo.InvariantCulture);
        

[JsonProperty("may_ground_temperature")]
public System.Nullable<float> MayGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("18", CultureInfo.InvariantCulture);
        

[JsonProperty("june_ground_temperature")]
public System.Nullable<float> JuneGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("18", CultureInfo.InvariantCulture);
        

[JsonProperty("july_ground_temperature")]
public System.Nullable<float> JulyGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("18", CultureInfo.InvariantCulture);
        

[JsonProperty("august_ground_temperature")]
public System.Nullable<float> AugustGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("18", CultureInfo.InvariantCulture);
        

[JsonProperty("september_ground_temperature")]
public System.Nullable<float> SeptemberGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("18", CultureInfo.InvariantCulture);
        

[JsonProperty("october_ground_temperature")]
public System.Nullable<float> OctoberGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("18", CultureInfo.InvariantCulture);
        

[JsonProperty("november_ground_temperature")]
public System.Nullable<float> NovemberGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("18", CultureInfo.InvariantCulture);
        

[JsonProperty("december_ground_temperature")]
public System.Nullable<float> DecemberGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("18", CultureInfo.InvariantCulture);
    }
    
    [Description("These temperatures are specifically for underground walls and ground floors defin" +
        "ed with the C-factor and F-factor methods, and should be close to the monthly av" +
        "erage outdoor air temperature delayed by 3 months for the location.")]
    [JsonObject("Site:GroundTemperature:FCfactorMethod")]
    public class Site_GroundTemperature_FCfactorMethod : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("january_ground_temperature")]
public System.Nullable<float> JanuaryGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("february_ground_temperature")]
public System.Nullable<float> FebruaryGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("march_ground_temperature")]
public System.Nullable<float> MarchGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("april_ground_temperature")]
public System.Nullable<float> AprilGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("may_ground_temperature")]
public System.Nullable<float> MayGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("june_ground_temperature")]
public System.Nullable<float> JuneGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("july_ground_temperature")]
public System.Nullable<float> JulyGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("august_ground_temperature")]
public System.Nullable<float> AugustGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("september_ground_temperature")]
public System.Nullable<float> SeptemberGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("october_ground_temperature")]
public System.Nullable<float> OctoberGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("november_ground_temperature")]
public System.Nullable<float> NovemberGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("december_ground_temperature")]
public System.Nullable<float> DecemberGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
    }
    
    [Description("These temperatures are specifically for the Surface Ground Heat Exchanger and sho" +
        "uld probably be close to the average outdoor air temperature for the location. T" +
        "hey are not used in other models.")]
    [JsonObject("Site:GroundTemperature:Shallow")]
    public class Site_GroundTemperature_Shallow : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("january_surface_ground_temperature")]
public System.Nullable<float> JanuarySurfaceGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("february_surface_ground_temperature")]
public System.Nullable<float> FebruarySurfaceGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("march_surface_ground_temperature")]
public System.Nullable<float> MarchSurfaceGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("april_surface_ground_temperature")]
public System.Nullable<float> AprilSurfaceGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("may_surface_ground_temperature")]
public System.Nullable<float> MaySurfaceGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("june_surface_ground_temperature")]
public System.Nullable<float> JuneSurfaceGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("july_surface_ground_temperature")]
public System.Nullable<float> JulySurfaceGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("august_surface_ground_temperature")]
public System.Nullable<float> AugustSurfaceGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("september_surface_ground_temperature")]
public System.Nullable<float> SeptemberSurfaceGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("october_surface_ground_temperature")]
public System.Nullable<float> OctoberSurfaceGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("november_surface_ground_temperature")]
public System.Nullable<float> NovemberSurfaceGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("december_surface_ground_temperature")]
public System.Nullable<float> DecemberSurfaceGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
    }
    
    [Description("These temperatures are specifically for the ground heat exchangers that would use" +
        " \"deep\" (3-4 m depth) ground temperatures for their heat source. They are not us" +
        "ed in other models.")]
    [JsonObject("Site:GroundTemperature:Deep")]
    public class Site_GroundTemperature_Deep : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("january_deep_ground_temperature")]
public System.Nullable<float> JanuaryDeepGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("16", CultureInfo.InvariantCulture);
        

[JsonProperty("february_deep_ground_temperature")]
public System.Nullable<float> FebruaryDeepGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("16", CultureInfo.InvariantCulture);
        

[JsonProperty("march_deep_ground_temperature")]
public System.Nullable<float> MarchDeepGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("16", CultureInfo.InvariantCulture);
        

[JsonProperty("april_deep_ground_temperature")]
public System.Nullable<float> AprilDeepGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("16", CultureInfo.InvariantCulture);
        

[JsonProperty("may_deep_ground_temperature")]
public System.Nullable<float> MayDeepGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("16", CultureInfo.InvariantCulture);
        

[JsonProperty("june_deep_ground_temperature")]
public System.Nullable<float> JuneDeepGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("16", CultureInfo.InvariantCulture);
        

[JsonProperty("july_deep_ground_temperature")]
public System.Nullable<float> JulyDeepGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("16", CultureInfo.InvariantCulture);
        

[JsonProperty("august_deep_ground_temperature")]
public System.Nullable<float> AugustDeepGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("16", CultureInfo.InvariantCulture);
        

[JsonProperty("september_deep_ground_temperature")]
public System.Nullable<float> SeptemberDeepGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("16", CultureInfo.InvariantCulture);
        

[JsonProperty("october_deep_ground_temperature")]
public System.Nullable<float> OctoberDeepGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("16", CultureInfo.InvariantCulture);
        

[JsonProperty("november_deep_ground_temperature")]
public System.Nullable<float> NovemberDeepGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("16", CultureInfo.InvariantCulture);
        

[JsonProperty("december_deep_ground_temperature")]
public System.Nullable<float> DecemberDeepGroundTemperature { get; set; } = (System.Nullable<float>)Single.Parse("16", CultureInfo.InvariantCulture);
    }
    
    [Description("Undisturbed ground temperature object using a detailed finite difference 1-D mode" +
        "l")]
    [JsonObject("Site:GroundTemperature:Undisturbed:FiniteDifference")]
    public class Site_GroundTemperature_Undisturbed_FiniteDifference : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("soil_thermal_conductivity")]
public System.Nullable<float> SoilThermalConductivity { get; set; } = null;
        

[JsonProperty("soil_density")]
public System.Nullable<float> SoilDensity { get; set; } = null;
        

[JsonProperty("soil_specific_heat")]
public System.Nullable<float> SoilSpecificHeat { get; set; } = null;
        

[JsonProperty("soil_moisture_content_volume_fraction")]
public System.Nullable<float> SoilMoistureContentVolumeFraction { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_moisture_content_volume_fraction_at_saturation")]
public System.Nullable<float> SoilMoistureContentVolumeFractionAtSaturation { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[Description(@"This specifies the ground cover effects during evapotranspiration calculations. The value roughly represents the following cases: = 0   : concrete or other solid, non-permeable ground surface material = 0.5 : short grass, much like a manicured lawn = 1   : standard reference state (12 cm grass) = 1.5 : wild growth")]
[JsonProperty("evapotranspiration_ground_cover_parameter")]
public System.Nullable<float> EvapotranspirationGroundCoverParameter { get; set; } = (System.Nullable<float>)Single.Parse("0.4", CultureInfo.InvariantCulture);
    }
    
    [Description("Undisturbed ground temperature object using the Kusuda-Achenbach 1965 correlation" +
        ".")]
    [JsonObject("Site:GroundTemperature:Undisturbed:KusudaAchenbach")]
    public class Site_GroundTemperature_Undisturbed_KusudaAchenbach : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("soil_thermal_conductivity")]
public System.Nullable<float> SoilThermalConductivity { get; set; } = null;
        

[JsonProperty("soil_density")]
public System.Nullable<float> SoilDensity { get; set; } = null;
        

[JsonProperty("soil_specific_heat")]
public System.Nullable<float> SoilSpecificHeat { get; set; } = null;
        

[Description("Annual average surface temperature If left blank the Site:GroundTemperature:Shall" +
    "ow object must be included in the input The soil temperature, amplitude, and pha" +
    "se shift must all be included or omitted together")]
[JsonProperty("average_soil_surface_temperature")]
public System.Nullable<float> AverageSoilSurfaceTemperature { get; set; } = null;
        

[Description("Annual average surface temperature variation from average. If left blank the Site" +
    ":GroundTemperature:Shallow object must be included in the input The soil tempera" +
    "ture, amplitude, and phase shift must all be included or omitted together")]
[JsonProperty("average_amplitude_of_surface_temperature")]
public System.Nullable<float> AverageAmplitudeOfSurfaceTemperature { get; set; } = null;
        

[Description(@"The phase shift of minimum surface temperature, or the day of the year when the minimum surface temperature occurs. If left blank the Site:GroundTemperature:Shallow object must be included in the input The soil temperature, amplitude, and phase shift must all be included or omitted together")]
[JsonProperty("phase_shift_of_minimum_surface_temperature")]
public System.Nullable<float> PhaseShiftOfMinimumSurfaceTemperature { get; set; } = null;
    }
    
    [Description("Undisturbed ground temperature object using the Xing 2014 2 harmonic parameter mo" +
        "del.")]
    [JsonObject("Site:GroundTemperature:Undisturbed:Xing")]
    public class Site_GroundTemperature_Undisturbed_Xing : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("soil_thermal_conductivity")]
public System.Nullable<float> SoilThermalConductivity { get; set; } = null;
        

[JsonProperty("soil_density")]
public System.Nullable<float> SoilDensity { get; set; } = null;
        

[JsonProperty("soil_specific_heat")]
public System.Nullable<float> SoilSpecificHeat { get; set; } = null;
        

[JsonProperty("average_soil_surface_tempeature")]
public System.Nullable<float> AverageSoilSurfaceTempeature { get; set; } = null;
        

[JsonProperty("soil_surface_temperature_amplitude_1")]
public System.Nullable<float> SoilSurfaceTemperatureAmplitude1 { get; set; } = null;
        

[JsonProperty("soil_surface_temperature_amplitude_2")]
public System.Nullable<float> SoilSurfaceTemperatureAmplitude2 { get; set; } = null;
        

[JsonProperty("phase_shift_of_temperature_amplitude_1")]
public System.Nullable<float> PhaseShiftOfTemperatureAmplitude1 { get; set; } = null;
        

[JsonProperty("phase_shift_of_temperature_amplitude_2")]
public System.Nullable<float> PhaseShiftOfTemperatureAmplitude2 { get; set; } = null;
    }
    
    [Description("Ground-coupled slab model for on-grade and in-grade cases with or without insulat" +
        "ion.")]
    [JsonObject("Site:GroundDomain:Slab")]
    public class Site_GroundDomain_Slab : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("ground_domain_depth")]
public System.Nullable<float> GroundDomainDepth { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[JsonProperty("aspect_ratio")]
public System.Nullable<float> AspectRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("perimeter_offset")]
public System.Nullable<float> PerimeterOffset { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_thermal_conductivity")]
public System.Nullable<float> SoilThermalConductivity { get; set; } = (System.Nullable<float>)Single.Parse("1.5", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_density")]
public System.Nullable<float> SoilDensity { get; set; } = (System.Nullable<float>)Single.Parse("2800", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_specific_heat")]
public System.Nullable<float> SoilSpecificHeat { get; set; } = (System.Nullable<float>)Single.Parse("850", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_moisture_content_volume_fraction")]
public System.Nullable<float> SoilMoistureContentVolumeFraction { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_moisture_content_volume_fraction_at_saturation")]
public System.Nullable<float> SoilMoistureContentVolumeFractionAtSaturation { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[JsonProperty("undisturbed_ground_temperature_model_type")]
public Site_GroundDomain_Slab_UndisturbedGroundTemperatureModelType UndisturbedGroundTemperatureModelType { get; set; } = (Site_GroundDomain_Slab_UndisturbedGroundTemperatureModelType)Enum.Parse(typeof(Site_GroundDomain_Slab_UndisturbedGroundTemperatureModelType), "SiteGroundTemperatureUndisturbedFiniteDifference");
        

[JsonProperty("undisturbed_ground_temperature_model_name")]
public string UndisturbedGroundTemperatureModelName { get; set; } = "";
        

[Description(@"This specifies the ground cover effects during evapotranspiration calculations. The value roughly represents the following cases: = 0   : concrete or other solid, non-permeable ground surface material = 0.5 : short grass, much like a manicured lawn = 1   : standard reference state (12 cm grass) = 1.5 : wild growth")]
[JsonProperty("evapotranspiration_ground_cover_parameter")]
public System.Nullable<float> EvapotranspirationGroundCoverParameter { get; set; } = (System.Nullable<float>)Single.Parse("0.4", CultureInfo.InvariantCulture);
        

[JsonProperty("slab_boundary_condition_model_name")]
public string SlabBoundaryConditionModelName { get; set; } = "";
        

[Description("This field specifies whether the slab is located \"in-grade\" or \"on-grade\"")]
[JsonProperty("slab_location")]
public Site_GroundDomain_Slab_SlabLocation SlabLocation { get; set; } = (Site_GroundDomain_Slab_SlabLocation)Enum.Parse(typeof(Site_GroundDomain_Slab_SlabLocation), "InGrade");
        

[Description("Only applicable for the in-grade case")]
[JsonProperty("slab_material_name")]
public string SlabMaterialName { get; set; } = "";
        

[Description("This field specifies the presence of insulation beneath the slab. Only required f" +
    "or in-grade case.")]
[JsonProperty("horizontal_insulation")]
public EmptyNoYes HorizontalInsulation { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("This field specifies the horizontal insulation material.")]
[JsonProperty("horizontal_insulation_material_name")]
public string HorizontalInsulationMaterialName { get; set; } = "";
        

[Description("This field specifies whether the horizontal insulation fully insulates the surfac" +
    "e or is perimeter only insulation")]
[JsonProperty("horizontal_insulation_extents")]
public Site_GroundDomain_Slab_HorizontalInsulationExtents HorizontalInsulationExtents { get; set; } = (Site_GroundDomain_Slab_HorizontalInsulationExtents)Enum.Parse(typeof(Site_GroundDomain_Slab_HorizontalInsulationExtents), "Full");
        

[Description("This field specifies the width of the underfloor perimeter insulation")]
[JsonProperty("perimeter_insulation_width")]
public System.Nullable<float> PerimeterInsulationWidth { get; set; } = null;
        

[Description("This field specifies the presence of vertical insulation at the slab edge.")]
[JsonProperty("vertical_insulation")]
public EmptyNoYes VerticalInsulation { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("This field specifies the vertical insulation material.")]
[JsonProperty("vertical_insulation_material_name")]
public string VerticalInsulationMaterialName { get; set; } = "";
        

[Description("Only used when including vertical insulation This field specifies the depth of th" +
    "e vertical insulation")]
[JsonProperty("vertical_insulation_depth")]
public System.Nullable<float> VerticalInsulationDepth { get; set; } = null;
        

[Description("This field specifies the ground domain simulation timestep.")]
[JsonProperty("simulation_timestep")]
public Site_GroundDomain_Slab_SimulationTimestep SimulationTimestep { get; set; } = (Site_GroundDomain_Slab_SimulationTimestep)Enum.Parse(typeof(Site_GroundDomain_Slab_SimulationTimestep), "Hourly");
        

[JsonProperty("geometric_mesh_coefficient")]
public System.Nullable<float> GeometricMeshCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("1.6", CultureInfo.InvariantCulture);
        

[JsonProperty("mesh_density_parameter")]
public System.Nullable<float> MeshDensityParameter { get; set; } = (System.Nullable<float>)Single.Parse("6", CultureInfo.InvariantCulture);
    }
    
    public enum Site_GroundDomain_Slab_UndisturbedGroundTemperatureModelType
    {
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:FiniteDifference")]
        SiteGroundTemperatureUndisturbedFiniteDifference = 0,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:KusudaAchenbach")]
        SiteGroundTemperatureUndisturbedKusudaAchenbach = 1,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:Xing")]
        SiteGroundTemperatureUndisturbedXing = 2,
    }
    
    public enum Site_GroundDomain_Slab_SlabLocation
    {
        
        [JsonProperty("InGrade")]
        InGrade = 0,
        
        [JsonProperty("OnGrade")]
        OnGrade = 1,
    }
    
    public enum Site_GroundDomain_Slab_HorizontalInsulationExtents
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Full")]
        Full = 1,
        
        [JsonProperty("Perimeter")]
        Perimeter = 2,
    }
    
    public enum Site_GroundDomain_Slab_SimulationTimestep
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Hourly")]
        Hourly = 1,
        
        [JsonProperty("Timestep")]
        Timestep = 2,
    }
    
    [Description("Ground-coupled basement model for simulating basements or other underground zones" +
        ".")]
    [JsonObject("Site:GroundDomain:Basement")]
    public class Site_GroundDomain_Basement : BHoMObject, IEnergyPlusClass
    {
        

[Description("The depth from ground surface to the deep ground boundary of the domain.")]
[JsonProperty("ground_domain_depth")]
public System.Nullable<float> GroundDomainDepth { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("This defines the height to width ratio of the basement zone.")]
[JsonProperty("aspect_ratio")]
public System.Nullable<float> AspectRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("The distance from the basement wall edge to the edge of the ground domain")]
[JsonProperty("perimeter_offset")]
public System.Nullable<float> PerimeterOffset { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_thermal_conductivity")]
public System.Nullable<float> SoilThermalConductivity { get; set; } = (System.Nullable<float>)Single.Parse("1.5", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_density")]
public System.Nullable<float> SoilDensity { get; set; } = (System.Nullable<float>)Single.Parse("2800", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_specific_heat")]
public System.Nullable<float> SoilSpecificHeat { get; set; } = (System.Nullable<float>)Single.Parse("850", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_moisture_content_volume_fraction")]
public System.Nullable<float> SoilMoistureContentVolumeFraction { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_moisture_content_volume_fraction_at_saturation")]
public System.Nullable<float> SoilMoistureContentVolumeFractionAtSaturation { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[JsonProperty("undisturbed_ground_temperature_model_type")]
public Site_GroundDomain_Basement_UndisturbedGroundTemperatureModelType UndisturbedGroundTemperatureModelType { get; set; } = (Site_GroundDomain_Basement_UndisturbedGroundTemperatureModelType)Enum.Parse(typeof(Site_GroundDomain_Basement_UndisturbedGroundTemperatureModelType), "SiteGroundTemperatureUndisturbedFiniteDifference");
        

[JsonProperty("undisturbed_ground_temperature_model_name")]
public string UndisturbedGroundTemperatureModelName { get; set; } = "";
        

[Description(@"This specifies the ground cover effects during evapotranspiration calculations. The value roughly represents the following cases: = 0   : concrete or other solid, non-permeable ground surface material = 0.5 : short grass, much like a manicured lawn = 1   : standard reference state (12 cm grass) = 1.5 : wild growth")]
[JsonProperty("evapotranspiration_ground_cover_parameter")]
public System.Nullable<float> EvapotranspirationGroundCoverParameter { get; set; } = (System.Nullable<float>)Single.Parse("0.4", CultureInfo.InvariantCulture);
        

[JsonProperty("basement_floor_boundary_condition_model_name")]
public string BasementFloorBoundaryConditionModelName { get; set; } = "";
        

[Description("This field specifies the presence of insulation beneath the basement floor.")]
[JsonProperty("horizontal_insulation")]
public EmptyNoYes HorizontalInsulation { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("horizontal_insulation_material_name")]
public string HorizontalInsulationMaterialName { get; set; } = "";
        

[Description("This field specifies whether the horizontal insulation fully insulates the surfac" +
    "e or is perimeter only insulation")]
[JsonProperty("horizontal_insulation_extents")]
public Site_GroundDomain_Basement_HorizontalInsulationExtents HorizontalInsulationExtents { get; set; } = (Site_GroundDomain_Basement_HorizontalInsulationExtents)Enum.Parse(typeof(Site_GroundDomain_Basement_HorizontalInsulationExtents), "Full");
        

[Description("Width of horizontal perimeter insulation measured from foundation wall inside sur" +
    "face.")]
[JsonProperty("perimeter_horizontal_insulation_width")]
public System.Nullable<float> PerimeterHorizontalInsulationWidth { get; set; } = null;
        

[Description("Depth measured from ground surface.")]
[JsonProperty("basement_wall_depth")]
public System.Nullable<float> BasementWallDepth { get; set; } = null;
        

[JsonProperty("basement_wall_boundary_condition_model_name")]
public string BasementWallBoundaryConditionModelName { get; set; } = "";
        

[JsonProperty("vertical_insulation")]
public EmptyNoYes VerticalInsulation { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("basement_wall_vertical_insulation_material_name")]
public string BasementWallVerticalInsulationMaterialName { get; set; } = "";
        

[Description("Depth measured from the ground surface.")]
[JsonProperty("vertical_insulation_depth")]
public System.Nullable<float> VerticalInsulationDepth { get; set; } = null;
        

[Description("This field specifies the basement domain simulation interval.")]
[JsonProperty("simulation_timestep")]
public Site_GroundDomain_Basement_SimulationTimestep SimulationTimestep { get; set; } = (Site_GroundDomain_Basement_SimulationTimestep)Enum.Parse(typeof(Site_GroundDomain_Basement_SimulationTimestep), "Hourly");
        

[JsonProperty("mesh_density_parameter")]
public System.Nullable<float> MeshDensityParameter { get; set; } = (System.Nullable<float>)Single.Parse("4", CultureInfo.InvariantCulture);
    }
    
    public enum Site_GroundDomain_Basement_UndisturbedGroundTemperatureModelType
    {
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:FiniteDifference")]
        SiteGroundTemperatureUndisturbedFiniteDifference = 0,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:KusudaAchenbach")]
        SiteGroundTemperatureUndisturbedKusudaAchenbach = 1,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:Xing")]
        SiteGroundTemperatureUndisturbedXing = 2,
    }
    
    public enum Site_GroundDomain_Basement_HorizontalInsulationExtents
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Full")]
        Full = 1,
        
        [JsonProperty("Perimeter")]
        Perimeter = 2,
    }
    
    public enum Site_GroundDomain_Basement_SimulationTimestep
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Hourly")]
        Hourly = 1,
        
        [JsonProperty("Timestep")]
        Timestep = 2,
    }
    
    [Description("Specifies the ground reflectance values used to calculate ground reflected solar." +
        " The ground reflectance can be further modified when snow is on the ground by Si" +
        "te:GroundReflectance:SnowModifier.")]
    [JsonObject("Site:GroundReflectance")]
    public class Site_GroundReflectance : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("january_ground_reflectance")]
public System.Nullable<float> JanuaryGroundReflectance { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("february_ground_reflectance")]
public System.Nullable<float> FebruaryGroundReflectance { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("march_ground_reflectance")]
public System.Nullable<float> MarchGroundReflectance { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("april_ground_reflectance")]
public System.Nullable<float> AprilGroundReflectance { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("may_ground_reflectance")]
public System.Nullable<float> MayGroundReflectance { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("june_ground_reflectance")]
public System.Nullable<float> JuneGroundReflectance { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("july_ground_reflectance")]
public System.Nullable<float> JulyGroundReflectance { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("august_ground_reflectance")]
public System.Nullable<float> AugustGroundReflectance { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("september_ground_reflectance")]
public System.Nullable<float> SeptemberGroundReflectance { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("october_ground_reflectance")]
public System.Nullable<float> OctoberGroundReflectance { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("november_ground_reflectance")]
public System.Nullable<float> NovemberGroundReflectance { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("december_ground_reflectance")]
public System.Nullable<float> DecemberGroundReflectance { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
    }
    
    [Description("Specifies ground reflectance multipliers when snow resident on the ground. These " +
        "multipliers are applied to the \"normal\" ground reflectances specified in Site:Gr" +
        "oundReflectance.")]
    [JsonObject("Site:GroundReflectance:SnowModifier")]
    public class Site_GroundReflectance_SnowModifier : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Value for modifying the ""normal"" ground reflectance when Snow is on ground when calculating the ""Ground Reflected Solar Radiation Value"" a value of 1.0 here uses the ""normal"" ground reflectance Ground Reflected Solar = (BeamSolar*CosSunZenith + DiffuseSolar)*GroundReflectance This would be further modified by the Snow Ground Reflectance Modifier when Snow was on the ground When Snow on ground, effective GroundReflectance is normal GroundReflectance*""Ground Reflectance Snow Modifier"" Ground Reflectance achieved in this manner will be restricted to [0.0,1.0]")]
[JsonProperty("ground_reflected_solar_modifier")]
public System.Nullable<float> GroundReflectedSolarModifier { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description(@"Value for modifying the ""normal"" daylighting ground reflectance when Snow is on ground when calculating the ""Ground Reflected Solar Radiation Value"" a value of 1.0 here uses the ""normal"" ground reflectance Ground Reflected Solar = (BeamSolar*CosSunZenith + DiffuseSolar)*GroundReflectance This would be further modified by the Snow Ground Reflectance Modifier when Snow was on the ground When Snow on ground, effective GroundReflectance is normal GroundReflectance*""Daylighting Ground Reflectance Snow Modifier"" Ground Reflectance achieved in this manner will be restricted to [0.0,1.0]")]
[JsonProperty("daylighting_ground_reflected_solar_modifier")]
public System.Nullable<float> DaylightingGroundReflectedSolarModifier { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    [Description("Used to calculate water mains temperatures delivered by underground water main pi" +
        "pes. Water mains temperatures are a function of outdoor climate conditions and v" +
        "ary with time of year.")]
    [JsonObject("Site:WaterMainsTemperature")]
    public class Site_WaterMainsTemperature : BHoMObject, IEnergyPlusClass
    {
        

[Description("If calculation method is CorrelationFromWeatherFile, the two numeric input fields" +
    " are ignored. Instead, EnergyPlus calculates them from weather file.")]
[JsonProperty("calculation_method")]
public Site_WaterMainsTemperature_CalculationMethod CalculationMethod { get; set; } = (Site_WaterMainsTemperature_CalculationMethod)Enum.Parse(typeof(Site_WaterMainsTemperature_CalculationMethod), "CorrelationFromWeatherFile");
        

[JsonProperty("temperature_schedule_name")]
public string TemperatureScheduleName { get; set; } = "";
        

[Description("If calculation method is CorrelationFromWeatherFile or Schedule, this input field" +
    " is ignored.")]
[JsonProperty("annual_average_outdoor_air_temperature")]
public System.Nullable<float> AnnualAverageOutdoorAirTemperature { get; set; } = null;
        

[Description("If calculation method is CorrelationFromWeatherFile or Schedule, this input field" +
    " is ignored.")]
[JsonProperty("maximum_difference_in_monthly_average_outdoor_air_temperatures")]
public System.Nullable<float> MaximumDifferenceInMonthlyAverageOutdoorAirTemperatures { get; set; } = null;
    }
    
    public enum Site_WaterMainsTemperature_CalculationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Correlation")]
        Correlation = 1,
        
        [JsonProperty("CorrelationFromWeatherFile")]
        CorrelationFromWeatherFile = 2,
        
        [JsonProperty("Schedule")]
        Schedule = 3,
    }
    
    [Description("Used to describe the amount of water precipitation at the building site. Precipit" +
        "ation includes both rain and the equivalent water content of snow.")]
    [JsonObject("Site:Precipitation")]
    public class Site_Precipitation : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("precipitation_model_type")]
public Site_Precipitation_PrecipitationModelType PrecipitationModelType { get; set; } = (Site_Precipitation_PrecipitationModelType)Enum.Parse(typeof(Site_Precipitation_PrecipitationModelType), "ScheduleAndDesignLevel");
        

[Description("meters of water per year used for design level")]
[JsonProperty("design_level_for_total_annual_precipitation")]
public System.Nullable<float> DesignLevelForTotalAnnualPrecipitation { get; set; } = null;
        

[Description("Schedule values in meters of water per hour values should be non-negative")]
[JsonProperty("precipitation_rates_schedule_name")]
public string PrecipitationRatesScheduleName { get; set; } = "";
        

[Description("meters of water per year from average weather statistics")]
[JsonProperty("average_total_annual_precipitation")]
public System.Nullable<float> AverageTotalAnnualPrecipitation { get; set; } = null;
    }
    
    public enum Site_Precipitation_PrecipitationModelType
    {
        
        [JsonProperty("ScheduleAndDesignLevel")]
        ScheduleAndDesignLevel = 0,
    }
    
    [Description("Used to describe the amount of irrigation on the ecoroof surface over the course " +
        "of the simulation runperiod.")]
    [JsonObject("RoofIrrigation")]
    public class RoofIrrigation : BHoMObject, IEnergyPlusClass
    {
        

[Description("SmartSchedule will not allow irrigation when soil is already moist. Current thres" +
    "hold set at 30% of saturation.")]
[JsonProperty("irrigation_model_type")]
public RoofIrrigation_IrrigationModelType IrrigationModelType { get; set; } = (RoofIrrigation_IrrigationModelType)Enum.Parse(typeof(RoofIrrigation_IrrigationModelType), "Schedule");
        

[Description("Schedule values in meters of water per hour values should be non-negative")]
[JsonProperty("irrigation_rate_schedule_name")]
public string IrrigationRateScheduleName { get; set; } = "";
        

[Description("Used with SmartSchedule to set the saturation level at which no irrigation is all" +
    "owed.")]
[JsonProperty("irrigation_maximum_saturation_threshold")]
public System.Nullable<float> IrrigationMaximumSaturationThreshold { get; set; } = (System.Nullable<float>)Single.Parse("40", CultureInfo.InvariantCulture);
    }
    
    public enum RoofIrrigation_IrrigationModelType
    {
        
        [JsonProperty("Schedule")]
        Schedule = 0,
        
        [JsonProperty("SmartSchedule")]
        SmartSchedule = 1,
    }
    
    [Description("If this object is omitted, the default solar and visible spectrum data will be us" +
        "ed.")]
    [JsonObject("Site:SolarAndVisibleSpectrum")]
    public class Site_SolarAndVisibleSpectrum : BHoMObject, IEnergyPlusClass
    {
        

[Description("The method specifies which of the solar and visible spectrum data to use in the c" +
    "alculations. Choices: Default - existing hard-wired spectrum data in EnergyPlus." +
    " UserDefined - user specified spectrum data referenced by the next two fields")]
[JsonProperty("spectrum_data_method")]
public Site_SolarAndVisibleSpectrum_SpectrumDataMethod SpectrumDataMethod { get; set; } = (Site_SolarAndVisibleSpectrum_SpectrumDataMethod)Enum.Parse(typeof(Site_SolarAndVisibleSpectrum_SpectrumDataMethod), "Default");
        

[JsonProperty("solar_spectrum_data_object_name")]
public string SolarSpectrumDataObjectName { get; set; } = "";
        

[JsonProperty("visible_spectrum_data_object_name")]
public string VisibleSpectrumDataObjectName { get; set; } = "";
    }
    
    public enum Site_SolarAndVisibleSpectrum_SpectrumDataMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Default")]
        Default = 1,
        
        [JsonProperty("UserDefined")]
        UserDefined = 2,
    }
    
    [Description("Spectrum Data Type is followed by up to 107 sets of normal-incidence measured val" +
        "ues of [wavelength, spectrum] for wavelengths covering the solar (0.25 to 2.5 mi" +
        "crons) or visible spectrum (0.38 to 0.78 microns)")]
    [JsonObject("Site:SpectrumData")]
    public class Site_SpectrumData : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("spectrum_data_type")]
public Site_SpectrumData_SpectrumDataType SpectrumDataType { get; set; } = (Site_SpectrumData_SpectrumDataType)Enum.Parse(typeof(Site_SpectrumData_SpectrumDataType), "Solar");
        

[JsonProperty("wavelength")]
public System.Nullable<float> Wavelength { get; set; } = null;
        

[JsonProperty("spectrum")]
public System.Nullable<float> Spectrum { get; set; } = null;
        

[JsonProperty("wavelength_1")]
public System.Nullable<float> Wavelength1 { get; set; } = null;
        

[JsonProperty("spectrum_2")]
public System.Nullable<float> Spectrum2 { get; set; } = null;
        

[JsonProperty("extensions")]
public string Extensions { get; set; } = "";
    }
    
    public enum Site_SpectrumData_SpectrumDataType
    {
        
        [JsonProperty("Solar")]
        Solar = 0,
        
        [JsonProperty("Visible")]
        Visible = 1,
    }
}
namespace BH.oM.Adapters.EnergyPlus.NodeBranchManagement
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("List components on the branch in simulation and connection order Note: this shoul" +
        "d NOT include splitters or mixers which define endpoints of branches")]
    [JsonObject("Branch")]
    public class Branch : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Optional field to include this branch in plant pressure drop calculations This field is only relevant for branches in PlantLoops and CondenserLoops Air loops do not account for pressure drop using this field Valid curve types are: Curve:Functional:PressureDrop or one of Curve:{Linear,Quadratic,Cubic,Exponent}')")]
[JsonProperty("pressure_drop_curve_name")]
public string PressureDropCurveName { get; set; } = "";
        

[JsonProperty("components")]
public string Components { get; set; } = "";
    }
    
    [Description("Branches MUST be listed in Flow order: Inlet branch, then parallel branches, then" +
        " Outlet branch. Branches are simulated in the order listed. Branch names cannot " +
        "be duplicated within a single branch list.")]
    [JsonObject("BranchList")]
    public class BranchList : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("branches")]
public string Branches { get; set; } = "";
    }
    
    [Description("Split one air/water stream into N outlet streams. Branch names cannot be duplicat" +
        "ed within a single Splitter list.")]
    [JsonObject("Connector:Splitter")]
    public class Connector_Splitter : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("inlet_branch_name")]
public string InletBranchName { get; set; } = "";
        

[JsonProperty("branches")]
public string Branches { get; set; } = "";
    }
    
    [Description("Mix N inlet air/water streams into one. Branch names cannot be duplicated within " +
        "a single mixer list.")]
    [JsonObject("Connector:Mixer")]
    public class Connector_Mixer : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("outlet_branch_name")]
public string OutletBranchName { get; set; } = "";
        

[JsonProperty("branches")]
public string Branches { get; set; } = "";
    }
    
    [Description("only two connectors allowed per loop if two entered, one must be Connector:Splitt" +
        "er and one must be Connector:Mixer")]
    [JsonObject("ConnectorList")]
    public class ConnectorList : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("connector_1_object_type")]
public ConnectorList_Connector1ObjectType Connector1ObjectType { get; set; } = (ConnectorList_Connector1ObjectType)Enum.Parse(typeof(ConnectorList_Connector1ObjectType), "ConnectorMixer");
        

[JsonProperty("connector_1_name")]
public string Connector1Name { get; set; } = "";
        

[JsonProperty("connector_2_object_type")]
public ConnectorList_Connector2ObjectType Connector2ObjectType { get; set; } = (ConnectorList_Connector2ObjectType)Enum.Parse(typeof(ConnectorList_Connector2ObjectType), "ConnectorMixer");
        

[JsonProperty("connector_2_name")]
public string Connector2Name { get; set; } = "";
    }
    
    public enum ConnectorList_Connector1ObjectType
    {
        
        [JsonProperty("Connector:Mixer")]
        ConnectorMixer = 0,
        
        [JsonProperty("Connector:Splitter")]
        ConnectorSplitter = 1,
    }
    
    public enum ConnectorList_Connector2ObjectType
    {
        
        [JsonProperty("Connector:Mixer")]
        ConnectorMixer = 0,
        
        [JsonProperty("Connector:Splitter")]
        ConnectorSplitter = 1,
    }
    
    [Description("This object is used in places where lists of nodes may be needed, e.g. ZoneHVAC:E" +
        "quipmentConnections field Zone Air Inlet Node or NodeList Name")]
    [JsonObject("NodeList")]
    public class NodeList : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("nodes")]
public string Nodes { get; set; } = "";
    }
    
    [Description(@"This object sets the temperature and humidity conditions for an outdoor air node. It allows the height above ground to be specified. This object may be used more than once. The same node name may not appear in both an OutdoorAir:Node object and an OutdoorAir:NodeList object. This object defines local outdoor air environmental conditions.")]
    [JsonObject("OutdoorAir:Node")]
    public class OutdoorAir_Node : BHoMObject, IEnergyPlusClass
    {
        

[Description("A value less than zero indicates that the height will be ignored and the weather " +
    "file conditions will be used.")]
[JsonProperty("height_above_ground")]
public System.Nullable<float> HeightAboveGround { get; set; } = (System.Nullable<float>)Single.Parse("-1", CultureInfo.InvariantCulture);
        

[Description("Schedule values are real numbers, -100.0 to 100.0, units C")]
[JsonProperty("drybulb_temperature_schedule_name")]
public string DrybulbTemperatureScheduleName { get; set; } = "";
        

[Description("Schedule values are real numbers, -100.0 to 100.0, units C")]
[JsonProperty("wetbulb_temperature_schedule_name")]
public string WetbulbTemperatureScheduleName { get; set; } = "";
        

[Description("Schedule values are real numbers, 0.0 to 40.0, units m/s")]
[JsonProperty("wind_speed_schedule_name")]
public string WindSpeedScheduleName { get; set; } = "";
        

[Description("Schedule values are real numbers, 0.0 to 360.0, units degree")]
[JsonProperty("wind_direction_schedule_name")]
public string WindDirectionScheduleName { get; set; } = "";
        

[Description("The name of the AirflowNetwork:MultiZone:WindPressureCoefficientValues, curve, or" +
    " table object specifying the wind pressure coefficient.")]
[JsonProperty("wind_pressure_coefficient_curve_name")]
public string WindPressureCoefficientCurveName { get; set; } = "";
        

[Description("Specify whether the pressure curve is symmetric or not. Specify Yes for curves th" +
    "at should be evaluated from 0 to 180 degrees Specify No for curves that should b" +
    "e evaluated from 0 to 360 degrees")]
[JsonProperty("symmetric_wind_pressure_coefficient_curve")]
public EmptyNoYes SymmetricWindPressureCoefficientCurve { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Specify whether the angle used to compute the wind pressure coefficient is absolu" +
    "te or relative Specify Relative to compute the angle between the wind direction " +
    "and the surface azimuth Specify Absolute to use the wind direction angle directl" +
    "y")]
[JsonProperty("wind_angle_type")]
public OutdoorAir_Node_WindAngleType WindAngleType { get; set; } = (OutdoorAir_Node_WindAngleType)Enum.Parse(typeof(OutdoorAir_Node_WindAngleType), "Absolute");
    }
    
    public enum OutdoorAir_Node_WindAngleType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Absolute")]
        Absolute = 1,
        
        [JsonProperty("Relative")]
        Relative = 2,
    }
    
    [Description(@"This object sets the temperature and humidity conditions for an outdoor air node using the weather data values. to vary outdoor air node conditions with height above ground use OutdoorAir:Node instead of this object. This object may be used more than once. The same node name may not appear in both an OutdoorAir:Node object and an OutdoorAir:NodeList object.")]
    [JsonObject("OutdoorAir:NodeList")]
    public class OutdoorAir_NodeList : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("nodes")]
public string Nodes { get; set; } = "";
    }
    
    [Description("Passes Inlet Node state variables to Outlet Node state variables")]
    [JsonObject("Pipe:Adiabatic")]
    public class Pipe_Adiabatic : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
    }
    
    [Description("Passes Inlet Node state variables to Outlet Node state variables")]
    [JsonObject("Pipe:Adiabatic:Steam")]
    public class Pipe_Adiabatic_Steam : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
    }
    
    [Description("Pipe model with transport delay and heat transfer to the environment.")]
    [JsonObject("Pipe:Indoor")]
    public class Pipe_Indoor : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[JsonProperty("fluid_inlet_node_name")]
public string FluidInletNodeName { get; set; } = "";
        

[JsonProperty("fluid_outlet_node_name")]
public string FluidOutletNodeName { get; set; } = "";
        

[JsonProperty("environment_type")]
public Pipe_Indoor_EnvironmentType EnvironmentType { get; set; } = (Pipe_Indoor_EnvironmentType)Enum.Parse(typeof(Pipe_Indoor_EnvironmentType), "Zone");
        

[JsonProperty("ambient_temperature_zone_name")]
public string AmbientTemperatureZoneName { get; set; } = "";
        

[JsonProperty("ambient_temperature_schedule_name")]
public string AmbientTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("ambient_air_velocity_schedule_name")]
public string AmbientAirVelocityScheduleName { get; set; } = "";
        

[JsonProperty("pipe_inside_diameter")]
public System.Nullable<float> PipeInsideDiameter { get; set; } = null;
        

[JsonProperty("pipe_length")]
public System.Nullable<float> PipeLength { get; set; } = null;
    }
    
    public enum Pipe_Indoor_EnvironmentType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Schedule")]
        Schedule = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    [Description("Pipe model with transport delay and heat transfer to the environment.")]
    [JsonObject("Pipe:Outdoor")]
    public class Pipe_Outdoor : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[JsonProperty("fluid_inlet_node_name")]
public string FluidInletNodeName { get; set; } = "";
        

[JsonProperty("fluid_outlet_node_name")]
public string FluidOutletNodeName { get; set; } = "";
        

[JsonProperty("ambient_temperature_outdoor_air_node_name")]
public string AmbientTemperatureOutdoorAirNodeName { get; set; } = "";
        

[JsonProperty("pipe_inside_diameter")]
public System.Nullable<float> PipeInsideDiameter { get; set; } = null;
        

[JsonProperty("pipe_length")]
public System.Nullable<float> PipeLength { get; set; } = null;
    }
    
    [Description("Buried Pipe model: For pipes buried at a depth less than one meter, this is an al" +
        "ternative object to: HeatExchanger:Surface")]
    [JsonObject("Pipe:Underground")]
    public class Pipe_Underground : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[JsonProperty("fluid_inlet_node_name")]
public string FluidInletNodeName { get; set; } = "";
        

[JsonProperty("fluid_outlet_node_name")]
public string FluidOutletNodeName { get; set; } = "";
        

[JsonProperty("sun_exposure")]
public Pipe_Underground_SunExposure SunExposure { get; set; } = (Pipe_Underground_SunExposure)Enum.Parse(typeof(Pipe_Underground_SunExposure), "NoSun");
        

[Description("pipe thickness is defined in the Construction object")]
[JsonProperty("pipe_inside_diameter")]
public System.Nullable<float> PipeInsideDiameter { get; set; } = null;
        

[JsonProperty("pipe_length")]
public System.Nullable<float> PipeLength { get; set; } = null;
        

[JsonProperty("soil_material_name")]
public string SoilMaterialName { get; set; } = "";
        

[JsonProperty("undisturbed_ground_temperature_model_type")]
public Pipe_Underground_UndisturbedGroundTemperatureModelType UndisturbedGroundTemperatureModelType { get; set; } = (Pipe_Underground_UndisturbedGroundTemperatureModelType)Enum.Parse(typeof(Pipe_Underground_UndisturbedGroundTemperatureModelType), "SiteGroundTemperatureUndisturbedFiniteDifference");
        

[JsonProperty("undisturbed_ground_temperature_model_name")]
public string UndisturbedGroundTemperatureModelName { get; set; } = "";
    }
    
    public enum Pipe_Underground_SunExposure
    {
        
        [JsonProperty("NoSun")]
        NoSun = 0,
        
        [JsonProperty("SunExposed")]
        SunExposed = 1,
    }
    
    public enum Pipe_Underground_UndisturbedGroundTemperatureModelType
    {
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:FiniteDifference")]
        SiteGroundTemperatureUndisturbedFiniteDifference = 0,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:KusudaAchenbach")]
        SiteGroundTemperatureUndisturbedKusudaAchenbach = 1,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:Xing")]
        SiteGroundTemperatureUndisturbedXing = 2,
    }
    
    [Description("The ground domain object for underground piping system simulation.")]
    [JsonObject("PipingSystem:Underground:Domain")]
    public class PipingSystem_Underground_Domain : BHoMObject, IEnergyPlusClass
    {
        

[Description("Domain extent in the local \'X\' direction")]
[JsonProperty("xmax")]
public System.Nullable<float> Xmax { get; set; } = null;
        

[Description("Domain extent in the local \'Y\' direction")]
[JsonProperty("ymax")]
public System.Nullable<float> Ymax { get; set; } = null;
        

[Description("Domain extent in the local \'Y\' direction")]
[JsonProperty("zmax")]
public System.Nullable<float> Zmax { get; set; } = null;
        

[Description("If mesh type is symmetric geometric, this should be an even number.")]
[JsonProperty("x_direction_mesh_density_parameter")]
public System.Nullable<float> XDirectionMeshDensityParameter { get; set; } = (System.Nullable<float>)Single.Parse("4", CultureInfo.InvariantCulture);
        

[JsonProperty("x_direction_mesh_type")]
public PipingSystem_Underground_Domain_XDirectionMeshType XDirectionMeshType { get; set; } = (PipingSystem_Underground_Domain_XDirectionMeshType)Enum.Parse(typeof(PipingSystem_Underground_Domain_XDirectionMeshType), "SymmetricGeometric");
        

[Description("optional Only used if mesh type is symmetric geometric")]
[JsonProperty("x_direction_geometric_coefficient")]
public System.Nullable<float> XDirectionGeometricCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("1.3", CultureInfo.InvariantCulture);
        

[Description("If mesh type is symmetric geometric, this should be an even number.")]
[JsonProperty("y_direction_mesh_density_parameter")]
public System.Nullable<float> YDirectionMeshDensityParameter { get; set; } = (System.Nullable<float>)Single.Parse("4", CultureInfo.InvariantCulture);
        

[JsonProperty("y_direction_mesh_type")]
public PipingSystem_Underground_Domain_YDirectionMeshType YDirectionMeshType { get; set; } = (PipingSystem_Underground_Domain_YDirectionMeshType)Enum.Parse(typeof(PipingSystem_Underground_Domain_YDirectionMeshType), "SymmetricGeometric");
        

[Description("optional Only used if mesh type is symmetric geometric")]
[JsonProperty("y_direction_geometric_coefficient")]
public System.Nullable<float> YDirectionGeometricCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("1.3", CultureInfo.InvariantCulture);
        

[Description("If mesh type is symmetric geometric, this should be an even number.")]
[JsonProperty("z_direction_mesh_density_parameter")]
public System.Nullable<float> ZDirectionMeshDensityParameter { get; set; } = (System.Nullable<float>)Single.Parse("4", CultureInfo.InvariantCulture);
        

[JsonProperty("z_direction_mesh_type")]
public PipingSystem_Underground_Domain_ZDirectionMeshType ZDirectionMeshType { get; set; } = (PipingSystem_Underground_Domain_ZDirectionMeshType)Enum.Parse(typeof(PipingSystem_Underground_Domain_ZDirectionMeshType), "SymmetricGeometric");
        

[Description("optional Only used if mesh type is symmetric geometric")]
[JsonProperty("z_direction_geometric_coefficient")]
public System.Nullable<float> ZDirectionGeometricCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("1.3", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_thermal_conductivity")]
public System.Nullable<float> SoilThermalConductivity { get; set; } = null;
        

[JsonProperty("soil_density")]
public System.Nullable<float> SoilDensity { get; set; } = null;
        

[Description("This is a dry soil property, which is adjusted for freezing effects by the simula" +
    "tion algorithm.")]
[JsonProperty("soil_specific_heat")]
public System.Nullable<float> SoilSpecificHeat { get; set; } = null;
        

[JsonProperty("soil_moisture_content_volume_fraction")]
public System.Nullable<float> SoilMoistureContentVolumeFraction { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_moisture_content_volume_fraction_at_saturation")]
public System.Nullable<float> SoilMoistureContentVolumeFractionAtSaturation { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[JsonProperty("undisturbed_ground_temperature_model_type")]
public PipingSystem_Underground_Domain_UndisturbedGroundTemperatureModelType UndisturbedGroundTemperatureModelType { get; set; } = (PipingSystem_Underground_Domain_UndisturbedGroundTemperatureModelType)Enum.Parse(typeof(PipingSystem_Underground_Domain_UndisturbedGroundTemperatureModelType), "SiteGroundTemperatureUndisturbedFiniteDifference");
        

[JsonProperty("undisturbed_ground_temperature_model_name")]
public string UndisturbedGroundTemperatureModelName { get; set; } = "";
        

[Description("if Yes, then the following basement inputs are used if No, then the following bas" +
    "ement inputs are *ignored*")]
[JsonProperty("this_domain_includes_basement_surface_interaction")]
public EmptyNoYes ThisDomainIncludesBasementSurfaceInteraction { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Required only if Domain Has Basement Interaction")]
[JsonProperty("width_of_basement_floor_in_ground_domain")]
public System.Nullable<float> WidthOfBasementFloorInGroundDomain { get; set; } = null;
        

[Description("Required only if Domain Has Basement Interaction")]
[JsonProperty("depth_of_basement_wall_in_ground_domain")]
public System.Nullable<float> DepthOfBasementWallInGroundDomain { get; set; } = null;
        

[Description("Required only if Domain Has Basement Interaction")]
[JsonProperty("shift_pipe_x_coordinates_by_basement_width")]
public PipingSystem_Underground_Domain_ShiftPipeXCoordinatesByBasementWidth ShiftPipeXCoordinatesByBasementWidth { get; set; } = (PipingSystem_Underground_Domain_ShiftPipeXCoordinatesByBasementWidth)Enum.Parse(typeof(PipingSystem_Underground_Domain_ShiftPipeXCoordinatesByBasementWidth), "No");
        

[Description("Required only if Domain Has Basement Interaction")]
[JsonProperty("name_of_basement_wall_boundary_condition_model")]
public string NameOfBasementWallBoundaryConditionModel { get; set; } = "";
        

[Description("Required only if Domain Has Basement Interaction")]
[JsonProperty("name_of_basement_floor_boundary_condition_model")]
public string NameOfBasementFloorBoundaryConditionModel { get; set; } = "";
        

[JsonProperty("convergence_criterion_for_the_outer_cartesian_domain_iteration_loop")]
public System.Nullable<float> ConvergenceCriterionForTheOuterCartesianDomainIterationLoop { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_iterations_in_the_outer_cartesian_domain_iteration_loop")]
public System.Nullable<float> MaximumIterationsInTheOuterCartesianDomainIterationLoop { get; set; } = (System.Nullable<float>)Single.Parse("500", CultureInfo.InvariantCulture);
        

[Description(@"This specifies the ground cover effects during evapotranspiration calculations. The value roughly represents the following cases: = 0   : concrete or other solid, non-permeable ground surface material = 0.5 : short grass, much like a manicured lawn = 1   : standard reference state (12 cm grass) = 1.5 : wild growth")]
[JsonProperty("evapotranspiration_ground_cover_parameter")]
public System.Nullable<float> EvapotranspirationGroundCoverParameter { get; set; } = (System.Nullable<float>)Single.Parse("0.4", CultureInfo.InvariantCulture);
        

[JsonProperty("number_of_pipe_circuits_entered_for_this_domain")]
public System.Nullable<float> NumberOfPipeCircuitsEnteredForThisDomain { get; set; } = null;
        

[JsonProperty("pipe_circuits")]
public string PipeCircuits { get; set; } = "";
    }
    
    public enum PipingSystem_Underground_Domain_XDirectionMeshType
    {
        
        [JsonProperty("SymmetricGeometric")]
        SymmetricGeometric = 0,
        
        [JsonProperty("Uniform")]
        Uniform = 1,
    }
    
    public enum PipingSystem_Underground_Domain_YDirectionMeshType
    {
        
        [JsonProperty("SymmetricGeometric")]
        SymmetricGeometric = 0,
        
        [JsonProperty("Uniform")]
        Uniform = 1,
    }
    
    public enum PipingSystem_Underground_Domain_ZDirectionMeshType
    {
        
        [JsonProperty("SymmetricGeometric")]
        SymmetricGeometric = 0,
        
        [JsonProperty("Uniform")]
        Uniform = 1,
    }
    
    public enum PipingSystem_Underground_Domain_UndisturbedGroundTemperatureModelType
    {
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:FiniteDifference")]
        SiteGroundTemperatureUndisturbedFiniteDifference = 0,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:KusudaAchenbach")]
        SiteGroundTemperatureUndisturbedKusudaAchenbach = 1,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:Xing")]
        SiteGroundTemperatureUndisturbedXing = 2,
    }
    
    public enum PipingSystem_Underground_Domain_ShiftPipeXCoordinatesByBasementWidth
    {
        
        [JsonProperty("No")]
        No = 0,
        
        [JsonProperty("Yes")]
        Yes = 1,
    }
    
    [Description("The pipe circuit object in an underground piping system. This object is simulated" +
        " within an underground piping domain object and connected on a branch on a plant" +
        " loop.")]
    [JsonObject("PipingSystem:Underground:PipeCircuit")]
    public class PipingSystem_Underground_PipeCircuit : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("pipe_thermal_conductivity")]
public System.Nullable<float> PipeThermalConductivity { get; set; } = null;
        

[JsonProperty("pipe_density")]
public System.Nullable<float> PipeDensity { get; set; } = null;
        

[JsonProperty("pipe_specific_heat")]
public System.Nullable<float> PipeSpecificHeat { get; set; } = null;
        

[JsonProperty("pipe_inner_diameter")]
public System.Nullable<float> PipeInnerDiameter { get; set; } = null;
        

[JsonProperty("pipe_outer_diameter")]
public System.Nullable<float> PipeOuterDiameter { get; set; } = null;
        

[JsonProperty("design_flow_rate")]
public System.Nullable<float> DesignFlowRate { get; set; } = null;
        

[JsonProperty("circuit_inlet_node")]
public string CircuitInletNode { get; set; } = "";
        

[JsonProperty("circuit_outlet_node")]
public string CircuitOutletNode { get; set; } = "";
        

[JsonProperty("convergence_criterion_for_the_inner_radial_iteration_loop")]
public System.Nullable<float> ConvergenceCriterionForTheInnerRadialIterationLoop { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_iterations_in_the_inner_radial_iteration_loop")]
public System.Nullable<float> MaximumIterationsInTheInnerRadialIterationLoop { get; set; } = (System.Nullable<float>)Single.Parse("500", CultureInfo.InvariantCulture);
        

[JsonProperty("number_of_soil_nodes_in_the_inner_radial_near_pipe_mesh_region")]
public System.Nullable<float> NumberOfSoilNodesInTheInnerRadialNearPipeMeshRegion { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description("Required because it must be selected by user instead of being inferred from circu" +
    "it/domain object inputs.")]
[JsonProperty("radial_thickness_of_inner_radial_near_pipe_mesh_region")]
public System.Nullable<float> RadialThicknessOfInnerRadialNearPipeMeshRegion { get; set; } = null;
        

[JsonProperty("number_of_pipe_segments_entered_for_this_pipe_circuit")]
public System.Nullable<float> NumberOfPipeSegmentsEnteredForThisPipeCircuit { get; set; } = null;
        

[JsonProperty("pipe_segments")]
public string PipeSegments { get; set; } = "";
    }
    
    [Description("The pipe segment to be used in an underground piping system This object represent" +
        "s a single pipe leg positioned axially in the local z-direction, at a given x, y" +
        " location in the domain")]
    [JsonObject("PipingSystem:Underground:PipeSegment")]
    public class PipingSystem_Underground_PipeSegment : BHoMObject, IEnergyPlusClass
    {
        

[Description("This segment will be centered at this distance from the x=0 domain surface or the" +
    " basement wall surface, based on whether a basement exists in this domain and th" +
    "e selection of the shift input field found in the domain object.")]
[JsonProperty("x_position")]
public System.Nullable<float> XPosition { get; set; } = null;
        

[Description("This segment will be centered at this distance away from the ground surface; thus" +
    " this value represents the burial depth of this pipe segment.")]
[JsonProperty("y_position")]
public System.Nullable<float> YPosition { get; set; } = null;
        

[Description("This segment will be simulated such that the flow is in the selected direction. T" +
    "his can allow for detailed analysis of circuiting effects in a single domain.")]
[JsonProperty("flow_direction")]
public PipingSystem_Underground_PipeSegment_FlowDirection FlowDirection { get; set; } = (PipingSystem_Underground_PipeSegment_FlowDirection)Enum.Parse(typeof(PipingSystem_Underground_PipeSegment_FlowDirection), "DecreasingZ");
    }
    
    public enum PipingSystem_Underground_PipeSegment_FlowDirection
    {
        
        [JsonProperty("DecreasingZ")]
        DecreasingZ = 0,
        
        [JsonProperty("IncreasingZ")]
        IncreasingZ = 1,
    }
    
    [Description("Passes inlet node state variables to outlet node state variables")]
    [JsonObject("Duct")]
    public class Duct : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
    }
}
namespace BH.oM.Adapters.EnergyPlus.NonZoneEquipment
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Used to simulate a scheduled plant loop demand profile. Load and flow rate are specified using schedules. Positive values are heating loads, and negative values are cooling loads. The actual load met is dependent on the performance of the supply loop components.")]
    [JsonObject("LoadProfile:Plant")]
    public class LoadProfile_Plant : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[Description("Schedule values are load in [W]")]
[JsonProperty("load_schedule_name")]
public string LoadScheduleName { get; set; } = "";
        

[JsonProperty("peak_flow_rate")]
public System.Nullable<float> PeakFlowRate { get; set; } = null;
        

[JsonProperty("flow_rate_fraction_schedule_name")]
public string FlowRateFractionScheduleName { get; set; } = "";
    }
}
namespace BH.oM.Adapters.EnergyPlus.OperationalFaults
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("This object describes outdoor air temperature sensor offset")]
    [JsonObject("FaultModel:TemperatureSensorOffset:OutdoorAir")]
    public class FaultModel_TemperatureSensorOffset_OutdoorAir : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("severity_schedule_name")]
public string SeverityScheduleName { get; set; } = "";
        

[JsonProperty("controller_object_type")]
public FaultModel_TemperatureSensorOffset_OutdoorAir_ControllerObjectType ControllerObjectType { get; set; } = (FaultModel_TemperatureSensorOffset_OutdoorAir_ControllerObjectType)Enum.Parse(typeof(FaultModel_TemperatureSensorOffset_OutdoorAir_ControllerObjectType), "ControllerOutdoorAir");
        

[JsonProperty("controller_object_name")]
public string ControllerObjectName { get; set; } = "";
        

[JsonProperty("temperature_sensor_offset")]
public System.Nullable<float> TemperatureSensorOffset { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum FaultModel_TemperatureSensorOffset_OutdoorAir_ControllerObjectType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
    }
    
    [Description("This object describes outdoor air humidity sensor offset")]
    [JsonObject("FaultModel:HumiditySensorOffset:OutdoorAir")]
    public class FaultModel_HumiditySensorOffset_OutdoorAir : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("severity_schedule_name")]
public string SeverityScheduleName { get; set; } = "";
        

[JsonProperty("controller_object_type")]
public FaultModel_HumiditySensorOffset_OutdoorAir_ControllerObjectType ControllerObjectType { get; set; } = (FaultModel_HumiditySensorOffset_OutdoorAir_ControllerObjectType)Enum.Parse(typeof(FaultModel_HumiditySensorOffset_OutdoorAir_ControllerObjectType), "ControllerOutdoorAir");
        

[JsonProperty("controller_object_name")]
public string ControllerObjectName { get; set; } = "";
        

[JsonProperty("humidity_sensor_offset")]
public System.Nullable<float> HumiditySensorOffset { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum FaultModel_HumiditySensorOffset_OutdoorAir_ControllerObjectType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
    }
    
    [Description("This object describes outdoor air enthalpy sensor offset")]
    [JsonObject("FaultModel:EnthalpySensorOffset:OutdoorAir")]
    public class FaultModel_EnthalpySensorOffset_OutdoorAir : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("severity_schedule_name")]
public string SeverityScheduleName { get; set; } = "";
        

[JsonProperty("controller_object_type")]
public FaultModel_EnthalpySensorOffset_OutdoorAir_ControllerObjectType ControllerObjectType { get; set; } = (FaultModel_EnthalpySensorOffset_OutdoorAir_ControllerObjectType)Enum.Parse(typeof(FaultModel_EnthalpySensorOffset_OutdoorAir_ControllerObjectType), "ControllerOutdoorAir");
        

[JsonProperty("controller_object_name")]
public string ControllerObjectName { get; set; } = "";
        

[JsonProperty("enthalpy_sensor_offset")]
public System.Nullable<float> EnthalpySensorOffset { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum FaultModel_EnthalpySensorOffset_OutdoorAir_ControllerObjectType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
    }
    
    [Description("This object describes return air temperature sensor offset")]
    [JsonObject("FaultModel:TemperatureSensorOffset:ReturnAir")]
    public class FaultModel_TemperatureSensorOffset_ReturnAir : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("severity_schedule_name")]
public string SeverityScheduleName { get; set; } = "";
        

[JsonProperty("controller_object_type")]
public FaultModel_TemperatureSensorOffset_ReturnAir_ControllerObjectType ControllerObjectType { get; set; } = (FaultModel_TemperatureSensorOffset_ReturnAir_ControllerObjectType)Enum.Parse(typeof(FaultModel_TemperatureSensorOffset_ReturnAir_ControllerObjectType), "ControllerOutdoorAir");
        

[JsonProperty("controller_object_name")]
public string ControllerObjectName { get; set; } = "";
        

[JsonProperty("temperature_sensor_offset")]
public System.Nullable<float> TemperatureSensorOffset { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum FaultModel_TemperatureSensorOffset_ReturnAir_ControllerObjectType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
    }
    
    [Description("This object describes return air enthalpy sensor offset")]
    [JsonObject("FaultModel:EnthalpySensorOffset:ReturnAir")]
    public class FaultModel_EnthalpySensorOffset_ReturnAir : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("severity_schedule_name")]
public string SeverityScheduleName { get; set; } = "";
        

[JsonProperty("controller_object_type")]
public FaultModel_EnthalpySensorOffset_ReturnAir_ControllerObjectType ControllerObjectType { get; set; } = (FaultModel_EnthalpySensorOffset_ReturnAir_ControllerObjectType)Enum.Parse(typeof(FaultModel_EnthalpySensorOffset_ReturnAir_ControllerObjectType), "ControllerOutdoorAir");
        

[JsonProperty("controller_object_name")]
public string ControllerObjectName { get; set; } = "";
        

[JsonProperty("enthalpy_sensor_offset")]
public System.Nullable<float> EnthalpySensorOffset { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum FaultModel_EnthalpySensorOffset_ReturnAir_ControllerObjectType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
    }
    
    [Description("This object describes fault of chiller supply water temperature sensor offset")]
    [JsonObject("FaultModel:TemperatureSensorOffset:ChillerSupplyWater")]
    public class FaultModel_TemperatureSensorOffset_ChillerSupplyWater : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("severity_schedule_name")]
public string SeverityScheduleName { get; set; } = "";
        

[Description("Enter the type of a chiller object")]
[JsonProperty("chiller_object_type")]
public FaultModel_TemperatureSensorOffset_ChillerSupplyWater_ChillerObjectType ChillerObjectType { get; set; } = (FaultModel_TemperatureSensorOffset_ChillerSupplyWater_ChillerObjectType)Enum.Parse(typeof(FaultModel_TemperatureSensorOffset_ChillerSupplyWater_ChillerObjectType), "ChillerAbsorption");
        

[Description("Enter the name of a chiller object")]
[JsonProperty("chiller_object_name")]
public string ChillerObjectName { get; set; } = "";
        

[JsonProperty("reference_sensor_offset")]
public System.Nullable<float> ReferenceSensorOffset { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum FaultModel_TemperatureSensorOffset_ChillerSupplyWater_ChillerObjectType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
    }
    
    [Description("This object describes fault of coil supply air temperature sensor offset")]
    [JsonObject("FaultModel:TemperatureSensorOffset:CoilSupplyAir")]
    public class FaultModel_TemperatureSensorOffset_CoilSupplyAir : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("severity_schedule_name")]
public string SeverityScheduleName { get; set; } = "";
        

[Description("Enter the type of the coil affected")]
[JsonProperty("coil_object_type")]
public FaultModel_TemperatureSensorOffset_CoilSupplyAir_CoilObjectType CoilObjectType { get; set; } = (FaultModel_TemperatureSensorOffset_CoilSupplyAir_CoilObjectType)Enum.Parse(typeof(FaultModel_TemperatureSensorOffset_CoilSupplyAir_CoilObjectType), "AirLoopHVACUnitarySystem");
        

[Description("Enter the name of the coil affected")]
[JsonProperty("coil_object_name")]
public string CoilObjectName { get; set; } = "";
        

[Description("Enter the name of controller for the water coil affected Required for water coils" +
    "")]
[JsonProperty("water_coil_controller_name")]
public string WaterCoilControllerName { get; set; } = "";
        

[JsonProperty("reference_sensor_offset")]
public System.Nullable<float> ReferenceSensorOffset { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum FaultModel_TemperatureSensorOffset_CoilSupplyAir_CoilObjectType
    {
        
        [JsonProperty("AirLoopHVAC:UnitarySystem")]
        AirLoopHVACUnitarySystem = 0,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 1,
        
        [JsonProperty("Coil:Cooling:Water:Detailedgeometry")]
        CoilCoolingWaterDetailedgeometry = 2,
        
        [JsonProperty("Coil:Heating:Desuperheater")]
        CoilHeatingDesuperheater = 3,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 4,
        
        [JsonProperty("Coil:Heating:Gas")]
        CoilHeatingGas = 5,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 6,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 7,
        
        [JsonProperty("CoilSystem:Cooling:DX")]
        CoilSystemCoolingDX = 8,
        
        [JsonProperty("CoilSystem:Heating:DX")]
        CoilSystemHeatingDX = 9,
    }
    
    [Description("This object describes fault of condenser supply water temperature sensor offset")]
    [JsonObject("FaultModel:TemperatureSensorOffset:CondenserSupplyWater")]
    public class FaultModel_TemperatureSensorOffset_CondenserSupplyWater : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("severity_schedule_name")]
public string SeverityScheduleName { get; set; } = "";
        

[Description("Enter the type of the cooling tower affected")]
[JsonProperty("cooling_tower_object_type")]
public FaultModel_TemperatureSensorOffset_CondenserSupplyWater_CoolingTowerObjectType CoolingTowerObjectType { get; set; } = (FaultModel_TemperatureSensorOffset_CondenserSupplyWater_CoolingTowerObjectType)Enum.Parse(typeof(FaultModel_TemperatureSensorOffset_CondenserSupplyWater_CoolingTowerObjectType), "CoolingTowerSingleSpeed");
        

[Description("Enter the name of the cooling tower affected")]
[JsonProperty("cooling_tower_object_name")]
public string CoolingTowerObjectName { get; set; } = "";
        

[JsonProperty("reference_sensor_offset")]
public System.Nullable<float> ReferenceSensorOffset { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum FaultModel_TemperatureSensorOffset_CondenserSupplyWater_CoolingTowerObjectType
    {
        
        [JsonProperty("CoolingTower:SingleSpeed")]
        CoolingTowerSingleSpeed = 0,
        
        [JsonProperty("CoolingTower:TwoSpeed")]
        CoolingTowerTwoSpeed = 1,
        
        [JsonProperty("CoolingTower:VariableSpeed")]
        CoolingTowerVariableSpeed = 2,
        
        [JsonProperty("CoolingTower:VariableSpeed:MERKEL")]
        CoolingTowerVariableSpeedMERKEL = 3,
    }
    
    [Description("This object describes fault of thermostat offset")]
    [JsonObject("FaultModel:ThermostatOffset")]
    public class FaultModel_ThermostatOffset : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of a ZoneControl:Thermostat object.")]
[JsonProperty("thermostat_name")]
public string ThermostatName { get; set; } = "";
        

[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("severity_schedule_name")]
public string SeverityScheduleName { get; set; } = "";
        

[JsonProperty("reference_thermostat_offset")]
public System.Nullable<float> ReferenceThermostatOffset { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
    }
    
    [Description("This object describes fault of humidistat offset")]
    [JsonObject("FaultModel:HumidistatOffset")]
    public class FaultModel_HumidistatOffset : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of a ZoneControl:Humidistat object.")]
[JsonProperty("humidistat_name")]
public string HumidistatName { get; set; } = "";
        

[Description("Two types are available: Type ThermostatOffsetIndependent Type ThermostatOffsetDe" +
    "pendent")]
[JsonProperty("humidistat_offset_type")]
public FaultModel_HumidistatOffset_HumidistatOffsetType HumidistatOffsetType { get; set; } = (FaultModel_HumidistatOffset_HumidistatOffsetType)Enum.Parse(typeof(FaultModel_HumidistatOffset_HumidistatOffsetType), "ThermostatOffsetIndependent");
        

[Description("This field is applicable for Type ThermostatOffsetIndependent")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("This field is applicable for Type ThermostatOffsetIndependent")]
[JsonProperty("severity_schedule_name")]
public string SeverityScheduleName { get; set; } = "";
        

[Description("Required field for Type ThermostatOffsetIndependent")]
[JsonProperty("reference_humidistat_offset")]
public System.Nullable<float> ReferenceHumidistatOffset { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[Description("Enter the name of a FaultModel:ThermostatOffset object Required field for Type Th" +
    "ermostatOffsetDependent")]
[JsonProperty("related_thermostat_offset_fault_name")]
public string RelatedThermostatOffsetFaultName { get; set; } = "";
    }
    
    public enum FaultModel_HumidistatOffset_HumidistatOffsetType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ThermostatOffsetDependent")]
        ThermostatOffsetDependent = 1,
        
        [JsonProperty("ThermostatOffsetIndependent")]
        ThermostatOffsetIndependent = 2,
    }
    
    [Description("This object describes fault of dirty air filters")]
    [JsonObject("FaultModel:Fouling:AirFilter")]
    public class FaultModel_Fouling_AirFilter : BHoMObject, IEnergyPlusClass
    {
        

[Description("Choose the type of the fan Support for Fan:SystemModel is pending")]
[JsonProperty("fan_object_type")]
public FaultModel_Fouling_AirFilter_FanObjectType FanObjectType { get; set; } = (FaultModel_Fouling_AirFilter_FanObjectType)Enum.Parse(typeof(FaultModel_Fouling_AirFilter_FanObjectType), "FanConstantVolume");
        

[Description("Enter the name of a fan object")]
[JsonProperty("fan_name")]
public string FanName { get; set; } = "";
        

[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Enter the name of a schedule describing the variations of the fan pressure rise i" +
    "n terms of multipliers to the fan design pressure rise")]
[JsonProperty("pressure_fraction_schedule_name")]
public string PressureFractionScheduleName { get; set; } = "";
        

[Description("The curve describes the relationship between the fan pressure rise and air flow r" +
    "ate")]
[JsonProperty("fan_curve_name")]
public string FanCurveName { get; set; } = "";
    }
    
    public enum FaultModel_Fouling_AirFilter_FanObjectType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:VariableVolume")]
        FanVariableVolume = 2,
    }
    
    [Description("This object describes the fouling fault of boilers with water-based heat exchange" +
        "rs")]
    [JsonObject("FaultModel:Fouling:Boiler")]
    public class FaultModel_Fouling_Boiler : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("severity_schedule_name")]
public string SeverityScheduleName { get; set; } = "";
        

[Description("Enter the type of a boiler object The fault applies to the hot-water boilers")]
[JsonProperty("boiler_object_type")]
public FaultModel_Fouling_Boiler_BoilerObjectType BoilerObjectType { get; set; } = (FaultModel_Fouling_Boiler_BoilerObjectType)Enum.Parse(typeof(FaultModel_Fouling_Boiler_BoilerObjectType), "BoilerHotWater");
        

[Description("Enter the name of a Boiler object")]
[JsonProperty("boiler_object_name")]
public string BoilerObjectName { get; set; } = "";
        

[Description("The factor indicates the decrease of the nominal capacity of the boiler It is the" +
    " ratio between the nominal capacity at fouling case and that at fault free case")]
[JsonProperty("fouling_factor")]
public System.Nullable<float> FoulingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    public enum FaultModel_Fouling_Boiler_BoilerObjectType
    {
        
        [JsonProperty("Boiler:HotWater")]
        BoilerHotWater = 0,
    }
    
    [Description("This object describes the fouling fault of the wetted coil evaporative cooler")]
    [JsonObject("FaultModel:Fouling:EvaporativeCooler")]
    public class FaultModel_Fouling_EvaporativeCooler : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("severity_schedule_name")]
public string SeverityScheduleName { get; set; } = "";
        

[Description("Enter the type of a Evaporative Cooler object The fault applies to the wetted coi" +
    "l evaporative cooler The fault does not apply to direct evaporative coolers or t" +
    "he dry coil indirect evaporative coolers")]
[JsonProperty("evaporative_cooler_object_type")]
public FaultModel_Fouling_EvaporativeCooler_EvaporativeCoolerObjectType EvaporativeCoolerObjectType { get; set; } = (FaultModel_Fouling_EvaporativeCooler_EvaporativeCoolerObjectType)Enum.Parse(typeof(FaultModel_Fouling_EvaporativeCooler_EvaporativeCoolerObjectType), "EvaporativeCoolerIndirectWetCoil");
        

[Description("Enter the name of aN Evaporative Cooler object")]
[JsonProperty("evaporative_cooler_object_name")]
public string EvaporativeCoolerObjectName { get; set; } = "";
        

[Description("The factor indicates the decrease of the indirect stage efficiency It is the rati" +
    "o between the indirect stage efficiency at fouling case and that at fault free c" +
    "ase")]
[JsonProperty("fouling_factor")]
public System.Nullable<float> FoulingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    public enum FaultModel_Fouling_EvaporativeCooler_EvaporativeCoolerObjectType
    {
        
        [JsonProperty("EvaporativeCooler:Indirect:WetCoil")]
        EvaporativeCoolerIndirectWetCoil = 0,
    }
    
    [Description("This object describes the fouling fault of chillers with water-cooled condensers")]
    [JsonObject("FaultModel:Fouling:Chiller")]
    public class FaultModel_Fouling_Chiller : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("severity_schedule_name")]
public string SeverityScheduleName { get; set; } = "";
        

[Description("Enter the type of a chiller object The fault applies to the chillers with water-c" +
    "ooled condensers")]
[JsonProperty("chiller_object_type")]
public FaultModel_Fouling_Chiller_ChillerObjectType ChillerObjectType { get; set; } = (FaultModel_Fouling_Chiller_ChillerObjectType)Enum.Parse(typeof(FaultModel_Fouling_Chiller_ChillerObjectType), "ChillerCombustionTurbine");
        

[Description("Enter the name of a chiller object")]
[JsonProperty("chiller_object_name")]
public string ChillerObjectName { get; set; } = "";
        

[Description("The factor indicates the decrease of the nominal capacity of the chiller It is th" +
    "e ratio between the nominal capacity at fouling case and that at fault free case" +
    "")]
[JsonProperty("fouling_factor")]
public System.Nullable<float> FoulingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    public enum FaultModel_Fouling_Chiller_ChillerObjectType
    {
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 0,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 1,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 2,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 3,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 4,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 5,
    }
    
    [Description("This object describes the fault of fouling cooling towers")]
    [JsonObject("FaultModel:Fouling:CoolingTower")]
    public class FaultModel_Fouling_CoolingTower : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("severity_schedule_name")]
public string SeverityScheduleName { get; set; } = "";
        

[Description("Enter the type of the cooling tower affected")]
[JsonProperty("cooling_tower_object_type")]
public FaultModel_Fouling_CoolingTower_CoolingTowerObjectType CoolingTowerObjectType { get; set; } = (FaultModel_Fouling_CoolingTower_CoolingTowerObjectType)Enum.Parse(typeof(FaultModel_Fouling_CoolingTower_CoolingTowerObjectType), "CoolingTowerSingleSpeed");
        

[Description("Enter the name of the cooling tower affected")]
[JsonProperty("cooling_tower_object_name")]
public string CoolingTowerObjectName { get; set; } = "";
        

[Description("Factor describing the tower UA reduction due to fouling It is the ratio between t" +
    "he UA value at fouling case and that at fault free case It is applicable to both" +
    " the Design UA and Free Convection UA of the tower")]
[JsonProperty("reference_ua_reduction_factor")]
public System.Nullable<float> ReferenceUaReductionFactor { get; set; } = null;
    }
    
    public enum FaultModel_Fouling_CoolingTower_CoolingTowerObjectType
    {
        
        [JsonProperty("CoolingTower:SingleSpeed")]
        CoolingTowerSingleSpeed = 0,
        
        [JsonProperty("CoolingTower:TwoSpeed")]
        CoolingTowerTwoSpeed = 1,
        
        [JsonProperty("CoolingTower:VariableSpeed:MERKEL")]
        CoolingTowerVariableSpeedMERKEL = 2,
    }
    
    [Description("This object describes fouling water heating or cooling coils")]
    [JsonObject("FaultModel:Fouling:Coil")]
    public class FaultModel_Fouling_Coil : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coil_name")]
public string CoilName { get; set; } = "";
        

[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("severity_schedule_name")]
public string SeverityScheduleName { get; set; } = "";
        

[JsonProperty("fouling_input_method")]
public FaultModel_Fouling_Coil_FoulingInputMethod FoulingInputMethod { get; set; } = (FaultModel_Fouling_Coil_FoulingInputMethod)Enum.Parse(typeof(FaultModel_Fouling_Coil_FoulingInputMethod), "FouledUARated");
        

[Description("Fouling coil UA value under rating conditions For Fouling Input Method: FouledUAR" +
    "ated")]
[JsonProperty("uafouled")]
public System.Nullable<float> Uafouled { get; set; } = null;
        

[Description("For Fouling Input Method: FoulingFactor")]
[JsonProperty("water_side_fouling_factor")]
public System.Nullable<float> WaterSideFoulingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("For Fouling Input Method: FoulingFactor")]
[JsonProperty("air_side_fouling_factor")]
public System.Nullable<float> AirSideFoulingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("For Fouling Input Method: FoulingFactor")]
[JsonProperty("outside_coil_surface_area")]
public System.Nullable<float> OutsideCoilSurfaceArea { get; set; } = null;
        

[Description("For Fouling Input Method: FoulingFactor")]
[JsonProperty("inside_to_outside_coil_surface_area_ratio")]
public System.Nullable<float> InsideToOutsideCoilSurfaceAreaRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.07", CultureInfo.InvariantCulture);
    }
    
    public enum FaultModel_Fouling_Coil_FoulingInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FouledUARated")]
        FouledUARated = 1,
        
        [JsonProperty("FoulingFactor")]
        FoulingFactor = 2,
    }
}
namespace BH.oM.Adapters.EnergyPlus.OutputReporting
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Produces a list summarizing the output variables and meters that are available for reporting for the model being simulated (rdd output file). The list varies depending on the types of objects present in the idf file. For example, variables related to lights will only appear if a Lights object is present. The IDF option generates complete Output:Variable objects to simplify adding the desired output to the idf file.")]
    [JsonObject("Output:VariableDictionary")]
    public class Output_VariableDictionary : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("key_field")]
public Output_VariableDictionary_KeyField KeyField { get; set; } = (Output_VariableDictionary_KeyField)Enum.Parse(typeof(Output_VariableDictionary_KeyField), "Empty");
        

[JsonProperty("sort_option")]
public Output_VariableDictionary_SortOption SortOption { get; set; } = (Output_VariableDictionary_SortOption)Enum.Parse(typeof(Output_VariableDictionary_SortOption), "Name");
    }
    
    public enum Output_VariableDictionary_KeyField
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("IDF")]
        IDF = 1,
        
        [JsonProperty("regular")]
        Regular = 2,
    }
    
    public enum Output_VariableDictionary_SortOption
    {
        
        [JsonProperty("Name")]
        Name = 0,
        
        [JsonProperty("Unsorted")]
        Unsorted = 1,
    }
    
    [Description("Produces a report summarizing the details of surfaces in the eio output file.")]
    [JsonObject("Output:Surfaces:List")]
    public class Output_Surfaces_List : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("report_type")]
public Output_Surfaces_List_ReportType ReportType { get; set; } = (Output_Surfaces_List_ReportType)Enum.Parse(typeof(Output_Surfaces_List_ReportType), "CostInfo");
        

[Description("(IDF, only for Output:Surfaces:List, Lines report -- will print transformed coord" +
    "inates in IDF style)")]
[JsonProperty("report_specifications")]
public Output_Surfaces_List_ReportSpecifications ReportSpecifications { get; set; } = (Output_Surfaces_List_ReportSpecifications)Enum.Parse(typeof(Output_Surfaces_List_ReportSpecifications), "IDF");
    }
    
    public enum Output_Surfaces_List_ReportType
    {
        
        [JsonProperty("CostInfo")]
        CostInfo = 0,
        
        [JsonProperty("DecayCurvesFromComponentLoadsSummary")]
        DecayCurvesFromComponentLoadsSummary = 1,
        
        [JsonProperty("Details")]
        Details = 2,
        
        [JsonProperty("DetailsWithVertices")]
        DetailsWithVertices = 3,
        
        [JsonProperty("Lines")]
        Lines = 4,
        
        [JsonProperty("Vertices")]
        Vertices = 5,
        
        [JsonProperty("ViewFactorInfo")]
        ViewFactorInfo = 6,
    }
    
    public enum Output_Surfaces_List_ReportSpecifications
    {
        
        [JsonProperty("IDF")]
        IDF = 0,
    }
    
    [Description("Produces reports/files that are capable of rendering graphically or being importe" +
        "d into other programs. Rendering does not alter the actual inputs/surfaces.")]
    [JsonObject("Output:Surfaces:Drawing")]
    public class Output_Surfaces_Drawing : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("report_type")]
public Output_Surfaces_Drawing_ReportType ReportType { get; set; } = (Output_Surfaces_Drawing_ReportType)Enum.Parse(typeof(Output_Surfaces_Drawing_ReportType), "DXF");
        

[Description("Triangulate3DFace (default), ThickPolyline, RegularPolyline apply to DXF This fie" +
    "ld is ignored for DXF:WireFrame and VRML")]
[JsonProperty("report_specifications_1")]
public Output_Surfaces_Drawing_ReportSpecifications1 ReportSpecifications1 { get; set; } = (Output_Surfaces_Drawing_ReportSpecifications1)Enum.Parse(typeof(Output_Surfaces_Drawing_ReportSpecifications1), "Triangulate3DFace");
        

[Description("Use ColorScheme Name for DXF reports")]
[JsonProperty("report_specifications_2")]
public string ReportSpecifications2 { get; set; } = "";
    }
    
    public enum Output_Surfaces_Drawing_ReportType
    {
        
        [JsonProperty("DXF")]
        DXF = 0,
        
        [JsonProperty("DXF:WireFrame")]
        DXFWireFrame = 1,
        
        [JsonProperty("VRML")]
        VRML = 2,
    }
    
    public enum Output_Surfaces_Drawing_ReportSpecifications1
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("RegularPolyline")]
        RegularPolyline = 1,
        
        [JsonProperty("ThickPolyline")]
        ThickPolyline = 2,
        
        [JsonProperty("Triangulate3DFace")]
        Triangulate3DFace = 3,
    }
    
    [Description("Produces a condensed reporting that illustrates the full range of schedule values" +
        " in the eio output file. In the style of input: DaySchedule,  WeekSchedule, and " +
        "Annual Schedule.")]
    [JsonObject("Output:Schedules")]
    public class Output_Schedules : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("key_field")]
public Output_Schedules_KeyField KeyField { get; set; } = (Output_Schedules_KeyField)Enum.Parse(typeof(Output_Schedules_KeyField), "Hourly");
    }
    
    public enum Output_Schedules_KeyField
    {
        
        [JsonProperty("Hourly")]
        Hourly = 0,
        
        [JsonProperty("Timestep")]
        Timestep = 1,
    }
    
    [Description("Adds a report to the eio output file which shows details for each construction, i" +
        "ncluding overall properties, a list of material layers, and calculated results r" +
        "elated to conduction transfer functions.")]
    [JsonObject("Output:Constructions")]
    public class Output_Constructions : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("details_type_1")]
public Output_Constructions_DetailsType1 DetailsType1 { get; set; } = (Output_Constructions_DetailsType1)Enum.Parse(typeof(Output_Constructions_DetailsType1), "Constructions");
        

[JsonProperty("details_type_2")]
public Output_Constructions_DetailsType2 DetailsType2 { get; set; } = (Output_Constructions_DetailsType2)Enum.Parse(typeof(Output_Constructions_DetailsType2), "Constructions");
    }
    
    public enum Output_Constructions_DetailsType1
    {
        
        [JsonProperty("Constructions")]
        Constructions = 0,
        
        [JsonProperty("Materials")]
        Materials = 1,
    }
    
    public enum Output_Constructions_DetailsType2
    {
        
        [JsonProperty("Constructions")]
        Constructions = 0,
        
        [JsonProperty("Materials")]
        Materials = 1,
    }
    
    [Description("This object is used to control the output produced by the Energy Management Syste" +
        "m")]
    [JsonObject("Output:EnergyManagementSystem")]
    public class Output_EnergyManagementSystem : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("actuator_availability_dictionary_reporting")]
public Output_EnergyManagementSystem_ActuatorAvailabilityDictionaryReporting ActuatorAvailabilityDictionaryReporting { get; set; } = (Output_EnergyManagementSystem_ActuatorAvailabilityDictionaryReporting)Enum.Parse(typeof(Output_EnergyManagementSystem_ActuatorAvailabilityDictionaryReporting), "None");
        

[JsonProperty("internal_variable_availability_dictionary_reporting")]
public Output_EnergyManagementSystem_InternalVariableAvailabilityDictionaryReporting InternalVariableAvailabilityDictionaryReporting { get; set; } = (Output_EnergyManagementSystem_InternalVariableAvailabilityDictionaryReporting)Enum.Parse(typeof(Output_EnergyManagementSystem_InternalVariableAvailabilityDictionaryReporting), "None");
        

[JsonProperty("ems_runtime_language_debug_output_level")]
public Output_EnergyManagementSystem_EmsRuntimeLanguageDebugOutputLevel EmsRuntimeLanguageDebugOutputLevel { get; set; } = (Output_EnergyManagementSystem_EmsRuntimeLanguageDebugOutputLevel)Enum.Parse(typeof(Output_EnergyManagementSystem_EmsRuntimeLanguageDebugOutputLevel), "None");
    }
    
    public enum Output_EnergyManagementSystem_ActuatorAvailabilityDictionaryReporting
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("NotByUniqueKeyNames")]
        NotByUniqueKeyNames = 2,
        
        [JsonProperty("Verbose")]
        Verbose = 3,
    }
    
    public enum Output_EnergyManagementSystem_InternalVariableAvailabilityDictionaryReporting
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("NotByUniqueKeyNames")]
        NotByUniqueKeyNames = 2,
        
        [JsonProperty("Verbose")]
        Verbose = 3,
    }
    
    public enum Output_EnergyManagementSystem_EmsRuntimeLanguageDebugOutputLevel
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ErrorsOnly")]
        ErrorsOnly = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Verbose")]
        Verbose = 3,
    }
    
    [Description(@"This object is used to set colors for reporting on various building elements particularly for the DXF reports. We know the user can enter 0 to 255 and the color map is available in DXF output. Therefore, we are limiting the colors in that range. You can extend by editing the IDD but you do so on your own. Colors not changed in any scheme will remain as the default scheme uses.")]
    [JsonObject("OutputControl:SurfaceColorScheme")]
    public class OutputControl_SurfaceColorScheme : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("drawing_element_1_type")]
public OutputControl_SurfaceColorScheme_DrawingElement1Type DrawingElement1Type { get; set; } = (OutputControl_SurfaceColorScheme_DrawingElement1Type)Enum.Parse(typeof(OutputControl_SurfaceColorScheme_DrawingElement1Type), "AttachedBuildingShades");
        

[Description("use color number for output assignment (e.g. DXF)")]
[JsonProperty("color_for_drawing_element_1")]
public System.Nullable<float> ColorForDrawingElement1 { get; set; } = null;
        

[JsonProperty("drawing_element_2_type")]
public OutputControl_SurfaceColorScheme_DrawingElement2Type DrawingElement2Type { get; set; } = (OutputControl_SurfaceColorScheme_DrawingElement2Type)Enum.Parse(typeof(OutputControl_SurfaceColorScheme_DrawingElement2Type), "AttachedBuildingShades");
        

[Description("use color number for output assignment (e.g. DXF)")]
[JsonProperty("color_for_drawing_element_2")]
public System.Nullable<float> ColorForDrawingElement2 { get; set; } = null;
        

[JsonProperty("drawing_element_3_type")]
public OutputControl_SurfaceColorScheme_DrawingElement3Type DrawingElement3Type { get; set; } = (OutputControl_SurfaceColorScheme_DrawingElement3Type)Enum.Parse(typeof(OutputControl_SurfaceColorScheme_DrawingElement3Type), "AttachedBuildingShades");
        

[Description("use color number for output assignment (e.g. DXF)")]
[JsonProperty("color_for_drawing_element_3")]
public System.Nullable<float> ColorForDrawingElement3 { get; set; } = null;
        

[JsonProperty("drawing_element_4_type")]
public OutputControl_SurfaceColorScheme_DrawingElement4Type DrawingElement4Type { get; set; } = (OutputControl_SurfaceColorScheme_DrawingElement4Type)Enum.Parse(typeof(OutputControl_SurfaceColorScheme_DrawingElement4Type), "AttachedBuildingShades");
        

[Description("use color number for output assignment (e.g. DXF)")]
[JsonProperty("color_for_drawing_element_4")]
public System.Nullable<float> ColorForDrawingElement4 { get; set; } = null;
        

[JsonProperty("drawing_element_5_type")]
public OutputControl_SurfaceColorScheme_DrawingElement5Type DrawingElement5Type { get; set; } = (OutputControl_SurfaceColorScheme_DrawingElement5Type)Enum.Parse(typeof(OutputControl_SurfaceColorScheme_DrawingElement5Type), "AttachedBuildingShades");
        

[Description("use color number for output assignment (e.g. DXF)")]
[JsonProperty("color_for_drawing_element_5")]
public System.Nullable<float> ColorForDrawingElement5 { get; set; } = null;
        

[JsonProperty("drawing_element_6_type")]
public OutputControl_SurfaceColorScheme_DrawingElement6Type DrawingElement6Type { get; set; } = (OutputControl_SurfaceColorScheme_DrawingElement6Type)Enum.Parse(typeof(OutputControl_SurfaceColorScheme_DrawingElement6Type), "AttachedBuildingShades");
        

[Description("use color number for output assignment (e.g. DXF)")]
[JsonProperty("color_for_drawing_element_6")]
public System.Nullable<float> ColorForDrawingElement6 { get; set; } = null;
        

[JsonProperty("drawing_element_7_type")]
public OutputControl_SurfaceColorScheme_DrawingElement7Type DrawingElement7Type { get; set; } = (OutputControl_SurfaceColorScheme_DrawingElement7Type)Enum.Parse(typeof(OutputControl_SurfaceColorScheme_DrawingElement7Type), "AttachedBuildingShades");
        

[Description("use color number for output assignment (e.g. DXF)")]
[JsonProperty("color_for_drawing_element_7")]
public System.Nullable<float> ColorForDrawingElement7 { get; set; } = null;
        

[JsonProperty("drawing_element_8_type")]
public OutputControl_SurfaceColorScheme_DrawingElement8Type DrawingElement8Type { get; set; } = (OutputControl_SurfaceColorScheme_DrawingElement8Type)Enum.Parse(typeof(OutputControl_SurfaceColorScheme_DrawingElement8Type), "AttachedBuildingShades");
        

[Description("use color number for output assignment (e.g. DXF)")]
[JsonProperty("color_for_drawing_element_8")]
public System.Nullable<float> ColorForDrawingElement8 { get; set; } = null;
        

[JsonProperty("drawing_element_9_type")]
public OutputControl_SurfaceColorScheme_DrawingElement9Type DrawingElement9Type { get; set; } = (OutputControl_SurfaceColorScheme_DrawingElement9Type)Enum.Parse(typeof(OutputControl_SurfaceColorScheme_DrawingElement9Type), "AttachedBuildingShades");
        

[Description("use color number for output assignment (e.g. DXF)")]
[JsonProperty("color_for_drawing_element_9")]
public System.Nullable<float> ColorForDrawingElement9 { get; set; } = null;
        

[JsonProperty("drawing_element_10_type")]
public OutputControl_SurfaceColorScheme_DrawingElement10Type DrawingElement10Type { get; set; } = (OutputControl_SurfaceColorScheme_DrawingElement10Type)Enum.Parse(typeof(OutputControl_SurfaceColorScheme_DrawingElement10Type), "AttachedBuildingShades");
        

[Description("use color number for output assignment (e.g. DXF)")]
[JsonProperty("color_for_drawing_element_10")]
public System.Nullable<float> ColorForDrawingElement10 { get; set; } = null;
        

[JsonProperty("drawing_element_11_type")]
public OutputControl_SurfaceColorScheme_DrawingElement11Type DrawingElement11Type { get; set; } = (OutputControl_SurfaceColorScheme_DrawingElement11Type)Enum.Parse(typeof(OutputControl_SurfaceColorScheme_DrawingElement11Type), "AttachedBuildingShades");
        

[Description("use color number for output assignment (e.g. DXF)")]
[JsonProperty("color_for_drawing_element_11")]
public System.Nullable<float> ColorForDrawingElement11 { get; set; } = null;
        

[JsonProperty("drawing_element_12_type")]
public OutputControl_SurfaceColorScheme_DrawingElement12Type DrawingElement12Type { get; set; } = (OutputControl_SurfaceColorScheme_DrawingElement12Type)Enum.Parse(typeof(OutputControl_SurfaceColorScheme_DrawingElement12Type), "AttachedBuildingShades");
        

[Description("use color number for output assignment (e.g. DXF)")]
[JsonProperty("color_for_drawing_element_12")]
public System.Nullable<float> ColorForDrawingElement12 { get; set; } = null;
        

[JsonProperty("drawing_element_13_type")]
public OutputControl_SurfaceColorScheme_DrawingElement13Type DrawingElement13Type { get; set; } = (OutputControl_SurfaceColorScheme_DrawingElement13Type)Enum.Parse(typeof(OutputControl_SurfaceColorScheme_DrawingElement13Type), "AttachedBuildingShades");
        

[Description("use color number for output assignment (e.g. DXF)")]
[JsonProperty("color_for_drawing_element_13")]
public System.Nullable<float> ColorForDrawingElement13 { get; set; } = null;
        

[JsonProperty("drawing_element_14_type")]
public OutputControl_SurfaceColorScheme_DrawingElement14Type DrawingElement14Type { get; set; } = (OutputControl_SurfaceColorScheme_DrawingElement14Type)Enum.Parse(typeof(OutputControl_SurfaceColorScheme_DrawingElement14Type), "AttachedBuildingShades");
        

[Description("use color number for output assignment (e.g. DXF)")]
[JsonProperty("color_for_drawing_element_14")]
public System.Nullable<float> ColorForDrawingElement14 { get; set; } = null;
        

[JsonProperty("drawing_element_15_type")]
public OutputControl_SurfaceColorScheme_DrawingElement15Type DrawingElement15Type { get; set; } = (OutputControl_SurfaceColorScheme_DrawingElement15Type)Enum.Parse(typeof(OutputControl_SurfaceColorScheme_DrawingElement15Type), "AttachedBuildingShades");
        

[Description("use color number for output assignment (e.g. DXF)")]
[JsonProperty("color_for_drawing_element_15")]
public System.Nullable<float> ColorForDrawingElement15 { get; set; } = null;
    }
    
    public enum OutputControl_SurfaceColorScheme_DrawingElement1Type
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint1 = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint2 = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum OutputControl_SurfaceColorScheme_DrawingElement2Type
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint1 = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint2 = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum OutputControl_SurfaceColorScheme_DrawingElement3Type
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint1 = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint2 = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum OutputControl_SurfaceColorScheme_DrawingElement4Type
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint1 = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint2 = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum OutputControl_SurfaceColorScheme_DrawingElement5Type
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint1 = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint2 = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum OutputControl_SurfaceColorScheme_DrawingElement6Type
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint1 = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint2 = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum OutputControl_SurfaceColorScheme_DrawingElement7Type
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint1 = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint2 = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum OutputControl_SurfaceColorScheme_DrawingElement8Type
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint1 = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint2 = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum OutputControl_SurfaceColorScheme_DrawingElement9Type
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint1 = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint2 = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum OutputControl_SurfaceColorScheme_DrawingElement10Type
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint1 = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint2 = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum OutputControl_SurfaceColorScheme_DrawingElement11Type
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint1 = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint2 = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum OutputControl_SurfaceColorScheme_DrawingElement12Type
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint1 = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint2 = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum OutputControl_SurfaceColorScheme_DrawingElement13Type
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint1 = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint2 = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum OutputControl_SurfaceColorScheme_DrawingElement14Type
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint1 = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint2 = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum OutputControl_SurfaceColorScheme_DrawingElement15Type
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint1 = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint2 = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    [Description(@"This object allows the user to call report types that are predefined and will appear with the other tabular reports. These predefined reports are sensitive to the OutputControl:Table:Style object and appear in the same files as the tabular reports. The entries for this object is a list of the predefined reports that should appear in the tabular report output file.")]
    [JsonObject("Output:Table:SummaryReports")]
    public class Output_Table_SummaryReports : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("reports")]
public string Reports { get; set; } = "";
    }
    
    [Description("Produces a bin report in the table output file which shows the amount of time in " +
        "hours that occurs in different bins for a single specific output variable or met" +
        "er. Two different types of binning are reported: by month and by hour of the day" +
        ".")]
    [JsonObject("Output:Table:TimeBins")]
    public class Output_Table_TimeBins : BHoMObject, IEnergyPlusClass
    {
        

[Description("use \'*\' (without quotes) to apply this variable to all keys")]
[JsonProperty("key_value")]
public string KeyValue { get; set; } = (System.String)"*";
        

[JsonProperty("variable_name")]
public string VariableName { get; set; } = "";
        

[Description("The lowest value for the intervals being binned into.")]
[JsonProperty("interval_start")]
public System.Nullable<float> IntervalStart { get; set; } = null;
        

[Description("The size of the bins starting with Interval start.")]
[JsonProperty("interval_size")]
public System.Nullable<float> IntervalSize { get; set; } = null;
        

[Description("The number of bins used. The number of hours below the start of the Lowest bin an" +
    "d above the value of the last bin are also shown.")]
[JsonProperty("interval_count")]
public System.Nullable<float> IntervalCount { get; set; } = null;
        

[Description("Optional schedule name. Binning is performed for non-zero hours. Binning always p" +
    "erformed if left blank.")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[Description("Optional input on the type of units for the variable used by other fields in the " +
    "object.")]
[JsonProperty("variable_type")]
public Output_Table_TimeBins_VariableType VariableType { get; set; } = (Output_Table_TimeBins_VariableType)Enum.Parse(typeof(Output_Table_TimeBins_VariableType), "Energy");
    }
    
    public enum Output_Table_TimeBins_VariableType
    {
        
        [JsonProperty("Energy")]
        Energy = 0,
        
        [JsonProperty("Power")]
        Power = 1,
        
        [JsonProperty("Temperature")]
        Temperature = 2,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 3,
    }
    
    [Description(@"Provides a generic method of setting up tables of monthly results. The report has multiple columns that are each defined using a repeated group of fields for any number of columns. A single Output:Table:Monthly object often produces multiple tables in the output. A table is produced for every instance of a particular output variable. For example, a table defined with zone variables will be produced once for every zone.")]
    [JsonObject("Output:Table:Monthly")]
    public class Output_Table_Monthly : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("digits_after_decimal")]
public System.Nullable<float> DigitsAfterDecimal { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[JsonProperty("variable_details")]
public string VariableDetails { get; set; } = "";
    }
    
    [Description(@"Provides a generic method of setting up tables of annual results with one row per object. The report has multiple columns that are each defined using a repeated group of fields for any number of columns. A single Output:Table:Annual produces a single table in the output.")]
    [JsonObject("Output:Table:Annual")]
    public class Output_Table_Annual : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"An optional text string that is compared to the names of the objects referenced by the variables and if they match are included in the table. A footnote will appear that indicates that the objects shown may not be all the objects that of that type that occur in the file.")]
[JsonProperty("filter")]
public string Filter { get; set; } = "";
        

[Description("Optional schedule name. If left blank, aggregation is performed for all hours sim" +
    "ulated. If a schedule is specified, aggregation is performed for non-zero hours " +
    "in the schedule.")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[JsonProperty("variable_details")]
public string VariableDetails { get; set; } = "";
    }
    
    [Description(@"default style for the OutputControl:Table:Style is comma -- this works well for importing into spreadsheet programs such as Excel(tm) but not so well for word processing programs -- there tab may be a better choice. fixed puts spaces between the ""columns"". HTML produces tables in HTML. XML produces an XML file. note - if no OutputControl:Table:Style is included, the defaults are comma and None.")]
    [JsonObject("OutputControl:Table:Style")]
    public class OutputControl_Table_Style : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("column_separator")]
public OutputControl_Table_Style_ColumnSeparator ColumnSeparator { get; set; } = (OutputControl_Table_Style_ColumnSeparator)Enum.Parse(typeof(OutputControl_Table_Style_ColumnSeparator), "Comma");
        

[JsonProperty("unit_conversion")]
public OutputControl_Table_Style_UnitConversion UnitConversion { get; set; } = (OutputControl_Table_Style_UnitConversion)Enum.Parse(typeof(OutputControl_Table_Style_UnitConversion), "None");
    }
    
    public enum OutputControl_Table_Style_ColumnSeparator
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("All")]
        All = 1,
        
        [JsonProperty("Comma")]
        Comma = 2,
        
        [JsonProperty("CommaAndHTML")]
        CommaAndHTML = 3,
        
        [JsonProperty("CommaAndXML")]
        CommaAndXML = 4,
        
        [JsonProperty("Fixed")]
        Fixed = 5,
        
        [JsonProperty("HTML")]
        HTML = 6,
        
        [JsonProperty("Tab")]
        Tab = 7,
        
        [JsonProperty("TabAndHTML")]
        TabAndHTML = 8,
        
        [JsonProperty("XML")]
        XML = 9,
        
        [JsonProperty("XMLandHTML")]
        XMLandHTML = 10,
    }
    
    public enum OutputControl_Table_Style_UnitConversion
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("InchPound")]
        InchPound = 1,
        
        [JsonProperty("JtoGJ")]
        JtoGJ = 2,
        
        [JsonProperty("JtoKWH")]
        JtoKWH = 3,
        
        [JsonProperty("JtoMJ")]
        JtoMJ = 4,
        
        [JsonProperty("None")]
        None = 5,
    }
    
    [Description("Calculations of the time that setpoints are not met use a tolerance of 0.2C. This" +
        " object allows changing the tolerance used to determine when setpoints are being" +
        " met.")]
    [JsonObject("OutputControl:ReportingTolerances")]
    public class OutputControl_ReportingTolerances : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"If the zone temperature is below the heating setpoint by more than this value, the following output variables will increment as appropriate Zone Heating Setpoint Not Met Time Zone Heating Setpoint Not Met While Occupied Time This also impacts table report ""Annual Building Utility Performance Summary"" subtable ""Comfort and Setpoint Not Met Summary""")]
[JsonProperty("tolerance_for_time_heating_setpoint_not_met")]
public System.Nullable<float> ToleranceForTimeHeatingSetpointNotMet { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description(@"If the zone temperature is above the cooling setpoint by more than this value, the following output variables will increment as appropriate Zone Cooling Setpoint Not Met Time Zone Cooling Setpoint Not Met While Occupied Time This also impacts table report ""Annual Building Utility Performance Summary"" subtable ""Comfort and Setpoint Not Met Summary""")]
[JsonProperty("tolerance_for_time_cooling_setpoint_not_met")]
public System.Nullable<float> ToleranceForTimeCoolingSetpointNotMet { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
    }
    
    [Description(@"each Output:Variable command picks variables to be put onto the standard output file (.eso) some variables may not be reported for every simulation. a list of variables that can be reported are available after a run on the report dictionary file (.rdd) if the Output:VariableDictionary has been requested.")]
    [JsonObject("Output:Variable")]
    public class Output_Variable : BHoMObject, IEnergyPlusClass
    {
        

[Description("use \'*\' (without quotes) to apply this variable to all keys")]
[JsonProperty("key_value")]
public string KeyValue { get; set; } = (System.String)"*";
        

[JsonProperty("variable_name")]
public string VariableName { get; set; } = "";
        

[Description("Detailed lists every instance (i.e. HVAC variable timesteps) Timestep refers to t" +
    "he zone Timestep/Number of Timesteps in hour value RunPeriod and Environment are" +
    " the same")]
[JsonProperty("reporting_frequency")]
public Output_Variable_ReportingFrequency ReportingFrequency { get; set; } = (Output_Variable_ReportingFrequency)Enum.Parse(typeof(Output_Variable_ReportingFrequency), "Hourly");
        

[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
    }
    
    public enum Output_Variable_ReportingFrequency
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Annual")]
        Annual = 1,
        
        [JsonProperty("Daily")]
        Daily = 2,
        
        [JsonProperty("Detailed")]
        Detailed = 3,
        
        [JsonProperty("Environment")]
        Environment = 4,
        
        [JsonProperty("Hourly")]
        Hourly = 5,
        
        [JsonProperty("Monthly")]
        Monthly = 6,
        
        [JsonProperty("RunPeriod")]
        RunPeriod = 7,
        
        [JsonProperty("Timestep")]
        Timestep = 8,
    }
    
    [Description(@"Each Output:Meter command picks meters to be put onto the standard output file (.eso) and meter file (.mtr). Not all meters are reported in every simulation. A list of meters that can be reported are available after a run on the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.")]
    [JsonObject("Output:Meter")]
    public class Output_Meter : BHoMObject, IEnergyPlusClass
    {
        

[Description("Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters or EndUs" +
    "e:..., e.g. GeneralLights:* for all General Lights Output:Meter puts results on " +
    "both the eplusout.mtr and eplusout.eso files")]
[JsonProperty("key_name")]
public string KeyName { get; set; } = "";
        

[Description("Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod " +
    "and Environment are the same")]
[JsonProperty("reporting_frequency")]
public Output_Meter_ReportingFrequency ReportingFrequency { get; set; } = (Output_Meter_ReportingFrequency)Enum.Parse(typeof(Output_Meter_ReportingFrequency), "Hourly");
    }
    
    public enum Output_Meter_ReportingFrequency
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Annual")]
        Annual = 1,
        
        [JsonProperty("Daily")]
        Daily = 2,
        
        [JsonProperty("Detailed")]
        Detailed = 3,
        
        [JsonProperty("Environment")]
        Environment = 4,
        
        [JsonProperty("Hourly")]
        Hourly = 5,
        
        [JsonProperty("Monthly")]
        Monthly = 6,
        
        [JsonProperty("RunPeriod")]
        RunPeriod = 7,
        
        [JsonProperty("Timestep")]
        Timestep = 8,
    }
    
    [Description(@"Each Output:Meter:MeterFileOnly command picks meters to be put only onto meter file (.mtr). Not all meters are reported in every simulation. A list of meters that can be reported a list of meters that can be reported are available after a run on the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.")]
    [JsonObject("Output:Meter:MeterFileOnly")]
    public class Output_Meter_MeterFileOnly : BHoMObject, IEnergyPlusClass
    {
        

[Description("Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters or EndUs" +
    "e:..., e.g. GeneralLights:* for all General Lights Output:Meter:MeterFileOnly pu" +
    "ts results on the eplusout.mtr file only")]
[JsonProperty("key_name")]
public string KeyName { get; set; } = "";
        

[Description("Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod " +
    "and Environment are the same")]
[JsonProperty("reporting_frequency")]
public Output_Meter_MeterFileOnly_ReportingFrequency ReportingFrequency { get; set; } = (Output_Meter_MeterFileOnly_ReportingFrequency)Enum.Parse(typeof(Output_Meter_MeterFileOnly_ReportingFrequency), "Hourly");
    }
    
    public enum Output_Meter_MeterFileOnly_ReportingFrequency
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Annual")]
        Annual = 1,
        
        [JsonProperty("Daily")]
        Daily = 2,
        
        [JsonProperty("Detailed")]
        Detailed = 3,
        
        [JsonProperty("Environment")]
        Environment = 4,
        
        [JsonProperty("Hourly")]
        Hourly = 5,
        
        [JsonProperty("Monthly")]
        Monthly = 6,
        
        [JsonProperty("RunPeriod")]
        RunPeriod = 7,
        
        [JsonProperty("Timestep")]
        Timestep = 8,
    }
    
    [Description(@"Each Output:Meter:Cumulative command picks meters to be reported cumulatively onto the standard output file (.eso) and meter file (.mtr). Not all meters are reported in every simulation. a list of meters that can be reported are available after a run on the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.")]
    [JsonObject("Output:Meter:Cumulative")]
    public class Output_Meter_Cumulative : BHoMObject, IEnergyPlusClass
    {
        

[Description("Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters or EndUs" +
    "e:..., e.g. GeneralLights:* for all General Lights Output:Meter:Cumulative puts " +
    "results on both the eplusout.mtr and eplusout.eso files")]
[JsonProperty("key_name")]
public string KeyName { get; set; } = "";
        

[Description("Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod " +
    "and Environment are the same")]
[JsonProperty("reporting_frequency")]
public Output_Meter_Cumulative_ReportingFrequency ReportingFrequency { get; set; } = (Output_Meter_Cumulative_ReportingFrequency)Enum.Parse(typeof(Output_Meter_Cumulative_ReportingFrequency), "Hourly");
    }
    
    public enum Output_Meter_Cumulative_ReportingFrequency
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Annual")]
        Annual = 1,
        
        [JsonProperty("Daily")]
        Daily = 2,
        
        [JsonProperty("Detailed")]
        Detailed = 3,
        
        [JsonProperty("Environment")]
        Environment = 4,
        
        [JsonProperty("Hourly")]
        Hourly = 5,
        
        [JsonProperty("Monthly")]
        Monthly = 6,
        
        [JsonProperty("RunPeriod")]
        RunPeriod = 7,
        
        [JsonProperty("Timestep")]
        Timestep = 8,
    }
    
    [Description(@"Each Output:Meter:Cumulative:MeterFileOnly command picks meters to be reported cumulatively onto the standard output file (.eso) and meter file (.mtr). Not all meters are reported in every simulation. a list of meters that can be reported are available after a run on the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.")]
    [JsonObject("Output:Meter:Cumulative:MeterFileOnly")]
    public class Output_Meter_Cumulative_MeterFileOnly : BHoMObject, IEnergyPlusClass
    {
        

[Description("Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters or EndUs" +
    "e:..., e.g. GeneralLights:* for all General Lights Output:Meter:Cumulative:Meter" +
    "FileOnly puts results on the eplusout.mtr file only")]
[JsonProperty("key_name")]
public string KeyName { get; set; } = "";
        

[Description("Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod " +
    "and Environment are the same")]
[JsonProperty("reporting_frequency")]
public Output_Meter_Cumulative_MeterFileOnly_ReportingFrequency ReportingFrequency { get; set; } = (Output_Meter_Cumulative_MeterFileOnly_ReportingFrequency)Enum.Parse(typeof(Output_Meter_Cumulative_MeterFileOnly_ReportingFrequency), "Hourly");
    }
    
    public enum Output_Meter_Cumulative_MeterFileOnly_ReportingFrequency
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Annual")]
        Annual = 1,
        
        [JsonProperty("Daily")]
        Daily = 2,
        
        [JsonProperty("Detailed")]
        Detailed = 3,
        
        [JsonProperty("Environment")]
        Environment = 4,
        
        [JsonProperty("Hourly")]
        Hourly = 5,
        
        [JsonProperty("Monthly")]
        Monthly = 6,
        
        [JsonProperty("RunPeriod")]
        RunPeriod = 7,
        
        [JsonProperty("Timestep")]
        Timestep = 8,
    }
    
    [Description(@"Used to allow users to combine specific variables and/or meters into ""custom"" meter configurations. To access these meters by name, one must first run a simulation to generate the RDD/MDD files and names. A Meter:Custom cannot reference another Meter:Custom.")]
    [JsonObject("Meter:Custom")]
    public class Meter_Custom : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("resource_type")]
public Meter_Custom_ResourceType ResourceType { get; set; } = (Meter_Custom_ResourceType)Enum.Parse(typeof(Meter_Custom_ResourceType), "Coal");
        

[JsonProperty("variable_details")]
public string VariableDetails { get; set; } = "";
    }
    
    public enum Meter_Custom_ResourceType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("DistrictCooling")]
        DistrictCooling = 2,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 3,
        
        [JsonProperty("Electricity")]
        Electricity = 4,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 5,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 6,
        
        [JsonProperty("Gasoline")]
        Gasoline = 7,
        
        [JsonProperty("Generic")]
        Generic = 8,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 9,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 10,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Steam")]
        Steam = 13,
        
        [JsonProperty("Water")]
        Water = 14,
    }
    
    [Description("Used to allow users to combine specific variables and/or meters into \"custom\" met" +
        "er configurations. To access these meters by name, one must first run a simulati" +
        "on to generate the RDD/MDD files and names.")]
    [JsonObject("Meter:CustomDecrement")]
    public class Meter_CustomDecrement : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("resource_type")]
public Meter_CustomDecrement_ResourceType ResourceType { get; set; } = (Meter_CustomDecrement_ResourceType)Enum.Parse(typeof(Meter_CustomDecrement_ResourceType), "Coal");
        

[JsonProperty("source_meter_name")]
public string SourceMeterName { get; set; } = "";
        

[JsonProperty("variable_details")]
public string VariableDetails { get; set; } = "";
    }
    
    public enum Meter_CustomDecrement_ResourceType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("DistrictCooling")]
        DistrictCooling = 2,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 3,
        
        [JsonProperty("Electricity")]
        Electricity = 4,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 5,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 6,
        
        [JsonProperty("Gasoline")]
        Gasoline = 7,
        
        [JsonProperty("Generic")]
        Generic = 8,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 9,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 10,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Steam")]
        Steam = 13,
        
        [JsonProperty("Water")]
        Water = 14,
    }
    
    [Description("Conditionally turn on/off output from EnergyPlus.")]
    [JsonObject("OutputControl:Files")]
    public class OutputControl_Files : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("output_csv")]
public EmptyNoYes OutputCsv { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("output_mtr")]
public EmptyNoYes OutputMtr { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_eso")]
public EmptyNoYes OutputEso { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_eio")]
public EmptyNoYes OutputEio { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_tabular")]
public EmptyNoYes OutputTabular { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_sqlite")]
public EmptyNoYes OutputSqlite { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_json")]
public EmptyNoYes OutputJson { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_audit")]
public EmptyNoYes OutputAudit { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_zone_sizing")]
public EmptyNoYes OutputZoneSizing { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_system_sizing")]
public EmptyNoYes OutputSystemSizing { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_dxf")]
public EmptyNoYes OutputDxf { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_bnd")]
public EmptyNoYes OutputBnd { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_rdd")]
public EmptyNoYes OutputRdd { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_mdd")]
public EmptyNoYes OutputMdd { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_mtd")]
public EmptyNoYes OutputMtd { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_end")]
public EmptyNoYes OutputEnd { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_shd")]
public EmptyNoYes OutputShd { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_dfs")]
public EmptyNoYes OutputDfs { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_glhe")]
public EmptyNoYes OutputGlhe { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_delightin")]
public EmptyNoYes OutputDelightin { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_delighteldmp")]
public EmptyNoYes OutputDelighteldmp { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_delightdfdmp")]
public EmptyNoYes OutputDelightdfdmp { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_edd")]
public EmptyNoYes OutputEdd { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_dbg")]
public EmptyNoYes OutputDbg { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_perflog")]
public EmptyNoYes OutputPerflog { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_sln")]
public EmptyNoYes OutputSln { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_sci")]
public EmptyNoYes OutputSci { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_wrl")]
public EmptyNoYes OutputWrl { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_screen")]
public EmptyNoYes OutputScreen { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_extshd")]
public EmptyNoYes OutputExtshd { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[Description("Not Implemented Yet")]
[JsonProperty("output_tarcog")]
public EmptyNoYes OutputTarcog { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
    }
    
    [Description("Output from EnergyPlus can be written to JSON format files.")]
    [JsonObject("Output:JSON")]
    public class Output_JSON : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("option_type")]
public Output_JSON_OptionType OptionType { get; set; } = (Output_JSON_OptionType)Enum.Parse(typeof(Output_JSON_OptionType), "TimeSeries");
        

[JsonProperty("output_json")]
public EmptyNoYes OutputJson { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("output_cbor")]
public EmptyNoYes OutputCbor { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("output_messagepack")]
public EmptyNoYes OutputMessagepack { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
    }
    
    public enum Output_JSON_OptionType
    {
        
        [JsonProperty("TimeSeries")]
        TimeSeries = 0,
        
        [JsonProperty("TimeSeriesAndTabular")]
        TimeSeriesAndTabular = 1,
    }
    
    [Description("Output from EnergyPlus can be written to an SQLite format file.")]
    [JsonObject("Output:SQLite")]
    public class Output_SQLite : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("option_type")]
public Output_SQLite_OptionType OptionType { get; set; } = (Output_SQLite_OptionType)Enum.Parse(typeof(Output_SQLite_OptionType), "Simple");
        

[Description("Unit conversion option used when writing SQLite Tabular Data This option applies " +
    "to TabularData and TabularDatawithString in the SQLite file")]
[JsonProperty("unit_conversion_for_tabular_data")]
public Output_SQLite_UnitConversionForTabularData UnitConversionForTabularData { get; set; } = (Output_SQLite_UnitConversionForTabularData)Enum.Parse(typeof(Output_SQLite_UnitConversionForTabularData), "UseOutputControlTableStyle");
    }
    
    public enum Output_SQLite_OptionType
    {
        
        [JsonProperty("Simple")]
        Simple = 0,
        
        [JsonProperty("SimpleAndTabular")]
        SimpleAndTabular = 1,
    }
    
    public enum Output_SQLite_UnitConversionForTabularData
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("InchPound")]
        InchPound = 1,
        
        [JsonProperty("JtoGJ")]
        JtoGJ = 2,
        
        [JsonProperty("JtoKWH")]
        JtoKWH = 3,
        
        [JsonProperty("JtoMJ")]
        JtoMJ = 4,
        
        [JsonProperty("None")]
        None = 5,
        
        [JsonProperty("UseOutputControlTableStyle")]
        UseOutputControlTableStyle = 6,
    }
    
    [Description("This is used to Automatically report the facility meters and turn on the Environm" +
        "ental Impact Report calculations for all of the Environmental Factors.")]
    [JsonObject("Output:EnvironmentalImpactFactors")]
    public class Output_EnvironmentalImpactFactors : BHoMObject, IEnergyPlusClass
    {
        

[Description("Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod " +
    "and Environment are the same. Detailed is not a valid choice.")]
[JsonProperty("reporting_frequency")]
public Output_EnvironmentalImpactFactors_ReportingFrequency ReportingFrequency { get; set; } = (Output_EnvironmentalImpactFactors_ReportingFrequency)Enum.Parse(typeof(Output_EnvironmentalImpactFactors_ReportingFrequency), "Annual");
    }
    
    public enum Output_EnvironmentalImpactFactors_ReportingFrequency
    {
        
        [JsonProperty("Annual")]
        Annual = 0,
        
        [JsonProperty("Daily")]
        Daily = 1,
        
        [JsonProperty("Environment")]
        Environment = 2,
        
        [JsonProperty("Hourly")]
        Hourly = 3,
        
        [JsonProperty("Monthly")]
        Monthly = 4,
        
        [JsonProperty("RunPeriod")]
        RunPeriod = 5,
        
        [JsonProperty("Timestep")]
        Timestep = 6,
    }
    
    [Description("Used to help convert district and ideal energy use to a fuel type and provide tot" +
        "al carbon equivalent with coefficients Also used in Source=>Site conversions.")]
    [JsonObject("EnvironmentalImpactFactors")]
    public class EnvironmentalImpactFactors : BHoMObject, IEnergyPlusClass
    {
        

[Description("District heating efficiency used when converted to natural gas")]
[JsonProperty("district_heating_efficiency")]
public System.Nullable<float> DistrictHeatingEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.3", CultureInfo.InvariantCulture);
        

[Description("District cooling COP used when converted to electricity")]
[JsonProperty("district_cooling_cop")]
public System.Nullable<float> DistrictCoolingCop { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description("Steam conversion efficiency used to convert steam usage to natural gas")]
[JsonProperty("steam_conversion_efficiency")]
public System.Nullable<float> SteamConversionEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.25", CultureInfo.InvariantCulture);
        

[JsonProperty("total_carbon_equivalent_emission_factor_from_n2o")]
public System.Nullable<float> TotalCarbonEquivalentEmissionFactorFromN2o { get; set; } = (System.Nullable<float>)Single.Parse("80.7272", CultureInfo.InvariantCulture);
        

[JsonProperty("total_carbon_equivalent_emission_factor_from_ch4")]
public System.Nullable<float> TotalCarbonEquivalentEmissionFactorFromCh4 { get; set; } = (System.Nullable<float>)Single.Parse("6.2727", CultureInfo.InvariantCulture);
        

[JsonProperty("total_carbon_equivalent_emission_factor_from_co2")]
public System.Nullable<float> TotalCarbonEquivalentEmissionFactorFromCo2 { get; set; } = (System.Nullable<float>)Single.Parse("0.2727", CultureInfo.InvariantCulture);
    }
    
    [Description("Provides Fuel Factors for Emissions as well as Source=>Site conversions. OtherFue" +
        "l1, OtherFuel2 provide options for users who want to create and use fuels that m" +
        "ay not be mainstream (biomass, wood, pellets).")]
    [JsonObject("FuelFactors")]
    public class FuelFactors : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("existing_fuel_resource_name")]
public FuelFactors_ExistingFuelResourceName ExistingFuelResourceName { get; set; } = (FuelFactors_ExistingFuelResourceName)Enum.Parse(typeof(FuelFactors_ExistingFuelResourceName), "Coal");
        

[JsonProperty("units_of_measure")]
public string UnitsOfMeasure { get; set; } = "";
        

[JsonProperty("energy_per_unit_factor")]
public System.Nullable<float> EnergyPerUnitFactor { get; set; } = null;
        

[JsonProperty("source_energy_factor")]
public System.Nullable<float> SourceEnergyFactor { get; set; } = null;
        

[JsonProperty("source_energy_schedule_name")]
public string SourceEnergyScheduleName { get; set; } = "";
        

[JsonProperty("co2_emission_factor")]
public System.Nullable<float> Co2EmissionFactor { get; set; } = null;
        

[JsonProperty("co2_emission_factor_schedule_name")]
public string Co2EmissionFactorScheduleName { get; set; } = "";
        

[JsonProperty("co_emission_factor")]
public System.Nullable<float> CoEmissionFactor { get; set; } = null;
        

[JsonProperty("co_emission_factor_schedule_name")]
public string CoEmissionFactorScheduleName { get; set; } = "";
        

[JsonProperty("ch4_emission_factor")]
public System.Nullable<float> Ch4EmissionFactor { get; set; } = null;
        

[JsonProperty("ch4_emission_factor_schedule_name")]
public string Ch4EmissionFactorScheduleName { get; set; } = "";
        

[JsonProperty("nox_emission_factor")]
public System.Nullable<float> NoxEmissionFactor { get; set; } = null;
        

[JsonProperty("nox_emission_factor_schedule_name")]
public string NoxEmissionFactorScheduleName { get; set; } = "";
        

[JsonProperty("n2o_emission_factor")]
public System.Nullable<float> N2oEmissionFactor { get; set; } = null;
        

[JsonProperty("n2o_emission_factor_schedule_name")]
public string N2oEmissionFactorScheduleName { get; set; } = "";
        

[JsonProperty("so2_emission_factor")]
public System.Nullable<float> So2EmissionFactor { get; set; } = null;
        

[JsonProperty("so2_emission_factor_schedule_name")]
public string So2EmissionFactorScheduleName { get; set; } = "";
        

[JsonProperty("pm_emission_factor")]
public System.Nullable<float> PmEmissionFactor { get; set; } = null;
        

[JsonProperty("pm_emission_factor_schedule_name")]
public string PmEmissionFactorScheduleName { get; set; } = "";
        

[JsonProperty("pm10_emission_factor")]
public System.Nullable<float> Pm10EmissionFactor { get; set; } = null;
        

[JsonProperty("pm10_emission_factor_schedule_name")]
public string Pm10EmissionFactorScheduleName { get; set; } = "";
        

[JsonProperty("pm2_5_emission_factor")]
public System.Nullable<float> Pm25EmissionFactor { get; set; } = null;
        

[JsonProperty("pm2_5_emission_factor_schedule_name")]
public string Pm25EmissionFactorScheduleName { get; set; } = "";
        

[JsonProperty("nh3_emission_factor")]
public System.Nullable<float> Nh3EmissionFactor { get; set; } = null;
        

[JsonProperty("nh3_emission_factor_schedule_name")]
public string Nh3EmissionFactorScheduleName { get; set; } = "";
        

[JsonProperty("nmvoc_emission_factor")]
public System.Nullable<float> NmvocEmissionFactor { get; set; } = null;
        

[JsonProperty("nmvoc_emission_factor_schedule_name")]
public string NmvocEmissionFactorScheduleName { get; set; } = "";
        

[JsonProperty("hg_emission_factor")]
public System.Nullable<float> HgEmissionFactor { get; set; } = null;
        

[JsonProperty("hg_emission_factor_schedule_name")]
public string HgEmissionFactorScheduleName { get; set; } = "";
        

[JsonProperty("pb_emission_factor")]
public System.Nullable<float> PbEmissionFactor { get; set; } = null;
        

[JsonProperty("pb_emission_factor_schedule_name")]
public string PbEmissionFactorScheduleName { get; set; } = "";
        

[JsonProperty("water_emission_factor")]
public System.Nullable<float> WaterEmissionFactor { get; set; } = null;
        

[JsonProperty("water_emission_factor_schedule_name")]
public string WaterEmissionFactorScheduleName { get; set; } = "";
        

[JsonProperty("nuclear_high_level_emission_factor")]
public System.Nullable<float> NuclearHighLevelEmissionFactor { get; set; } = null;
        

[JsonProperty("nuclear_high_level_emission_factor_schedule_name")]
public string NuclearHighLevelEmissionFactorScheduleName { get; set; } = "";
        

[JsonProperty("nuclear_low_level_emission_factor")]
public System.Nullable<float> NuclearLowLevelEmissionFactor { get; set; } = null;
        

[JsonProperty("nuclear_low_level_emission_factor_schedule_name")]
public string NuclearLowLevelEmissionFactorScheduleName { get; set; } = "";
    }
    
    public enum FuelFactors_ExistingFuelResourceName
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("Electricity")]
        Electricity = 2,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 3,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 4,
        
        [JsonProperty("Gasoline")]
        Gasoline = 5,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 6,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 7,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 8,
        
        [JsonProperty("Propane")]
        Propane = 9,
    }
    
    [Description("Special keys to produce certain warning messages or effect certain simulation cha" +
        "racteristics.")]
    [JsonObject("Output:Diagnostics")]
    public class Output_Diagnostics : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("diagnostics")]
public string Diagnostics { get; set; } = "";
    }
    
    [Description("switch eplusout.dbg file on or off")]
    [JsonObject("Output:DebuggingData")]
    public class Output_DebuggingData : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("report_debugging_data")]
public EmptyNoYes ReportDebuggingData { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("report_during_warmup")]
public EmptyNoYes ReportDuringWarmup { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
    }
    
    [Description("This object does not come from a user input. This is generated by a pre-processor" +
        " so that various conditions can be gracefully passed on by the InputProcessor.")]
    [JsonObject("Output:PreprocessorMessage")]
    public class Output_PreprocessorMessage : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("preprocessor_name")]
public string PreprocessorName { get; set; } = "";
        

[Description("Depending on type, InputProcessor may terminate the program.")]
[JsonProperty("error_severity")]
public Output_PreprocessorMessage_ErrorSeverity ErrorSeverity { get; set; } = (Output_PreprocessorMessage_ErrorSeverity)Enum.Parse(typeof(Output_PreprocessorMessage_ErrorSeverity), "Fatal");
        

[JsonProperty("message_line_1")]
public string MessageLine1 { get; set; } = "";
        

[JsonProperty("message_line_2")]
public string MessageLine2 { get; set; } = "";
        

[JsonProperty("message_line_3")]
public string MessageLine3 { get; set; } = "";
        

[JsonProperty("message_line_4")]
public string MessageLine4 { get; set; } = "";
        

[JsonProperty("message_line_5")]
public string MessageLine5 { get; set; } = "";
        

[JsonProperty("message_line_6")]
public string MessageLine6 { get; set; } = "";
        

[JsonProperty("message_line_7")]
public string MessageLine7 { get; set; } = "";
        

[JsonProperty("message_line_8")]
public string MessageLine8 { get; set; } = "";
        

[JsonProperty("message_line_9")]
public string MessageLine9 { get; set; } = "";
        

[JsonProperty("message_line_10")]
public string MessageLine10 { get; set; } = "";
    }
    
    public enum Output_PreprocessorMessage_ErrorSeverity
    {
        
        [JsonProperty("Fatal")]
        Fatal = 0,
        
        [JsonProperty("Information")]
        Information = 1,
        
        [JsonProperty("Severe")]
        Severe = 2,
        
        [JsonProperty("Warning")]
        Warning = 3,
    }
}
namespace BH.oM.Adapters.EnergyPlus.Parametrics
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Parametric objects allow a set of multiple simulations to be defined in a single idf file. The parametric preprocessor scans the idf for Parametric:* objects then creates and runs multiple idf files, one for each defined simulation. The core parametric object is Parametric:SetValueForRun which defines the name of a parameter and sets the parameter to different values depending on which run is being simulated.")]
    [JsonObject("Parametric:SetValueForRun")]
    public class Parametric_SetValueForRun : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("values")]
public string Values { get; set; } = "";
    }
    
    [Description(@"This object allows some types of objects to be included for some parametric cases and not for others. For example, you might want an overhang on a window in some parametric runs and not others. A single Parametric:Logic object is allowed per file. Consult the Input Output Reference for available commands and syntax.")]
    [JsonObject("Parametric:Logic")]
    public class Parametric_Logic : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("lines")]
public string Lines { get; set; } = "";
    }
    
    [Description("Controls which parametric runs are simulated. This object is optional. If it is n" +
        "ot included, then all parametric runs are performed.")]
    [JsonObject("Parametric:RunControl")]
    public class Parametric_RunControl : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("runs")]
public string Runs { get; set; } = "";
    }
    
    [Description("Defines the suffixes to be appended to the idf and output file names for each par" +
        "ametric run. If this object is omitted, the suffix will default to the run numbe" +
        "r.")]
    [JsonObject("Parametric:FileNameSuffix")]
    public class Parametric_FileNameSuffix : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("suffixes")]
public string Suffixes { get; set; } = "";
    }
}
namespace BH.oM.Adapters.EnergyPlus.PerformanceCurves
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Linear curve with one independent variable. Input for the linear curve consists of a curve name, the two coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x")]
    [JsonObject("Curve:Linear")]
    public class Curve_Linear : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coefficient1_constant")]
public System.Nullable<float> Coefficient1Constant { get; set; } = null;
        

[JsonProperty("coefficient2_x")]
public System.Nullable<float> Coefficient2X { get; set; } = null;
        

[JsonProperty("minimum_value_of_x")]
public System.Nullable<float> MinimumValueOfX { get; set; } = null;
        

[JsonProperty("maximum_value_of_x")]
public System.Nullable<float> MaximumValueOfX { get; set; } = null;
        

[Description("Specify the minimum value calculated by this curve object")]
[JsonProperty("minimum_curve_output")]
public System.Nullable<float> MinimumCurveOutput { get; set; } = null;
        

[Description("Specify the maximum value calculated by this curve object")]
[JsonProperty("maximum_curve_output")]
public System.Nullable<float> MaximumCurveOutput { get; set; } = null;
        

[JsonProperty("input_unit_type_for_x")]
public Curve_Linear_InputUnitTypeForX InputUnitTypeForX { get; set; } = (Curve_Linear_InputUnitTypeForX)Enum.Parse(typeof(Curve_Linear_InputUnitTypeForX), "Dimensionless");
        

[JsonProperty("output_unit_type")]
public Curve_Linear_OutputUnitType OutputUnitType { get; set; } = (Curve_Linear_OutputUnitType)Enum.Parse(typeof(Curve_Linear_OutputUnitType), "Dimensionless");
    }
    
    public enum Curve_Linear_InputUnitTypeForX
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Pressure")]
        Pressure = 5,
        
        [JsonProperty("Temperature")]
        Temperature = 6,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 7,
    }
    
    public enum Curve_Linear_OutputUnitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Linear curve with four independent variables. Input for the linear curve consists of a curve name, the two coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*w + C3*x + C4*y + C5*z")]
    [JsonObject("Curve:QuadLinear")]
    public class Curve_QuadLinear : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coefficient1_constant")]
public System.Nullable<float> Coefficient1Constant { get; set; } = null;
        

[JsonProperty("coefficient2_w")]
public System.Nullable<float> Coefficient2W { get; set; } = null;
        

[JsonProperty("coefficient3_x")]
public System.Nullable<float> Coefficient3X { get; set; } = null;
        

[JsonProperty("coefficient4_y")]
public System.Nullable<float> Coefficient4Y { get; set; } = null;
        

[JsonProperty("coefficient5_z")]
public System.Nullable<float> Coefficient5Z { get; set; } = null;
        

[JsonProperty("minimum_value_of_w")]
public System.Nullable<float> MinimumValueOfW { get; set; } = null;
        

[JsonProperty("maximum_value_of_w")]
public System.Nullable<float> MaximumValueOfW { get; set; } = null;
        

[JsonProperty("minimum_value_of_x")]
public System.Nullable<float> MinimumValueOfX { get; set; } = null;
        

[JsonProperty("maximum_value_of_x")]
public System.Nullable<float> MaximumValueOfX { get; set; } = null;
        

[JsonProperty("minimum_value_of_y")]
public System.Nullable<float> MinimumValueOfY { get; set; } = null;
        

[JsonProperty("maximum_value_of_y")]
public System.Nullable<float> MaximumValueOfY { get; set; } = null;
        

[JsonProperty("minimum_value_of_z")]
public System.Nullable<float> MinimumValueOfZ { get; set; } = null;
        

[JsonProperty("maximum_value_of_z")]
public System.Nullable<float> MaximumValueOfZ { get; set; } = null;
        

[Description("Specify the minimum value calculated by this curve object")]
[JsonProperty("minimum_curve_output")]
public System.Nullable<float> MinimumCurveOutput { get; set; } = null;
        

[Description("Specify the maximum value calculated by this curve object")]
[JsonProperty("maximum_curve_output")]
public System.Nullable<float> MaximumCurveOutput { get; set; } = null;
        

[JsonProperty("input_unit_type_for_w")]
public Curve_QuadLinear_InputUnitTypeForW InputUnitTypeForW { get; set; } = (Curve_QuadLinear_InputUnitTypeForW)Enum.Parse(typeof(Curve_QuadLinear_InputUnitTypeForW), "Dimensionless");
        

[JsonProperty("input_unit_type_for_x")]
public Curve_QuadLinear_InputUnitTypeForX InputUnitTypeForX { get; set; } = (Curve_QuadLinear_InputUnitTypeForX)Enum.Parse(typeof(Curve_QuadLinear_InputUnitTypeForX), "Dimensionless");
        

[JsonProperty("input_unit_type_for_y")]
public Curve_QuadLinear_InputUnitTypeForY InputUnitTypeForY { get; set; } = (Curve_QuadLinear_InputUnitTypeForY)Enum.Parse(typeof(Curve_QuadLinear_InputUnitTypeForY), "Dimensionless");
        

[JsonProperty("input_unit_type_for_z")]
public Curve_QuadLinear_InputUnitTypeForZ InputUnitTypeForZ { get; set; } = (Curve_QuadLinear_InputUnitTypeForZ)Enum.Parse(typeof(Curve_QuadLinear_InputUnitTypeForZ), "Dimensionless");
    }
    
    public enum Curve_QuadLinear_InputUnitTypeForW
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
        
        [JsonProperty("VolumetricFlowPerPower")]
        VolumetricFlowPerPower = 7,
    }
    
    public enum Curve_QuadLinear_InputUnitTypeForX
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
        
        [JsonProperty("VolumetricFlowPerPower")]
        VolumetricFlowPerPower = 7,
    }
    
    public enum Curve_QuadLinear_InputUnitTypeForY
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
        
        [JsonProperty("VolumetricFlowPerPower")]
        VolumetricFlowPerPower = 7,
    }
    
    public enum Curve_QuadLinear_InputUnitTypeForZ
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
        
        [JsonProperty("VolumetricFlowPerPower")]
        VolumetricFlowPerPower = 7,
    }
    
    [Description(@"Linear curve with five independent variables. Input for the linear curve consists of a curve name, the two coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*v + C3*w + C4*x + C5*y + C6*z")]
    [JsonObject("Curve:QuintLinear")]
    public class Curve_QuintLinear : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coefficient1_constant")]
public System.Nullable<float> Coefficient1Constant { get; set; } = null;
        

[JsonProperty("coefficient2_v")]
public System.Nullable<float> Coefficient2V { get; set; } = null;
        

[JsonProperty("coefficient3_w")]
public System.Nullable<float> Coefficient3W { get; set; } = null;
        

[JsonProperty("coefficient4_x")]
public System.Nullable<float> Coefficient4X { get; set; } = null;
        

[JsonProperty("coefficient5_y")]
public System.Nullable<float> Coefficient5Y { get; set; } = null;
        

[JsonProperty("coefficient6_z")]
public System.Nullable<float> Coefficient6Z { get; set; } = null;
        

[JsonProperty("minimum_value_of_v")]
public System.Nullable<float> MinimumValueOfV { get; set; } = null;
        

[JsonProperty("maximum_value_of_v")]
public System.Nullable<float> MaximumValueOfV { get; set; } = null;
        

[JsonProperty("minimum_value_of_w")]
public System.Nullable<float> MinimumValueOfW { get; set; } = null;
        

[JsonProperty("maximum_value_of_w")]
public System.Nullable<float> MaximumValueOfW { get; set; } = null;
        

[JsonProperty("minimum_value_of_x")]
public System.Nullable<float> MinimumValueOfX { get; set; } = null;
        

[JsonProperty("maximum_value_of_x")]
public System.Nullable<float> MaximumValueOfX { get; set; } = null;
        

[JsonProperty("minimum_value_of_y")]
public System.Nullable<float> MinimumValueOfY { get; set; } = null;
        

[JsonProperty("maximum_value_of_y")]
public System.Nullable<float> MaximumValueOfY { get; set; } = null;
        

[JsonProperty("minimum_value_of_z")]
public System.Nullable<float> MinimumValueOfZ { get; set; } = null;
        

[JsonProperty("maximum_value_of_z")]
public System.Nullable<float> MaximumValueOfZ { get; set; } = null;
        

[Description("Specify the minimum value calculated by this curve object")]
[JsonProperty("minimum_curve_output")]
public System.Nullable<float> MinimumCurveOutput { get; set; } = null;
        

[Description("Specify the maximum value calculated by this curve object")]
[JsonProperty("maximum_curve_output")]
public System.Nullable<float> MaximumCurveOutput { get; set; } = null;
        

[JsonProperty("input_unit_type_for_v")]
public Curve_QuintLinear_InputUnitTypeForV InputUnitTypeForV { get; set; } = (Curve_QuintLinear_InputUnitTypeForV)Enum.Parse(typeof(Curve_QuintLinear_InputUnitTypeForV), "Dimensionless");
        

[JsonProperty("input_unit_type_for_w")]
public Curve_QuintLinear_InputUnitTypeForW InputUnitTypeForW { get; set; } = (Curve_QuintLinear_InputUnitTypeForW)Enum.Parse(typeof(Curve_QuintLinear_InputUnitTypeForW), "Dimensionless");
        

[JsonProperty("input_unit_type_for_x")]
public Curve_QuintLinear_InputUnitTypeForX InputUnitTypeForX { get; set; } = (Curve_QuintLinear_InputUnitTypeForX)Enum.Parse(typeof(Curve_QuintLinear_InputUnitTypeForX), "Dimensionless");
        

[JsonProperty("input_unit_type_for_y")]
public Curve_QuintLinear_InputUnitTypeForY InputUnitTypeForY { get; set; } = (Curve_QuintLinear_InputUnitTypeForY)Enum.Parse(typeof(Curve_QuintLinear_InputUnitTypeForY), "Dimensionless");
        

[JsonProperty("input_unit_type_for_z")]
public Curve_QuintLinear_InputUnitTypeForZ InputUnitTypeForZ { get; set; } = (Curve_QuintLinear_InputUnitTypeForZ)Enum.Parse(typeof(Curve_QuintLinear_InputUnitTypeForZ), "Dimensionless");
    }
    
    public enum Curve_QuintLinear_InputUnitTypeForV
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
        
        [JsonProperty("VolumetricFlowPerPower")]
        VolumetricFlowPerPower = 7,
    }
    
    public enum Curve_QuintLinear_InputUnitTypeForW
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
        
        [JsonProperty("VolumetricFlowPerPower")]
        VolumetricFlowPerPower = 7,
    }
    
    public enum Curve_QuintLinear_InputUnitTypeForX
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
        
        [JsonProperty("VolumetricFlowPerPower")]
        VolumetricFlowPerPower = 7,
    }
    
    public enum Curve_QuintLinear_InputUnitTypeForY
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
        
        [JsonProperty("VolumetricFlowPerPower")]
        VolumetricFlowPerPower = 7,
    }
    
    public enum Curve_QuintLinear_InputUnitTypeForZ
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
        
        [JsonProperty("VolumetricFlowPerPower")]
        VolumetricFlowPerPower = 7,
    }
    
    [Description(@"Quadratic curve with one independent variable. Input for a quadratic curve consists of the curve name, the three coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x + C3*x**2")]
    [JsonObject("Curve:Quadratic")]
    public class Curve_Quadratic : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coefficient1_constant")]
public System.Nullable<float> Coefficient1Constant { get; set; } = null;
        

[JsonProperty("coefficient2_x")]
public System.Nullable<float> Coefficient2X { get; set; } = null;
        

[JsonProperty("coefficient3_x_2")]
public System.Nullable<float> Coefficient3X2 { get; set; } = null;
        

[JsonProperty("minimum_value_of_x")]
public System.Nullable<float> MinimumValueOfX { get; set; } = null;
        

[JsonProperty("maximum_value_of_x")]
public System.Nullable<float> MaximumValueOfX { get; set; } = null;
        

[Description("Specify the minimum value calculated by this curve object")]
[JsonProperty("minimum_curve_output")]
public System.Nullable<float> MinimumCurveOutput { get; set; } = null;
        

[Description("Specify the maximum value calculated by this curve object")]
[JsonProperty("maximum_curve_output")]
public System.Nullable<float> MaximumCurveOutput { get; set; } = null;
        

[JsonProperty("input_unit_type_for_x")]
public Curve_Quadratic_InputUnitTypeForX InputUnitTypeForX { get; set; } = (Curve_Quadratic_InputUnitTypeForX)Enum.Parse(typeof(Curve_Quadratic_InputUnitTypeForX), "Dimensionless");
        

[JsonProperty("output_unit_type")]
public Curve_Quadratic_OutputUnitType OutputUnitType { get; set; } = (Curve_Quadratic_OutputUnitType)Enum.Parse(typeof(Curve_Quadratic_OutputUnitType), "Dimensionless");
    }
    
    public enum Curve_Quadratic_InputUnitTypeForX
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum Curve_Quadratic_OutputUnitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Cubic curve with one independent variable. Input for a cubic curve consists of the curve name, the 4 coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x + C3*x**2 + C4*x**3")]
    [JsonObject("Curve:Cubic")]
    public class Curve_Cubic : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coefficient1_constant")]
public System.Nullable<float> Coefficient1Constant { get; set; } = null;
        

[JsonProperty("coefficient2_x")]
public System.Nullable<float> Coefficient2X { get; set; } = null;
        

[JsonProperty("coefficient3_x_2")]
public System.Nullable<float> Coefficient3X2 { get; set; } = null;
        

[JsonProperty("coefficient4_x_3")]
public System.Nullable<float> Coefficient4X3 { get; set; } = null;
        

[JsonProperty("minimum_value_of_x")]
public System.Nullable<float> MinimumValueOfX { get; set; } = null;
        

[JsonProperty("maximum_value_of_x")]
public System.Nullable<float> MaximumValueOfX { get; set; } = null;
        

[Description("Specify the minimum value calculated by this curve object")]
[JsonProperty("minimum_curve_output")]
public System.Nullable<float> MinimumCurveOutput { get; set; } = null;
        

[Description("Specify the maximum value calculated by this curve object")]
[JsonProperty("maximum_curve_output")]
public System.Nullable<float> MaximumCurveOutput { get; set; } = null;
        

[JsonProperty("input_unit_type_for_x")]
public Curve_Cubic_InputUnitTypeForX InputUnitTypeForX { get; set; } = (Curve_Cubic_InputUnitTypeForX)Enum.Parse(typeof(Curve_Cubic_InputUnitTypeForX), "Dimensionless");
        

[JsonProperty("output_unit_type")]
public Curve_Cubic_OutputUnitType OutputUnitType { get; set; } = (Curve_Cubic_OutputUnitType)Enum.Parse(typeof(Curve_Cubic_OutputUnitType), "Dimensionless");
    }
    
    public enum Curve_Cubic_InputUnitTypeForX
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum Curve_Cubic_OutputUnitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Quartic (fourth order polynomial) curve with one independent variable. Input for a Quartic curve consists of the curve name, the five coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x + C3*x**2 + C4*x**3 + C5*x**4")]
    [JsonObject("Curve:Quartic")]
    public class Curve_Quartic : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coefficient1_constant")]
public System.Nullable<float> Coefficient1Constant { get; set; } = null;
        

[JsonProperty("coefficient2_x")]
public System.Nullable<float> Coefficient2X { get; set; } = null;
        

[JsonProperty("coefficient3_x_2")]
public System.Nullable<float> Coefficient3X2 { get; set; } = null;
        

[JsonProperty("coefficient4_x_3")]
public System.Nullable<float> Coefficient4X3 { get; set; } = null;
        

[JsonProperty("coefficient5_x_4")]
public System.Nullable<float> Coefficient5X4 { get; set; } = null;
        

[JsonProperty("minimum_value_of_x")]
public System.Nullable<float> MinimumValueOfX { get; set; } = null;
        

[JsonProperty("maximum_value_of_x")]
public System.Nullable<float> MaximumValueOfX { get; set; } = null;
        

[Description("Specify the minimum value calculated by this curve object")]
[JsonProperty("minimum_curve_output")]
public System.Nullable<float> MinimumCurveOutput { get; set; } = null;
        

[Description("Specify the maximum value calculated by this curve object")]
[JsonProperty("maximum_curve_output")]
public System.Nullable<float> MaximumCurveOutput { get; set; } = null;
        

[JsonProperty("input_unit_type_for_x")]
public Curve_Quartic_InputUnitTypeForX InputUnitTypeForX { get; set; } = (Curve_Quartic_InputUnitTypeForX)Enum.Parse(typeof(Curve_Quartic_InputUnitTypeForX), "Dimensionless");
        

[JsonProperty("output_unit_type")]
public Curve_Quartic_OutputUnitType OutputUnitType { get; set; } = (Curve_Quartic_OutputUnitType)Enum.Parse(typeof(Curve_Quartic_OutputUnitType), "Dimensionless");
    }
    
    public enum Curve_Quartic_InputUnitTypeForX
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum Curve_Quartic_OutputUnitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Exponent curve with one independent variable. Input for a exponent curve consists of the curve name, the 3 coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x**C3 The independent variable x is raised to the C3 power, multiplied by C2, and C1 is added to the result.")]
    [JsonObject("Curve:Exponent")]
    public class Curve_Exponent : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coefficient1_constant")]
public System.Nullable<float> Coefficient1Constant { get; set; } = null;
        

[JsonProperty("coefficient2_constant")]
public System.Nullable<float> Coefficient2Constant { get; set; } = null;
        

[JsonProperty("coefficient3_constant")]
public System.Nullable<float> Coefficient3Constant { get; set; } = null;
        

[Description("Specify the minimum value of the independent variable x allowed")]
[JsonProperty("minimum_value_of_x")]
public System.Nullable<float> MinimumValueOfX { get; set; } = null;
        

[Description("Specify the maximum value of the independent variable x allowed")]
[JsonProperty("maximum_value_of_x")]
public System.Nullable<float> MaximumValueOfX { get; set; } = null;
        

[Description("Specify the minimum value calculated by this curve object")]
[JsonProperty("minimum_curve_output")]
public System.Nullable<float> MinimumCurveOutput { get; set; } = null;
        

[Description("Specify the maximum value calculated by this curve object")]
[JsonProperty("maximum_curve_output")]
public System.Nullable<float> MaximumCurveOutput { get; set; } = null;
        

[JsonProperty("input_unit_type_for_x")]
public Curve_Exponent_InputUnitTypeForX InputUnitTypeForX { get; set; } = (Curve_Exponent_InputUnitTypeForX)Enum.Parse(typeof(Curve_Exponent_InputUnitTypeForX), "Dimensionless");
        

[JsonProperty("output_unit_type")]
public Curve_Exponent_OutputUnitType OutputUnitType { get; set; } = (Curve_Exponent_OutputUnitType)Enum.Parse(typeof(Curve_Exponent_OutputUnitType), "Dimensionless");
    }
    
    public enum Curve_Exponent_InputUnitTypeForX
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum Curve_Exponent_OutputUnitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Cubic curve with two independent variables. Input consists of the curve name, the ten coefficients, and the minimum and maximum values for each of the independent variables. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x + C3*x**2 + C4*y + C5*y**2 + C6*x*y + C7*x**3 + C8*y**3 + C9*x**2*y + C10*x*y**2")]
    [JsonObject("Curve:Bicubic")]
    public class Curve_Bicubic : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coefficient1_constant")]
public System.Nullable<float> Coefficient1Constant { get; set; } = null;
        

[JsonProperty("coefficient2_x")]
public System.Nullable<float> Coefficient2X { get; set; } = null;
        

[JsonProperty("coefficient3_x_2")]
public System.Nullable<float> Coefficient3X2 { get; set; } = null;
        

[JsonProperty("coefficient4_y")]
public System.Nullable<float> Coefficient4Y { get; set; } = null;
        

[JsonProperty("coefficient5_y_2")]
public System.Nullable<float> Coefficient5Y2 { get; set; } = null;
        

[JsonProperty("coefficient6_x_y")]
public System.Nullable<float> Coefficient6XY { get; set; } = null;
        

[JsonProperty("coefficient7_x_3")]
public System.Nullable<float> Coefficient7X3 { get; set; } = null;
        

[JsonProperty("coefficient8_y_3")]
public System.Nullable<float> Coefficient8Y3 { get; set; } = null;
        

[JsonProperty("coefficient9_x_2_y")]
public System.Nullable<float> Coefficient9X2Y { get; set; } = null;
        

[JsonProperty("coefficient10_x_y_2")]
public System.Nullable<float> Coefficient10XY2 { get; set; } = null;
        

[JsonProperty("minimum_value_of_x")]
public System.Nullable<float> MinimumValueOfX { get; set; } = null;
        

[JsonProperty("maximum_value_of_x")]
public System.Nullable<float> MaximumValueOfX { get; set; } = null;
        

[JsonProperty("minimum_value_of_y")]
public System.Nullable<float> MinimumValueOfY { get; set; } = null;
        

[JsonProperty("maximum_value_of_y")]
public System.Nullable<float> MaximumValueOfY { get; set; } = null;
        

[Description("Specify the minimum value calculated by this curve object")]
[JsonProperty("minimum_curve_output")]
public System.Nullable<float> MinimumCurveOutput { get; set; } = null;
        

[Description("Specify the maximum value calculated by this curve object")]
[JsonProperty("maximum_curve_output")]
public System.Nullable<float> MaximumCurveOutput { get; set; } = null;
        

[JsonProperty("input_unit_type_for_x")]
public Curve_Bicubic_InputUnitTypeForX InputUnitTypeForX { get; set; } = (Curve_Bicubic_InputUnitTypeForX)Enum.Parse(typeof(Curve_Bicubic_InputUnitTypeForX), "Dimensionless");
        

[JsonProperty("input_unit_type_for_y")]
public Curve_Bicubic_InputUnitTypeForY InputUnitTypeForY { get; set; } = (Curve_Bicubic_InputUnitTypeForY)Enum.Parse(typeof(Curve_Bicubic_InputUnitTypeForY), "Dimensionless");
        

[JsonProperty("output_unit_type")]
public Curve_Bicubic_OutputUnitType OutputUnitType { get; set; } = (Curve_Bicubic_OutputUnitType)Enum.Parse(typeof(Curve_Bicubic_OutputUnitType), "Dimensionless");
    }
    
    public enum Curve_Bicubic_InputUnitTypeForX
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum Curve_Bicubic_InputUnitTypeForY
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum Curve_Bicubic_OutputUnitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Quadratic curve with two independent variables. Input consists of the curve name, the six coefficients, and min and max values for each of the independent variables. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x + C3*x**2 + C4*y + C5*y**2 + C6*x*y")]
    [JsonObject("Curve:Biquadratic")]
    public class Curve_Biquadratic : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coefficient1_constant")]
public System.Nullable<float> Coefficient1Constant { get; set; } = null;
        

[JsonProperty("coefficient2_x")]
public System.Nullable<float> Coefficient2X { get; set; } = null;
        

[JsonProperty("coefficient3_x_2")]
public System.Nullable<float> Coefficient3X2 { get; set; } = null;
        

[JsonProperty("coefficient4_y")]
public System.Nullable<float> Coefficient4Y { get; set; } = null;
        

[JsonProperty("coefficient5_y_2")]
public System.Nullable<float> Coefficient5Y2 { get; set; } = null;
        

[JsonProperty("coefficient6_x_y")]
public System.Nullable<float> Coefficient6XY { get; set; } = null;
        

[JsonProperty("minimum_value_of_x")]
public System.Nullable<float> MinimumValueOfX { get; set; } = null;
        

[JsonProperty("maximum_value_of_x")]
public System.Nullable<float> MaximumValueOfX { get; set; } = null;
        

[JsonProperty("minimum_value_of_y")]
public System.Nullable<float> MinimumValueOfY { get; set; } = null;
        

[JsonProperty("maximum_value_of_y")]
public System.Nullable<float> MaximumValueOfY { get; set; } = null;
        

[Description("Specify the minimum value calculated by this curve object")]
[JsonProperty("minimum_curve_output")]
public System.Nullable<float> MinimumCurveOutput { get; set; } = null;
        

[Description("Specify the maximum value calculated by this curve object")]
[JsonProperty("maximum_curve_output")]
public System.Nullable<float> MaximumCurveOutput { get; set; } = null;
        

[JsonProperty("input_unit_type_for_x")]
public Curve_Biquadratic_InputUnitTypeForX InputUnitTypeForX { get; set; } = (Curve_Biquadratic_InputUnitTypeForX)Enum.Parse(typeof(Curve_Biquadratic_InputUnitTypeForX), "Dimensionless");
        

[JsonProperty("input_unit_type_for_y")]
public Curve_Biquadratic_InputUnitTypeForY InputUnitTypeForY { get; set; } = (Curve_Biquadratic_InputUnitTypeForY)Enum.Parse(typeof(Curve_Biquadratic_InputUnitTypeForY), "Dimensionless");
        

[JsonProperty("output_unit_type")]
public Curve_Biquadratic_OutputUnitType OutputUnitType { get; set; } = (Curve_Biquadratic_OutputUnitType)Enum.Parse(typeof(Curve_Biquadratic_OutputUnitType), "Dimensionless");
    }
    
    public enum Curve_Biquadratic_InputUnitTypeForX
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum Curve_Biquadratic_InputUnitTypeForY
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum Curve_Biquadratic_OutputUnitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Quadratic-linear curve with two independent variables. Input consists of the curve name, the six coefficients, and min and max values for each of the independent variables. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = (C1 + C2*x + C3*x**2) + (C4 + C5*x + C6*x**2)*y")]
    [JsonObject("Curve:QuadraticLinear")]
    public class Curve_QuadraticLinear : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coefficient1_constant")]
public System.Nullable<float> Coefficient1Constant { get; set; } = null;
        

[JsonProperty("coefficient2_x")]
public System.Nullable<float> Coefficient2X { get; set; } = null;
        

[JsonProperty("coefficient3_x_2")]
public System.Nullable<float> Coefficient3X2 { get; set; } = null;
        

[JsonProperty("coefficient4_y")]
public System.Nullable<float> Coefficient4Y { get; set; } = null;
        

[JsonProperty("coefficient5_x_y")]
public System.Nullable<float> Coefficient5XY { get; set; } = null;
        

[JsonProperty("coefficient6_x_2_y")]
public System.Nullable<float> Coefficient6X2Y { get; set; } = null;
        

[JsonProperty("minimum_value_of_x")]
public System.Nullable<float> MinimumValueOfX { get; set; } = null;
        

[JsonProperty("maximum_value_of_x")]
public System.Nullable<float> MaximumValueOfX { get; set; } = null;
        

[JsonProperty("minimum_value_of_y")]
public System.Nullable<float> MinimumValueOfY { get; set; } = null;
        

[JsonProperty("maximum_value_of_y")]
public System.Nullable<float> MaximumValueOfY { get; set; } = null;
        

[Description("Specify the minimum value calculated by this curve object")]
[JsonProperty("minimum_curve_output")]
public System.Nullable<float> MinimumCurveOutput { get; set; } = null;
        

[Description("Specify the maximum value calculated by this curve object")]
[JsonProperty("maximum_curve_output")]
public System.Nullable<float> MaximumCurveOutput { get; set; } = null;
        

[JsonProperty("input_unit_type_for_x")]
public Curve_QuadraticLinear_InputUnitTypeForX InputUnitTypeForX { get; set; } = (Curve_QuadraticLinear_InputUnitTypeForX)Enum.Parse(typeof(Curve_QuadraticLinear_InputUnitTypeForX), "Dimensionless");
        

[JsonProperty("input_unit_type_for_y")]
public Curve_QuadraticLinear_InputUnitTypeForY InputUnitTypeForY { get; set; } = (Curve_QuadraticLinear_InputUnitTypeForY)Enum.Parse(typeof(Curve_QuadraticLinear_InputUnitTypeForY), "Dimensionless");
        

[JsonProperty("output_unit_type")]
public Curve_QuadraticLinear_OutputUnitType OutputUnitType { get; set; } = (Curve_QuadraticLinear_OutputUnitType)Enum.Parse(typeof(Curve_QuadraticLinear_OutputUnitType), "Dimensionless");
    }
    
    public enum Curve_QuadraticLinear_InputUnitTypeForX
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum Curve_QuadraticLinear_InputUnitTypeForY
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum Curve_QuadraticLinear_OutputUnitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Cubic-linear curve with two independent variables. Input consists of the curve name, the six coefficients, and min and max values for each of the independent variables. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = (C1 + C2*x + C3*x**2 + C4*x**3) + (C5 + C6*x)*y")]
    [JsonObject("Curve:CubicLinear")]
    public class Curve_CubicLinear : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coefficient1_constant")]
public System.Nullable<float> Coefficient1Constant { get; set; } = null;
        

[JsonProperty("coefficient2_x")]
public System.Nullable<float> Coefficient2X { get; set; } = null;
        

[JsonProperty("coefficient3_x_2")]
public System.Nullable<float> Coefficient3X2 { get; set; } = null;
        

[JsonProperty("coefficient4_x_3")]
public System.Nullable<float> Coefficient4X3 { get; set; } = null;
        

[JsonProperty("coefficient5_y")]
public System.Nullable<float> Coefficient5Y { get; set; } = null;
        

[JsonProperty("coefficient6_x_y")]
public System.Nullable<float> Coefficient6XY { get; set; } = null;
        

[JsonProperty("minimum_value_of_x")]
public System.Nullable<float> MinimumValueOfX { get; set; } = null;
        

[JsonProperty("maximum_value_of_x")]
public System.Nullable<float> MaximumValueOfX { get; set; } = null;
        

[JsonProperty("minimum_value_of_y")]
public System.Nullable<float> MinimumValueOfY { get; set; } = null;
        

[JsonProperty("maximum_value_of_y")]
public System.Nullable<float> MaximumValueOfY { get; set; } = null;
        

[Description("Specify the minimum value calculated by this curve object")]
[JsonProperty("minimum_curve_output")]
public System.Nullable<float> MinimumCurveOutput { get; set; } = null;
        

[Description("Specify the maximum value calculated by this curve object")]
[JsonProperty("maximum_curve_output")]
public System.Nullable<float> MaximumCurveOutput { get; set; } = null;
        

[JsonProperty("input_unit_type_for_x")]
public Curve_CubicLinear_InputUnitTypeForX InputUnitTypeForX { get; set; } = (Curve_CubicLinear_InputUnitTypeForX)Enum.Parse(typeof(Curve_CubicLinear_InputUnitTypeForX), "Dimensionless");
        

[JsonProperty("input_unit_type_for_y")]
public Curve_CubicLinear_InputUnitTypeForY InputUnitTypeForY { get; set; } = (Curve_CubicLinear_InputUnitTypeForY)Enum.Parse(typeof(Curve_CubicLinear_InputUnitTypeForY), "Dimensionless");
        

[JsonProperty("output_unit_type")]
public Curve_CubicLinear_OutputUnitType OutputUnitType { get; set; } = (Curve_CubicLinear_OutputUnitType)Enum.Parse(typeof(Curve_CubicLinear_OutputUnitType), "Dimensionless");
    }
    
    public enum Curve_CubicLinear_InputUnitTypeForX
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Temperature")]
        Temperature = 2,
    }
    
    public enum Curve_CubicLinear_InputUnitTypeForY
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Temperature")]
        Temperature = 2,
    }
    
    public enum Curve_CubicLinear_OutputUnitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Quadratic curve with three independent variables. Input consists of the curve name, the twenty seven coefficients, and min and max values for each of the independent variables. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = a0 + a1*x**2 + a2*x + a3*y**2 + a4*y + a5*z**2 + a6*z + a7*x**2*y**2 + a8*x*y + a9*x*y**2 + a10*x**2*y + a11*x**2*z**2 + a12*x*z + a13*x*z**2 + a14*x**2*z + a15*y**2*z**2 + a16*y*z + a17*y*z**2 + a18*y**2*z + a19*x**2*y**2*z**2 + a20*x**2*y**2*z + a21*x**2*y*z**2 + a22*x*y**2*z**2 + a23*x**2*y*z + a24*x*y**2*z + a25*x*y*z**2 +a26*x*y*z")]
    [JsonObject("Curve:Triquadratic")]
    public class Curve_Triquadratic : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coefficient1_constant")]
public System.Nullable<float> Coefficient1Constant { get; set; } = null;
        

[JsonProperty("coefficient2_x_2")]
public System.Nullable<float> Coefficient2X2 { get; set; } = null;
        

[JsonProperty("coefficient3_x")]
public System.Nullable<float> Coefficient3X { get; set; } = null;
        

[JsonProperty("coefficient4_y_2")]
public System.Nullable<float> Coefficient4Y2 { get; set; } = null;
        

[JsonProperty("coefficient5_y")]
public System.Nullable<float> Coefficient5Y { get; set; } = null;
        

[JsonProperty("coefficient6_z_2")]
public System.Nullable<float> Coefficient6Z2 { get; set; } = null;
        

[JsonProperty("coefficient7_z")]
public System.Nullable<float> Coefficient7Z { get; set; } = null;
        

[JsonProperty("coefficient8_x_2_y_2")]
public System.Nullable<float> Coefficient8X2Y2 { get; set; } = null;
        

[JsonProperty("coefficient9_x_y")]
public System.Nullable<float> Coefficient9XY { get; set; } = null;
        

[JsonProperty("coefficient10_x_y_2")]
public System.Nullable<float> Coefficient10XY2 { get; set; } = null;
        

[JsonProperty("coefficient11_x_2_y")]
public System.Nullable<float> Coefficient11X2Y { get; set; } = null;
        

[JsonProperty("coefficient12_x_2_z_2")]
public System.Nullable<float> Coefficient12X2Z2 { get; set; } = null;
        

[JsonProperty("coefficient13_x_z")]
public System.Nullable<float> Coefficient13XZ { get; set; } = null;
        

[JsonProperty("coefficient14_x_z_2")]
public System.Nullable<float> Coefficient14XZ2 { get; set; } = null;
        

[JsonProperty("coefficient15_x_2_z")]
public System.Nullable<float> Coefficient15X2Z { get; set; } = null;
        

[JsonProperty("coefficient16_y_2_z_2")]
public System.Nullable<float> Coefficient16Y2Z2 { get; set; } = null;
        

[JsonProperty("coefficient17_y_z")]
public System.Nullable<float> Coefficient17YZ { get; set; } = null;
        

[JsonProperty("coefficient18_y_z_2")]
public System.Nullable<float> Coefficient18YZ2 { get; set; } = null;
        

[JsonProperty("coefficient19_y_2_z")]
public System.Nullable<float> Coefficient19Y2Z { get; set; } = null;
        

[JsonProperty("coefficient20_x_2_y_2_z_2")]
public System.Nullable<float> Coefficient20X2Y2Z2 { get; set; } = null;
        

[JsonProperty("coefficient21_x_2_y_2_z")]
public System.Nullable<float> Coefficient21X2Y2Z { get; set; } = null;
        

[JsonProperty("coefficient22_x_2_y_z_2")]
public System.Nullable<float> Coefficient22X2YZ2 { get; set; } = null;
        

[JsonProperty("coefficient23_x_y_2_z_2")]
public System.Nullable<float> Coefficient23XY2Z2 { get; set; } = null;
        

[JsonProperty("coefficient24_x_2_y_z")]
public System.Nullable<float> Coefficient24X2YZ { get; set; } = null;
        

[JsonProperty("coefficient25_x_y_2_z")]
public System.Nullable<float> Coefficient25XY2Z { get; set; } = null;
        

[JsonProperty("coefficient26_x_y_z_2")]
public System.Nullable<float> Coefficient26XYZ2 { get; set; } = null;
        

[JsonProperty("coefficient27_x_y_z")]
public System.Nullable<float> Coefficient27XYZ { get; set; } = null;
        

[JsonProperty("minimum_value_of_x")]
public System.Nullable<float> MinimumValueOfX { get; set; } = null;
        

[JsonProperty("maximum_value_of_x")]
public System.Nullable<float> MaximumValueOfX { get; set; } = null;
        

[JsonProperty("minimum_value_of_y")]
public System.Nullable<float> MinimumValueOfY { get; set; } = null;
        

[JsonProperty("maximum_value_of_y")]
public System.Nullable<float> MaximumValueOfY { get; set; } = null;
        

[JsonProperty("minimum_value_of_z")]
public System.Nullable<float> MinimumValueOfZ { get; set; } = null;
        

[JsonProperty("maximum_value_of_z")]
public System.Nullable<float> MaximumValueOfZ { get; set; } = null;
        

[Description("Specify the minimum value calculated by this curve object")]
[JsonProperty("minimum_curve_output")]
public System.Nullable<float> MinimumCurveOutput { get; set; } = null;
        

[Description("Specify the maximum value calculated by this curve object")]
[JsonProperty("maximum_curve_output")]
public System.Nullable<float> MaximumCurveOutput { get; set; } = null;
        

[JsonProperty("input_unit_type_for_x")]
public Curve_Triquadratic_InputUnitTypeForX InputUnitTypeForX { get; set; } = (Curve_Triquadratic_InputUnitTypeForX)Enum.Parse(typeof(Curve_Triquadratic_InputUnitTypeForX), "Dimensionless");
        

[JsonProperty("input_unit_type_for_y")]
public Curve_Triquadratic_InputUnitTypeForY InputUnitTypeForY { get; set; } = (Curve_Triquadratic_InputUnitTypeForY)Enum.Parse(typeof(Curve_Triquadratic_InputUnitTypeForY), "Dimensionless");
        

[JsonProperty("input_unit_type_for_z")]
public Curve_Triquadratic_InputUnitTypeForZ InputUnitTypeForZ { get; set; } = (Curve_Triquadratic_InputUnitTypeForZ)Enum.Parse(typeof(Curve_Triquadratic_InputUnitTypeForZ), "Dimensionless");
        

[JsonProperty("output_unit_type")]
public Curve_Triquadratic_OutputUnitType OutputUnitType { get; set; } = (Curve_Triquadratic_OutputUnitType)Enum.Parse(typeof(Curve_Triquadratic_OutputUnitType), "Dimensionless");
    }
    
    public enum Curve_Triquadratic_InputUnitTypeForX
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum Curve_Triquadratic_InputUnitTypeForY
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum Curve_Triquadratic_InputUnitTypeForZ
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum Curve_Triquadratic_OutputUnitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description("Sets up curve information for minor loss and/or friction calculations in plant pr" +
        "essure simulations Expression: DeltaP = {K + f*(L/D)} * (rho * V^2) / 2")]
    [JsonObject("Curve:Functional:PressureDrop")]
    public class Curve_Functional_PressureDrop : BHoMObject, IEnergyPlusClass
    {
        

[Description("\"D\" in above expression, used to also calculate local velocity")]
[JsonProperty("diameter")]
public System.Nullable<float> Diameter { get; set; } = null;
        

[Description("\"K\" in above expression")]
[JsonProperty("minor_loss_coefficient")]
public System.Nullable<float> MinorLossCoefficient { get; set; } = null;
        

[Description("\"L\" in above expression")]
[JsonProperty("length")]
public System.Nullable<float> Length { get; set; } = null;
        

[Description("This will be used to calculate \"f\" from Moody-chart approximations")]
[JsonProperty("roughness")]
public System.Nullable<float> Roughness { get; set; } = null;
        

[Description("Optional way to set a constant value for \"f\", instead of using internal Moody-cha" +
    "rt approximations")]
[JsonProperty("fixed_friction_factor")]
public System.Nullable<float> FixedFrictionFactor { get; set; } = null;
    }
    
    [Description(@"Special curve type with two independent variables. Input for the fan total pressure rise curve consists of the curve name, the four coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = C1*Qfan**2+C2*Qfan+C3*Qfan*(Psm-Po)**0.5+C4*(Psm-Po) Po assumed to be zero See InputOut Reference for curve details")]
    [JsonObject("Curve:FanPressureRise")]
    public class Curve_FanPressureRise : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coefficient1_c1")]
public System.Nullable<float> Coefficient1C1 { get; set; } = null;
        

[JsonProperty("coefficient2_c2")]
public System.Nullable<float> Coefficient2C2 { get; set; } = null;
        

[JsonProperty("coefficient3_c3")]
public System.Nullable<float> Coefficient3C3 { get; set; } = null;
        

[JsonProperty("coefficient4_c4")]
public System.Nullable<float> Coefficient4C4 { get; set; } = null;
        

[JsonProperty("minimum_value_of_qfan")]
public System.Nullable<float> MinimumValueOfQfan { get; set; } = null;
        

[JsonProperty("maximum_value_of_qfan")]
public System.Nullable<float> MaximumValueOfQfan { get; set; } = null;
        

[JsonProperty("minimum_value_of_psm")]
public System.Nullable<float> MinimumValueOfPsm { get; set; } = null;
        

[JsonProperty("maximum_value_of_psm")]
public System.Nullable<float> MaximumValueOfPsm { get; set; } = null;
        

[Description("Specify the minimum value calculated by this curve object")]
[JsonProperty("minimum_curve_output")]
public System.Nullable<float> MinimumCurveOutput { get; set; } = null;
        

[Description("Specify the maximum value calculated by this curve object")]
[JsonProperty("maximum_curve_output")]
public System.Nullable<float> MaximumCurveOutput { get; set; } = null;
    }
    
    [Description(@"Exponential-modified skew normal curve with one independent variable. Input consists of the curve name, the four coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = see Input Output Reference")]
    [JsonObject("Curve:ExponentialSkewNormal")]
    public class Curve_ExponentialSkewNormal : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coefficient1_c1")]
public System.Nullable<float> Coefficient1C1 { get; set; } = null;
        

[JsonProperty("coefficient2_c2")]
public System.Nullable<float> Coefficient2C2 { get; set; } = null;
        

[JsonProperty("coefficient3_c3")]
public System.Nullable<float> Coefficient3C3 { get; set; } = null;
        

[JsonProperty("coefficient4_c4")]
public System.Nullable<float> Coefficient4C4 { get; set; } = null;
        

[JsonProperty("minimum_value_of_x")]
public System.Nullable<float> MinimumValueOfX { get; set; } = null;
        

[JsonProperty("maximum_value_of_x")]
public System.Nullable<float> MaximumValueOfX { get; set; } = null;
        

[Description("Specify the minimum value calculated by this curve object")]
[JsonProperty("minimum_curve_output")]
public System.Nullable<float> MinimumCurveOutput { get; set; } = null;
        

[Description("Specify the maximum value calculated by this curve object")]
[JsonProperty("maximum_curve_output")]
public System.Nullable<float> MaximumCurveOutput { get; set; } = null;
        

[JsonProperty("input_unit_type_for_x")]
public Curve_ExponentialSkewNormal_InputUnitTypeForX InputUnitTypeForX { get; set; } = (Curve_ExponentialSkewNormal_InputUnitTypeForX)Enum.Parse(typeof(Curve_ExponentialSkewNormal_InputUnitTypeForX), "Dimensionless");
        

[JsonProperty("output_unit_type")]
public Curve_ExponentialSkewNormal_OutputUnitType OutputUnitType { get; set; } = (Curve_ExponentialSkewNormal_OutputUnitType)Enum.Parse(typeof(Curve_ExponentialSkewNormal_OutputUnitType), "Dimensionless");
    }
    
    public enum Curve_ExponentialSkewNormal_InputUnitTypeForX
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
    }
    
    public enum Curve_ExponentialSkewNormal_OutputUnitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Sigmoid curve with one independent variable. Input consists of the curve name, the five coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = C1+C2/[1+exp((C3-x)/C4)]**C5")]
    [JsonObject("Curve:Sigmoid")]
    public class Curve_Sigmoid : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coefficient1_c1")]
public System.Nullable<float> Coefficient1C1 { get; set; } = null;
        

[JsonProperty("coefficient2_c2")]
public System.Nullable<float> Coefficient2C2 { get; set; } = null;
        

[JsonProperty("coefficient3_c3")]
public System.Nullable<float> Coefficient3C3 { get; set; } = null;
        

[JsonProperty("coefficient4_c4")]
public System.Nullable<float> Coefficient4C4 { get; set; } = null;
        

[JsonProperty("coefficient5_c5")]
public System.Nullable<float> Coefficient5C5 { get; set; } = null;
        

[JsonProperty("minimum_value_of_x")]
public System.Nullable<float> MinimumValueOfX { get; set; } = null;
        

[JsonProperty("maximum_value_of_x")]
public System.Nullable<float> MaximumValueOfX { get; set; } = null;
        

[Description("Specify the minimum value calculated by this curve object")]
[JsonProperty("minimum_curve_output")]
public System.Nullable<float> MinimumCurveOutput { get; set; } = null;
        

[Description("Specify the maximum value calculated by this curve object")]
[JsonProperty("maximum_curve_output")]
public System.Nullable<float> MaximumCurveOutput { get; set; } = null;
        

[JsonProperty("input_unit_type_for_x")]
public Curve_Sigmoid_InputUnitTypeForX InputUnitTypeForX { get; set; } = (Curve_Sigmoid_InputUnitTypeForX)Enum.Parse(typeof(Curve_Sigmoid_InputUnitTypeForX), "Dimensionless");
        

[JsonProperty("output_unit_type")]
public Curve_Sigmoid_OutputUnitType OutputUnitType { get; set; } = (Curve_Sigmoid_OutputUnitType)Enum.Parse(typeof(Curve_Sigmoid_OutputUnitType), "Dimensionless");
    }
    
    public enum Curve_Sigmoid_InputUnitTypeForX
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
    }
    
    public enum Curve_Sigmoid_OutputUnitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Rectangular hyperbola type 1 curve with one independent variable. Input consists of the curve name, the three coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = ((C1*x)/(C2+x))+C3")]
    [JsonObject("Curve:RectangularHyperbola1")]
    public class Curve_RectangularHyperbola1 : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coefficient1_c1")]
public System.Nullable<float> Coefficient1C1 { get; set; } = null;
        

[JsonProperty("coefficient2_c2")]
public System.Nullable<float> Coefficient2C2 { get; set; } = null;
        

[JsonProperty("coefficient3_c3")]
public System.Nullable<float> Coefficient3C3 { get; set; } = null;
        

[JsonProperty("minimum_value_of_x")]
public System.Nullable<float> MinimumValueOfX { get; set; } = null;
        

[JsonProperty("maximum_value_of_x")]
public System.Nullable<float> MaximumValueOfX { get; set; } = null;
        

[Description("Specify the minimum value calculated by this curve object")]
[JsonProperty("minimum_curve_output")]
public System.Nullable<float> MinimumCurveOutput { get; set; } = null;
        

[Description("Specify the maximum value calculated by this curve object")]
[JsonProperty("maximum_curve_output")]
public System.Nullable<float> MaximumCurveOutput { get; set; } = null;
        

[JsonProperty("input_unit_type_for_x")]
public Curve_RectangularHyperbola1_InputUnitTypeForX InputUnitTypeForX { get; set; } = (Curve_RectangularHyperbola1_InputUnitTypeForX)Enum.Parse(typeof(Curve_RectangularHyperbola1_InputUnitTypeForX), "Dimensionless");
        

[JsonProperty("output_unit_type")]
public Curve_RectangularHyperbola1_OutputUnitType OutputUnitType { get; set; } = (Curve_RectangularHyperbola1_OutputUnitType)Enum.Parse(typeof(Curve_RectangularHyperbola1_OutputUnitType), "Dimensionless");
    }
    
    public enum Curve_RectangularHyperbola1_InputUnitTypeForX
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
    }
    
    public enum Curve_RectangularHyperbola1_OutputUnitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Rectangular hyperbola type 2 curve with one independent variable. Input consists of the curve name, the three coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = ((C1*x)/(C2+x))+(C3*x)")]
    [JsonObject("Curve:RectangularHyperbola2")]
    public class Curve_RectangularHyperbola2 : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coefficient1_c1")]
public System.Nullable<float> Coefficient1C1 { get; set; } = null;
        

[JsonProperty("coefficient2_c2")]
public System.Nullable<float> Coefficient2C2 { get; set; } = null;
        

[JsonProperty("coefficient3_c3")]
public System.Nullable<float> Coefficient3C3 { get; set; } = null;
        

[JsonProperty("minimum_value_of_x")]
public System.Nullable<float> MinimumValueOfX { get; set; } = null;
        

[JsonProperty("maximum_value_of_x")]
public System.Nullable<float> MaximumValueOfX { get; set; } = null;
        

[Description("Specify the minimum value calculated by this curve object")]
[JsonProperty("minimum_curve_output")]
public System.Nullable<float> MinimumCurveOutput { get; set; } = null;
        

[Description("Specify the maximum value calculated by this curve object")]
[JsonProperty("maximum_curve_output")]
public System.Nullable<float> MaximumCurveOutput { get; set; } = null;
        

[JsonProperty("input_unit_type_for_x")]
public Curve_RectangularHyperbola2_InputUnitTypeForX InputUnitTypeForX { get; set; } = (Curve_RectangularHyperbola2_InputUnitTypeForX)Enum.Parse(typeof(Curve_RectangularHyperbola2_InputUnitTypeForX), "Dimensionless");
        

[JsonProperty("output_unit_type")]
public Curve_RectangularHyperbola2_OutputUnitType OutputUnitType { get; set; } = (Curve_RectangularHyperbola2_OutputUnitType)Enum.Parse(typeof(Curve_RectangularHyperbola2_OutputUnitType), "Dimensionless");
    }
    
    public enum Curve_RectangularHyperbola2_InputUnitTypeForX
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
    }
    
    public enum Curve_RectangularHyperbola2_OutputUnitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Exponential decay curve with one independent variable. Input consists of the curve name, the three coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = C1+C2*exp(C3*x)")]
    [JsonObject("Curve:ExponentialDecay")]
    public class Curve_ExponentialDecay : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coefficient1_c1")]
public System.Nullable<float> Coefficient1C1 { get; set; } = null;
        

[JsonProperty("coefficient2_c2")]
public System.Nullable<float> Coefficient2C2 { get; set; } = null;
        

[JsonProperty("coefficient3_c3")]
public System.Nullable<float> Coefficient3C3 { get; set; } = null;
        

[JsonProperty("minimum_value_of_x")]
public System.Nullable<float> MinimumValueOfX { get; set; } = null;
        

[JsonProperty("maximum_value_of_x")]
public System.Nullable<float> MaximumValueOfX { get; set; } = null;
        

[Description("Specify the minimum value calculated by this curve object")]
[JsonProperty("minimum_curve_output")]
public System.Nullable<float> MinimumCurveOutput { get; set; } = null;
        

[Description("Specify the maximum value calculated by this curve object")]
[JsonProperty("maximum_curve_output")]
public System.Nullable<float> MaximumCurveOutput { get; set; } = null;
        

[JsonProperty("input_unit_type_for_x")]
public Curve_ExponentialDecay_InputUnitTypeForX InputUnitTypeForX { get; set; } = (Curve_ExponentialDecay_InputUnitTypeForX)Enum.Parse(typeof(Curve_ExponentialDecay_InputUnitTypeForX), "Dimensionless");
        

[JsonProperty("output_unit_type")]
public Curve_ExponentialDecay_OutputUnitType OutputUnitType { get; set; } = (Curve_ExponentialDecay_OutputUnitType)Enum.Parse(typeof(Curve_ExponentialDecay_OutputUnitType), "Dimensionless");
    }
    
    public enum Curve_ExponentialDecay_InputUnitTypeForX
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
    }
    
    public enum Curve_ExponentialDecay_OutputUnitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Double exponential decay curve with one independent variable. Input consists of the curve name, the five coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = C1+C2*exp(C3*x)+C4*exp(C5*x)")]
    [JsonObject("Curve:DoubleExponentialDecay")]
    public class Curve_DoubleExponentialDecay : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coefficient1_c1")]
public System.Nullable<float> Coefficient1C1 { get; set; } = null;
        

[JsonProperty("coefficient2_c2")]
public System.Nullable<float> Coefficient2C2 { get; set; } = null;
        

[JsonProperty("coefficient3_c3")]
public System.Nullable<float> Coefficient3C3 { get; set; } = null;
        

[JsonProperty("coefficient4_c4")]
public System.Nullable<float> Coefficient4C4 { get; set; } = null;
        

[JsonProperty("coefficient5_c5")]
public System.Nullable<float> Coefficient5C5 { get; set; } = null;
        

[JsonProperty("minimum_value_of_x")]
public System.Nullable<float> MinimumValueOfX { get; set; } = null;
        

[JsonProperty("maximum_value_of_x")]
public System.Nullable<float> MaximumValueOfX { get; set; } = null;
        

[Description("Specify the minimum value calculated by this curve object")]
[JsonProperty("minimum_curve_output")]
public System.Nullable<float> MinimumCurveOutput { get; set; } = null;
        

[Description("Specify the maximum value calculated by this curve object")]
[JsonProperty("maximum_curve_output")]
public System.Nullable<float> MaximumCurveOutput { get; set; } = null;
        

[JsonProperty("input_unit_type_for_x")]
public Curve_DoubleExponentialDecay_InputUnitTypeForX InputUnitTypeForX { get; set; } = (Curve_DoubleExponentialDecay_InputUnitTypeForX)Enum.Parse(typeof(Curve_DoubleExponentialDecay_InputUnitTypeForX), "Dimensionless");
        

[JsonProperty("output_unit_type")]
public Curve_DoubleExponentialDecay_OutputUnitType OutputUnitType { get; set; } = (Curve_DoubleExponentialDecay_OutputUnitType)Enum.Parse(typeof(Curve_DoubleExponentialDecay_OutputUnitType), "Dimensionless");
    }
    
    public enum Curve_DoubleExponentialDecay_InputUnitTypeForX
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
    }
    
    public enum Curve_DoubleExponentialDecay_OutputUnitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"This chiller part-load performance curve has three independent variables. Input consists of the curve name, the twelve coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x + C3*x**2 + C4*y + C5*y**2 + C6*x*y + C7*x**3 + C8*y**3 + C9*x**2*y + C10*x*y**2 + C11*x**2*y**2 + C12*z*y**3 x = dT* = normalized fractional Lift = dT / dTref y = PLR = part load ratio (cooling load/steady state capacity) z = Tdev* = normalized Tdev = Tdev / dTref Where: dT = Lift = Leaving Condenser Water Temperature - Leaving Chilled Water Temperature dTref = dT at the reference condition Tdev = Leaving Chilled Water Temperature - Reference Chilled Water Temperature")]
    [JsonObject("Curve:ChillerPartLoadWithLift")]
    public class Curve_ChillerPartLoadWithLift : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("coefficient1_c1")]
public System.Nullable<float> Coefficient1C1 { get; set; } = null;
        

[JsonProperty("coefficient2_c2")]
public System.Nullable<float> Coefficient2C2 { get; set; } = null;
        

[JsonProperty("coefficient3_c3")]
public System.Nullable<float> Coefficient3C3 { get; set; } = null;
        

[JsonProperty("coefficient4_c4")]
public System.Nullable<float> Coefficient4C4 { get; set; } = null;
        

[JsonProperty("coefficient5_c5")]
public System.Nullable<float> Coefficient5C5 { get; set; } = null;
        

[JsonProperty("coefficient6_c6")]
public System.Nullable<float> Coefficient6C6 { get; set; } = null;
        

[JsonProperty("coefficient7_c7")]
public System.Nullable<float> Coefficient7C7 { get; set; } = null;
        

[JsonProperty("coefficient8_c8")]
public System.Nullable<float> Coefficient8C8 { get; set; } = null;
        

[JsonProperty("coefficient9_c9")]
public System.Nullable<float> Coefficient9C9 { get; set; } = null;
        

[JsonProperty("coefficient10_c10")]
public System.Nullable<float> Coefficient10C10 { get; set; } = null;
        

[JsonProperty("coefficient11_c11")]
public System.Nullable<float> Coefficient11C11 { get; set; } = null;
        

[JsonProperty("coefficient12_c12")]
public System.Nullable<float> Coefficient12C12 { get; set; } = null;
        

[JsonProperty("minimum_value_of_x")]
public System.Nullable<float> MinimumValueOfX { get; set; } = null;
        

[JsonProperty("maximum_value_of_x")]
public System.Nullable<float> MaximumValueOfX { get; set; } = null;
        

[JsonProperty("minimum_value_of_y")]
public System.Nullable<float> MinimumValueOfY { get; set; } = null;
        

[JsonProperty("maximum_value_of_y")]
public System.Nullable<float> MaximumValueOfY { get; set; } = null;
        

[JsonProperty("minimum_value_of_z")]
public System.Nullable<float> MinimumValueOfZ { get; set; } = null;
        

[JsonProperty("maximum_value_of_z")]
public System.Nullable<float> MaximumValueOfZ { get; set; } = null;
        

[Description("Specify the minimum value calculated by this curve object")]
[JsonProperty("minimum_curve_output")]
public System.Nullable<float> MinimumCurveOutput { get; set; } = null;
        

[Description("Specify the maximum value calculated by this curve object")]
[JsonProperty("maximum_curve_output")]
public System.Nullable<float> MaximumCurveOutput { get; set; } = null;
        

[JsonProperty("input_unit_type_for_x")]
public Curve_ChillerPartLoadWithLift_InputUnitTypeForX InputUnitTypeForX { get; set; } = (Curve_ChillerPartLoadWithLift_InputUnitTypeForX)Enum.Parse(typeof(Curve_ChillerPartLoadWithLift_InputUnitTypeForX), "Dimensionless");
        

[JsonProperty("input_unit_type_for_y")]
public Curve_ChillerPartLoadWithLift_InputUnitTypeForY InputUnitTypeForY { get; set; } = (Curve_ChillerPartLoadWithLift_InputUnitTypeForY)Enum.Parse(typeof(Curve_ChillerPartLoadWithLift_InputUnitTypeForY), "Dimensionless");
        

[JsonProperty("input_unit_type_for_z")]
public Curve_ChillerPartLoadWithLift_InputUnitTypeForZ InputUnitTypeForZ { get; set; } = (Curve_ChillerPartLoadWithLift_InputUnitTypeForZ)Enum.Parse(typeof(Curve_ChillerPartLoadWithLift_InputUnitTypeForZ), "Dimensionless");
        

[JsonProperty("output_unit_type")]
public Curve_ChillerPartLoadWithLift_OutputUnitType OutputUnitType { get; set; } = (Curve_ChillerPartLoadWithLift_OutputUnitType)Enum.Parse(typeof(Curve_ChillerPartLoadWithLift_OutputUnitType), "Dimensionless");
    }
    
    public enum Curve_ChillerPartLoadWithLift_InputUnitTypeForX
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
    }
    
    public enum Curve_ChillerPartLoadWithLift_InputUnitTypeForY
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
    }
    
    public enum Curve_ChillerPartLoadWithLift_InputUnitTypeForZ
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
    }
    
    public enum Curve_ChillerPartLoadWithLift_OutputUnitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
}
namespace BH.oM.Adapters.EnergyPlus.PerformanceTables
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("An independent variable representing a single dimension of a Table:Lookup object." +
        "")]
    [JsonObject("Table:IndependentVariable")]
    public class Table_IndependentVariable : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("interpolation_method")]
public Table_IndependentVariable_InterpolationMethod InterpolationMethod { get; set; } = (Table_IndependentVariable_InterpolationMethod)Enum.Parse(typeof(Table_IndependentVariable_InterpolationMethod), "Linear");
        

[JsonProperty("extrapolation_method")]
public Table_IndependentVariable_ExtrapolationMethod ExtrapolationMethod { get; set; } = (Table_IndependentVariable_ExtrapolationMethod)Enum.Parse(typeof(Table_IndependentVariable_ExtrapolationMethod), "Constant");
        

[JsonProperty("minimum_value")]
public System.Nullable<float> MinimumValue { get; set; } = null;
        

[JsonProperty("maximum_value")]
public System.Nullable<float> MaximumValue { get; set; } = null;
        

[JsonProperty("normalization_reference_value")]
public System.Nullable<float> NormalizationReferenceValue { get; set; } = null;
        

[JsonProperty("unit_type")]
public Table_IndependentVariable_UnitType UnitType { get; set; } = (Table_IndependentVariable_UnitType)Enum.Parse(typeof(Table_IndependentVariable_UnitType), "Dimensionless");
        

[JsonProperty("external_file_name")]
public string ExternalFileName { get; set; } = "";
        

[JsonProperty("external_file_column_number")]
public System.Nullable<float> ExternalFileColumnNumber { get; set; } = null;
        

[JsonProperty("external_file_starting_row_number")]
public System.Nullable<float> ExternalFileStartingRowNumber { get; set; } = null;
        

[JsonProperty("values")]
public string Values { get; set; } = "";
    }
    
    public enum Table_IndependentVariable_InterpolationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Cubic")]
        Cubic = 1,
        
        [JsonProperty("Linear")]
        Linear = 2,
    }
    
    public enum Table_IndependentVariable_ExtrapolationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Constant")]
        Constant = 1,
        
        [JsonProperty("Linear")]
        Linear = 2,
    }
    
    public enum Table_IndependentVariable_UnitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Angle")]
        Angle = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Distance")]
        Distance = 3,
        
        [JsonProperty("MassFlow")]
        MassFlow = 4,
        
        [JsonProperty("Power")]
        Power = 5,
        
        [JsonProperty("Temperature")]
        Temperature = 6,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 7,
    }
    
    [Description("A sorted list of independent variables used by one or more Table:Lookup objects.")]
    [JsonObject("Table:IndependentVariableList")]
    public class Table_IndependentVariableList : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("independent_variables")]
public string IndependentVariables { get; set; } = "";
    }
    
    [Description(@"Lookup tables are used in place of curves and can represent any number of independent variables (defined as Table:IndependentVariable objects in a Table:IndependentVariableList). Output values are interpolated within the bounds defined by each independent variable and extrapolated beyond the bounds according to the interpolation/extrapolation methods defined by each independent variable.")]
    [JsonObject("Table:Lookup")]
    public class Table_Lookup : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("independent_variable_list_name")]
public string IndependentVariableListName { get; set; } = "";
        

[JsonProperty("normalization_method")]
public Table_Lookup_NormalizationMethod NormalizationMethod { get; set; } = (Table_Lookup_NormalizationMethod)Enum.Parse(typeof(Table_Lookup_NormalizationMethod), "None");
        

[JsonProperty("normalization_divisor")]
public System.Nullable<float> NormalizationDivisor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("minimum_output")]
public System.Nullable<float> MinimumOutput { get; set; } = null;
        

[JsonProperty("maximum_output")]
public System.Nullable<float> MaximumOutput { get; set; } = null;
        

[JsonProperty("output_unit_type")]
public Table_Lookup_OutputUnitType OutputUnitType { get; set; } = (Table_Lookup_OutputUnitType)Enum.Parse(typeof(Table_Lookup_OutputUnitType), "Dimensionless");
        

[JsonProperty("external_file_name")]
public string ExternalFileName { get; set; } = "";
        

[JsonProperty("external_file_column_number")]
public System.Nullable<float> ExternalFileColumnNumber { get; set; } = null;
        

[JsonProperty("external_file_starting_row_number")]
public System.Nullable<float> ExternalFileStartingRowNumber { get; set; } = null;
        

[JsonProperty("values")]
public string Values { get; set; } = "";
    }
    
    public enum Table_Lookup_NormalizationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AutomaticWithDivisor")]
        AutomaticWithDivisor = 1,
        
        [JsonProperty("DivisorOnly")]
        DivisorOnly = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum Table_Lookup_OutputUnitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
}
namespace BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"This boiler model is an adaptation of the empirical model from the Building Loads and System Thermodynamics (BLAST) program. Boiler performance curves are generated by fitting catalog data to polynomial equations. A constant efficiency boiler may be modeled by leaving the normalized boiler efficiency curve name input blank.")]
    [JsonObject("Boiler:HotWater")]
    public class Boiler_HotWater : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("fuel_type")]
public Boiler_HotWater_FuelType FuelType { get; set; } = (Boiler_HotWater_FuelType)Enum.Parse(typeof(Boiler_HotWater_FuelType), "Coal");
        

[JsonProperty("nominal_capacity")]
public string NominalCapacity { get; set; } = "";
        

[Description("Based on the higher heating value of fuel.")]
[JsonProperty("nominal_thermal_efficiency")]
public System.Nullable<float> NominalThermalEfficiency { get; set; } = null;
        

[JsonProperty("efficiency_curve_temperature_evaluation_variable")]
public Boiler_HotWater_EfficiencyCurveTemperatureEvaluationVariable EfficiencyCurveTemperatureEvaluationVariable { get; set; } = (Boiler_HotWater_EfficiencyCurveTemperatureEvaluationVariable)Enum.Parse(typeof(Boiler_HotWater_EfficiencyCurveTemperatureEvaluationVariable), "EnteringBoiler");
        

[Description(@"Linear, Quadratic and Cubic efficiency curves are solely a function of PLR. All other efficiency curve types are a function of PLR and boiler water temperature. Linear = C1 + C2*PLR Quadratic = C1 + C2*PLR + C3*PLR^2 Cubic = C1 + C2*PLR + C3*PLR^2 + C4*PLR^3 Biquadratic = C1 + C2*PLR + C3*PLR^2 + C4*T + C5*T^2 + C6*PLR*T QuadraticLinear = C1 + C2*PLR + C3*PLR^2 + (C4 + C5*PLR + C6*PLR^2)*T BiCubic = C1+C2*PLR+C3*PLR^2+C4*T+C5*T^2+C6*PLR*T+C7*PLR^3+C8*T^3+C9*PLR^2*T+C10*PLR*T^2 TriQuadratic curves are not allowed. PLR = part-load ratio T = boiler water temperature (either entering or leaving).")]
[JsonProperty("normalized_boiler_efficiency_curve_name")]
public string NormalizedBoilerEfficiencyCurveName { get; set; } = "";
        

[JsonProperty("design_water_flow_rate")]
public string DesignWaterFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("minimum_part_load_ratio")]
public System.Nullable<float> MinimumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_part_load_ratio")]
public System.Nullable<float> MaximumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("optimum_part_load_ratio")]
public System.Nullable<float> OptimumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("boiler_water_inlet_node_name")]
public string BoilerWaterInletNodeName { get; set; } = "";
        

[JsonProperty("boiler_water_outlet_node_name")]
public string BoilerWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("water_outlet_upper_temperature_limit")]
public System.Nullable<float> WaterOutletUpperTemperatureLimit { get; set; } = (System.Nullable<float>)Single.Parse("99.9", CultureInfo.InvariantCulture);
        

[Description(@"Select operating mode for fluid flow through the boiler. ""NotModulated"" is for either variable or constant pumping with flow controlled by the external plant system. ""ConstantFlow"" is for constant pumping with flow controlled by boiler to operate at full design flow rate. ""LeavingSetpointModulated"" is for variable pumping with flow controlled by boiler to vary flow to target a leaving temperature setpoint.")]
[JsonProperty("boiler_flow_mode")]
public Boiler_HotWater_BoilerFlowMode BoilerFlowMode { get; set; } = (Boiler_HotWater_BoilerFlowMode)Enum.Parse(typeof(Boiler_HotWater_BoilerFlowMode), "NotModulated");
        

[JsonProperty("parasitic_electric_load")]
public System.Nullable<float> ParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum Boiler_HotWater_FuelType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("Electricity")]
        Electricity = 2,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 3,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 4,
        
        [JsonProperty("Gasoline")]
        Gasoline = 5,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 6,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 7,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 8,
        
        [JsonProperty("Propane")]
        Propane = 9,
    }
    
    public enum Boiler_HotWater_EfficiencyCurveTemperatureEvaluationVariable
    {
        
        [JsonProperty("EnteringBoiler")]
        EnteringBoiler = 0,
        
        [JsonProperty("LeavingBoiler")]
        LeavingBoiler = 1,
    }
    
    public enum Boiler_HotWater_BoilerFlowMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("LeavingSetpointModulated")]
        LeavingSetpointModulated = 2,
        
        [JsonProperty("NotModulated")]
        NotModulated = 3,
    }
    
    [Description(@"This boiler model is an adaptation of the empirical model from the Building Loads and System Thermodynamics (BLAST) program. Boiler performance curves are generated by fitting catalog data to third order polynomial equations. A constant efficiency boiler is modeled by setting the fuel use coefficients as follows: N9=1, N10=0, N11=0")]
    [JsonObject("Boiler:Steam")]
    public class Boiler_Steam : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("fuel_type")]
public Boiler_Steam_FuelType FuelType { get; set; } = (Boiler_Steam_FuelType)Enum.Parse(typeof(Boiler_Steam_FuelType), "Coal");
        

[JsonProperty("maximum_operating_pressure")]
public System.Nullable<float> MaximumOperatingPressure { get; set; } = (System.Nullable<float>)Single.Parse("160000", CultureInfo.InvariantCulture);
        

[JsonProperty("theoretical_efficiency")]
public System.Nullable<float> TheoreticalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[JsonProperty("design_outlet_steam_temperature")]
public System.Nullable<float> DesignOutletSteamTemperature { get; set; } = (System.Nullable<float>)Single.Parse("100", CultureInfo.InvariantCulture);
        

[JsonProperty("nominal_capacity")]
public string NominalCapacity { get; set; } = "";
        

[JsonProperty("minimum_part_load_ratio")]
public System.Nullable<float> MinimumPartLoadRatio { get; set; } = null;
        

[JsonProperty("maximum_part_load_ratio")]
public System.Nullable<float> MaximumPartLoadRatio { get; set; } = null;
        

[JsonProperty("optimum_part_load_ratio")]
public System.Nullable<float> OptimumPartLoadRatio { get; set; } = null;
        

[JsonProperty("coefficient_1_of_fuel_use_function_of_part_load_ratio_curve")]
public System.Nullable<float> Coefficient1OfFuelUseFunctionOfPartLoadRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_2_of_fuel_use_function_of_part_load_ratio_curve")]
public System.Nullable<float> Coefficient2OfFuelUseFunctionOfPartLoadRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_3_of_fuel_use_function_of_part_load_ratio_curve")]
public System.Nullable<float> Coefficient3OfFuelUseFunctionOfPartLoadRatioCurve { get; set; } = null;
        

[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[JsonProperty("steam_outlet_node_name")]
public string SteamOutletNodeName { get; set; } = "";
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum Boiler_Steam_FuelType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("Electricity")]
        Electricity = 2,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 3,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 4,
        
        [JsonProperty("Gasoline")]
        Gasoline = 5,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 6,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 7,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 8,
        
        [JsonProperty("Propane")]
        Propane = 9,
    }
    
    [Description("This chiller model is the empirical model from the DOE-2 building Energy simulati" +
        "on program. Chiller performance at off-reference conditions is modeled using thr" +
        "ee polynomial equations. Three curves objects are required.")]
    [JsonObject("Chiller:Electric:EIR")]
    public class Chiller_Electric_EIR : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("reference_capacity")]
public string ReferenceCapacity { get; set; } = "";
        

[Description("Efficiency of the chiller compressor (cooling output/compressor energy input). Co" +
    "ndenser fan power should not be included here.")]
[JsonProperty("reference_cop")]
public System.Nullable<float> ReferenceCop { get; set; } = null;
        

[JsonProperty("reference_leaving_chilled_water_temperature")]
public System.Nullable<float> ReferenceLeavingChilledWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("6.67", CultureInfo.InvariantCulture);
        

[JsonProperty("reference_entering_condenser_fluid_temperature")]
public System.Nullable<float> ReferenceEnteringCondenserFluidTemperature { get; set; } = (System.Nullable<float>)Single.Parse("29.4", CultureInfo.InvariantCulture);
        

[JsonProperty("reference_chilled_water_flow_rate")]
public string ReferenceChilledWaterFlowRate { get; set; } = "";
        

[Description("This field is only used for Condenser Type = AirCooled or EvaporativelyCooled whe" +
    "n Heat Recovery is specified")]
[JsonProperty("reference_condenser_fluid_flow_rate")]
public string ReferenceCondenserFluidFlowRate { get; set; } = "";
        

[Description("Cooling capacity as a function of CW supply temp and entering condenser temp curv" +
    "e = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT CWS = supply (leaving) c" +
    "hilled water temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty("cooling_capacity_function_of_temperature_curve_name")]
public string CoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Electric Input Ratio (EIR) as a function of temperature EIR = 1/COP curve = a + b" +
    "*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT CWS = supply (leaving) chilled wa" +
    "ter temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty("electric_input_to_cooling_output_ratio_function_of_temperature_curve_name")]
public string ElectricInputToCoolingOutputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Electric Input Ratio (EIR) as a function of Part Load Ratio (PLR) EIR = 1/COP qua" +
    "dratic curve = a + b*PLR + c*PLR**2 is typical, other univariate curves may be u" +
    "sed PLR = part load ratio (cooling load/steady state capacity)")]
[JsonProperty("electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name")]
public string ElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveName { get; set; } = "";
        

[Description("Part load ratio below which the chiller starts cycling on/off to meet the load. M" +
    "ust be less than or equal to Maximum Part Load Ratio.")]
[JsonProperty("minimum_part_load_ratio")]
public System.Nullable<float> MinimumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[Description("Maximum allowable part load ratio. Must be greater than or equal to Minimum Part " +
    "Load Ratio.")]
[JsonProperty("maximum_part_load_ratio")]
public System.Nullable<float> MaximumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Optimum part load ratio where the chiller is most efficient. Must be greater than" +
    " or equal to the Minimum Part Load Ratio and less than or equal to the Maximum P" +
    "art Load Ratio.")]
[JsonProperty("optimum_part_load_ratio")]
public System.Nullable<float> OptimumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Part load ratio where the chiller can no longer unload and false loading begins. " +
    "Minimum unloading ratio must be greater than or equal to the Minimum Part Load R" +
    "atio and less than or equal to the Maximum Part Load Ratio.")]
[JsonProperty("minimum_unloading_ratio")]
public System.Nullable<float> MinimumUnloadingRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("chilled_water_inlet_node_name")]
public string ChilledWaterInletNodeName { get; set; } = "";
        

[JsonProperty("chilled_water_outlet_node_name")]
public string ChilledWaterOutletNodeName { get; set; } = "";
        

[Description("Not required if air-cooled or evaporatively-cooled")]
[JsonProperty("condenser_inlet_node_name")]
public string CondenserInletNodeName { get; set; } = "";
        

[Description("Not required if air-cooled or evaporatively-cooled")]
[JsonProperty("condenser_outlet_node_name")]
public string CondenserOutletNodeName { get; set; } = "";
        

[JsonProperty("condenser_type")]
public Chiller_Electric_EIR_CondenserType CondenserType { get; set; } = (Chiller_Electric_EIR_CondenserType)Enum.Parse(typeof(Chiller_Electric_EIR_CondenserType), "WaterCooled");
        

[Description("Use for air-cooled or evaporatively-cooled condensers. Ratio of condenser fan pow" +
    "er to reference chiller capacity")]
[JsonProperty("condenser_fan_power_ratio")]
public System.Nullable<float> CondenserFanPowerRatio { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Fraction of compressor electrical energy that must be rejected by the condenser. Enter a value of 1.0 when modeling hermetic chillers. For open chillers, enter the compressor motor efficiency. This value should be greater than 0.6 for practical applications.")]
[JsonProperty("fraction_of_compressor_electric_consumption_rejected_by_condenser")]
public System.Nullable<float> FractionOfCompressorElectricConsumptionRejectedByCondenser { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("leaving_chilled_water_lower_temperature_limit")]
public System.Nullable<float> LeavingChilledWaterLowerTemperatureLimit { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description(@"Select operating mode for fluid flow through the chiller. ""NotModulated"" is for either variable or constant pumping with flow controlled by the external plant system. ""ConstantFlow"" is for constant pumping with flow controlled by chiller to operate at full design flow rate. ""LeavingSetpointModulated"" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
[JsonProperty("chiller_flow_mode")]
public Chiller_Electric_EIR_ChillerFlowMode ChillerFlowMode { get; set; } = (Chiller_Electric_EIR_ChillerFlowMode)Enum.Parse(typeof(Chiller_Electric_EIR_ChillerFlowMode), "NotModulated");
        

[Description("If non-zero, then the heat recovery inlet and outlet node names must be entered. " +
    "Heat recovery is only available with Condenser Type = WaterCooled.")]
[JsonProperty("design_heat_recovery_water_flow_rate")]
public string DesignHeatRecoveryWaterFlowRate { get; set; } = (System.String)"0";
        

[JsonProperty("heat_recovery_inlet_node_name")]
public string HeatRecoveryInletNodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_outlet_node_name")]
public string HeatRecoveryOutletNodeName { get; set; } = "";
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the chiller is not operating.")]
[JsonProperty("basin_heater_capacity")]
public System.Nullable<float> BasinHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdo" +
    "or dry-bulb temperature when the basin heater turns on.")]
[JsonProperty("basin_heater_setpoint_temperature")]
public System.Nullable<float> BasinHeaterSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty("basin_heater_operating_schedule_name")]
public string BasinHeaterOperatingScheduleName { get; set; } = "";
        

[Description("This optional field is the fraction of total rejected heat that can be recovered " +
    "at full load")]
[JsonProperty("condenser_heat_recovery_relative_capacity_fraction")]
public System.Nullable<float> CondenserHeatRecoveryRelativeCapacityFraction { get; set; } = null;
        

[Description("This optional schedule of temperatures will turn off heat recovery if inlet excee" +
    "ds the value")]
[JsonProperty("heat_recovery_inlet_high_temperature_limit_schedule_name")]
public string HeatRecoveryInletHighTemperatureLimitScheduleName { get; set; } = "";
        

[Description("This optional field provides control over the heat recovery Using this triggers a" +
    " model more suited to series bundle and chillers with higher temperature heat re" +
    "covery If this field is not used, the bundles are modeled as being in parallel")]
[JsonProperty("heat_recovery_leaving_temperature_setpoint_node_name")]
public string HeatRecoveryLeavingTemperatureSetpointNodeName { get; set; } = "";
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum Chiller_Electric_EIR_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 3,
    }
    
    public enum Chiller_Electric_EIR_ChillerFlowMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("LeavingSetpointModulated")]
        LeavingSetpointModulated = 2,
        
        [JsonProperty("NotModulated")]
        NotModulated = 3,
    }
    
    [Description(@"This chiller model is an empirical model, a reformulated version of Chiller:Electric:EIR where the performance is a function of condenser leaving fluid Temperature instead of condenser entering fluid Temperature. Chiller performance at off-reference conditions is modeled using three polynomial equations. Three curve objects are required.")]
    [JsonObject("Chiller:Electric:ReformulatedEIR")]
    public class Chiller_Electric_ReformulatedEIR : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("reference_capacity")]
public string ReferenceCapacity { get; set; } = "";
        

[Description("Efficiency of the chiller compressor (cooling output/compressor energy input). Co" +
    "ndenser fan power should not be included here.")]
[JsonProperty("reference_cop")]
public System.Nullable<float> ReferenceCop { get; set; } = null;
        

[JsonProperty("reference_leaving_chilled_water_temperature")]
public System.Nullable<float> ReferenceLeavingChilledWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("6.67", CultureInfo.InvariantCulture);
        

[JsonProperty("reference_leaving_condenser_water_temperature")]
public System.Nullable<float> ReferenceLeavingCondenserWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("35", CultureInfo.InvariantCulture);
        

[JsonProperty("reference_chilled_water_flow_rate")]
public string ReferenceChilledWaterFlowRate { get; set; } = "";
        

[JsonProperty("reference_condenser_water_flow_rate")]
public string ReferenceCondenserWaterFlowRate { get; set; } = "";
        

[Description(@"Cooling capacity as a function of supply (leaving) chilled water temperature and leaving condenser fluid temperature curve = a + b*CWS + c*CWS**2 + d*LCT + e*LCT**2 + f*CWS*LCT CWS = supply (leaving) chilled water temperature(C) LCT = leaving condenser fluid temperature(C)")]
[JsonProperty("cooling_capacity_function_of_temperature_curve_name")]
public string CoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"Electric Input Ratio (EIR) as a function of supply (leaving) chilled water temperature and leaving condenser fluid temperature. EIR = 1/COP. curve = a + b*CWS + c*CWS**2 + d*LCT + e*LCT**2 + f*CWS*LCT CWS = supply (leaving) chilled water temperature(C) LCT = leaving condenser fluid temperature(C)")]
[JsonProperty("electric_input_to_cooling_output_ratio_function_of_temperature_curve_name")]
public string ElectricInputToCoolingOutputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"Two curve types are available: Type LeavingCondenserWaterTemperature: based on the leaving condenser water temperature. Type Lift: based on the normalized lift, which is the temperature difference between the leaving condenser water temperature and the leaving evaporator water temperature.")]
[JsonProperty("electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_type")]
public Chiller_Electric_ReformulatedEIR_ElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveType ElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveType { get; set; } = (Chiller_Electric_ReformulatedEIR_ElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveType)Enum.Parse(typeof(Chiller_Electric_ReformulatedEIR_ElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveType), "LeavingCondenserWaterTemperature");
        

[Description(@"Electric Input Ratio (EIR) as a function of Part Load Ratio (PLR) EIR = 1/COP The form of this curve is based on the input for Electric Input to Cooling Output RatioFunction of Part Load Ratio Curve Type Type=LeavingCondenserWaterTemperature: Calculated based on LCT and PLR Curve object type should be Curve:Bicubic or Table:Lookup Bicubic curve = a + b*LCT + c*LCT**2 + d*PLR + e*PLR**2 + f*LCT*PLR + g*0 + h*PLR**3 + i*0 + j*0 PLR = part load ratio (cooling load/steady state capacity) LCT = leaving condenser fluid temperature(C) Type=Lift: Calculated based on dT*, Tdev* and PLR Curve object type should be Curve:ChillerPartLoadWithLiftCurves or Table:Lookup ChillerPartLoadWithLiftCurves curve = a + b*(dT*) + c*(dT*)**2 + d*PLR + e*PLR**2 + f*(dT*)*PLR + g*(dT*)**3 + h*PLR**3 + i*(dT*)**2*PLR + j*(dT*)*PLR**2 + k*(dT*)**2*PLR**2 + l*(Tdev*)*PLR**3 x = dT* = normalized fractional Lift = dT / dTref y = PLR = part load ratio (cooling load/steady state capacity) z = Tdev* = normalized Tdev = Tdev / dTref Where: dT = Lift = Leaving Condenser Water Temperature - Leaving Chilled Water Temperature dTref = dT at the reference condition Tdev = Leaving Chilled Water Temperature - Reference Chilled Water Temperature")]
[JsonProperty("electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name")]
public string ElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveName { get; set; } = "";
        

[Description("Part load ratio below which the chiller starts cycling on/off to meet the load. M" +
    "ust be less than or equal to Maximum Part Load Ratio.")]
[JsonProperty("minimum_part_load_ratio")]
public System.Nullable<float> MinimumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[Description("Maximum allowable part load ratio. Must be greater than or equal to Minimum Part " +
    "Load Ratio.")]
[JsonProperty("maximum_part_load_ratio")]
public System.Nullable<float> MaximumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Optimum part load ratio where the chiller is most efficient. Must be greater than" +
    " or equal to the Minimum Part Load Ratio and less than or equal to the Maximum P" +
    "art Load Ratio.")]
[JsonProperty("optimum_part_load_ratio")]
public System.Nullable<float> OptimumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Part load ratio where the chiller can no longer unload and false loading begins. " +
    "Minimum unloading ratio must be greater than or equal to the Minimum Part Load R" +
    "atio and less than or equal to the Maximum Part Load Ratio.")]
[JsonProperty("minimum_unloading_ratio")]
public System.Nullable<float> MinimumUnloadingRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("chilled_water_inlet_node_name")]
public string ChilledWaterInletNodeName { get; set; } = "";
        

[JsonProperty("chilled_water_outlet_node_name")]
public string ChilledWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("condenser_inlet_node_name")]
public string CondenserInletNodeName { get; set; } = "";
        

[JsonProperty("condenser_outlet_node_name")]
public string CondenserOutletNodeName { get; set; } = "";
        

[Description(@"Fraction of compressor electrical energy that must be rejected by the condenser. Enter a value of 1.0 when modeling hermetic chillers. For open chillers, enter the compressor motor efficiency. This value should be greater than 0.6 for practical applications.")]
[JsonProperty("fraction_of_compressor_electric_consumption_rejected_by_condenser")]
public System.Nullable<float> FractionOfCompressorElectricConsumptionRejectedByCondenser { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("leaving_chilled_water_lower_temperature_limit")]
public System.Nullable<float> LeavingChilledWaterLowerTemperatureLimit { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description(@"Select operating mode for fluid flow through the chiller. ""NotModulated"" is for either variable or constant pumping with flow controlled by the external plant system. ""ConstantFlow"" is for constant pumping with flow controlled by chiller to operate at full design flow rate. ""LeavingSetpointModulated"" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
[JsonProperty("chiller_flow_mode_type")]
public Chiller_Electric_ReformulatedEIR_ChillerFlowModeType ChillerFlowModeType { get; set; } = (Chiller_Electric_ReformulatedEIR_ChillerFlowModeType)Enum.Parse(typeof(Chiller_Electric_ReformulatedEIR_ChillerFlowModeType), "NotModulated");
        

[Description("If non-zero, then the heat recovery inlet and outlet node names must be entered.")]
[JsonProperty("design_heat_recovery_water_flow_rate")]
public string DesignHeatRecoveryWaterFlowRate { get; set; } = (System.String)"0";
        

[JsonProperty("heat_recovery_inlet_node_name")]
public string HeatRecoveryInletNodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_outlet_node_name")]
public string HeatRecoveryOutletNodeName { get; set; } = "";
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This optional field is the fraction of total rejected heat that can be recovered " +
    "at full load")]
[JsonProperty("condenser_heat_recovery_relative_capacity_fraction")]
public System.Nullable<float> CondenserHeatRecoveryRelativeCapacityFraction { get; set; } = null;
        

[Description("This optional schedule of temperatures will turn off heat recovery if inlet excee" +
    "ds the value")]
[JsonProperty("heat_recovery_inlet_high_temperature_limit_schedule_name")]
public string HeatRecoveryInletHighTemperatureLimitScheduleName { get; set; } = "";
        

[Description("This optional field provides control over the heat recovery Using this triggers a" +
    " model more suited to series bundle and chillers with higher temperature heat re" +
    "covery If this field is not used, the bundles are modeled as being in parallel")]
[JsonProperty("heat_recovery_leaving_temperature_setpoint_node_name")]
public string HeatRecoveryLeavingTemperatureSetpointNodeName { get; set; } = "";
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum Chiller_Electric_ReformulatedEIR_ElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LeavingCondenserWaterTemperature")]
        LeavingCondenserWaterTemperature = 1,
        
        [JsonProperty("Lift")]
        Lift = 2,
    }
    
    public enum Chiller_Electric_ReformulatedEIR_ChillerFlowModeType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("LeavingSetpointModulated")]
        LeavingSetpointModulated = 2,
        
        [JsonProperty("NotModulated")]
        NotModulated = 3,
    }
    
    [Description("This chiller model is the empirical model from the Building Loads and System Ther" +
        "modynamics (BLAST) program. Chiller performance curves are generated by fitting " +
        "catalog data to third order polynomial equations. Three sets of coefficients are" +
        " required.")]
    [JsonObject("Chiller:Electric")]
    public class Chiller_Electric : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("condenser_type")]
public Chiller_Electric_CondenserType CondenserType { get; set; } = (Chiller_Electric_CondenserType)Enum.Parse(typeof(Chiller_Electric_CondenserType), "AirCooled");
        

[JsonProperty("nominal_capacity")]
public string NominalCapacity { get; set; } = "";
        

[JsonProperty("nominal_cop")]
public System.Nullable<float> NominalCop { get; set; } = null;
        

[JsonProperty("chilled_water_inlet_node_name")]
public string ChilledWaterInletNodeName { get; set; } = "";
        

[JsonProperty("chilled_water_outlet_node_name")]
public string ChilledWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("condenser_inlet_node_name")]
public string CondenserInletNodeName { get; set; } = "";
        

[JsonProperty("condenser_outlet_node_name")]
public string CondenserOutletNodeName { get; set; } = "";
        

[JsonProperty("minimum_part_load_ratio")]
public System.Nullable<float> MinimumPartLoadRatio { get; set; } = null;
        

[JsonProperty("maximum_part_load_ratio")]
public System.Nullable<float> MaximumPartLoadRatio { get; set; } = null;
        

[JsonProperty("optimum_part_load_ratio")]
public System.Nullable<float> OptimumPartLoadRatio { get; set; } = null;
        

[JsonProperty("design_condenser_inlet_temperature")]
public System.Nullable<float> DesignCondenserInletTemperature { get; set; } = null;
        

[JsonProperty("temperature_rise_coefficient")]
public System.Nullable<float> TemperatureRiseCoefficient { get; set; } = null;
        

[JsonProperty("design_chilled_water_outlet_temperature")]
public System.Nullable<float> DesignChilledWaterOutletTemperature { get; set; } = null;
        

[Description("For variable volume this is the maximum flow & for constant flow this is the flow" +
    ".")]
[JsonProperty("design_chilled_water_flow_rate")]
public string DesignChilledWaterFlowRate { get; set; } = "";
        

[Description("This field is only used for Condenser Type = AirCooled or EvaporativelyCooled whe" +
    "n Heat Recovery is specified")]
[JsonProperty("design_condenser_fluid_flow_rate")]
public string DesignCondenserFluidFlowRate { get; set; } = "";
        

[JsonProperty("coefficient_1_of_capacity_ratio_curve")]
public System.Nullable<float> Coefficient1OfCapacityRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_2_of_capacity_ratio_curve")]
public System.Nullable<float> Coefficient2OfCapacityRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_3_of_capacity_ratio_curve")]
public System.Nullable<float> Coefficient3OfCapacityRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_1_of_power_ratio_curve")]
public System.Nullable<float> Coefficient1OfPowerRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_2_of_power_ratio_curve")]
public System.Nullable<float> Coefficient2OfPowerRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_3_of_power_ratio_curve")]
public System.Nullable<float> Coefficient3OfPowerRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_1_of_full_load_ratio_curve")]
public System.Nullable<float> Coefficient1OfFullLoadRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_2_of_full_load_ratio_curve")]
public System.Nullable<float> Coefficient2OfFullLoadRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_3_of_full_load_ratio_curve")]
public System.Nullable<float> Coefficient3OfFullLoadRatioCurve { get; set; } = null;
        

[JsonProperty("chilled_water_outlet_temperature_lower_limit")]
public System.Nullable<float> ChilledWaterOutletTemperatureLowerLimit { get; set; } = null;
        

[Description(@"Select operating mode for fluid flow through the chiller. ""NotModulated"" is for either variable or constant pumping with flow controlled by the external plant system. ""ConstantFlow"" is for constant pumping with flow controlled by chiller to operate at full design flow rate. ""LeavingSetpointModulated"" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
[JsonProperty("chiller_flow_mode")]
public Chiller_Electric_ChillerFlowMode ChillerFlowMode { get; set; } = (Chiller_Electric_ChillerFlowMode)Enum.Parse(typeof(Chiller_Electric_ChillerFlowMode), "NotModulated");
        

[Description("If non-zero, then the heat recovery inlet and outlet node names must be entered. " +
    "Heat recovery is only available with Condenser Type = WaterCooled.")]
[JsonProperty("design_heat_recovery_water_flow_rate")]
public string DesignHeatRecoveryWaterFlowRate { get; set; } = (System.String)"0";
        

[JsonProperty("heat_recovery_inlet_node_name")]
public string HeatRecoveryInletNodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_outlet_node_name")]
public string HeatRecoveryOutletNodeName { get; set; } = "";
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the chiller is not operating.")]
[JsonProperty("basin_heater_capacity")]
public System.Nullable<float> BasinHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdo" +
    "or dry-bulb temperature when the basin heater turns on.")]
[JsonProperty("basin_heater_setpoint_temperature")]
public System.Nullable<float> BasinHeaterSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty("basin_heater_operating_schedule_name")]
public string BasinHeaterOperatingScheduleName { get; set; } = "";
        

[Description("This optional field is the fraction of total rejected heat that can be recovered " +
    "at full load")]
[JsonProperty("condenser_heat_recovery_relative_capacity_fraction")]
public System.Nullable<float> CondenserHeatRecoveryRelativeCapacityFraction { get; set; } = null;
        

[Description("This optional schedule of temperatures will turn off heat recovery if inlet excee" +
    "ds the value")]
[JsonProperty("heat_recovery_inlet_high_temperature_limit_schedule_name")]
public string HeatRecoveryInletHighTemperatureLimitScheduleName { get; set; } = "";
        

[Description("This optional field provides control over the heat recovery Using this triggers a" +
    " model more suited to series bundle and chillers with higher temperature heat re" +
    "covery If this field is not used, the bundles are modeled as being in parallel")]
[JsonProperty("heat_recovery_leaving_temperature_setpoint_node_name")]
public string HeatRecoveryLeavingTemperatureSetpointNodeName { get; set; } = "";
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum Chiller_Electric_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 3,
    }
    
    public enum Chiller_Electric_ChillerFlowMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("LeavingSetpointModulated")]
        LeavingSetpointModulated = 2,
        
        [JsonProperty("NotModulated")]
        NotModulated = 3,
    }
    
    [Description(@"This indirect absorption chiller model is an enhanced model from the Building Loads and System Thermodynamics (BLAST) program. Chiller performance curves are generated by fitting catalog data to third order polynomial equations. The chiller capacity is a function of condenser, chilled water, and generator temperatures. The heat input is a function of part-load ratio, condenser temperature, and chilled water temperature.")]
    [JsonObject("Chiller:Absorption:Indirect")]
    public class Chiller_Absorption_Indirect : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("nominal_capacity")]
public string NominalCapacity { get; set; } = "";
        

[JsonProperty("nominal_pumping_power")]
public string NominalPumpingPower { get; set; } = "";
        

[JsonProperty("chilled_water_inlet_node_name")]
public string ChilledWaterInletNodeName { get; set; } = "";
        

[JsonProperty("chilled_water_outlet_node_name")]
public string ChilledWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("condenser_inlet_node_name")]
public string CondenserInletNodeName { get; set; } = "";
        

[JsonProperty("condenser_outlet_node_name")]
public string CondenserOutletNodeName { get; set; } = "";
        

[JsonProperty("minimum_part_load_ratio")]
public System.Nullable<float> MinimumPartLoadRatio { get; set; } = null;
        

[JsonProperty("maximum_part_load_ratio")]
public System.Nullable<float> MaximumPartLoadRatio { get; set; } = null;
        

[JsonProperty("optimum_part_load_ratio")]
public System.Nullable<float> OptimumPartLoadRatio { get; set; } = null;
        

[Description("Used only when condenser flow rate is autosized.")]
[JsonProperty("design_condenser_inlet_temperature")]
public System.Nullable<float> DesignCondenserInletTemperature { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[Description("Provides warnings when entering condenser temperature is below minimum. Capacity " +
    "is not adjusted when entering condenser temperature is below minimum.")]
[JsonProperty("condenser_inlet_temperature_lower_limit")]
public System.Nullable<float> CondenserInletTemperatureLowerLimit { get; set; } = (System.Nullable<float>)Single.Parse("15", CultureInfo.InvariantCulture);
        

[Description("Capacity is adjusted when leaving chilled water temperature is below minimum.")]
[JsonProperty("chilled_water_outlet_temperature_lower_limit")]
public System.Nullable<float> ChilledWaterOutletTemperatureLowerLimit { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[Description("For variable flow this is the max flow & for constant flow this is the flow.")]
[JsonProperty("design_chilled_water_flow_rate")]
public string DesignChilledWaterFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("design_condenser_water_flow_rate")]
public string DesignCondenserWaterFlowRate { get; set; } = (System.String)"Autosize";
        

[Description(@"Select operating mode for fluid flow through the chiller. ""NotModulated"" is for either variable or constant pumping with flow controlled by the external plant system. ""ConstantFlow"" is for constant pumping with flow controlled by chiller to operate at full design flow rate. ""LeavingSetpointModulated"" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
[JsonProperty("chiller_flow_mode")]
public Chiller_Absorption_Indirect_ChillerFlowMode ChillerFlowMode { get; set; } = (Chiller_Absorption_Indirect_ChillerFlowMode)Enum.Parse(typeof(Chiller_Absorption_Indirect_ChillerFlowMode), "NotModulated");
        

[JsonProperty("generator_heat_input_function_of_part_load_ratio_curve_name")]
public string GeneratorHeatInputFunctionOfPartLoadRatioCurveName { get; set; } = "";
        

[JsonProperty("pump_electric_input_function_of_part_load_ratio_curve_name")]
public string PumpElectricInputFunctionOfPartLoadRatioCurveName { get; set; } = "";
        

[Description("Enter the generator inlet node name which connects this chiller to a steam or hot" +
    " water plant, otherwise leave this field blank. Generator nodes are used to mode" +
    "l heat input to the chiller.")]
[JsonProperty("generator_inlet_node_name")]
public string GeneratorInletNodeName { get; set; } = "";
        

[Description("Enter the generator outlet node name which connects this chiller to a steam or ho" +
    "t water plant, otherwise leave this field blank. Generator nodes are used to mod" +
    "el heat input to the chiller.")]
[JsonProperty("generator_outlet_node_name")]
public string GeneratorOutletNodeName { get; set; } = "";
        

[Description("Curve which shows the change in normalized capacity to changes in condenser tempe" +
    "rature.")]
[JsonProperty("capacity_correction_function_of_condenser_temperature_curve_name")]
public string CapacityCorrectionFunctionOfCondenserTemperatureCurveName { get; set; } = "";
        

[Description("Curve which shows the change in normalized capacity to changes in leaving chilled" +
    " water temperature.")]
[JsonProperty("capacity_correction_function_of_chilled_water_temperature_curve_name")]
public string CapacityCorrectionFunctionOfChilledWaterTemperatureCurveName { get; set; } = "";
        

[Description("Used when generator fluid type is hot water Curve which shows the change in norma" +
    "lized capacity to changes in generator temperature.")]
[JsonProperty("capacity_correction_function_of_generator_temperature_curve_name")]
public string CapacityCorrectionFunctionOfGeneratorTemperatureCurveName { get; set; } = "";
        

[Description("Curve which shows the change in normalized heat input to changes in condenser tem" +
    "perature.")]
[JsonProperty("generator_heat_input_correction_function_of_condenser_temperature_curve_name")]
public string GeneratorHeatInputCorrectionFunctionOfCondenserTemperatureCurveName { get; set; } = "";
        

[Description("Curve which shows the change in normalized heat input to changes in leaving chill" +
    "ed water temperature.")]
[JsonProperty("generator_heat_input_correction_function_of_chilled_water_temperature_curve_name")]
public string GeneratorHeatInputCorrectionFunctionOfChilledWaterTemperatureCurveName { get; set; } = "";
        

[Description(@"The Generator side of the chiller can be connected to a hot water or steam plant where the generator inlet and outlet nodes are connected to a plant loop. If the generator is not connected to a plant loop, and the generator inlet/outlet nodes are not used, this field should be specified as steam or left blank. When a plant is not used, the model assumes steam as the heat source.")]
[JsonProperty("generator_heat_source_type")]
public Chiller_Absorption_Indirect_GeneratorHeatSourceType GeneratorHeatSourceType { get; set; } = (Chiller_Absorption_Indirect_GeneratorHeatSourceType)Enum.Parse(typeof(Chiller_Absorption_Indirect_GeneratorHeatSourceType), "Steam");
        

[Description("For variable flow this is the max flow and for constant flow this is the flow.")]
[JsonProperty("design_generator_fluid_flow_rate")]
public string DesignGeneratorFluidFlowRate { get; set; } = "";
        

[Description("Provides warnings when entering generator temperature is below minimum. Capacity " +
    "is not adjusted when entering generator temperature is below minimum.")]
[JsonProperty("temperature_lower_limit_generator_inlet")]
public System.Nullable<float> TemperatureLowerLimitGeneratorInlet { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field is not used when the generator inlet/outlet nodes are not specified or" +
    " the generator is connected to a hot water loop.")]
[JsonProperty("degree_of_subcooling_in_steam_generator")]
public System.Nullable<float> DegreeOfSubcoolingInSteamGenerator { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This field is not used when the generator inlet/outlet nodes are not specified or" +
    " the generator is connected to a hot water loop.")]
[JsonProperty("degree_of_subcooling_in_steam_condensate_loop")]
public System.Nullable<float> DegreeOfSubcoolingInSteamCondensateLoop { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    public enum Chiller_Absorption_Indirect_ChillerFlowMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("LeavingSetpointModulated")]
        LeavingSetpointModulated = 2,
        
        [JsonProperty("NotModulated")]
        NotModulated = 3,
    }
    
    public enum Chiller_Absorption_Indirect_GeneratorHeatSourceType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("HotWater")]
        HotWater = 1,
        
        [JsonProperty("Steam")]
        Steam = 2,
    }
    
    [Description(@"This indirect absorption chiller model is the empirical model from the Building Loads and System Thermodynamics (BLAST) program. Chiller performance curves are generated by fitting catalog data to third order polynomial equations. Two sets of coefficients are required.")]
    [JsonObject("Chiller:Absorption")]
    public class Chiller_Absorption : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("nominal_capacity")]
public string NominalCapacity { get; set; } = "";
        

[JsonProperty("nominal_pumping_power")]
public string NominalPumpingPower { get; set; } = "";
        

[JsonProperty("chilled_water_inlet_node_name")]
public string ChilledWaterInletNodeName { get; set; } = "";
        

[JsonProperty("chilled_water_outlet_node_name")]
public string ChilledWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("condenser_inlet_node_name")]
public string CondenserInletNodeName { get; set; } = "";
        

[JsonProperty("condenser_outlet_node_name")]
public string CondenserOutletNodeName { get; set; } = "";
        

[JsonProperty("minimum_part_load_ratio")]
public System.Nullable<float> MinimumPartLoadRatio { get; set; } = null;
        

[JsonProperty("maximum_part_load_ratio")]
public System.Nullable<float> MaximumPartLoadRatio { get; set; } = null;
        

[JsonProperty("optimum_part_load_ratio")]
public System.Nullable<float> OptimumPartLoadRatio { get; set; } = null;
        

[JsonProperty("design_condenser_inlet_temperature")]
public System.Nullable<float> DesignCondenserInletTemperature { get; set; } = null;
        

[Description("For variable volume this is the max flow & for constant flow this is the flow.")]
[JsonProperty("design_chilled_water_flow_rate")]
public string DesignChilledWaterFlowRate { get; set; } = "";
        

[Description("The steam use coefficients below specify the steam use as a fraction of chiller o" +
    "perating capacity")]
[JsonProperty("design_condenser_water_flow_rate")]
public string DesignCondenserWaterFlowRate { get; set; } = "";
        

[JsonProperty("coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve")]
public System.Nullable<float> Coefficient1OfTheHotWaterOrSteamUsePartLoadRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve")]
public System.Nullable<float> Coefficient2OfTheHotWaterOrSteamUsePartLoadRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve")]
public System.Nullable<float> Coefficient3OfTheHotWaterOrSteamUsePartLoadRatioCurve { get; set; } = null;
        

[Description("The pump electric use coefficients specify the pumping power as a Fraction of Nom" +
    "inal pumping power")]
[JsonProperty("coefficient_1_of_the_pump_electric_use_part_load_ratio_curve")]
public System.Nullable<float> Coefficient1OfThePumpElectricUsePartLoadRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_2_of_the_pump_electric_use_part_load_ratio_curve")]
public System.Nullable<float> Coefficient2OfThePumpElectricUsePartLoadRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_3_of_the_pump_electric_use_part_load_ratio_curve")]
public System.Nullable<float> Coefficient3OfThePumpElectricUsePartLoadRatioCurve { get; set; } = null;
        

[JsonProperty("chilled_water_outlet_temperature_lower_limit")]
public System.Nullable<float> ChilledWaterOutletTemperatureLowerLimit { get; set; } = null;
        

[JsonProperty("generator_inlet_node_name")]
public string GeneratorInletNodeName { get; set; } = "";
        

[JsonProperty("generator_outlet_node_name")]
public string GeneratorOutletNodeName { get; set; } = "";
        

[Description(@"Select operating mode for fluid flow through the chiller. ""NotModulated"" is for either variable or constant pumping with flow controlled by the external plant system. ""ConstantFlow"" is for constant pumping with flow controlled by chiller to operate at full design flow rate. ""LeavingSetpointModulated"" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
[JsonProperty("chiller_flow_mode")]
public Chiller_Absorption_ChillerFlowMode ChillerFlowMode { get; set; } = (Chiller_Absorption_ChillerFlowMode)Enum.Parse(typeof(Chiller_Absorption_ChillerFlowMode), "NotModulated");
        

[Description(@"The Generator side of the chiller can be connected to a hot water or steam plant where the generator inlet and outlet nodes are connected to a plant loop. If the generator is not connected to a plant loop, and the generator inlet/outlet nodes are not used, this field should be specified as steam or left blank. When a plant is not used, the model assumes steam as the heat source.")]
[JsonProperty("generator_heat_source_type")]
public Chiller_Absorption_GeneratorHeatSourceType GeneratorHeatSourceType { get; set; } = (Chiller_Absorption_GeneratorHeatSourceType)Enum.Parse(typeof(Chiller_Absorption_GeneratorHeatSourceType), "Steam");
        

[JsonProperty("design_generator_fluid_flow_rate")]
public string DesignGeneratorFluidFlowRate { get; set; } = "";
        

[Description("This field is not used when the generator inlet/outlet nodes are not specified or" +
    " the generator is connected to a hot water loop.")]
[JsonProperty("degree_of_subcooling_in_steam_generator")]
public System.Nullable<float> DegreeOfSubcoolingInSteamGenerator { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    public enum Chiller_Absorption_ChillerFlowMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("LeavingSetpointModulated")]
        LeavingSetpointModulated = 2,
        
        [JsonProperty("NotModulated")]
        NotModulated = 3,
    }
    
    public enum Chiller_Absorption_GeneratorHeatSourceType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("HotWater")]
        HotWater = 1,
        
        [JsonProperty("Steam")]
        Steam = 2,
    }
    
    [Description("This constant COP chiller model provides a means of quickly specifying a Chiller " +
        "where performance data is not available.")]
    [JsonObject("Chiller:ConstantCOP")]
    public class Chiller_ConstantCOP : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("nominal_capacity")]
public string NominalCapacity { get; set; } = "";
        

[JsonProperty("nominal_cop")]
public System.Nullable<float> NominalCop { get; set; } = null;
        

[Description("For variable volume this is the maximum flow and for constant flow this is the fl" +
    "ow.")]
[JsonProperty("design_chilled_water_flow_rate")]
public string DesignChilledWaterFlowRate { get; set; } = "";
        

[Description("This field is not used for Condenser Type = AirCooled or EvaporativelyCooled")]
[JsonProperty("design_condenser_water_flow_rate")]
public string DesignCondenserWaterFlowRate { get; set; } = "";
        

[JsonProperty("chilled_water_inlet_node_name")]
public string ChilledWaterInletNodeName { get; set; } = "";
        

[JsonProperty("chilled_water_outlet_node_name")]
public string ChilledWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("condenser_inlet_node_name")]
public string CondenserInletNodeName { get; set; } = "";
        

[JsonProperty("condenser_outlet_node_name")]
public string CondenserOutletNodeName { get; set; } = "";
        

[JsonProperty("condenser_type")]
public Chiller_ConstantCOP_CondenserType CondenserType { get; set; } = (Chiller_ConstantCOP_CondenserType)Enum.Parse(typeof(Chiller_ConstantCOP_CondenserType), "AirCooled");
        

[Description(@"Select operating mode for fluid flow through the chiller. ""NotModulated"" is for either variable or constant pumping with flow controlled by the external plant system. ""ConstantFlow"" is for constant pumping with flow controlled by chiller to operate at full design flow rate. ""LeavingSetpointModulated"" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
[JsonProperty("chiller_flow_mode")]
public Chiller_ConstantCOP_ChillerFlowMode ChillerFlowMode { get; set; } = (Chiller_ConstantCOP_ChillerFlowMode)Enum.Parse(typeof(Chiller_ConstantCOP_ChillerFlowMode), "NotModulated");
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the chiller is not operating.")]
[JsonProperty("basin_heater_capacity")]
public System.Nullable<float> BasinHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdo" +
    "or dry-bulb temperature when the basin heater turns on.")]
[JsonProperty("basin_heater_setpoint_temperature")]
public System.Nullable<float> BasinHeaterSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty("basin_heater_operating_schedule_name")]
public string BasinHeaterOperatingScheduleName { get; set; } = "";
    }
    
    public enum Chiller_ConstantCOP_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 3,
    }
    
    public enum Chiller_ConstantCOP_ChillerFlowMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("LeavingSetpointModulated")]
        LeavingSetpointModulated = 2,
        
        [JsonProperty("NotModulated")]
        NotModulated = 3,
    }
    
    [Description("This chiller model is the empirical model from the Building Loads and System Ther" +
        "modynamics (BLAST) program. Chiller performance curves are generated by fitting " +
        "catalog data to third order polynomial equations. Three sets of coefficients are" +
        " required.")]
    [JsonObject("Chiller:EngineDriven")]
    public class Chiller_EngineDriven : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("condenser_type")]
public Chiller_EngineDriven_CondenserType CondenserType { get; set; } = (Chiller_EngineDriven_CondenserType)Enum.Parse(typeof(Chiller_EngineDriven_CondenserType), "AirCooled");
        

[JsonProperty("nominal_capacity")]
public string NominalCapacity { get; set; } = "";
        

[Description("Nominal Refrigeration Cycle COP")]
[JsonProperty("nominal_cop")]
public System.Nullable<float> NominalCop { get; set; } = null;
        

[JsonProperty("chilled_water_inlet_node_name")]
public string ChilledWaterInletNodeName { get; set; } = "";
        

[JsonProperty("chilled_water_outlet_node_name")]
public string ChilledWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("condenser_inlet_node_name")]
public string CondenserInletNodeName { get; set; } = "";
        

[JsonProperty("condenser_outlet_node_name")]
public string CondenserOutletNodeName { get; set; } = "";
        

[JsonProperty("minimum_part_load_ratio")]
public System.Nullable<float> MinimumPartLoadRatio { get; set; } = null;
        

[JsonProperty("maximum_part_load_ratio")]
public System.Nullable<float> MaximumPartLoadRatio { get; set; } = null;
        

[JsonProperty("optimum_part_load_ratio")]
public System.Nullable<float> OptimumPartLoadRatio { get; set; } = null;
        

[JsonProperty("design_condenser_inlet_temperature")]
public System.Nullable<float> DesignCondenserInletTemperature { get; set; } = null;
        

[JsonProperty("temperature_rise_coefficient")]
public System.Nullable<float> TemperatureRiseCoefficient { get; set; } = null;
        

[JsonProperty("design_chilled_water_outlet_temperature")]
public System.Nullable<float> DesignChilledWaterOutletTemperature { get; set; } = null;
        

[Description("For variable volume this is the maximum flow and for constant flow this is the fl" +
    "ow.")]
[JsonProperty("design_chilled_water_flow_rate")]
public string DesignChilledWaterFlowRate { get; set; } = "";
        

[Description("This field is not used for Condenser Type = AirCooled or EvaporativelyCooled")]
[JsonProperty("design_condenser_water_flow_rate")]
public string DesignCondenserWaterFlowRate { get; set; } = "";
        

[JsonProperty("coefficient_1_of_capacity_ratio_curve")]
public System.Nullable<float> Coefficient1OfCapacityRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_2_of_capacity_ratio_curve")]
public System.Nullable<float> Coefficient2OfCapacityRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_3_of_capacity_ratio_curve")]
public System.Nullable<float> Coefficient3OfCapacityRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_1_of_power_ratio_curve")]
public System.Nullable<float> Coefficient1OfPowerRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_2_of_power_ratio_curve")]
public System.Nullable<float> Coefficient2OfPowerRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_3_of_power_ratio_curve")]
public System.Nullable<float> Coefficient3OfPowerRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_1_of_full_load_ratio_curve")]
public System.Nullable<float> Coefficient1OfFullLoadRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_2_of_full_load_ratio_curve")]
public System.Nullable<float> Coefficient2OfFullLoadRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_3_of_full_load_ratio_curve")]
public System.Nullable<float> Coefficient3OfFullLoadRatioCurve { get; set; } = null;
        

[Description("Special EngineDriven Chiller Parameters Below")]
[JsonProperty("chilled_water_outlet_temperature_lower_limit")]
public System.Nullable<float> ChilledWaterOutletTemperatureLowerLimit { get; set; } = null;
        

[Description("Curve is a function of Part Load Ratio (PLR) curve = a + b*PLR + c*PLR**2 PLR = R" +
    "atio of evaporator heat transfer rate to nominal capacity")]
[JsonProperty("fuel_use_curve_name")]
public string FuelUseCurveName { get; set; } = "";
        

[Description("Curve is a function of Part Load Ratio (PLR) curve = a + b*PLR + c*PLR**2 PLR = R" +
    "atio of evaporator heat transfer rate to nominal capacity")]
[JsonProperty("jacket_heat_recovery_curve_name")]
public string JacketHeatRecoveryCurveName { get; set; } = "";
        

[Description("Curve is a function of Part Load Ratio (PLR) curve = a + b*PLR + c*PLR**2 PLR = R" +
    "atio of evaporator heat transfer rate to nominal capacity")]
[JsonProperty("lube_heat_recovery_curve_name")]
public string LubeHeatRecoveryCurveName { get; set; } = "";
        

[Description("Curve is a function of Part Load Ratio (PLR) curve = a + b*PLR + c*PLR**2 PLR = R" +
    "atio of evaporator heat transfer rate to nominal capacity")]
[JsonProperty("total_exhaust_energy_curve_name")]
public string TotalExhaustEnergyCurveName { get; set; } = "";
        

[Description("Curve is a function of Part Load Ratio (PLR) curve = a + b*PLR + c*PLR**2 PLR = R" +
    "atio of evaporator heat transfer rate to nominal capacity")]
[JsonProperty("exhaust_temperature_curve_name")]
public string ExhaustTemperatureCurveName { get; set; } = "";
        

[Description("curve = C1 * (nominal capacity)**C2")]
[JsonProperty("coefficient_1_of_u_factor_times_area_curve")]
public System.Nullable<float> Coefficient1OfUFactorTimesAreaCurve { get; set; } = null;
        

[Description("curve = C1 * (nominal capacity)**C2 typical value .9")]
[JsonProperty("coefficient_2_of_u_factor_times_area_curve")]
public System.Nullable<float> Coefficient2OfUFactorTimesAreaCurve { get; set; } = null;
        

[JsonProperty("maximum_exhaust_flow_per_unit_of_power_output")]
public System.Nullable<float> MaximumExhaustFlowPerUnitOfPowerOutput { get; set; } = null;
        

[JsonProperty("design_minimum_exhaust_temperature")]
public System.Nullable<float> DesignMinimumExhaustTemperature { get; set; } = null;
        

[JsonProperty("fuel_type")]
public Chiller_EngineDriven_FuelType FuelType { get; set; } = (Chiller_EngineDriven_FuelType)Enum.Parse(typeof(Chiller_EngineDriven_FuelType), "Diesel");
        

[JsonProperty("fuel_higher_heating_value")]
public System.Nullable<float> FuelHigherHeatingValue { get; set; } = null;
        

[Description("If non-zero, then the heat recovery inlet and outlet node names must be entered.")]
[JsonProperty("design_heat_recovery_water_flow_rate")]
public string DesignHeatRecoveryWaterFlowRate { get; set; } = (System.String)"0";
        

[JsonProperty("heat_recovery_inlet_node_name")]
public string HeatRecoveryInletNodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_outlet_node_name")]
public string HeatRecoveryOutletNodeName { get; set; } = "";
        

[Description(@"Select operating mode for fluid flow through the chiller. ""NotModulated"" is for either variable or constant pumping with flow controlled by the external plant system. ""ConstantFlow"" is for constant pumping with flow controlled by chiller to operate at full design flow rate. ""LeavingSetpointModulated"" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
[JsonProperty("chiller_flow_mode")]
public Chiller_EngineDriven_ChillerFlowMode ChillerFlowMode { get; set; } = (Chiller_EngineDriven_ChillerFlowMode)Enum.Parse(typeof(Chiller_EngineDriven_ChillerFlowMode), "NotModulated");
        

[JsonProperty("maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node")]
public System.Nullable<float> MaximumTemperatureForHeatRecoveryAtHeatRecoveryOutletNode { get; set; } = (System.Nullable<float>)Single.Parse("60", CultureInfo.InvariantCulture);
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the chiller is not operating.")]
[JsonProperty("basin_heater_capacity")]
public System.Nullable<float> BasinHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdo" +
    "or dry-bulb temperature when the basin heater turns on.")]
[JsonProperty("basin_heater_setpoint_temperature")]
public System.Nullable<float> BasinHeaterSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty("basin_heater_operating_schedule_name")]
public string BasinHeaterOperatingScheduleName { get; set; } = "";
        

[Description("This optional field is the fraction of total rejected heat that can be recovered " +
    "at full load. Also used to autosize Design Heat Recovery Water Flow Rate as a fr" +
    "action of Design Condenser Water Flow Rate.")]
[JsonProperty("condenser_heat_recovery_relative_capacity_fraction")]
public System.Nullable<float> CondenserHeatRecoveryRelativeCapacityFraction { get; set; } = null;
    }
    
    public enum Chiller_EngineDriven_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 3,
    }
    
    public enum Chiller_EngineDriven_FuelType
    {
        
        [JsonProperty("Diesel")]
        Diesel = 0,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 1,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 2,
        
        [JsonProperty("Gasoline")]
        Gasoline = 3,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 4,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 5,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 6,
        
        [JsonProperty("Propane")]
        Propane = 7,
    }
    
    public enum Chiller_EngineDriven_ChillerFlowMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("LeavingSetpointModulated")]
        LeavingSetpointModulated = 2,
        
        [JsonProperty("NotModulated")]
        NotModulated = 3,
    }
    
    [Description("This chiller model is the empirical model from the Building Loads and System Ther" +
        "modynamics (BLAST) program. Chiller performance curves are generated by fitting " +
        "catalog data to third order polynomial equations. Three sets of coefficients are" +
        " required.")]
    [JsonObject("Chiller:CombustionTurbine")]
    public class Chiller_CombustionTurbine : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("condenser_type")]
public Chiller_CombustionTurbine_CondenserType CondenserType { get; set; } = (Chiller_CombustionTurbine_CondenserType)Enum.Parse(typeof(Chiller_CombustionTurbine_CondenserType), "AirCooled");
        

[JsonProperty("nominal_capacity")]
public string NominalCapacity { get; set; } = "";
        

[JsonProperty("nominal_cop")]
public System.Nullable<float> NominalCop { get; set; } = null;
        

[JsonProperty("chilled_water_inlet_node_name")]
public string ChilledWaterInletNodeName { get; set; } = "";
        

[JsonProperty("chilled_water_outlet_node_name")]
public string ChilledWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("condenser_inlet_node_name")]
public string CondenserInletNodeName { get; set; } = "";
        

[JsonProperty("condenser_outlet_node_name")]
public string CondenserOutletNodeName { get; set; } = "";
        

[JsonProperty("minimum_part_load_ratio")]
public System.Nullable<float> MinimumPartLoadRatio { get; set; } = null;
        

[JsonProperty("maximum_part_load_ratio")]
public System.Nullable<float> MaximumPartLoadRatio { get; set; } = null;
        

[JsonProperty("optimum_part_load_ratio")]
public System.Nullable<float> OptimumPartLoadRatio { get; set; } = null;
        

[JsonProperty("design_condenser_inlet_temperature")]
public System.Nullable<float> DesignCondenserInletTemperature { get; set; } = null;
        

[JsonProperty("temperature_rise_coefficient")]
public System.Nullable<float> TemperatureRiseCoefficient { get; set; } = null;
        

[JsonProperty("design_chilled_water_outlet_temperature")]
public System.Nullable<float> DesignChilledWaterOutletTemperature { get; set; } = null;
        

[Description("For variable volume this is the max flow & for constant flow this is the flow.")]
[JsonProperty("design_chilled_water_flow_rate")]
public string DesignChilledWaterFlowRate { get; set; } = "";
        

[Description("This field is not used for Condenser Type = AirCooled or EvaporativelyCooled")]
[JsonProperty("design_condenser_water_flow_rate")]
public string DesignCondenserWaterFlowRate { get; set; } = "";
        

[JsonProperty("coefficient_1_of_capacity_ratio_curve")]
public System.Nullable<float> Coefficient1OfCapacityRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_2_of_capacity_ratio_curve")]
public System.Nullable<float> Coefficient2OfCapacityRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_3_of_capacity_ratio_curve")]
public System.Nullable<float> Coefficient3OfCapacityRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_1_of_power_ratio_curve")]
public System.Nullable<float> Coefficient1OfPowerRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_2_of_power_ratio_curve")]
public System.Nullable<float> Coefficient2OfPowerRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_3_of_power_ratio_curve")]
public System.Nullable<float> Coefficient3OfPowerRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_1_of_full_load_ratio_curve")]
public System.Nullable<float> Coefficient1OfFullLoadRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_2_of_full_load_ratio_curve")]
public System.Nullable<float> Coefficient2OfFullLoadRatioCurve { get; set; } = null;
        

[JsonProperty("coefficient_3_of_full_load_ratio_curve")]
public System.Nullable<float> Coefficient3OfFullLoadRatioCurve { get; set; } = null;
        

[Description("Special Gas Turbine Chiller Parameters Below")]
[JsonProperty("chilled_water_outlet_temperature_lower_limit")]
public System.Nullable<float> ChilledWaterOutletTemperatureLowerLimit { get; set; } = null;
        

[JsonProperty("coefficient_1_of_fuel_input_curve")]
public System.Nullable<float> Coefficient1OfFuelInputCurve { get; set; } = null;
        

[JsonProperty("coefficient_2_of_fuel_input_curve")]
public System.Nullable<float> Coefficient2OfFuelInputCurve { get; set; } = null;
        

[JsonProperty("coefficient_3_of_fuel_input_curve")]
public System.Nullable<float> Coefficient3OfFuelInputCurve { get; set; } = null;
        

[JsonProperty("coefficient_1_of_temperature_based_fuel_input_curve")]
public System.Nullable<float> Coefficient1OfTemperatureBasedFuelInputCurve { get; set; } = null;
        

[JsonProperty("coefficient_2_of_temperature_based_fuel_input_curve")]
public System.Nullable<float> Coefficient2OfTemperatureBasedFuelInputCurve { get; set; } = null;
        

[JsonProperty("coefficient_3_of_temperature_based_fuel_input_curve")]
public System.Nullable<float> Coefficient3OfTemperatureBasedFuelInputCurve { get; set; } = null;
        

[JsonProperty("coefficient_1_of_exhaust_flow_curve")]
public System.Nullable<float> Coefficient1OfExhaustFlowCurve { get; set; } = null;
        

[JsonProperty("coefficient_2_of_exhaust_flow_curve")]
public System.Nullable<float> Coefficient2OfExhaustFlowCurve { get; set; } = null;
        

[JsonProperty("coefficient_3_of_exhaust_flow_curve")]
public System.Nullable<float> Coefficient3OfExhaustFlowCurve { get; set; } = null;
        

[JsonProperty("coefficient_1_of_exhaust_gas_temperature_curve")]
public System.Nullable<float> Coefficient1OfExhaustGasTemperatureCurve { get; set; } = null;
        

[JsonProperty("coefficient_2_of_exhaust_gas_temperature_curve")]
public System.Nullable<float> Coefficient2OfExhaustGasTemperatureCurve { get; set; } = null;
        

[JsonProperty("coefficient_3_of_exhaust_gas_temperature_curve")]
public System.Nullable<float> Coefficient3OfExhaustGasTemperatureCurve { get; set; } = null;
        

[JsonProperty("coefficient_1_of_temperature_based_exhaust_gas_temperature_curve")]
public System.Nullable<float> Coefficient1OfTemperatureBasedExhaustGasTemperatureCurve { get; set; } = null;
        

[JsonProperty("coefficient_2_of_temperature_based_exhaust_gas_temperature_curve")]
public System.Nullable<float> Coefficient2OfTemperatureBasedExhaustGasTemperatureCurve { get; set; } = null;
        

[JsonProperty("coefficient_3_of_temperature_based_exhaust_gas_temperature_curve")]
public System.Nullable<float> Coefficient3OfTemperatureBasedExhaustGasTemperatureCurve { get; set; } = null;
        

[JsonProperty("coefficient_1_of_recovery_lube_heat_curve")]
public System.Nullable<float> Coefficient1OfRecoveryLubeHeatCurve { get; set; } = null;
        

[JsonProperty("coefficient_2_of_recovery_lube_heat_curve")]
public System.Nullable<float> Coefficient2OfRecoveryLubeHeatCurve { get; set; } = null;
        

[JsonProperty("coefficient_3_of_recovery_lube_heat_curve")]
public System.Nullable<float> Coefficient3OfRecoveryLubeHeatCurve { get; set; } = null;
        

[JsonProperty("coefficient_1_of_u_factor_times_area_curve")]
public System.Nullable<float> Coefficient1OfUFactorTimesAreaCurve { get; set; } = null;
        

[Description("typical value .9")]
[JsonProperty("coefficient_2_of_u_factor_times_area_curve")]
public System.Nullable<float> Coefficient2OfUFactorTimesAreaCurve { get; set; } = null;
        

[JsonProperty("gas_turbine_engine_capacity")]
public string GasTurbineEngineCapacity { get; set; } = "";
        

[JsonProperty("maximum_exhaust_flow_per_unit_of_power_output")]
public System.Nullable<float> MaximumExhaustFlowPerUnitOfPowerOutput { get; set; } = null;
        

[JsonProperty("design_steam_saturation_temperature")]
public System.Nullable<float> DesignSteamSaturationTemperature { get; set; } = null;
        

[JsonProperty("fuel_higher_heating_value")]
public System.Nullable<float> FuelHigherHeatingValue { get; set; } = null;
        

[Description("If non-zero, then the heat recovery inlet and outlet node names must be entered.")]
[JsonProperty("design_heat_recovery_water_flow_rate")]
public string DesignHeatRecoveryWaterFlowRate { get; set; } = (System.String)"0";
        

[JsonProperty("heat_recovery_inlet_node_name")]
public string HeatRecoveryInletNodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_outlet_node_name")]
public string HeatRecoveryOutletNodeName { get; set; } = "";
        

[Description(@"Select operating mode for fluid flow through the chiller. ""NotModulated"" is for either variable or constant pumping with flow controlled by the external plant system. ""ConstantFlow"" is for constant pumping with flow controlled by chiller to operate at full design flow rate. ""LeavingSetpointModulated"" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
[JsonProperty("chiller_flow_mode")]
public Chiller_CombustionTurbine_ChillerFlowMode ChillerFlowMode { get; set; } = (Chiller_CombustionTurbine_ChillerFlowMode)Enum.Parse(typeof(Chiller_CombustionTurbine_ChillerFlowMode), "NotModulated");
        

[JsonProperty("fuel_type")]
public Chiller_CombustionTurbine_FuelType FuelType { get; set; } = (Chiller_CombustionTurbine_FuelType)Enum.Parse(typeof(Chiller_CombustionTurbine_FuelType), "NaturalGas");
        

[JsonProperty("heat_recovery_maximum_temperature")]
public System.Nullable<float> HeatRecoveryMaximumTemperature { get; set; } = (System.Nullable<float>)Single.Parse("80", CultureInfo.InvariantCulture);
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, The heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the chiller is not operating.")]
[JsonProperty("basin_heater_capacity")]
public System.Nullable<float> BasinHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdo" +
    "or dry-bulb temperature when the basin heater turns on.")]
[JsonProperty("basin_heater_setpoint_temperature")]
public System.Nullable<float> BasinHeaterSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty("basin_heater_operating_schedule_name")]
public string BasinHeaterOperatingScheduleName { get; set; } = "";
        

[Description("This optional field is the fraction of total rejected heat that can be recovered " +
    "at full load. Also used to autosize Design Heat Recovery Water Flow Rate as a fr" +
    "action of Design Condenser Water Flow Rate.")]
[JsonProperty("condenser_heat_recovery_relative_capacity_fraction")]
public System.Nullable<float> CondenserHeatRecoveryRelativeCapacityFraction { get; set; } = null;
        

[Description("This optional field is the nominal turbine engine efficiency and is used when Gas" +
    " Turbine Engine Capacity is set to Autosize")]
[JsonProperty("turbine_engine_efficiency")]
public System.Nullable<float> TurbineEngineEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.35", CultureInfo.InvariantCulture);
    }
    
    public enum Chiller_CombustionTurbine_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 3,
    }
    
    public enum Chiller_CombustionTurbine_ChillerFlowMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("LeavingSetpointModulated")]
        LeavingSetpointModulated = 2,
        
        [JsonProperty("NotModulated")]
        NotModulated = 3,
    }
    
    public enum Chiller_CombustionTurbine_FuelType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 2,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 3,
        
        [JsonProperty("Gasoline")]
        Gasoline = 4,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 5,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 6,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 7,
        
        [JsonProperty("Propane")]
        Propane = 8,
    }
    
    [Description("Direct fired gas absorption chiller-heater using performance curves similar to DO" +
        "E-2")]
    [JsonObject("ChillerHeater:Absorption:DirectFired")]
    public class ChillerHeater_Absorption_DirectFired : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("nominal_cooling_capacity")]
public string NominalCoolingCapacity { get; set; } = (System.String)"Autosize";
        

[Description("A positive fraction that represents the ratio of the heating capacity divided by " +
    "the cooling capacity at rated conditions.")]
[JsonProperty("heating_to_cooling_capacity_ratio")]
public System.Nullable<float> HeatingToCoolingCapacityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[Description("The positive fraction that represents the ratio of the instantaneous fuel used di" +
    "vided by the cooling capacity at rated conditions.")]
[JsonProperty("fuel_input_to_cooling_output_ratio")]
public System.Nullable<float> FuelInputToCoolingOutputRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.97", CultureInfo.InvariantCulture);
        

[Description("The positive fraction that represents the ratio of the instantaneous fuel used di" +
    "vided by the nominal heating capacity.")]
[JsonProperty("fuel_input_to_heating_output_ratio")]
public System.Nullable<float> FuelInputToHeatingOutputRatio { get; set; } = (System.Nullable<float>)Single.Parse("1.25", CultureInfo.InvariantCulture);
        

[Description("The positive fraction that represents the ratio of the instantaneous electricity " +
    "used divided by the cooling capacity at rated conditions. If the chiller is both" +
    " heating and cooling only the cooling electricity is used.")]
[JsonProperty("electric_input_to_cooling_output_ratio")]
public System.Nullable<float> ElectricInputToCoolingOutputRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.01", CultureInfo.InvariantCulture);
        

[Description("The positive fraction that represents the ratio of the instantaneous electricity " +
    "used divided by the nominal heating capacity. If the chiller is both heating and" +
    " cooling only the cooling electricity is used.")]
[JsonProperty("electric_input_to_heating_output_ratio")]
public System.Nullable<float> ElectricInputToHeatingOutputRatio { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("chilled_water_inlet_node_name")]
public string ChilledWaterInletNodeName { get; set; } = "";
        

[JsonProperty("chilled_water_outlet_node_name")]
public string ChilledWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("condenser_inlet_node_name")]
public string CondenserInletNodeName { get; set; } = "";
        

[Description("Not required if air-cooled")]
[JsonProperty("condenser_outlet_node_name")]
public string CondenserOutletNodeName { get; set; } = "";
        

[JsonProperty("hot_water_inlet_node_name")]
public string HotWaterInletNodeName { get; set; } = "";
        

[JsonProperty("hot_water_outlet_node_name")]
public string HotWaterOutletNodeName { get; set; } = "";
        

[Description(@"The positive fraction that represents the minimum cooling output possible when operated continually at rated temperature conditions divided by the nominal cooling capacity at those same conditions. If the load on the chiller is below this fraction the chiller will cycle.")]
[JsonProperty("minimum_part_load_ratio")]
public System.Nullable<float> MinimumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[Description(@"The positive fraction that represents the maximum cooling output possible at rated temperature conditions divided by the nominal cooling capacity at those same conditions. If greater than 1.0, the chiller is typically thought of as capable of being overloaded.")]
[JsonProperty("maximum_part_load_ratio")]
public System.Nullable<float> MaximumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("The positive fraction that represents the optimal cooling output at rated tempera" +
    "ture conditions divided by the nominal cooling capacity at those same conditions" +
    ". It represents the most desirable operating point for the chiller.")]
[JsonProperty("optimum_part_load_ratio")]
public System.Nullable<float> OptimumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("The temperature of the water entering the condenser of the chiller when operating" +
    " at design conditions. This is usually based on the temperature delivered by the" +
    " cooling tower in a water cooled application.")]
[JsonProperty("design_entering_condenser_water_temperature")]
public System.Nullable<float> DesignEnteringCondenserWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("29", CultureInfo.InvariantCulture);
        

[Description("The temperature of the water leaving the evaporator of the chiller when operating" +
    " at design conditions also called the chilled water supply temperature or leavin" +
    "g chilled water temperature.")]
[JsonProperty("design_leaving_chilled_water_temperature")]
public System.Nullable<float> DesignLeavingChilledWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("7", CultureInfo.InvariantCulture);
        

[Description("For variable volume this is the max flow & for constant flow this is the flow.")]
[JsonProperty("design_chilled_water_flow_rate")]
public string DesignChilledWaterFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("The water flow rate at design conditions through the condenser. This field is not" +
    " used for Condenser Type = AirCooled")]
[JsonProperty("design_condenser_water_flow_rate")]
public string DesignCondenserWaterFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("The water flow rate at design conditions through the heater side.")]
[JsonProperty("design_hot_water_flow_rate")]
public string DesignHotWaterFlowRate { get; set; } = (System.String)"Autosize";
        

[Description(@"The CoolCapFT curve represents the fraction of the cooling capacity of the chiller as it varies by temperature. The curve is normalized so that at design conditions the value of the curve should be 1.0. This is a biquadratic curve with the input variables being the leaving chilled water temperature and either the entering or leaving condenser water temperature.")]
[JsonProperty("cooling_capacity_function_of_temperature_curve_name")]
public string CoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"The curve represents the fraction of the fuel input to the chiller at full load as it varies by temperature. The curve is normalized so that at design conditions the value of the curve should be 1.0. This is a biquadratic curve with the input variables being the leaving chilled water temperature and either the entering or leaving condenser water temperature.")]
[JsonProperty("fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name")]
public string FuelInputToCoolingOutputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"The curve represents the fraction of the fuel input to the chiller as the load on the chiller varies but the operating temperatures remain at the design values. The curve is normalized so that at full load the value of the curve should be 1.0. The curve is usually linear or quadratic.")]
[JsonProperty("fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name")]
public string FuelInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveName { get; set; } = "";
        

[Description(@"The curve represents the fraction of the electricity to the chiller at full load as it varies by temperature. The curve is normalized so that at design conditions the value of the curve should be 1.0. This is a biquadratic curve with the input variables being the leaving chilled water temperature and either the entering or leaving condenser water temperature.")]
[JsonProperty("electric_input_to_cooling_output_ratio_function_of_temperature_curve_name")]
public string ElectricInputToCoolingOutputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"The curve represents the fraction of the electricity to the chiller as the load on the chiller varies but the operating temperatures remain at the design values. The curve is normalized so that at full load the value of the curve should be 1.0. The curve is usually linear or quadratic.")]
[JsonProperty("electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name")]
public string ElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveName { get; set; } = "";
        

[Description(@"The curve represents how the heating capacity of the chiller varies with cooling capacity when the chiller is simultaneous heating and cooling. The curve is normalized so an input of 1.0 represents the nominal cooling capacity and an output of 1.0 represents the full heating capacity (see the Heating to cooling capacity ratio input) The curve is usually linear or quadratic.")]
[JsonProperty("heating_capacity_function_of_cooling_capacity_curve_name")]
public string HeatingCapacityFunctionOfCoolingCapacityCurveName { get; set; } = "";
        

[Description(@"When the chiller is operating as only a heater, this curve is used to represent the fraction of fuel used as the heating load varies. It is normalized so that a value of 1.0 is the full heating capacity. The curve is usually linear or quadratic and will probably be similar to a boiler curve for most chillers.")]
[JsonProperty("fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name")]
public string FuelInputToHeatOutputRatioDuringHeatingOnlyOperationCurveName { get; set; } = "";
        

[Description(@"Sets the second independent variable in the three temperature dependent performance curves to either the leaving or entering condenser water temperature. Manufacturers express the performance of their chillers using either the leaving condenser water temperature (to the tower) or the entering condenser water temperature (from the tower).")]
[JsonProperty("temperature_curve_input_variable")]
public ChillerHeater_Absorption_DirectFired_TemperatureCurveInputVariable TemperatureCurveInputVariable { get; set; } = (ChillerHeater_Absorption_DirectFired_TemperatureCurveInputVariable)Enum.Parse(typeof(ChillerHeater_Absorption_DirectFired_TemperatureCurveInputVariable), "EnteringCondenser");
        

[Description("The condenser can either be air cooled or connected to a cooling tower.")]
[JsonProperty("condenser_type")]
public ChillerHeater_Absorption_DirectFired_CondenserType CondenserType { get; set; } = (ChillerHeater_Absorption_DirectFired_CondenserType)Enum.Parse(typeof(ChillerHeater_Absorption_DirectFired_CondenserType), "WaterCooled");
        

[Description("The chilled water supply temperature below which the chiller will shut off.")]
[JsonProperty("chilled_water_temperature_lower_limit")]
public System.Nullable<float> ChilledWaterTemperatureLowerLimit { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description("Not currently used.")]
[JsonProperty("fuel_higher_heating_value")]
public System.Nullable<float> FuelHigherHeatingValue { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("fuel_type")]
public ChillerHeater_Absorption_DirectFired_FuelType FuelType { get; set; } = (ChillerHeater_Absorption_DirectFired_FuelType)Enum.Parse(typeof(ChillerHeater_Absorption_DirectFired_FuelType), "NaturalGas");
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    public enum ChillerHeater_Absorption_DirectFired_TemperatureCurveInputVariable
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("EnteringCondenser")]
        EnteringCondenser = 1,
        
        [JsonProperty("LeavingCondenser")]
        LeavingCondenser = 2,
    }
    
    public enum ChillerHeater_Absorption_DirectFired_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 2,
    }
    
    public enum ChillerHeater_Absorption_DirectFired_FuelType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 2,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 3,
        
        [JsonProperty("Gasoline")]
        Gasoline = 4,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 5,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 6,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 7,
        
        [JsonProperty("Propane")]
        Propane = 8,
    }
    
    [Description("Exhaust fired absorption chiller-heater using performance curves similar to DOE-2" +
        "")]
    [JsonObject("ChillerHeater:Absorption:DoubleEffect")]
    public class ChillerHeater_Absorption_DoubleEffect : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("nominal_cooling_capacity")]
public string NominalCoolingCapacity { get; set; } = (System.String)"Autosize";
        

[Description("A positive fraction that represents the ratio of the heating capacity divided by " +
    "the cooling capacity at rated conditions.")]
[JsonProperty("heating_to_cooling_capacity_ratio")]
public System.Nullable<float> HeatingToCoolingCapacityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[Description("The positive fraction that represents the ratio of the instantaneous fuel used di" +
    "vided by the cooling capacity at rated conditions.")]
[JsonProperty("thermal_energy_input_to_cooling_output_ratio")]
public System.Nullable<float> ThermalEnergyInputToCoolingOutputRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.97", CultureInfo.InvariantCulture);
        

[Description("The positive fraction that represents the ratio of the instantaneous fuel used di" +
    "vided by the nominal heating capacity.")]
[JsonProperty("thermal_energy_input_to_heating_output_ratio")]
public System.Nullable<float> ThermalEnergyInputToHeatingOutputRatio { get; set; } = (System.Nullable<float>)Single.Parse("1.25", CultureInfo.InvariantCulture);
        

[Description("The positive fraction that represents the ratio of the instantaneous electricity " +
    "used divided by the cooling capacity at rated conditions. If the chiller is both" +
    " heating and cooling only the cooling electricity is used.")]
[JsonProperty("electric_input_to_cooling_output_ratio")]
public System.Nullable<float> ElectricInputToCoolingOutputRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.01", CultureInfo.InvariantCulture);
        

[Description("The positive fraction that represents the ratio of the instantaneous electricity " +
    "used divided by the nominal heating capacity. If the chiller is both heating and" +
    " cooling only the cooling electricity is used.")]
[JsonProperty("electric_input_to_heating_output_ratio")]
public System.Nullable<float> ElectricInputToHeatingOutputRatio { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("chilled_water_inlet_node_name")]
public string ChilledWaterInletNodeName { get; set; } = "";
        

[JsonProperty("chilled_water_outlet_node_name")]
public string ChilledWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("condenser_inlet_node_name")]
public string CondenserInletNodeName { get; set; } = "";
        

[Description("Not required if air-cooled")]
[JsonProperty("condenser_outlet_node_name")]
public string CondenserOutletNodeName { get; set; } = "";
        

[JsonProperty("hot_water_inlet_node_name")]
public string HotWaterInletNodeName { get; set; } = "";
        

[JsonProperty("hot_water_outlet_node_name")]
public string HotWaterOutletNodeName { get; set; } = "";
        

[Description(@"The positive fraction that represents the minimum cooling output possible when operated continually at rated temperature conditions divided by the nominal cooling capacity at those same conditions. If the load on the chiller is below this fraction the chiller will cycle.")]
[JsonProperty("minimum_part_load_ratio")]
public System.Nullable<float> MinimumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[Description(@"The positive fraction that represents the maximum cooling output possible at rated temperature conditions divided by the nominal cooling capacity at those same conditions. If greater than 1.0, the chiller is typically thought of as capable of being overloaded.")]
[JsonProperty("maximum_part_load_ratio")]
public System.Nullable<float> MaximumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("The positive fraction that represents the optimal cooling output at rated tempera" +
    "ture conditions divided by the nominal cooling capacity at those same conditions" +
    ". It represents the most desirable operating point for the chiller.")]
[JsonProperty("optimum_part_load_ratio")]
public System.Nullable<float> OptimumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("The temperature of the water entering the condenser of the chiller when operating" +
    " at design conditions. This is usually based on the temperature delivered by the" +
    " cooling tower in a water cooled application.")]
[JsonProperty("design_entering_condenser_water_temperature")]
public System.Nullable<float> DesignEnteringCondenserWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("29", CultureInfo.InvariantCulture);
        

[Description("The temperature of the water leaving the evaporator of the chiller when operating" +
    " at design conditions also called the chilled water supply temperature or leavin" +
    "g chilled water temperature.")]
[JsonProperty("design_leaving_chilled_water_temperature")]
public System.Nullable<float> DesignLeavingChilledWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("7", CultureInfo.InvariantCulture);
        

[Description("For variable volume this is the max flow & for constant flow this is the flow.")]
[JsonProperty("design_chilled_water_flow_rate")]
public string DesignChilledWaterFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("The water flow rate at design conditions through the condenser. This field is not" +
    " used for Condenser Type = AirCooled")]
[JsonProperty("design_condenser_water_flow_rate")]
public string DesignCondenserWaterFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("The water flow rate at design conditions through the heater side.")]
[JsonProperty("design_hot_water_flow_rate")]
public string DesignHotWaterFlowRate { get; set; } = (System.String)"Autosize";
        

[Description(@"The CoolCapFT curve represents the fraction of the cooling capacity of the chiller as it varies by temperature. The curve is normalized so that at design conditions the value of the curve should be 1.0. This is a biquadratic curve with the input variables being the leaving chilled water temperature and either the entering or leaving condenser water temperature.")]
[JsonProperty("cooling_capacity_function_of_temperature_curve_name")]
public string CoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"The curve represents the fraction of the fuel input to the chiller at full load as it varies by temperature. The curve is normalized so that at design conditions the value of the curve should be 1.0. This is a biquadratic curve with the input variables being the leaving chilled water temperature and either the entering or leaving condenser water temperature.")]
[JsonProperty("fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name")]
public string FuelInputToCoolingOutputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"The curve represents the fraction of the fuel input to the chiller as the load on the chiller varies but the operating temperatures remain at the design values. The curve is normalized so that at full load the value of the curve should be 1.0. The curve is usually linear or quadratic.")]
[JsonProperty("fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name")]
public string FuelInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveName { get; set; } = "";
        

[Description(@"The curve represents the fraction of the electricity to the chiller at full load as it varies by temperature. The curve is normalized so that at design conditions the value of the curve should be 1.0. This is a biquadratic curve with the input variables being the leaving chilled water temperature and either the entering or leaving condenser water temperature.")]
[JsonProperty("electric_input_to_cooling_output_ratio_function_of_temperature_curve_name")]
public string ElectricInputToCoolingOutputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"The curve represents the fraction of the electricity to the chiller as the load on the chiller varies but the operating temperatures remain at the design values. The curve is normalized so that at full load the value of the curve should be 1.0. The curve is usually linear or quadratic.")]
[JsonProperty("electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name")]
public string ElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveName { get; set; } = "";
        

[Description(@"The curve represents how the heating capacity of the chiller varies with cooling capacity when the chiller is simultaneous heating and cooling. The curve is normalized so an input of 1.0 represents the nominal cooling capacity and an output of 1.0 represents the full heating capacity (see the Heating to cooling capacity ratio input) The curve is usually linear or quadratic.")]
[JsonProperty("heating_capacity_function_of_cooling_capacity_curve_name")]
public string HeatingCapacityFunctionOfCoolingCapacityCurveName { get; set; } = "";
        

[Description(@"When the chiller is operating as only a heater, this curve is used to represent the fraction of fuel used as the heating load varies. It is normalized so that a value of 1.0 is the full heating capacity. The curve is usually linear or quadratic and will probably be similar to a boiler curve for most chillers.")]
[JsonProperty("fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name")]
public string FuelInputToHeatOutputRatioDuringHeatingOnlyOperationCurveName { get; set; } = "";
        

[Description(@"Sets the second independent variable in the three temperature dependent performance curves to either the leaving or entering condenser water temperature. Manufacturers express the performance of their chillers using either the leaving condenser water temperature (to the tower) or the entering condenser water temperature (from the tower).")]
[JsonProperty("temperature_curve_input_variable")]
public ChillerHeater_Absorption_DoubleEffect_TemperatureCurveInputVariable TemperatureCurveInputVariable { get; set; } = (ChillerHeater_Absorption_DoubleEffect_TemperatureCurveInputVariable)Enum.Parse(typeof(ChillerHeater_Absorption_DoubleEffect_TemperatureCurveInputVariable), "EnteringCondenser");
        

[Description("The condenser can either be air cooled or connected to a cooling tower.")]
[JsonProperty("condenser_type")]
public ChillerHeater_Absorption_DoubleEffect_CondenserType CondenserType { get; set; } = (ChillerHeater_Absorption_DoubleEffect_CondenserType)Enum.Parse(typeof(ChillerHeater_Absorption_DoubleEffect_CondenserType), "WaterCooled");
        

[Description("The chilled water supply temperature below which the chiller will shut off.")]
[JsonProperty("chilled_water_temperature_lower_limit")]
public System.Nullable<float> ChilledWaterTemperatureLowerLimit { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[JsonProperty("exhaust_source_object_type")]
public ChillerHeater_Absorption_DoubleEffect_ExhaustSourceObjectType ExhaustSourceObjectType { get; set; } = (ChillerHeater_Absorption_DoubleEffect_ExhaustSourceObjectType)Enum.Parse(typeof(ChillerHeater_Absorption_DoubleEffect_ExhaustSourceObjectType), "GeneratorMicroTurbine");
        

[JsonProperty("exhaust_source_object_name")]
public string ExhaustSourceObjectName { get; set; } = "";
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    public enum ChillerHeater_Absorption_DoubleEffect_TemperatureCurveInputVariable
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("EnteringCondenser")]
        EnteringCondenser = 1,
        
        [JsonProperty("LeavingCondenser")]
        LeavingCondenser = 2,
    }
    
    public enum ChillerHeater_Absorption_DoubleEffect_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 2,
    }
    
    public enum ChillerHeater_Absorption_DoubleEffect_ExhaustSourceObjectType
    {
        
        [JsonProperty("Generator:MicroTurbine")]
        GeneratorMicroTurbine = 0,
    }
    
    [Description("An EIR formulated water to water heat pump model, cooling operation.")]
    [JsonObject("HeatPump:PlantLoop:EIR:Cooling")]
    public class HeatPump_PlantLoop_EIR_Cooling : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("load_side_inlet_node_name")]
public string LoadSideInletNodeName { get; set; } = "";
        

[JsonProperty("load_side_outlet_node_name")]
public string LoadSideOutletNodeName { get; set; } = "";
        

[JsonProperty("condenser_type")]
public HeatPump_PlantLoop_EIR_Cooling_CondenserType CondenserType { get; set; } = (HeatPump_PlantLoop_EIR_Cooling_CondenserType)Enum.Parse(typeof(HeatPump_PlantLoop_EIR_Cooling_CondenserType), "WaterSource");
        

[JsonProperty("source_side_inlet_node_name")]
public string SourceSideInletNodeName { get; set; } = "";
        

[JsonProperty("source_side_outlet_node_name")]
public string SourceSideOutletNodeName { get; set; } = "";
        

[Description("This field allows the user to specify a companion heating object for this cooling" +
    " object. The companion is used in sizing the heat pump as well as to allow check" +
    "s for unexpected simultaneous operation of the two objects.")]
[JsonProperty("companion_heat_pump_name")]
public string CompanionHeatPumpName { get; set; } = "";
        

[Description("This component is currently a constant-flow device, meaning it will always try to" +
    " request the full design flow from the central plant manager.")]
[JsonProperty("load_side_reference_flow_rate")]
public string LoadSideReferenceFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("source_side_reference_flow_rate")]
public string SourceSideReferenceFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("reference_capacity")]
public string ReferenceCapacity { get; set; } = (System.String)"Autosize";
        

[JsonProperty("reference_coefficient_of_performance")]
public System.Nullable<float> ReferenceCoefficientOfPerformance { get; set; } = (System.Nullable<float>)Single.Parse("7.5", CultureInfo.InvariantCulture);
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Cooling capacity modifier as a function of CW supply temp and entering condenser " +
    "temp curve = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT CWS = supply (l" +
    "eaving) chilled water temperature(C) ECT = entering condenser fluid temperature(" +
    "C)")]
[JsonProperty("capacity_modifier_function_of_temperature_curve_name")]
public string CapacityModifierFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Electric Input Ratio (EIR) modifier as a function of temperature EIR = 1/COP curv" +
    "e = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT CWS = supply (leaving) c" +
    "hilled water temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty("electric_input_to_output_ratio_modifier_function_of_temperature_curve_name")]
public string ElectricInputToOutputRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Electric Input Ratio (EIR) modifier as a function of Part Load Ratio (PLR) EIR = " +
    "1/COP quadratic curve = a + b*PLR + c*PLR**2 is typical, other univariate curves" +
    " may be used PLR = part load ratio (cooling load/steady state capacity)")]
[JsonProperty("electric_input_to_output_ratio_modifier_function_of_part_load_ratio_curve_name")]
public string ElectricInputToOutputRatioModifierFunctionOfPartLoadRatioCurveName { get; set; } = "";
    }
    
    public enum HeatPump_PlantLoop_EIR_Cooling_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirSource")]
        AirSource = 1,
        
        [JsonProperty("WaterSource")]
        WaterSource = 2,
    }
    
    [Description("An EIR formulated water to water heat pump model, heating operation")]
    [JsonObject("HeatPump:PlantLoop:EIR:Heating")]
    public class HeatPump_PlantLoop_EIR_Heating : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("load_side_inlet_node_name")]
public string LoadSideInletNodeName { get; set; } = "";
        

[JsonProperty("load_side_outlet_node_name")]
public string LoadSideOutletNodeName { get; set; } = "";
        

[JsonProperty("condenser_type")]
public HeatPump_PlantLoop_EIR_Heating_CondenserType CondenserType { get; set; } = (HeatPump_PlantLoop_EIR_Heating_CondenserType)Enum.Parse(typeof(HeatPump_PlantLoop_EIR_Heating_CondenserType), "WaterSource");
        

[JsonProperty("source_side_inlet_node_name")]
public string SourceSideInletNodeName { get; set; } = "";
        

[JsonProperty("source_side_outlet_node_name")]
public string SourceSideOutletNodeName { get; set; } = "";
        

[Description("This field allows the user to specify a companion cooling object for this heating" +
    " object. The companion is used in sizing the heat pump as well as to allow check" +
    "s for unexpected simultaneous operation of the two objects.")]
[JsonProperty("companion_heat_pump_name")]
public string CompanionHeatPumpName { get; set; } = "";
        

[Description("This component is currently a constant-flow device, meaning it will always try to" +
    " request the full design flow from the central plant manager.")]
[JsonProperty("load_side_reference_flow_rate")]
public string LoadSideReferenceFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("source_side_reference_flow_rate")]
public string SourceSideReferenceFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("reference_capacity")]
public string ReferenceCapacity { get; set; } = (System.String)"Autosize";
        

[JsonProperty("reference_coefficient_of_performance")]
public System.Nullable<float> ReferenceCoefficientOfPerformance { get; set; } = (System.Nullable<float>)Single.Parse("7.5", CultureInfo.InvariantCulture);
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Heating capacity modifier as a function of CW supply temp and entering condenser " +
    "temp curve = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT CWS = supply (l" +
    "eaving) hot water temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty("capacity_modifier_function_of_temperature_curve_name")]
public string CapacityModifierFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Electric Input Ratio (EIR) modifier as a function of temperature EIR = 1/COP curv" +
    "e = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT CWS = supply (leaving) h" +
    "ot water temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty("electric_input_to_output_ratio_modifier_function_of_temperature_curve_name")]
public string ElectricInputToOutputRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Electric Input Ratio (EIR) modifier as a function of Part Load Ratio (PLR) EIR = " +
    "1/COP quadratic curve = a + b*PLR + c*PLR**2 is typical, other univariate curves" +
    " may be used PLR = part load ratio (hot load/steady state capacity)")]
[JsonProperty("electric_input_to_output_ratio_modifier_function_of_part_load_ratio_curve_name")]
public string ElectricInputToOutputRatioModifierFunctionOfPartLoadRatioCurveName { get; set; } = "";
    }
    
    public enum HeatPump_PlantLoop_EIR_Heating_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirSource")]
        AirSource = 1,
        
        [JsonProperty("WaterSource")]
        WaterSource = 2,
    }
    
    [Description("simple water-water hp curve-fit model")]
    [JsonObject("HeatPump:WaterToWater:EquationFit:Heating")]
    public class HeatPump_WaterToWater_EquationFit_Heating : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("source_side_inlet_node_name")]
public string SourceSideInletNodeName { get; set; } = "";
        

[JsonProperty("source_side_outlet_node_name")]
public string SourceSideOutletNodeName { get; set; } = "";
        

[JsonProperty("load_side_inlet_node_name")]
public string LoadSideInletNodeName { get; set; } = "";
        

[JsonProperty("load_side_outlet_node_name")]
public string LoadSideOutletNodeName { get; set; } = "";
        

[JsonProperty("reference_load_side_flow_rate")]
public string ReferenceLoadSideFlowRate { get; set; } = "";
        

[JsonProperty("reference_source_side_flow_rate")]
public string ReferenceSourceSideFlowRate { get; set; } = "";
        

[JsonProperty("reference_heating_capacity")]
public string ReferenceHeatingCapacity { get; set; } = "";
        

[JsonProperty("reference_heating_power_consumption")]
public string ReferenceHeatingPowerConsumption { get; set; } = "";
        

[JsonProperty("heating_capacity_curve_name")]
public string HeatingCapacityCurveName { get; set; } = "";
        

[JsonProperty("heating_compressor_power_curve_name")]
public string HeatingCompressorPowerCurveName { get; set; } = "";
        

[Description("This optional field is used to autosize Reference Heating Power Consumption COP =" +
    " Reference Heating Capacity / Reference Heating Power Consumption")]
[JsonProperty("reference_coefficient_of_performance")]
public System.Nullable<float> ReferenceCoefficientOfPerformance { get; set; } = (System.Nullable<float>)Single.Parse("7.5", CultureInfo.InvariantCulture);
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("companion_cooling_heat_pump_name")]
public string CompanionCoolingHeatPumpName { get; set; } = "";
    }
    
    [Description("simple water-water heat pump curve-fit model")]
    [JsonObject("HeatPump:WaterToWater:EquationFit:Cooling")]
    public class HeatPump_WaterToWater_EquationFit_Cooling : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("source_side_inlet_node_name")]
public string SourceSideInletNodeName { get; set; } = "";
        

[JsonProperty("source_side_outlet_node_name")]
public string SourceSideOutletNodeName { get; set; } = "";
        

[JsonProperty("load_side_inlet_node_name")]
public string LoadSideInletNodeName { get; set; } = "";
        

[JsonProperty("load_side_outlet_node_name")]
public string LoadSideOutletNodeName { get; set; } = "";
        

[JsonProperty("reference_load_side_flow_rate")]
public string ReferenceLoadSideFlowRate { get; set; } = "";
        

[JsonProperty("reference_source_side_flow_rate")]
public string ReferenceSourceSideFlowRate { get; set; } = "";
        

[JsonProperty("reference_cooling_capacity")]
public string ReferenceCoolingCapacity { get; set; } = "";
        

[JsonProperty("reference_cooling_power_consumption")]
public string ReferenceCoolingPowerConsumption { get; set; } = "";
        

[JsonProperty("cooling_capacity_curve_name")]
public string CoolingCapacityCurveName { get; set; } = "";
        

[JsonProperty("cooling_compressor_power_curve_name")]
public string CoolingCompressorPowerCurveName { get; set; } = "";
        

[Description("This optional field is used to autosize Reference Cooling Power Consumption COP =" +
    " Rated Cooling Capacity / Rated Cooling Power Consumption")]
[JsonProperty("reference_coefficient_of_performance")]
public System.Nullable<float> ReferenceCoefficientOfPerformance { get; set; } = (System.Nullable<float>)Single.Parse("8", CultureInfo.InvariantCulture);
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This optional field is used to coordinate sizing calculations between heating and" +
    " cooling modes.")]
[JsonProperty("companion_heating_heat_pump_name")]
public string CompanionHeatingHeatPumpName { get; set; } = "";
    }
    
    [Description("OSU parameter estimation model")]
    [JsonObject("HeatPump:WaterToWater:ParameterEstimation:Cooling")]
    public class HeatPump_WaterToWater_ParameterEstimation_Cooling : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("source_side_inlet_node_name")]
public string SourceSideInletNodeName { get; set; } = "";
        

[JsonProperty("source_side_outlet_node_name")]
public string SourceSideOutletNodeName { get; set; } = "";
        

[JsonProperty("load_side_inlet_node_name")]
public string LoadSideInletNodeName { get; set; } = "";
        

[JsonProperty("load_side_outlet_node_name")]
public string LoadSideOutletNodeName { get; set; } = "";
        

[JsonProperty("nominal_cop")]
public System.Nullable<float> NominalCop { get; set; } = null;
        

[JsonProperty("nominal_capacity")]
public System.Nullable<float> NominalCapacity { get; set; } = null;
        

[JsonProperty("minimum_part_load_ratio")]
public System.Nullable<float> MinimumPartLoadRatio { get; set; } = null;
        

[JsonProperty("maximum_part_load_ratio")]
public System.Nullable<float> MaximumPartLoadRatio { get; set; } = null;
        

[JsonProperty("optimum_part_load_ratio")]
public System.Nullable<float> OptimumPartLoadRatio { get; set; } = null;
        

[JsonProperty("load_side_flow_rate")]
public System.Nullable<float> LoadSideFlowRate { get; set; } = null;
        

[JsonProperty("source_side_flow_rate")]
public System.Nullable<float> SourceSideFlowRate { get; set; } = null;
        

[JsonProperty("load_side_heat_transfer_coefficient")]
public System.Nullable<float> LoadSideHeatTransferCoefficient { get; set; } = null;
        

[JsonProperty("source_side_heat_transfer_coefficient")]
public System.Nullable<float> SourceSideHeatTransferCoefficient { get; set; } = null;
        

[JsonProperty("piston_displacement")]
public System.Nullable<float> PistonDisplacement { get; set; } = null;
        

[JsonProperty("compressor_clearance_factor")]
public System.Nullable<float> CompressorClearanceFactor { get; set; } = null;
        

[JsonProperty("compressor_suction_and_discharge_pressure_drop")]
public System.Nullable<float> CompressorSuctionAndDischargePressureDrop { get; set; } = null;
        

[JsonProperty("superheating")]
public System.Nullable<float> Superheating { get; set; } = null;
        

[JsonProperty("constant_part_of_electromechanical_power_losses")]
public System.Nullable<float> ConstantPartOfElectromechanicalPowerLosses { get; set; } = null;
        

[Description("Used to define electromechanical loss that is proportional to the theoretical pow" +
    "er %")]
[JsonProperty("loss_factor")]
public System.Nullable<float> LossFactor { get; set; } = null;
        

[JsonProperty("high_pressure_cut_off")]
public System.Nullable<float> HighPressureCutOff { get; set; } = (System.Nullable<float>)Single.Parse("500000000", CultureInfo.InvariantCulture);
        

[JsonProperty("low_pressure_cut_off")]
public System.Nullable<float> LowPressureCutOff { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    [Description("OSU parameter estimation model")]
    [JsonObject("HeatPump:WaterToWater:ParameterEstimation:Heating")]
    public class HeatPump_WaterToWater_ParameterEstimation_Heating : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("source_side_inlet_node_name")]
public string SourceSideInletNodeName { get; set; } = "";
        

[JsonProperty("source_side_outlet_node_name")]
public string SourceSideOutletNodeName { get; set; } = "";
        

[JsonProperty("load_side_inlet_node_name")]
public string LoadSideInletNodeName { get; set; } = "";
        

[JsonProperty("load_side_outlet_node_name")]
public string LoadSideOutletNodeName { get; set; } = "";
        

[JsonProperty("nominal_cop")]
public System.Nullable<float> NominalCop { get; set; } = null;
        

[JsonProperty("nominal_capacity")]
public System.Nullable<float> NominalCapacity { get; set; } = null;
        

[JsonProperty("minimum_part_load_ratio")]
public System.Nullable<float> MinimumPartLoadRatio { get; set; } = null;
        

[JsonProperty("maximum_part_load_ratio")]
public System.Nullable<float> MaximumPartLoadRatio { get; set; } = null;
        

[JsonProperty("optimum_part_load_ratio")]
public System.Nullable<float> OptimumPartLoadRatio { get; set; } = null;
        

[JsonProperty("load_side_flow_rate")]
public System.Nullable<float> LoadSideFlowRate { get; set; } = null;
        

[JsonProperty("source_side_flow_rate")]
public System.Nullable<float> SourceSideFlowRate { get; set; } = null;
        

[JsonProperty("load_side_heat_transfer_coefficient")]
public System.Nullable<float> LoadSideHeatTransferCoefficient { get; set; } = null;
        

[JsonProperty("source_side_heat_transfer_coefficient")]
public System.Nullable<float> SourceSideHeatTransferCoefficient { get; set; } = null;
        

[JsonProperty("piston_displacement")]
public System.Nullable<float> PistonDisplacement { get; set; } = null;
        

[JsonProperty("compressor_clearance_factor")]
public System.Nullable<float> CompressorClearanceFactor { get; set; } = null;
        

[JsonProperty("compressor_suction_and_discharge_pressure_drop")]
public System.Nullable<float> CompressorSuctionAndDischargePressureDrop { get; set; } = null;
        

[JsonProperty("superheating")]
public System.Nullable<float> Superheating { get; set; } = null;
        

[JsonProperty("constant_part_of_electromechanical_power_losses")]
public System.Nullable<float> ConstantPartOfElectromechanicalPowerLosses { get; set; } = null;
        

[Description("Used to define electromechanical loss that is proportional to the theoretical pow" +
    "er %")]
[JsonProperty("loss_factor")]
public System.Nullable<float> LossFactor { get; set; } = null;
        

[JsonProperty("high_pressure_cut_off")]
public System.Nullable<float> HighPressureCutOff { get; set; } = (System.Nullable<float>)Single.Parse("500000000", CultureInfo.InvariantCulture);
        

[JsonProperty("low_pressure_cut_off")]
public System.Nullable<float> LowPressureCutOff { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    [Description("Centralized source of chilled water, such as a district cooling system.")]
    [JsonObject("DistrictCooling")]
    public class DistrictCooling : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("chilled_water_inlet_node_name")]
public string ChilledWaterInletNodeName { get; set; } = "";
        

[JsonProperty("chilled_water_outlet_node_name")]
public string ChilledWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("nominal_capacity")]
public string NominalCapacity { get; set; } = "";
        

[Description("Schedule values are multiplied by Nominal Capacity for current capacity")]
[JsonProperty("capacity_fraction_schedule_name")]
public string CapacityFractionScheduleName { get; set; } = "";
    }
    
    [Description("Centralized source of hot water, such as a district heating system.")]
    [JsonObject("DistrictHeating")]
    public class DistrictHeating : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("hot_water_inlet_node_name")]
public string HotWaterInletNodeName { get; set; } = "";
        

[JsonProperty("hot_water_outlet_node_name")]
public string HotWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("nominal_capacity")]
public string NominalCapacity { get; set; } = "";
        

[Description("Schedule values are multiplied by Nominal Capacity for current capacity")]
[JsonProperty("capacity_fraction_schedule_name")]
public string CapacityFractionScheduleName { get; set; } = "";
    }
    
    [Description(@"Simulates an object of pre-determined (constant or scheduled) source temperature The object introduces fluid into the plant loop at the specified temperature and at the same flow rate as the fluid enters the component Fluid entering the component vanishes equivalent to the relief air in an air system")]
    [JsonObject("PlantComponent:TemperatureSource")]
    public class PlantComponent_TemperatureSource : BHoMObject, IEnergyPlusClass
    {
        

[Description("Name of the source inlet node")]
[JsonProperty("inlet_node")]
public string InletNode { get; set; } = "";
        

[Description("Name of the source outlet node")]
[JsonProperty("outlet_node")]
public string OutletNode { get; set; } = "";
        

[Description("The design volumetric flow rate for this source")]
[JsonProperty("design_volume_flow_rate")]
public string DesignVolumeFlowRate { get; set; } = "";
        

[JsonProperty("temperature_specification_type")]
public PlantComponent_TemperatureSource_TemperatureSpecificationType TemperatureSpecificationType { get; set; } = (PlantComponent_TemperatureSource_TemperatureSpecificationType)Enum.Parse(typeof(PlantComponent_TemperatureSource_TemperatureSpecificationType), "Constant");
        

[Description("Used if Temperature Specification Type = Constant")]
[JsonProperty("source_temperature")]
public System.Nullable<float> SourceTemperature { get; set; } = null;
        

[Description("Used if Temperature Specification Type = Scheduled")]
[JsonProperty("source_temperature_schedule_name")]
public string SourceTemperatureScheduleName { get; set; } = "";
    }
    
    public enum PlantComponent_TemperatureSource_TemperatureSpecificationType
    {
        
        [JsonProperty("Constant")]
        Constant = 0,
        
        [JsonProperty("Scheduled")]
        Scheduled = 1,
    }
    
    [Description(@"This chiller bank can contain multiple chiller heaters and heat pump performance objects. Its function is to encapsulate the extra controls needed to turn individual modules on/off and whether they are to operate in cooling-only, heating-only or simultaneous cooling/heating mode and whether to connect the source water to the evaporator or condenser side.")]
    [JsonObject("CentralHeatPumpSystem")]
    public class CentralHeatPumpSystem : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_method")]
public CentralHeatPumpSystem_ControlMethod ControlMethod { get; set; } = (CentralHeatPumpSystem_ControlMethod)Enum.Parse(typeof(CentralHeatPumpSystem_ControlMethod), "SmartMixing");
        

[JsonProperty("cooling_loop_inlet_node_name")]
public string CoolingLoopInletNodeName { get; set; } = "";
        

[JsonProperty("cooling_loop_outlet_node_name")]
public string CoolingLoopOutletNodeName { get; set; } = "";
        

[JsonProperty("source_loop_inlet_node_name")]
public string SourceLoopInletNodeName { get; set; } = "";
        

[JsonProperty("source_loop_outlet_node_name")]
public string SourceLoopOutletNodeName { get; set; } = "";
        

[JsonProperty("heating_loop_inlet_node_name")]
public string HeatingLoopInletNodeName { get; set; } = "";
        

[JsonProperty("heating_loop_outlet_node_name")]
public string HeatingLoopOutletNodeName { get; set; } = "";
        

[Description("Power as demanded from any auxiliary controls")]
[JsonProperty("ancillary_power")]
public System.Nullable<float> AncillaryPower { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This value from this schedule is multiplied times the Ancillary Power")]
[JsonProperty("ancillary_operation_schedule_name")]
public string AncillaryOperationScheduleName { get; set; } = "";
        

[JsonProperty("chiller_heater_modules_performance_component_object_type_1")]
public CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType1 ChillerHeaterModulesPerformanceComponentObjectType1 { get; set; } = (CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType1)Enum.Parse(typeof(CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType1), "ChillerHeaterPerformanceElectricEIR");
        

[JsonProperty("chiller_heater_modules_performance_component_name_1")]
public string ChillerHeaterModulesPerformanceComponentName1 { get; set; } = "";
        

[JsonProperty("chiller_heater_modules_control_schedule_name_1")]
public string ChillerHeaterModulesControlScheduleName1 { get; set; } = "";
        

[JsonProperty("number_of_chiller_heater_modules_1")]
public System.Nullable<float> NumberOfChillerHeaterModules1 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("chiller_heater_modules_performance_component_object_type_2")]
public CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType2 ChillerHeaterModulesPerformanceComponentObjectType2 { get; set; } = (CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType2)Enum.Parse(typeof(CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType2), "ChillerHeaterPerformanceElectricEIR");
        

[JsonProperty("chiller_heater_modules_performance_component_name_2")]
public string ChillerHeaterModulesPerformanceComponentName2 { get; set; } = "";
        

[JsonProperty("chiller_heater_modules_control_schedule_name_2")]
public string ChillerHeaterModulesControlScheduleName2 { get; set; } = "";
        

[JsonProperty("number_of_chiller_heater_modules_2")]
public System.Nullable<float> NumberOfChillerHeaterModules2 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("chiller_heater_performance_component_object_type_3")]
public CentralHeatPumpSystem_ChillerHeaterPerformanceComponentObjectType3 ChillerHeaterPerformanceComponentObjectType3 { get; set; } = (CentralHeatPumpSystem_ChillerHeaterPerformanceComponentObjectType3)Enum.Parse(typeof(CentralHeatPumpSystem_ChillerHeaterPerformanceComponentObjectType3), "ChillerHeaterPerformanceElectricEIR");
        

[JsonProperty("chiller_heater_performance_component_name_3")]
public string ChillerHeaterPerformanceComponentName3 { get; set; } = "";
        

[JsonProperty("chiller_heater_modules_control_schedule_name_3")]
public string ChillerHeaterModulesControlScheduleName3 { get; set; } = "";
        

[JsonProperty("number_of_chiller_heater_modules_3")]
public System.Nullable<float> NumberOfChillerHeaterModules3 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("chiller_heater_modules_performance_component_object_type_4")]
public CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType4 ChillerHeaterModulesPerformanceComponentObjectType4 { get; set; } = (CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType4)Enum.Parse(typeof(CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType4), "ChillerHeaterPerformanceElectricEIR");
        

[JsonProperty("chiller_heater_modules_performance_component_name_4")]
public string ChillerHeaterModulesPerformanceComponentName4 { get; set; } = "";
        

[JsonProperty("chiller_heater_modules_control_schedule_name_4")]
public string ChillerHeaterModulesControlScheduleName4 { get; set; } = "";
        

[JsonProperty("number_of_chiller_heater_modules_4")]
public System.Nullable<float> NumberOfChillerHeaterModules4 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("chiller_heater_modules_performance_component_object_type_5")]
public CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType5 ChillerHeaterModulesPerformanceComponentObjectType5 { get; set; } = (CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType5)Enum.Parse(typeof(CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType5), "ChillerHeaterPerformanceElectricEIR");
        

[JsonProperty("chiller_heater_models_performance_component_name_5")]
public string ChillerHeaterModelsPerformanceComponentName5 { get; set; } = "";
        

[JsonProperty("chiller_heater_modules_control_schedule_name_5")]
public string ChillerHeaterModulesControlScheduleName5 { get; set; } = "";
        

[JsonProperty("number_of_chiller_heater_modules_5")]
public System.Nullable<float> NumberOfChillerHeaterModules5 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("chiller_heater_modules_performance_component_object_type_6")]
public CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType6 ChillerHeaterModulesPerformanceComponentObjectType6 { get; set; } = (CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType6)Enum.Parse(typeof(CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType6), "ChillerHeaterPerformanceElectricEIR");
        

[JsonProperty("chiller_heater_modules_performance_component_name_6")]
public string ChillerHeaterModulesPerformanceComponentName6 { get; set; } = "";
        

[JsonProperty("chiller_heater_modules_control_schedule_name_6")]
public string ChillerHeaterModulesControlScheduleName6 { get; set; } = "";
        

[JsonProperty("number_of_chiller_heater_modules_6")]
public System.Nullable<float> NumberOfChillerHeaterModules6 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("chiller_heater_modules_performance_component_object_type_7")]
public CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType7 ChillerHeaterModulesPerformanceComponentObjectType7 { get; set; } = (CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType7)Enum.Parse(typeof(CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType7), "ChillerHeaterPerformanceElectricEIR");
        

[JsonProperty("chiller_heater_modules_performance_component_name_7")]
public string ChillerHeaterModulesPerformanceComponentName7 { get; set; } = "";
        

[JsonProperty("chiller_heater_modules_control_schedule_name_7")]
public string ChillerHeaterModulesControlScheduleName7 { get; set; } = "";
        

[JsonProperty("number_of_chiller_heater_modules_7")]
public System.Nullable<float> NumberOfChillerHeaterModules7 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("chiller_heater_modules_performance_component_object_type_8")]
public CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType8 ChillerHeaterModulesPerformanceComponentObjectType8 { get; set; } = (CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType8)Enum.Parse(typeof(CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType8), "ChillerHeaterPerformanceElectricEIR");
        

[JsonProperty("chiller_heater_modules_performance_component_name_8")]
public string ChillerHeaterModulesPerformanceComponentName8 { get; set; } = "";
        

[JsonProperty("chiller_heater_modules_control_schedule_name_8")]
public string ChillerHeaterModulesControlScheduleName8 { get; set; } = "";
        

[JsonProperty("number_of_chiller_heater_modules_8")]
public System.Nullable<float> NumberOfChillerHeaterModules8 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("chiller_heater_modules_performance_component_object_type_9")]
public CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType9 ChillerHeaterModulesPerformanceComponentObjectType9 { get; set; } = (CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType9)Enum.Parse(typeof(CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType9), "ChillerHeaterPerformanceElectricEIR");
        

[JsonProperty("chiller_heater_modules_performance_component_name_9")]
public string ChillerHeaterModulesPerformanceComponentName9 { get; set; } = "";
        

[JsonProperty("chiller_heater_modules_control_schedule_name_9")]
public string ChillerHeaterModulesControlScheduleName9 { get; set; } = "";
        

[JsonProperty("number_of_chiller_heater_modules_9")]
public System.Nullable<float> NumberOfChillerHeaterModules9 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("chiller_heater_modules_performance_component_object_type_10")]
public CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType10 ChillerHeaterModulesPerformanceComponentObjectType10 { get; set; } = (CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType10)Enum.Parse(typeof(CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType10), "ChillerHeaterPerformanceElectricEIR");
        

[JsonProperty("chiller_heater_modules_performance_component_name_10")]
public string ChillerHeaterModulesPerformanceComponentName10 { get; set; } = "";
        

[JsonProperty("chiller_heater_modules_control_schedule_name_10")]
public string ChillerHeaterModulesControlScheduleName10 { get; set; } = "";
        

[JsonProperty("number_of_chiller_heater_modules_10")]
public System.Nullable<float> NumberOfChillerHeaterModules10 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("chiller_heater_modules_performance_component_object_type_11")]
public CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType11 ChillerHeaterModulesPerformanceComponentObjectType11 { get; set; } = (CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType11)Enum.Parse(typeof(CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType11), "ChillerHeaterPerformanceElectricEIR");
        

[JsonProperty("chiller_heater_modules_performance_component_name_11")]
public string ChillerHeaterModulesPerformanceComponentName11 { get; set; } = "";
        

[JsonProperty("chiller_heater_module_control_schedule_name_11")]
public string ChillerHeaterModuleControlScheduleName11 { get; set; } = "";
        

[JsonProperty("number_of_chiller_heater_modules_11")]
public System.Nullable<float> NumberOfChillerHeaterModules11 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("chiller_heater_modules_performance_component_object_type_12")]
public CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType12 ChillerHeaterModulesPerformanceComponentObjectType12 { get; set; } = (CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType12)Enum.Parse(typeof(CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType12), "ChillerHeaterPerformanceElectricEIR");
        

[JsonProperty("chiller_heater_modules_performance_component_name_12")]
public string ChillerHeaterModulesPerformanceComponentName12 { get; set; } = "";
        

[JsonProperty("chiller_heater_modules_control_schedule_name_12")]
public string ChillerHeaterModulesControlScheduleName12 { get; set; } = "";
        

[JsonProperty("number_of_chiller_heater_modules_12")]
public System.Nullable<float> NumberOfChillerHeaterModules12 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("chiller_heater_modules_performance_component_object_type_13")]
public CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType13 ChillerHeaterModulesPerformanceComponentObjectType13 { get; set; } = (CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType13)Enum.Parse(typeof(CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType13), "ChillerHeaterPerformanceElectricEIR");
        

[JsonProperty("chiller_heater_modules_performance_component_name_13")]
public string ChillerHeaterModulesPerformanceComponentName13 { get; set; } = "";
        

[JsonProperty("chiller_heater_modules_control_schedule_name_13")]
public string ChillerHeaterModulesControlScheduleName13 { get; set; } = "";
        

[JsonProperty("number_of_chiller_heater_modules_13")]
public System.Nullable<float> NumberOfChillerHeaterModules13 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("chiller_heater_modules_performance_component_object_type_14")]
public CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType14 ChillerHeaterModulesPerformanceComponentObjectType14 { get; set; } = (CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType14)Enum.Parse(typeof(CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType14), "ChillerHeaterPerformanceElectricEIR");
        

[JsonProperty("chiller_heater_modules_performance_component_name_14")]
public string ChillerHeaterModulesPerformanceComponentName14 { get; set; } = "";
        

[JsonProperty("chiller_heater_modules_control_schedule_name_14")]
public string ChillerHeaterModulesControlScheduleName14 { get; set; } = "";
        

[JsonProperty("number_of_chiller_heater_modules_14")]
public System.Nullable<float> NumberOfChillerHeaterModules14 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("chiller_heater_modules_performance_component_object_type_15")]
public CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType15 ChillerHeaterModulesPerformanceComponentObjectType15 { get; set; } = (CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType15)Enum.Parse(typeof(CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType15), "ChillerHeaterPerformanceElectricEIR");
        

[JsonProperty("chiller_heater_modules_performance_component_name_15")]
public string ChillerHeaterModulesPerformanceComponentName15 { get; set; } = "";
        

[JsonProperty("chiller_heater_modules_control_schedule_name_15")]
public string ChillerHeaterModulesControlScheduleName15 { get; set; } = "";
        

[JsonProperty("number_of_chiller_heater_modules_15")]
public System.Nullable<float> NumberOfChillerHeaterModules15 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("chiller_heater_modules_performance_component_object_type_16")]
public CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType16 ChillerHeaterModulesPerformanceComponentObjectType16 { get; set; } = (CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType16)Enum.Parse(typeof(CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType16), "ChillerHeaterPerformanceElectricEIR");
        

[JsonProperty("chiller_heater_modules_performance_component_name_16")]
public string ChillerHeaterModulesPerformanceComponentName16 { get; set; } = "";
        

[JsonProperty("chiller_heater_modules_control_schedule_name_16")]
public string ChillerHeaterModulesControlScheduleName16 { get; set; } = "";
        

[JsonProperty("number_of_chiller_heater_modules_16")]
public System.Nullable<float> NumberOfChillerHeaterModules16 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("chiller_heater_modules_performance_component_object_type_17")]
public CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType17 ChillerHeaterModulesPerformanceComponentObjectType17 { get; set; } = (CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType17)Enum.Parse(typeof(CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType17), "ChillerHeaterPerformanceElectricEIR");
        

[JsonProperty("chiller_heater_modules_performance_component_name_17")]
public string ChillerHeaterModulesPerformanceComponentName17 { get; set; } = "";
        

[JsonProperty("chiller_heater_modules_control_schedule_name_17")]
public string ChillerHeaterModulesControlScheduleName17 { get; set; } = "";
        

[JsonProperty("number_of_chiller_heater_modules_17")]
public System.Nullable<float> NumberOfChillerHeaterModules17 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("chiller_heater_modules_performance_component_object_type_18")]
public CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType18 ChillerHeaterModulesPerformanceComponentObjectType18 { get; set; } = (CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType18)Enum.Parse(typeof(CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType18), "ChillerHeaterPerformanceElectricEIR");
        

[JsonProperty("chiller_heater_modules_performance_component_name_18")]
public string ChillerHeaterModulesPerformanceComponentName18 { get; set; } = "";
        

[JsonProperty("chiller_heater_modules_control_control_schedule_name_18")]
public string ChillerHeaterModulesControlControlScheduleName18 { get; set; } = "";
        

[JsonProperty("number_of_chiller_heater_modules_18")]
public System.Nullable<float> NumberOfChillerHeaterModules18 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("chiller_heater_modules_performance_component_object_type_19")]
public CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType19 ChillerHeaterModulesPerformanceComponentObjectType19 { get; set; } = (CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType19)Enum.Parse(typeof(CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType19), "ChillerHeaterPerformanceElectricEIR");
        

[JsonProperty("chiller_heater_modules_performance_component_name_19")]
public string ChillerHeaterModulesPerformanceComponentName19 { get; set; } = "";
        

[JsonProperty("chiller_heater_modules_control_schedule_name_19")]
public string ChillerHeaterModulesControlScheduleName19 { get; set; } = "";
        

[JsonProperty("number_of_chiller_heater_modules_19")]
public System.Nullable<float> NumberOfChillerHeaterModules19 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("chiller_heater_modules_performance_component_object_type_20")]
public CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType20 ChillerHeaterModulesPerformanceComponentObjectType20 { get; set; } = (CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType20)Enum.Parse(typeof(CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType20), "ChillerHeaterPerformanceElectricEIR");
        

[JsonProperty("chiller_heater_modules_performance_component_name_20")]
public string ChillerHeaterModulesPerformanceComponentName20 { get; set; } = "";
        

[JsonProperty("chiller_heater_modules_control_schedule_name_20")]
public string ChillerHeaterModulesControlScheduleName20 { get; set; } = "";
        

[JsonProperty("number_of_chiller_heater_modules_20")]
public System.Nullable<float> NumberOfChillerHeaterModules20 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    public enum CentralHeatPumpSystem_ControlMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SmartMixing")]
        SmartMixing = 1,
    }
    
    public enum CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType1
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType2
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum CentralHeatPumpSystem_ChillerHeaterPerformanceComponentObjectType3
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType4
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType5
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType6
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType7
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType8
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType9
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType10
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType11
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType12
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType13
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType14
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType15
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType16
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType17
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType18
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType19
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum CentralHeatPumpSystem_ChillerHeaterModulesPerformanceComponentObjectType20
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    [Description(@"This chiller model is a generic chiller-heater where the cooling mode performance is a function of condenser entering or leaving fluid temperature and the heating mode performance is typically a function of condenser leaving fluid temperature. Performance at off-reference conditions is modeled using three polynomial equations per mode. Six curve objects are required.")]
    [JsonObject("ChillerHeaterPerformance:Electric:EIR")]
    public class ChillerHeaterPerformance_Electric_EIR : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("reference_cooling_mode_evaporator_capacity")]
public string ReferenceCoolingModeEvaporatorCapacity { get; set; } = "";
        

[Description("Efficiency of the chiller compressor (cooling output/compressor energy input).")]
[JsonProperty("reference_cooling_mode_cop")]
public System.Nullable<float> ReferenceCoolingModeCop { get; set; } = null;
        

[JsonProperty("reference_cooling_mode_leaving_chilled_water_temperature")]
public System.Nullable<float> ReferenceCoolingModeLeavingChilledWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("6.67", CultureInfo.InvariantCulture);
        

[JsonProperty("reference_cooling_mode_entering_condenser_fluid_temperature")]
public System.Nullable<float> ReferenceCoolingModeEnteringCondenserFluidTemperature { get; set; } = (System.Nullable<float>)Single.Parse("29.44", CultureInfo.InvariantCulture);
        

[JsonProperty("reference_cooling_mode_leaving_condenser_water_temperature")]
public System.Nullable<float> ReferenceCoolingModeLeavingCondenserWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("35", CultureInfo.InvariantCulture);
        

[Description("During simultaneous cooling-heating mode, this ratio is relative to the Reference" +
    " Cooling Mode Cooling Capacity (Evaporator capacity at simul clg-htg mode ref co" +
    "ndition)/ (Evaporator capacity at cooling mode ref condition)")]
[JsonProperty("reference_heating_mode_cooling_capacity_ratio")]
public System.Nullable<float> ReferenceHeatingModeCoolingCapacityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.75", CultureInfo.InvariantCulture);
        

[Description("During simultaneous cooling-heating mode, this ratio is relative to the Reference" +
    " Cooling Mode COP (Power at simultaneous clg-htg mode reference condition)/ (Pow" +
    "er at cooling mode reference condition)")]
[JsonProperty("reference_heating_mode_cooling_power_input_ratio")]
public System.Nullable<float> ReferenceHeatingModeCoolingPowerInputRatio { get; set; } = (System.Nullable<float>)Single.Parse("1.38", CultureInfo.InvariantCulture);
        

[Description("During simultaneous cooling-heating mode")]
[JsonProperty("reference_heating_mode_leaving_chilled_water_temperature")]
public System.Nullable<float> ReferenceHeatingModeLeavingChilledWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("6.67", CultureInfo.InvariantCulture);
        

[Description("During simultaneous cooling-heating mode")]
[JsonProperty("reference_heating_mode_leaving_condenser_water_temperature")]
public System.Nullable<float> ReferenceHeatingModeLeavingCondenserWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("49", CultureInfo.InvariantCulture);
        

[JsonProperty("reference_heating_mode_entering_condenser_fluid_temperature")]
public System.Nullable<float> ReferenceHeatingModeEnteringCondenserFluidTemperature { get; set; } = (System.Nullable<float>)Single.Parse("29.44", CultureInfo.InvariantCulture);
        

[Description("During simultaneous cooling-heating mode")]
[JsonProperty("heating_mode_entering_chilled_water_temperature_low_limit")]
public System.Nullable<float> HeatingModeEnteringChilledWaterTemperatureLowLimit { get; set; } = (System.Nullable<float>)Single.Parse("12.22", CultureInfo.InvariantCulture);
        

[Description("Sets chilled water flow rate to either constant or variable.")]
[JsonProperty("chilled_water_flow_mode_type")]
public ChillerHeaterPerformance_Electric_EIR_ChilledWaterFlowModeType ChilledWaterFlowModeType { get; set; } = (ChillerHeaterPerformance_Electric_EIR_ChilledWaterFlowModeType)Enum.Parse(typeof(ChillerHeaterPerformance_Electric_EIR_ChilledWaterFlowModeType), "ConstantFlow");
        

[JsonProperty("design_chilled_water_flow_rate")]
public string DesignChilledWaterFlowRate { get; set; } = "";
        

[JsonProperty("design_condenser_water_flow_rate")]
public string DesignCondenserWaterFlowRate { get; set; } = "";
        

[JsonProperty("design_hot_water_flow_rate")]
public System.Nullable<float> DesignHotWaterFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Fraction of compressor electrical energy that must be rejected by the condenser. " +
    "Enter 1.0 or leave this field blank for a hermetic compressor.")]
[JsonProperty("compressor_motor_efficiency")]
public System.Nullable<float> CompressorMotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("condenser_type")]
public ChillerHeaterPerformance_Electric_EIR_CondenserType CondenserType { get; set; } = (ChillerHeaterPerformance_Electric_EIR_CondenserType)Enum.Parse(typeof(ChillerHeaterPerformance_Electric_EIR_CondenserType), "WaterCooled");
        

[Description(@"Sets the second independent variable in the three temperature dependent performance curves to either the leaving or entering condenser water temperature. Manufacturers express the performance of their chillers using either the leaving condenser water temperature (to the tower) or the entering condenser water temperature (from the tower). Cooling mode is generally a stronger function of Entering Condenser Fluid Temperature")]
[JsonProperty("cooling_mode_temperature_curve_condenser_water_independent_variable")]
public ChillerHeaterPerformance_Electric_EIR_CoolingModeTemperatureCurveCondenserWaterIndependentVariable CoolingModeTemperatureCurveCondenserWaterIndependentVariable { get; set; } = (ChillerHeaterPerformance_Electric_EIR_CoolingModeTemperatureCurveCondenserWaterIndependentVariable)Enum.Parse(typeof(ChillerHeaterPerformance_Electric_EIR_CoolingModeTemperatureCurveCondenserWaterIndependentVariable), "EnteringCondenser");
        

[Description(@"Cooling capacity as a function of leaving chilled water temperature and either entering or leaving condenser fluid temperature curve = a + b*CWS + c*CWS**2 + d*TCond + e*TCond**2 + f*CWS*TCond If ClgModeCondWaterCurveInputVariable = EnteringCondenser, TCond = ECT If ClgModeCondWaterCurveInputVariable = LeavingCondenser, TCond = LCT CWS = supply (leaving) chilled water temperature(C) LCT = leaving condenser fluid temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty("cooling_mode_cooling_capacity_function_of_temperature_curve_name")]
public string CoolingModeCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"Electric Input Ratio (EIR) as a function of supply (leaving) chilled water temperature and leaving condenser fluid temperature. EIR = 1/COP. curve = a + b*CWS + c*CWS**2 + d*TCond + e*TCond**2 + f*CWS*TCond If ClgModeCondWaterCurveInputVariable = EnteringCondenser, TCond = ECT If ClgModeCondWaterCurveInputVariable = LeavingCondenser, TCond = LCT CWS = supply (leaving) chilled water temperature(C) LCT = leaving condenser fluid temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty("cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve" +
    "_name")]
public string CoolingModeElectricInputToCoolingOutputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"Electric Input Ratio (EIR) as a function of Part Load Ratio (PLR) EIR = 1/COP Bicubic = a + b*TCond + c*TCond**2 + d*PLR + e*PLR**2 + f*TCond*PLR +g*0 + h*PLR**3+i*0+j*0 If ClgModeCondWaterCurveInputVariable = EnteringCondenser, TCond = ECT If ClgModeCondWaterCurveInputVariable = LeavingCondenser, TCond = LCT Normally, a bicubic curve here should be in terms of LCT rather than ECT Also, a bicubic curve is more applicable for variable-speed compressor motor drives or Quadratic = a + b*PLR + c*PLR**2 PLR = part load ratio (cooling load/steady-state capacity) LCT = leaving condenser fluid temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty("cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_c" +
    "urve_name")]
public string CoolingModeElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveName { get; set; } = "";
        

[Description("Optimum part load ratio where the chiller is most efficient. Must be greater than" +
    " or equal to the Minimum Part Load Ratio and less than or equal to the Maximum P" +
    "art Load Ratio. The Min/Max PLR are taken from their associated EIR-FPLR curve r" +
    "eferences.")]
[JsonProperty("cooling_mode_cooling_capacity_optimum_part_load_ratio")]
public System.Nullable<float> CoolingModeCoolingCapacityOptimumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description(@"Sets the second independent variable in the three temperature dependent performance curves to either the leaving or entering condenser water temperature. Manufacturers express the performance of their chillers using either the leaving condenser water temperature (to the tower) or the entering condenser water temperature (from the tower). Heating mode (or Simul Clg/Htg Load) should be a function of Leaving Condenser Fluid Temperature Only use EnteringCondenser as a last resort in case no performance data exists for LeavingCondenser")]
[JsonProperty("heating_mode_temperature_curve_condenser_water_independent_variable")]
public ChillerHeaterPerformance_Electric_EIR_HeatingModeTemperatureCurveCondenserWaterIndependentVariable HeatingModeTemperatureCurveCondenserWaterIndependentVariable { get; set; } = (ChillerHeaterPerformance_Electric_EIR_HeatingModeTemperatureCurveCondenserWaterIndependentVariable)Enum.Parse(typeof(ChillerHeaterPerformance_Electric_EIR_HeatingModeTemperatureCurveCondenserWaterIndependentVariable), "LeavingCondenser");
        

[Description(@"Evaporator (cooling) capacity as a function of leaving chilled water temperature and leaving condenser fluid temperature when in heating or simultaneous cool/heat mode curve = a + b*CWS + c*CWS**2 + d*TCond + e*TCond**2 + f*CWS*TCond If independent variable = EnteringCondenser, TCond = ECT If independent variable = LeavingCondenser, TCond = LCT CWS = supply (leaving) chilled water temperature(C) LCT = leaving condenser fluid temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty("heating_mode_cooling_capacity_function_of_temperature_curve_name")]
public string HeatingModeCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"Electric Input Ratio (EIR) as a function of leaving chilled water temperature when in heating or simultaneous cool/heat mode and leaving condenser fluid temperature. EIR = 1/COP. curve = a + b*CWS + c*CWS**2 + d*TCond + e*TCond**2 + f*CWS*TCond If independent variable = EnteringCondenser, TCond = ECT If independent variable = LeavingCondenser, TCond = LCT CWS = leaving chilled water temperature(C) LCT = leaving condenser fluid temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty("heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve" +
    "_name")]
public string HeatingModeElectricInputToCoolingOutputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description(@"Electric Input Ratio (EIR) as a function of Part Load Ratio (PLR) when in heating or simultaneous cool/heat mode EIR = 1/COP Bicubic = a + b*LCT + c*LCT**2 + d*PLR + e*PLR**2 + f*LCT*PLR + g*0 + h*PLR**3 + i*0 + j*0 Normally, a bicubic curve here should be in terms of LCT rather than ECT Also, a bicubic curve is more applicable for variable-speed compressor motor drives or Quadratic = a + b*PLR + c*PLR**2 PLR = part load ratio (cooling load/steady-state capacity) LCT = leaving condenser fluid temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty("heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_c" +
    "urve_name")]
public string HeatingModeElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveName { get; set; } = "";
        

[Description(@"Optimum part load ratio where the chiller is most efficient when in heating or simultaneous cool/heat mode. Must be greater than or equal to the Minimum Part Load Ratio and less than or equal to the Maximum Part Load Ratio. The Min/Max PLR are taken from their associated EIR-FPLR curve references.")]
[JsonProperty("heating_mode_cooling_capacity_optimum_part_load_ratio")]
public System.Nullable<float> HeatingModeCoolingCapacityOptimumPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Multiplies the autosized capacity and flow rates")]
[JsonProperty("sizing_factor")]
public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    public enum ChillerHeaterPerformance_Electric_EIR_ChilledWaterFlowModeType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("VariableFlow")]
        VariableFlow = 2,
    }
    
    public enum ChillerHeaterPerformance_Electric_EIR_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 2,
    }
    
    public enum ChillerHeaterPerformance_Electric_EIR_CoolingModeTemperatureCurveCondenserWaterIndependentVariable
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("EnteringCondenser")]
        EnteringCondenser = 1,
        
        [JsonProperty("LeavingCondenser")]
        LeavingCondenser = 2,
    }
    
    public enum ChillerHeaterPerformance_Electric_EIR_HeatingModeTemperatureCurveCondenserWaterIndependentVariable
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("EnteringCondenser")]
        EnteringCondenser = 1,
        
        [JsonProperty("LeavingCondenser")]
        LeavingCondenser = 2,
    }
}
namespace BH.oM.Adapters.EnergyPlus.PlantCondenserControl
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"List plant equipment in order of operating priority, 1st in list will be used 1st, etc Use only plant equipment in this list. If no equipment object types and equipment names are specified, then the corresponding PlantEquipmentOperation:* object will assume all available plant equipment for the loop should be OFF (not operate) within the specified lower/upper limit.")]
    [JsonObject("PlantEquipmentList")]
    public class PlantEquipmentList : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("equipment")]
public string Equipment { get; set; } = "";
    }
    
    [Description(@"List condenser equipment in order of operating priority, 1st in list will be used 1st, etc Use only condenser equipment in this list. If no equipment object types and equipment names are specified, then the corresponding PlantEquipmentOperation:* object will assume all available condenser equipment for the loop should be OFF (not operate) within the specified lower/upper limit.")]
    [JsonObject("CondenserEquipmentList")]
    public class CondenserEquipmentList : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("equipment")]
public string Equipment { get; set; } = "";
    }
    
    [Description("Plant equipment operation scheme for uncontrolled operation. Specifies a group of" +
        " equipment that runs if the loop is active, unless turned off by the loop flow r" +
        "esolver to maintain continuity in the fluid loop.")]
    [JsonObject("PlantEquipmentOperation:Uncontrolled")]
    public class PlantEquipmentOperation_Uncontrolled : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("equipment_list_name")]
public string EquipmentListName { get; set; } = "";
    }
    
    [Description("Plant equipment operation scheme for cooling load range operation. Specifies one " +
        "or more groups of equipment which are available to operate for successive coolin" +
        "g load ranges.")]
    [JsonObject("PlantEquipmentOperation:CoolingLoad")]
    public class PlantEquipmentOperation_CoolingLoad : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("load_range_1_lower_limit")]
public System.Nullable<float> LoadRange1LowerLimit { get; set; } = null;
        

[JsonProperty("load_range_1_upper_limit")]
public System.Nullable<float> LoadRange1UpperLimit { get; set; } = null;
        

[JsonProperty("range_1_equipment_list_name")]
public string Range1EquipmentListName { get; set; } = "";
        

[JsonProperty("load_range_2_lower_limit")]
public System.Nullable<float> LoadRange2LowerLimit { get; set; } = null;
        

[JsonProperty("load_range_2_upper_limit")]
public System.Nullable<float> LoadRange2UpperLimit { get; set; } = null;
        

[JsonProperty("range_2_equipment_list_name")]
public string Range2EquipmentListName { get; set; } = "";
        

[JsonProperty("load_range_3_lower_limit")]
public System.Nullable<float> LoadRange3LowerLimit { get; set; } = null;
        

[JsonProperty("load_range_3_upper_limit")]
public System.Nullable<float> LoadRange3UpperLimit { get; set; } = null;
        

[JsonProperty("range_3_equipment_list_name")]
public string Range3EquipmentListName { get; set; } = "";
        

[JsonProperty("load_range_4_lower_limit")]
public System.Nullable<float> LoadRange4LowerLimit { get; set; } = null;
        

[JsonProperty("load_range_4_upper_limit")]
public System.Nullable<float> LoadRange4UpperLimit { get; set; } = null;
        

[JsonProperty("range_4_equipment_list_name")]
public string Range4EquipmentListName { get; set; } = "";
        

[JsonProperty("load_range_5_lower_limit")]
public System.Nullable<float> LoadRange5LowerLimit { get; set; } = null;
        

[JsonProperty("load_range_5_upper_limit")]
public System.Nullable<float> LoadRange5UpperLimit { get; set; } = null;
        

[JsonProperty("range_5_equipment_list_name")]
public string Range5EquipmentListName { get; set; } = "";
        

[JsonProperty("load_range_6_lower_limit")]
public System.Nullable<float> LoadRange6LowerLimit { get; set; } = null;
        

[JsonProperty("load_range_6_upper_limit")]
public System.Nullable<float> LoadRange6UpperLimit { get; set; } = null;
        

[JsonProperty("range_6_equipment_list_name")]
public string Range6EquipmentListName { get; set; } = "";
        

[JsonProperty("load_range_7_lower_limit")]
public System.Nullable<float> LoadRange7LowerLimit { get; set; } = null;
        

[JsonProperty("load_range_7_upper_limit")]
public System.Nullable<float> LoadRange7UpperLimit { get; set; } = null;
        

[JsonProperty("range_7_equipment_list_name")]
public string Range7EquipmentListName { get; set; } = "";
        

[JsonProperty("load_range_8_lower_limit")]
public System.Nullable<float> LoadRange8LowerLimit { get; set; } = null;
        

[JsonProperty("load_range_8_upper_limit")]
public System.Nullable<float> LoadRange8UpperLimit { get; set; } = null;
        

[JsonProperty("range_8_equipment_list_name")]
public string Range8EquipmentListName { get; set; } = "";
        

[JsonProperty("load_range_9_lower_limit")]
public System.Nullable<float> LoadRange9LowerLimit { get; set; } = null;
        

[JsonProperty("load_range_9_upper_limit")]
public System.Nullable<float> LoadRange9UpperLimit { get; set; } = null;
        

[JsonProperty("range_9_equipment_list_name")]
public string Range9EquipmentListName { get; set; } = "";
        

[JsonProperty("load_range_10_lower_limit")]
public System.Nullable<float> LoadRange10LowerLimit { get; set; } = null;
        

[JsonProperty("load_range_10_upper_limit")]
public System.Nullable<float> LoadRange10UpperLimit { get; set; } = null;
        

[JsonProperty("range_10_equipment_list_name")]
public string Range10EquipmentListName { get; set; } = "";
    }
    
    [Description("Plant equipment operation scheme for heating load range operation. Specifies one " +
        "or more groups of equipment which are available to operate for successive heatin" +
        "g load ranges.")]
    [JsonObject("PlantEquipmentOperation:HeatingLoad")]
    public class PlantEquipmentOperation_HeatingLoad : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("load_range_1_lower_limit")]
public System.Nullable<float> LoadRange1LowerLimit { get; set; } = null;
        

[JsonProperty("load_range_1_upper_limit")]
public System.Nullable<float> LoadRange1UpperLimit { get; set; } = null;
        

[JsonProperty("range_1_equipment_list_name")]
public string Range1EquipmentListName { get; set; } = "";
        

[JsonProperty("load_range_2_lower_limit")]
public System.Nullable<float> LoadRange2LowerLimit { get; set; } = null;
        

[JsonProperty("load_range_2_upper_limit")]
public System.Nullable<float> LoadRange2UpperLimit { get; set; } = null;
        

[JsonProperty("range_2_equipment_list_name")]
public string Range2EquipmentListName { get; set; } = "";
        

[JsonProperty("load_range_3_lower_limit")]
public System.Nullable<float> LoadRange3LowerLimit { get; set; } = null;
        

[JsonProperty("load_range_3_upper_limit")]
public System.Nullable<float> LoadRange3UpperLimit { get; set; } = null;
        

[JsonProperty("range_3_equipment_list_name")]
public string Range3EquipmentListName { get; set; } = "";
        

[JsonProperty("load_range_4_lower_limit")]
public System.Nullable<float> LoadRange4LowerLimit { get; set; } = null;
        

[JsonProperty("load_range_4_upper_limit")]
public System.Nullable<float> LoadRange4UpperLimit { get; set; } = null;
        

[JsonProperty("range_4_equipment_list_name")]
public string Range4EquipmentListName { get; set; } = "";
        

[JsonProperty("load_range_5_lower_limit")]
public System.Nullable<float> LoadRange5LowerLimit { get; set; } = null;
        

[JsonProperty("load_range_5_upper_limit")]
public System.Nullable<float> LoadRange5UpperLimit { get; set; } = null;
        

[JsonProperty("range_5_equipment_list_name")]
public string Range5EquipmentListName { get; set; } = "";
        

[JsonProperty("load_range_6_lower_limit")]
public System.Nullable<float> LoadRange6LowerLimit { get; set; } = null;
        

[JsonProperty("load_range_6_upper_limit")]
public System.Nullable<float> LoadRange6UpperLimit { get; set; } = null;
        

[JsonProperty("range_6_equipment_list_name")]
public string Range6EquipmentListName { get; set; } = "";
        

[JsonProperty("load_range_7_lower_limit")]
public System.Nullable<float> LoadRange7LowerLimit { get; set; } = null;
        

[JsonProperty("load_range_7_upper_limit")]
public System.Nullable<float> LoadRange7UpperLimit { get; set; } = null;
        

[JsonProperty("range_7_equipment_list_name")]
public string Range7EquipmentListName { get; set; } = "";
        

[JsonProperty("load_range_8_lower_limit")]
public System.Nullable<float> LoadRange8LowerLimit { get; set; } = null;
        

[JsonProperty("load_range_8_upper_limit")]
public System.Nullable<float> LoadRange8UpperLimit { get; set; } = null;
        

[JsonProperty("range_8_equipment_list_name")]
public string Range8EquipmentListName { get; set; } = "";
        

[JsonProperty("load_range_9_lower_limit")]
public System.Nullable<float> LoadRange9LowerLimit { get; set; } = null;
        

[JsonProperty("load_range_9_upper_limit")]
public System.Nullable<float> LoadRange9UpperLimit { get; set; } = null;
        

[JsonProperty("range_9_equipment_list_name")]
public string Range9EquipmentListName { get; set; } = "";
        

[JsonProperty("load_range_10_lower_limit")]
public System.Nullable<float> LoadRange10LowerLimit { get; set; } = null;
        

[JsonProperty("load_range_10_upper_limit")]
public System.Nullable<float> LoadRange10UpperLimit { get; set; } = null;
        

[JsonProperty("range_10_equipment_list_name")]
public string Range10EquipmentListName { get; set; } = "";
    }
    
    [Description("Plant equipment operation scheme for outdoor dry-bulb temperature range operation" +
        ". Specifies one or more groups of equipment which are available to operate for s" +
        "uccessive outdoor dry-bulb temperature ranges.")]
    [JsonObject("PlantEquipmentOperation:OutdoorDryBulb")]
    public class PlantEquipmentOperation_OutdoorDryBulb : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("dry_bulb_temperature_range_1_lower_limit")]
public System.Nullable<float> DryBulbTemperatureRange1LowerLimit { get; set; } = null;
        

[JsonProperty("dry_bulb_temperature_range_1_upper_limit")]
public System.Nullable<float> DryBulbTemperatureRange1UpperLimit { get; set; } = null;
        

[JsonProperty("range_1_equipment_list_name")]
public string Range1EquipmentListName { get; set; } = "";
        

[JsonProperty("dry_bulb_temperature_range_2_lower_limit")]
public System.Nullable<float> DryBulbTemperatureRange2LowerLimit { get; set; } = null;
        

[JsonProperty("dry_bulb_temperature_range_2_upper_limit")]
public System.Nullable<float> DryBulbTemperatureRange2UpperLimit { get; set; } = null;
        

[JsonProperty("range_2_equipment_list_name")]
public string Range2EquipmentListName { get; set; } = "";
        

[JsonProperty("dry_bulb_temperature_range_3_lower_limit")]
public System.Nullable<float> DryBulbTemperatureRange3LowerLimit { get; set; } = null;
        

[JsonProperty("dry_bulb_temperature_range_3_upper_limit")]
public System.Nullable<float> DryBulbTemperatureRange3UpperLimit { get; set; } = null;
        

[JsonProperty("range_3_equipment_list_name")]
public string Range3EquipmentListName { get; set; } = "";
        

[JsonProperty("dry_bulb_temperature_range_4_lower_limit")]
public System.Nullable<float> DryBulbTemperatureRange4LowerLimit { get; set; } = null;
        

[JsonProperty("dry_bulb_temperature_range_4_upper_limit")]
public System.Nullable<float> DryBulbTemperatureRange4UpperLimit { get; set; } = null;
        

[JsonProperty("range_4_equipment_list_name")]
public string Range4EquipmentListName { get; set; } = "";
        

[JsonProperty("dry_bulb_temperature_range_5_lower_limit")]
public System.Nullable<float> DryBulbTemperatureRange5LowerLimit { get; set; } = null;
        

[JsonProperty("dry_bulb_temperature_range_5_upper_limit")]
public System.Nullable<float> DryBulbTemperatureRange5UpperLimit { get; set; } = null;
        

[JsonProperty("range_5_equipment_list_name")]
public string Range5EquipmentListName { get; set; } = "";
        

[JsonProperty("dry_bulb_temperature_range_6_lower_limit")]
public System.Nullable<float> DryBulbTemperatureRange6LowerLimit { get; set; } = null;
        

[JsonProperty("dry_bulb_temperature_range_6_upper_limit")]
public System.Nullable<float> DryBulbTemperatureRange6UpperLimit { get; set; } = null;
        

[JsonProperty("range_6_equipment_list_name")]
public string Range6EquipmentListName { get; set; } = "";
        

[JsonProperty("dry_bulb_temperature_range_7_lower_limit")]
public System.Nullable<float> DryBulbTemperatureRange7LowerLimit { get; set; } = null;
        

[JsonProperty("dry_bulb_temperature_range_7_upper_limit")]
public System.Nullable<float> DryBulbTemperatureRange7UpperLimit { get; set; } = null;
        

[JsonProperty("range_7_equipment_list_name")]
public string Range7EquipmentListName { get; set; } = "";
        

[JsonProperty("dry_bulb_temperature_range_8_lower_limit")]
public System.Nullable<float> DryBulbTemperatureRange8LowerLimit { get; set; } = null;
        

[JsonProperty("dry_bulb_temperature_range_8_upper_limit")]
public System.Nullable<float> DryBulbTemperatureRange8UpperLimit { get; set; } = null;
        

[JsonProperty("range_8_equipment_list_name")]
public string Range8EquipmentListName { get; set; } = "";
        

[JsonProperty("dry_bulb_temperature_range_9_lower_limit")]
public System.Nullable<float> DryBulbTemperatureRange9LowerLimit { get; set; } = null;
        

[JsonProperty("dry_bulb_temperature_range_9_upper_limit")]
public System.Nullable<float> DryBulbTemperatureRange9UpperLimit { get; set; } = null;
        

[JsonProperty("range_9_equipment_list_name")]
public string Range9EquipmentListName { get; set; } = "";
        

[JsonProperty("dry_bulb_temperature_range_10_lower_limit")]
public System.Nullable<float> DryBulbTemperatureRange10LowerLimit { get; set; } = null;
        

[JsonProperty("dry_bulb_temperature_range_10_upper_limit")]
public System.Nullable<float> DryBulbTemperatureRange10UpperLimit { get; set; } = null;
        

[JsonProperty("range_10_equipment_list_name")]
public string Range10EquipmentListName { get; set; } = "";
    }
    
    [Description("Plant equipment operation scheme for outdoor wet-bulb temperature range operation" +
        ". Specifies one or more groups of equipment which are available to operate for s" +
        "uccessive outdoor wet-bulb temperature ranges.")]
    [JsonObject("PlantEquipmentOperation:OutdoorWetBulb")]
    public class PlantEquipmentOperation_OutdoorWetBulb : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("wet_bulb_temperature_range_1_lower_limit")]
public System.Nullable<float> WetBulbTemperatureRange1LowerLimit { get; set; } = null;
        

[JsonProperty("wet_bulb_temperature_range_1_upper_limit")]
public System.Nullable<float> WetBulbTemperatureRange1UpperLimit { get; set; } = null;
        

[JsonProperty("range_1_equipment_list_name")]
public string Range1EquipmentListName { get; set; } = "";
        

[JsonProperty("wet_bulb_temperature_range_2_lower_limit")]
public System.Nullable<float> WetBulbTemperatureRange2LowerLimit { get; set; } = null;
        

[JsonProperty("wet_bulb_temperature_range_2_upper_limit")]
public System.Nullable<float> WetBulbTemperatureRange2UpperLimit { get; set; } = null;
        

[JsonProperty("range_2_equipment_list_name")]
public string Range2EquipmentListName { get; set; } = "";
        

[JsonProperty("wet_bulb_temperature_range_3_lower_limit")]
public System.Nullable<float> WetBulbTemperatureRange3LowerLimit { get; set; } = null;
        

[JsonProperty("wet_bulb_temperature_range_3_upper_limit")]
public System.Nullable<float> WetBulbTemperatureRange3UpperLimit { get; set; } = null;
        

[JsonProperty("range_3_equipment_list_name")]
public string Range3EquipmentListName { get; set; } = "";
        

[JsonProperty("wet_bulb_temperature_range_4_lower_limit")]
public System.Nullable<float> WetBulbTemperatureRange4LowerLimit { get; set; } = null;
        

[JsonProperty("wet_bulb_temperature_range_4_upper_limit")]
public System.Nullable<float> WetBulbTemperatureRange4UpperLimit { get; set; } = null;
        

[JsonProperty("range_4_equipment_list_name")]
public string Range4EquipmentListName { get; set; } = "";
        

[JsonProperty("wet_bulb_temperature_range_5_lower_limit")]
public System.Nullable<float> WetBulbTemperatureRange5LowerLimit { get; set; } = null;
        

[JsonProperty("wet_bulb_temperature_range_5_upper_limit")]
public System.Nullable<float> WetBulbTemperatureRange5UpperLimit { get; set; } = null;
        

[JsonProperty("range_5_equipment_list_name")]
public string Range5EquipmentListName { get; set; } = "";
        

[JsonProperty("wet_bulb_temperature_range_6_lower_limit")]
public System.Nullable<float> WetBulbTemperatureRange6LowerLimit { get; set; } = null;
        

[JsonProperty("wet_bulb_temperature_range_6_upper_limit")]
public System.Nullable<float> WetBulbTemperatureRange6UpperLimit { get; set; } = null;
        

[JsonProperty("range_6_equipment_list_name")]
public string Range6EquipmentListName { get; set; } = "";
        

[JsonProperty("wet_bulb_temperature_range_7_lower_limit")]
public System.Nullable<float> WetBulbTemperatureRange7LowerLimit { get; set; } = null;
        

[JsonProperty("wet_bulb_temperature_range_7_upper_limit")]
public System.Nullable<float> WetBulbTemperatureRange7UpperLimit { get; set; } = null;
        

[JsonProperty("range_7_equipment_list_name")]
public string Range7EquipmentListName { get; set; } = "";
        

[JsonProperty("wet_bulb_temperature_range_8_lower_limit")]
public System.Nullable<float> WetBulbTemperatureRange8LowerLimit { get; set; } = null;
        

[JsonProperty("wet_bulb_temperature_range_8_upper_limit")]
public System.Nullable<float> WetBulbTemperatureRange8UpperLimit { get; set; } = null;
        

[JsonProperty("range_8_equipment_list_name")]
public string Range8EquipmentListName { get; set; } = "";
        

[JsonProperty("wet_bulb_temperature_range_9_lower_limit")]
public System.Nullable<float> WetBulbTemperatureRange9LowerLimit { get; set; } = null;
        

[JsonProperty("wet_bulb_temperature_range_9_upper_limit")]
public System.Nullable<float> WetBulbTemperatureRange9UpperLimit { get; set; } = null;
        

[JsonProperty("range_9_equipment_list_name")]
public string Range9EquipmentListName { get; set; } = "";
        

[JsonProperty("wet_bulb_temperature_range_10_lower_limit")]
public System.Nullable<float> WetBulbTemperatureRange10LowerLimit { get; set; } = null;
        

[JsonProperty("wet_bulb_temperature_range_10_upper_limit")]
public System.Nullable<float> WetBulbTemperatureRange10UpperLimit { get; set; } = null;
        

[JsonProperty("range_10_equipment_list_name")]
public string Range10EquipmentListName { get; set; } = "";
    }
    
    [Description("Plant equipment operation scheme for outdoor relative humidity range operation. S" +
        "pecifies one or more groups of equipment which are available to operate for succ" +
        "essive outdoor relative humidity ranges.")]
    [JsonObject("PlantEquipmentOperation:OutdoorRelativeHumidity")]
    public class PlantEquipmentOperation_OutdoorRelativeHumidity : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("relative_humidity_range_1_lower_limit")]
public System.Nullable<float> RelativeHumidityRange1LowerLimit { get; set; } = null;
        

[JsonProperty("relative_humidity_range_1_upper_limit")]
public System.Nullable<float> RelativeHumidityRange1UpperLimit { get; set; } = null;
        

[JsonProperty("range_1_equipment_list_name")]
public string Range1EquipmentListName { get; set; } = "";
        

[JsonProperty("relative_humidity_range_2_lower_limit")]
public System.Nullable<float> RelativeHumidityRange2LowerLimit { get; set; } = null;
        

[JsonProperty("relative_humidity_range_2_upper_limit")]
public System.Nullable<float> RelativeHumidityRange2UpperLimit { get; set; } = null;
        

[JsonProperty("range_2_equipment_list_name")]
public string Range2EquipmentListName { get; set; } = "";
        

[JsonProperty("relative_humidity_range_3_lower_limit")]
public System.Nullable<float> RelativeHumidityRange3LowerLimit { get; set; } = null;
        

[JsonProperty("relative_humidity_range_3_upper_limit")]
public System.Nullable<float> RelativeHumidityRange3UpperLimit { get; set; } = null;
        

[JsonProperty("range_3_equipment_list_name")]
public string Range3EquipmentListName { get; set; } = "";
        

[JsonProperty("relative_humidity_range_4_lower_limit")]
public System.Nullable<float> RelativeHumidityRange4LowerLimit { get; set; } = null;
        

[JsonProperty("relative_humidity_range_4_upper_limit")]
public System.Nullable<float> RelativeHumidityRange4UpperLimit { get; set; } = null;
        

[JsonProperty("range_4_equipment_list_name")]
public string Range4EquipmentListName { get; set; } = "";
        

[JsonProperty("relative_humidity_range_5_lower_limit")]
public System.Nullable<float> RelativeHumidityRange5LowerLimit { get; set; } = null;
        

[JsonProperty("relative_humidity_range_5_upper_limit")]
public System.Nullable<float> RelativeHumidityRange5UpperLimit { get; set; } = null;
        

[JsonProperty("range_5_equipment_list_name")]
public string Range5EquipmentListName { get; set; } = "";
        

[JsonProperty("relative_humidity_range_6_lower_limit")]
public System.Nullable<float> RelativeHumidityRange6LowerLimit { get; set; } = null;
        

[JsonProperty("relative_humidity_range_6_upper_limit")]
public System.Nullable<float> RelativeHumidityRange6UpperLimit { get; set; } = null;
        

[JsonProperty("range_6_equipment_list_name")]
public string Range6EquipmentListName { get; set; } = "";
        

[JsonProperty("relative_humidity_range_7_lower_limit")]
public System.Nullable<float> RelativeHumidityRange7LowerLimit { get; set; } = null;
        

[JsonProperty("relative_humidity_range_7_upper_limit")]
public System.Nullable<float> RelativeHumidityRange7UpperLimit { get; set; } = null;
        

[JsonProperty("range_7_equipment_list_name")]
public string Range7EquipmentListName { get; set; } = "";
        

[JsonProperty("relative_humidity_range_8_lower_limit")]
public System.Nullable<float> RelativeHumidityRange8LowerLimit { get; set; } = null;
        

[JsonProperty("relative_humidity_range_8_upper_limit")]
public System.Nullable<float> RelativeHumidityRange8UpperLimit { get; set; } = null;
        

[JsonProperty("range_8_equipment_list_name")]
public string Range8EquipmentListName { get; set; } = "";
        

[JsonProperty("relative_humidity_range_9_lower_limit")]
public System.Nullable<float> RelativeHumidityRange9LowerLimit { get; set; } = null;
        

[JsonProperty("relative_humidity_range_9_upper_limit")]
public System.Nullable<float> RelativeHumidityRange9UpperLimit { get; set; } = null;
        

[JsonProperty("range_9_equipment_list_name")]
public string Range9EquipmentListName { get; set; } = "";
        

[JsonProperty("relative_humidity_range_10_lower_limit")]
public System.Nullable<float> RelativeHumidityRange10LowerLimit { get; set; } = null;
        

[JsonProperty("relative_humidity_range_10_upper_limit")]
public System.Nullable<float> RelativeHumidityRange10UpperLimit { get; set; } = null;
        

[JsonProperty("range_10_equipment_list_name")]
public string Range10EquipmentListName { get; set; } = "";
    }
    
    [Description("Plant equipment operation scheme for outdoor dewpoint temperature range operation" +
        ". Specifies one or more groups of equipment which are available to operate for s" +
        "uccessive outdoor dewpoint temperature ranges.")]
    [JsonObject("PlantEquipmentOperation:OutdoorDewpoint")]
    public class PlantEquipmentOperation_OutdoorDewpoint : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("dewpoint_temperature_range_1_lower_limit")]
public System.Nullable<float> DewpointTemperatureRange1LowerLimit { get; set; } = null;
        

[JsonProperty("dewpoint_temperature_range_1_upper_limit")]
public System.Nullable<float> DewpointTemperatureRange1UpperLimit { get; set; } = null;
        

[JsonProperty("range_1_equipment_list_name")]
public string Range1EquipmentListName { get; set; } = "";
        

[JsonProperty("dewpoint_temperature_range_2_lower_limit")]
public System.Nullable<float> DewpointTemperatureRange2LowerLimit { get; set; } = null;
        

[JsonProperty("dewpoint_temperature_range_2_upper_limit")]
public System.Nullable<float> DewpointTemperatureRange2UpperLimit { get; set; } = null;
        

[JsonProperty("range_2_equipment_list_name")]
public string Range2EquipmentListName { get; set; } = "";
        

[JsonProperty("dewpoint_temperature_range_3_lower_limit")]
public System.Nullable<float> DewpointTemperatureRange3LowerLimit { get; set; } = null;
        

[JsonProperty("dewpoint_temperature_range_3_upper_limit")]
public System.Nullable<float> DewpointTemperatureRange3UpperLimit { get; set; } = null;
        

[JsonProperty("range_3_equipment_list_name")]
public string Range3EquipmentListName { get; set; } = "";
        

[JsonProperty("dewpoint_temperature_range_4_lower_limit")]
public System.Nullable<float> DewpointTemperatureRange4LowerLimit { get; set; } = null;
        

[JsonProperty("dewpoint_temperature_range_4_upper_limit")]
public System.Nullable<float> DewpointTemperatureRange4UpperLimit { get; set; } = null;
        

[JsonProperty("range_4_equipment_list_name")]
public string Range4EquipmentListName { get; set; } = "";
        

[JsonProperty("dewpoint_temperature_range_5_lower_limit")]
public System.Nullable<float> DewpointTemperatureRange5LowerLimit { get; set; } = null;
        

[JsonProperty("dewpoint_temperature_range_5_upper_limit")]
public System.Nullable<float> DewpointTemperatureRange5UpperLimit { get; set; } = null;
        

[JsonProperty("range_5_equipment_list_name")]
public string Range5EquipmentListName { get; set; } = "";
        

[JsonProperty("dewpoint_temperature_range_6_lower_limit")]
public System.Nullable<float> DewpointTemperatureRange6LowerLimit { get; set; } = null;
        

[JsonProperty("dewpoint_temperature_range_6_upper_limit")]
public System.Nullable<float> DewpointTemperatureRange6UpperLimit { get; set; } = null;
        

[JsonProperty("range_6_equipment_list_name")]
public string Range6EquipmentListName { get; set; } = "";
        

[JsonProperty("dewpoint_temperature_range_7_lower_limit")]
public System.Nullable<float> DewpointTemperatureRange7LowerLimit { get; set; } = null;
        

[JsonProperty("dewpoint_temperature_range_7_upper_limit")]
public System.Nullable<float> DewpointTemperatureRange7UpperLimit { get; set; } = null;
        

[JsonProperty("range_7_equipment_list_name")]
public string Range7EquipmentListName { get; set; } = "";
        

[JsonProperty("dewpoint_temperature_range_8_lower_limit")]
public System.Nullable<float> DewpointTemperatureRange8LowerLimit { get; set; } = null;
        

[JsonProperty("dewpoint_temperature_range_8_upper_limit")]
public System.Nullable<float> DewpointTemperatureRange8UpperLimit { get; set; } = null;
        

[JsonProperty("range_8_equipment_list_name")]
public string Range8EquipmentListName { get; set; } = "";
        

[JsonProperty("dewpoint_temperature_range_9_lower_limit")]
public System.Nullable<float> DewpointTemperatureRange9LowerLimit { get; set; } = null;
        

[JsonProperty("dewpoint_temperature_range_9_upper_limit")]
public System.Nullable<float> DewpointTemperatureRange9UpperLimit { get; set; } = null;
        

[JsonProperty("range_9_equipment_list_name")]
public string Range9EquipmentListName { get; set; } = "";
        

[JsonProperty("dewpoint_temperature_range_10_lower_limit")]
public System.Nullable<float> DewpointTemperatureRange10LowerLimit { get; set; } = null;
        

[JsonProperty("dewpoint_temperature_range_10_upper_limit")]
public System.Nullable<float> DewpointTemperatureRange10UpperLimit { get; set; } = null;
        

[JsonProperty("range_10_equipment_list_name")]
public string Range10EquipmentListName { get; set; } = "";
    }
    
    [Description("Plant equipment operation scheme for component setpoint operation. Specifies one " +
        "or pieces of equipment which are controlled to meet the temperature setpoint at " +
        "the component outlet node.")]
    [JsonObject("PlantEquipmentOperation:ComponentSetpoint")]
    public class PlantEquipmentOperation_ComponentSetpoint : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("equipment_1_object_type")]
public string Equipment1ObjectType { get; set; } = "";
        

[JsonProperty("equipment_1_name")]
public string Equipment1Name { get; set; } = "";
        

[JsonProperty("demand_calculation_1_node_name")]
public string DemandCalculation1NodeName { get; set; } = "";
        

[JsonProperty("setpoint_1_node_name")]
public string Setpoint1NodeName { get; set; } = "";
        

[JsonProperty("component_1_flow_rate")]
public string Component1FlowRate { get; set; } = "";
        

[JsonProperty("operation_1_type")]
public PlantEquipmentOperation_ComponentSetpoint_Operation1Type Operation1Type { get; set; } = (PlantEquipmentOperation_ComponentSetpoint_Operation1Type)Enum.Parse(typeof(PlantEquipmentOperation_ComponentSetpoint_Operation1Type), "Cooling");
        

[JsonProperty("equipment_2_object_type")]
public string Equipment2ObjectType { get; set; } = "";
        

[JsonProperty("equipment_2_name")]
public string Equipment2Name { get; set; } = "";
        

[JsonProperty("demand_calculation_2_node_name")]
public string DemandCalculation2NodeName { get; set; } = "";
        

[JsonProperty("setpoint_2_node_name")]
public string Setpoint2NodeName { get; set; } = "";
        

[JsonProperty("component_2_flow_rate")]
public string Component2FlowRate { get; set; } = "";
        

[JsonProperty("operation_2_type")]
public PlantEquipmentOperation_ComponentSetpoint_Operation2Type Operation2Type { get; set; } = (PlantEquipmentOperation_ComponentSetpoint_Operation2Type)Enum.Parse(typeof(PlantEquipmentOperation_ComponentSetpoint_Operation2Type), "Cooling");
        

[JsonProperty("equipment_3_object_type")]
public string Equipment3ObjectType { get; set; } = "";
        

[JsonProperty("equipment_3_name")]
public string Equipment3Name { get; set; } = "";
        

[JsonProperty("demand_calculation_3_node_name")]
public string DemandCalculation3NodeName { get; set; } = "";
        

[JsonProperty("setpoint_3_node_name")]
public string Setpoint3NodeName { get; set; } = "";
        

[JsonProperty("component_3_flow_rate")]
public string Component3FlowRate { get; set; } = "";
        

[JsonProperty("operation_3_type")]
public PlantEquipmentOperation_ComponentSetpoint_Operation3Type Operation3Type { get; set; } = (PlantEquipmentOperation_ComponentSetpoint_Operation3Type)Enum.Parse(typeof(PlantEquipmentOperation_ComponentSetpoint_Operation3Type), "Cooling");
        

[JsonProperty("equipment_4_object_type")]
public string Equipment4ObjectType { get; set; } = "";
        

[JsonProperty("equipment_4_name")]
public string Equipment4Name { get; set; } = "";
        

[JsonProperty("demand_calculation_4_node_name")]
public string DemandCalculation4NodeName { get; set; } = "";
        

[JsonProperty("setpoint_4_node_name")]
public string Setpoint4NodeName { get; set; } = "";
        

[JsonProperty("component_4_flow_rate")]
public string Component4FlowRate { get; set; } = "";
        

[JsonProperty("operation_4_type")]
public PlantEquipmentOperation_ComponentSetpoint_Operation4Type Operation4Type { get; set; } = (PlantEquipmentOperation_ComponentSetpoint_Operation4Type)Enum.Parse(typeof(PlantEquipmentOperation_ComponentSetpoint_Operation4Type), "Cooling");
        

[JsonProperty("equipment_5_object_type")]
public string Equipment5ObjectType { get; set; } = "";
        

[JsonProperty("equipment_5_name")]
public string Equipment5Name { get; set; } = "";
        

[JsonProperty("demand_calculation_5_node_name")]
public string DemandCalculation5NodeName { get; set; } = "";
        

[JsonProperty("setpoint_5_node_name")]
public string Setpoint5NodeName { get; set; } = "";
        

[JsonProperty("component_5_flow_rate")]
public string Component5FlowRate { get; set; } = "";
        

[JsonProperty("operation_5_type")]
public PlantEquipmentOperation_ComponentSetpoint_Operation5Type Operation5Type { get; set; } = (PlantEquipmentOperation_ComponentSetpoint_Operation5Type)Enum.Parse(typeof(PlantEquipmentOperation_ComponentSetpoint_Operation5Type), "Cooling");
        

[JsonProperty("equipment_6_object_type")]
public string Equipment6ObjectType { get; set; } = "";
        

[JsonProperty("equipment_6_name")]
public string Equipment6Name { get; set; } = "";
        

[JsonProperty("demand_calculation_6_node_name")]
public string DemandCalculation6NodeName { get; set; } = "";
        

[JsonProperty("setpoint_6_node_name")]
public string Setpoint6NodeName { get; set; } = "";
        

[JsonProperty("component_6_flow_rate")]
public string Component6FlowRate { get; set; } = "";
        

[JsonProperty("operation_6_type")]
public PlantEquipmentOperation_ComponentSetpoint_Operation6Type Operation6Type { get; set; } = (PlantEquipmentOperation_ComponentSetpoint_Operation6Type)Enum.Parse(typeof(PlantEquipmentOperation_ComponentSetpoint_Operation6Type), "Cooling");
        

[JsonProperty("equipment_7_object_type")]
public string Equipment7ObjectType { get; set; } = "";
        

[JsonProperty("equipment_7_name")]
public string Equipment7Name { get; set; } = "";
        

[JsonProperty("demand_calculation_7_node_name")]
public string DemandCalculation7NodeName { get; set; } = "";
        

[JsonProperty("setpoint_7_node_name")]
public string Setpoint7NodeName { get; set; } = "";
        

[JsonProperty("component_7_flow_rate")]
public string Component7FlowRate { get; set; } = "";
        

[JsonProperty("operation_7_type")]
public PlantEquipmentOperation_ComponentSetpoint_Operation7Type Operation7Type { get; set; } = (PlantEquipmentOperation_ComponentSetpoint_Operation7Type)Enum.Parse(typeof(PlantEquipmentOperation_ComponentSetpoint_Operation7Type), "Cooling");
        

[JsonProperty("equipment_8_object_type")]
public string Equipment8ObjectType { get; set; } = "";
        

[JsonProperty("equipment_8_name")]
public string Equipment8Name { get; set; } = "";
        

[JsonProperty("demand_calculation_8_node_name")]
public string DemandCalculation8NodeName { get; set; } = "";
        

[JsonProperty("setpoint_8_node_name")]
public string Setpoint8NodeName { get; set; } = "";
        

[JsonProperty("component_8_flow_rate")]
public string Component8FlowRate { get; set; } = "";
        

[JsonProperty("operation_8_type")]
public PlantEquipmentOperation_ComponentSetpoint_Operation8Type Operation8Type { get; set; } = (PlantEquipmentOperation_ComponentSetpoint_Operation8Type)Enum.Parse(typeof(PlantEquipmentOperation_ComponentSetpoint_Operation8Type), "Cooling");
        

[JsonProperty("equipment_9_object_type")]
public string Equipment9ObjectType { get; set; } = "";
        

[JsonProperty("equipment_9_name")]
public string Equipment9Name { get; set; } = "";
        

[JsonProperty("demand_calculation_9_node_name")]
public string DemandCalculation9NodeName { get; set; } = "";
        

[JsonProperty("setpoint_9_node_name")]
public string Setpoint9NodeName { get; set; } = "";
        

[JsonProperty("component_9_flow_rate")]
public string Component9FlowRate { get; set; } = "";
        

[JsonProperty("operation_9_type")]
public PlantEquipmentOperation_ComponentSetpoint_Operation9Type Operation9Type { get; set; } = (PlantEquipmentOperation_ComponentSetpoint_Operation9Type)Enum.Parse(typeof(PlantEquipmentOperation_ComponentSetpoint_Operation9Type), "Cooling");
        

[JsonProperty("equipment_10_object_type")]
public string Equipment10ObjectType { get; set; } = "";
        

[JsonProperty("equipment_10_name")]
public string Equipment10Name { get; set; } = "";
        

[JsonProperty("demand_calculation_10_node_name")]
public string DemandCalculation10NodeName { get; set; } = "";
        

[JsonProperty("setpoint_10_node_name")]
public string Setpoint10NodeName { get; set; } = "";
        

[JsonProperty("component_10_flow_rate")]
public string Component10FlowRate { get; set; } = "";
        

[JsonProperty("operation_10_type")]
public PlantEquipmentOperation_ComponentSetpoint_Operation10Type Operation10Type { get; set; } = (PlantEquipmentOperation_ComponentSetpoint_Operation10Type)Enum.Parse(typeof(PlantEquipmentOperation_ComponentSetpoint_Operation10Type), "Cooling");
    }
    
    public enum PlantEquipmentOperation_ComponentSetpoint_Operation1Type
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum PlantEquipmentOperation_ComponentSetpoint_Operation2Type
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum PlantEquipmentOperation_ComponentSetpoint_Operation3Type
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum PlantEquipmentOperation_ComponentSetpoint_Operation4Type
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum PlantEquipmentOperation_ComponentSetpoint_Operation5Type
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum PlantEquipmentOperation_ComponentSetpoint_Operation6Type
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum PlantEquipmentOperation_ComponentSetpoint_Operation7Type
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum PlantEquipmentOperation_ComponentSetpoint_Operation8Type
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum PlantEquipmentOperation_ComponentSetpoint_Operation9Type
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum PlantEquipmentOperation_ComponentSetpoint_Operation10Type
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    [Description("Plant equipment operation scheme for simpler input to control thermal (ice) energ" +
        "y storage systems. It replaces a host of setpoint managers with simple, single i" +
        "nput values. For more complex controls, use the ComponentSetpoint scheme.")]
    [JsonObject("PlantEquipmentOperation:ThermalEnergyStorage")]
    public class PlantEquipmentOperation_ThermalEnergyStorage : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("on_peak_schedule")]
public string OnPeakSchedule { get; set; } = "";
        

[JsonProperty("charging_availability_schedule")]
public string ChargingAvailabilitySchedule { get; set; } = "";
        

[Description("Single temperature for chiller outlet when not in cooling season or during on-pea" +
    "k cooling (discharge)")]
[JsonProperty("non_charging_chilled_water_temperature")]
public System.Nullable<float> NonChargingChilledWaterTemperature { get; set; } = null;
        

[Description("Single temperature for chiller outlet when off-peak during cooling season (chargi" +
    "ng)")]
[JsonProperty("charging_chilled_water_temperature")]
public System.Nullable<float> ChargingChilledWaterTemperature { get; set; } = null;
        

[Description("This field is the type of object and should either be a chiller or some ice stora" +
    "ge equipment.")]
[JsonProperty("component_1_object_type")]
public PlantEquipmentOperation_ThermalEnergyStorage_Component1ObjectType Component1ObjectType { get; set; } = (PlantEquipmentOperation_ThermalEnergyStorage_Component1ObjectType)Enum.Parse(typeof(PlantEquipmentOperation_ThermalEnergyStorage_Component1ObjectType), "ChillerAbsorption");
        

[Description("This field is the name of either the chiller or ice storage equipment on the loop" +
    ".")]
[JsonProperty("component_1_name")]
public string Component1Name { get; set; } = "";
        

[Description("This field is the name of the inlet node for the component defined in the two pre" +
    "vious input fields.")]
[JsonProperty("component_1_demand_calculation_node_name")]
public string Component1DemandCalculationNodeName { get; set; } = "";
        

[Description("This field is the name of the outlet node for the component listed above.")]
[JsonProperty("component_1_setpoint_node_name")]
public string Component1SetpointNodeName { get; set; } = "";
        

[Description("This field is the flow rate for the component listed above.")]
[JsonProperty("component_1_flow_rate")]
public string Component1FlowRate { get; set; } = "";
        

[Description("This field is the operation type for the component listed above. For this plant e" +
    "quipment operation scheme, \"Cooling\" should be selected for chiller equipment wh" +
    "ile ice storage equipment should be defined as \"Dual\".")]
[JsonProperty("component_1_operation_type")]
public PlantEquipmentOperation_ThermalEnergyStorage_Component1OperationType Component1OperationType { get; set; } = (PlantEquipmentOperation_ThermalEnergyStorage_Component1OperationType)Enum.Parse(typeof(PlantEquipmentOperation_ThermalEnergyStorage_Component1OperationType), "Cooling");
        

[JsonProperty("component_2_object_type")]
public PlantEquipmentOperation_ThermalEnergyStorage_Component2ObjectType Component2ObjectType { get; set; } = (PlantEquipmentOperation_ThermalEnergyStorage_Component2ObjectType)Enum.Parse(typeof(PlantEquipmentOperation_ThermalEnergyStorage_Component2ObjectType), "ChillerAbsorption");
        

[JsonProperty("component_2_name")]
public string Component2Name { get; set; } = "";
        

[JsonProperty("component_2_demand_calculation_node_name")]
public string Component2DemandCalculationNodeName { get; set; } = "";
        

[JsonProperty("component_2_setpoint_node_name")]
public string Component2SetpointNodeName { get; set; } = "";
        

[JsonProperty("component_2_flow_rate")]
public string Component2FlowRate { get; set; } = "";
        

[JsonProperty("component_2_operation_type")]
public PlantEquipmentOperation_ThermalEnergyStorage_Component2OperationType Component2OperationType { get; set; } = (PlantEquipmentOperation_ThermalEnergyStorage_Component2OperationType)Enum.Parse(typeof(PlantEquipmentOperation_ThermalEnergyStorage_Component2OperationType), "Cooling");
        

[JsonProperty("component_3_object_type")]
public PlantEquipmentOperation_ThermalEnergyStorage_Component3ObjectType Component3ObjectType { get; set; } = (PlantEquipmentOperation_ThermalEnergyStorage_Component3ObjectType)Enum.Parse(typeof(PlantEquipmentOperation_ThermalEnergyStorage_Component3ObjectType), "ChillerAbsorption");
        

[JsonProperty("component_3_name")]
public string Component3Name { get; set; } = "";
        

[JsonProperty("component_3_demand_calculation_node_name")]
public string Component3DemandCalculationNodeName { get; set; } = "";
        

[JsonProperty("component_3_setpoint_node_name")]
public string Component3SetpointNodeName { get; set; } = "";
        

[JsonProperty("component_3_flow_rate")]
public string Component3FlowRate { get; set; } = "";
        

[JsonProperty("component_3_operation_type")]
public PlantEquipmentOperation_ThermalEnergyStorage_Component3OperationType Component3OperationType { get; set; } = (PlantEquipmentOperation_ThermalEnergyStorage_Component3OperationType)Enum.Parse(typeof(PlantEquipmentOperation_ThermalEnergyStorage_Component3OperationType), "Cooling");
        

[JsonProperty("component_4_object_type")]
public PlantEquipmentOperation_ThermalEnergyStorage_Component4ObjectType Component4ObjectType { get; set; } = (PlantEquipmentOperation_ThermalEnergyStorage_Component4ObjectType)Enum.Parse(typeof(PlantEquipmentOperation_ThermalEnergyStorage_Component4ObjectType), "ChillerAbsorption");
        

[JsonProperty("component_4_name")]
public string Component4Name { get; set; } = "";
        

[JsonProperty("component_4_demand_calculation_node_name")]
public string Component4DemandCalculationNodeName { get; set; } = "";
        

[JsonProperty("component_4_setpoint_node_name")]
public string Component4SetpointNodeName { get; set; } = "";
        

[JsonProperty("component_4_flow_rate")]
public string Component4FlowRate { get; set; } = "";
        

[JsonProperty("component_4_operation_type")]
public PlantEquipmentOperation_ThermalEnergyStorage_Component4OperationType Component4OperationType { get; set; } = (PlantEquipmentOperation_ThermalEnergyStorage_Component4OperationType)Enum.Parse(typeof(PlantEquipmentOperation_ThermalEnergyStorage_Component4OperationType), "Cooling");
        

[JsonProperty("component_5_object_type")]
public PlantEquipmentOperation_ThermalEnergyStorage_Component5ObjectType Component5ObjectType { get; set; } = (PlantEquipmentOperation_ThermalEnergyStorage_Component5ObjectType)Enum.Parse(typeof(PlantEquipmentOperation_ThermalEnergyStorage_Component5ObjectType), "ChillerAbsorption");
        

[JsonProperty("component_5_name")]
public string Component5Name { get; set; } = "";
        

[JsonProperty("component_5_demand_calculation_node_name")]
public string Component5DemandCalculationNodeName { get; set; } = "";
        

[JsonProperty("component_5_setpoint_node_name")]
public string Component5SetpointNodeName { get; set; } = "";
        

[JsonProperty("component_5_flow_rate")]
public string Component5FlowRate { get; set; } = "";
        

[JsonProperty("component_5_operation_type")]
public PlantEquipmentOperation_ThermalEnergyStorage_Component5OperationType Component5OperationType { get; set; } = (PlantEquipmentOperation_ThermalEnergyStorage_Component5OperationType)Enum.Parse(typeof(PlantEquipmentOperation_ThermalEnergyStorage_Component5OperationType), "Cooling");
        

[JsonProperty("component_6_object_type")]
public PlantEquipmentOperation_ThermalEnergyStorage_Component6ObjectType Component6ObjectType { get; set; } = (PlantEquipmentOperation_ThermalEnergyStorage_Component6ObjectType)Enum.Parse(typeof(PlantEquipmentOperation_ThermalEnergyStorage_Component6ObjectType), "ChillerAbsorption");
        

[JsonProperty("component_6_name")]
public string Component6Name { get; set; } = "";
        

[JsonProperty("component_6_demand_calculation_node_name")]
public string Component6DemandCalculationNodeName { get; set; } = "";
        

[JsonProperty("component_6_setpoint_node_name")]
public string Component6SetpointNodeName { get; set; } = "";
        

[JsonProperty("component_6_flow_rate")]
public string Component6FlowRate { get; set; } = "";
        

[JsonProperty("component_6_operation_type")]
public PlantEquipmentOperation_ThermalEnergyStorage_Component6OperationType Component6OperationType { get; set; } = (PlantEquipmentOperation_ThermalEnergyStorage_Component6OperationType)Enum.Parse(typeof(PlantEquipmentOperation_ThermalEnergyStorage_Component6OperationType), "Cooling");
        

[JsonProperty("component_7_object_type")]
public PlantEquipmentOperation_ThermalEnergyStorage_Component7ObjectType Component7ObjectType { get; set; } = (PlantEquipmentOperation_ThermalEnergyStorage_Component7ObjectType)Enum.Parse(typeof(PlantEquipmentOperation_ThermalEnergyStorage_Component7ObjectType), "ChillerAbsorption");
        

[JsonProperty("component_7_name")]
public string Component7Name { get; set; } = "";
        

[JsonProperty("component_7_demand_calculation_node_name")]
public string Component7DemandCalculationNodeName { get; set; } = "";
        

[JsonProperty("component_7_setpoint_node_name")]
public string Component7SetpointNodeName { get; set; } = "";
        

[JsonProperty("component_7_flow_rate")]
public string Component7FlowRate { get; set; } = "";
        

[JsonProperty("component_7_operation_type")]
public PlantEquipmentOperation_ThermalEnergyStorage_Component7OperationType Component7OperationType { get; set; } = (PlantEquipmentOperation_ThermalEnergyStorage_Component7OperationType)Enum.Parse(typeof(PlantEquipmentOperation_ThermalEnergyStorage_Component7OperationType), "Cooling");
        

[JsonProperty("component_8_object_type")]
public PlantEquipmentOperation_ThermalEnergyStorage_Component8ObjectType Component8ObjectType { get; set; } = (PlantEquipmentOperation_ThermalEnergyStorage_Component8ObjectType)Enum.Parse(typeof(PlantEquipmentOperation_ThermalEnergyStorage_Component8ObjectType), "ChillerAbsorption");
        

[JsonProperty("component_8_name")]
public string Component8Name { get; set; } = "";
        

[JsonProperty("component_8_demand_calculation_node_name")]
public string Component8DemandCalculationNodeName { get; set; } = "";
        

[JsonProperty("component_8_setpoint_node_name")]
public string Component8SetpointNodeName { get; set; } = "";
        

[JsonProperty("component_8_flow_rate")]
public string Component8FlowRate { get; set; } = "";
        

[JsonProperty("component_8_operation_type")]
public PlantEquipmentOperation_ThermalEnergyStorage_Component8OperationType Component8OperationType { get; set; } = (PlantEquipmentOperation_ThermalEnergyStorage_Component8OperationType)Enum.Parse(typeof(PlantEquipmentOperation_ThermalEnergyStorage_Component8OperationType), "Cooling");
        

[JsonProperty("component_9_object_type")]
public PlantEquipmentOperation_ThermalEnergyStorage_Component9ObjectType Component9ObjectType { get; set; } = (PlantEquipmentOperation_ThermalEnergyStorage_Component9ObjectType)Enum.Parse(typeof(PlantEquipmentOperation_ThermalEnergyStorage_Component9ObjectType), "ChillerAbsorption");
        

[JsonProperty("component_9_name")]
public string Component9Name { get; set; } = "";
        

[JsonProperty("component_9_demand_calculation_node_name")]
public string Component9DemandCalculationNodeName { get; set; } = "";
        

[JsonProperty("component_9_setpoint_node_name")]
public string Component9SetpointNodeName { get; set; } = "";
        

[JsonProperty("component_9_flow_rate")]
public string Component9FlowRate { get; set; } = "";
        

[JsonProperty("component_9_operation_type")]
public PlantEquipmentOperation_ThermalEnergyStorage_Component9OperationType Component9OperationType { get; set; } = (PlantEquipmentOperation_ThermalEnergyStorage_Component9OperationType)Enum.Parse(typeof(PlantEquipmentOperation_ThermalEnergyStorage_Component9OperationType), "Cooling");
        

[JsonProperty("component_10_object_type")]
public PlantEquipmentOperation_ThermalEnergyStorage_Component10ObjectType Component10ObjectType { get; set; } = (PlantEquipmentOperation_ThermalEnergyStorage_Component10ObjectType)Enum.Parse(typeof(PlantEquipmentOperation_ThermalEnergyStorage_Component10ObjectType), "ChillerAbsorption");
        

[JsonProperty("component_10_name")]
public string Component10Name { get; set; } = "";
        

[JsonProperty("component_10_demand_calculation_node_name")]
public string Component10DemandCalculationNodeName { get; set; } = "";
        

[JsonProperty("component_10_setpoint_node_name")]
public string Component10SetpointNodeName { get; set; } = "";
        

[JsonProperty("component_10_flow_rate")]
public string Component10FlowRate { get; set; } = "";
        

[JsonProperty("component_10_operation_type")]
public PlantEquipmentOperation_ThermalEnergyStorage_Component10OperationType Component10OperationType { get; set; } = (PlantEquipmentOperation_ThermalEnergyStorage_Component10OperationType)Enum.Parse(typeof(PlantEquipmentOperation_ThermalEnergyStorage_Component10OperationType), "Cooling");
    }
    
    public enum PlantEquipmentOperation_ThermalEnergyStorage_Component1ObjectType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
        
        [JsonProperty("ThermalStorage:Ice:Detailed")]
        ThermalStorageIceDetailed = 8,
        
        [JsonProperty("ThermalStorage:Ice:Simple")]
        ThermalStorageIceSimple = 9,
    }
    
    public enum PlantEquipmentOperation_ThermalEnergyStorage_Component1OperationType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum PlantEquipmentOperation_ThermalEnergyStorage_Component2ObjectType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
        
        [JsonProperty("ThermalStorage:Ice:Detailed")]
        ThermalStorageIceDetailed = 8,
        
        [JsonProperty("ThermalStorage:Ice:Simple")]
        ThermalStorageIceSimple = 9,
    }
    
    public enum PlantEquipmentOperation_ThermalEnergyStorage_Component2OperationType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum PlantEquipmentOperation_ThermalEnergyStorage_Component3ObjectType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
        
        [JsonProperty("ThermalStorage:Ice:Detailed")]
        ThermalStorageIceDetailed = 8,
        
        [JsonProperty("ThermalStorage:Ice:Simple")]
        ThermalStorageIceSimple = 9,
    }
    
    public enum PlantEquipmentOperation_ThermalEnergyStorage_Component3OperationType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum PlantEquipmentOperation_ThermalEnergyStorage_Component4ObjectType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
        
        [JsonProperty("ThermalStorage:Ice:Detailed")]
        ThermalStorageIceDetailed = 8,
        
        [JsonProperty("ThermalStorage:Ice:Simple")]
        ThermalStorageIceSimple = 9,
    }
    
    public enum PlantEquipmentOperation_ThermalEnergyStorage_Component4OperationType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum PlantEquipmentOperation_ThermalEnergyStorage_Component5ObjectType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
        
        [JsonProperty("ThermalStorage:Ice:Detailed")]
        ThermalStorageIceDetailed = 8,
        
        [JsonProperty("ThermalStorage:Ice:Simple")]
        ThermalStorageIceSimple = 9,
    }
    
    public enum PlantEquipmentOperation_ThermalEnergyStorage_Component5OperationType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum PlantEquipmentOperation_ThermalEnergyStorage_Component6ObjectType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
        
        [JsonProperty("ThermalStorage:Ice:Detailed")]
        ThermalStorageIceDetailed = 8,
        
        [JsonProperty("ThermalStorage:Ice:Simple")]
        ThermalStorageIceSimple = 9,
    }
    
    public enum PlantEquipmentOperation_ThermalEnergyStorage_Component6OperationType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum PlantEquipmentOperation_ThermalEnergyStorage_Component7ObjectType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
        
        [JsonProperty("ThermalStorage:Ice:Detailed")]
        ThermalStorageIceDetailed = 8,
        
        [JsonProperty("ThermalStorage:Ice:Simple")]
        ThermalStorageIceSimple = 9,
    }
    
    public enum PlantEquipmentOperation_ThermalEnergyStorage_Component7OperationType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum PlantEquipmentOperation_ThermalEnergyStorage_Component8ObjectType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
        
        [JsonProperty("ThermalStorage:Ice:Detailed")]
        ThermalStorageIceDetailed = 8,
        
        [JsonProperty("ThermalStorage:Ice:Simple")]
        ThermalStorageIceSimple = 9,
    }
    
    public enum PlantEquipmentOperation_ThermalEnergyStorage_Component8OperationType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum PlantEquipmentOperation_ThermalEnergyStorage_Component9ObjectType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
        
        [JsonProperty("ThermalStorage:Ice:Detailed")]
        ThermalStorageIceDetailed = 8,
        
        [JsonProperty("ThermalStorage:Ice:Simple")]
        ThermalStorageIceSimple = 9,
    }
    
    public enum PlantEquipmentOperation_ThermalEnergyStorage_Component9OperationType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum PlantEquipmentOperation_ThermalEnergyStorage_Component10ObjectType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
        
        [JsonProperty("ThermalStorage:Ice:Detailed")]
        ThermalStorageIceDetailed = 8,
        
        [JsonProperty("ThermalStorage:Ice:Simple")]
        ThermalStorageIceSimple = 9,
    }
    
    public enum PlantEquipmentOperation_ThermalEnergyStorage_Component10OperationType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    [Description(@"Plant equipment operation scheme for outdoor dry-bulb temperature difference operation. Specifies one or more groups of equipment which are available to operate for successive ranges based the difference between a reference node temperature and the outdoor dry-bulb temperature.")]
    [JsonObject("PlantEquipmentOperation:OutdoorDryBulbDifference")]
    public class PlantEquipmentOperation_OutdoorDryBulbDifference : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("reference_temperature_node_name")]
public string ReferenceTemperatureNodeName { get; set; } = "";
        

[JsonProperty("dry_bulb_temperature_difference_range_1_lower_limit")]
public System.Nullable<float> DryBulbTemperatureDifferenceRange1LowerLimit { get; set; } = null;
        

[JsonProperty("dry_bulb_temperature_difference_range_1_upper_limit")]
public System.Nullable<float> DryBulbTemperatureDifferenceRange1UpperLimit { get; set; } = null;
        

[JsonProperty("range_1_equipment_list_name")]
public string Range1EquipmentListName { get; set; } = "";
        

[JsonProperty("dry_bulb_temperature_difference_range_2_lower_limit")]
public System.Nullable<float> DryBulbTemperatureDifferenceRange2LowerLimit { get; set; } = null;
        

[JsonProperty("dry_bulb_temperature_difference_range_2_upper_limit")]
public System.Nullable<float> DryBulbTemperatureDifferenceRange2UpperLimit { get; set; } = null;
        

[JsonProperty("range_2_equipment_list_name")]
public string Range2EquipmentListName { get; set; } = "";
        

[JsonProperty("dry_bulb_temperature_difference_range_3_lower_limit")]
public System.Nullable<float> DryBulbTemperatureDifferenceRange3LowerLimit { get; set; } = null;
        

[JsonProperty("dry_bulb_temperature_difference_range_3_upper_limit")]
public System.Nullable<float> DryBulbTemperatureDifferenceRange3UpperLimit { get; set; } = null;
        

[JsonProperty("range_3_equipment_list_name")]
public string Range3EquipmentListName { get; set; } = "";
        

[JsonProperty("dry_bulb_temperature_difference_range_4_lower_limit")]
public System.Nullable<float> DryBulbTemperatureDifferenceRange4LowerLimit { get; set; } = null;
        

[JsonProperty("dry_bulb_temperature_difference_range_4_upper_limit")]
public System.Nullable<float> DryBulbTemperatureDifferenceRange4UpperLimit { get; set; } = null;
        

[JsonProperty("range_4_equipment_list_name")]
public string Range4EquipmentListName { get; set; } = "";
        

[JsonProperty("dry_bulb_temperature_difference_range_5_lower_limit")]
public System.Nullable<float> DryBulbTemperatureDifferenceRange5LowerLimit { get; set; } = null;
        

[JsonProperty("dry_bulb_temperature_difference_range_5_upper_limit")]
public System.Nullable<float> DryBulbTemperatureDifferenceRange5UpperLimit { get; set; } = null;
        

[JsonProperty("range_5_equipment_list_name")]
public string Range5EquipmentListName { get; set; } = "";
        

[JsonProperty("dry_bulb_temperature_difference_range_6_lower_limit")]
public System.Nullable<float> DryBulbTemperatureDifferenceRange6LowerLimit { get; set; } = null;
        

[JsonProperty("dry_bulb_temperature_difference_range_6_upper_limit")]
public System.Nullable<float> DryBulbTemperatureDifferenceRange6UpperLimit { get; set; } = null;
        

[JsonProperty("range_6_equipment_list_name")]
public string Range6EquipmentListName { get; set; } = "";
        

[JsonProperty("dry_bulb_temperature_difference_range_7_lower_limit")]
public System.Nullable<float> DryBulbTemperatureDifferenceRange7LowerLimit { get; set; } = null;
        

[JsonProperty("dry_bulb_temperature_difference_range_7_upper_limit")]
public System.Nullable<float> DryBulbTemperatureDifferenceRange7UpperLimit { get; set; } = null;
        

[JsonProperty("range_7_equipment_list_name")]
public string Range7EquipmentListName { get; set; } = "";
        

[JsonProperty("dry_bulb_temperature_difference_range_8_lower_limit")]
public System.Nullable<float> DryBulbTemperatureDifferenceRange8LowerLimit { get; set; } = null;
        

[JsonProperty("dry_bulb_temperature_difference_range_8_upper_limit")]
public System.Nullable<float> DryBulbTemperatureDifferenceRange8UpperLimit { get; set; } = null;
        

[JsonProperty("range_8_equipment_list_name")]
public string Range8EquipmentListName { get; set; } = "";
        

[JsonProperty("dry_bulb_temperature_difference_range_9_lower_limit")]
public System.Nullable<float> DryBulbTemperatureDifferenceRange9LowerLimit { get; set; } = null;
        

[JsonProperty("dry_bulb_temperature_difference_range_9_upper_limit")]
public System.Nullable<float> DryBulbTemperatureDifferenceRange9UpperLimit { get; set; } = null;
        

[JsonProperty("range_9_equipment_list_name")]
public string Range9EquipmentListName { get; set; } = "";
        

[JsonProperty("dry_bulb_temperature_difference_range_10_lower_limit")]
public System.Nullable<float> DryBulbTemperatureDifferenceRange10LowerLimit { get; set; } = null;
        

[JsonProperty("dry_bulb_temperature_difference_range_10_upper_limit")]
public System.Nullable<float> DryBulbTemperatureDifferenceRange10UpperLimit { get; set; } = null;
        

[JsonProperty("range_10_equipment_list_name")]
public string Range10EquipmentListName { get; set; } = "";
    }
    
    [Description(@"Plant equipment operation scheme for outdoor wet-bulb temperature difference operation. Specifies one or more groups of equipment which are available to operate for successive ranges based the difference between a reference node temperature and the outdoor wet-bulb temperature.")]
    [JsonObject("PlantEquipmentOperation:OutdoorWetBulbDifference")]
    public class PlantEquipmentOperation_OutdoorWetBulbDifference : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("reference_temperature_node_name")]
public string ReferenceTemperatureNodeName { get; set; } = "";
        

[JsonProperty("wet_bulb_temperature_difference_range_1_lower_limit")]
public System.Nullable<float> WetBulbTemperatureDifferenceRange1LowerLimit { get; set; } = null;
        

[JsonProperty("wet_bulb_temperature_difference_range_1_upper_limit")]
public System.Nullable<float> WetBulbTemperatureDifferenceRange1UpperLimit { get; set; } = null;
        

[JsonProperty("range_1_equipment_list_name")]
public string Range1EquipmentListName { get; set; } = "";
        

[JsonProperty("wet_bulb_temperature_difference_range_2_lower_limit")]
public System.Nullable<float> WetBulbTemperatureDifferenceRange2LowerLimit { get; set; } = null;
        

[JsonProperty("wet_bulb_temperature_difference_range_2_upper_limit")]
public System.Nullable<float> WetBulbTemperatureDifferenceRange2UpperLimit { get; set; } = null;
        

[JsonProperty("range_2_equipment_list_name")]
public string Range2EquipmentListName { get; set; } = "";
        

[JsonProperty("wet_bulb_temperature_difference_range_3_lower_limit")]
public System.Nullable<float> WetBulbTemperatureDifferenceRange3LowerLimit { get; set; } = null;
        

[JsonProperty("wet_bulb_temperature_difference_range_3_upper_limit")]
public System.Nullable<float> WetBulbTemperatureDifferenceRange3UpperLimit { get; set; } = null;
        

[JsonProperty("range_3_equipment_list_name")]
public string Range3EquipmentListName { get; set; } = "";
        

[JsonProperty("wet_bulb_temperature_difference_range_4_lower_limit")]
public System.Nullable<float> WetBulbTemperatureDifferenceRange4LowerLimit { get; set; } = null;
        

[JsonProperty("wet_bulb_temperature_difference_range_4_upper_limit")]
public System.Nullable<float> WetBulbTemperatureDifferenceRange4UpperLimit { get; set; } = null;
        

[JsonProperty("range_4_equipment_list_name")]
public string Range4EquipmentListName { get; set; } = "";
        

[JsonProperty("wet_bulb_temperature_difference_range_5_lower_limit")]
public System.Nullable<float> WetBulbTemperatureDifferenceRange5LowerLimit { get; set; } = null;
        

[JsonProperty("wet_bulb_temperature_difference_range_5_upper_limit")]
public System.Nullable<float> WetBulbTemperatureDifferenceRange5UpperLimit { get; set; } = null;
        

[JsonProperty("range_5_equipment_list_name")]
public string Range5EquipmentListName { get; set; } = "";
        

[JsonProperty("wet_bulb_temperature_difference_range_6_lower_limit")]
public System.Nullable<float> WetBulbTemperatureDifferenceRange6LowerLimit { get; set; } = null;
        

[JsonProperty("wet_bulb_temperature_difference_range_6_upper_limit")]
public System.Nullable<float> WetBulbTemperatureDifferenceRange6UpperLimit { get; set; } = null;
        

[JsonProperty("range_6_equipment_list_name")]
public string Range6EquipmentListName { get; set; } = "";
        

[JsonProperty("wet_bulb_temperature_difference_range_7_lower_limit")]
public System.Nullable<float> WetBulbTemperatureDifferenceRange7LowerLimit { get; set; } = null;
        

[JsonProperty("wet_bulb_temperature_difference_range_7_upper_limit")]
public System.Nullable<float> WetBulbTemperatureDifferenceRange7UpperLimit { get; set; } = null;
        

[JsonProperty("range_7_equipment_list_name")]
public string Range7EquipmentListName { get; set; } = "";
        

[JsonProperty("wet_bulb_temperature_difference_range_8_lower_limit")]
public System.Nullable<float> WetBulbTemperatureDifferenceRange8LowerLimit { get; set; } = null;
        

[JsonProperty("wet_bulb_temperature_difference_range_8_upper_limit")]
public System.Nullable<float> WetBulbTemperatureDifferenceRange8UpperLimit { get; set; } = null;
        

[JsonProperty("range_8_equipment_list_name")]
public string Range8EquipmentListName { get; set; } = "";
        

[JsonProperty("wet_bulb_temperature_difference_range_9_lower_limit")]
public System.Nullable<float> WetBulbTemperatureDifferenceRange9LowerLimit { get; set; } = null;
        

[JsonProperty("wet_bulb_temperature_difference_range_9_upper_limit")]
public System.Nullable<float> WetBulbTemperatureDifferenceRange9UpperLimit { get; set; } = null;
        

[JsonProperty("range_9_equipment_list_name")]
public string Range9EquipmentListName { get; set; } = "";
        

[JsonProperty("wet_bulb_temperature_difference_range_10_lower_limit")]
public System.Nullable<float> WetBulbTemperatureDifferenceRange10LowerLimit { get; set; } = null;
        

[JsonProperty("wet_bulb_temperature_difference_range_10_upper_limit")]
public System.Nullable<float> WetBulbTemperatureDifferenceRange10UpperLimit { get; set; } = null;
        

[JsonProperty("range_10_equipment_list_name")]
public string Range10EquipmentListName { get; set; } = "";
    }
    
    [Description(@"Plant equipment operation scheme for outdoor dewpoint temperature difference operation. Specifies one or more groups of equipment which are available to operate for successive ranges based the difference between a reference node temperature and the outdoor dewpoint temperature.")]
    [JsonObject("PlantEquipmentOperation:OutdoorDewpointDifference")]
    public class PlantEquipmentOperation_OutdoorDewpointDifference : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("reference_temperature_node_name")]
public string ReferenceTemperatureNodeName { get; set; } = "";
        

[JsonProperty("dewpoint_temperature_difference_range_1_lower_limit")]
public System.Nullable<float> DewpointTemperatureDifferenceRange1LowerLimit { get; set; } = null;
        

[JsonProperty("dewpoint_temperature_difference_range_1_upper_limit")]
public System.Nullable<float> DewpointTemperatureDifferenceRange1UpperLimit { get; set; } = null;
        

[JsonProperty("range_1_equipment_list_name")]
public string Range1EquipmentListName { get; set; } = "";
        

[JsonProperty("dewpoint_temperature_difference_range_2_lower_limit")]
public System.Nullable<float> DewpointTemperatureDifferenceRange2LowerLimit { get; set; } = null;
        

[JsonProperty("dewpoint_temperature_difference_range_2_upper_limit")]
public System.Nullable<float> DewpointTemperatureDifferenceRange2UpperLimit { get; set; } = null;
        

[JsonProperty("range_2_equipment_list_name")]
public string Range2EquipmentListName { get; set; } = "";
        

[JsonProperty("dewpoint_temperature_difference_range_3_lower_limit")]
public System.Nullable<float> DewpointTemperatureDifferenceRange3LowerLimit { get; set; } = null;
        

[JsonProperty("dewpoint_temperature_difference_range_3_upper_limit")]
public System.Nullable<float> DewpointTemperatureDifferenceRange3UpperLimit { get; set; } = null;
        

[JsonProperty("range_3_equipment_list_name")]
public string Range3EquipmentListName { get; set; } = "";
        

[JsonProperty("dewpoint_temperature_difference_range_4_lower_limit")]
public System.Nullable<float> DewpointTemperatureDifferenceRange4LowerLimit { get; set; } = null;
        

[JsonProperty("dewpoint_temperature_difference_range_4_upper_limit")]
public System.Nullable<float> DewpointTemperatureDifferenceRange4UpperLimit { get; set; } = null;
        

[JsonProperty("range_4_equipment_list_name")]
public string Range4EquipmentListName { get; set; } = "";
        

[JsonProperty("dewpoint_temperature_difference_range_5_lower_limit")]
public System.Nullable<float> DewpointTemperatureDifferenceRange5LowerLimit { get; set; } = null;
        

[JsonProperty("dewpoint_temperature_difference_range_5_upper_limit")]
public System.Nullable<float> DewpointTemperatureDifferenceRange5UpperLimit { get; set; } = null;
        

[JsonProperty("range_5_equipment_list_name")]
public string Range5EquipmentListName { get; set; } = "";
        

[JsonProperty("dewpoint_temperature_difference_range_6_lower_limit")]
public System.Nullable<float> DewpointTemperatureDifferenceRange6LowerLimit { get; set; } = null;
        

[JsonProperty("dewpoint_temperature_difference_range_6_upper_limit")]
public System.Nullable<float> DewpointTemperatureDifferenceRange6UpperLimit { get; set; } = null;
        

[JsonProperty("range_6_equipment_list_name")]
public string Range6EquipmentListName { get; set; } = "";
        

[JsonProperty("dewpoint_temperature_difference_range_7_lower_limit")]
public System.Nullable<float> DewpointTemperatureDifferenceRange7LowerLimit { get; set; } = null;
        

[JsonProperty("dewpoint_temperature_difference_range_7_upper_limit")]
public System.Nullable<float> DewpointTemperatureDifferenceRange7UpperLimit { get; set; } = null;
        

[JsonProperty("range_7_equipment_list_name")]
public string Range7EquipmentListName { get; set; } = "";
        

[JsonProperty("dewpoint_temperature_difference_range_8_lower_limit")]
public System.Nullable<float> DewpointTemperatureDifferenceRange8LowerLimit { get; set; } = null;
        

[JsonProperty("dewpoint_temperature_difference_range_8_upper_limit")]
public System.Nullable<float> DewpointTemperatureDifferenceRange8UpperLimit { get; set; } = null;
        

[JsonProperty("range_8_equipment_list_name")]
public string Range8EquipmentListName { get; set; } = "";
        

[JsonProperty("dewpoint_temperature_difference_range_9_lower_limit")]
public System.Nullable<float> DewpointTemperatureDifferenceRange9LowerLimit { get; set; } = null;
        

[JsonProperty("dewpoint_temperature_difference_range_9_upper_limit")]
public System.Nullable<float> DewpointTemperatureDifferenceRange9UpperLimit { get; set; } = null;
        

[JsonProperty("range_9_equipment_list_name")]
public string Range9EquipmentListName { get; set; } = "";
        

[JsonProperty("dewpoint_temperature_difference_range_10_lower_limit")]
public System.Nullable<float> DewpointTemperatureDifferenceRange10LowerLimit { get; set; } = null;
        

[JsonProperty("dewpoint_temperature_difference_range_10_upper_limit")]
public System.Nullable<float> DewpointTemperatureDifferenceRange10UpperLimit { get; set; } = null;
        

[JsonProperty("range_10_equipment_list_name")]
public string Range10EquipmentListName { get; set; } = "";
    }
    
    [Description(@"Operation schemes are listed in ""priority"" order. Note that each scheme must address the entire load and/or condition ranges for the simulation. The actual one selected for use will be the first that is ""Scheduled"" on. That is, if control scheme 1 is not ""on"" and control scheme 2 is -- then control scheme 2 is selected. Only plant equipment should be listed on a Control Scheme for this item.")]
    [JsonObject("PlantEquipmentOperationSchemes")]
    public class PlantEquipmentOperationSchemes : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_scheme_1_object_type")]
public PlantEquipmentOperationSchemes_ControlScheme1ObjectType ControlScheme1ObjectType { get; set; } = (PlantEquipmentOperationSchemes_ControlScheme1ObjectType)Enum.Parse(typeof(PlantEquipmentOperationSchemes_ControlScheme1ObjectType), "PlantEquipmentOperationComponentSetpoint");
        

[JsonProperty("control_scheme_1_name")]
public string ControlScheme1Name { get; set; } = "";
        

[JsonProperty("control_scheme_1_schedule_name")]
public string ControlScheme1ScheduleName { get; set; } = "";
        

[JsonProperty("control_scheme_2_object_type")]
public PlantEquipmentOperationSchemes_ControlScheme2ObjectType ControlScheme2ObjectType { get; set; } = (PlantEquipmentOperationSchemes_ControlScheme2ObjectType)Enum.Parse(typeof(PlantEquipmentOperationSchemes_ControlScheme2ObjectType), "PlantEquipmentOperationComponentSetpoint");
        

[JsonProperty("control_scheme_2_name")]
public string ControlScheme2Name { get; set; } = "";
        

[JsonProperty("control_scheme_2_schedule_name")]
public string ControlScheme2ScheduleName { get; set; } = "";
        

[JsonProperty("control_scheme_3_object_type")]
public PlantEquipmentOperationSchemes_ControlScheme3ObjectType ControlScheme3ObjectType { get; set; } = (PlantEquipmentOperationSchemes_ControlScheme3ObjectType)Enum.Parse(typeof(PlantEquipmentOperationSchemes_ControlScheme3ObjectType), "PlantEquipmentOperationComponentSetpoint");
        

[JsonProperty("control_scheme_3_name")]
public string ControlScheme3Name { get; set; } = "";
        

[JsonProperty("control_scheme_3_schedule_name")]
public string ControlScheme3ScheduleName { get; set; } = "";
        

[JsonProperty("control_scheme_4_object_type")]
public PlantEquipmentOperationSchemes_ControlScheme4ObjectType ControlScheme4ObjectType { get; set; } = (PlantEquipmentOperationSchemes_ControlScheme4ObjectType)Enum.Parse(typeof(PlantEquipmentOperationSchemes_ControlScheme4ObjectType), "PlantEquipmentOperationComponentSetpoint");
        

[JsonProperty("control_scheme_4_name")]
public string ControlScheme4Name { get; set; } = "";
        

[JsonProperty("control_scheme_4_schedule_name")]
public string ControlScheme4ScheduleName { get; set; } = "";
        

[JsonProperty("control_scheme_5_object_type")]
public PlantEquipmentOperationSchemes_ControlScheme5ObjectType ControlScheme5ObjectType { get; set; } = (PlantEquipmentOperationSchemes_ControlScheme5ObjectType)Enum.Parse(typeof(PlantEquipmentOperationSchemes_ControlScheme5ObjectType), "PlantEquipmentOperationComponentSetpoint");
        

[JsonProperty("control_scheme_5_name")]
public string ControlScheme5Name { get; set; } = "";
        

[JsonProperty("control_scheme_5_schedule_name")]
public string ControlScheme5ScheduleName { get; set; } = "";
        

[JsonProperty("control_scheme_6_object_type")]
public PlantEquipmentOperationSchemes_ControlScheme6ObjectType ControlScheme6ObjectType { get; set; } = (PlantEquipmentOperationSchemes_ControlScheme6ObjectType)Enum.Parse(typeof(PlantEquipmentOperationSchemes_ControlScheme6ObjectType), "PlantEquipmentOperationComponentSetpoint");
        

[JsonProperty("control_scheme_6_name")]
public string ControlScheme6Name { get; set; } = "";
        

[JsonProperty("control_scheme_6_schedule_name")]
public string ControlScheme6ScheduleName { get; set; } = "";
        

[JsonProperty("control_scheme_7_object_type")]
public PlantEquipmentOperationSchemes_ControlScheme7ObjectType ControlScheme7ObjectType { get; set; } = (PlantEquipmentOperationSchemes_ControlScheme7ObjectType)Enum.Parse(typeof(PlantEquipmentOperationSchemes_ControlScheme7ObjectType), "PlantEquipmentOperationComponentSetpoint");
        

[JsonProperty("control_scheme_7_name")]
public string ControlScheme7Name { get; set; } = "";
        

[JsonProperty("control_scheme_7_schedule_name")]
public string ControlScheme7ScheduleName { get; set; } = "";
        

[JsonProperty("control_scheme_8_object_type")]
public PlantEquipmentOperationSchemes_ControlScheme8ObjectType ControlScheme8ObjectType { get; set; } = (PlantEquipmentOperationSchemes_ControlScheme8ObjectType)Enum.Parse(typeof(PlantEquipmentOperationSchemes_ControlScheme8ObjectType), "PlantEquipmentOperationComponentSetpoint");
        

[JsonProperty("control_scheme_8_name")]
public string ControlScheme8Name { get; set; } = "";
        

[JsonProperty("control_scheme_8_schedule_name")]
public string ControlScheme8ScheduleName { get; set; } = "";
    }
    
    public enum PlantEquipmentOperationSchemes_ControlScheme1ObjectType
    {
        
        [JsonProperty("PlantEquipmentOperation:ComponentSetpoint")]
        PlantEquipmentOperationComponentSetpoint = 0,
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 8,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 9,
        
        [JsonProperty("PlantEquipmentOperation:ThermalEnergyStorage")]
        PlantEquipmentOperationThermalEnergyStorage = 10,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 11,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 12,
    }
    
    public enum PlantEquipmentOperationSchemes_ControlScheme2ObjectType
    {
        
        [JsonProperty("PlantEquipmentOperation:ComponentSetpoint")]
        PlantEquipmentOperationComponentSetpoint = 0,
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 8,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 9,
        
        [JsonProperty("PlantEquipmentOperation:ThermalEnergyStorage")]
        PlantEquipmentOperationThermalEnergyStorage = 10,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 11,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 12,
    }
    
    public enum PlantEquipmentOperationSchemes_ControlScheme3ObjectType
    {
        
        [JsonProperty("PlantEquipmentOperation:ComponentSetpoint")]
        PlantEquipmentOperationComponentSetpoint = 0,
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 8,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 9,
        
        [JsonProperty("PlantEquipmentOperation:ThermalEnergyStorage")]
        PlantEquipmentOperationThermalEnergyStorage = 10,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 11,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 12,
    }
    
    public enum PlantEquipmentOperationSchemes_ControlScheme4ObjectType
    {
        
        [JsonProperty("PlantEquipmentOperation:ComponentSetpoint")]
        PlantEquipmentOperationComponentSetpoint = 0,
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 8,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 9,
        
        [JsonProperty("PlantEquipmentOperation:ThermalEnergyStorage")]
        PlantEquipmentOperationThermalEnergyStorage = 10,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 11,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 12,
    }
    
    public enum PlantEquipmentOperationSchemes_ControlScheme5ObjectType
    {
        
        [JsonProperty("PlantEquipmentOperation:ComponentSetpoint")]
        PlantEquipmentOperationComponentSetpoint = 0,
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 8,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 9,
        
        [JsonProperty("PlantEquipmentOperation:ThermalEnergyStorage")]
        PlantEquipmentOperationThermalEnergyStorage = 10,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 11,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 12,
    }
    
    public enum PlantEquipmentOperationSchemes_ControlScheme6ObjectType
    {
        
        [JsonProperty("PlantEquipmentOperation:ComponentSetpoint")]
        PlantEquipmentOperationComponentSetpoint = 0,
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 8,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 9,
        
        [JsonProperty("PlantEquipmentOperation:ThermalEnergyStorage")]
        PlantEquipmentOperationThermalEnergyStorage = 10,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 11,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 12,
    }
    
    public enum PlantEquipmentOperationSchemes_ControlScheme7ObjectType
    {
        
        [JsonProperty("PlantEquipmentOperation:ComponentSetpoint")]
        PlantEquipmentOperationComponentSetpoint = 0,
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 8,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 9,
        
        [JsonProperty("PlantEquipmentOperation:ThermalEnergyStorage")]
        PlantEquipmentOperationThermalEnergyStorage = 10,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 11,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 12,
    }
    
    public enum PlantEquipmentOperationSchemes_ControlScheme8ObjectType
    {
        
        [JsonProperty("PlantEquipmentOperation:ComponentSetpoint")]
        PlantEquipmentOperationComponentSetpoint = 0,
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 8,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 9,
        
        [JsonProperty("PlantEquipmentOperation:ThermalEnergyStorage")]
        PlantEquipmentOperationThermalEnergyStorage = 10,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 11,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 12,
    }
    
    [Description(@"Operation schemes are listed in ""priority"" order. Note that each scheme must address the entire load and/or condition ranges for the simulation. The actual one selected for use will be the first that is ""Scheduled"" on. That is, if control scheme 1 is not ""on"" and control scheme 2 is -- then control scheme 2 is selected. Only condenser equipment should be listed on a Control Scheme for this item.")]
    [JsonObject("CondenserEquipmentOperationSchemes")]
    public class CondenserEquipmentOperationSchemes : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_scheme_1_object_type")]
public CondenserEquipmentOperationSchemes_ControlScheme1ObjectType ControlScheme1ObjectType { get; set; } = (CondenserEquipmentOperationSchemes_ControlScheme1ObjectType)Enum.Parse(typeof(CondenserEquipmentOperationSchemes_ControlScheme1ObjectType), "PlantEquipmentOperationCoolingLoad");
        

[JsonProperty("control_scheme_1_name")]
public string ControlScheme1Name { get; set; } = "";
        

[JsonProperty("control_scheme_1_schedule_name")]
public string ControlScheme1ScheduleName { get; set; } = "";
        

[JsonProperty("control_scheme_2_object_type")]
public CondenserEquipmentOperationSchemes_ControlScheme2ObjectType ControlScheme2ObjectType { get; set; } = (CondenserEquipmentOperationSchemes_ControlScheme2ObjectType)Enum.Parse(typeof(CondenserEquipmentOperationSchemes_ControlScheme2ObjectType), "PlantEquipmentOperationCoolingLoad");
        

[JsonProperty("control_scheme_2_name")]
public string ControlScheme2Name { get; set; } = "";
        

[JsonProperty("control_scheme_2_schedule_name")]
public string ControlScheme2ScheduleName { get; set; } = "";
        

[JsonProperty("control_scheme_3_object_type")]
public CondenserEquipmentOperationSchemes_ControlScheme3ObjectType ControlScheme3ObjectType { get; set; } = (CondenserEquipmentOperationSchemes_ControlScheme3ObjectType)Enum.Parse(typeof(CondenserEquipmentOperationSchemes_ControlScheme3ObjectType), "PlantEquipmentOperationCoolingLoad");
        

[JsonProperty("control_scheme_3_name")]
public string ControlScheme3Name { get; set; } = "";
        

[JsonProperty("control_scheme_3_schedule_name")]
public string ControlScheme3ScheduleName { get; set; } = "";
        

[JsonProperty("control_scheme_4_object_type")]
public CondenserEquipmentOperationSchemes_ControlScheme4ObjectType ControlScheme4ObjectType { get; set; } = (CondenserEquipmentOperationSchemes_ControlScheme4ObjectType)Enum.Parse(typeof(CondenserEquipmentOperationSchemes_ControlScheme4ObjectType), "PlantEquipmentOperationCoolingLoad");
        

[JsonProperty("control_scheme_4_name")]
public string ControlScheme4Name { get; set; } = "";
        

[JsonProperty("control_scheme_4_schedule_name")]
public string ControlScheme4ScheduleName { get; set; } = "";
        

[JsonProperty("control_scheme_5_object_type")]
public CondenserEquipmentOperationSchemes_ControlScheme5ObjectType ControlScheme5ObjectType { get; set; } = (CondenserEquipmentOperationSchemes_ControlScheme5ObjectType)Enum.Parse(typeof(CondenserEquipmentOperationSchemes_ControlScheme5ObjectType), "PlantEquipmentOperationCoolingLoad");
        

[JsonProperty("control_scheme_5_name")]
public string ControlScheme5Name { get; set; } = "";
        

[JsonProperty("control_scheme_5_schedule_name")]
public string ControlScheme5ScheduleName { get; set; } = "";
        

[JsonProperty("control_scheme_6_object_type")]
public CondenserEquipmentOperationSchemes_ControlScheme6ObjectType ControlScheme6ObjectType { get; set; } = (CondenserEquipmentOperationSchemes_ControlScheme6ObjectType)Enum.Parse(typeof(CondenserEquipmentOperationSchemes_ControlScheme6ObjectType), "PlantEquipmentOperationCoolingLoad");
        

[JsonProperty("control_scheme_6_name")]
public string ControlScheme6Name { get; set; } = "";
        

[JsonProperty("control_scheme_6_schedule_name")]
public string ControlScheme6ScheduleName { get; set; } = "";
        

[JsonProperty("control_scheme_7_object_type")]
public CondenserEquipmentOperationSchemes_ControlScheme7ObjectType ControlScheme7ObjectType { get; set; } = (CondenserEquipmentOperationSchemes_ControlScheme7ObjectType)Enum.Parse(typeof(CondenserEquipmentOperationSchemes_ControlScheme7ObjectType), "PlantEquipmentOperationCoolingLoad");
        

[JsonProperty("control_scheme_7_name")]
public string ControlScheme7Name { get; set; } = "";
        

[JsonProperty("control_scheme_7_schedule_name")]
public string ControlScheme7ScheduleName { get; set; } = "";
        

[JsonProperty("control_scheme_8_object_type")]
public CondenserEquipmentOperationSchemes_ControlScheme8ObjectType ControlScheme8ObjectType { get; set; } = (CondenserEquipmentOperationSchemes_ControlScheme8ObjectType)Enum.Parse(typeof(CondenserEquipmentOperationSchemes_ControlScheme8ObjectType), "PlantEquipmentOperationCoolingLoad");
        

[JsonProperty("control_scheme_8_name")]
public string ControlScheme8Name { get; set; } = "";
        

[JsonProperty("control_scheme_8_schedule_name")]
public string ControlScheme8ScheduleName { get; set; } = "";
    }
    
    public enum CondenserEquipmentOperationSchemes_ControlScheme1ObjectType
    {
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 0,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 8,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 9,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 10,
    }
    
    public enum CondenserEquipmentOperationSchemes_ControlScheme2ObjectType
    {
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 0,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 8,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 9,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 10,
    }
    
    public enum CondenserEquipmentOperationSchemes_ControlScheme3ObjectType
    {
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 0,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 8,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 9,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 10,
    }
    
    public enum CondenserEquipmentOperationSchemes_ControlScheme4ObjectType
    {
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 0,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 8,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 9,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 10,
    }
    
    public enum CondenserEquipmentOperationSchemes_ControlScheme5ObjectType
    {
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 0,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 8,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 9,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 10,
    }
    
    public enum CondenserEquipmentOperationSchemes_ControlScheme6ObjectType
    {
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 0,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 8,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 9,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 10,
    }
    
    public enum CondenserEquipmentOperationSchemes_ControlScheme7ObjectType
    {
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 0,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 8,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 9,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 10,
    }
    
    public enum CondenserEquipmentOperationSchemes_ControlScheme8ObjectType
    {
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 0,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 8,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 9,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 10,
    }
}
namespace BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Temperature-controlled diversion valve used to divert flow around one or more pla" +
        "nt components such as a hot water heater. It can only be used on one of two bran" +
        "ches between a Splitter and a Mixer.")]
    [JsonObject("TemperingValve")]
    public class TemperingValve : BHoMObject, IEnergyPlusClass
    {
        

[Description("Name of a Node")]
[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[Description("Name of a Node")]
[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[Description("Name of a Node")]
[JsonProperty("stream_2_source_node_name")]
public string Stream2SourceNodeName { get; set; } = "";
        

[Description("Name of a Node")]
[JsonProperty("temperature_setpoint_node_name")]
public string TemperatureSetpointNodeName { get; set; } = "";
        

[JsonProperty("pump_outlet_node_name")]
public string PumpOutletNodeName { get; set; } = "";
    }
}
namespace BH.oM.Adapters.EnergyPlus.PlantCondenserLoops
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Defines a central plant loop.")]
    [JsonObject("PlantLoop")]
    public class PlantLoop : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("fluid_type")]
public PlantLoop_FluidType FluidType { get; set; } = (PlantLoop_FluidType)Enum.Parse(typeof(PlantLoop_FluidType), "Water");
        

[Description("This field is only required when Fluid Type is UserDefinedFluidType")]
[JsonProperty("user_defined_fluid_type")]
public string UserDefinedFluidType { get; set; } = "";
        

[JsonProperty("plant_equipment_operation_scheme_name")]
public string PlantEquipmentOperationSchemeName { get; set; } = "";
        

[JsonProperty("loop_temperature_setpoint_node_name")]
public string LoopTemperatureSetpointNodeName { get; set; } = "";
        

[JsonProperty("maximum_loop_temperature")]
public System.Nullable<float> MaximumLoopTemperature { get; set; } = null;
        

[JsonProperty("minimum_loop_temperature")]
public System.Nullable<float> MinimumLoopTemperature { get; set; } = null;
        

[JsonProperty("maximum_loop_flow_rate")]
public string MaximumLoopFlowRate { get; set; } = "";
        

[JsonProperty("minimum_loop_flow_rate")]
public System.Nullable<float> MinimumLoopFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("plant_loop_volume")]
public string PlantLoopVolume { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("plant_side_inlet_node_name")]
public string PlantSideInletNodeName { get; set; } = "";
        

[JsonProperty("plant_side_outlet_node_name")]
public string PlantSideOutletNodeName { get; set; } = "";
        

[JsonProperty("plant_side_branch_list_name")]
public string PlantSideBranchListName { get; set; } = "";
        

[JsonProperty("plant_side_connector_list_name")]
public string PlantSideConnectorListName { get; set; } = "";
        

[JsonProperty("demand_side_inlet_node_name")]
public string DemandSideInletNodeName { get; set; } = "";
        

[JsonProperty("demand_side_outlet_node_name")]
public string DemandSideOutletNodeName { get; set; } = "";
        

[JsonProperty("demand_side_branch_list_name")]
public string DemandSideBranchListName { get; set; } = "";
        

[JsonProperty("demand_side_connector_list_name")]
public string DemandSideConnectorListName { get; set; } = "";
        

[JsonProperty("load_distribution_scheme")]
public PlantLoop_LoadDistributionScheme LoadDistributionScheme { get; set; } = (PlantLoop_LoadDistributionScheme)Enum.Parse(typeof(PlantLoop_LoadDistributionScheme), "SequentialLoad");
        

[JsonProperty("availability_manager_list_name")]
public string AvailabilityManagerListName { get; set; } = "";
        

[JsonProperty("plant_loop_demand_calculation_scheme")]
public PlantLoop_PlantLoopDemandCalculationScheme PlantLoopDemandCalculationScheme { get; set; } = (PlantLoop_PlantLoopDemandCalculationScheme)Enum.Parse(typeof(PlantLoop_PlantLoopDemandCalculationScheme), "SingleSetpoint");
        

[Description(@"Specifies a primary-secondary loop configuration. The plant side is the primary loop, and the demand side is the secondary loop. A secondary supply pump is required on the demand side. None = Primary-only, no secondary simulation CommonPipe = Primary-secondary with no temperature control at primary-secondary interface TwoWayCommonPipe = Primary-secondary with control of secondary supply temperature or primary return temperature (requires a setpoint be placed on the plant side or demand side inlet node).")]
[JsonProperty("common_pipe_simulation")]
public PlantLoop_CommonPipeSimulation CommonPipeSimulation { get; set; } = (PlantLoop_CommonPipeSimulation)Enum.Parse(typeof(PlantLoop_CommonPipeSimulation), "None");
        

[JsonProperty("pressure_simulation_type")]
public PlantLoop_PressureSimulationType PressureSimulationType { get; set; } = (PlantLoop_PressureSimulationType)Enum.Parse(typeof(PlantLoop_PressureSimulationType), "None");
        

[Description("This field is only used to autocalulate the Plant Loop Volume. Loop Volume = Loop" +
    " Circulation Time * Maximum Loop Flow Rate")]
[JsonProperty("loop_circulation_time")]
public System.Nullable<float> LoopCirculationTime { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
    }
    
    public enum PlantLoop_FluidType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Steam")]
        Steam = 1,
        
        [JsonProperty("UserDefinedFluidType")]
        UserDefinedFluidType = 2,
        
        [JsonProperty("Water")]
        Water = 3,
    }
    
    public enum PlantLoop_LoadDistributionScheme
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Optimal")]
        Optimal = 1,
        
        [JsonProperty("SequentialLoad")]
        SequentialLoad = 2,
        
        [JsonProperty("SequentialUniformPLR")]
        SequentialUniformPLR = 3,
        
        [JsonProperty("UniformLoad")]
        UniformLoad = 4,
        
        [JsonProperty("UniformPLR")]
        UniformPLR = 5,
    }
    
    public enum PlantLoop_PlantLoopDemandCalculationScheme
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DualSetpointDeadband")]
        DualSetpointDeadband = 1,
        
        [JsonProperty("SingleSetpoint")]
        SingleSetpoint = 2,
    }
    
    public enum PlantLoop_CommonPipeSimulation
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CommonPipe")]
        CommonPipe = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("TwoWayCommonPipe")]
        TwoWayCommonPipe = 3,
    }
    
    public enum PlantLoop_PressureSimulationType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LoopFlowCorrection")]
        LoopFlowCorrection = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("PumpPowerCorrection")]
        PumpPowerCorrection = 3,
    }
    
    [Description("Defines a central plant condenser loop. CondenserLoop and PlantLoop are nearly id" +
        "entical except some components and operation schemes are applicable to only one " +
        "loop type or the other.")]
    [JsonObject("CondenserLoop")]
    public class CondenserLoop : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("fluid_type")]
public CondenserLoop_FluidType FluidType { get; set; } = (CondenserLoop_FluidType)Enum.Parse(typeof(CondenserLoop_FluidType), "Water");
        

[Description("This field is only required when Fluid Type is UserDefinedFluidType")]
[JsonProperty("user_defined_fluid_type")]
public string UserDefinedFluidType { get; set; } = "";
        

[JsonProperty("condenser_equipment_operation_scheme_name")]
public string CondenserEquipmentOperationSchemeName { get; set; } = "";
        

[JsonProperty("condenser_loop_temperature_setpoint_node_name")]
public string CondenserLoopTemperatureSetpointNodeName { get; set; } = "";
        

[JsonProperty("maximum_loop_temperature")]
public System.Nullable<float> MaximumLoopTemperature { get; set; } = null;
        

[JsonProperty("minimum_loop_temperature")]
public System.Nullable<float> MinimumLoopTemperature { get; set; } = null;
        

[JsonProperty("maximum_loop_flow_rate")]
public string MaximumLoopFlowRate { get; set; } = "";
        

[JsonProperty("minimum_loop_flow_rate")]
public System.Nullable<float> MinimumLoopFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("condenser_loop_volume")]
public string CondenserLoopVolume { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("condenser_side_inlet_node_name")]
public string CondenserSideInletNodeName { get; set; } = "";
        

[JsonProperty("condenser_side_outlet_node_name")]
public string CondenserSideOutletNodeName { get; set; } = "";
        

[JsonProperty("condenser_side_branch_list_name")]
public string CondenserSideBranchListName { get; set; } = "";
        

[JsonProperty("condenser_side_connector_list_name")]
public string CondenserSideConnectorListName { get; set; } = "";
        

[JsonProperty("demand_side_inlet_node_name")]
public string DemandSideInletNodeName { get; set; } = "";
        

[JsonProperty("demand_side_outlet_node_name")]
public string DemandSideOutletNodeName { get; set; } = "";
        

[JsonProperty("condenser_demand_side_branch_list_name")]
public string CondenserDemandSideBranchListName { get; set; } = "";
        

[JsonProperty("condenser_demand_side_connector_list_name")]
public string CondenserDemandSideConnectorListName { get; set; } = "";
        

[JsonProperty("load_distribution_scheme")]
public CondenserLoop_LoadDistributionScheme LoadDistributionScheme { get; set; } = (CondenserLoop_LoadDistributionScheme)Enum.Parse(typeof(CondenserLoop_LoadDistributionScheme), "SequentialLoad");
        

[JsonProperty("pressure_simulation_type")]
public CondenserLoop_PressureSimulationType PressureSimulationType { get; set; } = (CondenserLoop_PressureSimulationType)Enum.Parse(typeof(CondenserLoop_PressureSimulationType), "None");
        

[Description("This field is only used to autocalulate the Condenser Loop Volume. Loop Volume = " +
    "Loop Circulation Time * Maximum Loop Flow Rate")]
[JsonProperty("loop_circulation_time")]
public System.Nullable<float> LoopCirculationTime { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
    }
    
    public enum CondenserLoop_FluidType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("UserDefinedFluidType")]
        UserDefinedFluidType = 1,
        
        [JsonProperty("Water")]
        Water = 2,
    }
    
    public enum CondenserLoop_LoadDistributionScheme
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Optimal")]
        Optimal = 1,
        
        [JsonProperty("SequentialLoad")]
        SequentialLoad = 2,
        
        [JsonProperty("SequentialUniformPLR")]
        SequentialUniformPLR = 3,
        
        [JsonProperty("UniformLoad")]
        UniformLoad = 4,
        
        [JsonProperty("UniformPLR")]
        UniformPLR = 5,
    }
    
    public enum CondenserLoop_PressureSimulationType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LoopFlowCorrection")]
        LoopFlowCorrection = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("PumpPowerCorrection")]
        PumpPowerCorrection = 3,
    }
}
namespace BH.oM.Adapters.EnergyPlus.Pumps
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("This pump model is described in the ASHRAE secondary HVAC toolkit.")]
    [JsonObject("Pump:VariableSpeed")]
    public class Pump_VariableSpeed : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[JsonProperty("design_maximum_flow_rate")]
public string DesignMaximumFlowRate { get; set; } = "";
        

[Description("default head is 60 feet")]
[JsonProperty("design_pump_head")]
public System.Nullable<float> DesignPumpHead { get; set; } = (System.Nullable<float>)Single.Parse("179352", CultureInfo.InvariantCulture);
        

[Description("When autosized the type of scaling factor is chosen in the input field Design Pow" +
    "er Sizing Method")]
[JsonProperty("design_power_consumption")]
public string DesignPowerConsumption { get; set; } = "";
        

[Description("This is the motor efficiency only. When the Design Power Consumption is autosized" +
    " using PowerPerFlowPerPressure, the Design Shaft Power per Unit Flow Rate per Un" +
    "it Head is used in addition to the motor efficiency.")]
[JsonProperty("motor_efficiency")]
public System.Nullable<float> MotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_of_motor_inefficiencies_to_fluid_stream")]
public System.Nullable<float> FractionOfMotorInefficienciesToFluidStream { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("coefficient_1_of_the_part_load_performance_curve")]
public System.Nullable<float> Coefficient1OfThePartLoadPerformanceCurve { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("coefficient_2_of_the_part_load_performance_curve")]
public System.Nullable<float> Coefficient2OfThePartLoadPerformanceCurve { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("coefficient_3_of_the_part_load_performance_curve")]
public System.Nullable<float> Coefficient3OfThePartLoadPerformanceCurve { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("coefficient_4_of_the_part_load_performance_curve")]
public System.Nullable<float> Coefficient4OfThePartLoadPerformanceCurve { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("When autosized the scaling factor is the input field Design Minimum Flow Rate Fra" +
    "ction")]
[JsonProperty("design_minimum_flow_rate")]
public string DesignMinimumFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("pump_control_type")]
public Pump_VariableSpeed_PumpControlType PumpControlType { get; set; } = (Pump_VariableSpeed_PumpControlType)Enum.Parse(typeof(Pump_VariableSpeed_PumpControlType), "Continuous");
        

[Description("Modifies the rated flow rate of the pump on a time basis. Default is that the pum" +
    "p is on and runs according to its other operational requirements specified above" +
    ". The schedule is for special pump operations.")]
[JsonProperty("pump_flow_rate_schedule_name")]
public string PumpFlowRateScheduleName { get; set; } = "";
        

[Description(@"This references any single independent variable polynomial curve in order to do pressure vs. flow calculations for this pump. The available types are then: Linear, Quadratic, Cubic, and Quartic The non-dimensional pump pressure relationship is of the following form: (psi = C4*phi^4 + C3*phi^3 + C2*phi^2 + C1*phi + C0) Where the non-dimensional variables are defined as: delP = rho * ((N/60)^2) * (D^2) * psi mdot = rho * (N/60) * (D^3) * phi")]
[JsonProperty("pump_curve_name")]
public string PumpCurveName { get; set; } = "";
        

[Description("\"D\" in above expression in field A6")]
[JsonProperty("impeller_diameter")]
public System.Nullable<float> ImpellerDiameter { get; set; } = null;
        

[JsonProperty("vfd_control_type")]
public Pump_VariableSpeed_VfdControlType VfdControlType { get; set; } = (Pump_VariableSpeed_VfdControlType)Enum.Parse(typeof(Pump_VariableSpeed_VfdControlType), "ManualControl");
        

[Description("Modifies the rpm of the pump on a time basis. Default is that the pump is on and " +
    "runs according to its other operational requirements specified above. The schedu" +
    "le is for special pump operations.")]
[JsonProperty("pump_rpm_schedule_name")]
public string PumpRpmScheduleName { get; set; } = "";
        

[JsonProperty("minimum_pressure_schedule")]
public string MinimumPressureSchedule { get; set; } = "";
        

[JsonProperty("maximum_pressure_schedule")]
public string MaximumPressureSchedule { get; set; } = "";
        

[JsonProperty("minimum_rpm_schedule")]
public string MinimumRpmSchedule { get; set; } = "";
        

[JsonProperty("maximum_rpm_schedule")]
public string MaximumRpmSchedule { get; set; } = "";
        

[Description("optional, if used pump losses transfered to zone as internal gains")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("optional. If zone identified in previous field then this determines the split bet" +
    "ween convection and radiation for the skin losses")]
[JsonProperty("skin_loss_radiative_fraction")]
public System.Nullable<float> SkinLossRadiativeFraction { get; set; } = null;
        

[Description(@"Used to indicate which sizing factor is used to calculate Design Power Consumption. PowerPerFlow indicates that Design Electric Power per Unit Flow Rate is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * scaling factor PowerPerFlowPerPressure indicates that Design Shaft Power per Unit Flow Rate per Unit Head is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * Design Pump Head * scaling factor / Motor Efficiency")]
[JsonProperty("design_power_sizing_method")]
public Pump_VariableSpeed_DesignPowerSizingMethod DesignPowerSizingMethod { get; set; } = (Pump_VariableSpeed_DesignPowerSizingMethod)Enum.Parse(typeof(Pump_VariableSpeed_DesignPowerSizingMethod), "PowerPerFlowPerPressure");
        

[Description("Used to size Design Power Consumption from design flow rate")]
[JsonProperty("design_electric_power_per_unit_flow_rate")]
public System.Nullable<float> DesignElectricPowerPerUnitFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("348701.1", CultureInfo.InvariantCulture);
        

[Description("Used to size Design Power Consumption from design flow rate for head and motor ef" +
    "ficiency")]
[JsonProperty("design_shaft_power_per_unit_flow_rate_per_unit_head")]
public System.Nullable<float> DesignShaftPowerPerUnitFlowRatePerUnitHead { get; set; } = (System.Nullable<float>)Single.Parse("1.282051282", CultureInfo.InvariantCulture);
        

[Description("Used to size Design Minimum Flow Rate")]
[JsonProperty("design_minimum_flow_rate_fraction")]
public System.Nullable<float> DesignMinimumFlowRateFraction { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum Pump_VariableSpeed_PumpControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Continuous")]
        Continuous = 1,
        
        [JsonProperty("Intermittent")]
        Intermittent = 2,
    }
    
    public enum Pump_VariableSpeed_VfdControlType
    {
        
        [JsonProperty("ManualControl")]
        ManualControl = 0,
        
        [JsonProperty("PressureSetpointControl")]
        PressureSetpointControl = 1,
    }
    
    public enum Pump_VariableSpeed_DesignPowerSizingMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("PowerPerFlow")]
        PowerPerFlow = 1,
        
        [JsonProperty("PowerPerFlowPerPressure")]
        PowerPerFlowPerPressure = 2,
    }
    
    [Description("This pump model is described in the ASHRAE secondary HVAC toolkit.")]
    [JsonObject("Pump:ConstantSpeed")]
    public class Pump_ConstantSpeed : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[JsonProperty("design_flow_rate")]
public string DesignFlowRate { get; set; } = "";
        

[Description("default head is 60 feet")]
[JsonProperty("design_pump_head")]
public System.Nullable<float> DesignPumpHead { get; set; } = (System.Nullable<float>)Single.Parse("179352", CultureInfo.InvariantCulture);
        

[Description("When autosized the type of scaling factor is chosen in the input field Design Pow" +
    "er Sizing Method")]
[JsonProperty("design_power_consumption")]
public string DesignPowerConsumption { get; set; } = "";
        

[Description("This is the motor efficiency only. When the Design Power Consumption is autosized" +
    " using PowerPerFlowPerPressure, the Design Shaft Power per Unit Flow Rate per Un" +
    "it Head is used in addition to the motor efficiency.")]
[JsonProperty("motor_efficiency")]
public System.Nullable<float> MotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_of_motor_inefficiencies_to_fluid_stream")]
public System.Nullable<float> FractionOfMotorInefficienciesToFluidStream { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("pump_control_type")]
public Pump_ConstantSpeed_PumpControlType PumpControlType { get; set; } = (Pump_ConstantSpeed_PumpControlType)Enum.Parse(typeof(Pump_ConstantSpeed_PumpControlType), "Continuous");
        

[Description("Modifies the rated flow rate of the pump on a time basis. Default is that the pum" +
    "p is on and runs according to its other operational requirements specified above" +
    ". The schedule is for special pump operations.")]
[JsonProperty("pump_flow_rate_schedule_name")]
public string PumpFlowRateScheduleName { get; set; } = "";
        

[Description(@"This references any single independent variable polynomial curve in order to do pressure vs. flow calculations for this pump. The available types are then: Linear, Quadratic, Cubic, and Quartic The non-dimensional pump pressure relationship is of the following form: (psi = C4*phi^4 + C3*phi^3 + C2*phi^2 + C1*phi + C0) Where the non-dimensional variables are defined as: delP = rho * ((N/60)^2) * (D^2) * psi mdot = rho * (N/60) * (D^3) * phi")]
[JsonProperty("pump_curve_name")]
public string PumpCurveName { get; set; } = "";
        

[Description("\"D\" in above expression in field A6")]
[JsonProperty("impeller_diameter")]
public System.Nullable<float> ImpellerDiameter { get; set; } = null;
        

[Description("\"N\" in above expression in field A6")]
[JsonProperty("rotational_speed")]
public System.Nullable<float> RotationalSpeed { get; set; } = null;
        

[Description("optional, if used pump losses transfered to zone as internal gains")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("optional. If zone identified in previous field then this determines the split bet" +
    "ween convection and radiation for the skin losses")]
[JsonProperty("skin_loss_radiative_fraction")]
public System.Nullable<float> SkinLossRadiativeFraction { get; set; } = null;
        

[Description(@"Used to indicate which sizing factor is used to calculate Design Power Consumption. PowerPerFlow indicates that Design Electric Power per Unit Flow Rate is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * scaling factor PowerPerFlowPerPressure indicates that Design Shaft Power per Unit Flow Rate per Unit Head is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * Design Pump Head * scaling factor / Motor Efficiency")]
[JsonProperty("design_power_sizing_method")]
public Pump_ConstantSpeed_DesignPowerSizingMethod DesignPowerSizingMethod { get; set; } = (Pump_ConstantSpeed_DesignPowerSizingMethod)Enum.Parse(typeof(Pump_ConstantSpeed_DesignPowerSizingMethod), "PowerPerFlowPerPressure");
        

[Description("Used to size Design Power Consumption from design flow rate")]
[JsonProperty("design_electric_power_per_unit_flow_rate")]
public System.Nullable<float> DesignElectricPowerPerUnitFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("348701.1", CultureInfo.InvariantCulture);
        

[Description("Used to size Design Power Consumption from design flow rate for head and motor ef" +
    "ficiency")]
[JsonProperty("design_shaft_power_per_unit_flow_rate_per_unit_head")]
public System.Nullable<float> DesignShaftPowerPerUnitFlowRatePerUnitHead { get; set; } = (System.Nullable<float>)Single.Parse("1.282051282", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum Pump_ConstantSpeed_PumpControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Continuous")]
        Continuous = 1,
        
        [JsonProperty("Intermittent")]
        Intermittent = 2,
    }
    
    public enum Pump_ConstantSpeed_DesignPowerSizingMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("PowerPerFlow")]
        PowerPerFlow = 1,
        
        [JsonProperty("PowerPerFlowPerPressure")]
        PowerPerFlowPerPressure = 2,
    }
    
    [Description("This pump model is described in the ASHRAE secondary HVAC toolkit. Variable Speed" +
        " Condensate pump for Steam Systems")]
    [JsonObject("Pump:VariableSpeed:Condensate")]
    public class Pump_VariableSpeed_Condensate : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[Description("this is the volume of steam before condensation, the volume of condensate is much" +
    " lower and calculated from steam density")]
[JsonProperty("design_steam_volume_flow_rate")]
public string DesignSteamVolumeFlowRate { get; set; } = "";
        

[Description("default head is 60 feet")]
[JsonProperty("design_pump_head")]
public System.Nullable<float> DesignPumpHead { get; set; } = (System.Nullable<float>)Single.Parse("179352", CultureInfo.InvariantCulture);
        

[Description("When autosized the type of scaling factor is chosen in the input field Design Pow" +
    "er Sizing Method")]
[JsonProperty("design_power_consumption")]
public string DesignPowerConsumption { get; set; } = "";
        

[Description("This is the motor efficiency only. When the Design Power Consumption is autosized" +
    " using PowerPerFlowPerPressure, the Design Shaft Power per Unit Flow Rate per Un" +
    "it Head is used in addition to the motor efficiency.")]
[JsonProperty("motor_efficiency")]
public System.Nullable<float> MotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_of_motor_inefficiencies_to_fluid_stream")]
public System.Nullable<float> FractionOfMotorInefficienciesToFluidStream { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("coefficient_1_of_the_part_load_performance_curve")]
public System.Nullable<float> Coefficient1OfThePartLoadPerformanceCurve { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("coefficient_2_of_the_part_load_performance_curve")]
public System.Nullable<float> Coefficient2OfThePartLoadPerformanceCurve { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("coefficient_3_of_the_part_load_performance_curve")]
public System.Nullable<float> Coefficient3OfThePartLoadPerformanceCurve { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("coefficient_4_of_the_part_load_performance_curve")]
public System.Nullable<float> Coefficient4OfThePartLoadPerformanceCurve { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Modifies the rated flow rate of the pump on a time basis. Default is that the pum" +
    "p is on and runs according to its other operational requirements specified above" +
    ". The schedule is for special pump operations.")]
[JsonProperty("pump_flow_rate_schedule_name")]
public string PumpFlowRateScheduleName { get; set; } = "";
        

[Description("optional, if used pump losses transfered to zone as internal gains")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("optional. If zone identified in previous field then this determines the split bet" +
    "ween convection and radiation for the skin losses")]
[JsonProperty("skin_loss_radiative_fraction")]
public System.Nullable<float> SkinLossRadiativeFraction { get; set; } = null;
        

[Description(@"Used to indicate which sizing factor is used to calculate Design Power Consumption. PowerPerFlow indicates that Design Electric Power per Unit Flow Rate is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * scaling factor PowerPerFlowPerPressure indicates that Design Shaft Power per Unit Flow Rate per Unit Head is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * Design Pump Head * scaling factor / Motor Efficiency")]
[JsonProperty("design_power_sizing_method")]
public Pump_VariableSpeed_Condensate_DesignPowerSizingMethod DesignPowerSizingMethod { get; set; } = (Pump_VariableSpeed_Condensate_DesignPowerSizingMethod)Enum.Parse(typeof(Pump_VariableSpeed_Condensate_DesignPowerSizingMethod), "PowerPerFlowPerPressure");
        

[Description("Used to size Design Power Consumption from design flow rate")]
[JsonProperty("design_electric_power_per_unit_flow_rate")]
public System.Nullable<float> DesignElectricPowerPerUnitFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("348701.1", CultureInfo.InvariantCulture);
        

[Description("Used to size Design Power Consumption from design flow rate for head and motor ef" +
    "ficiency")]
[JsonProperty("design_shaft_power_per_unit_flow_rate_per_unit_head")]
public System.Nullable<float> DesignShaftPowerPerUnitFlowRatePerUnitHead { get; set; } = (System.Nullable<float>)Single.Parse("1.282051282", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum Pump_VariableSpeed_Condensate_DesignPowerSizingMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("PowerPerFlow")]
        PowerPerFlow = 1,
        
        [JsonProperty("PowerPerFlowPerPressure")]
        PowerPerFlowPerPressure = 2,
    }
    
    [Description("This Headered pump object describes a pump bank with more than 1 pump in parallel" +
        "")]
    [JsonObject("HeaderedPumps:ConstantSpeed")]
    public class HeaderedPumps_ConstantSpeed : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[Description("If the field is not autosized set to the flow rate to the total flow when all pum" +
    "ps are running at full load")]
[JsonProperty("total_design_flow_rate")]
public string TotalDesignFlowRate { get; set; } = "";
        

[JsonProperty("number_of_pumps_in_bank")]
public System.Nullable<float> NumberOfPumpsInBank { get; set; } = null;
        

[JsonProperty("flow_sequencing_control_scheme")]
public HeaderedPumps_ConstantSpeed_FlowSequencingControlScheme FlowSequencingControlScheme { get; set; } = (HeaderedPumps_ConstantSpeed_FlowSequencingControlScheme)Enum.Parse(typeof(HeaderedPumps_ConstantSpeed_FlowSequencingControlScheme), "Sequential");
        

[Description("default head is 60 feet")]
[JsonProperty("design_pump_head")]
public System.Nullable<float> DesignPumpHead { get; set; } = (System.Nullable<float>)Single.Parse("179352", CultureInfo.InvariantCulture);
        

[Description("If the field is not autosized set to the power consumed by the pump bank when all" +
    " the pumps are running at nominal flow When autosized the type of scaling factor" +
    " is chosen in the input field Design Power Sizing Method")]
[JsonProperty("design_power_consumption")]
public string DesignPowerConsumption { get; set; } = "";
        

[Description("This is the motor efficiency only. When the Design Power Consumption is autosized" +
    " using PowerPerFlowPerPressure, the Design Shaft Power per Unit Flow Rate per Un" +
    "it Head is used in addition to the motor efficiency.")]
[JsonProperty("motor_efficiency")]
public System.Nullable<float> MotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_of_motor_inefficiencies_to_fluid_stream")]
public System.Nullable<float> FractionOfMotorInefficienciesToFluidStream { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("pump_control_type")]
public HeaderedPumps_ConstantSpeed_PumpControlType PumpControlType { get; set; } = (HeaderedPumps_ConstantSpeed_PumpControlType)Enum.Parse(typeof(HeaderedPumps_ConstantSpeed_PumpControlType), "Continuous");
        

[Description("Modifies the rated flow rate of the pump on a time basis. Default is that the pum" +
    "p is on and runs according to its other operational requirements specified above" +
    ". The schedule is for special pump operations.")]
[JsonProperty("pump_flow_rate_schedule_name")]
public string PumpFlowRateScheduleName { get; set; } = "";
        

[Description("optional, if used pump losses transfered to zone as internal gains")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("optional. If zone identified in previous field then this determines the split bet" +
    "ween convection and radiation for the skin losses")]
[JsonProperty("skin_loss_radiative_fraction")]
public System.Nullable<float> SkinLossRadiativeFraction { get; set; } = null;
        

[Description(@"Used to indicate which sizing factor is used to calculate Design Power Consumption. PowerPerFlow indicates that Design Electric Power per Unit Flow Rate is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * scaling factor PowerPerFlowPerPressure indicates that Design Shaft Power per Unit Flow Rate per Unit Head is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * Design Pump Head * scaling factor / Motor Efficiency")]
[JsonProperty("design_power_sizing_method")]
public HeaderedPumps_ConstantSpeed_DesignPowerSizingMethod DesignPowerSizingMethod { get; set; } = (HeaderedPumps_ConstantSpeed_DesignPowerSizingMethod)Enum.Parse(typeof(HeaderedPumps_ConstantSpeed_DesignPowerSizingMethod), "PowerPerFlowPerPressure");
        

[Description("Used to size Design Power Consumption from design flow rate")]
[JsonProperty("design_electric_power_per_unit_flow_rate")]
public System.Nullable<float> DesignElectricPowerPerUnitFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("348701.1", CultureInfo.InvariantCulture);
        

[Description("Used to size Design Power Consumption from design flow rate for head and motor ef" +
    "ficiency")]
[JsonProperty("design_shaft_power_per_unit_flow_rate_per_unit_head")]
public System.Nullable<float> DesignShaftPowerPerUnitFlowRatePerUnitHead { get; set; } = (System.Nullable<float>)Single.Parse("1.282051282", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum HeaderedPumps_ConstantSpeed_FlowSequencingControlScheme
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Sequential")]
        Sequential = 1,
    }
    
    public enum HeaderedPumps_ConstantSpeed_PumpControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Continuous")]
        Continuous = 1,
        
        [JsonProperty("Intermittent")]
        Intermittent = 2,
    }
    
    public enum HeaderedPumps_ConstantSpeed_DesignPowerSizingMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("PowerPerFlow")]
        PowerPerFlow = 1,
        
        [JsonProperty("PowerPerFlowPerPressure")]
        PowerPerFlowPerPressure = 2,
    }
    
    [Description("This Headered pump object describes a pump bank with more than 1 pump in parallel" +
        "")]
    [JsonObject("HeaderedPumps:VariableSpeed")]
    public class HeaderedPumps_VariableSpeed : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[Description("If the field is not autosized set to the flow rate to the total flow when all pum" +
    "ps are running at full load")]
[JsonProperty("total_design_flow_rate")]
public string TotalDesignFlowRate { get; set; } = "";
        

[JsonProperty("number_of_pumps_in_bank")]
public System.Nullable<float> NumberOfPumpsInBank { get; set; } = null;
        

[JsonProperty("flow_sequencing_control_scheme")]
public HeaderedPumps_VariableSpeed_FlowSequencingControlScheme FlowSequencingControlScheme { get; set; } = (HeaderedPumps_VariableSpeed_FlowSequencingControlScheme)Enum.Parse(typeof(HeaderedPumps_VariableSpeed_FlowSequencingControlScheme), "Sequential");
        

[Description("default head is 60 feet")]
[JsonProperty("design_pump_head")]
public System.Nullable<float> DesignPumpHead { get; set; } = (System.Nullable<float>)Single.Parse("179352", CultureInfo.InvariantCulture);
        

[Description("If the field is not autosized set to the power consumed by the pump bank when all" +
    " the pumps are running at nominal flow When autosized the type of scaling factor" +
    " is chosen in the input field Design Power Sizing Method")]
[JsonProperty("design_power_consumption")]
public string DesignPowerConsumption { get; set; } = "";
        

[Description("This is the motor efficiency only. When the Design Power Consumption is autosized" +
    " using PowerPerFlowPerPressure, the Design Shaft Power per Unit Flow Rate per Un" +
    "it Head is used in addition to the motor efficiency.")]
[JsonProperty("motor_efficiency")]
public System.Nullable<float> MotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_of_motor_inefficiencies_to_fluid_stream")]
public System.Nullable<float> FractionOfMotorInefficienciesToFluidStream { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("coefficient_1_of_the_part_load_performance_curve")]
public System.Nullable<float> Coefficient1OfThePartLoadPerformanceCurve { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("coefficient_2_of_the_part_load_performance_curve")]
public System.Nullable<float> Coefficient2OfThePartLoadPerformanceCurve { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("coefficient_3_of_the_part_load_performance_curve")]
public System.Nullable<float> Coefficient3OfThePartLoadPerformanceCurve { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("coefficient_4_of_the_part_load_performance_curve")]
public System.Nullable<float> Coefficient4OfThePartLoadPerformanceCurve { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This value can be zero and will be defaulted to that if not specified.")]
[JsonProperty("minimum_flow_rate_fraction")]
public System.Nullable<float> MinimumFlowRateFraction { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("pump_control_type")]
public HeaderedPumps_VariableSpeed_PumpControlType PumpControlType { get; set; } = (HeaderedPumps_VariableSpeed_PumpControlType)Enum.Parse(typeof(HeaderedPumps_VariableSpeed_PumpControlType), "Continuous");
        

[Description("Modifies the rated flow rate of the pump on a time basis. Default is that the pum" +
    "p is on and runs according to its other operational requirements specified above" +
    ". The schedule is for special pump operations.")]
[JsonProperty("pump_flow_rate_schedule_name")]
public string PumpFlowRateScheduleName { get; set; } = "";
        

[Description("optional, if used pump losses transfered to zone as internal gains")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("optional. If zone identified in previous field then this determines the split bet" +
    "ween convection and radiation for the skin losses")]
[JsonProperty("skin_loss_radiative_fraction")]
public System.Nullable<float> SkinLossRadiativeFraction { get; set; } = null;
        

[Description(@"Used to indicate which sizing factor is used to calculate Design Power Consumption. PowerPerFlow indicates that Design Electric Power per Unit Flow Rate is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * scaling factor PowerPerFlowPerPressure indicates that Design Shaft Power per Unit Flow Rate per Unit Head is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * Design Pump Head * scaling factor / Motor Efficiency")]
[JsonProperty("design_power_sizing_method")]
public HeaderedPumps_VariableSpeed_DesignPowerSizingMethod DesignPowerSizingMethod { get; set; } = (HeaderedPumps_VariableSpeed_DesignPowerSizingMethod)Enum.Parse(typeof(HeaderedPumps_VariableSpeed_DesignPowerSizingMethod), "PowerPerFlowPerPressure");
        

[Description("Used to size Design Power Consumption from design flow rate")]
[JsonProperty("design_electric_power_per_unit_flow_rate")]
public System.Nullable<float> DesignElectricPowerPerUnitFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("348701.1", CultureInfo.InvariantCulture);
        

[Description("Used to size Design Power Consumption from design flow rate for head and motor ef" +
    "ficiency")]
[JsonProperty("design_shaft_power_per_unit_flow_rate_per_unit_head")]
public System.Nullable<float> DesignShaftPowerPerUnitFlowRatePerUnitHead { get; set; } = (System.Nullable<float>)Single.Parse("1.282051282", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum HeaderedPumps_VariableSpeed_FlowSequencingControlScheme
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Sequential")]
        Sequential = 1,
    }
    
    public enum HeaderedPumps_VariableSpeed_PumpControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Continuous")]
        Continuous = 1,
        
        [JsonProperty("Intermittent")]
        Intermittent = 2,
    }
    
    public enum HeaderedPumps_VariableSpeed_DesignPowerSizingMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("PowerPerFlow")]
        PowerPerFlow = 1,
        
        [JsonProperty("PowerPerFlowPerPressure")]
        PowerPerFlowPerPressure = 2,
    }
}
namespace BH.oM.Adapters.EnergyPlus.PythonPluginSystem
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Add directories to the search path for Python plugin modules The directory containing the EnergyPlus executable file is automatically added so that the Python interpreter can find the packaged up pyenergyplus Python package. By default, the current working directory and input file directory are also added to the search path. However, this object allows modifying this behavior. With this object, searching these directories can be disabled, and users can add supplemental search paths that point to libraries of plugin scripts.")]
    [JsonObject("PythonPlugin:SearchPaths")]
    public class PythonPlugin_SearchPaths : BHoMObject, IEnergyPlusClass
    {
        

[Description("Adding the current working directory allows Python to find plugin scripts in the " +
    "current directory.")]
[JsonProperty("add_current_working_directory_to_search_path")]
public EmptyNoYes AddCurrentWorkingDirectoryToSearchPath { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[Description("Enabling this will allow Python to find plugin scripts in the same directory as t" +
    "he running input file, even if that is not the current working directory.")]
[JsonProperty("add_input_file_directory_to_search_path")]
public EmptyNoYes AddInputFileDirectoryToSearchPath { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[JsonProperty("py_search_paths")]
public string PySearchPaths { get; set; } = "";
    }
    
    [Description("A single plugin to be executed during the simulation, which can contain multiple " +
        "calling points for the same class instance by overriding multiple calling point " +
        "methods.")]
    [JsonObject("PythonPlugin:Instance")]
    public class PythonPlugin_Instance : BHoMObject, IEnergyPlusClass
    {
        

[Description("If this field is enabled, the plugin will be executed during warmup days, otherwi" +
    "se it will only be executed once warmup is completed and the actual run period b" +
    "egins")]
[JsonProperty("run_during_warmup_days")]
public EmptyNoYes RunDuringWarmupDays { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description(@"This is the name of the Python file, without a file extension. For ""plugin_b.py"", use just ""plugin_b"". The Python plugin file must be on the plugin system search path to be found during a simulation Additional directories can be added to the search path using the PythonPlugin:SearchPaths object")]
[JsonProperty("python_module_name")]
public string PythonModuleName { get; set; } = "";
        

[Description("This is the name of the class to be executed as a plugin during a simulation The " +
    "class must inherit the EnergyPlusPlugin base class")]
[JsonProperty("plugin_class_name")]
public string PluginClassName { get; set; } = "";
    }
    
    [Description("This object defines name identifiers for custom Python Plugin variable data that " +
        "should be shared among all running Python Plugins.")]
    [JsonObject("PythonPlugin:Variables")]
    public class PythonPlugin_Variables : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("global_py_vars")]
public string GlobalPyVars { get; set; } = "";
    }
    
    [Description("This object sets up a Python plugin trend variable from an Python plugin variable" +
        " A trend variable logs values across timesteps")]
    [JsonObject("PythonPlugin:TrendVariable")]
    public class PythonPlugin_TrendVariable : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("name_of_a_python_plugin_variable")]
public string NameOfAPythonPluginVariable { get; set; } = "";
        

[JsonProperty("number_of_timesteps_to_be_logged")]
public System.Nullable<float> NumberOfTimestepsToBeLogged { get; set; } = null;
    }
    
    [Description("This object sets up an EnergyPlus output variable from a Python Plugin variable")]
    [JsonObject("PythonPlugin:OutputVariable")]
    public class PythonPlugin_OutputVariable : BHoMObject, IEnergyPlusClass
    {
        

[Description("Must be listed in the PythonPlugin:Variables object")]
[JsonProperty("python_plugin_variable_name")]
public string PythonPluginVariableName { get; set; } = "";
        

[Description("If Metered is selected, the variable is automatically set to a \"Summed\" type, and" +
    " the Resource Type, Group Type, and End-Use Subcategory fields on this object ar" +
    "e required")]
[JsonProperty("type_of_data_in_variable")]
public PythonPlugin_OutputVariable_TypeOfDataInVariable TypeOfDataInVariable { get; set; } = (PythonPlugin_OutputVariable_TypeOfDataInVariable)Enum.Parse(typeof(PythonPlugin_OutputVariable_TypeOfDataInVariable), "Averaged");
        

[JsonProperty("update_frequency")]
public PythonPlugin_OutputVariable_UpdateFrequency UpdateFrequency { get; set; } = (PythonPlugin_OutputVariable_UpdateFrequency)Enum.Parse(typeof(PythonPlugin_OutputVariable_UpdateFrequency), "SystemTimestep");
        

[Description("optional but will result in dimensionless units for blank EnergyPlus units are st" +
    "andard SI units")]
[JsonProperty("units")]
public string Units { get; set; } = "";
        

[Description(@"This field is optional for regular output variables with ""Type of Data in Variable"" set to either Averaged or Summed. For Metered variables, this field is required. Choose the type of fuel, water, electricity, pollution or heat rate that should be metered.")]
[JsonProperty("resource_type")]
public PythonPlugin_OutputVariable_ResourceType ResourceType { get; set; } = (PythonPlugin_OutputVariable_ResourceType)Enum.Parse(typeof(PythonPlugin_OutputVariable_ResourceType), "Coal");
        

[Description(@"This field is optional for regular output variables with ""Type of Data in Variable"" set to either Averaged or Summed. For Metered variables, this field is required. Choose a general classification, building (internal services), HVAC (air systems), or plant (hydronic systems), or system")]
[JsonProperty("group_type")]
public PythonPlugin_OutputVariable_GroupType GroupType { get; set; } = (PythonPlugin_OutputVariable_GroupType)Enum.Parse(typeof(PythonPlugin_OutputVariable_GroupType), "Building");
        

[Description("This field is optional for regular output variables with \"Type of Data in Variabl" +
    "e\" set to either Averaged or Summed. For Metered variables, this field is requir" +
    "ed. Choose how the metered output should be classified for end-use category")]
[JsonProperty("end_use_category")]
public PythonPlugin_OutputVariable_EndUseCategory EndUseCategory { get; set; } = (PythonPlugin_OutputVariable_EndUseCategory)Enum.Parse(typeof(PythonPlugin_OutputVariable_EndUseCategory), "Baseboard");
        

[Description(@"This field is always optional. For regular output variables with ""Type of Data in Variable"" set to either Averaged or Summed, this field is completely ignored. For Metered variables, this field is optional, but allows custom categorization of the end-uses in the ABUPS End Uses by Subcategory table. Enter a user-defined subcategory for this metered output")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = "";
    }
    
    public enum PythonPlugin_OutputVariable_TypeOfDataInVariable
    {
        
        [JsonProperty("Averaged")]
        Averaged = 0,
        
        [JsonProperty("Metered")]
        Metered = 1,
        
        [JsonProperty("Summed")]
        Summed = 2,
    }
    
    public enum PythonPlugin_OutputVariable_UpdateFrequency
    {
        
        [JsonProperty("SystemTimestep")]
        SystemTimestep = 0,
        
        [JsonProperty("ZoneTimestep")]
        ZoneTimestep = 1,
    }
    
    public enum PythonPlugin_OutputVariable_ResourceType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("CondensateWaterCollected")]
        CondensateWaterCollected = 1,
        
        [JsonProperty("Diesel")]
        Diesel = 2,
        
        [JsonProperty("DistrictCooling")]
        DistrictCooling = 3,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 4,
        
        [JsonProperty("Electricity")]
        Electricity = 5,
        
        [JsonProperty("ElectricityProducedOnSite")]
        ElectricityProducedOnSite = 6,
        
        [JsonProperty("EnergyTransfer")]
        EnergyTransfer = 7,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 8,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 9,
        
        [JsonProperty("Gasoline")]
        Gasoline = 10,
        
        [JsonProperty("MainsWaterSupply")]
        MainsWaterSupply = 11,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 12,
        
        [JsonProperty("OnSiteWaterProduced")]
        OnSiteWaterProduced = 13,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 14,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 15,
        
        [JsonProperty("Propane")]
        Propane = 16,
        
        [JsonProperty("RainWaterCollected")]
        RainWaterCollected = 17,
        
        [JsonProperty("SolarAirHeating")]
        SolarAirHeating = 18,
        
        [JsonProperty("SolarWaterHeating")]
        SolarWaterHeating = 19,
        
        [JsonProperty("Steam")]
        Steam = 20,
        
        [JsonProperty("WaterUse")]
        WaterUse = 21,
        
        [JsonProperty("WellWaterDrawn")]
        WellWaterDrawn = 22,
    }
    
    public enum PythonPlugin_OutputVariable_GroupType
    {
        
        [JsonProperty("Building")]
        Building = 0,
        
        [JsonProperty("HVAC")]
        HVAC = 1,
        
        [JsonProperty("Plant")]
        Plant = 2,
        
        [JsonProperty("System")]
        System = 3,
    }
    
    public enum PythonPlugin_OutputVariable_EndUseCategory
    {
        
        [JsonProperty("Baseboard")]
        Baseboard = 0,
        
        [JsonProperty("Boilers")]
        Boilers = 1,
        
        [JsonProperty("Chillers")]
        Chillers = 2,
        
        [JsonProperty("Cooling")]
        Cooling = 3,
        
        [JsonProperty("CoolingCoils")]
        CoolingCoils = 4,
        
        [JsonProperty("ExteriorEquipment")]
        ExteriorEquipment = 5,
        
        [JsonProperty("ExteriorLights")]
        ExteriorLights = 6,
        
        [JsonProperty("Fans")]
        Fans = 7,
        
        [JsonProperty("HeatRecovery")]
        HeatRecovery = 8,
        
        [JsonProperty("HeatRecoveryForCooling")]
        HeatRecoveryForCooling = 9,
        
        [JsonProperty("HeatRecoveryForHeating")]
        HeatRecoveryForHeating = 10,
        
        [JsonProperty("HeatRejection")]
        HeatRejection = 11,
        
        [JsonProperty("Heating")]
        Heating = 12,
        
        [JsonProperty("HeatingCoils")]
        HeatingCoils = 13,
        
        [JsonProperty("Humidifier")]
        Humidifier = 14,
        
        [JsonProperty("InteriorEquipment")]
        InteriorEquipment = 15,
        
        [JsonProperty("InteriorLights")]
        InteriorLights = 16,
        
        [JsonProperty("OnSiteGeneration")]
        OnSiteGeneration = 17,
        
        [JsonProperty("Pumps")]
        Pumps = 18,
        
        [JsonProperty("Refrigeration")]
        Refrigeration = 19,
        
        [JsonProperty("WaterSystems")]
        WaterSystems = 20,
    }
}
namespace BH.oM.Adapters.EnergyPlus.Refrigeration
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"The Refrigeration Case object works in conjunction with a compressor rack, a refrigeration system, or a secondary loop to simulate the performance of a refrigerated case system. The object calculates the energy use for lights, fans and anti-sweat heaters and accounts for the sensible and latent heat exchange with the surrounding environment (termed ""case credits"") which impacts the temperature and humidity in the zone where the case is located.")]
    [JsonObject("Refrigeration:Case")]
    public class Refrigeration_Case : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("This must be a controlled zone and appear in a ZoneHVAC:EquipmentConnections obje" +
    "ct.")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("rated_ambient_temperature")]
public System.Nullable<float> RatedAmbientTemperature { get; set; } = (System.Nullable<float>)Single.Parse("23.9", CultureInfo.InvariantCulture);
        

[JsonProperty("rated_ambient_relative_humidity")]
public System.Nullable<float> RatedAmbientRelativeHumidity { get; set; } = (System.Nullable<float>)Single.Parse("55", CultureInfo.InvariantCulture);
        

[JsonProperty("rated_total_cooling_capacity_per_unit_length")]
public System.Nullable<float> RatedTotalCoolingCapacityPerUnitLength { get; set; } = (System.Nullable<float>)Single.Parse("1900", CultureInfo.InvariantCulture);
        

[JsonProperty("rated_latent_heat_ratio")]
public System.Nullable<float> RatedLatentHeatRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.3", CultureInfo.InvariantCulture);
        

[JsonProperty("rated_runtime_fraction")]
public System.Nullable<float> RatedRuntimeFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.85", CultureInfo.InvariantCulture);
        

[JsonProperty("case_length")]
public System.Nullable<float> CaseLength { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[JsonProperty("case_operating_temperature")]
public System.Nullable<float> CaseOperatingTemperature { get; set; } = (System.Nullable<float>)Single.Parse("1.1", CultureInfo.InvariantCulture);
        

[JsonProperty("latent_case_credit_curve_type")]
public Refrigeration_Case_LatentCaseCreditCurveType LatentCaseCreditCurveType { get; set; } = (Refrigeration_Case_LatentCaseCreditCurveType)Enum.Parse(typeof(Refrigeration_Case_LatentCaseCreditCurveType), "CaseTemperatureMethod");
        

[JsonProperty("latent_case_credit_curve_name")]
public string LatentCaseCreditCurveName { get; set; } = "";
        

[JsonProperty("standard_case_fan_power_per_unit_length")]
public System.Nullable<float> StandardCaseFanPowerPerUnitLength { get; set; } = (System.Nullable<float>)Single.Parse("75", CultureInfo.InvariantCulture);
        

[JsonProperty("operating_case_fan_power_per_unit_length")]
public System.Nullable<float> OperatingCaseFanPowerPerUnitLength { get; set; } = (System.Nullable<float>)Single.Parse("75", CultureInfo.InvariantCulture);
        

[JsonProperty("standard_case_lighting_power_per_unit_length")]
public System.Nullable<float> StandardCaseLightingPowerPerUnitLength { get; set; } = (System.Nullable<float>)Single.Parse("90", CultureInfo.InvariantCulture);
        

[Description("default set equal to Standard Case Lighting Power per Unit Length")]
[JsonProperty("installed_case_lighting_power_per_unit_length")]
public System.Nullable<float> InstalledCaseLightingPowerPerUnitLength { get; set; } = null;
        

[JsonProperty("case_lighting_schedule_name")]
public string CaseLightingScheduleName { get; set; } = "";
        

[JsonProperty("fraction_of_lighting_energy_to_case")]
public System.Nullable<float> FractionOfLightingEnergyToCase { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("case_anti_sweat_heater_power_per_unit_length")]
public System.Nullable<float> CaseAntiSweatHeaterPowerPerUnitLength { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field is only applicable to the Linear, Dewpoint Method, and Heat Balance Me" +
    "thod anti-sweat heater control types")]
[JsonProperty("minimum_anti_sweat_heater_power_per_unit_length")]
public System.Nullable<float> MinimumAntiSweatHeaterPowerPerUnitLength { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("anti_sweat_heater_control_type")]
public Refrigeration_Case_AntiSweatHeaterControlType AntiSweatHeaterControlType { get; set; } = (Refrigeration_Case_AntiSweatHeaterControlType)Enum.Parse(typeof(Refrigeration_Case_AntiSweatHeaterControlType), "None");
        

[Description("This field is only applicable to Linear AS heater control type Zone relative humi" +
    "dity (%) where anti-sweat heater energy is zero")]
[JsonProperty("humidity_at_zero_anti_sweat_heater_energy")]
public System.Nullable<float> HumidityAtZeroAntiSweatHeaterEnergy { get; set; } = (System.Nullable<float>)Single.Parse("-10", CultureInfo.InvariantCulture);
        

[Description("This field only applicable to Heat Balance Method AS heater control type Height m" +
    "ust be greater than zero if Heat Balance Method AS heater control is selected")]
[JsonProperty("case_height")]
public System.Nullable<float> CaseHeight { get; set; } = (System.Nullable<float>)Single.Parse("1.5", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_of_anti_sweat_heater_energy_to_case")]
public System.Nullable<float> FractionOfAntiSweatHeaterEnergyToCase { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Used to evaluate load on case as well as power or heat consumption")]
[JsonProperty("case_defrost_power_per_unit_length")]
public System.Nullable<float> CaseDefrostPowerPerUnitLength { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("case_defrost_type")]
public Refrigeration_Case_CaseDefrostType CaseDefrostType { get; set; } = (Refrigeration_Case_CaseDefrostType)Enum.Parse(typeof(Refrigeration_Case_CaseDefrostType), "OffCycle");
        

[Description("A case defrost schedule name is required unless case defrost type = None")]
[JsonProperty("case_defrost_schedule_name")]
public string CaseDefrostScheduleName { get; set; } = "";
        

[Description(@"If left blank, the defrost schedule will be used The start time for each defrost period in this drip-down schedule should coincide with the start time for each defrost period in the case defrost schedule (previous input field). The length of each defrost drip-down period must be greater than or equal to the corresponding defrost period specified in the case defrost schedule. This extra time allows the melted frost to drip from the coil before refrigeration is restarted.")]
[JsonProperty("case_defrost_drip_down_schedule_name")]
public string CaseDefrostDripDownScheduleName { get; set; } = "";
        

[Description("Case Temperature, Relative Humidity, and Dewpoint Method are applicable to case d" +
    "efrost types with temperature termination only.")]
[JsonProperty("defrost_energy_correction_curve_type")]
public Refrigeration_Case_DefrostEnergyCorrectionCurveType DefrostEnergyCorrectionCurveType { get; set; } = (Refrigeration_Case_DefrostEnergyCorrectionCurveType)Enum.Parse(typeof(Refrigeration_Case_DefrostEnergyCorrectionCurveType), "None");
        

[Description("Defrost Energy Correction Curve Name is applicable to case defrost types with tem" +
    "perature termination only.")]
[JsonProperty("defrost_energy_correction_curve_name")]
public string DefrostEnergyCorrectionCurveName { get; set; } = "";
        

[JsonProperty("under_case_hvac_return_air_fraction")]
public System.Nullable<float> UnderCaseHvacReturnAirFraction { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Schedule values should be in units of Watts per unit case length (W/m) Leave this" +
    " field blank if no restocking is to be modeled")]
[JsonProperty("refrigerated_case_restocking_schedule_name")]
public string RefrigeratedCaseRestockingScheduleName { get; set; } = "";
        

[Description("Schedule values should be from 0 to 1 Leave this field blank if no case credit fr" +
    "action is to be applied")]
[JsonProperty("case_credit_fraction_schedule_name")]
public string CaseCreditFractionScheduleName { get; set; } = "";
        

[Description(@"Required for detailed refrigeration system, not for compressor rack For a DX system, enter the saturated temperature for refrigerant pressure leaving case For a brine-cooled cooled (secondary system) case, enter the brine inlet temperature Default is 5 C less than case operating temperature")]
[JsonProperty("design_evaporator_temperature_or_brine_inlet_temperature")]
public System.Nullable<float> DesignEvaporatorTemperatureOrBrineInletTemperature { get; set; } = null;
        

[JsonProperty("average_refrigerant_charge_inventory")]
public System.Nullable<float> AverageRefrigerantChargeInventory { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Name of the return air node for this case. If left blank, defaults to the first r" +
    "eturn air node for this zone.")]
[JsonProperty("under_case_hvac_return_air_node_name")]
public string UnderCaseHvacReturnAirNodeName { get; set; } = "";
    }
    
    public enum Refrigeration_Case_LatentCaseCreditCurveType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CaseTemperatureMethod")]
        CaseTemperatureMethod = 1,
        
        [JsonProperty("DewpointMethod")]
        DewpointMethod = 2,
        
        [JsonProperty("RelativeHumidityMethod")]
        RelativeHumidityMethod = 3,
    }
    
    public enum Refrigeration_Case_AntiSweatHeaterControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Constant")]
        Constant = 1,
        
        [JsonProperty("DewpointMethod")]
        DewpointMethod = 2,
        
        [JsonProperty("HeatBalanceMethod")]
        HeatBalanceMethod = 3,
        
        [JsonProperty("Linear")]
        Linear = 4,
        
        [JsonProperty("None")]
        None = 5,
    }
    
    public enum Refrigeration_Case_CaseDefrostType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("ElectricWithTemperatureTermination")]
        ElectricWithTemperatureTermination = 2,
        
        [JsonProperty("HotFluid")]
        HotFluid = 3,
        
        [JsonProperty("HotFluidWithTemperatureTermination")]
        HotFluidWithTemperatureTermination = 4,
        
        [JsonProperty("HotGas")]
        HotGas = 5,
        
        [JsonProperty("HotGasWithTemperatureTermination")]
        HotGasWithTemperatureTermination = 6,
        
        [JsonProperty("None")]
        None = 7,
        
        [JsonProperty("OffCycle")]
        OffCycle = 8,
    }
    
    public enum Refrigeration_Case_DefrostEnergyCorrectionCurveType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CaseTemperatureMethod")]
        CaseTemperatureMethod = 1,
        
        [JsonProperty("DewpointMethod")]
        DewpointMethod = 2,
        
        [JsonProperty("None")]
        None = 3,
        
        [JsonProperty("RelativeHumidityMethod")]
        RelativeHumidityMethod = 4,
    }
    
    [Description(@"Works in conjunction with the refrigeration case and walk-in objects to simulate the performance of a refrigerated case system. This object models the electric consumption of the rack compressors and the condenser fans. Heat can be rejected either outdoors or to a zone. Compressor rack waste heat can also be reclaimed for use by an optional air- or water-heating coil (Coil:Heating:Desuperheater and Coil:WaterHeating:Desuperheater).")]
    [JsonObject("Refrigeration:CompressorRack")]
    public class Refrigeration_CompressorRack : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("heat_rejection_location")]
public Refrigeration_CompressorRack_HeatRejectionLocation HeatRejectionLocation { get; set; } = (Refrigeration_CompressorRack_HeatRejectionLocation)Enum.Parse(typeof(Refrigeration_CompressorRack_HeatRejectionLocation), "Outdoors");
        

[Description("It is important that this COP correspond to the lowest saturated suction temperat" +
    "ure needed to serve all refrigeration loads")]
[JsonProperty("design_compressor_rack_cop")]
public System.Nullable<float> DesignCompressorRackCop { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description("It is important that this COP curve correspond to the lowest saturated suction te" +
    "mperature needed to serve all refrigeration loads")]
[JsonProperty("compressor_rack_cop_function_of_temperature_curve_name")]
public string CompressorRackCopFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Design power for condenser fan(s).")]
[JsonProperty("design_condenser_fan_power")]
public System.Nullable<float> DesignCondenserFanPower { get; set; } = (System.Nullable<float>)Single.Parse("250", CultureInfo.InvariantCulture);
        

[JsonProperty("condenser_fan_power_function_of_temperature_curve_name")]
public string CondenserFanPowerFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Applicable only when Heat Rejection Location is Outdoors.")]
[JsonProperty("condenser_type")]
public Refrigeration_CompressorRack_CondenserType CondenserType { get; set; } = (Refrigeration_CompressorRack_CondenserType)Enum.Parse(typeof(Refrigeration_CompressorRack_CondenserType), "AirCooled");
        

[JsonProperty("water_cooled_condenser_inlet_node_name")]
public string WaterCooledCondenserInletNodeName { get; set; } = "";
        

[JsonProperty("water_cooled_condenser_outlet_node_name")]
public string WaterCooledCondenserOutletNodeName { get; set; } = "";
        

[Description("Applicable only when Condenser Type is WaterCooled.")]
[JsonProperty("water_cooled_loop_flow_type")]
public Refrigeration_CompressorRack_WaterCooledLoopFlowType WaterCooledLoopFlowType { get; set; } = (Refrigeration_CompressorRack_WaterCooledLoopFlowType)Enum.Parse(typeof(Refrigeration_CompressorRack_WaterCooledLoopFlowType), "VariableFlow");
        

[Description("Applicable only when loop Flow type is VariableFlow.")]
[JsonProperty("water_cooled_condenser_outlet_temperature_schedule_name")]
public string WaterCooledCondenserOutletTemperatureScheduleName { get; set; } = "";
        

[Description("Applicable only when loop flow type is ConstantFlow.")]
[JsonProperty("water_cooled_condenser_design_flow_rate")]
public System.Nullable<float> WaterCooledCondenserDesignFlowRate { get; set; } = null;
        

[JsonProperty("water_cooled_condenser_maximum_flow_rate")]
public System.Nullable<float> WaterCooledCondenserMaximumFlowRate { get; set; } = null;
        

[JsonProperty("water_cooled_condenser_maximum_water_outlet_temperature")]
public System.Nullable<float> WaterCooledCondenserMaximumWaterOutletTemperature { get; set; } = (System.Nullable<float>)Single.Parse("55", CultureInfo.InvariantCulture);
        

[JsonProperty("water_cooled_condenser_minimum_water_inlet_temperature")]
public System.Nullable<float> WaterCooledCondenserMinimumWaterInletTemperature { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 indicate that evaporative cooling of the condenser is available. This schedule allows the user to define seasonal shutdown/draining of the water cooling system in cold climate applications. For periods with schedule values of 0, the condenser operates as AirCooled.")]
[JsonProperty("evaporative_condenser_availability_schedule_name")]
public string EvaporativeCondenserAvailabilityScheduleName { get; set; } = "";
        

[Description("Applicable only for Condenser Type = EvaporativlyCooled.")]
[JsonProperty("evaporative_condenser_effectiveness")]
public System.Nullable<float> EvaporativeCondenserEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("Applicable only for Condenser Type = EvaporativelyCooled. Used to calculate evapo" +
    "rative condenser water use.")]
[JsonProperty("evaporative_condenser_air_flow_rate")]
public string EvaporativeCondenserAirFlowRate { get; set; } = (System.String)"Autocalculate";
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the evaporatively cooled condenser is available (field Evaporative Condenser Availability Schedule Name). For this situation, the heater heats the basin water when the outdoor air dry-bulb temperature falls below the setpoint temperature, but only when the condenser fans are off (i.e., no refrigerated case load).")]
[JsonProperty("basin_heater_capacity")]
public System.Nullable<float> BasinHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("200", CultureInfo.InvariantCulture);
        

[Description("Enter the outdoor dry-bulb temperature at which the basin heater turns on.")]
[JsonProperty("basin_heater_setpoint_temperature")]
public System.Nullable<float> BasinHeaterSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description("Design recirc water pump power for Condenser Type = EvaporativelyCooled. Applicab" +
    "le only for Condenser Type = EvaporativelyCooled.")]
[JsonProperty("design_evaporative_condenser_water_pump_power")]
public string DesignEvaporativeCondenserWaterPumpPower { get; set; } = (System.String)"1000";
        

[Description("If blank, water supply is from Mains. Applicable only for Condenser Type = Evapor" +
    "ativelyCooled.")]
[JsonProperty("evaporative_water_supply_tank_name")]
public string EvaporativeWaterSupplyTankName { get; set; } = "";
        

[Description(@"Applicable only when Heat Rejection Location is Outdoors and Condenser Type is not WaterCooled; otherwise, leave field blank. If field is left blank with Heat Rejection Location = Outdoors, then the model assumes that the Inlet Air conditions are the outdoor air conditions for the current timestep (e.g., no adjustment for height above ground).")]
[JsonProperty("condenser_air_inlet_node_name")]
public string CondenserAirInletNodeName { get; set; } = "";
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
        

[Description("Enter the name of a Refrigeration:Case or Refrigeration:Walkin or Refrigeration:C" +
    "aseAndWalkinList object.")]
[JsonProperty("refrigeration_case_name_or_walkin_name_or_caseandwalkinlist_name")]
public string RefrigerationCaseNameOrWalkinNameOrCaseandwalkinlistName { get; set; } = "";
        

[Description("This must be a controlled zone and appear in a ZoneHVAC:EquipmentConnections obje" +
    "ct. Required only if walk-in[s] are connected to this rack AND the heat rejectio" +
    "n location is \"Zone\"")]
[JsonProperty("heat_rejection_zone_name")]
public string HeatRejectionZoneName { get; set; } = "";
    }
    
    public enum Refrigeration_CompressorRack_HeatRejectionLocation
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Outdoors")]
        Outdoors = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    public enum Refrigeration_CompressorRack_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 3,
    }
    
    public enum Refrigeration_CompressorRack_WaterCooledLoopFlowType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("VariableFlow")]
        VariableFlow = 2,
    }
    
    [Description(@"Provides a list of all the refrigerated cases, walk in coolers, or air chillers cooled by a single refrigeration system. Note that the names of all cases, walk-ins ,air chillers, and CaseAndWalkInLists must be unique. That is, you cannot give a list the same name as one of list items. This list may contain a combination of case and walk-in names OR a list of air chiller names. Air chillers may not be included in any list that also includes cases or walk-ins.")]
    [JsonObject("Refrigeration:CaseAndWalkInList")]
    public class Refrigeration_CaseAndWalkInList : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("cases_and_walkins")]
public string CasesAndWalkins { get; set; } = "";
    }
    
    [Description("Air cooled condenser for a refrigeration system (Refrigeration:System).")]
    [JsonObject("Refrigeration:Condenser:AirCooled")]
    public class Refrigeration_Condenser_AirCooled : BHoMObject, IEnergyPlusClass
    {
        

[Description("Rating as per ARI 460 Be sure the rating corresponds to the correct refrigerant H" +
    "eatRejection(W)=C1 +C2(Condensing Temp - Entering Air Temp, deg C) Will be adjus" +
    "ted for elevation automatically")]
[JsonProperty("rated_effective_total_heat_rejection_rate_curve_name")]
public string RatedEffectiveTotalHeatRejectionRateCurveName { get; set; } = "";
        

[Description("must correspond to rating given for total heat rejection effect")]
[JsonProperty("rated_subcooling_temperature_difference")]
public System.Nullable<float> RatedSubcoolingTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("condenser_fan_speed_control_type")]
public Refrigeration_Condenser_AirCooled_CondenserFanSpeedControlType CondenserFanSpeedControlType { get; set; } = (Refrigeration_Condenser_AirCooled_CondenserFanSpeedControlType)Enum.Parse(typeof(Refrigeration_Condenser_AirCooled_CondenserFanSpeedControlType), "Fixed");
        

[Description("Power for condenser fan(s) corresponding to rated total heat rejection effect.")]
[JsonProperty("rated_fan_power")]
public System.Nullable<float> RatedFanPower { get; set; } = (System.Nullable<float>)Single.Parse("250", CultureInfo.InvariantCulture);
        

[Description("Minimum air flow fraction through condenser fan")]
[JsonProperty("minimum_fan_air_flow_ratio")]
public System.Nullable<float> MinimumFanAirFlowRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description(@"If field is left blank, then the model assumes that the inlet air conditions are the outdoor air conditions for the current timestep (e.g., no adjustment for height above ground). If the condenser rejects heat to a conditioned zone, enter the zone name here.")]
[JsonProperty("air_inlet_node_name_or_zone_name")]
public string AirInletNodeNameOrZoneName { get; set; } = "";
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
        

[Description("optional input")]
[JsonProperty("condenser_refrigerant_operating_charge_inventory")]
public System.Nullable<float> CondenserRefrigerantOperatingChargeInventory { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("optional input")]
[JsonProperty("condensate_receiver_refrigerant_inventory")]
public System.Nullable<float> CondensateReceiverRefrigerantInventory { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("optional input")]
[JsonProperty("condensate_piping_refrigerant_inventory")]
public System.Nullable<float> CondensatePipingRefrigerantInventory { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum Refrigeration_Condenser_AirCooled_CondenserFanSpeedControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Fixed")]
        Fixed = 1,
        
        [JsonProperty("FixedLinear")]
        FixedLinear = 2,
        
        [JsonProperty("TwoSpeed")]
        TwoSpeed = 3,
        
        [JsonProperty("VariableSpeed")]
        VariableSpeed = 4,
    }
    
    [Description("Evaporative-cooled condenser for a refrigeration system (Refrigeration:System).")]
    [JsonObject("Refrigeration:Condenser:EvaporativeCooled")]
    public class Refrigeration_Condenser_EvaporativeCooled : BHoMObject, IEnergyPlusClass
    {
        

[Description("Rating as per ARI 490 Be sure the rating corresponds to the correct refrigerant")]
[JsonProperty("rated_effective_total_heat_rejection_rate")]
public System.Nullable<float> RatedEffectiveTotalHeatRejectionRate { get; set; } = null;
        

[Description("must correspond to rating given for total heat rejection effect")]
[JsonProperty("rated_subcooling_temperature_difference")]
public System.Nullable<float> RatedSubcoolingTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("fan_speed_control_type")]
public Refrigeration_Condenser_EvaporativeCooled_FanSpeedControlType FanSpeedControlType { get; set; } = (Refrigeration_Condenser_EvaporativeCooled_FanSpeedControlType)Enum.Parse(typeof(Refrigeration_Condenser_EvaporativeCooled_FanSpeedControlType), "Fixed");
        

[Description("Power for condenser fan(s) corresponding to rated total heat rejection effect.")]
[JsonProperty("rated_fan_power")]
public System.Nullable<float> RatedFanPower { get; set; } = null;
        

[Description("Minimum air flow fraction through condenser fan")]
[JsonProperty("minimum_fan_air_flow_ratio")]
public System.Nullable<float> MinimumFanAirFlowRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("A1 in delta T = A1 + A2(hrcf) + A3/(hrcf) + A4(Twb)")]
[JsonProperty("approach_temperature_constant_term")]
public System.Nullable<float> ApproachTemperatureConstantTerm { get; set; } = (System.Nullable<float>)Single.Parse("6.63", CultureInfo.InvariantCulture);
        

[Description("A2 in delta T = A1 + A2(hrcf) +A3/(hrcf) +A4(Twb)")]
[JsonProperty("approach_temperature_coefficient_2")]
public System.Nullable<float> ApproachTemperatureCoefficient2 { get; set; } = (System.Nullable<float>)Single.Parse("0.468", CultureInfo.InvariantCulture);
        

[Description("A3 in delta T = A1 + A2(hrcf) +A3/(hrcf) +A4(Twb)")]
[JsonProperty("approach_temperature_coefficient_3")]
public System.Nullable<float> ApproachTemperatureCoefficient3 { get; set; } = (System.Nullable<float>)Single.Parse("17.93", CultureInfo.InvariantCulture);
        

[Description("A4 in deltaT=A1 + A2(hrcf) +A3/(hrcf) +A4(Twb)")]
[JsonProperty("approach_temperature_coefficient_4")]
public System.Nullable<float> ApproachTemperatureCoefficient4 { get; set; } = (System.Nullable<float>)Single.Parse("-0.322", CultureInfo.InvariantCulture);
        

[Description("taken from manufacturer\'s Heat Rejection Capacity Factor Table")]
[JsonProperty("minimum_capacity_factor")]
public System.Nullable<float> MinimumCapacityFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[Description("taken from manufacturer\'s Heat Rejection Capacity Factor Table")]
[JsonProperty("maximum_capacity_factor")]
public System.Nullable<float> MaximumCapacityFactor { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[Description("If field is left blank, then the model assumes that the inlet air conditions are " +
    "the outdoor air conditions for the current timestep (e.g., no adjustment for hei" +
    "ght above ground).")]
[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[Description("Used to calculate evaporative condenser water use and fan energy use.")]
[JsonProperty("rated_air_flow_rate")]
public string RatedAirFlowRate { get; set; } = (System.String)"Autocalculate";
        

[Description(@"This field is only used for periods when the evap condenser is available (field Evaporative Condenser Availability Schedule). For this situation, the heater heats the basin water when the outdoor air dry-bulb temperature falls below the set point temperature, but only when the condenser fans are off (i.e., no refrigerated case load).")]
[JsonProperty("basin_heater_capacity")]
public System.Nullable<float> BasinHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("200", CultureInfo.InvariantCulture);
        

[Description("Enter the outdoor dry-bulb temperature at which the basin heater turns on.")]
[JsonProperty("basin_heater_setpoint_temperature")]
public System.Nullable<float> BasinHeaterSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description("Design recirculating water pump power.")]
[JsonProperty("rated_water_pump_power")]
public string RatedWaterPumpPower { get; set; } = (System.String)"1000";
        

[Description("If blank, water supply is from Mains.")]
[JsonProperty("evaporative_water_supply_tank_name")]
public string EvaporativeWaterSupplyTankName { get; set; } = "";
        

[Description(@"Schedule values greater than 0 indicate that evaporative cooling of the condenser is available. This schedule allows the user to define seasonal shutdown/draining of the water cooling system in cold climate applications. For periods with schedule values of 0, the condenser operates as Air Cooled.")]
[JsonProperty("evaporative_condenser_availability_schedule_name")]
public string EvaporativeCondenserAvailabilityScheduleName { get; set; } = "";
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
        

[Description("optional input")]
[JsonProperty("condenser_refrigerant_operating_charge_inventory")]
public System.Nullable<float> CondenserRefrigerantOperatingChargeInventory { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("optional input")]
[JsonProperty("condensate_receiver_refrigerant_inventory")]
public System.Nullable<float> CondensateReceiverRefrigerantInventory { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("optional input")]
[JsonProperty("condensate_piping_refrigerant_inventory")]
public System.Nullable<float> CondensatePipingRefrigerantInventory { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum Refrigeration_Condenser_EvaporativeCooled_FanSpeedControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Fixed")]
        Fixed = 1,
        
        [JsonProperty("FixedLinear")]
        FixedLinear = 2,
        
        [JsonProperty("TwoSpeed")]
        TwoSpeed = 3,
        
        [JsonProperty("VariableSpeed")]
        VariableSpeed = 4,
    }
    
    [Description("Water cooled condenser for a refrigeration system (Refrigeration:System).")]
    [JsonObject("Refrigeration:Condenser:WaterCooled")]
    public class Refrigeration_Condenser_WaterCooled : BHoMObject, IEnergyPlusClass
    {
        

[Description("Rating as per ARI 450 Be sure the rating corresponds to the correct refrigerant n" +
    "ot used in calculations, only for identification and output")]
[JsonProperty("rated_effective_total_heat_rejection_rate")]
public System.Nullable<float> RatedEffectiveTotalHeatRejectionRate { get; set; } = null;
        

[Description("must correspond to rating given for total heat rejection effect")]
[JsonProperty("rated_condensing_temperature")]
public System.Nullable<float> RatedCondensingTemperature { get; set; } = null;
        

[Description("must correspond to rating given for total heat rejection effect")]
[JsonProperty("rated_subcooling_temperature_difference")]
public System.Nullable<float> RatedSubcoolingTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("must correspond to rating given for total heat rejection effect")]
[JsonProperty("rated_water_inlet_temperature")]
public System.Nullable<float> RatedWaterInletTemperature { get; set; } = null;
        

[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[JsonProperty("water_outlet_node_name")]
public string WaterOutletNodeName { get; set; } = "";
        

[JsonProperty("water_cooled_loop_flow_type")]
public Refrigeration_Condenser_WaterCooled_WaterCooledLoopFlowType WaterCooledLoopFlowType { get; set; } = (Refrigeration_Condenser_WaterCooled_WaterCooledLoopFlowType)Enum.Parse(typeof(Refrigeration_Condenser_WaterCooled_WaterCooledLoopFlowType), "VariableFlow");
        

[Description("Applicable only when loop flow type is Variable Flow.")]
[JsonProperty("water_outlet_temperature_schedule_name")]
public string WaterOutletTemperatureScheduleName { get; set; } = "";
        

[Description("note required units must be converted from L/s as specified in ARI 450-2007 Appli" +
    "cable only when loop flow type is Constant Flow.")]
[JsonProperty("water_design_flow_rate")]
public System.Nullable<float> WaterDesignFlowRate { get; set; } = null;
        

[JsonProperty("water_maximum_flow_rate")]
public System.Nullable<float> WaterMaximumFlowRate { get; set; } = null;
        

[JsonProperty("water_maximum_water_outlet_temperature")]
public System.Nullable<float> WaterMaximumWaterOutletTemperature { get; set; } = (System.Nullable<float>)Single.Parse("55", CultureInfo.InvariantCulture);
        

[Description("related to the minimum allowed refrigeration system condensing temperature")]
[JsonProperty("water_minimum_water_inlet_temperature")]
public System.Nullable<float> WaterMinimumWaterInletTemperature { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
        

[Description("optional input")]
[JsonProperty("condenser_refrigerant_operating_charge_inventory")]
public System.Nullable<float> CondenserRefrigerantOperatingChargeInventory { get; set; } = null;
        

[Description("optional input")]
[JsonProperty("condensate_receiver_refrigerant_inventory")]
public System.Nullable<float> CondensateReceiverRefrigerantInventory { get; set; } = null;
        

[Description("optional input")]
[JsonProperty("condensate_piping_refrigerant_inventory")]
public System.Nullable<float> CondensatePipingRefrigerantInventory { get; set; } = null;
    }
    
    public enum Refrigeration_Condenser_WaterCooled_WaterCooledLoopFlowType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("VariableFlow")]
        VariableFlow = 2,
    }
    
    [Description(@"Cascade condenser for a refrigeration system (Refrigeration:System). The cascade condenser is unlike the other condenser options because it rejects heat to another, higher-temperature, refrigeration system. That is, the cascade condenser acts as a heat rejection object for one system, but acts as a refrigeration load for another system.")]
    [JsonObject("Refrigeration:Condenser:Cascade")]
    public class Refrigeration_Condenser_Cascade : BHoMObject, IEnergyPlusClass
    {
        

[Description("This is the condensing temperature for the lower temperature secondary loop")]
[JsonProperty("rated_condensing_temperature")]
public System.Nullable<float> RatedCondensingTemperature { get; set; } = null;
        

[Description("This is the difference between the condensing and evaporating temperatures")]
[JsonProperty("rated_approach_temperature_difference")]
public System.Nullable<float> RatedApproachTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description("used for identification and rough system size error checking")]
[JsonProperty("rated_effective_total_heat_rejection_rate")]
public System.Nullable<float> RatedEffectiveTotalHeatRejectionRate { get; set; } = null;
        

[Description("Fixed keeps condensing temperature constant Float sets the condensing temperature" +
    " according to the other loads on the higher temperature system")]
[JsonProperty("condensing_temperature_control_type")]
public Refrigeration_Condenser_Cascade_CondensingTemperatureControlType CondensingTemperatureControlType { get; set; } = (Refrigeration_Condenser_Cascade_CondensingTemperatureControlType)Enum.Parse(typeof(Refrigeration_Condenser_Cascade_CondensingTemperatureControlType), "Fixed");
        

[Description("optional input")]
[JsonProperty("condenser_refrigerant_operating_charge_inventory")]
public System.Nullable<float> CondenserRefrigerantOperatingChargeInventory { get; set; } = null;
        

[Description("optional input")]
[JsonProperty("condensate_receiver_refrigerant_inventory")]
public System.Nullable<float> CondensateReceiverRefrigerantInventory { get; set; } = null;
        

[Description("optional input")]
[JsonProperty("condensate_piping_refrigerant_inventory")]
public System.Nullable<float> CondensatePipingRefrigerantInventory { get; set; } = null;
    }
    
    public enum Refrigeration_Condenser_Cascade_CondensingTemperatureControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Fixed")]
        Fixed = 1,
        
        [JsonProperty("Float")]
        Float = 2,
    }
    
    [Description("The transcritical refrigeration system requires a single gas cooler to reject the" +
        " system heat.")]
    [JsonObject("Refrigeration:GasCooler:AirCooled")]
    public class Refrigeration_GasCooler_AirCooled : BHoMObject, IEnergyPlusClass
    {
        

[Description("Be sure the rating corresponds to the correct refrigerant (R744) HeatRejection(W)" +
    "=C1 +C2(Gas Cooler Outlet Temp - Entering Air Temp, deg C) Will be adjusted for " +
    "elevation automatically")]
[JsonProperty("rated_total_heat_rejection_rate_curve_name")]
public string RatedTotalHeatRejectionRateCurveName { get; set; } = "";
        

[JsonProperty("gas_cooler_fan_speed_control_type")]
public Refrigeration_GasCooler_AirCooled_GasCoolerFanSpeedControlType GasCoolerFanSpeedControlType { get; set; } = (Refrigeration_GasCooler_AirCooled_GasCoolerFanSpeedControlType)Enum.Parse(typeof(Refrigeration_GasCooler_AirCooled_GasCoolerFanSpeedControlType), "Fixed");
        

[Description("Power for gas cooler fan(s) corresponding to rated total heat rejection effect.")]
[JsonProperty("rated_fan_power")]
public System.Nullable<float> RatedFanPower { get; set; } = (System.Nullable<float>)Single.Parse("5000", CultureInfo.InvariantCulture);
        

[Description("Minimum air flow fraction through gas cooler fan")]
[JsonProperty("minimum_fan_air_flow_ratio")]
public System.Nullable<float> MinimumFanAirFlowRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("Temperature at which system transitions between subcritical and transcritical ope" +
    "ration.")]
[JsonProperty("transition_temperature")]
public System.Nullable<float> TransitionTemperature { get; set; } = (System.Nullable<float>)Single.Parse("27", CultureInfo.InvariantCulture);
        

[Description("Temperature difference between the CO2 exiting the gas cooler and the air enterin" +
    "g the gas cooler during transcritical operation.")]
[JsonProperty("transcritical_approach_temperature")]
public System.Nullable<float> TranscriticalApproachTemperature { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[Description("Temperature difference between the saturated condensing temperature and the air t" +
    "emperature during subcritical operation.")]
[JsonProperty("subcritical_temperature_difference")]
public System.Nullable<float> SubcriticalTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("Minimum saturated condensing temperature during subcritical operation.")]
[JsonProperty("minimum_condensing_temperature")]
public System.Nullable<float> MinimumCondensingTemperature { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("If field is left blank, then the model assumes that the inlet air conditions are " +
    "the outdoor air conditions for the current timestep (e.g., no adjustment for hei" +
    "ght above ground).")]
[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
        

[Description("optional input")]
[JsonProperty("gas_cooler_refrigerant_operating_charge_inventory")]
public System.Nullable<float> GasCoolerRefrigerantOperatingChargeInventory { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("optional input")]
[JsonProperty("gas_cooler_receiver_refrigerant_inventory")]
public System.Nullable<float> GasCoolerReceiverRefrigerantInventory { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("optional input")]
[JsonProperty("gas_cooler_outlet_piping_refrigerant_inventory")]
public System.Nullable<float> GasCoolerOutletPipingRefrigerantInventory { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum Refrigeration_GasCooler_AirCooled_GasCoolerFanSpeedControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Fixed")]
        Fixed = 1,
        
        [JsonProperty("FixedLinear")]
        FixedLinear = 2,
        
        [JsonProperty("TwoSpeed")]
        TwoSpeed = 3,
        
        [JsonProperty("VariableSpeed")]
        VariableSpeed = 4,
    }
    
    [Description(@"A refrigeration system may provide cooling to other, secondary, systems through either a secondary loop or a cascade condenser. If multiple transfer loads are served by a single primary system, use this list to group them together for reference by the primary system (see the field ""Refrigeration Transfer Load or TransferLoad List Name"" in the Refrigeration:System object).")]
    [JsonObject("Refrigeration:TransferLoadList")]
    public class Refrigeration_TransferLoadList : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("transfer_loads")]
public string TransferLoads { get; set; } = "";
    }
    
    [Description(@"Two types of subcoolers are modeled by the detailed refrigeration system. The liquid suction heat exchanger uses cool suction gas to subcool the hot condensate after it leaves the condenser and before it reaches the thermal expansion valve. A mechanical subcooler is used to transfer cooling capacity from one refrigeration system to another.")]
    [JsonObject("Refrigeration:Subcooler")]
    public class Refrigeration_Subcooler : BHoMObject, IEnergyPlusClass
    {
        

[Description("plan to add ambient subcoolers at future time")]
[JsonProperty("subcooler_type")]
public Refrigeration_Subcooler_SubcoolerType SubcoolerType { get; set; } = (Refrigeration_Subcooler_SubcoolerType)Enum.Parse(typeof(Refrigeration_Subcooler_SubcoolerType), "LiquidSuction");
        

[Description("Applicable only and required for liquid suction heat exchangers design liquid suc" +
    "tion subcooling")]
[JsonProperty("liquid_suction_design_subcooling_temperature_difference")]
public System.Nullable<float> LiquidSuctionDesignSubcoolingTemperatureDifference { get; set; } = null;
        

[Description("design inlet temperature on liquid side Applicable only and required for liquid s" +
    "uction heat exchangers (LSHX)")]
[JsonProperty("design_liquid_inlet_temperature")]
public System.Nullable<float> DesignLiquidInletTemperature { get; set; } = null;
        

[Description("design inlet temperature on vapor side Applicable only and required for liquid su" +
    "ction heat exchangers (LSHX) Design vapor inlet temperature must be less than or" +
    " equal to the Liquid inlet design temp")]
[JsonProperty("design_vapor_inlet_temperature")]
public System.Nullable<float> DesignVaporInletTemperature { get; set; } = null;
        

[Description("Name of the Detailed Refrigeration System providing cooling capacity Applicable o" +
    "nly and required for mechanical subcoolers")]
[JsonProperty("capacity_providing_system")]
public string CapacityProvidingSystem { get; set; } = "";
        

[Description("Control Temperature Out for subcooled liquid Applicable only and required for mec" +
    "hanical subcoolers")]
[JsonProperty("outlet_control_temperature")]
public System.Nullable<float> OutletControlTemperature { get; set; } = null;
    }
    
    public enum Refrigeration_Subcooler_SubcoolerType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LiquidSuction")]
        LiquidSuction = 1,
        
        [JsonProperty("Mechanical")]
        Mechanical = 2,
    }
    
    [Description("Refrigeration system compressor. Data is available for many compressors in the Re" +
        "frigerationCompressor.idf dataset")]
    [JsonObject("Refrigeration:Compressor")]
    public class Refrigeration_Compressor : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"the input order for the Curve:Bicubic does not match the ARI 540-2004 Eq. 1 coefficient order N1 is ARI_C1, N2 is ARI_C2, N3 is ARI_C4, N4 is ARI_C3, N5 is ARI_C6, N6 is ARI_C5, N7 is ARI_C7, N8 is ARI_C10, N9 is ARI_C8, N10 is ARI_C9, N11 is Minimum Suction dewpoint temperature, N12 is Maximum Suction dewpoint temperature, N13 is Minimum Discharge dewpoint temperature, N14 is Maximum Discharge dewpoint temperature")]
[JsonProperty("refrigeration_compressor_power_curve_name")]
public string RefrigerationCompressorPowerCurveName { get; set; } = "";
        

[Description(@"the input order for the Curve:Bicubic does not match the ARI 540-2004 Eq. 1 coefficient order N1 is ARI_C1, N2 is ARI_C2, N3 is ARI_C4, N4 is ARI_C3, N5 is ARI_C6, N6 is ARI_C5, N7 is ARI_C7, N8 is ARI_C10, N9 is ARI_C8, N10 is ARI_C9, N11 is Minimum Suction dewpoint temperature, N12 is Maximum Suction dewpoint temperature, N13 is Minimum Discharge dewpoint temperature, N14 is Maximum Discharge dewpoint temperature")]
[JsonProperty("refrigeration_compressor_capacity_curve_name")]
public string RefrigerationCompressorCapacityCurveName { get; set; } = "";
        

[Description("Use this input field OR the next, not both This is used if the compressor rating " +
    "is based upon degrees of superheat")]
[JsonProperty("rated_superheat")]
public System.Nullable<float> RatedSuperheat { get; set; } = null;
        

[Description("Use this input field OR the previous, not both This is used if the compressor rat" +
    "ing is based upon rated return gas temperature (Rated Suction Temperature)")]
[JsonProperty("rated_return_gas_temperature")]
public System.Nullable<float> RatedReturnGasTemperature { get; set; } = null;
        

[Description("Use this input field OR the next, not both This is used if the compressor rating " +
    "is based upon rated liquid temperature at the expansion valve")]
[JsonProperty("rated_liquid_temperature")]
public System.Nullable<float> RatedLiquidTemperature { get; set; } = null;
        

[Description("Use this input field OR the previous, not both This is used if the compressor rat" +
    "ing is based upon degrees of subcooling")]
[JsonProperty("rated_subcooling")]
public System.Nullable<float> RatedSubcooling { get; set; } = null;
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
        

[JsonProperty("mode_of_operation")]
public Refrigeration_Compressor_ModeOfOperation ModeOfOperation { get; set; } = (Refrigeration_Compressor_ModeOfOperation)Enum.Parse(typeof(Refrigeration_Compressor_ModeOfOperation), "Subcritical");
        

[JsonProperty("transcritical_compressor_power_curve_name")]
public string TranscriticalCompressorPowerCurveName { get; set; } = "";
        

[JsonProperty("transcritical_compressor_capacity_curve_name")]
public string TranscriticalCompressorCapacityCurveName { get; set; } = "";
    }
    
    public enum Refrigeration_Compressor_ModeOfOperation
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Subcritical")]
        Subcritical = 1,
        
        [JsonProperty("Transcritical")]
        Transcritical = 2,
    }
    
    [Description(@"List of all the compressors included within a single refrigeration system (Refrigeration:System). Each list must contain at least one compressor. The order in which the individual compressors are listed here will be the order in which the compressors are dispatched to meet the system load. IMPORTANT: List compressor names in the order in which the compressors will be loaded Data is available for many compressors in the RefrigerationCompressor.idf dataset")]
    [JsonObject("Refrigeration:CompressorList")]
    public class Refrigeration_CompressorList : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("compressors")]
public string Compressors { get; set; } = "";
    }
    
    [Description("Simulates the performance of a supermarket refrigeration system when used along w" +
        "ith other objects to define the refrigeration load(s), the compressor(s), and th" +
        "e condenser.")]
    [JsonObject("Refrigeration:System")]
    public class Refrigeration_System : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object. If there is more than one refrigerated case or walk-in served by this system, enter the name of a Refrigeration:CaseAndWalkInList object. Only cases and walkins served directly by the system should be included in this list. Any cases served indirectly via a secondary chiller should NOT be included in this list")]
[JsonProperty("refrigerated_case_or_walkin_or_caseandwalkinlist_name")]
public string RefrigeratedCaseOrWalkinOrCaseandwalkinlistName { get; set; } = "";
        

[Description(@"Enter the name of a Refrigeration:SecondarySystem object OR a Refrigeration:Condenser:Cascade object OR, a Refrigeration:TransferLoadList object. A transfer load is identified as one which moves the load from one system to another. So if you have more than one such load (including cascade condensers and secondary loops) served by the same system, use a TransferLoadList object.")]
[JsonProperty("refrigeration_transfer_load_or_transferload_list_name")]
public string RefrigerationTransferLoadOrTransferloadListName { get; set; } = "";
        

[JsonProperty("refrigeration_condenser_name")]
public string RefrigerationCondenserName { get; set; } = "";
        

[JsonProperty("compressor_or_compressorlist_name")]
public string CompressorOrCompressorlistName { get; set; } = "";
        

[Description("related to the proper operation of the thermal expansion valves and compressors")]
[JsonProperty("minimum_condensing_temperature")]
public System.Nullable<float> MinimumCondensingTemperature { get; set; } = null;
        

[Description(@"Fluid property data for the refrigerant must be entered. The fluid property data, including the objects: FluidProperties:Name, FluidProperties:Temperatures, FluidProperties:Saturated and FluidProperties:Superheated can be copied from the FluidPropertiesRefData.idf dataset")]
[JsonProperty("refrigeration_system_working_fluid_type")]
public string RefrigerationSystemWorkingFluidType { get; set; } = "";
        

[JsonProperty("suction_temperature_control_type")]
public Refrigeration_System_SuctionTemperatureControlType SuctionTemperatureControlType { get; set; } = (Refrigeration_System_SuctionTemperatureControlType)Enum.Parse(typeof(Refrigeration_System_SuctionTemperatureControlType), "ConstantSuctionTemperature");
        

[Description("Optional Field Recipient of refrigeration capacity, that is receives cool liquid " +
    "from another refrigeration system to help meet aggregate case loads")]
[JsonProperty("mechanical_subcooler_name")]
public string MechanicalSubcoolerName { get; set; } = "";
        

[Description("Optional Field Liquid Suction Heat Exchanger Name, or leave blank")]
[JsonProperty("liquid_suction_heat_exchanger_subcooler_name")]
public string LiquidSuctionHeatExchangerSubcoolerName { get; set; } = "";
        

[Description("Use only if you want to include suction piping heat gain in refrigeration load")]
[JsonProperty("sum_ua_suction_piping")]
public System.Nullable<float> SumUaSuctionPiping { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This will be used to determine the temperature used for distribution piping heat " +
    "gain and the pipe heat gains  as cooling credit for the zone. Required only if S" +
    "um UA Distribution Piping >0.0")]
[JsonProperty("suction_piping_zone_name")]
public string SuctionPipingZoneName { get; set; } = "";
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
        

[JsonProperty("number_of_compressor_stages")]
public string NumberOfCompressorStages { get; set; } = (System.String)"1";
        

[JsonProperty("intercooler_type")]
public Refrigeration_System_IntercoolerType IntercoolerType { get; set; } = (Refrigeration_System_IntercoolerType)Enum.Parse(typeof(Refrigeration_System_IntercoolerType), "None");
        

[JsonProperty("shell_and_coil_intercooler_effectiveness")]
public System.Nullable<float> ShellAndCoilIntercoolerEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[JsonProperty("high_stage_compressor_or_compressorlist_name")]
public string HighStageCompressorOrCompressorlistName { get; set; } = "";
    }
    
    public enum Refrigeration_System_SuctionTemperatureControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantSuctionTemperature")]
        ConstantSuctionTemperature = 1,
        
        [JsonProperty("FloatSuctionTemperature")]
        FloatSuctionTemperature = 2,
    }
    
    public enum Refrigeration_System_IntercoolerType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Flash Intercooler")]
        FlashIntercooler = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Shell-and-Coil Intercooler")]
        ShellandCoilIntercooler = 3,
    }
    
    [Description("Detailed transcritical carbon dioxide (CO2) booster refrigeration systems used in" +
        " supermarkets. The object allows for modeling either a single stage system with " +
        "medium-temperature loads or a two stage system with both medium- and low-tempera" +
        "ture loads.")]
    [JsonObject("Refrigeration:TranscriticalSystem")]
    public class Refrigeration_TranscriticalSystem : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("system_type")]
public Refrigeration_TranscriticalSystem_SystemType SystemType { get; set; } = (Refrigeration_TranscriticalSystem_SystemType)Enum.Parse(typeof(Refrigeration_TranscriticalSystem_SystemType), "SingleStage");
        

[Description(@"Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object. If there is more than one refrigerated case or walk-in served by this system, enter the name of a Refrigeration:CaseAndWalkInList object. Only medium temperature cases and walk-ins served directly by the system should be included in this list.")]
[JsonProperty("medium_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name")]
public string MediumTemperatureRefrigeratedCaseOrWalkinOrCaseandwalkinlistName { get; set; } = "";
        

[Description(@"Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object. If there is more than one refrigerated case or walk-in served by this system, enter the name of a Refrigeration:CaseAndWalkInList object. Only low temperature cases and walkins served directly by the system should be included in this list.")]
[JsonProperty("low_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name")]
public string LowTemperatureRefrigeratedCaseOrWalkinOrCaseandwalkinlistName { get; set; } = "";
        

[JsonProperty("refrigeration_gas_cooler_name")]
public string RefrigerationGasCoolerName { get; set; } = "";
        

[JsonProperty("high_pressure_compressor_or_compressorlist_name")]
public string HighPressureCompressorOrCompressorlistName { get; set; } = "";
        

[JsonProperty("low_pressure_compressor_or_compressorlist_name")]
public string LowPressureCompressorOrCompressorlistName { get; set; } = "";
        

[JsonProperty("receiver_pressure")]
public System.Nullable<float> ReceiverPressure { get; set; } = (System.Nullable<float>)Single.Parse("4000000", CultureInfo.InvariantCulture);
        

[JsonProperty("subcooler_effectiveness")]
public System.Nullable<float> SubcoolerEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.4", CultureInfo.InvariantCulture);
        

[Description(@"Fluid property data for the refrigerant must be entered. The fluid property data, including the objects: FluidProperties:Name, FluidProperties:Temperatures, FluidProperties:Saturated and FluidProperties:Superheated can be copied from the FluidPropertiesRefData.idf dataset")]
[JsonProperty("refrigeration_system_working_fluid_type")]
public string RefrigerationSystemWorkingFluidType { get; set; } = "";
        

[Description("Use only if you want to include suction piping heat gain in refrigeration load")]
[JsonProperty("sum_ua_suction_piping_for_medium_temperature_loads")]
public System.Nullable<float> SumUaSuctionPipingForMediumTemperatureLoads { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This will be used to determine the temperature used for distribution piping heat " +
    "gain and the pipe heat gains as cooling credit for the zone. Required only if Su" +
    "m UA Distribution Piping for Medium Temperature Loads > 0.0")]
[JsonProperty("medium_temperature_suction_piping_zone_name")]
public string MediumTemperatureSuctionPipingZoneName { get; set; } = "";
        

[Description("Use only if you want to include suction piping heat gain in refrigeration load")]
[JsonProperty("sum_ua_suction_piping_for_low_temperature_loads")]
public System.Nullable<float> SumUaSuctionPipingForLowTemperatureLoads { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This will be used to determine the temperature used for distribution piping heat " +
    "gain and the pipe heat gains as cooling credit for the zone. Required only if Su" +
    "m UA Distribution Piping for Low Temperature Loads > 0.0")]
[JsonProperty("low_temperature_suction_piping_zone_name")]
public string LowTemperatureSuctionPipingZoneName { get; set; } = "";
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum Refrigeration_TranscriticalSystem_SystemType
    {
        
        [JsonProperty("SingleStage")]
        SingleStage = 0,
        
        [JsonProperty("TwoStage")]
        TwoStage = 1,
    }
    
    [Description(@"Works in conjunction with refrigerated cases and walkins to simulate the performance of a secondary loop supermarket refrigeration system. Heat from the refrigeration loads served by the secondary loop is absorbed by a primary refrigeration system (Refrigeration:System). The SecondarySystem object simulates a heat exchanger that is an evaporator, or refrigeration load, on the primary refrigeration system.")]
    [JsonObject("Refrigeration:SecondarySystem")]
    public class Refrigeration_SecondarySystem : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object. If there i" +
    "s more than one refrigerated case or walk-in served by this secondary system, en" +
    "ter the name of a Refrigeration:CaseAndWalkInList object.")]
[JsonProperty("refrigerated_case_or_walkin_or_caseandwalkinlist_name")]
public string RefrigeratedCaseOrWalkinOrCaseandwalkinlistName { get; set; } = "";
        

[Description(@"If ""FluidAlwaysLiquid"" is selected, the fluid properties must be input using the objects: FluidProperties:Name, FluidProperties:GlycolConcentration, and, if user defined fluid type, FluidProperties:Temperatures and FluidProperties:Concentration. Many sets of fluid properties can be found in GlycolPropertiesRefData.idf. If ""FluidPhaseChange"" is selected, the refrigerant properties must be input using the objects: (if user defined fluid type): FluidProperties:Name, FluidProperties:Temperatures, FluidProperties:Saturated, and FluidProperties:Superheated. Many sets of refrigerant data can be found in FluidPropertiesRefData.idf.")]
[JsonProperty("circulating_fluid_type")]
public Refrigeration_SecondarySystem_CirculatingFluidType CirculatingFluidType { get; set; } = (Refrigeration_SecondarySystem_CirculatingFluidType)Enum.Parse(typeof(Refrigeration_SecondarySystem_CirculatingFluidType), "FluidAlwaysLiquid");
        

[Description("This must correspond to a name in the FluidProperties:Name object.")]
[JsonProperty("circulating_fluid_name")]
public string CirculatingFluidName { get; set; } = "";
        

[Description(@"For ""FluidAlwaysLiquid"", at least one of the two, Evaporator Capacity OR Evaporator Flow Rate for Secondary Fluid, is required. For ""FluidPhaseChange"", the default capacity is the sum of the rated capacities of the Cases and Walk-ins served by the secondary loop.")]
[JsonProperty("evaporator_capacity")]
public System.Nullable<float> EvaporatorCapacity { get; set; } = null;
        

[Description("For \"FluidAlwaysLiquid\", at least one of the two, Evaporator Capacity OR Evaporat" +
    "or Flow Rate for Secondary Fluid, is required. For \"FluidPhaseChange\" loops, thi" +
    "s input is not used. (see PhaseChange Circulating Rate)")]
[JsonProperty("evaporator_flow_rate_for_secondary_fluid")]
public System.Nullable<float> EvaporatorFlowRateForSecondaryFluid { get; set; } = null;
        

[Description("This is the evaporating temperature in the heat exchanger used to chill or conden" +
    "se the secondary loop circulating fluid. It is NOT the temperature in any cases " +
    "or walk-ins served by the secondary loop.")]
[JsonProperty("evaporator_evaporating_temperature")]
public System.Nullable<float> EvaporatorEvaporatingTemperature { get; set; } = null;
        

[Description(@"For ""FluidAlwaysLiquid"", this is the rated difference between the temperature of the circulating fluid leaving the heat exchanger and the heat exchanger's rated evaporating temperature. For ""FluidPhaseChange"", this is the difference between the temperature of the evaporating and condensing temperatures in the heat exchanger.")]
[JsonProperty("evaporator_approach_temperature_difference")]
public System.Nullable<float> EvaporatorApproachTemperatureDifference { get; set; } = null;
        

[Description(@"For ""FluidAlwaysLiquid"", this is the rated difference between the temperature of the circulating fluid entering the heat exchanger and the temperature of the circulating fluid leaving the heat exchanger, and is Required. For ""FluidPhaseChange"", this input is not used.")]
[JsonProperty("evaporator_range_temperature_difference")]
public System.Nullable<float> EvaporatorRangeTemperatureDifference { get; set; } = null;
        

[JsonProperty("number_of_pumps_in_loop")]
public System.Nullable<float> NumberOfPumpsInLoop { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("For \"FluidAlwaysLiquid\",if not input, Evaporator Flow Rate for Secondary Fluid wi" +
    "ll be used. For \"FluidPhaseChange\", if not input, this will be calculated using " +
    "the PhaseChange Circulating Rate.")]
[JsonProperty("total_pump_flow_rate")]
public System.Nullable<float> TotalPumpFlowRate { get; set; } = null;
        

[Description("Either the Total Pump Power or the Total Pump Head is required.")]
[JsonProperty("total_pump_power")]
public System.Nullable<float> TotalPumpPower { get; set; } = null;
        

[Description("Either the Total Pump Power or the Total Pump Head is required.")]
[JsonProperty("total_pump_head")]
public System.Nullable<float> TotalPumpHead { get; set; } = null;
        

[Description("This is the total mass flow at the pump divided by the gaseous mass flow leaving " +
    "the refrigeration load.")]
[JsonProperty("phasechange_circulating_rate")]
public System.Nullable<float> PhasechangeCirculatingRate { get; set; } = (System.Nullable<float>)Single.Parse("2.5", CultureInfo.InvariantCulture);
        

[JsonProperty("pump_drive_type")]
public Refrigeration_SecondarySystem_PumpDriveType PumpDriveType { get; set; } = (Refrigeration_SecondarySystem_PumpDriveType)Enum.Parse(typeof(Refrigeration_SecondarySystem_PumpDriveType), "Constant");
        

[Description("Variable Speed Pump Curve Name is applicable to variable speed pumps only.")]
[JsonProperty("variable_speed_pump_cubic_curve_name")]
public string VariableSpeedPumpCubicCurveName { get; set; } = "";
        

[Description("This is the portion of the pump motor heat added to secondary circulating fluid a" +
    "nd is equal to the motor efficiency for non-hermetic motor. Enter 1.0 for a semi" +
    "-hermetic motor.")]
[JsonProperty("pump_motor_heat_to_fluid")]
public System.Nullable<float> PumpMotorHeatToFluid { get; set; } = (System.Nullable<float>)Single.Parse("0.85", CultureInfo.InvariantCulture);
        

[Description("Use only if you want to include distribution piping heat gain in refrigeration lo" +
    "ad.")]
[JsonProperty("sum_ua_distribution_piping")]
public System.Nullable<float> SumUaDistributionPiping { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This will be used to determine the temperature used for distribution piping heat " +
    "gain. The pipe heat gains are also counted as cooling credit for the zone. Requi" +
    "red only if Sum UA Distribution Piping >0.0")]
[JsonProperty("distribution_piping_zone_name")]
public string DistributionPipingZoneName { get; set; } = "";
        

[Description("Use only if you want to include Receiver/Separator Shell heat gain in refrigerati" +
    "on load.")]
[JsonProperty("sum_ua_receiver_separator_shell")]
public System.Nullable<float> SumUaReceiverSeparatorShell { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This will be used to determine the temperature used for Receiver/Separator Shell " +
    "heat gain. The shell heat gains are also counted as cooling credit for the zone." +
    " Required only if Sum UA Receiver/Separator Shell >0.0")]
[JsonProperty("receiver_separator_zone_name")]
public string ReceiverSeparatorZoneName { get; set; } = "";
        

[Description("This value refers to the refrigerant circulating within the primary system provid" +
    "ing cooling to the chiller for the secondary loop, not to the fluid circulating " +
    "within the secondary loop itself.")]
[JsonProperty("evaporator_refrigerant_inventory")]
public System.Nullable<float> EvaporatorRefrigerantInventory { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum Refrigeration_SecondarySystem_CirculatingFluidType
    {
        
        [JsonProperty("FluidAlwaysLiquid")]
        FluidAlwaysLiquid = 0,
        
        [JsonProperty("FluidPhaseChange")]
        FluidPhaseChange = 1,
    }
    
    public enum Refrigeration_SecondarySystem_PumpDriveType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Constant")]
        Constant = 1,
        
        [JsonProperty("Variable")]
        Variable = 2,
    }
    
    [Description(@"Works in conjunction with a compressor rack, a refrigeration system, or a refrigeration secondary system to simulate the performance of a walk-in cooler. The walk-in cooler model uses information at rated conditions along with input descriptions for heat transfer surfaces facing multiple zones to determine performance.")]
    [JsonObject("Refrigeration:WalkIn")]
    public class Refrigeration_WalkIn : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("rated_coil_cooling_capacity")]
public System.Nullable<float> RatedCoilCoolingCapacity { get; set; } = null;
        

[JsonProperty("operating_temperature")]
public System.Nullable<float> OperatingTemperature { get; set; } = null;
        

[Description("If DXEvaporator, use evaporating temperature (saturated suction temperature) If B" +
    "rineCoil, use Brine entering temperature used to set minimum suction pressure fo" +
    "r DX systems and minimum brine temp for secondary systems")]
[JsonProperty("rated_cooling_source_temperature")]
public System.Nullable<float> RatedCoolingSourceTemperature { get; set; } = null;
        

[Description("Include total for all anti-sweat, door, drip-pan, and floor heater power Do not i" +
    "nclude defrost heater power")]
[JsonProperty("rated_total_heating_power")]
public System.Nullable<float> RatedTotalHeatingPower { get; set; } = null;
        

[Description("Values will be used to multiply the total heating power Values in the schedule sh" +
    "ould be between 0.0 and 1.0 For example, this could be used if display door anti" +
    "sweat heaters are turned off at night Defaults to always on if schedule name lef" +
    "t blank.")]
[JsonProperty("heating_power_schedule_name")]
public string HeatingPowerScheduleName { get; set; } = "";
        

[JsonProperty("rated_cooling_coil_fan_power")]
public System.Nullable<float> RatedCoolingCoilFanPower { get; set; } = (System.Nullable<float>)Single.Parse("375", CultureInfo.InvariantCulture);
        

[JsonProperty("rated_circulation_fan_power")]
public System.Nullable<float> RatedCirculationFanPower { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Enter the total (display + task) installed lighting power.")]
[JsonProperty("rated_total_lighting_power")]
public System.Nullable<float> RatedTotalLightingPower { get; set; } = null;
        

[Description("The schedule should contain values between 0 and 1 Defaults to always on if sched" +
    "ule name left blank.")]
[JsonProperty("lighting_schedule_name")]
public string LightingScheduleName { get; set; } = "";
        

[Description("HotFluid includes either hot gas defrost for a DX system or Hot Brine defrost if " +
    "this walk in is cooled by brine from a secondary chiller")]
[JsonProperty("defrost_type")]
public Refrigeration_WalkIn_DefrostType DefrostType { get; set; } = (Refrigeration_WalkIn_DefrostType)Enum.Parse(typeof(Refrigeration_WalkIn_DefrostType), "Electric");
        

[JsonProperty("defrost_control_type")]
public Refrigeration_WalkIn_DefrostControlType DefrostControlType { get; set; } = (Refrigeration_WalkIn_DefrostControlType)Enum.Parse(typeof(Refrigeration_WalkIn_DefrostControlType), "TimeSchedule");
        

[Description("The schedule values should be 0 (off) or 1 (on)")]
[JsonProperty("defrost_schedule_name")]
public string DefrostScheduleName { get; set; } = "";
        

[Description(@"The schedule values should be 0 (off) or 1 (on) The start time for each defrost period in this drip-down schedule should coincide with the start time for each defrost period in the defrost schedule (previous input field). The length of each defrost drip-down period must be greater than or equal to the corresponding defrost period specified in the defrost schedule. This extra time allows the melted frost to drip from the coil before refrigeration is restarted.")]
[JsonProperty("defrost_drip_down_schedule_name")]
public string DefrostDripDownScheduleName { get; set; } = "";
        

[Description("needed for all defrost types except none and offcycle")]
[JsonProperty("defrost_power")]
public System.Nullable<float> DefrostPower { get; set; } = null;
        

[Description("This is the portion of the defrost energy that is available to melt frost Needed " +
    "only for defrost control type TemperatureTermination defaults to 0.7 for electri" +
    "c defrost and to 0.3 for hot fluid defrost")]
[JsonProperty("temperature_termination_defrost_fraction_to_ice")]
public System.Nullable<float> TemperatureTerminationDefrostFractionToIce { get; set; } = null;
        

[Description("Schedule values should be in units of Watts Leave this field blank if no restocki" +
    "ng is to be modeled")]
[JsonProperty("restocking_schedule_name")]
public string RestockingScheduleName { get; set; } = "";
        

[Description("This value is only used if the Cooling Source Type is DXEvaporator")]
[JsonProperty("average_refrigerant_charge_inventory")]
public System.Nullable<float> AverageRefrigerantChargeInventory { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("floor area of walk-in cooler")]
[JsonProperty("insulated_floor_surface_area")]
public System.Nullable<float> InsulatedFloorSurfaceArea { get; set; } = null;
        

[Description("The default value corresponds to R18 [ft2-F-hr/Btu] To convert other IP R-values " +
    "to U, divide 5.678 by the R-value Some examples: R15 is U 0.3785 W/m2-K R5 is U " +
    "1.136 W/m2-K")]
[JsonProperty("insulated_floor_u_value")]
public System.Nullable<float> InsulatedFloorUValue { get; set; } = (System.Nullable<float>)Single.Parse("0.3154", CultureInfo.InvariantCulture);
        

[JsonProperty("zone_data")]
public string ZoneData { get; set; } = "";
    }
    
    public enum Refrigeration_WalkIn_DefrostType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotFluid")]
        HotFluid = 2,
        
        [JsonProperty("None")]
        None = 3,
        
        [JsonProperty("OffCycle")]
        OffCycle = 4,
    }
    
    public enum Refrigeration_WalkIn_DefrostControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("TemperatureTermination")]
        TemperatureTermination = 1,
        
        [JsonProperty("TimeSchedule")]
        TimeSchedule = 2,
    }
    
    [Description(@"Works in conjunction with a refrigeration chiller set, compressor rack, a refrigeration system, or a refrigeration secondary system to simulate the performance of an air chiller, similar to one found in a refrigerated warehouse. Energy use for fans and heaters is modeled based on inputs for nominal power, schedules, and control type. The air chiller model accounts for the sensible and latent heat exchange with the surrounding environment.")]
    [JsonObject("Refrigeration:AirChiller")]
    public class Refrigeration_AirChiller : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description(@"In each case, select the rating option that corresponds to the expected service conditions. For example, U.S. manufacturers quote a separate Unit Load Factor for wet or frosted coils. If the evaporating temperature is less than 0C, input the frosted coil value. Within the European convention, select SC1, 2, 3, 4, or 5 depending upon the expected evaporating temperature.")]
[JsonProperty("capacity_rating_type")]
public Refrigeration_AirChiller_CapacityRatingType CapacityRatingType { get; set; } = (Refrigeration_AirChiller_CapacityRatingType)Enum.Parse(typeof(Refrigeration_AirChiller_CapacityRatingType), "CapacityTotalSpecificConditions");
        

[Description(@"The sensible cooling capacity in watts (W/C) at rated conditions. The value entered for this field must be greater than zero, with no default value. This value is only used if the Capacity Rating Type is UnitLoadFactorSensibleOnly. The value given must be based upon the difference between the chiller inlet and outlet air temperatures, not on the difference between the zone mean temperature and the outlet air temperature")]
[JsonProperty("rated_unit_load_factor")]
public System.Nullable<float> RatedUnitLoadFactor { get; set; } = null;
        

[Description(@"This value is only used if the Capacity Rating Type is NOT UnitLoadFactorSensibleOnly. For CapacityTotalSpecificConditions, this capacity includes both sensible and latent at the conditions given in the next two fields. Note that the European Standard ratings are sensible only and the European Nominal ratings include latent capacity as well. The value given here must correspond to the capacity rating type given previously")]
[JsonProperty("rated_capacity")]
public System.Nullable<float> RatedCapacity { get; set; } = null;
        

[Description("This field is ONLY used if the Capacity Rating Type is CapacityTotalSpecificCondi" +
    "tions and represents the relative humidity at rated conditions. The default is 8" +
    "5.")]
[JsonProperty("rated_relative_humidity")]
public System.Nullable<float> RatedRelativeHumidity { get; set; } = (System.Nullable<float>)Single.Parse("85", CultureInfo.InvariantCulture);
        

[Description("If DXEvaporator, use evaporating temperature (saturated suction temperature) If B" +
    "rineCoil, use Brine entering temperature used to set minimum suction pressure fo" +
    "r DX systems and minimum brine temp for secondary systems")]
[JsonProperty("rated_cooling_source_temperature")]
public System.Nullable<float> RatedCoolingSourceTemperature { get; set; } = null;
        

[Description("The rated difference between the air entering the refrigeration chiller and the c" +
    "ooling source temperature in degC.")]
[JsonProperty("rated_temperature_difference_dt1")]
public System.Nullable<float> RatedTemperatureDifferenceDt1 { get; set; } = null;
        

[Description("The maximum difference between the air entering the refrigeration chiller and the" +
    " cooling source temperature in degC used to limit capacity during pull-down. def" +
    "aults to 1.3 times the Rated Temperature Difference DT1")]
[JsonProperty("maximum_temperature_difference_between_inlet_air_and_evaporating_temperature")]
public System.Nullable<float> MaximumTemperatureDifferenceBetweenInletAirAndEvaporatingTemperature { get; set; } = null;
        

[Description("This is the manufacturer\'s correction factor for coil material corresponding to r" +
    "ating")]
[JsonProperty("coil_material_correction_factor")]
public System.Nullable<float> CoilMaterialCorrectionFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This is the manufacturer\'s correction factor for refrigerant corresponding to rat" +
    "ing")]
[JsonProperty("refrigerant_correction_factor")]
public System.Nullable<float> RefrigerantCorrectionFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("In each case, select the correction curve type that corresponds to the rating typ" +
    "e. default LinearSHR60 unless Capacity Rating Type = CapacityTotalSpecificCondit" +
    "ions")]
[JsonProperty("capacity_correction_curve_type")]
public Refrigeration_AirChiller_CapacityCorrectionCurveType CapacityCorrectionCurveType { get; set; } = (Refrigeration_AirChiller_CapacityCorrectionCurveType)Enum.Parse(typeof(Refrigeration_AirChiller_CapacityCorrectionCurveType), "European");
        

[Description("Should be blank for LinearSHR60 correction curve type")]
[JsonProperty("capacity_correction_curve_name")]
public string CapacityCorrectionCurveName { get; set; } = "";
        

[Description("only used when the capacity correction curve type is LinearSHR60")]
[JsonProperty("shr60_correction_factor")]
public System.Nullable<float> Shr60CorrectionFactor { get; set; } = (System.Nullable<float>)Single.Parse("1.48", CultureInfo.InvariantCulture);
        

[Description("Include total for all heater power Do not include defrost heater power")]
[JsonProperty("rated_total_heating_power")]
public System.Nullable<float> RatedTotalHeatingPower { get; set; } = null;
        

[Description("Values will be used to multiply the total heating power Values in the schedule sh" +
    "ould be between 0.0 and 1.0 Defaults to always on if schedule name left blank.")]
[JsonProperty("heating_power_schedule_name")]
public string HeatingPowerScheduleName { get; set; } = "";
        

[JsonProperty("fan_speed_control_type")]
public Refrigeration_AirChiller_FanSpeedControlType FanSpeedControlType { get; set; } = (Refrigeration_AirChiller_FanSpeedControlType)Enum.Parse(typeof(Refrigeration_AirChiller_FanSpeedControlType), "Fixed");
        

[JsonProperty("rated_fan_power")]
public System.Nullable<float> RatedFanPower { get; set; } = (System.Nullable<float>)Single.Parse("375", CultureInfo.InvariantCulture);
        

[JsonProperty("rated_air_flow")]
public System.Nullable<float> RatedAirFlow { get; set; } = null;
        

[Description("Minimum air flow fraction through fan")]
[JsonProperty("minimum_fan_air_flow_ratio")]
public System.Nullable<float> MinimumFanAirFlowRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("HotFluid includes either hot gas defrost for a DX system or Hot Brine defrost if " +
    "this walk in is cooled by brine from a secondary chiller")]
[JsonProperty("defrost_type")]
public Refrigeration_AirChiller_DefrostType DefrostType { get; set; } = (Refrigeration_AirChiller_DefrostType)Enum.Parse(typeof(Refrigeration_AirChiller_DefrostType), "Electric");
        

[JsonProperty("defrost_control_type")]
public Refrigeration_AirChiller_DefrostControlType DefrostControlType { get; set; } = (Refrigeration_AirChiller_DefrostControlType)Enum.Parse(typeof(Refrigeration_AirChiller_DefrostControlType), "TimeSchedule");
        

[Description("The schedule values should be 0 (off) or 1 (on)")]
[JsonProperty("defrost_schedule_name")]
public string DefrostScheduleName { get; set; } = "";
        

[Description(@"The schedule values should be 0 (off) or 1 (on) The start time for each defrost period in this drip-down schedule should coincide with the start time for each defrost period in the defrost schedule (previous input field). The length of each defrost drip-down period must be greater than or equal to the corresponding defrost period specified in the defrost schedule. This extra time allows the melted frost to drip from the coil before refrigeration is restarted.")]
[JsonProperty("defrost_drip_down_schedule_name")]
public string DefrostDripDownScheduleName { get; set; } = "";
        

[Description("needed for all defrost types except none and offcycle")]
[JsonProperty("defrost_power")]
public System.Nullable<float> DefrostPower { get; set; } = null;
        

[Description("This is the portion of the defrost energy that is available to melt frost Needed " +
    "only for defrost control type TemperatureTermination defaults to 0.7 for electri" +
    "c defrost and to 0.3 for hot fluid defrost")]
[JsonProperty("temperature_termination_defrost_fraction_to_ice")]
public System.Nullable<float> TemperatureTerminationDefrostFractionToIce { get; set; } = null;
        

[JsonProperty("vertical_location")]
public Refrigeration_AirChiller_VerticalLocation VerticalLocation { get; set; } = (Refrigeration_AirChiller_VerticalLocation)Enum.Parse(typeof(Refrigeration_AirChiller_VerticalLocation), "Middle");
        

[Description("This value is only used if the Cooling Source Type is DXEvaporator")]
[JsonProperty("average_refrigerant_charge_inventory")]
public System.Nullable<float> AverageRefrigerantChargeInventory { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum Refrigeration_AirChiller_CapacityRatingType
    {
        
        [JsonProperty("CapacityTotalSpecificConditions")]
        CapacityTotalSpecificConditions = 0,
        
        [JsonProperty("EuropeanSC1NominalWet")]
        EuropeanSC1NominalWet = 1,
        
        [JsonProperty("EuropeanSC1Standard")]
        EuropeanSC1Standard = 2,
        
        [JsonProperty("EuropeanSC2NominalWet")]
        EuropeanSC2NominalWet = 3,
        
        [JsonProperty("EuropeanSC2Standard")]
        EuropeanSC2Standard = 4,
        
        [JsonProperty("EuropeanSC3NominalWet")]
        EuropeanSC3NominalWet = 5,
        
        [JsonProperty("EuropeanSC3Standard")]
        EuropeanSC3Standard = 6,
        
        [JsonProperty("EuropeanSC4NominalWet")]
        EuropeanSC4NominalWet = 7,
        
        [JsonProperty("EuropeanSC4Standard")]
        EuropeanSC4Standard = 8,
        
        [JsonProperty("EuropeanSC5NominalWet")]
        EuropeanSC5NominalWet = 9,
        
        [JsonProperty("EuropeanSC5Standard")]
        EuropeanSC5Standard = 10,
        
        [JsonProperty("FixedLinear")]
        FixedLinear = 11,
        
        [JsonProperty("UnitLoadFactorSensibleOnly")]
        UnitLoadFactorSensibleOnly = 12,
    }
    
    public enum Refrigeration_AirChiller_CapacityCorrectionCurveType
    {
        
        [JsonProperty("European")]
        European = 0,
        
        [JsonProperty("LinearSHR60")]
        LinearSHR60 = 1,
        
        [JsonProperty("QuadraticSHR")]
        QuadraticSHR = 2,
        
        [JsonProperty("TabularRHxDT1xTRoom")]
        TabularRHxDT1xTRoom = 3,
    }
    
    public enum Refrigeration_AirChiller_FanSpeedControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Fixed")]
        Fixed = 1,
        
        [JsonProperty("FixedLinear")]
        FixedLinear = 2,
        
        [JsonProperty("TwoSpeed")]
        TwoSpeed = 3,
        
        [JsonProperty("VariableSpeed")]
        VariableSpeed = 4,
    }
    
    public enum Refrigeration_AirChiller_DefrostType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotFluid")]
        HotFluid = 2,
        
        [JsonProperty("None")]
        None = 3,
        
        [JsonProperty("OffCycle")]
        OffCycle = 4,
    }
    
    public enum Refrigeration_AirChiller_DefrostControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("TemperatureTermination")]
        TemperatureTermination = 1,
        
        [JsonProperty("TimeSchedule")]
        TimeSchedule = 2,
    }
    
    public enum Refrigeration_AirChiller_VerticalLocation
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Ceiling")]
        Ceiling = 1,
        
        [JsonProperty("Floor")]
        Floor = 2,
        
        [JsonProperty("Middle")]
        Middle = 3,
    }
    
    [Description(@"Works in conjunction with one or multiple air chillers, compressor racks, refrigeration systems, or refrigeration secondary system objects to simulate the performance of a group of air chillers cooling a single zone. The chiller set model passes information about the zone conditions to determine the performance of individual chiller coils within the set, thus providing the sensible and latent heat exchange with the zone environment.")]
    [JsonObject("ZoneHVAC:RefrigerationChillerSet")]
    public class ZoneHVAC_RefrigerationChillerSet : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("This must be a controlled zone and appear in a ZoneHVAC:EquipmentConnections obje" +
    "ct.")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Not used - reserved for future use Name of the zone exhaust node (see Node) from " +
    "which the refrigeration chiller draws its indoor air. This should be one of the " +
    "zone exhaust nodes for the zone cooled by the chiller set.")]
[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[Description("Not used - reserved for future use The name of the node where the chiller coil se" +
    "nds its outlet air, which must be one of the inlet air nodes for the zone which " +
    "is being cooled.")]
[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("chillers")]
public string Chillers { get; set; } = "";
    }
}
namespace BH.oM.Adapters.EnergyPlus.RoomAirModels
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Selects the type of room air model to be used in a given zone. If no RoomAirModel" +
        "Type object is specified then the default Mixing model (all zone air at the same" +
        " temperature) will be used.")]
    [JsonObject("RoomAirModelType")]
    public class RoomAirModelType : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description(@"Mixing = Complete mixing air model UserDefined = UserDefined Room Air Temperature Patterns needs RoomAir:TemperaturePattern:UserDefined object referencing this Zone OneNodeDisplacementVentilation = Mundt roomair model for displacement ventilation with single floor air node needs RoomAirSettings:OneNodeDisplacementVentilation object referencing this Zone ThreeNodeDisplacementVentilation = RoomAir modeling using UCSD three-node displacement ventilation model needs RoomAirSettings:ThreeNodeDisplacementVentilation object referencing this Zone CrossVentilation = RoomAir modeling using UCSD two-zone cross ventilation model needs RoomAirSettings:CrossVentilation object referencing this Zone UnderFloorAirDistributionInterior = 2-Node UFAD model for interior zones needs RoomAirSettings:UnderFloorAirDistributionInterior object referencing this Zone UnderFloorAirDistributionExterior = RoomAir modeling using 2-Node UFAD model for exterior zones needs RoomAirSettings:UnderFloorAirDistributionExterior object referencing this Zone AirflowNetwork = RoomAir modeling using AirflowNetwork needs RoomAirSettings:AirflowNetwork object referencing this Zone")]
[JsonProperty("room_air_modeling_type")]
public RoomAirModelType_RoomAirModelingType RoomAirModelingType { get; set; } = (RoomAirModelType_RoomAirModelingType)Enum.Parse(typeof(RoomAirModelType_RoomAirModelingType), "Mixing");
        

[JsonProperty("air_temperature_coupling_strategy")]
public RoomAirModelType_AirTemperatureCouplingStrategy AirTemperatureCouplingStrategy { get; set; } = (RoomAirModelType_AirTemperatureCouplingStrategy)Enum.Parse(typeof(RoomAirModelType_AirTemperatureCouplingStrategy), "Direct");
    }
    
    public enum RoomAirModelType_RoomAirModelingType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirflowNetwork")]
        AirflowNetwork = 1,
        
        [JsonProperty("CrossVentilation")]
        CrossVentilation = 2,
        
        [JsonProperty("Mixing")]
        Mixing = 3,
        
        [JsonProperty("OneNodeDisplacementVentilation")]
        OneNodeDisplacementVentilation = 4,
        
        [JsonProperty("ThreeNodeDisplacementVentilation")]
        ThreeNodeDisplacementVentilation = 5,
        
        [JsonProperty("UnderFloorAirDistributionExterior")]
        UnderFloorAirDistributionExterior = 6,
        
        [JsonProperty("UnderFloorAirDistributionInterior")]
        UnderFloorAirDistributionInterior = 7,
        
        [JsonProperty("UserDefined")]
        UserDefined = 8,
    }
    
    public enum RoomAirModelType_AirTemperatureCouplingStrategy
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Direct")]
        Direct = 1,
        
        [JsonProperty("Indirect")]
        Indirect = 2,
    }
    
    [Description("Used to explicitly define temperature patterns that are to be applied to the mean" +
        " air temperature within a thermal zone. Used with RoomAirModelType = UserDefined" +
        ".")]
    [JsonObject("RoomAir:TemperaturePattern:UserDefined")]
    public class RoomAir_TemperaturePattern_UserDefined : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Availability schedule name for this model. Schedule value > 0 means the model is " +
    "active. Schedule value = 0 means the model is inactive and the zone will be mode" +
    "led as fully mixed (Mixing). If this field is blank, the model is always active." +
    "")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("The schedule should contain integer values that correspond to unique Control Inte" +
    "ger fields in one of the RoomAir:TemperaturePattern:* objects.")]
[JsonProperty("pattern_control_schedule_name")]
public string PatternControlScheduleName { get; set; } = "";
    }
    
    [Description("Used to model room air with a fixed temperature gradient in the vertical directio" +
        "n. Used in combination with RoomAir:TemperaturePattern:UserDefined.")]
    [JsonObject("RoomAir:TemperaturePattern:ConstantGradient")]
    public class RoomAir_TemperaturePattern_ConstantGradient : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("room_air_temperature_pattern_constant_gradient_name")]
public string RoomAirTemperaturePatternConstantGradientName { get; set; } = "";
        

[Description("reference this entry in Schedule Name")]
[JsonProperty("control_integer_for_pattern_control_schedule_name")]
public System.Nullable<float> ControlIntegerForPatternControlScheduleName { get; set; } = null;
        

[Description("= (Temp at thermostat- Mean Air Temp)")]
[JsonProperty("thermostat_offset")]
public System.Nullable<float> ThermostatOffset { get; set; } = null;
        

[Description("= (Tleaving - Mean Air Temp )")]
[JsonProperty("return_air_offset")]
public System.Nullable<float> ReturnAirOffset { get; set; } = null;
        

[Description("= (Texhaust - Mean Air Temp) deg C")]
[JsonProperty("exhaust_air_offset")]
public System.Nullable<float> ExhaustAirOffset { get; set; } = null;
        

[Description("Slope of temperature change in vertical direction")]
[JsonProperty("temperature_gradient")]
public System.Nullable<float> TemperatureGradient { get; set; } = null;
    }
    
    [Description("Used to model room air with two temperature gradients in the vertical direction. " +
        "Used in combination with RoomAir:TemperaturePattern:UserDefined.")]
    [JsonObject("RoomAir:TemperaturePattern:TwoGradient")]
    public class RoomAir_TemperaturePattern_TwoGradient : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("room_air_temperature_pattern_two_gradient_name")]
public string RoomAirTemperaturePatternTwoGradientName { get; set; } = "";
        

[Description("reference this entry in Schedule Name")]
[JsonProperty("control_integer_for_pattern_control_schedule_name")]
public System.Nullable<float> ControlIntegerForPatternControlScheduleName { get; set; } = null;
        

[Description("= Distance from floor of zone")]
[JsonProperty("thermostat_height")]
public System.Nullable<float> ThermostatHeight { get; set; } = null;
        

[Description("= Distance from floor of zone")]
[JsonProperty("return_air_height")]
public System.Nullable<float> ReturnAirHeight { get; set; } = null;
        

[Description("= Distance from floor of zone")]
[JsonProperty("exhaust_air_height")]
public System.Nullable<float> ExhaustAirHeight { get; set; } = null;
        

[Description("Slope of temperature change in vertical direction")]
[JsonProperty("temperature_gradient_lower_bound")]
public System.Nullable<float> TemperatureGradientLowerBound { get; set; } = null;
        

[Description("Slope of temperature change in vertical direction")]
[JsonProperty("temperature_gradient_upper_bound")]
public System.Nullable<float> TemperatureGradientUpperBound { get; set; } = null;
        

[JsonProperty("gradient_interpolation_mode")]
public RoomAir_TemperaturePattern_TwoGradient_GradientInterpolationMode GradientInterpolationMode { get; set; } = (RoomAir_TemperaturePattern_TwoGradient_GradientInterpolationMode)Enum.Parse(typeof(RoomAir_TemperaturePattern_TwoGradient_GradientInterpolationMode), "OutdoorDryBulbTemperature");
        

[JsonProperty("upper_temperature_bound")]
public System.Nullable<float> UpperTemperatureBound { get; set; } = null;
        

[JsonProperty("lower_temperature_bound")]
public System.Nullable<float> LowerTemperatureBound { get; set; } = null;
        

[JsonProperty("upper_heat_rate_bound")]
public System.Nullable<float> UpperHeatRateBound { get; set; } = null;
        

[JsonProperty("lower_heat_rate_bound")]
public System.Nullable<float> LowerHeatRateBound { get; set; } = null;
    }
    
    public enum RoomAir_TemperaturePattern_TwoGradient_GradientInterpolationMode
    {
        
        [JsonProperty("OutdoorDryBulbTemperature")]
        OutdoorDryBulbTemperature = 0,
        
        [JsonProperty("SensibleCoolingLoad")]
        SensibleCoolingLoad = 1,
        
        [JsonProperty("SensibleHeatingLoad")]
        SensibleHeatingLoad = 2,
        
        [JsonProperty("ZoneAndOutdoorTemperatureDifference")]
        ZoneAndOutdoorTemperatureDifference = 3,
        
        [JsonProperty("ZoneDryBulbTemperature")]
        ZoneDryBulbTemperature = 4,
    }
    
    [Description(@"Defines a distribution pattern for air temperatures relative to the current mean air temperature as a function of height. The height, referred to as Zeta, is nondimensional by normalizing with the zone ceiling height. Used in combination with RoomAir:TemperaturePattern:UserDefined.")]
    [JsonObject("RoomAir:TemperaturePattern:NondimensionalHeight")]
    public class RoomAir_TemperaturePattern_NondimensionalHeight : BHoMObject, IEnergyPlusClass
    {
        

[Description("this value should appear in as a schedule value")]
[JsonProperty("control_integer_for_pattern_control_schedule_name")]
public System.Nullable<float> ControlIntegerForPatternControlScheduleName { get; set; } = null;
        

[Description("= (Temp at thermostat- Mean Air Temp)")]
[JsonProperty("thermostat_offset")]
public System.Nullable<float> ThermostatOffset { get; set; } = null;
        

[Description("= (Temp leaving - Mean Air Temp ) deg C")]
[JsonProperty("return_air_offset")]
public System.Nullable<float> ReturnAirOffset { get; set; } = null;
        

[Description(@"= (Temp exhaust - Mean Air Temp) deg C the remaining fields have pairs that describe the relative temperature pattern in the vertical direction of a zone Zeta is the nondimensional height (in z-direction). on [0..1] DeltaTai =  (Tai - MAT) in units of deg. C relative deg C on [-10.0 .. 20.0 ]")]
[JsonProperty("exhaust_air_offset")]
public System.Nullable<float> ExhaustAirOffset { get; set; } = null;
        

[JsonProperty("pairs")]
public string Pairs { get; set; } = "";
    }
    
    [Description(@"Defines a distribution pattern for the air temperatures adjacent to individual surfaces. This allows controlling the adjacent air temperature on a surface-by-surface basis rather than by height. This allows modeling different adjacent air temperatures on the opposite sides of the zone. Used in combination with RoomAir:TemperaturePattern:UserDefined.")]
    [JsonObject("RoomAir:TemperaturePattern:SurfaceMapping")]
    public class RoomAir_TemperaturePattern_SurfaceMapping : BHoMObject, IEnergyPlusClass
    {
        

[Description("reference this entry in schedule")]
[JsonProperty("control_integer_for_pattern_control_schedule_name")]
public System.Nullable<float> ControlIntegerForPatternControlScheduleName { get; set; } = null;
        

[Description("= (Temp at thermostat- Mean Air Temp)")]
[JsonProperty("thermostat_offset")]
public System.Nullable<float> ThermostatOffset { get; set; } = null;
        

[Description("= (Tleaving - Mean Air Temp ) deg C")]
[JsonProperty("return_air_offset")]
public System.Nullable<float> ReturnAirOffset { get; set; } = null;
        

[Description("= (Texhaust - Mean Air Temp) deg C")]
[JsonProperty("exhaust_air_offset")]
public System.Nullable<float> ExhaustAirOffset { get; set; } = null;
        

[JsonProperty("surface_deltas")]
public string SurfaceDeltas { get; set; } = "";
    }
    
    [Description("Define an air node for some types of nodal room air models")]
    [JsonObject("RoomAir:Node")]
    public class RoomAir_Node : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("node_type")]
public RoomAir_Node_NodeType NodeType { get; set; } = (RoomAir_Node_NodeType)Enum.Parse(typeof(RoomAir_Node_NodeType), "Ceiling");
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("height_of_nodal_control_volume_center")]
public System.Nullable<float> HeightOfNodalControlVolumeCenter { get; set; } = null;
        

[JsonProperty("surface_1_name")]
public string Surface1Name { get; set; } = "";
        

[JsonProperty("surface_2_name")]
public string Surface2Name { get; set; } = "";
        

[JsonProperty("surface_3_name")]
public string Surface3Name { get; set; } = "";
        

[JsonProperty("surface_4_name")]
public string Surface4Name { get; set; } = "";
        

[JsonProperty("surface_5_name")]
public string Surface5Name { get; set; } = "";
        

[JsonProperty("surface_6_name")]
public string Surface6Name { get; set; } = "";
        

[JsonProperty("surface_7_name")]
public string Surface7Name { get; set; } = "";
        

[JsonProperty("surface_8_name")]
public string Surface8Name { get; set; } = "";
        

[JsonProperty("surface_9_name")]
public string Surface9Name { get; set; } = "";
        

[JsonProperty("surface_10_name")]
public string Surface10Name { get; set; } = "";
        

[JsonProperty("surface_11_name")]
public string Surface11Name { get; set; } = "";
        

[JsonProperty("surface_12_name")]
public string Surface12Name { get; set; } = "";
        

[JsonProperty("surface_13_name")]
public string Surface13Name { get; set; } = "";
        

[JsonProperty("surface_14_name")]
public string Surface14Name { get; set; } = "";
        

[JsonProperty("surface_15_name")]
public string Surface15Name { get; set; } = "";
        

[JsonProperty("surface_16_name")]
public string Surface16Name { get; set; } = "";
        

[JsonProperty("surface_17_name")]
public string Surface17Name { get; set; } = "";
        

[JsonProperty("surface_18_name")]
public string Surface18Name { get; set; } = "";
        

[JsonProperty("surface_19_name")]
public string Surface19Name { get; set; } = "";
        

[JsonProperty("surface_20_name")]
public string Surface20Name { get; set; } = "";
        

[JsonProperty("surface_21_name")]
public string Surface21Name { get; set; } = "";
    }
    
    public enum RoomAir_Node_NodeType
    {
        
        [JsonProperty("Ceiling")]
        Ceiling = 0,
        
        [JsonProperty("Control")]
        Control = 1,
        
        [JsonProperty("Floor")]
        Floor = 2,
        
        [JsonProperty("Inlet")]
        Inlet = 3,
        
        [JsonProperty("MundtRoom")]
        MundtRoom = 4,
        
        [JsonProperty("Return")]
        Return = 5,
    }
    
    [Description("The Mundt model for displacement ventilation")]
    [JsonObject("RoomAirSettings:OneNodeDisplacementVentilation")]
    public class RoomAirSettings_OneNodeDisplacementVentilation : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("fraction_of_convective_internal_loads_added_to_floor_air")]
public System.Nullable<float> FractionOfConvectiveInternalLoadsAddedToFloorAir { get; set; } = null;
        

[JsonProperty("fraction_of_infiltration_internal_loads_added_to_floor_air")]
public System.Nullable<float> FractionOfInfiltrationInternalLoadsAddedToFloorAir { get; set; } = null;
    }
    
    [Description("The UCSD model for Displacement Ventilation")]
    [JsonObject("RoomAirSettings:ThreeNodeDisplacementVentilation")]
    public class RoomAirSettings_ThreeNodeDisplacementVentilation : BHoMObject, IEnergyPlusClass
    {
        

[Description("Name of Zone being described. Any existing zone name")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Distribution of the convective heat gains between the occupied and mixed zones. 0" +
    "<= Accepted Value <= 1. In the DV model 1 means all convective gains in the lowe" +
    "r layer.")]
[JsonProperty("gain_distribution_schedule_name")]
public string GainDistributionScheduleName { get; set; } = "";
        

[Description("Used only in the UCSD displacement ventilation model. Effective number of separat" +
    "e plumes per occupant in the occupied zone. Plumes that merge together in the oc" +
    "cupied zone count as one.")]
[JsonProperty("number_of_plumes_per_occupant")]
public System.Nullable<float> NumberOfPlumesPerOccupant { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Height of thermostat/temperature control sensor above floor")]
[JsonProperty("thermostat_height")]
public System.Nullable<float> ThermostatHeight { get; set; } = (System.Nullable<float>)Single.Parse("1.1", CultureInfo.InvariantCulture);
        

[Description("Height at which air temperature is calculated for comfort purposes")]
[JsonProperty("comfort_height")]
public System.Nullable<float> ComfortHeight { get; set; } = (System.Nullable<float>)Single.Parse("1.1", CultureInfo.InvariantCulture);
        

[Description(@"Minimum temperature difference between predicted upper and lower layer temperatures above which DV auxiliary outputs are calculated. These outputs are 'DV Transition Height', 'DV Fraction Min Recommended Flow Rate' 'DV Average Temp Gradient' and 'DV Maximum Temp Gradient'. They are set to negative values when the temperature difference is less than the threshold and the output 'DV Zone Is Mixed' is set to 1")]
[JsonProperty("temperature_difference_threshold_for_reporting")]
public System.Nullable<float> TemperatureDifferenceThresholdForReporting { get; set; } = (System.Nullable<float>)Single.Parse("0.4", CultureInfo.InvariantCulture);
    }
    
    [Description(@"This UCSD Cross Ventilation Room Air Model provides a simple model for heat transfer and vertical temperature profile prediction in cross ventilated rooms. The model distinguishes two regions in the room, the main jet region and the recirculations, and predicts characteristic airflow velocities and average air temperatures. Used with RoomAirModelType = CrossVentilation.")]
    [JsonObject("RoomAirSettings:CrossVentilation")]
    public class RoomAirSettings_CrossVentilation : BHoMObject, IEnergyPlusClass
    {
        

[Description("Name of Zone being described. Any existing zone name")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Distribution of the convective heat gains between the jet and recirculation zones" +
    ". 0<= Accepted Value <= 1. In the CV model 1 means all convective gains in the j" +
    "et region.")]
[JsonProperty("gain_distribution_schedule_name")]
public string GainDistributionScheduleName { get; set; } = "";
        

[Description("Required field whenever thermal comfort is predicted defines Air temperature and " +
    "Airflow velocity that will be used in the Fanger model conditions must refer to " +
    "one of the two regions: jet or recirculation")]
[JsonProperty("airflow_region_used_for_thermal_comfort_evaluation")]
public RoomAirSettings_CrossVentilation_AirflowRegionUsedForThermalComfortEvaluation AirflowRegionUsedForThermalComfortEvaluation { get; set; } = (RoomAirSettings_CrossVentilation_AirflowRegionUsedForThermalComfortEvaluation)Enum.Parse(typeof(RoomAirSettings_CrossVentilation_AirflowRegionUsedForThermalComfortEvaluation), "Jet");
    }
    
    public enum RoomAirSettings_CrossVentilation_AirflowRegionUsedForThermalComfortEvaluation
    {
        
        [JsonProperty("Jet")]
        Jet = 0,
        
        [JsonProperty("Recirculation")]
        Recirculation = 1,
    }
    
    [Description(@"This Room Air Model is applicable to interior spaces that are served by an underfloor air distribution system. The dominant sources of heat gain should be from people, equipment, and other localized sources located in the occupied part of the room. The model should be used with caution in zones which have large heat gains or losses through exterior walls or windows or which have considerable direct solar gain. Used with RoomAirModelType = UnderFloorAirDistributionInterior.")]
    [JsonObject("RoomAirSettings:UnderFloorAirDistributionInterior")]
    public class RoomAirSettings_UnderFloorAirDistributionInterior : BHoMObject, IEnergyPlusClass
    {
        

[Description("Name of Zone with underfloor air distribution")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Total number of diffusers in this zone")]
[JsonProperty("number_of_diffusers")]
public string NumberOfDiffusers { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("power_per_plume")]
public string PowerPerPlume { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("design_effective_area_of_diffuser")]
public string DesignEffectiveAreaOfDiffuser { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("diffuser_slot_angle_from_vertical")]
public string DiffuserSlotAngleFromVertical { get; set; } = (System.String)"Autocalculate";
        

[Description("Height of thermostat/temperature control sensor above floor")]
[JsonProperty("thermostat_height")]
public System.Nullable<float> ThermostatHeight { get; set; } = (System.Nullable<float>)Single.Parse("1.2", CultureInfo.InvariantCulture);
        

[Description("Height at which air temperature is calculated for comfort purposes")]
[JsonProperty("comfort_height")]
public System.Nullable<float> ComfortHeight { get; set; } = (System.Nullable<float>)Single.Parse("1.1", CultureInfo.InvariantCulture);
        

[Description(@"Minimum temperature difference between predicted upper and lower layer temperatures above which UFAD auxiliary outputs are calculated. These outputs are 'UF Transition Height' and 'UF Average Temp Gradient'. They are set to zero values when the temperature difference is less than the threshold and the output 'UF Zone Is Mixed' is set to 1")]
[JsonProperty("temperature_difference_threshold_for_reporting")]
public System.Nullable<float> TemperatureDifferenceThresholdForReporting { get; set; } = (System.Nullable<float>)Single.Parse("0.4", CultureInfo.InvariantCulture);
        

[JsonProperty("floor_diffuser_type")]
public RoomAirSettings_UnderFloorAirDistributionInterior_FloorDiffuserType FloorDiffuserType { get; set; } = (RoomAirSettings_UnderFloorAirDistributionInterior_FloorDiffuserType)Enum.Parse(typeof(RoomAirSettings_UnderFloorAirDistributionInterior_FloorDiffuserType), "Swirl");
        

[Description("user-specified height above floor of boundary between occupied and upper subzones" +
    "")]
[JsonProperty("transition_height")]
public string TransitionHeight { get; set; } = (System.String)"1.7";
        

[Description("Coefficient A in Formula Kc = A*Gamma**B + C + D*Gamma + E*Gamma**2 Kc is the fra" +
    "ction of the total zone load attributable to the lower subzone")]
[JsonProperty("coefficient_a")]
public string CoefficientA { get; set; } = (System.String)"Autocalculate";
        

[Description("Coefficient B in Formula Kc = A*Gamma**B + C + D*Gamma + E*Gamma**2 Kc is the fra" +
    "ction of the total zone load attributable to the lower subzone")]
[JsonProperty("coefficient_b")]
public string CoefficientB { get; set; } = (System.String)"Autocalculate";
        

[Description("Coefficient C in Formula Kc = A*Gamma**B + C + D*Gamma + E*Gamma**2 Kc is the fra" +
    "ction of the total zone load attributable to the lower subzone")]
[JsonProperty("coefficient_c")]
public string CoefficientC { get; set; } = (System.String)"Autocalculate";
        

[Description("Coefficient D in Formula Kc = A*Gamma**B + C + D*Gamma + E*Gamma**2 Kc is the fra" +
    "ction of the total zone load attributable to the lower subzone")]
[JsonProperty("coefficient_d")]
public string CoefficientD { get; set; } = (System.String)"Autocalculate";
        

[Description("Coefficient E in Formula Kc = A*Gamma**B + C + D*Gamma + E*Gamma**2 Kc is the fra" +
    "ction of the total zone load attributable to the lower subzone")]
[JsonProperty("coefficient_e")]
public string CoefficientE { get; set; } = (System.String)"Autocalculate";
    }
    
    public enum RoomAirSettings_UnderFloorAirDistributionInterior_FloorDiffuserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Custom")]
        Custom = 1,
        
        [JsonProperty("HorizontalSwirl")]
        HorizontalSwirl = 2,
        
        [JsonProperty("LinearBarGrille")]
        LinearBarGrille = 3,
        
        [JsonProperty("Swirl")]
        Swirl = 4,
        
        [JsonProperty("VariableArea")]
        VariableArea = 5,
    }
    
    [Description(@"Applicable to exterior spaces that are served by an underfloor air distribution system. The dominant sources of heat gain should be from people, equipment, and other localized sources located in the occupied part of the room, as well as convective gain coming from a warm window. Used with RoomAirModelType = CrossVentilation.")]
    [JsonObject("RoomAirSettings:UnderFloorAirDistributionExterior")]
    public class RoomAirSettings_UnderFloorAirDistributionExterior : BHoMObject, IEnergyPlusClass
    {
        

[Description("Name of Zone being described. Any existing zone name")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("number_of_diffusers_per_zone")]
public string NumberOfDiffusersPerZone { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("power_per_plume")]
public string PowerPerPlume { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("design_effective_area_of_diffuser")]
public string DesignEffectiveAreaOfDiffuser { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("diffuser_slot_angle_from_vertical")]
public string DiffuserSlotAngleFromVertical { get; set; } = (System.String)"Autocalculate";
        

[Description("Height of thermostat/temperature control sensor above floor")]
[JsonProperty("thermostat_height")]
public System.Nullable<float> ThermostatHeight { get; set; } = (System.Nullable<float>)Single.Parse("1.2", CultureInfo.InvariantCulture);
        

[Description("Height at which Air temperature is calculated for comfort purposes")]
[JsonProperty("comfort_height")]
public System.Nullable<float> ComfortHeight { get; set; } = (System.Nullable<float>)Single.Parse("1.1", CultureInfo.InvariantCulture);
        

[Description(@"Minimum temperature difference between upper and lower layer temperatures above which UFAD auxiliary outputs are calculated. These outputs are 'UF Transition Height' and 'UF Average Temp Gradient'. They are set to zero values when the temperature difference is less than the threshold and the output 'UF Zone Is Mixed' is set to 1")]
[JsonProperty("temperature_difference_threshold_for_reporting")]
public System.Nullable<float> TemperatureDifferenceThresholdForReporting { get; set; } = (System.Nullable<float>)Single.Parse("0.4", CultureInfo.InvariantCulture);
        

[JsonProperty("floor_diffuser_type")]
public RoomAirSettings_UnderFloorAirDistributionExterior_FloorDiffuserType FloorDiffuserType { get; set; } = (RoomAirSettings_UnderFloorAirDistributionExterior_FloorDiffuserType)Enum.Parse(typeof(RoomAirSettings_UnderFloorAirDistributionExterior_FloorDiffuserType), "Swirl");
        

[Description("User-specified height above floor of boundary between occupied and upper subzones" +
    "")]
[JsonProperty("transition_height")]
public string TransitionHeight { get; set; } = (System.String)"1.7";
        

[Description("Kc is the fraction of the total zone load attributable to the lower subzone")]
[JsonProperty("coefficient_a_in_formula_kc_a_gamma_b_c_d_gamma_e_gamma_2")]
public string CoefficientAInFormulaKcAGammaBCDGammaEGamma2 { get; set; } = (System.String)"Autocalculate";
        

[Description("Kc is the fraction of the total zone load attributable to the lower subzone")]
[JsonProperty("coefficient_b_in_formula_kc_a_gamma_b_c_d_gamma_e_gamma_2")]
public string CoefficientBInFormulaKcAGammaBCDGammaEGamma2 { get; set; } = (System.String)"Autocalculate";
        

[Description("Kc is the fraction of the total zone load attributable to the lower subzone")]
[JsonProperty("coefficient_c_in_formula_kc_a_gamma_b_c_d_gamma_e_gamma_2")]
public string CoefficientCInFormulaKcAGammaBCDGammaEGamma2 { get; set; } = (System.String)"Autocalculate";
        

[Description("Kc is the fraction of the total zone load attributable to the lower subzone")]
[JsonProperty("coefficient_d_in_formula_kc_a_gamma_b_c_d_gamma_e_gamma_2")]
public string CoefficientDInFormulaKcAGammaBCDGammaEGamma2 { get; set; } = (System.String)"Autocalculate";
        

[Description("Kc is the fraction of the total zone load attributable to the lower subzone")]
[JsonProperty("coefficient_e_in_formula_kc_a_gamma_b_c_d_gamma_e_gamma_2")]
public string CoefficientEInFormulaKcAGammaBCDGammaEGamma2 { get; set; } = (System.String)"Autocalculate";
    }
    
    public enum RoomAirSettings_UnderFloorAirDistributionExterior_FloorDiffuserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Custom")]
        Custom = 1,
        
        [JsonProperty("HorizontalSwirl")]
        HorizontalSwirl = 2,
        
        [JsonProperty("LinearBarGrille")]
        LinearBarGrille = 3,
        
        [JsonProperty("Swirl")]
        Swirl = 4,
        
        [JsonProperty("VariableArea")]
        VariableArea = 5,
    }
    
    [Description("define an air node for some types of nodal air models")]
    [JsonObject("RoomAir:Node:AirflowNetwork")]
    public class RoomAir_Node_AirflowNetwork : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("fraction_of_zone_air_volume")]
public System.Nullable<float> FractionOfZoneAirVolume { get; set; } = null;
        

[JsonProperty("roomair_node_airflownetwork_adjacentsurfacelist_name")]
public string RoomairNodeAirflownetworkAdjacentsurfacelistName { get; set; } = "";
        

[JsonProperty("roomair_node_airflownetwork_internalgains_name")]
public string RoomairNodeAirflownetworkInternalgainsName { get; set; } = "";
        

[JsonProperty("roomair_node_airflownetwork_hvacequipment_name")]
public string RoomairNodeAirflownetworkHvacequipmentName { get; set; } = "";
    }
    
    [Description(null)]
    [JsonObject("RoomAir:Node:AirflowNetwork:AdjacentSurfaceList")]
    public class RoomAir_Node_AirflowNetwork_AdjacentSurfaceList : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("surfaces")]
public string Surfaces { get; set; } = "";
    }
    
    [Description("define the internal gains that are associated with one particular RoomAir:Node")]
    [JsonObject("RoomAir:Node:AirflowNetwork:InternalGains")]
    public class RoomAir_Node_AirflowNetwork_InternalGains : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("gains")]
public string Gains { get; set; } = "";
    }
    
    [Description("define the zone equipment associated with one particular RoomAir:Node")]
    [JsonObject("RoomAir:Node:AirflowNetwork:HVACEquipment")]
    public class RoomAir_Node_AirflowNetwork_HVACEquipment : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("equipment_fractions")]
public string EquipmentFractions { get; set; } = "";
    }
    
    [Description("RoomAir modeling using Airflow pressure network solver")]
    [JsonObject("RoomAirSettings:AirflowNetwork")]
    public class RoomAirSettings_AirflowNetwork : BHoMObject, IEnergyPlusClass
    {
        

[Description("Name of Zone being described. Any existing zone name")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("control_point_roomairflownetwork_node_name")]
public string ControlPointRoomairflownetworkNodeName { get; set; } = "";
        

[JsonProperty("nodes")]
public string Nodes { get; set; } = "";
    }
}
namespace BH.oM.Adapters.EnergyPlus.Schedules
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("ScheduleTypeLimits specifies the data types and limits for the values contained i" +
        "n schedules")]
    [JsonObject("ScheduleTypeLimits")]
    public class ScheduleTypeLimits : BHoMObject, IEnergyPlusClass
    {
        

[Description("lower limit (real or integer) for the Schedule Type. e.g. if fraction, this is 0." +
    "0")]
[JsonProperty("lower_limit_value")]
public System.Nullable<float> LowerLimitValue { get; set; } = null;
        

[Description("upper limit (real or integer) for the Schedule Type. e.g. if fraction, this is 1." +
    "0")]
[JsonProperty("upper_limit_value")]
public System.Nullable<float> UpperLimitValue { get; set; } = null;
        

[Description("Numeric type is either Continuous (all numbers within the min and max are valid o" +
    "r Discrete (only integer numbers between min and max are valid. (Could also allo" +
    "w REAL and INTEGER to mean the same things)")]
[JsonProperty("numeric_type")]
public ScheduleTypeLimits_NumericType NumericType { get; set; } = (ScheduleTypeLimits_NumericType)Enum.Parse(typeof(ScheduleTypeLimits_NumericType), "Continuous");
        

[Description("Temperature (C or F) DeltaTemperature (C or F) PrecipitationRate (m/hr or ft/hr) " +
    "Angle (degrees) Convection Coefficient (W/m2-K or Btu/sqft-hr-F) Activity Level " +
    "(W/person) Velocity (m/s or ft/min) Capacity (W or Btu/h) Power (W)")]
[JsonProperty("unit_type")]
public ScheduleTypeLimits_UnitType UnitType { get; set; } = (ScheduleTypeLimits_UnitType)Enum.Parse(typeof(ScheduleTypeLimits_UnitType), "Dimensionless");
    }
    
    public enum ScheduleTypeLimits_NumericType
    {
        
        [JsonProperty("Continuous")]
        Continuous = 0,
        
        [JsonProperty("Discrete")]
        Discrete = 1,
    }
    
    public enum ScheduleTypeLimits_UnitType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ActivityLevel")]
        ActivityLevel = 1,
        
        [JsonProperty("Angle")]
        Angle = 2,
        
        [JsonProperty("Availability")]
        Availability = 3,
        
        [JsonProperty("Capacity")]
        Capacity = 4,
        
        [JsonProperty("Control")]
        Control = 5,
        
        [JsonProperty("ConvectionCoefficient")]
        ConvectionCoefficient = 6,
        
        [JsonProperty("DeltaTemperature")]
        DeltaTemperature = 7,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 8,
        
        [JsonProperty("Mode")]
        Mode = 9,
        
        [JsonProperty("Percent")]
        Percent = 10,
        
        [JsonProperty("Power")]
        Power = 11,
        
        [JsonProperty("PrecipitationRate")]
        PrecipitationRate = 12,
        
        [JsonProperty("Temperature")]
        Temperature = 13,
        
        [JsonProperty("Velocity")]
        Velocity = 14,
    }
    
    [Description("A Schedule:Day:Hourly contains 24 values for each hour of the day.")]
    [JsonObject("Schedule:Day:Hourly")]
    public class Schedule_Day_Hourly : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("schedule_type_limits_name")]
public string ScheduleTypeLimitsName { get; set; } = "";
        

[JsonProperty("hour_1")]
public System.Nullable<float> Hour1 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_2")]
public System.Nullable<float> Hour2 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_3")]
public System.Nullable<float> Hour3 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_4")]
public System.Nullable<float> Hour4 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_5")]
public System.Nullable<float> Hour5 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_6")]
public System.Nullable<float> Hour6 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_7")]
public System.Nullable<float> Hour7 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_8")]
public System.Nullable<float> Hour8 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_9")]
public System.Nullable<float> Hour9 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_10")]
public System.Nullable<float> Hour10 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_11")]
public System.Nullable<float> Hour11 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_12")]
public System.Nullable<float> Hour12 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_13")]
public System.Nullable<float> Hour13 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_14")]
public System.Nullable<float> Hour14 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_15")]
public System.Nullable<float> Hour15 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_16")]
public System.Nullable<float> Hour16 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_17")]
public System.Nullable<float> Hour17 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_18")]
public System.Nullable<float> Hour18 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_19")]
public System.Nullable<float> Hour19 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_20")]
public System.Nullable<float> Hour20 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_21")]
public System.Nullable<float> Hour21 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_22")]
public System.Nullable<float> Hour22 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_23")]
public System.Nullable<float> Hour23 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("hour_24")]
public System.Nullable<float> Hour24 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    [Description("A Schedule:Day:Interval contains a full day of values with specified end times fo" +
        "r each value Currently, is set up to allow for 10 minute intervals for an entire" +
        " day.")]
    [JsonObject("Schedule:Day:Interval")]
    public class Schedule_Day_Interval : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("schedule_type_limits_name")]
public string ScheduleTypeLimitsName { get; set; } = "";
        

[Description(@"when the interval does not match the user specified timestep a Average choice will average between the intervals request (to timestep resolution. A No choice will use the interval value at the simulation timestep without regard to if it matches the boundary or not. A Linear choice will interpolate linearly between successive values.")]
[JsonProperty("interpolate_to_timestep")]
public Schedule_Day_Interval_InterpolateToTimestep InterpolateToTimestep { get; set; } = (Schedule_Day_Interval_InterpolateToTimestep)Enum.Parse(typeof(Schedule_Day_Interval_InterpolateToTimestep), "No");
        

[JsonProperty("data")]
public string Data { get; set; } = "";
    }
    
    public enum Schedule_Day_Interval_InterpolateToTimestep
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Average")]
        Average = 1,
        
        [JsonProperty("Linear")]
        Linear = 2,
        
        [JsonProperty("No")]
        No = 3,
    }
    
    [Description("Schedule:Day:List will allow the user to list 24 hours worth of values, which can" +
        " be sub-hourly in nature.")]
    [JsonObject("Schedule:Day:List")]
    public class Schedule_Day_List : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("schedule_type_limits_name")]
public string ScheduleTypeLimitsName { get; set; } = "";
        

[Description(@"when the interval does not match the user specified timestep a ""Average"" choice will average between the intervals request (to timestep resolution. A ""No"" choice will use the interval value at the simulation timestep without regard to if it matches the boundary or not. A ""Linear"" choice will interpolate linearly between successive values.")]
[JsonProperty("interpolate_to_timestep")]
public Schedule_Day_List_InterpolateToTimestep InterpolateToTimestep { get; set; } = (Schedule_Day_List_InterpolateToTimestep)Enum.Parse(typeof(Schedule_Day_List_InterpolateToTimestep), "No");
        

[Description("Must be evenly divisible into 60")]
[JsonProperty("minutes_per_item")]
public System.Nullable<float> MinutesPerItem { get; set; } = null;
        

[JsonProperty("extensions")]
public string Extensions { get; set; } = "";
    }
    
    public enum Schedule_Day_List_InterpolateToTimestep
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Average")]
        Average = 1,
        
        [JsonProperty("Linear")]
        Linear = 2,
        
        [JsonProperty("No")]
        No = 3,
    }
    
    [Description("A Schedule:Week:Daily contains 12 Schedule:Day:Hourly objects, one for each day t" +
        "ype.")]
    [JsonObject("Schedule:Week:Daily")]
    public class Schedule_Week_Daily : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("sunday_schedule_day_name")]
public string SundayScheduleDayName { get; set; } = "";
        

[JsonProperty("monday_schedule_day_name")]
public string MondayScheduleDayName { get; set; } = "";
        

[JsonProperty("tuesday_schedule_day_name")]
public string TuesdayScheduleDayName { get; set; } = "";
        

[JsonProperty("wednesday_schedule_day_name")]
public string WednesdayScheduleDayName { get; set; } = "";
        

[JsonProperty("thursday_schedule_day_name")]
public string ThursdayScheduleDayName { get; set; } = "";
        

[JsonProperty("friday_schedule_day_name")]
public string FridayScheduleDayName { get; set; } = "";
        

[JsonProperty("saturday_schedule_day_name")]
public string SaturdayScheduleDayName { get; set; } = "";
        

[JsonProperty("holiday_schedule_day_name")]
public string HolidayScheduleDayName { get; set; } = "";
        

[JsonProperty("summerdesignday_schedule_day_name")]
public string SummerdesigndayScheduleDayName { get; set; } = "";
        

[JsonProperty("winterdesignday_schedule_day_name")]
public string WinterdesigndayScheduleDayName { get; set; } = "";
        

[JsonProperty("customday1_schedule_day_name")]
public string Customday1ScheduleDayName { get; set; } = "";
        

[JsonProperty("customday2_schedule_day_name")]
public string Customday2ScheduleDayName { get; set; } = "";
    }
    
    [Description("Compact definition for Schedule:Day:List")]
    [JsonObject("Schedule:Week:Compact")]
    public class Schedule_Week_Compact : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("data")]
public string Data { get; set; } = "";
    }
    
    [Description("A Schedule:Year contains from 1 to 52 week schedules")]
    [JsonObject("Schedule:Year")]
    public class Schedule_Year : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("schedule_type_limits_name")]
public string ScheduleTypeLimitsName { get; set; } = "";
        

[JsonProperty("schedule_weeks")]
public string ScheduleWeeks { get; set; } = "";
    }
    
    [Description(@"Irregular object. Does not follow the usual definition for fields. Fields A3... are: Through: Date For: Applicable days (ref: Schedule:Week:Compact) Interpolate: Average/Linear/No (ref: Schedule:Day:Interval) -- optional, if not used will be ""No"" Until: <Time> (ref: Schedule:Day:Interval) <numeric value> words ""Through"",""For"",""Interpolate"",""Until"" must be included.")]
    [JsonObject("Schedule:Compact")]
    public class Schedule_Compact : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("schedule_type_limits_name")]
public string ScheduleTypeLimitsName { get; set; } = "";
        

[JsonProperty("data")]
public string Data { get; set; } = "";
    }
    
    [Description("Constant hourly value for entire year.")]
    [JsonObject("Schedule:Constant")]
    public class Schedule_Constant : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("schedule_type_limits_name")]
public string ScheduleTypeLimitsName { get; set; } = "";
        

[JsonProperty("hourly_value")]
public System.Nullable<float> HourlyValue { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    [Description("A Schedule:File:Shading points to a CSV file that has 8760-8784 hours of sunlit f" +
        "raction data for all or some of the exterior surfaces.")]
    [JsonObject("Schedule:File:Shading")]
    public class Schedule_File_Shading : BHoMObject, IEnergyPlusClass
    {
        

[Description("The name of the file that writes all shading data.")]
[JsonProperty("file_name")]
public string FileName { get; set; } = "";
    }
    
    [Description("A Schedule:File points to a text computer file that has 8760-8784 hours of data.")]
    [JsonObject("Schedule:File")]
    public class Schedule_File : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("schedule_type_limits_name")]
public string ScheduleTypeLimitsName { get; set; } = "";
        

[JsonProperty("file_name")]
public string FileName { get; set; } = "";
        

[JsonProperty("column_number")]
public System.Nullable<float> ColumnNumber { get; set; } = null;
        

[JsonProperty("rows_to_skip_at_top")]
public System.Nullable<float> RowsToSkipAtTop { get; set; } = null;
        

[Description("8760 hours does not account for leap years, 8784 does. should be either 8760 or 8" +
    "784")]
[JsonProperty("number_of_hours_of_data")]
public System.Nullable<float> NumberOfHoursOfData { get; set; } = (System.Nullable<float>)Single.Parse("8760", CultureInfo.InvariantCulture);
        

[JsonProperty("column_separator")]
public Schedule_File_ColumnSeparator ColumnSeparator { get; set; } = (Schedule_File_ColumnSeparator)Enum.Parse(typeof(Schedule_File_ColumnSeparator), "Comma");
        

[Description(@"when the interval does not match the user specified timestep a ""Yes"" choice will average between the intervals request (to timestep resolution. a ""No"" choice will use the interval value at the simulation timestep without regard to if it matches the boundary or not.")]
[JsonProperty("interpolate_to_timestep")]
public EmptyNoYes InterpolateToTimestep { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Must be evenly divisible into 60")]
[JsonProperty("minutes_per_item")]
public System.Nullable<float> MinutesPerItem { get; set; } = null;
    }
    
    public enum Schedule_File_ColumnSeparator
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Comma")]
        Comma = 1,
        
        [JsonProperty("Semicolon")]
        Semicolon = 2,
        
        [JsonProperty("Space")]
        Space = 3,
        
        [JsonProperty("Tab")]
        Tab = 4,
    }
}
namespace BH.oM.Adapters.EnergyPlus.SetpointManagers
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("The simplest Setpoint Manager simply uses a schedule to determine one or more set" +
        "points. Values of the nodes are not used as input.")]
    [JsonObject("SetpointManager:Scheduled")]
    public class SetpointManager_Scheduled : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_variable")]
public SetpointManager_Scheduled_ControlVariable ControlVariable { get; set; } = (SetpointManager_Scheduled_ControlVariable)Enum.Parse(typeof(SetpointManager_Scheduled_ControlVariable), "HumidityRatio");
        

[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[Description("Node(s) at which control variable will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum SetpointManager_Scheduled_ControlVariable
    {
        
        [JsonProperty("HumidityRatio")]
        HumidityRatio = 0,
        
        [JsonProperty("MassFlowRate")]
        MassFlowRate = 1,
        
        [JsonProperty("MaximumHumidityRatio")]
        MaximumHumidityRatio = 2,
        
        [JsonProperty("MaximumMassFlowRate")]
        MaximumMassFlowRate = 3,
        
        [JsonProperty("MaximumTemperature")]
        MaximumTemperature = 4,
        
        [JsonProperty("MinimumHumidityRatio")]
        MinimumHumidityRatio = 5,
        
        [JsonProperty("MinimumMassFlowRate")]
        MinimumMassFlowRate = 6,
        
        [JsonProperty("MinimumTemperature")]
        MinimumTemperature = 7,
        
        [JsonProperty("Temperature")]
        Temperature = 8,
    }
    
    [Description("This setpoint manager places a high and low schedule value on one or more nodes.")]
    [JsonObject("SetpointManager:Scheduled:DualSetpoint")]
    public class SetpointManager_Scheduled_DualSetpoint : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_variable")]
public SetpointManager_Scheduled_DualSetpoint_ControlVariable ControlVariable { get; set; } = (SetpointManager_Scheduled_DualSetpoint_ControlVariable)Enum.Parse(typeof(SetpointManager_Scheduled_DualSetpoint_ControlVariable), "Temperature");
        

[JsonProperty("high_setpoint_schedule_name")]
public string HighSetpointScheduleName { get; set; } = "";
        

[JsonProperty("low_setpoint_schedule_name")]
public string LowSetpointScheduleName { get; set; } = "";
        

[Description("Node(s) at which temperature will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum SetpointManager_Scheduled_DualSetpoint_ControlVariable
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Temperature")]
        Temperature = 1,
    }
    
    [Description("This Setpoint Manager is used to place a setpoint temperature on system node acco" +
        "rding to the outdoor air temperature using a reset rule. The outdoor air tempera" +
        "ture is obtained from the weather information during the simulation.")]
    [JsonObject("SetpointManager:OutdoorAirReset")]
    public class SetpointManager_OutdoorAirReset : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_variable")]
public SetpointManager_OutdoorAirReset_ControlVariable ControlVariable { get; set; } = (SetpointManager_OutdoorAirReset_ControlVariable)Enum.Parse(typeof(SetpointManager_OutdoorAirReset_ControlVariable), "Temperature");
        

[JsonProperty("setpoint_at_outdoor_low_temperature")]
public System.Nullable<float> SetpointAtOutdoorLowTemperature { get; set; } = null;
        

[JsonProperty("outdoor_low_temperature")]
public System.Nullable<float> OutdoorLowTemperature { get; set; } = null;
        

[JsonProperty("setpoint_at_outdoor_high_temperature")]
public System.Nullable<float> SetpointAtOutdoorHighTemperature { get; set; } = null;
        

[JsonProperty("outdoor_high_temperature")]
public System.Nullable<float> OutdoorHighTemperature { get; set; } = null;
        

[Description("Node(s) at which temperature will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
        

[Description("Optional input. Schedule allows scheduling of the outdoor air reset rule - a sche" +
    "dule value of 1 means use the first rule; a value of 2 means use the second rule" +
    ".")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[Description("2nd outdoor air temperature reset rule")]
[JsonProperty("setpoint_at_outdoor_low_temperature_2")]
public System.Nullable<float> SetpointAtOutdoorLowTemperature2 { get; set; } = null;
        

[Description("2nd outdoor air temperature reset rule")]
[JsonProperty("outdoor_low_temperature_2")]
public System.Nullable<float> OutdoorLowTemperature2 { get; set; } = null;
        

[Description("2nd outdoor air temperature reset rule")]
[JsonProperty("setpoint_at_outdoor_high_temperature_2")]
public System.Nullable<float> SetpointAtOutdoorHighTemperature2 { get; set; } = null;
        

[Description("2nd outdoor air temperature reset rule")]
[JsonProperty("outdoor_high_temperature_2")]
public System.Nullable<float> OutdoorHighTemperature2 { get; set; } = null;
    }
    
    public enum SetpointManager_OutdoorAirReset_ControlVariable
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MaximumTemperature")]
        MaximumTemperature = 1,
        
        [JsonProperty("MinimumTemperature")]
        MinimumTemperature = 2,
        
        [JsonProperty("Temperature")]
        Temperature = 3,
    }
    
    [Description(@"This setpoint manager detects the control zone load, zone inlet node flow rate, and zone node temperature and calculates a setpoint temperature for the supply air that will satisfy the zone load (heating or cooling) for the control zone. This setpoint manager is not limited to reheat applications.")]
    [JsonObject("SetpointManager:SingleZone:Reheat")]
    public class SetpointManager_SingleZone_Reheat : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_variable")]
public SetpointManager_SingleZone_Reheat_ControlVariable ControlVariable { get; set; } = (SetpointManager_SingleZone_Reheat_ControlVariable)Enum.Parse(typeof(SetpointManager_SingleZone_Reheat_ControlVariable), "Temperature");
        

[JsonProperty("minimum_supply_air_temperature")]
public System.Nullable<float> MinimumSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("-99", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_supply_air_temperature")]
public System.Nullable<float> MaximumSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("99", CultureInfo.InvariantCulture);
        

[JsonProperty("control_zone_name")]
public string ControlZoneName { get; set; } = "";
        

[JsonProperty("zone_node_name")]
public string ZoneNodeName { get; set; } = "";
        

[JsonProperty("zone_inlet_node_name")]
public string ZoneInletNodeName { get; set; } = "";
        

[Description("Node(s) at which the temperature will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum SetpointManager_SingleZone_Reheat_ControlVariable
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Temperature")]
        Temperature = 1,
    }
    
    [Description(@"This setpoint manager detects the control zone load to meet the current heating setpoint, zone inlet node flow rate, and zone node temperature, and calculates a setpoint temperature for the supply air that will satisfy the zone heating load for the control zone.")]
    [JsonObject("SetpointManager:SingleZone:Heating")]
    public class SetpointManager_SingleZone_Heating : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_variable")]
public SetpointManager_SingleZone_Heating_ControlVariable ControlVariable { get; set; } = (SetpointManager_SingleZone_Heating_ControlVariable)Enum.Parse(typeof(SetpointManager_SingleZone_Heating_ControlVariable), "Temperature");
        

[JsonProperty("minimum_supply_air_temperature")]
public System.Nullable<float> MinimumSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("-99", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_supply_air_temperature")]
public System.Nullable<float> MaximumSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("99", CultureInfo.InvariantCulture);
        

[JsonProperty("control_zone_name")]
public string ControlZoneName { get; set; } = "";
        

[JsonProperty("zone_node_name")]
public string ZoneNodeName { get; set; } = "";
        

[JsonProperty("zone_inlet_node_name")]
public string ZoneInletNodeName { get; set; } = "";
        

[Description("Node(s) at which the temperature will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum SetpointManager_SingleZone_Heating_ControlVariable
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Temperature")]
        Temperature = 1,
    }
    
    [Description(@"This setpoint manager detects the control zone load to meet the current cooling setpoint, zone inlet node flow rate, and zone node temperature, and calculates a setpoint temperature for the supply air that will satisfy the zone cooling load for the control zone.")]
    [JsonObject("SetpointManager:SingleZone:Cooling")]
    public class SetpointManager_SingleZone_Cooling : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_variable")]
public SetpointManager_SingleZone_Cooling_ControlVariable ControlVariable { get; set; } = (SetpointManager_SingleZone_Cooling_ControlVariable)Enum.Parse(typeof(SetpointManager_SingleZone_Cooling_ControlVariable), "Temperature");
        

[JsonProperty("minimum_supply_air_temperature")]
public System.Nullable<float> MinimumSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("-99", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_supply_air_temperature")]
public System.Nullable<float> MaximumSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("99", CultureInfo.InvariantCulture);
        

[JsonProperty("control_zone_name")]
public string ControlZoneName { get; set; } = "";
        

[JsonProperty("zone_node_name")]
public string ZoneNodeName { get; set; } = "";
        

[JsonProperty("zone_inlet_node_name")]
public string ZoneInletNodeName { get; set; } = "";
        

[Description("Node(s) at which the temperature will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum SetpointManager_SingleZone_Cooling_ControlVariable
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Temperature")]
        Temperature = 1,
    }
    
    [Description("The Single Zone Minimum Humidity Setpoint Manager allows the control of a single " +
        "zone minimum humidity level. This setpoint manager can be used in conjunction wi" +
        "th object ZoneControl:Humidistat to detect humidity levels.")]
    [JsonObject("SetpointManager:SingleZone:Humidity:Minimum")]
    public class SetpointManager_SingleZone_Humidity_Minimum : BHoMObject, IEnergyPlusClass
    {
        

[Description("Node(s) at which humidity ratio setpoint will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
        

[Description("Name of the zone air node for the humidity control zone")]
[JsonProperty("control_zone_air_node_name")]
public string ControlZoneAirNodeName { get; set; } = "";
    }
    
    [Description("The Single Zone Maximum Humidity Setpoint Manager allows the control of a single " +
        "zone maximum humidity level. This setpoint manager can be used in conjunction wi" +
        "th object ZoneControl:Humidistat to detect humidity levels.")]
    [JsonObject("SetpointManager:SingleZone:Humidity:Maximum")]
    public class SetpointManager_SingleZone_Humidity_Maximum : BHoMObject, IEnergyPlusClass
    {
        

[Description("Node(s) at which humidity ratio setpoint will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
        

[Description("Name of the zone air node for the humidity control zone")]
[JsonProperty("control_zone_air_node_name")]
public string ControlZoneAirNodeName { get; set; } = "";
    }
    
    [Description("The Mixed Air Setpoint Manager is meant to be used in conjunction with a Controll" +
        "er:OutdoorAir object. This setpoint manager is used to establish a temperature s" +
        "etpoint at the mixed air node.")]
    [JsonObject("SetpointManager:MixedAir")]
    public class SetpointManager_MixedAir : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_variable")]
public SetpointManager_MixedAir_ControlVariable ControlVariable { get; set; } = (SetpointManager_MixedAir_ControlVariable)Enum.Parse(typeof(SetpointManager_MixedAir_ControlVariable), "Temperature");
        

[JsonProperty("reference_setpoint_node_name")]
public string ReferenceSetpointNodeName { get; set; } = "";
        

[JsonProperty("fan_inlet_node_name")]
public string FanInletNodeName { get; set; } = "";
        

[JsonProperty("fan_outlet_node_name")]
public string FanOutletNodeName { get; set; } = "";
        

[Description("Node(s) at which the temperature will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
        

[Description("Optional field used to limit economizer operation to prevent freezing of DX cooli" +
    "ng coil.")]
[JsonProperty("cooling_coil_inlet_node_name")]
public string CoolingCoilInletNodeName { get; set; } = "";
        

[Description("Optional field used to limit economizer operation to prevent freezing of DX cooli" +
    "ng coil.")]
[JsonProperty("cooling_coil_outlet_node_name")]
public string CoolingCoilOutletNodeName { get; set; } = "";
        

[Description("Optional field used to limit economizer operation to prevent freezing of DX cooli" +
    "ng coil.")]
[JsonProperty("minimum_temperature_at_cooling_coil_outlet_node")]
public System.Nullable<float> MinimumTemperatureAtCoolingCoilOutletNode { get; set; } = (System.Nullable<float>)Single.Parse("7.2", CultureInfo.InvariantCulture);
    }
    
    public enum SetpointManager_MixedAir_ControlVariable
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Temperature")]
        Temperature = 1,
    }
    
    [Description("This setpoint manager determines the required conditions at the outdoor air strea" +
        "m node which will produce the reference setpoint condition at the mixed air node" +
        " when mixed with the return air stream")]
    [JsonObject("SetpointManager:OutdoorAirPretreat")]
    public class SetpointManager_OutdoorAirPretreat : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_variable")]
public SetpointManager_OutdoorAirPretreat_ControlVariable ControlVariable { get; set; } = (SetpointManager_OutdoorAirPretreat_ControlVariable)Enum.Parse(typeof(SetpointManager_OutdoorAirPretreat_ControlVariable), "HumidityRatio");
        

[Description("Applicable only if Control variable is Temperature")]
[JsonProperty("minimum_setpoint_temperature")]
public System.Nullable<float> MinimumSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("-99", CultureInfo.InvariantCulture);
        

[Description("Applicable only if Control variable is Temperature")]
[JsonProperty("maximum_setpoint_temperature")]
public System.Nullable<float> MaximumSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("99", CultureInfo.InvariantCulture);
        

[Description("Applicable only if Control variable is MaximumHumidityRatio, MinimumHumidityRatio" +
    ", or HumidityRatio - then minimum is 0.00001")]
[JsonProperty("minimum_setpoint_humidity_ratio")]
public System.Nullable<float> MinimumSetpointHumidityRatio { get; set; } = (System.Nullable<float>)Single.Parse("1E-05", CultureInfo.InvariantCulture);
        

[Description("Applicable only if Control variable is MaximumHumidityRatio, MinimumHumidityRatio" +
    ", or HumidityRatio - then minimum is 0.00001")]
[JsonProperty("maximum_setpoint_humidity_ratio")]
public System.Nullable<float> MaximumSetpointHumidityRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("The current setpoint at this node is the desired condition for the Mixed Air Node" +
    " This node must have a valid setpoint which has been set by another setpoint man" +
    "ager")]
[JsonProperty("reference_setpoint_node_name")]
public string ReferenceSetpointNodeName { get; set; } = "";
        

[Description("Name of Mixed Air Node")]
[JsonProperty("mixed_air_stream_node_name")]
public string MixedAirStreamNodeName { get; set; } = "";
        

[Description("Name of Outdoor Air Stream Node")]
[JsonProperty("outdoor_air_stream_node_name")]
public string OutdoorAirStreamNodeName { get; set; } = "";
        

[Description("Name of Return Air Stream Node")]
[JsonProperty("return_air_stream_node_name")]
public string ReturnAirStreamNodeName { get; set; } = "";
        

[Description("Node(s) at which the temperature or humidity ratio will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum SetpointManager_OutdoorAirPretreat_ControlVariable
    {
        
        [JsonProperty("HumidityRatio")]
        HumidityRatio = 0,
        
        [JsonProperty("MaximumHumidityRatio")]
        MaximumHumidityRatio = 1,
        
        [JsonProperty("MinimumHumidityRatio")]
        MinimumHumidityRatio = 2,
        
        [JsonProperty("Temperature")]
        Temperature = 3,
    }
    
    [Description("This SetpointManager resets the cooling supply air temperature of a central force" +
        "d air HVAC system according to the cooling demand of the warmest zone.")]
    [JsonObject("SetpointManager:Warmest")]
    public class SetpointManager_Warmest : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_variable")]
public SetpointManager_Warmest_ControlVariable ControlVariable { get; set; } = (SetpointManager_Warmest_ControlVariable)Enum.Parse(typeof(SetpointManager_Warmest_ControlVariable), "Temperature");
        

[Description("Enter the name of an AirLoopHVAC object")]
[JsonProperty("hvac_air_loop_name")]
public string HvacAirLoopName { get; set; } = "";
        

[JsonProperty("minimum_setpoint_temperature")]
public System.Nullable<float> MinimumSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("12", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_setpoint_temperature")]
public System.Nullable<float> MaximumSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("18", CultureInfo.InvariantCulture);
        

[JsonProperty("strategy")]
public SetpointManager_Warmest_Strategy Strategy { get; set; } = (SetpointManager_Warmest_Strategy)Enum.Parse(typeof(SetpointManager_Warmest_Strategy), "MaximumTemperature");
        

[Description("Node(s) at which the temperature will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum SetpointManager_Warmest_ControlVariable
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Temperature")]
        Temperature = 1,
    }
    
    public enum SetpointManager_Warmest_Strategy
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MaximumTemperature")]
        MaximumTemperature = 1,
    }
    
    [Description("This SetpointManager is used in dual duct systems to reset the setpoint temperatu" +
        "re of the air in the heating supply duct. Usually it is used in conjunction with" +
        " a SetpointManager:Warmest resetting the temperature of the air in the cooling s" +
        "upply duct.")]
    [JsonObject("SetpointManager:Coldest")]
    public class SetpointManager_Coldest : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_variable")]
public SetpointManager_Coldest_ControlVariable ControlVariable { get; set; } = (SetpointManager_Coldest_ControlVariable)Enum.Parse(typeof(SetpointManager_Coldest_ControlVariable), "Temperature");
        

[Description("Enter the name of an AirLoopHVAC object.")]
[JsonProperty("hvac_air_loop_name")]
public string HvacAirLoopName { get; set; } = "";
        

[JsonProperty("minimum_setpoint_temperature")]
public System.Nullable<float> MinimumSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("20", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_setpoint_temperature")]
public System.Nullable<float> MaximumSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[JsonProperty("strategy")]
public SetpointManager_Coldest_Strategy Strategy { get; set; } = (SetpointManager_Coldest_Strategy)Enum.Parse(typeof(SetpointManager_Coldest_Strategy), "MinimumTemperature");
        

[Description("Node(s) at which the temperature will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum SetpointManager_Coldest_ControlVariable
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Temperature")]
        Temperature = 1,
    }
    
    public enum SetpointManager_Coldest_Strategy
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MinimumTemperature")]
        MinimumTemperature = 1,
    }
    
    [Description("This setpoint manager determines the required mass flow rate through a return air" +
        " bypass duct to meet the specified temperature setpoint")]
    [JsonObject("SetpointManager:ReturnAirBypassFlow")]
    public class SetpointManager_ReturnAirBypassFlow : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_variable")]
public SetpointManager_ReturnAirBypassFlow_ControlVariable ControlVariable { get; set; } = (SetpointManager_ReturnAirBypassFlow_ControlVariable)Enum.Parse(typeof(SetpointManager_ReturnAirBypassFlow_ControlVariable), "Flow");
        

[Description("Enter the name of an AirLoopHVAC object.")]
[JsonProperty("hvac_air_loop_name")]
public string HvacAirLoopName { get; set; } = "";
        

[JsonProperty("temperature_setpoint_schedule_name")]
public string TemperatureSetpointScheduleName { get; set; } = "";
    }
    
    public enum SetpointManager_ReturnAirBypassFlow_ControlVariable
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Flow")]
        Flow = 1,
    }
    
    [Description("This setpoint manager sets both the supply air temperature and the supply air flo" +
        "w rate.")]
    [JsonObject("SetpointManager:WarmestTemperatureFlow")]
    public class SetpointManager_WarmestTemperatureFlow : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_variable")]
public SetpointManager_WarmestTemperatureFlow_ControlVariable ControlVariable { get; set; } = (SetpointManager_WarmestTemperatureFlow_ControlVariable)Enum.Parse(typeof(SetpointManager_WarmestTemperatureFlow_ControlVariable), "Temperature");
        

[Description("Enter the name of an AirLoopHVAC object.")]
[JsonProperty("hvac_air_loop_name")]
public string HvacAirLoopName { get; set; } = "";
        

[JsonProperty("minimum_setpoint_temperature")]
public System.Nullable<float> MinimumSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("12", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_setpoint_temperature")]
public System.Nullable<float> MaximumSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("18", CultureInfo.InvariantCulture);
        

[Description(@"For TemperatureFirst the manager tries to find the highest setpoint temperature that will satisfy all the zone cooling loads at minimum supply air flow rate. If this setpoint temperature is less than the minimum, the setpoint temperature is set to the minimum, and the supply air flow rate is increased to meet the loads. For FlowFirst the manager tries to find the lowest supply air flow rate that will satisfy all the zone cooling loads at the maximum setpoint temperature. If this flow is greater than the maximum, the flow is set to the maximum and the setpoint temperature is reduced to satisfy the cooling loads.")]
[JsonProperty("strategy")]
public SetpointManager_WarmestTemperatureFlow_Strategy Strategy { get; set; } = (SetpointManager_WarmestTemperatureFlow_Strategy)Enum.Parse(typeof(SetpointManager_WarmestTemperatureFlow_Strategy), "TemperatureFirst");
        

[Description("Node(s) at which the temperature will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
        

[Description("Fraction of the maximum supply air flow rate. Used to define the minimum supply f" +
    "low for the TemperatureFirst strategy.")]
[JsonProperty("minimum_turndown_ratio")]
public System.Nullable<float> MinimumTurndownRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
    }
    
    public enum SetpointManager_WarmestTemperatureFlow_ControlVariable
    {
        
        [JsonProperty("Temperature")]
        Temperature = 0,
    }
    
    public enum SetpointManager_WarmestTemperatureFlow_Strategy
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FlowFirst")]
        FlowFirst = 1,
        
        [JsonProperty("TemperatureFirst")]
        TemperatureFirst = 2,
    }
    
    [Description("This setpoint manager sets the average supply air temperature based on the heatin" +
        "g load requirements of all controlled zones in an air loop served by a central a" +
        "ir-conditioner.")]
    [JsonObject("SetpointManager:MultiZone:Heating:Average")]
    public class SetpointManager_MultiZone_Heating_Average : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of an AirLoopHVAC object")]
[JsonProperty("hvac_air_loop_name")]
public string HvacAirLoopName { get; set; } = "";
        

[JsonProperty("minimum_setpoint_temperature")]
public System.Nullable<float> MinimumSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("20", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_setpoint_temperature")]
public System.Nullable<float> MaximumSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[Description("Node(s) at which the temperature will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    [Description("This setpoint manager sets the average supply air temperature based on the coolin" +
        "g load requirements of all controlled zones in an air loop served by a central a" +
        "ir-conditioner.")]
    [JsonObject("SetpointManager:MultiZone:Cooling:Average")]
    public class SetpointManager_MultiZone_Cooling_Average : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of an AirLoopHVAC object")]
[JsonProperty("hvac_air_loop_name")]
public string HvacAirLoopName { get; set; } = "";
        

[JsonProperty("minimum_setpoint_temperature")]
public System.Nullable<float> MinimumSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("12", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_setpoint_temperature")]
public System.Nullable<float> MaximumSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("18", CultureInfo.InvariantCulture);
        

[Description("Node(s) at which the temperature will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    [Description("This setpoint manager sets the average supply air minimum humidity ratio based on" +
        " moisture load requirements of all controlled zones in an air loop served by a c" +
        "entral air-conditioner.")]
    [JsonObject("SetpointManager:MultiZone:MinimumHumidity:Average")]
    public class SetpointManager_MultiZone_MinimumHumidity_Average : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of an AirLoopHVAC object")]
[JsonProperty("hvac_air_loop_name")]
public string HvacAirLoopName { get; set; } = "";
        

[JsonProperty("minimum_setpoint_humidity_ratio")]
public System.Nullable<float> MinimumSetpointHumidityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.005", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_setpoint_humidity_ratio")]
public System.Nullable<float> MaximumSetpointHumidityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.012", CultureInfo.InvariantCulture);
        

[Description("Node(s) at which the humidity ratio will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    [Description("This setpoint manager sets the average supply air maximum humidity ratio based on" +
        " moisture load requirements of all controlled zones in an air loop served by a c" +
        "entral air-conditioner.")]
    [JsonObject("SetpointManager:MultiZone:MaximumHumidity:Average")]
    public class SetpointManager_MultiZone_MaximumHumidity_Average : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of an AirLoopHVAC object")]
[JsonProperty("hvac_air_loop_name")]
public string HvacAirLoopName { get; set; } = "";
        

[JsonProperty("minimum_setpoint_humidity_ratio")]
public System.Nullable<float> MinimumSetpointHumidityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.008", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_setpoint_humidity_ratio")]
public System.Nullable<float> MaximumSetpointHumidityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.015", CultureInfo.InvariantCulture);
        

[Description("Node(s) at which the humidity ratio will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    [Description(@"This setpoint manager sets the minimum supply air humidity ratio based on humidification requirements of a controlled zone with critical humidity ratio setpoint (i.e., a zone with the highest humidity ratio setpoint) in an air loop served by a central air-conditioner.")]
    [JsonObject("SetpointManager:MultiZone:Humidity:Minimum")]
    public class SetpointManager_MultiZone_Humidity_Minimum : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of an AirLoopHVAC object")]
[JsonProperty("hvac_air_loop_name")]
public string HvacAirLoopName { get; set; } = "";
        

[JsonProperty("minimum_setpoint_humidity_ratio")]
public System.Nullable<float> MinimumSetpointHumidityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.005", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_setpoint_humidity_ratio")]
public System.Nullable<float> MaximumSetpointHumidityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.012", CultureInfo.InvariantCulture);
        

[Description("Node(s) at which the humidity ratio will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    [Description(@"This setpoint manager sets the maximum supply air humidity ratio based on dehumidification requirements of a controlled zone with critical humidity ratio setpoint (i.e., a zone with the lowest humidity ratio setpoint) in an air loop served by a central air-conditioner.")]
    [JsonObject("SetpointManager:MultiZone:Humidity:Maximum")]
    public class SetpointManager_MultiZone_Humidity_Maximum : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of an AirLoopHVAC object")]
[JsonProperty("hvac_air_loop_name")]
public string HvacAirLoopName { get; set; } = "";
        

[JsonProperty("minimum_setpoint_humidity_ratio")]
public System.Nullable<float> MinimumSetpointHumidityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.008", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_setpoint_humidity_ratio")]
public System.Nullable<float> MaximumSetpointHumidityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.015", CultureInfo.InvariantCulture);
        

[Description("Node(s) at which the humidity ratio will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    [Description("This setpoint manager is used to place a temperature setpoint on a system node th" +
        "at is derived from the current outdoor air environmental conditions. The outdoor" +
        " air conditions are obtained from the weather information during the simulation." +
        "")]
    [JsonObject("SetpointManager:FollowOutdoorAirTemperature")]
    public class SetpointManager_FollowOutdoorAirTemperature : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_variable")]
public SetpointManager_FollowOutdoorAirTemperature_ControlVariable ControlVariable { get; set; } = (SetpointManager_FollowOutdoorAirTemperature_ControlVariable)Enum.Parse(typeof(SetpointManager_FollowOutdoorAirTemperature_ControlVariable), "Temperature");
        

[JsonProperty("reference_temperature_type")]
public SetpointManager_FollowOutdoorAirTemperature_ReferenceTemperatureType ReferenceTemperatureType { get; set; } = (SetpointManager_FollowOutdoorAirTemperature_ReferenceTemperatureType)Enum.Parse(typeof(SetpointManager_FollowOutdoorAirTemperature_ReferenceTemperatureType), "OutdoorAirWetBulb");
        

[JsonProperty("offset_temperature_difference")]
public System.Nullable<float> OffsetTemperatureDifference { get; set; } = null;
        

[JsonProperty("maximum_setpoint_temperature")]
public System.Nullable<float> MaximumSetpointTemperature { get; set; } = null;
        

[JsonProperty("minimum_setpoint_temperature")]
public System.Nullable<float> MinimumSetpointTemperature { get; set; } = null;
        

[Description("Node(s) at which control variable will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum SetpointManager_FollowOutdoorAirTemperature_ControlVariable
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MaximumTemperature")]
        MaximumTemperature = 1,
        
        [JsonProperty("MinimumTemperature")]
        MinimumTemperature = 2,
        
        [JsonProperty("Temperature")]
        Temperature = 3,
    }
    
    public enum SetpointManager_FollowOutdoorAirTemperature_ReferenceTemperatureType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("OutdoorAirDryBulb")]
        OutdoorAirDryBulb = 1,
        
        [JsonProperty("OutdoorAirWetBulb")]
        OutdoorAirWetBulb = 2,
    }
    
    [Description(@"This setpoint manager is used to place a temperature setpoint on a system node that is derived from the current temperatures at a separate system node. The current value of the temperature at a reference node is obtained and used to generate setpoint on a second system node. If the reference node is also designated to be an outdoor air (intake) node, then this setpoint manager can be used to follow outdoor air conditions that are adjusted for altitude.")]
    [JsonObject("SetpointManager:FollowSystemNodeTemperature")]
    public class SetpointManager_FollowSystemNodeTemperature : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_variable")]
public SetpointManager_FollowSystemNodeTemperature_ControlVariable ControlVariable { get; set; } = (SetpointManager_FollowSystemNodeTemperature_ControlVariable)Enum.Parse(typeof(SetpointManager_FollowSystemNodeTemperature_ControlVariable), "Temperature");
        

[JsonProperty("reference_node_name")]
public string ReferenceNodeName { get; set; } = "";
        

[JsonProperty("reference_temperature_type")]
public SetpointManager_FollowSystemNodeTemperature_ReferenceTemperatureType ReferenceTemperatureType { get; set; } = (SetpointManager_FollowSystemNodeTemperature_ReferenceTemperatureType)Enum.Parse(typeof(SetpointManager_FollowSystemNodeTemperature_ReferenceTemperatureType), "NodeDryBulb");
        

[JsonProperty("offset_temperature_difference")]
public System.Nullable<float> OffsetTemperatureDifference { get; set; } = null;
        

[JsonProperty("maximum_limit_setpoint_temperature")]
public System.Nullable<float> MaximumLimitSetpointTemperature { get; set; } = null;
        

[JsonProperty("minimum_limit_setpoint_temperature")]
public System.Nullable<float> MinimumLimitSetpointTemperature { get; set; } = null;
        

[Description("Node(s) at which control variable will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum SetpointManager_FollowSystemNodeTemperature_ControlVariable
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MaximumTemperature")]
        MaximumTemperature = 1,
        
        [JsonProperty("MinimumTemperature")]
        MinimumTemperature = 2,
        
        [JsonProperty("Temperature")]
        Temperature = 3,
    }
    
    public enum SetpointManager_FollowSystemNodeTemperature_ReferenceTemperatureType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("NodeDryBulb")]
        NodeDryBulb = 1,
        
        [JsonProperty("NodeWetBulb")]
        NodeWetBulb = 2,
    }
    
    [Description(@"This setpoint manager is used to place a temperature setpoint on a system node that is derived from a current ground temperature. The ground temperatures are specified in different Site:GroundTemperature:* objects and used during the simulation. This setpoint manager is primarily intended for condenser or plant loops using some type of ground heat exchanger.")]
    [JsonObject("SetpointManager:FollowGroundTemperature")]
    public class SetpointManager_FollowGroundTemperature : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_variable")]
public SetpointManager_FollowGroundTemperature_ControlVariable ControlVariable { get; set; } = (SetpointManager_FollowGroundTemperature_ControlVariable)Enum.Parse(typeof(SetpointManager_FollowGroundTemperature_ControlVariable), "Temperature");
        

[JsonProperty("reference_ground_temperature_object_type")]
public SetpointManager_FollowGroundTemperature_ReferenceGroundTemperatureObjectType ReferenceGroundTemperatureObjectType { get; set; } = (SetpointManager_FollowGroundTemperature_ReferenceGroundTemperatureObjectType)Enum.Parse(typeof(SetpointManager_FollowGroundTemperature_ReferenceGroundTemperatureObjectType), "SiteGroundTemperatureBuildingSurface");
        

[JsonProperty("offset_temperature_difference")]
public System.Nullable<float> OffsetTemperatureDifference { get; set; } = null;
        

[JsonProperty("maximum_setpoint_temperature")]
public System.Nullable<float> MaximumSetpointTemperature { get; set; } = null;
        

[JsonProperty("minimum_setpoint_temperature")]
public System.Nullable<float> MinimumSetpointTemperature { get; set; } = null;
        

[Description("Node(s) at which control variable will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum SetpointManager_FollowGroundTemperature_ControlVariable
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MaximumTemperature")]
        MaximumTemperature = 1,
        
        [JsonProperty("MinimumTemperature")]
        MinimumTemperature = 2,
        
        [JsonProperty("Temperature")]
        Temperature = 3,
    }
    
    public enum SetpointManager_FollowGroundTemperature_ReferenceGroundTemperatureObjectType
    {
        
        [JsonProperty("Site:GroundTemperature:BuildingSurface")]
        SiteGroundTemperatureBuildingSurface = 0,
        
        [JsonProperty("Site:GroundTemperature:Deep")]
        SiteGroundTemperatureDeep = 1,
        
        [JsonProperty("Site:GroundTemperature:FCfactorMethod")]
        SiteGroundTemperatureFCfactorMethod = 2,
        
        [JsonProperty("Site:GroundTemperature:Shallow")]
        SiteGroundTemperatureShallow = 3,
    }
    
    [Description("This setpoint manager uses one curve to determine the optimum condenser entering " +
        "water temperature for a given timestep and two other curves to place boundary co" +
        "nditions on the setpoint value.")]
    [JsonObject("SetpointManager:CondenserEnteringReset")]
    public class SetpointManager_CondenserEnteringReset : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_variable")]
public SetpointManager_CondenserEnteringReset_ControlVariable ControlVariable { get; set; } = (SetpointManager_CondenserEnteringReset_ControlVariable)Enum.Parse(typeof(SetpointManager_CondenserEnteringReset_ControlVariable), "Temperature");
        

[Description("This scheduled setpoint value is only used in a given timestep if the \"Optimized\"" +
    " Condenser Entering Temperature does not fall within the prescribed boundary con" +
    "ditions.")]
[JsonProperty("default_condenser_entering_water_temperature_schedule_name")]
public string DefaultCondenserEnteringWaterTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("minimum_design_wetbulb_temperature_curve_name")]
public string MinimumDesignWetbulbTemperatureCurveName { get; set; } = "";
        

[JsonProperty("minimum_outside_air_wetbulb_temperature_curve_name")]
public string MinimumOutsideAirWetbulbTemperatureCurveName { get; set; } = "";
        

[JsonProperty("optimized_cond_entering_water_temperature_curve_name")]
public string OptimizedCondEnteringWaterTemperatureCurveName { get; set; } = "";
        

[JsonProperty("minimum_lift")]
public System.Nullable<float> MinimumLift { get; set; } = (System.Nullable<float>)Single.Parse("11.1", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_condenser_entering_water_temperature")]
public System.Nullable<float> MaximumCondenserEnteringWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("32", CultureInfo.InvariantCulture);
        

[JsonProperty("cooling_tower_design_inlet_air_wet_bulb_temperature")]
public System.Nullable<float> CoolingTowerDesignInletAirWetBulbTemperature { get; set; } = (System.Nullable<float>)Single.Parse("25.56", CultureInfo.InvariantCulture);
        

[Description("Node(s) at which control variable will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum SetpointManager_CondenserEnteringReset_ControlVariable
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Temperature")]
        Temperature = 1,
    }
    
    [Description("This setpoint manager determine the ideal optimum condenser entering water temper" +
        "ature setpoint for a given timestep.")]
    [JsonObject("SetpointManager:CondenserEnteringReset:Ideal")]
    public class SetpointManager_CondenserEnteringReset_Ideal : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("control_variable")]
public SetpointManager_CondenserEnteringReset_Ideal_ControlVariable ControlVariable { get; set; } = (SetpointManager_CondenserEnteringReset_Ideal_ControlVariable)Enum.Parse(typeof(SetpointManager_CondenserEnteringReset_Ideal_ControlVariable), "Temperature");
        

[JsonProperty("minimum_lift")]
public System.Nullable<float> MinimumLift { get; set; } = (System.Nullable<float>)Single.Parse("11.1", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_condenser_entering_water_temperature")]
public System.Nullable<float> MaximumCondenserEnteringWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("32", CultureInfo.InvariantCulture);
        

[Description("Node(s) at which control variable will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum SetpointManager_CondenserEnteringReset_Ideal_ControlVariable
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Temperature")]
        Temperature = 1,
    }
    
    [Description(@"This object can be used with CoilSystem:Cooling:DX to model on/off cycling control of single stage air systems. Setpoints are modulated to run coil full on or full off depending on zone conditions. Intended for use with ZoneControl:Thermostat:StagedDualSetpoint")]
    [JsonObject("SetpointManager:SingleZone:OneStageCooling")]
    public class SetpointManager_SingleZone_OneStageCooling : BHoMObject, IEnergyPlusClass
    {
        

[Description("This is the setpoint value applied when cooling device is to cycle ON")]
[JsonProperty("cooling_stage_on_supply_air_setpoint_temperature")]
public System.Nullable<float> CoolingStageOnSupplyAirSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("-99", CultureInfo.InvariantCulture);
        

[Description("This is the setpoint value applied when cooling device is to cycle OFF")]
[JsonProperty("cooling_stage_off_supply_air_setpoint_temperature")]
public System.Nullable<float> CoolingStageOffSupplyAirSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("99", CultureInfo.InvariantCulture);
        

[JsonProperty("control_zone_name")]
public string ControlZoneName { get; set; } = "";
        

[Description("Node(s) at which the temperature will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    [Description(@"This object can be used with CoilSystem:Heating:DX, Coil:Heating:Fuel, Coil:Heating:Electric to model on/off cycling control of single stage air systems. Setpoints are modulated to run coil full on or full off depending on zone conditions. Intended for use with ZoneControl:Thermostat:StagedDualSetpoint.")]
    [JsonObject("SetpointManager:SingleZone:OneStageHeating")]
    public class SetpointManager_SingleZone_OneStageHeating : BHoMObject, IEnergyPlusClass
    {
        

[Description("This is the setpoint value applied when heating device is to cycle ON")]
[JsonProperty("heating_stage_on_supply_air_setpoint_temperature")]
public System.Nullable<float> HeatingStageOnSupplyAirSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("99", CultureInfo.InvariantCulture);
        

[Description("This is the setpoint value applied when heating device is to cycle OFF")]
[JsonProperty("heating_stage_off_supply_air_setpoint_temperature")]
public System.Nullable<float> HeatingStageOffSupplyAirSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("-99", CultureInfo.InvariantCulture);
        

[JsonProperty("control_zone_name")]
public string ControlZoneName { get; set; } = "";
        

[Description("Node(s) at which the temperature will be set")]
[JsonProperty("setpoint_node_or_nodelist_name")]
public string SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    [Description(@"This setpoint manager is used to place a temperature setpoint on a plant supply outlet node based on a target return water setpoint. The setpoint manager attempts to achieve the desired return water temperature by adjusting the supply temperature setpoint based on the plant conditions at each system time step.")]
    [JsonObject("SetpointManager:ReturnTemperature:ChilledWater")]
    public class SetpointManager_ReturnTemperature_ChilledWater : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"This is the name of the supply outlet node for the plant being controlled by this setpoint manager. Typically this is where the setpoint will be actuated for supply equipment to control to, but not necessarily. This setpoint manager will mine that information from the internal plant data structures.")]
[JsonProperty("plant_loop_supply_outlet_node")]
public string PlantLoopSupplyOutletNode { get; set; } = "";
        

[Description("This is the name of the supply inlet node for the plant being controlled with thi" +
    "s setpoint manager. The temperature on this node is controlled by actuating the " +
    "supply setpoint.")]
[JsonProperty("plant_loop_supply_inlet_node")]
public string PlantLoopSupplyInletNode { get; set; } = "";
        

[Description("This is the minimum chilled water supply temperature setpoint. This is also used " +
    "as the default setpoint during no-load or negative-load conditions and during in" +
    "itialization.")]
[JsonProperty("minimum_supply_temperature_setpoint")]
public System.Nullable<float> MinimumSupplyTemperatureSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[Description("This is the maximum reset temperature for the chilled water supply.")]
[JsonProperty("maximum_supply_temperature_setpoint")]
public System.Nullable<float> MaximumSupplyTemperatureSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("This defines whether the chilled water return temperature target is constant, sch" +
    "eduled, or specified on the supply inlet node by a separate setpoint manager.")]
[JsonProperty("return_temperature_setpoint_input_type")]
public SetpointManager_ReturnTemperature_ChilledWater_ReturnTemperatureSetpointInputType ReturnTemperatureSetpointInputType { get; set; } = (SetpointManager_ReturnTemperature_ChilledWater_ReturnTemperatureSetpointInputType)Enum.Parse(typeof(SetpointManager_ReturnTemperature_ChilledWater_ReturnTemperatureSetpointInputType), "Constant");
        

[Description("This is the desired return temperature target, which is met by adjusting the supp" +
    "ly temperature setpoint. This constant value is only used if the Design Chilled " +
    "Water Return Temperature Input Type is Constant")]
[JsonProperty("return_temperature_setpoint_constant_value")]
public System.Nullable<float> ReturnTemperatureSetpointConstantValue { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[Description(@"This is the desired return temperature target, which is met by adjusting the supply temperature setpoint. This is a schedule name to allow the return temperature target value to be scheduled. This field is only used if the Design Chilled Water Return Temperature Input Type is Scheduled")]
[JsonProperty("return_temperature_setpoint_schedule_name")]
public string ReturnTemperatureSetpointScheduleName { get; set; } = "";
    }
    
    public enum SetpointManager_ReturnTemperature_ChilledWater_ReturnTemperatureSetpointInputType
    {
        
        [JsonProperty("Constant")]
        Constant = 0,
        
        [JsonProperty("ReturnTemperatureSetpoint")]
        ReturnTemperatureSetpoint = 1,
        
        [JsonProperty("Scheduled")]
        Scheduled = 2,
    }
    
    [Description(@"This setpoint manager is used to place a temperature setpoint on a plant supply outlet node based on a target return water setpoint. The setpoint manager attempts to achieve the desired return water temperature by adjusting the supply temperature setpoint based on the plant conditions at each system time step.")]
    [JsonObject("SetpointManager:ReturnTemperature:HotWater")]
    public class SetpointManager_ReturnTemperature_HotWater : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"This is the name of the supply outlet node for the plant being controlled by this setpoint manager. Typically this is where the setpoint will be actuated for supply equipment to control to, but not necessarily. This setpoint manager will mine that information from the internal plant data structures.")]
[JsonProperty("plant_loop_supply_outlet_node")]
public string PlantLoopSupplyOutletNode { get; set; } = "";
        

[Description("This is the name of the supply inlet node for the plant being controlled with thi" +
    "s setpoint manager. The temperature on this node is controlled by actuating the " +
    "supply setpoint.")]
[JsonProperty("plant_loop_supply_inlet_node")]
public string PlantLoopSupplyInletNode { get; set; } = "";
        

[Description("This is the minimum reset temperature for the hot water supply.")]
[JsonProperty("minimum_supply_temperature_setpoint")]
public System.Nullable<float> MinimumSupplyTemperatureSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("77", CultureInfo.InvariantCulture);
        

[Description("This is the maximum hot water supply temperature setpoint. This is also used as t" +
    "he default setpoint during no-load or negative-load conditions and during initia" +
    "lization.")]
[JsonProperty("maximum_supply_temperature_setpoint")]
public System.Nullable<float> MaximumSupplyTemperatureSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("82", CultureInfo.InvariantCulture);
        

[Description("This defines whether the hot water return temperature target is constant, schedul" +
    "ed, or specified on the supply inlet node by a separate setpoint manager.")]
[JsonProperty("return_temperature_setpoint_input_type")]
public SetpointManager_ReturnTemperature_HotWater_ReturnTemperatureSetpointInputType ReturnTemperatureSetpointInputType { get; set; } = (SetpointManager_ReturnTemperature_HotWater_ReturnTemperatureSetpointInputType)Enum.Parse(typeof(SetpointManager_ReturnTemperature_HotWater_ReturnTemperatureSetpointInputType), "Constant");
        

[Description("This is the desired return temperature target, which is met by adjusting the supp" +
    "ly temperature setpoint. This constant value is only used if the Design Hot Wate" +
    "r Return Temperature Input Type is Constant")]
[JsonProperty("return_temperature_setpoint_constant_value")]
public System.Nullable<float> ReturnTemperatureSetpointConstantValue { get; set; } = (System.Nullable<float>)Single.Parse("71", CultureInfo.InvariantCulture);
        

[Description(@"This is the desired return temperature target, which is met by adjusting the supply temperature setpoint. This is a schedule name to allow the return temperature target value to be scheduled. This field is only used if the Design Hot Water Return Temperature Input Type is Scheduled")]
[JsonProperty("return_temperature_setpoint_schedule_name")]
public string ReturnTemperatureSetpointScheduleName { get; set; } = "";
    }
    
    public enum SetpointManager_ReturnTemperature_HotWater_ReturnTemperatureSetpointInputType
    {
        
        [JsonProperty("Constant")]
        Constant = 0,
        
        [JsonProperty("ReturnTemperatureSetpoint")]
        ReturnTemperatureSetpoint = 1,
        
        [JsonProperty("Scheduled")]
        Scheduled = 2,
    }
}
namespace BH.oM.Adapters.EnergyPlus.SimulationParameters
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Specifies the EnergyPlus version of the IDF file.")]
    [JsonObject("Version")]
    public class Version : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("version_identifier")]
public string VersionIdentifier { get; set; } = (System.String)"9.5";
    }
    
    [Description(@"Note that the following 3 fields are related to the Sizing:Zone, Sizing:System, and Sizing:Plant objects. Having these fields set to Yes but no corresponding Sizing object will not cause the sizing to be done. However, having any of these fields set to No, the corresponding Sizing object is ignored. Note also, if you want to do system sizing, you must also do zone sizing in the same run or an error will result.")]
    [JsonObject("SimulationControl")]
    public class SimulationControl : BHoMObject, IEnergyPlusClass
    {
        

[Description("If Yes, Zone sizing is accomplished from corresponding Sizing:Zone objects and au" +
    "tosize fields.")]
[JsonProperty("do_zone_sizing_calculation")]
public EmptyNoYes DoZoneSizingCalculation { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("If Yes, System sizing is accomplished from corresponding Sizing:System objects an" +
    "d autosize fields. If Yes, Zone sizing (previous field) must also be Yes.")]
[JsonProperty("do_system_sizing_calculation")]
public EmptyNoYes DoSystemSizingCalculation { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("If Yes, Plant sizing is accomplished from corresponding Sizing:Plant objects and " +
    "autosize fields.")]
[JsonProperty("do_plant_sizing_calculation")]
public EmptyNoYes DoPlantSizingCalculation { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("If Yes, SizingPeriod:* objects are executed and results from those may be display" +
    "ed..")]
[JsonProperty("run_simulation_for_sizing_periods")]
public EmptyNoYes RunSimulationForSizingPeriods { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[Description("If Yes, RunPeriod:* objects are executed and results from those may be displayed." +
    ".")]
[JsonProperty("run_simulation_for_weather_file_run_periods")]
public EmptyNoYes RunSimulationForWeatherFileRunPeriods { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[Description("If Yes, SizingPeriod:* objects are exectuted additional times for advanced sizing" +
    ". Currently limited to use with coincident plant sizing, see Sizing:Plant object" +
    "")]
[JsonProperty("do_hvac_sizing_simulation_for_sizing_periods")]
public EmptyNoYes DoHvacSizingSimulationForSizingPeriods { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("the entire set of SizingPeriod:* objects may be repeated to fine tune size result" +
    "s this input sets a limit on the number of passes that the sizing algorithms can" +
    " repeate the set")]
[JsonProperty("maximum_number_of_hvac_sizing_simulation_passes")]
public System.Nullable<float> MaximumNumberOfHvacSizingSimulationPasses { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    [Description("This object enables users to choose certain options that speed up EnergyPlus simu" +
        "lation, but may lead to small decreases in accuracy of results.")]
    [JsonObject("PerformancePrecisionTradeoffs")]
    public class PerformancePrecisionTradeoffs : BHoMObject, IEnergyPlusClass
    {
        

[Description("If Yes, an analytical or empirical solution will be used to replace iterations in" +
    " the coil performance calculations.")]
[JsonProperty("use_coil_direct_solutions")]
public EmptyNoYes UseCoilDirectSolutions { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Determines which algorithm will be used to solve long wave radiant exchange among" +
    " surfaces within a zone.")]
[JsonProperty("zone_radiant_exchange_algorithm")]
public PerformancePrecisionTradeoffs_ZoneRadiantExchangeAlgorithm ZoneRadiantExchangeAlgorithm { get; set; } = (PerformancePrecisionTradeoffs_ZoneRadiantExchangeAlgorithm)Enum.Parse(typeof(PerformancePrecisionTradeoffs_ZoneRadiantExchangeAlgorithm), "ScriptF");
        

[Description("The increasing mode number roughly correspond with increased speed. A description" +
    " of each mode are shown in the documentation. When Advanced is selected the N1 f" +
    "ield value is used.")]
[JsonProperty("override_mode")]
public PerformancePrecisionTradeoffs_OverrideMode OverrideMode { get; set; } = (PerformancePrecisionTradeoffs_OverrideMode)Enum.Parse(typeof(PerformancePrecisionTradeoffs_OverrideMode), "Normal");
        

[Description("Maximum zone temperature change before HVAC timestep is shortened. Only used when" +
    " Override Mode is set to Advanced")]
[JsonProperty("maxzonetempdiff")]
public System.Nullable<float> Maxzonetempdiff { get; set; } = (System.Nullable<float>)Single.Parse("0.3", CultureInfo.InvariantCulture);
        

[Description("Maximum surface temperature change before HVAC timestep is shortened. Only used w" +
    "hen Override Mode is set to Advanced")]
[JsonProperty("maxalloweddeltemp")]
public System.Nullable<float> Maxalloweddeltemp { get; set; } = (System.Nullable<float>)Single.Parse("0.002", CultureInfo.InvariantCulture);
    }
    
    public enum PerformancePrecisionTradeoffs_ZoneRadiantExchangeAlgorithm
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CarrollMRT")]
        CarrollMRT = 1,
        
        [JsonProperty("ScriptF")]
        ScriptF = 2,
    }
    
    public enum PerformancePrecisionTradeoffs_OverrideMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Advanced")]
        Advanced = 1,
        
        [JsonProperty("Mode01")]
        Mode01 = 2,
        
        [JsonProperty("Mode02")]
        Mode02 = 3,
        
        [JsonProperty("Mode03")]
        Mode03 = 4,
        
        [JsonProperty("Mode04")]
        Mode04 = 5,
        
        [JsonProperty("Mode05")]
        Mode05 = 6,
        
        [JsonProperty("Mode06")]
        Mode06 = 7,
        
        [JsonProperty("Mode07")]
        Mode07 = 8,
        
        [JsonProperty("Normal")]
        Normal = 9,
    }
    
    [Description("Describes parameters that are used during the simulation of the building. There a" +
        "re necessary correlations between the entries for this object and some entries i" +
        "n the Site:WeatherStation and Site:HeightVariation objects, specifically the Ter" +
        "rain field.")]
    [JsonObject("Building")]
    public class Building : BHoMObject, IEnergyPlusClass
    {
        

[Description("degrees from true North")]
[JsonProperty("north_axis")]
public System.Nullable<float> NorthAxis { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Country=FlatOpenCountry | Suburbs=CountryTownsSuburbs | City=CityCenter | Ocean=b" +
    "ody of water (5km) | Urban=Urban-Industrial-Forest")]
[JsonProperty("terrain")]
public Building_Terrain Terrain { get; set; } = (Building_Terrain)Enum.Parse(typeof(Building_Terrain), "Suburbs");
        

[Description("Loads Convergence Tolerance Value is a change in load from one warmup day to the " +
    "next")]
[JsonProperty("loads_convergence_tolerance_value")]
public System.Nullable<float> LoadsConvergenceToleranceValue { get; set; } = (System.Nullable<float>)Single.Parse("0.04", CultureInfo.InvariantCulture);
        

[JsonProperty("temperature_convergence_tolerance_value")]
public System.Nullable<float> TemperatureConvergenceToleranceValue { get; set; } = (System.Nullable<float>)Single.Parse("0.4", CultureInfo.InvariantCulture);
        

[Description("MinimalShadowing | FullExterior | FullInteriorAndExterior | FullExteriorWithRefle" +
    "ctions | FullInteriorAndExteriorWithReflections")]
[JsonProperty("solar_distribution")]
public Building_SolarDistribution SolarDistribution { get; set; } = (Building_SolarDistribution)Enum.Parse(typeof(Building_SolarDistribution), "FullExterior");
        

[Description("EnergyPlus will only use as many warmup days as needed to reach convergence toler" +
    "ance. This field\'s value should NOT be set less than 25.")]
[JsonProperty("maximum_number_of_warmup_days")]
public System.Nullable<float> MaximumNumberOfWarmupDays { get; set; } = (System.Nullable<float>)Single.Parse("25", CultureInfo.InvariantCulture);
        

[Description(@"The minimum number of warmup days that produce enough temperature and flux history to start EnergyPlus simulation for all reference buildings was suggested to be 6. However this can lead to excessive run times as warmup days can be repeated needlessly. For faster execution rely on the convergence criteria to detect when warmup is complete. When this field is greater than the maximum warmup days defined previous field the maximum number of warmup days will be reset to the minimum value entered here. Warmup days will be set to be the value you entered. The default is 1.")]
[JsonProperty("minimum_number_of_warmup_days")]
public System.Nullable<float> MinimumNumberOfWarmupDays { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    public enum Building_Terrain
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("City")]
        City = 1,
        
        [JsonProperty("Country")]
        Country = 2,
        
        [JsonProperty("Ocean")]
        Ocean = 3,
        
        [JsonProperty("Suburbs")]
        Suburbs = 4,
        
        [JsonProperty("Urban")]
        Urban = 5,
    }
    
    public enum Building_SolarDistribution
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FullExterior")]
        FullExterior = 1,
        
        [JsonProperty("FullExteriorWithReflections")]
        FullExteriorWithReflections = 2,
        
        [JsonProperty("FullInteriorAndExterior")]
        FullInteriorAndExterior = 3,
        
        [JsonProperty("FullInteriorAndExteriorWithReflections")]
        FullInteriorAndExteriorWithReflections = 4,
        
        [JsonProperty("MinimalShadowing")]
        MinimalShadowing = 5,
    }
    
    [Description("This object is used to control details of the solar, shading, and daylighting mod" +
        "els")]
    [JsonObject("ShadowCalculation")]
    public class ShadowCalculation : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Select between CPU-based polygon clipping method, the GPU-based pixel counting method, or importing from external shading data. If PixelCounting is selected and GPU hardware (or GPU emulation) is not available, a warning will be displayed and EnergyPlus will revert to PolygonClipping. If Scheduled is chosen, the External Shading Fraction Schedule Name is required in SurfaceProperty:LocalEnvironment. If Imported is chosen, the Schedule:File:Shading object is required.")]
[JsonProperty("shading_calculation_method")]
public ShadowCalculation_ShadingCalculationMethod ShadingCalculationMethod { get; set; } = (ShadowCalculation_ShadingCalculationMethod)Enum.Parse(typeof(ShadowCalculation_ShadingCalculationMethod), "PolygonClipping");
        

[Description("choose calculation frequency method. note that Timestep is only needed for certai" +
    "n cases and can increase execution time significantly.")]
[JsonProperty("shading_calculation_update_frequency_method")]
public ShadowCalculation_ShadingCalculationUpdateFrequencyMethod ShadingCalculationUpdateFrequencyMethod { get; set; } = (ShadowCalculation_ShadingCalculationUpdateFrequencyMethod)Enum.Parse(typeof(ShadowCalculation_ShadingCalculationUpdateFrequencyMethod), "Periodic");
        

[Description("enter number of days this field is only used if the previous field is set to Peri" +
    "odic warning issued if >31")]
[JsonProperty("shading_calculation_update_frequency")]
public System.Nullable<float> ShadingCalculationUpdateFrequency { get; set; } = (System.Nullable<float>)Single.Parse("20", CultureInfo.InvariantCulture);
        

[Description("Number of allowable figures in shadow overlap in PolygonClipping calculations")]
[JsonProperty("maximum_figures_in_shadow_overlap_calculations")]
public System.Nullable<float> MaximumFiguresInShadowOverlapCalculations { get; set; } = (System.Nullable<float>)Single.Parse("15000", CultureInfo.InvariantCulture);
        

[Description("Advanced Feature. Internal default is SutherlandHodgman Refer to InputOutput Refe" +
    "rence and Engineering Reference for more information")]
[JsonProperty("polygon_clipping_algorithm")]
public ShadowCalculation_PolygonClippingAlgorithm PolygonClippingAlgorithm { get; set; } = (ShadowCalculation_PolygonClippingAlgorithm)Enum.Parse(typeof(ShadowCalculation_PolygonClippingAlgorithm), "SutherlandHodgman");
        

[Description("Number of pixels in both dimensions of the surface rendering")]
[JsonProperty("pixel_counting_resolution")]
public System.Nullable<float> PixelCountingResolution { get; set; } = (System.Nullable<float>)Single.Parse("512", CultureInfo.InvariantCulture);
        

[Description("Advanced Feature. Internal default is SimpleSkyDiffuseModeling If you have shadin" +
    "g elements that change transmittance over the year, you may wish to choose the d" +
    "etailed method. Refer to InputOutput Reference and Engineering Reference for mor" +
    "e information")]
[JsonProperty("sky_diffuse_modeling_algorithm")]
public ShadowCalculation_SkyDiffuseModelingAlgorithm SkyDiffuseModelingAlgorithm { get; set; } = (ShadowCalculation_SkyDiffuseModelingAlgorithm)Enum.Parse(typeof(ShadowCalculation_SkyDiffuseModelingAlgorithm), "SimpleSkyDiffuseModeling");
        

[Description("If Yes is chosen, the calculated external shading fraction results will be saved " +
    "to an external CSV file with surface names as the column headers.")]
[JsonProperty("output_external_shading_calculation_results")]
public EmptyNoYes OutputExternalShadingCalculationResults { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description(@"If Yes, self-shading will be disabled from all exterior surfaces in a given Shading Zone Group to surfaces within the same Shading Zone Group. If both Disable Self-Shading Within Shading Zone Groups and Disable Self-Shading From Shading Zone Groups to Other Zones = Yes, then all self-shading from exterior surfaces will be disabled. If only one of these fields = Yes, then at least one Shading Zone Group must be specified, or this field will be ignored. Shading from Shading:* surfaces, overhangs, fins, and reveals will not be disabled.")]
[JsonProperty("disable_self_shading_within_shading_zone_groups")]
public EmptyNoYes DisableSelfShadingWithinShadingZoneGroups { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description(@"If Yes, self-shading will be disabled from all exterior surfaces in a given Shading Zone Group to all other zones in the model. If both Disable Self-Shading Within Shading Zone Groups and Disable Self-Shading From Shading Zone Groups to Other Zones = Yes, then all self-shading from exterior surfaces will be disabled. If only one of these fields = Yes, then at least one Shading Zone Group must be specified, or this field will be ignored. Shading from Shading:* surfaces, overhangs, fins, and reveals will not be disabled.")]
[JsonProperty("disable_self_shading_from_shading_zone_groups_to_other_zones")]
public EmptyNoYes DisableSelfShadingFromShadingZoneGroupsToOtherZones { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[JsonProperty("shading_zone_groups")]
public string ShadingZoneGroups { get; set; } = "";
    }
    
    public enum ShadowCalculation_ShadingCalculationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Imported")]
        Imported = 1,
        
        [JsonProperty("PixelCounting")]
        PixelCounting = 2,
        
        [JsonProperty("PolygonClipping")]
        PolygonClipping = 3,
        
        [JsonProperty("Scheduled")]
        Scheduled = 4,
    }
    
    public enum ShadowCalculation_ShadingCalculationUpdateFrequencyMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Periodic")]
        Periodic = 1,
        
        [JsonProperty("Timestep")]
        Timestep = 2,
    }
    
    public enum ShadowCalculation_PolygonClippingAlgorithm
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConvexWeilerAtherton")]
        ConvexWeilerAtherton = 1,
        
        [JsonProperty("SlaterBarskyandSutherlandHodgman")]
        SlaterBarskyandSutherlandHodgman = 2,
        
        [JsonProperty("SutherlandHodgman")]
        SutherlandHodgman = 3,
    }
    
    public enum ShadowCalculation_SkyDiffuseModelingAlgorithm
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DetailedSkyDiffuseModeling")]
        DetailedSkyDiffuseModeling = 1,
        
        [JsonProperty("SimpleSkyDiffuseModeling")]
        SimpleSkyDiffuseModeling = 2,
    }
    
    [Description("Default indoor surface heat transfer convection algorithm to be used for all zone" +
        "s")]
    [JsonObject("SurfaceConvectionAlgorithm:Inside")]
    public class SurfaceConvectionAlgorithm_Inside : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Simple = constant value natural convection (ASHRAE) TARP = variable natural convection based on temperature difference (ASHRAE, Walton) CeilingDiffuser = ACH-based forced and mixed convection correlations for ceiling diffuser configuration with simple natural convection limit AdaptiveConvectionAlgorithm = dynamic selection of convection models based on conditions ASTMC1340 = mixed convection correlations based on heat flow direction, surface tilt angle, surface characteristic length, and air speed past the surface.")]
[JsonProperty("algorithm")]
public SurfaceConvectionAlgorithm_Inside_Algorithm Algorithm { get; set; } = (SurfaceConvectionAlgorithm_Inside_Algorithm)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Inside_Algorithm), "TARP");
    }
    
    public enum SurfaceConvectionAlgorithm_Inside_Algorithm
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASTMC1340")]
        ASTMC1340 = 1,
        
        [JsonProperty("AdaptiveConvectionAlgorithm")]
        AdaptiveConvectionAlgorithm = 2,
        
        [JsonProperty("CeilingDiffuser")]
        CeilingDiffuser = 3,
        
        [JsonProperty("Simple")]
        Simple = 4,
        
        [JsonProperty("TARP")]
        TARP = 5,
    }
    
    [Description("Default outside surface heat transfer convection algorithm to be used for all zon" +
        "es")]
    [JsonObject("SurfaceConvectionAlgorithm:Outside")]
    public class SurfaceConvectionAlgorithm_Outside : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"SimpleCombined = Combined radiation and convection coefficient using simple ASHRAE model TARP = correlation from models developed by ASHRAE, Walton, and Sparrow et. al. MoWiTT = correlation from measurements by Klems and Yazdanian for smooth surfaces DOE-2 = correlation from measurements by Klems and Yazdanian for rough surfaces AdaptiveConvectionAlgorithm = dynamic selection of correlations based on conditions")]
[JsonProperty("algorithm")]
public SurfaceConvectionAlgorithm_Outside_Algorithm Algorithm { get; set; } = (SurfaceConvectionAlgorithm_Outside_Algorithm)Enum.Parse(typeof(SurfaceConvectionAlgorithm_Outside_Algorithm), "Empty");
    }
    
    public enum SurfaceConvectionAlgorithm_Outside_Algorithm
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AdaptiveConvectionAlgorithm")]
        AdaptiveConvectionAlgorithm = 1,
        
        [JsonProperty("DOE-2")]
        DOE2 = 2,
        
        [JsonProperty("MoWiTT")]
        MoWiTT = 3,
        
        [JsonProperty("SimpleCombined")]
        SimpleCombined = 4,
        
        [JsonProperty("TARP")]
        TARP = 5,
    }
    
    [Description(@"Determines which Heat Balance Algorithm will be used ie. CTF (Conduction Transfer Functions), EMPD (Effective Moisture Penetration Depth with Conduction Transfer Functions). Advanced/Research Usage: CondFD (Conduction Finite Difference) Advanced/Research Usage: ConductionFiniteDifferenceSimplified Advanced/Research Usage: HAMT (Combined Heat And Moisture Finite Element)")]
    [JsonObject("HeatBalanceAlgorithm")]
    public class HeatBalanceAlgorithm : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("algorithm")]
public HeatBalanceAlgorithm_Algorithm Algorithm { get; set; } = (HeatBalanceAlgorithm_Algorithm)Enum.Parse(typeof(HeatBalanceAlgorithm_Algorithm), "ConductionTransferFunction");
        

[JsonProperty("surface_temperature_upper_limit")]
public System.Nullable<float> SurfaceTemperatureUpperLimit { get; set; } = (System.Nullable<float>)Single.Parse("200", CultureInfo.InvariantCulture);
        

[JsonProperty("minimum_surface_convection_heat_transfer_coefficient_value")]
public System.Nullable<float> MinimumSurfaceConvectionHeatTransferCoefficientValue { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_surface_convection_heat_transfer_coefficient_value")]
public System.Nullable<float> MaximumSurfaceConvectionHeatTransferCoefficientValue { get; set; } = (System.Nullable<float>)Single.Parse("1000", CultureInfo.InvariantCulture);
    }
    
    public enum HeatBalanceAlgorithm_Algorithm
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CombinedHeatAndMoistureFiniteElement")]
        CombinedHeatAndMoistureFiniteElement = 1,
        
        [JsonProperty("ConductionFiniteDifference")]
        ConductionFiniteDifference = 2,
        
        [JsonProperty("ConductionTransferFunction")]
        ConductionTransferFunction = 3,
        
        [JsonProperty("MoisturePenetrationDepthConductionTransferFunction")]
        MoisturePenetrationDepthConductionTransferFunction = 4,
    }
    
    [Description("Determines settings for the Conduction Finite Difference algorithm for surface he" +
        "at transfer modeling.")]
    [JsonObject("HeatBalanceSettings:ConductionFiniteDifference")]
    public class HeatBalanceSettings_ConductionFiniteDifference : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("difference_scheme")]
public HeatBalanceSettings_ConductionFiniteDifference_DifferenceScheme DifferenceScheme { get; set; } = (HeatBalanceSettings_ConductionFiniteDifference_DifferenceScheme)Enum.Parse(typeof(HeatBalanceSettings_ConductionFiniteDifference_DifferenceScheme), "FullyImplicitFirstOrder");
        

[Description("increase or decrease number of nodes")]
[JsonProperty("space_discretization_constant")]
public System.Nullable<float> SpaceDiscretizationConstant { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[JsonProperty("relaxation_factor")]
public System.Nullable<float> RelaxationFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("inside_face_surface_temperature_convergence_criteria")]
public System.Nullable<float> InsideFaceSurfaceTemperatureConvergenceCriteria { get; set; } = (System.Nullable<float>)Single.Parse("0.002", CultureInfo.InvariantCulture);
    }
    
    public enum HeatBalanceSettings_ConductionFiniteDifference_DifferenceScheme
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CrankNicholsonSecondOrder")]
        CrankNicholsonSecondOrder = 1,
        
        [JsonProperty("FullyImplicitFirstOrder")]
        FullyImplicitFirstOrder = 2,
    }
    
    [Description("Determines which algorithm will be used to solve the zone air heat balance.")]
    [JsonObject("ZoneAirHeatBalanceAlgorithm")]
    public class ZoneAirHeatBalanceAlgorithm : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("algorithm")]
public ZoneAirHeatBalanceAlgorithm_Algorithm Algorithm { get; set; } = (ZoneAirHeatBalanceAlgorithm_Algorithm)Enum.Parse(typeof(ZoneAirHeatBalanceAlgorithm_Algorithm), "ThirdOrderBackwardDifference");
    }
    
    public enum ZoneAirHeatBalanceAlgorithm_Algorithm
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AnalyticalSolution")]
        AnalyticalSolution = 1,
        
        [JsonProperty("EulerMethod")]
        EulerMethod = 2,
        
        [JsonProperty("ThirdOrderBackwardDifference")]
        ThirdOrderBackwardDifference = 3,
    }
    
    [Description("Determines which contaminant concentration will be simulates.")]
    [JsonObject("ZoneAirContaminantBalance")]
    public class ZoneAirContaminantBalance : BHoMObject, IEnergyPlusClass
    {
        

[Description("If Yes, CO2 simulation will be performed.")]
[JsonProperty("carbon_dioxide_concentration")]
public EmptyNoYes CarbonDioxideConcentration { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Schedule values should be in parts per million (ppm)")]
[JsonProperty("outdoor_carbon_dioxide_schedule_name")]
public string OutdoorCarbonDioxideScheduleName { get; set; } = "";
        

[Description("If Yes, generic contaminant simulation will be performed.")]
[JsonProperty("generic_contaminant_concentration")]
public EmptyNoYes GenericContaminantConcentration { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Schedule values should be generic contaminant concentration in parts per million " +
    "(ppm)")]
[JsonProperty("outdoor_generic_contaminant_schedule_name")]
public string OutdoorGenericContaminantScheduleName { get; set; } = "";
    }
    
    [Description(@"Enforces the zone air mass flow balance by either adjusting zone mixing object flow only, adjusting zone total return flow only, zone mixing and the zone total return flows, or adjusting the zone total return and zone mixing object flows. Zone infiltration flow air flow is increased or decreased depending user selection in the infiltration treatment method. If either of zone mixing or zone return flow adjusting methods or infiltration is active, then the zone air mass flow balance calculation will attempt to enforce conservation of mass for each zone. If flow balancing method is ""None"" and infiltration is ""None"", then the zone air mass flow calculation defaults to assume self-balanced simple flow mixing and infiltration objects.")]
    [JsonObject("ZoneAirMassFlowConservation")]
    public class ZoneAirMassFlowConservation : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"If ""AdjustMixingOnly"", zone mixing object flow rates are adjusted to balance the zone air mass flow and zone infiltration air flow may be increased or decreased if required in order to balance the zone air mass flow. If ""AdjustReturnOnly"", zone total return flow rate is adjusted to balance the zone air mass flow and zone infiltration air flow may be increased or decreased if required in order to balance the zone air mass flow. If ""AdjustMixingThenReturn"", first the zone mixing objects flow rates are adjusted to balance the zone air flow, second zone total return flow rate is adjusted and zone infiltration air flow may be increased or decreased if required in order to balance the zone air mass flow. If ""AdjustReturnThenMixing"", first zone total return flow rate is adjusted to balance the zone air flow, second the zone mixing object flow rates are adjusted and infiltration air flow may be increased or decreased if required in order to balance the zone air mass flow.")]
[JsonProperty("adjust_zone_mixing_and_return_for_air_mass_flow_balance")]
public ZoneAirMassFlowConservation_AdjustZoneMixingAndReturnForAirMassFlowBalance AdjustZoneMixingAndReturnForAirMassFlowBalance { get; set; } = (ZoneAirMassFlowConservation_AdjustZoneMixingAndReturnForAirMassFlowBalance)Enum.Parse(typeof(ZoneAirMassFlowConservation_AdjustZoneMixingAndReturnForAirMassFlowBalance), "None");
        

[Description(@"This input field allows user to choose how zone infiltration flow is treated during the zone air mass flow balance calculation. AddInfiltrationFlow may add infiltration to the base flow specified in the infiltration object to balance the zone air mass flow. The additional infiltration air mass flow is not self-balanced. The base flow is assumed to be self-balanced. AdjustInfiltrationFlow may adjust the base flow calculated using the base flow specified in the infiltration object to balance the zone air mass flow. If it If no adjustment is required, then the base infiltration is assumed to be self-balanced. None will make no changes to the base infiltration flow.")]
[JsonProperty("infiltration_balancing_method")]
public ZoneAirMassFlowConservation_InfiltrationBalancingMethod InfiltrationBalancingMethod { get; set; } = (ZoneAirMassFlowConservation_InfiltrationBalancingMethod)Enum.Parse(typeof(ZoneAirMassFlowConservation_InfiltrationBalancingMethod), "AddInfiltrationFlow");
        

[Description(@"This input field allows user to choose which zones are included in infiltration balancing. MixingSourceZonesOnly allows infiltration balancing only in zones which as source zones for mixing which also have an infiltration object defined. AllZones allows infiltration balancing in any zone which has an infiltration object defined.")]
[JsonProperty("infiltration_balancing_zones")]
public ZoneAirMassFlowConservation_InfiltrationBalancingZones InfiltrationBalancingZones { get; set; } = (ZoneAirMassFlowConservation_InfiltrationBalancingZones)Enum.Parse(typeof(ZoneAirMassFlowConservation_InfiltrationBalancingZones), "MixingSourceZonesOnly");
    }
    
    public enum ZoneAirMassFlowConservation_AdjustZoneMixingAndReturnForAirMassFlowBalance
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AdjustMixingOnly")]
        AdjustMixingOnly = 1,
        
        [JsonProperty("AdjustMixingThenReturn")]
        AdjustMixingThenReturn = 2,
        
        [JsonProperty("AdjustReturnOnly")]
        AdjustReturnOnly = 3,
        
        [JsonProperty("AdjustReturnThenMixing")]
        AdjustReturnThenMixing = 4,
        
        [JsonProperty("None")]
        None = 5,
    }
    
    public enum ZoneAirMassFlowConservation_InfiltrationBalancingMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AddInfiltrationFlow")]
        AddInfiltrationFlow = 1,
        
        [JsonProperty("AdjustInfiltrationFlow")]
        AdjustInfiltrationFlow = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum ZoneAirMassFlowConservation_InfiltrationBalancingZones
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AllZones")]
        AllZones = 1,
        
        [JsonProperty("MixingSourceZonesOnly")]
        MixingSourceZonesOnly = 2,
    }
    
    [Description("Multiplier altering the relative capacitance of the air compared to an empty zone" +
        "")]
    [JsonObject("ZoneCapacitanceMultiplier:ResearchSpecial")]
    public class ZoneCapacitanceMultiplier_ResearchSpecial : BHoMObject, IEnergyPlusClass
    {
        

[Description("If this field is left blank, the multipliers are applied to all the zones not spe" +
    "cified")]
[JsonProperty("zone_or_zonelist_name")]
public string ZoneOrZonelistName { get; set; } = "";
        

[Description("Used to alter the capacitance of zone air with respect to heat or temperature")]
[JsonProperty("temperature_capacity_multiplier")]
public System.Nullable<float> TemperatureCapacityMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Used to alter the capacitance of zone air with respect to moisture or humidity ra" +
    "tio")]
[JsonProperty("humidity_capacity_multiplier")]
public System.Nullable<float> HumidityCapacityMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Used to alter the capacitance of zone air with respect to zone air carbon dioxide" +
    " concentration")]
[JsonProperty("carbon_dioxide_capacity_multiplier")]
public System.Nullable<float> CarbonDioxideCapacityMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Used to alter the capacitance of zone air with respect to zone air generic contam" +
    "inant concentration")]
[JsonProperty("generic_contaminant_capacity_multiplier")]
public System.Nullable<float> GenericContaminantCapacityMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    [Description("Specifies the \"basic\" timestep for the simulation. The value entered here is also" +
        " known as the Zone Timestep. This is used in the Zone Heat Balance Model calcula" +
        "tion as the driving timestep for heat transfer and load calculations.")]
    [JsonObject("Timestep")]
    public class Timestep : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Number in hour: normal validity 4 to 60: 6 suggested Must be evenly divisible into 60 Allowable values include 1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30, and 60 Normal 6 is minimum as lower values may cause inaccuracies A minimum value of 20 is suggested for both ConductionFiniteDifference and CombinedHeatAndMoistureFiniteElement surface heat balance algorithms A minimum of 12 is suggested for simulations involving a Vegetated Roof (Material:RoofVegetation).")]
[JsonProperty("number_of_timesteps_per_hour")]
public System.Nullable<float> NumberOfTimestepsPerHour { get; set; } = (System.Nullable<float>)Single.Parse("6", CultureInfo.InvariantCulture);
    }
    
    [Description("Specifies limits on HVAC system simulation timesteps and iterations. This item is" +
        " an advanced feature that should be used only with caution.")]
    [JsonObject("ConvergenceLimits")]
    public class ConvergenceLimits : BHoMObject, IEnergyPlusClass
    {
        

[Description("0 sets the minimum to the zone timestep (ref: Timestep) 1 is normal (ratchet down" +
    " to 1 minute) setting greater than zone timestep (in minutes) will effectively s" +
    "et to zone timestep")]
[JsonProperty("minimum_system_timestep")]
public System.Nullable<float> MinimumSystemTimestep { get; set; } = null;
        

[JsonProperty("maximum_hvac_iterations")]
public System.Nullable<float> MaximumHvacIterations { get; set; } = (System.Nullable<float>)Single.Parse("20", CultureInfo.InvariantCulture);
        

[Description(@"Controls the minimum number of plant system solver iterations within a single HVAC iteration Larger values will increase runtime but might improve solution accuracy for complicated plant systems Complex plants include: several interconnected loops, heat recovery, thermal load following generators, etc.")]
[JsonProperty("minimum_plant_iterations")]
public System.Nullable<float> MinimumPlantIterations { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description("Controls the maximum number of plant system solver iterations within a single HVA" +
    "C iteration Smaller values might decrease runtime but could decrease solution ac" +
    "curacy for complicated plant systems")]
[JsonProperty("maximum_plant_iterations")]
public System.Nullable<float> MaximumPlantIterations { get; set; } = (System.Nullable<float>)Single.Parse("8", CultureInfo.InvariantCulture);
    }
    
    [Description("Specifies a HVAC system solver algorithm to find a root")]
    [JsonObject("HVACSystemRootFindingAlgorithm")]
    public class HVACSystemRootFindingAlgorithm : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("algorithm")]
public HVACSystemRootFindingAlgorithm_Algorithm Algorithm { get; set; } = (HVACSystemRootFindingAlgorithm_Algorithm)Enum.Parse(typeof(HVACSystemRootFindingAlgorithm_Algorithm), "RegulaFalsi");
        

[Description("This field is used when RegulaFalsiThenBisection or BisectionThenRegulaFalsi is e" +
    "ntered. When iteration number is greater than the value, algorithm switches.")]
[JsonProperty("number_of_iterations_before_algorithm_switch")]
public System.Nullable<float> NumberOfIterationsBeforeAlgorithmSwitch { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
    }
    
    public enum HVACSystemRootFindingAlgorithm_Algorithm
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Alternation")]
        Alternation = 1,
        
        [JsonProperty("Bisection")]
        Bisection = 2,
        
        [JsonProperty("BisectionThenRegulaFalsi")]
        BisectionThenRegulaFalsi = 3,
        
        [JsonProperty("RegulaFalsi")]
        RegulaFalsi = 4,
        
        [JsonProperty("RegulaFalsiThenBisection")]
        RegulaFalsiThenBisection = 5,
    }
}
namespace BH.oM.Adapters.EnergyPlus.SolarCollectors
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Thermal and optical performance parameters for a single flat plate solar collector module. These parameters are based on the testing methodologies described in ASHRAE Standards 93 and 96 which are used Solar Rating and Certification Corporation (SRCC) Directory of SRCC Certified Solar Collector Ratings. See EnergyPlus DataSets file SolarCollectors.idf.")]
    [JsonObject("SolarCollectorPerformance:FlatPlate")]
    public class SolarCollectorPerformance_FlatPlate : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("gross_area")]
public System.Nullable<float> GrossArea { get; set; } = null;
        

[JsonProperty("test_fluid")]
public SolarCollectorPerformance_FlatPlate_TestFluid TestFluid { get; set; } = (SolarCollectorPerformance_FlatPlate_TestFluid)Enum.Parse(typeof(SolarCollectorPerformance_FlatPlate_TestFluid), "Water");
        

[JsonProperty("test_flow_rate")]
public System.Nullable<float> TestFlowRate { get; set; } = null;
        

[JsonProperty("test_correlation_type")]
public SolarCollectorPerformance_FlatPlate_TestCorrelationType TestCorrelationType { get; set; } = (SolarCollectorPerformance_FlatPlate_TestCorrelationType)Enum.Parse(typeof(SolarCollectorPerformance_FlatPlate_TestCorrelationType), "Average");
        

[Description("Y-intercept term")]
[JsonProperty("coefficient_1_of_efficiency_equation")]
public System.Nullable<float> Coefficient1OfEfficiencyEquation { get; set; } = null;
        

[Description("1st Order term")]
[JsonProperty("coefficient_2_of_efficiency_equation")]
public System.Nullable<float> Coefficient2OfEfficiencyEquation { get; set; } = null;
        

[Description("2nd order term")]
[JsonProperty("coefficient_3_of_efficiency_equation")]
public System.Nullable<float> Coefficient3OfEfficiencyEquation { get; set; } = null;
        

[Description("1st order term")]
[JsonProperty("coefficient_2_of_incident_angle_modifier")]
public System.Nullable<float> Coefficient2OfIncidentAngleModifier { get; set; } = null;
        

[Description("2nd order term")]
[JsonProperty("coefficient_3_of_incident_angle_modifier")]
public System.Nullable<float> Coefficient3OfIncidentAngleModifier { get; set; } = null;
    }
    
    public enum SolarCollectorPerformance_FlatPlate_TestFluid
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Water")]
        Water = 1,
    }
    
    public enum SolarCollectorPerformance_FlatPlate_TestCorrelationType
    {
        
        [JsonProperty("Average")]
        Average = 0,
        
        [JsonProperty("Inlet")]
        Inlet = 1,
        
        [JsonProperty("Outlet")]
        Outlet = 2,
    }
    
    [Description(@"Flat plate water solar collector (single glazed, unglazed, or evacuated tube). Thermal and optical properties are taken from the referenced SolarCollectorPerformance:FlatPlate object. Collector tilt, azimuth, and gross area are taken from the referenced building surface or shading surface. The collector surface participates normally in all shading calculations.")]
    [JsonObject("SolarCollector:FlatPlate:Water")]
    public class SolarCollector_FlatPlate_Water : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("solarcollectorperformance_name")]
public string SolarcollectorperformanceName { get; set; } = "";
        

[JsonProperty("surface_name")]
public string SurfaceName { get; set; } = "";
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[JsonProperty("maximum_flow_rate")]
public System.Nullable<float> MaximumFlowRate { get; set; } = null;
    }
    
    [Description("Models hybrid photovoltaic-thermal (PVT) solar collectors that convert incident s" +
        "olar energy into both electricity and useful thermal energy by heating air or wa" +
        "ter.")]
    [JsonObject("SolarCollector:FlatPlate:PhotovoltaicThermal")]
    public class SolarCollector_FlatPlate_PhotovoltaicThermal : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("surface_name")]
public string SurfaceName { get; set; } = "";
        

[JsonProperty("photovoltaic_thermal_model_performance_name")]
public string PhotovoltaicThermalModelPerformanceName { get; set; } = "";
        

[Description("Enter the name of a Generator:Photovoltaic object.")]
[JsonProperty("photovoltaic_name")]
public string PhotovoltaicName { get; set; } = "";
        

[JsonProperty("thermal_working_fluid_type")]
public SolarCollector_FlatPlate_PhotovoltaicThermal_ThermalWorkingFluidType ThermalWorkingFluidType { get; set; } = (SolarCollector_FlatPlate_PhotovoltaicThermal_ThermalWorkingFluidType)Enum.Parse(typeof(SolarCollector_FlatPlate_PhotovoltaicThermal_ThermalWorkingFluidType), "Air");
        

[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[JsonProperty("water_outlet_node_name")]
public string WaterOutletNodeName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("design_flow_rate")]
public string DesignFlowRate { get; set; } = "";
    }
    
    public enum SolarCollector_FlatPlate_PhotovoltaicThermal_ThermalWorkingFluidType
    {
        
        [JsonProperty("Air")]
        Air = 0,
        
        [JsonProperty("Water")]
        Water = 1,
    }
    
    [Description("Thermal performance parameters for a hybrid photovoltaic-thermal (PVT) solar coll" +
        "ector.")]
    [JsonObject("SolarCollectorPerformance:PhotovoltaicThermal:Simple")]
    public class SolarCollectorPerformance_PhotovoltaicThermal_Simple : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("fraction_of_surface_area_with_active_thermal_collector")]
public System.Nullable<float> FractionOfSurfaceAreaWithActiveThermalCollector { get; set; } = null;
        

[JsonProperty("thermal_conversion_efficiency_input_mode_type")]
public SolarCollectorPerformance_PhotovoltaicThermal_Simple_ThermalConversionEfficiencyInputModeType ThermalConversionEfficiencyInputModeType { get; set; } = (SolarCollectorPerformance_PhotovoltaicThermal_Simple_ThermalConversionEfficiencyInputModeType)Enum.Parse(typeof(SolarCollectorPerformance_PhotovoltaicThermal_Simple_ThermalConversionEfficiencyInputModeType), "Fixed");
        

[Description("Efficiency = (thermal power generated [W])/(incident solar[W])")]
[JsonProperty("value_for_thermal_conversion_efficiency_if_fixed")]
public System.Nullable<float> ValueForThermalConversionEfficiencyIfFixed { get; set; } = null;
        

[JsonProperty("thermal_conversion_efficiency_schedule_name")]
public string ThermalConversionEfficiencyScheduleName { get; set; } = "";
        

[JsonProperty("front_surface_emittance")]
public System.Nullable<float> FrontSurfaceEmittance { get; set; } = (System.Nullable<float>)Single.Parse("0.84", CultureInfo.InvariantCulture);
    }
    
    public enum SolarCollectorPerformance_PhotovoltaicThermal_Simple_ThermalConversionEfficiencyInputModeType
    {
        
        [JsonProperty("Fixed")]
        Fixed = 0,
        
        [JsonProperty("Scheduled")]
        Scheduled = 1,
    }
    
    [Description(@"Glazed solar collector with integral storage unit. Thermal and optical properties are taken from the referenced SolarCollectorPerformance:IntegralCollectorStorage object. Collector tilt, azimuth, and gross area are taken from the referenced building surface or shading surface. The collector surface participates normally in all shading calculations.")]
    [JsonObject("SolarCollector:IntegralCollectorStorage")]
    public class SolarCollector_IntegralCollectorStorage : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("integralcollectorstorageparameters_name")]
public string IntegralcollectorstorageparametersName { get; set; } = "";
        

[JsonProperty("surface_name")]
public string SurfaceName { get; set; } = "";
        

[JsonProperty("bottom_surface_boundary_conditions_type")]
public SolarCollector_IntegralCollectorStorage_BottomSurfaceBoundaryConditionsType BottomSurfaceBoundaryConditionsType { get; set; } = (SolarCollector_IntegralCollectorStorage_BottomSurfaceBoundaryConditionsType)Enum.Parse(typeof(SolarCollector_IntegralCollectorStorage_BottomSurfaceBoundaryConditionsType), "AmbientAir");
        

[Description("Enter the name of a SurfaceProperty:OtherSideConditionsModel object. Specified on" +
    "ly if the boundary condition type is OtherSideConditionsModel, otherwise leave i" +
    "t blank")]
[JsonProperty("boundary_condition_model_name")]
public string BoundaryConditionModelName { get; set; } = "";
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[JsonProperty("maximum_flow_rate")]
public System.Nullable<float> MaximumFlowRate { get; set; } = null;
    }
    
    public enum SolarCollector_IntegralCollectorStorage_BottomSurfaceBoundaryConditionsType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AmbientAir")]
        AmbientAir = 1,
        
        [JsonProperty("OtherSideConditionsModel")]
        OtherSideConditionsModel = 2,
    }
    
    [Description("Thermal and optical performance parameters for a single glazed solar collector wi" +
        "th integral storage unit.")]
    [JsonObject("SolarCollectorPerformance:IntegralCollectorStorage")]
    public class SolarCollectorPerformance_IntegralCollectorStorage : BHoMObject, IEnergyPlusClass
    {
        

[Description("Currently only RectangularTank ICS collector type is available.")]
[JsonProperty("ics_collector_type")]
public SolarCollectorPerformance_IntegralCollectorStorage_IcsCollectorType IcsCollectorType { get; set; } = (SolarCollectorPerformance_IntegralCollectorStorage_IcsCollectorType)Enum.Parse(typeof(SolarCollectorPerformance_IntegralCollectorStorage_IcsCollectorType), "RectangularTank");
        

[JsonProperty("gross_area")]
public System.Nullable<float> GrossArea { get; set; } = null;
        

[JsonProperty("collector_water_volume")]
public System.Nullable<float> CollectorWaterVolume { get; set; } = null;
        

[Description("Heat loss conductance of the collector bottom insulation")]
[JsonProperty("bottom_heat_loss_conductance")]
public System.Nullable<float> BottomHeatLossConductance { get; set; } = (System.Nullable<float>)Single.Parse("0.4", CultureInfo.InvariantCulture);
        

[Description("heat loss conductance of the collector side insulation")]
[JsonProperty("side_heat_loss_conductance")]
public System.Nullable<float> SideHeatLossConductance { get; set; } = (System.Nullable<float>)Single.Parse("0.6", CultureInfo.InvariantCulture);
        

[Description("This value is ratio of the width (short side) to length (long side of) of the col" +
    "lector. Used to calculate the perimeter of the collector")]
[JsonProperty("aspect_ratio")]
public System.Nullable<float> AspectRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[Description("This value is used to estimate collector side area for the heat loss calculation " +
    "through the collector side")]
[JsonProperty("collector_side_height")]
public System.Nullable<float> CollectorSideHeight { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("Calculated from the specific heat, density and thickness of the absorber plate.")]
[JsonProperty("thermal_mass_of_absorber_plate")]
public System.Nullable<float> ThermalMassOfAbsorberPlate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Number of transparent covers. Common practice is to use low-iron glass as the out" +
    "er cover and very thin transparent sheet such as Teflon as the inner cover.")]
[JsonProperty("number_of_covers")]
public System.Nullable<float> NumberOfCovers { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description("The gap between the transparent covers and between the inner cover and the absorb" +
    "er plate")]
[JsonProperty("cover_spacing")]
public System.Nullable<float> CoverSpacing { get; set; } = (System.Nullable<float>)Single.Parse("0.05", CultureInfo.InvariantCulture);
        

[Description("Refractive index of outer cover. Typically low-iron glass is used as the outer co" +
    "ver material, and used as the default outer cover with a value of 1.526.")]
[JsonProperty("refractive_index_of_outer_cover")]
public System.Nullable<float> RefractiveIndexOfOuterCover { get; set; } = (System.Nullable<float>)Single.Parse("1.526", CultureInfo.InvariantCulture);
        

[Description("Clear glass has extinction coefficient of about 15 [1/m] and with thickness of 3." +
    "0mm, the product of the extinction coefficient and thickness becomes 0.045 (=15 " +
    "* 0.003)")]
[JsonProperty("extinction_coefficient_times_thickness_of_outer_cover")]
public System.Nullable<float> ExtinctionCoefficientTimesThicknessOfOuterCover { get; set; } = (System.Nullable<float>)Single.Parse("0.045", CultureInfo.InvariantCulture);
        

[Description("Thermal emissivity of the outer cover, commonly glass is used as the out collecto" +
    "r cover material.")]
[JsonProperty("emissivity_of_outer_cover")]
public System.Nullable<float> EmissivityOfOuterCover { get; set; } = (System.Nullable<float>)Single.Parse("0.88", CultureInfo.InvariantCulture);
        

[Description("Typical material is very thin sheet of Teflon (PTFE). The default value is refrac" +
    "tive index of Teflon.")]
[JsonProperty("refractive_index_of_inner_cover")]
public System.Nullable<float> RefractiveIndexOfInnerCover { get; set; } = (System.Nullable<float>)Single.Parse("1.37", CultureInfo.InvariantCulture);
        

[Description("Default inner cover is very thin sheet of Teflon with extinction coefficient of a" +
    "pproximately 40.0 and a thickness 0.2mm yields a default value of 0.008.")]
[JsonProperty("extinction_coefficient_times_thickness_of_the_inner_cover")]
public System.Nullable<float> ExtinctionCoefficientTimesThicknessOfTheInnerCover { get; set; } = (System.Nullable<float>)Single.Parse("0.008", CultureInfo.InvariantCulture);
        

[Description("Thermal emissivity of the inner cover material")]
[JsonProperty("emissivity_of_inner_cover")]
public System.Nullable<float> EmissivityOfInnerCover { get; set; } = (System.Nullable<float>)Single.Parse("0.88", CultureInfo.InvariantCulture);
        

[Description("The absorber plate solar absorptance. Copper is assumed as the default absorber p" +
    "late.")]
[JsonProperty("absorptance_of_absorber_plate")]
public System.Nullable<float> AbsorptanceOfAbsorberPlate { get; set; } = (System.Nullable<float>)Single.Parse("0.96", CultureInfo.InvariantCulture);
        

[Description("Thermal emissivity of the absorber plate")]
[JsonProperty("emissivity_of_absorber_plate")]
public System.Nullable<float> EmissivityOfAbsorberPlate { get; set; } = (System.Nullable<float>)Single.Parse("0.3", CultureInfo.InvariantCulture);
    }
    
    public enum SolarCollectorPerformance_IntegralCollectorStorage_IcsCollectorType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("RectangularTank")]
        RectangularTank = 1,
    }
    
    [Description(@"Unglazed transpired solar collector (UTSC) used to condition outdoor air. This type of collector is generally used to heat air drawn through perforated absorbers and also recover heat conducted out through the underlying surface. This object represents a single collector attached to one or more building or shading surfaces and to one or more outdoor air systems.")]
    [JsonObject("SolarCollector:UnglazedTranspired")]
    public class SolarCollector_UnglazedTranspired : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of a SurfaceProperty:OtherSideConditionsModel object")]
[JsonProperty("boundary_conditions_model_name")]
public string BoundaryConditionsModelName { get; set; } = "";
        

[Description("Availability schedule name for this collector. Schedule value > 0 means it is ava" +
    "ilable. If this field is blank, the collector is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("required field if no SolarCollector:UnglazedTranspired:Multisystem")]
[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[Description("required field if no SolarCollector:UnglazedTranspired:Multisystem")]
[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[Description("This node is where the mixed air setpoint is determined. required field if no Sol" +
    "arCollector:UnglazedTranspired:Multisystem")]
[JsonProperty("setpoint_node_name")]
public string SetpointNodeName { get; set; } = "";
        

[Description("This node is used to identify the affected zone required field if no SolarCollect" +
    "or:UnglazedTranspired:Multisystem")]
[JsonProperty("zone_node_name")]
public string ZoneNodeName { get; set; } = "";
        

[JsonProperty("free_heating_setpoint_schedule_name")]
public string FreeHeatingSetpointScheduleName { get; set; } = "";
        

[JsonProperty("diameter_of_perforations_in_collector")]
public System.Nullable<float> DiameterOfPerforationsInCollector { get; set; } = null;
        

[JsonProperty("distance_between_perforations_in_collector")]
public System.Nullable<float> DistanceBetweenPerforationsInCollector { get; set; } = null;
        

[JsonProperty("thermal_emissivity_of_collector_surface")]
public System.Nullable<float> ThermalEmissivityOfCollectorSurface { get; set; } = null;
        

[JsonProperty("solar_absorbtivity_of_collector_surface")]
public System.Nullable<float> SolarAbsorbtivityOfCollectorSurface { get; set; } = null;
        

[JsonProperty("effective_overall_height_of_collector")]
public System.Nullable<float> EffectiveOverallHeightOfCollector { get; set; } = null;
        

[Description("if corrugated, use average depth")]
[JsonProperty("effective_gap_thickness_of_plenum_behind_collector")]
public System.Nullable<float> EffectiveGapThicknessOfPlenumBehindCollector { get; set; } = null;
        

[Description("if corrugated, use average depth")]
[JsonProperty("effective_cross_section_area_of_plenum_behind_collector")]
public System.Nullable<float> EffectiveCrossSectionAreaOfPlenumBehindCollector { get; set; } = null;
        

[JsonProperty("hole_layout_pattern_for_pitch")]
public SolarCollector_UnglazedTranspired_HoleLayoutPatternForPitch HoleLayoutPatternForPitch { get; set; } = (SolarCollector_UnglazedTranspired_HoleLayoutPatternForPitch)Enum.Parse(typeof(SolarCollector_UnglazedTranspired_HoleLayoutPatternForPitch), "Square");
        

[JsonProperty("heat_exchange_effectiveness_correlation")]
public SolarCollector_UnglazedTranspired_HeatExchangeEffectivenessCorrelation HeatExchangeEffectivenessCorrelation { get; set; } = (SolarCollector_UnglazedTranspired_HeatExchangeEffectivenessCorrelation)Enum.Parse(typeof(SolarCollector_UnglazedTranspired_HeatExchangeEffectivenessCorrelation), "Kutscher1994");
        

[Description("This parameter is used to help account for corrugations in the collector")]
[JsonProperty("ratio_of_actual_collector_surface_area_to_projected_surface_area")]
public System.Nullable<float> RatioOfActualCollectorSurfaceAreaToProjectedSurfaceArea { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("roughness_of_collector")]
public SolarCollector_UnglazedTranspired_RoughnessOfCollector RoughnessOfCollector { get; set; } = (SolarCollector_UnglazedTranspired_RoughnessOfCollector)Enum.Parse(typeof(SolarCollector_UnglazedTranspired_RoughnessOfCollector), "MediumRough");
        

[Description("Collector thickness is not required for Kutscher correlation Collector thickness " +
    "is required for Van Decker et al. correlation")]
[JsonProperty("collector_thickness")]
public System.Nullable<float> CollectorThickness { get; set; } = null;
        

[Description("Cv")]
[JsonProperty("effectiveness_for_perforations_with_respect_to_wind")]
public System.Nullable<float> EffectivenessForPerforationsWithRespectToWind { get; set; } = (System.Nullable<float>)Single.Parse("0.25", CultureInfo.InvariantCulture);
        

[Description("Cd")]
[JsonProperty("discharge_coefficient_for_openings_with_respect_to_buoyancy_driven_flow")]
public System.Nullable<float> DischargeCoefficientForOpeningsWithRespectToBuoyancyDrivenFlow { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
        

[JsonProperty("surfaces")]
public string Surfaces { get; set; } = "";
    }
    
    public enum SolarCollector_UnglazedTranspired_HoleLayoutPatternForPitch
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Square")]
        Square = 1,
        
        [JsonProperty("Triangle")]
        Triangle = 2,
    }
    
    public enum SolarCollector_UnglazedTranspired_HeatExchangeEffectivenessCorrelation
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Kutscher1994")]
        Kutscher1994 = 1,
        
        [JsonProperty("VanDeckerHollandsBrunger2001")]
        VanDeckerHollandsBrunger2001 = 2,
    }
    
    public enum SolarCollector_UnglazedTranspired_RoughnessOfCollector
    {
        
        [JsonProperty("MediumRough")]
        MediumRough = 0,
        
        [JsonProperty("MediumSmooth")]
        MediumSmooth = 1,
        
        [JsonProperty("Rough")]
        Rough = 2,
        
        [JsonProperty("Smooth")]
        Smooth = 3,
        
        [JsonProperty("VeryRough")]
        VeryRough = 4,
        
        [JsonProperty("VerySmooth")]
        VerySmooth = 5,
    }
    
    [Description("quad-tuples of inlet, outlet, control, and zone nodes for multiple different outd" +
        "oor air systems attached to same collector")]
    [JsonObject("SolarCollector:UnglazedTranspired:Multisystem")]
    public class SolarCollector_UnglazedTranspired_Multisystem : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of a SolarCollector:UnglazedTranspired object.")]
[JsonProperty("solar_collector_name")]
public string SolarCollectorName { get; set; } = "";
        

[JsonProperty("systems")]
public string Systems { get; set; } = "";
    }
}
namespace BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Regular materials described with full set of thermal properties")]
    [JsonObject("Material")]
    public class Material : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("roughness")]
public Material_Roughness Roughness { get; set; } = (Material_Roughness)Enum.Parse(typeof(Material_Roughness), "MediumRough");
        

[JsonProperty("thickness")]
public System.Nullable<float> Thickness { get; set; } = null;
        

[JsonProperty("conductivity")]
public System.Nullable<float> Conductivity { get; set; } = null;
        

[JsonProperty("density")]
public System.Nullable<float> Density { get; set; } = null;
        

[JsonProperty("specific_heat")]
public System.Nullable<float> SpecificHeat { get; set; } = null;
        

[JsonProperty("thermal_absorptance")]
public System.Nullable<float> ThermalAbsorptance { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("solar_absorptance")]
public System.Nullable<float> SolarAbsorptance { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("visible_absorptance")]
public System.Nullable<float> VisibleAbsorptance { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
    }
    
    public enum Material_Roughness
    {
        
        [JsonProperty("MediumRough")]
        MediumRough = 0,
        
        [JsonProperty("MediumSmooth")]
        MediumSmooth = 1,
        
        [JsonProperty("Rough")]
        Rough = 2,
        
        [JsonProperty("Smooth")]
        Smooth = 3,
        
        [JsonProperty("VeryRough")]
        VeryRough = 4,
        
        [JsonProperty("VerySmooth")]
        VerySmooth = 5,
    }
    
    [Description("Regular materials properties described whose principal description is R (Thermal " +
        "Resistance)")]
    [JsonObject("Material:NoMass")]
    public class Material_NoMass : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("roughness")]
public Material_NoMass_Roughness Roughness { get; set; } = (Material_NoMass_Roughness)Enum.Parse(typeof(Material_NoMass_Roughness), "MediumRough");
        

[JsonProperty("thermal_resistance")]
public System.Nullable<float> ThermalResistance { get; set; } = null;
        

[JsonProperty("thermal_absorptance")]
public System.Nullable<float> ThermalAbsorptance { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("solar_absorptance")]
public System.Nullable<float> SolarAbsorptance { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("visible_absorptance")]
public System.Nullable<float> VisibleAbsorptance { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
    }
    
    public enum Material_NoMass_Roughness
    {
        
        [JsonProperty("MediumRough")]
        MediumRough = 0,
        
        [JsonProperty("MediumSmooth")]
        MediumSmooth = 1,
        
        [JsonProperty("Rough")]
        Rough = 2,
        
        [JsonProperty("Smooth")]
        Smooth = 3,
        
        [JsonProperty("VeryRough")]
        VeryRough = 4,
        
        [JsonProperty("VerySmooth")]
        VerySmooth = 5,
    }
    
    [Description(@"Special infrared transparent material. Similar to a Material:Nomass with low thermal resistance. High absorptance in both wavelengths. Area will be doubled internally to make internal radiant exchange accurate. Should be only material in single layer surface construction. All thermal properties are set internally. User needs only to supply name. Cannot be used with ConductionFiniteDifference solution algorithms")]
    [JsonObject("Material:InfraredTransparent")]
    public class Material_InfraredTransparent : BHoMObject, IEnergyPlusClass
    {
    }
    
    [Description("Air Space in Opaque Construction")]
    [JsonObject("Material:AirGap")]
    public class Material_AirGap : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("thermal_resistance")]
public System.Nullable<float> ThermalResistance { get; set; } = null;
    }
    
    [Description(@"EcoRoof model, plant layer plus soil layer Implemented by Portland State University (Sailor et al., January, 2007) only one material must be referenced per simulation though the same EcoRoof material could be used in multiple constructions. New moisture redistribution scheme (2010) requires higher number of timesteps per hour (minimum 12 recommended).")]
    [JsonObject("Material:RoofVegetation")]
    public class Material_RoofVegetation : BHoMObject, IEnergyPlusClass
    {
        

[Description("The ecoroof module is designed for short plants and shrubs.")]
[JsonProperty("height_of_plants")]
public System.Nullable<float> HeightOfPlants { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description("Entire surface is assumed covered, so decrease LAI accordingly.")]
[JsonProperty("leaf_area_index")]
public System.Nullable<float> LeafAreaIndex { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Leaf reflectivity (albedo) is typically 0.18-0.25")]
[JsonProperty("leaf_reflectivity")]
public System.Nullable<float> LeafReflectivity { get; set; } = (System.Nullable<float>)Single.Parse("0.22", CultureInfo.InvariantCulture);
        

[JsonProperty("leaf_emissivity")]
public System.Nullable<float> LeafEmissivity { get; set; } = (System.Nullable<float>)Single.Parse("0.95", CultureInfo.InvariantCulture);
        

[Description("This depends upon plant type")]
[JsonProperty("minimum_stomatal_resistance")]
public System.Nullable<float> MinimumStomatalResistance { get; set; } = (System.Nullable<float>)Single.Parse("180", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_layer_name")]
public string SoilLayerName { get; set; } = (System.String)"Green Roof Soil";
        

[JsonProperty("roughness")]
public Material_RoofVegetation_Roughness Roughness { get; set; } = (Material_RoofVegetation_Roughness)Enum.Parse(typeof(Material_RoofVegetation_Roughness), "MediumRough");
        

[Description("thickness of the soil layer of the EcoRoof Soil depths of 0.15m (6in) and 0.30m (" +
    "12in) are common.")]
[JsonProperty("thickness")]
public System.Nullable<float> Thickness { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[Description("Thermal conductivity of dry soil. Typical ecoroof soils range from 0.3 to 0.5")]
[JsonProperty("conductivity_of_dry_soil")]
public System.Nullable<float> ConductivityOfDrySoil { get; set; } = (System.Nullable<float>)Single.Parse("0.35", CultureInfo.InvariantCulture);
        

[Description("Density of dry soil (the code modifies this as the soil becomes moist) Typical ec" +
    "oroof soils range from 400 to 1000 (dry to wet)")]
[JsonProperty("density_of_dry_soil")]
public System.Nullable<float> DensityOfDrySoil { get; set; } = (System.Nullable<float>)Single.Parse("1100", CultureInfo.InvariantCulture);
        

[Description("Specific heat of dry soil")]
[JsonProperty("specific_heat_of_dry_soil")]
public System.Nullable<float> SpecificHeatOfDrySoil { get; set; } = (System.Nullable<float>)Single.Parse("1200", CultureInfo.InvariantCulture);
        

[Description("Soil emissivity is typically in range of 0.90 to 0.98")]
[JsonProperty("thermal_absorptance")]
public System.Nullable<float> ThermalAbsorptance { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("Solar absorptance of dry soil (1-albedo) is typically 0.60 to 0.85 corresponding " +
    "to a dry albedo of 0.15 to 0.40")]
[JsonProperty("solar_absorptance")]
public System.Nullable<float> SolarAbsorptance { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("visible_absorptance")]
public System.Nullable<float> VisibleAbsorptance { get; set; } = (System.Nullable<float>)Single.Parse("0.75", CultureInfo.InvariantCulture);
        

[Description("Maximum moisture content is typically less than 0.5")]
[JsonProperty("saturation_volumetric_moisture_content_of_the_soil_layer")]
public System.Nullable<float> SaturationVolumetricMoistureContentOfTheSoilLayer { get; set; } = (System.Nullable<float>)Single.Parse("0.3", CultureInfo.InvariantCulture);
        

[JsonProperty("residual_volumetric_moisture_content_of_the_soil_layer")]
public System.Nullable<float> ResidualVolumetricMoistureContentOfTheSoilLayer { get; set; } = (System.Nullable<float>)Single.Parse("0.01", CultureInfo.InvariantCulture);
        

[JsonProperty("initial_volumetric_moisture_content_of_the_soil_layer")]
public System.Nullable<float> InitialVolumetricMoistureContentOfTheSoilLayer { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[Description("Advanced calculation requires increased number of timesteps (recommended >20).")]
[JsonProperty("moisture_diffusion_calculation_method")]
public Material_RoofVegetation_MoistureDiffusionCalculationMethod MoistureDiffusionCalculationMethod { get; set; } = (Material_RoofVegetation_MoistureDiffusionCalculationMethod)Enum.Parse(typeof(Material_RoofVegetation_MoistureDiffusionCalculationMethod), "Advanced");
    }
    
    public enum Material_RoofVegetation_Roughness
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MediumRough")]
        MediumRough = 1,
        
        [JsonProperty("MediumSmooth")]
        MediumSmooth = 2,
        
        [JsonProperty("Rough")]
        Rough = 3,
        
        [JsonProperty("Smooth")]
        Smooth = 4,
        
        [JsonProperty("VeryRough")]
        VeryRough = 5,
        
        [JsonProperty("VerySmooth")]
        VerySmooth = 6,
    }
    
    public enum Material_RoofVegetation_MoistureDiffusionCalculationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Advanced")]
        Advanced = 1,
        
        [JsonProperty("Simple")]
        Simple = 2,
    }
    
    [Description("Alternate method of describing windows This window material object is used to def" +
        "ine an entire glazing system using simple performance parameters.")]
    [JsonObject("WindowMaterial:SimpleGlazingSystem")]
    public class WindowMaterial_SimpleGlazingSystem : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter U-Factor including film coefficients Note that the effective upper limit fo" +
    "r U-factor is 5.8 W/m2-K")]
[JsonProperty("u_factor")]
public System.Nullable<float> UFactor { get; set; } = null;
        

[Description("SHGC at Normal Incidence")]
[JsonProperty("solar_heat_gain_coefficient")]
public System.Nullable<float> SolarHeatGainCoefficient { get; set; } = null;
        

[Description("VT at Normal Incidence optional")]
[JsonProperty("visible_transmittance")]
public System.Nullable<float> VisibleTransmittance { get; set; } = null;
    }
    
    [Description("Glass material properties for Windows or Glass Doors Transmittance/Reflectance in" +
        "put method.")]
    [JsonObject("WindowMaterial:Glazing")]
    public class WindowMaterial_Glazing : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("optical_data_type")]
public WindowMaterial_Glazing_OpticalDataType OpticalDataType { get; set; } = (WindowMaterial_Glazing_OpticalDataType)Enum.Parse(typeof(WindowMaterial_Glazing_OpticalDataType), "BSDF");
        

[Description("Used only when Optical Data Type = Spectral")]
[JsonProperty("window_glass_spectral_data_set_name")]
public string WindowGlassSpectralDataSetName { get; set; } = "";
        

[JsonProperty("thickness")]
public System.Nullable<float> Thickness { get; set; } = null;
        

[Description("Used only when Optical Data Type = SpectralAverage")]
[JsonProperty("solar_transmittance_at_normal_incidence")]
public System.Nullable<float> SolarTransmittanceAtNormalIncidence { get; set; } = null;
        

[Description("Used only when Optical Data Type = SpectralAverage Front Side is side closest to " +
    "outdoor air")]
[JsonProperty("front_side_solar_reflectance_at_normal_incidence")]
public System.Nullable<float> FrontSideSolarReflectanceAtNormalIncidence { get; set; } = null;
        

[Description("Used only when Optical Data Type = SpectralAverage Back Side is side closest to z" +
    "one air")]
[JsonProperty("back_side_solar_reflectance_at_normal_incidence")]
public System.Nullable<float> BackSideSolarReflectanceAtNormalIncidence { get; set; } = null;
        

[Description("Used only when Optical Data Type = SpectralAverage")]
[JsonProperty("visible_transmittance_at_normal_incidence")]
public System.Nullable<float> VisibleTransmittanceAtNormalIncidence { get; set; } = null;
        

[Description("Used only when Optical Data Type = SpectralAverage")]
[JsonProperty("front_side_visible_reflectance_at_normal_incidence")]
public System.Nullable<float> FrontSideVisibleReflectanceAtNormalIncidence { get; set; } = null;
        

[Description("Used only when Optical Data Type = SpectralAverage")]
[JsonProperty("back_side_visible_reflectance_at_normal_incidence")]
public System.Nullable<float> BackSideVisibleReflectanceAtNormalIncidence { get; set; } = null;
        

[JsonProperty("infrared_transmittance_at_normal_incidence")]
public System.Nullable<float> InfraredTransmittanceAtNormalIncidence { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("front_side_infrared_hemispherical_emissivity")]
public System.Nullable<float> FrontSideInfraredHemisphericalEmissivity { get; set; } = (System.Nullable<float>)Single.Parse("0.84", CultureInfo.InvariantCulture);
        

[JsonProperty("back_side_infrared_hemispherical_emissivity")]
public System.Nullable<float> BackSideInfraredHemisphericalEmissivity { get; set; } = (System.Nullable<float>)Single.Parse("0.84", CultureInfo.InvariantCulture);
        

[JsonProperty("conductivity")]
public System.Nullable<float> Conductivity { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("dirt_correction_factor_for_solar_and_visible_transmittance")]
public System.Nullable<float> DirtCorrectionFactorForSolarAndVisibleTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("solar_diffusing")]
public EmptyNoYes SolarDiffusing { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("coefficient used for deflection calculations. Used only with complex fenestration" +
    " when deflection model is set to TemperatureAndPressureInput")]
[JsonProperty("young_s_modulus")]
public System.Nullable<float> YoungSModulus { get; set; } = (System.Nullable<float>)Single.Parse("72000000000", CultureInfo.InvariantCulture);
        

[Description("coefficient used for deflection calculations. Used only with complex fenestration" +
    " when deflection model is set to TemperatureAndPressureInput")]
[JsonProperty("poisson_s_ratio")]
public System.Nullable<float> PoissonSRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.22", CultureInfo.InvariantCulture);
        

[Description("Used only when Optical Data Type = SpectralAndAngle")]
[JsonProperty("window_glass_spectral_and_incident_angle_transmittance_data_set_table_name")]
public string WindowGlassSpectralAndIncidentAngleTransmittanceDataSetTableName { get; set; } = "";
        

[Description("Used only when Optical Data Type = SpectralAndAngle")]
[JsonProperty("window_glass_spectral_and_incident_angle_front_reflectance_data_set_table_name")]
public string WindowGlassSpectralAndIncidentAngleFrontReflectanceDataSetTableName { get; set; } = "";
        

[Description("Used only when Optical Data Type = SpectralAndAngle")]
[JsonProperty("window_glass_spectral_and_incident_angle_back_reflectance_data_set_table_name")]
public string WindowGlassSpectralAndIncidentAngleBackReflectanceDataSetTableName { get; set; } = "";
    }
    
    public enum WindowMaterial_Glazing_OpticalDataType
    {
        
        [JsonProperty("BSDF")]
        BSDF = 0,
        
        [JsonProperty("Spectral")]
        Spectral = 1,
        
        [JsonProperty("SpectralAndAngle")]
        SpectralAndAngle = 2,
        
        [JsonProperty("SpectralAverage")]
        SpectralAverage = 3,
    }
    
    [Description("thermochromic glass at different temperatures")]
    [JsonObject("WindowMaterial:GlazingGroup:Thermochromic")]
    public class WindowMaterial_GlazingGroup_Thermochromic : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("temperature_data")]
public string TemperatureData { get; set; } = "";
    }
    
    [Description("Glass material properties for Windows or Glass Doors Index of Refraction/Extincti" +
        "on Coefficient input method Not to be used for coated glass")]
    [JsonObject("WindowMaterial:Glazing:RefractionExtinctionMethod")]
    public class WindowMaterial_Glazing_RefractionExtinctionMethod : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("thickness")]
public System.Nullable<float> Thickness { get; set; } = null;
        

[JsonProperty("solar_index_of_refraction")]
public System.Nullable<float> SolarIndexOfRefraction { get; set; } = null;
        

[JsonProperty("solar_extinction_coefficient")]
public System.Nullable<float> SolarExtinctionCoefficient { get; set; } = null;
        

[JsonProperty("visible_index_of_refraction")]
public System.Nullable<float> VisibleIndexOfRefraction { get; set; } = null;
        

[JsonProperty("visible_extinction_coefficient")]
public System.Nullable<float> VisibleExtinctionCoefficient { get; set; } = null;
        

[JsonProperty("infrared_transmittance_at_normal_incidence")]
public System.Nullable<float> InfraredTransmittanceAtNormalIncidence { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Emissivity of front and back side assumed equal")]
[JsonProperty("infrared_hemispherical_emissivity")]
public System.Nullable<float> InfraredHemisphericalEmissivity { get; set; } = (System.Nullable<float>)Single.Parse("0.84", CultureInfo.InvariantCulture);
        

[JsonProperty("conductivity")]
public System.Nullable<float> Conductivity { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("dirt_correction_factor_for_solar_and_visible_transmittance")]
public System.Nullable<float> DirtCorrectionFactorForSolarAndVisibleTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("solar_diffusing")]
public EmptyNoYes SolarDiffusing { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
    }
    
    [Description("Gas material properties that are used in Windows or Glass Doors")]
    [JsonObject("WindowMaterial:Gas")]
    public class WindowMaterial_Gas : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("gas_type")]
public WindowMaterial_Gas_GasType GasType { get; set; } = (WindowMaterial_Gas_GasType)Enum.Parse(typeof(WindowMaterial_Gas_GasType), "Air");
        

[JsonProperty("thickness")]
public System.Nullable<float> Thickness { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("conductivity_coefficient_a")]
public System.Nullable<float> ConductivityCoefficientA { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("conductivity_coefficient_b")]
public System.Nullable<float> ConductivityCoefficientB { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("conductivity_coefficient_c")]
public System.Nullable<float> ConductivityCoefficientC { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("viscosity_coefficient_a")]
public System.Nullable<float> ViscosityCoefficientA { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("viscosity_coefficient_b")]
public System.Nullable<float> ViscosityCoefficientB { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("viscosity_coefficient_c")]
public System.Nullable<float> ViscosityCoefficientC { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("specific_heat_coefficient_a")]
public System.Nullable<float> SpecificHeatCoefficientA { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("specific_heat_coefficient_b")]
public System.Nullable<float> SpecificHeatCoefficientB { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("specific_heat_coefficient_c")]
public System.Nullable<float> SpecificHeatCoefficientC { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("molecular_weight")]
public System.Nullable<float> MolecularWeight { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("specific_heat_ratio")]
public System.Nullable<float> SpecificHeatRatio { get; set; } = null;
    }
    
    public enum WindowMaterial_Gas_GasType
    {
        
        [JsonProperty("Air")]
        Air = 0,
        
        [JsonProperty("Argon")]
        Argon = 1,
        
        [JsonProperty("Custom")]
        Custom = 2,
        
        [JsonProperty("Krypton")]
        Krypton = 3,
        
        [JsonProperty("Xenon")]
        Xenon = 4,
    }
    
    [Description("used to define pillar geometry for support pillars")]
    [JsonObject("WindowGap:SupportPillar")]
    public class WindowGap_SupportPillar : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("spacing")]
public System.Nullable<float> Spacing { get; set; } = (System.Nullable<float>)Single.Parse("0.04", CultureInfo.InvariantCulture);
        

[JsonProperty("radius")]
public System.Nullable<float> Radius { get; set; } = (System.Nullable<float>)Single.Parse("0.0004", CultureInfo.InvariantCulture);
    }
    
    [Description("Used to enter data describing deflection state of the gap. It is referenced from " +
        "WindowMaterial:Gap object only and it is used only when deflection model is set " +
        "to MeasuredDeflection, otherwise it is ignored.")]
    [JsonObject("WindowGap:DeflectionState")]
    public class WindowGap_DeflectionState : BHoMObject, IEnergyPlusClass
    {
        

[Description("If left blank will be considered that gap has no deflection.")]
[JsonProperty("deflected_thickness")]
public System.Nullable<float> DeflectedThickness { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("initial_temperature")]
public System.Nullable<float> InitialTemperature { get; set; } = (System.Nullable<float>)Single.Parse("25", CultureInfo.InvariantCulture);
        

[JsonProperty("initial_pressure")]
public System.Nullable<float> InitialPressure { get; set; } = (System.Nullable<float>)Single.Parse("101325", CultureInfo.InvariantCulture);
    }
    
    [Description("Gas mixtures that are used in Windows or Glass Doors")]
    [JsonObject("WindowMaterial:GasMixture")]
    public class WindowMaterial_GasMixture : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("thickness")]
public System.Nullable<float> Thickness { get; set; } = null;
        

[JsonProperty("number_of_gases_in_mixture")]
public System.Nullable<float> NumberOfGasesInMixture { get; set; } = null;
        

[JsonProperty("gas_1_type")]
public WindowMaterial_GasMixture_Gas1Type Gas1Type { get; set; } = (WindowMaterial_GasMixture_Gas1Type)Enum.Parse(typeof(WindowMaterial_GasMixture_Gas1Type), "Air");
        

[JsonProperty("gas_1_fraction")]
public System.Nullable<float> Gas1Fraction { get; set; } = null;
        

[JsonProperty("gas_2_type")]
public WindowMaterial_GasMixture_Gas2Type Gas2Type { get; set; } = (WindowMaterial_GasMixture_Gas2Type)Enum.Parse(typeof(WindowMaterial_GasMixture_Gas2Type), "Air");
        

[JsonProperty("gas_2_fraction")]
public System.Nullable<float> Gas2Fraction { get; set; } = null;
        

[JsonProperty("gas_3_type")]
public WindowMaterial_GasMixture_Gas3Type Gas3Type { get; set; } = (WindowMaterial_GasMixture_Gas3Type)Enum.Parse(typeof(WindowMaterial_GasMixture_Gas3Type), "Air");
        

[JsonProperty("gas_3_fraction")]
public System.Nullable<float> Gas3Fraction { get; set; } = null;
        

[JsonProperty("gas_4_type")]
public WindowMaterial_GasMixture_Gas4Type Gas4Type { get; set; } = (WindowMaterial_GasMixture_Gas4Type)Enum.Parse(typeof(WindowMaterial_GasMixture_Gas4Type), "Air");
        

[JsonProperty("gas_4_fraction")]
public System.Nullable<float> Gas4Fraction { get; set; } = null;
    }
    
    public enum WindowMaterial_GasMixture_Gas1Type
    {
        
        [JsonProperty("Air")]
        Air = 0,
        
        [JsonProperty("Argon")]
        Argon = 1,
        
        [JsonProperty("Krypton")]
        Krypton = 2,
        
        [JsonProperty("Xenon")]
        Xenon = 3,
    }
    
    public enum WindowMaterial_GasMixture_Gas2Type
    {
        
        [JsonProperty("Air")]
        Air = 0,
        
        [JsonProperty("Argon")]
        Argon = 1,
        
        [JsonProperty("Krypton")]
        Krypton = 2,
        
        [JsonProperty("Xenon")]
        Xenon = 3,
    }
    
    public enum WindowMaterial_GasMixture_Gas3Type
    {
        
        [JsonProperty("Air")]
        Air = 0,
        
        [JsonProperty("Argon")]
        Argon = 1,
        
        [JsonProperty("Krypton")]
        Krypton = 2,
        
        [JsonProperty("Xenon")]
        Xenon = 3,
    }
    
    public enum WindowMaterial_GasMixture_Gas4Type
    {
        
        [JsonProperty("Air")]
        Air = 0,
        
        [JsonProperty("Argon")]
        Argon = 1,
        
        [JsonProperty("Krypton")]
        Krypton = 2,
        
        [JsonProperty("Xenon")]
        Xenon = 3,
    }
    
    [Description(@"Used to define the gap between two layers in a complex fenestration system, where the Construction:ComplexFenestrationState object is used. It is referenced as a layer in the Construction:ComplexFenestrationState object. It cannot be referenced as a layer from the Construction object.")]
    [JsonObject("WindowMaterial:Gap")]
    public class WindowMaterial_Gap : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("thickness")]
public System.Nullable<float> Thickness { get; set; } = null;
        

[Description("This field should reference only WindowMaterial:Gas or WindowMaterial:GasMixture " +
    "objects")]
[JsonProperty("gas_or_gas_mixture_")]
public string GasOrGasMixture { get; set; } = "";
        

[JsonProperty("pressure")]
public System.Nullable<float> Pressure { get; set; } = (System.Nullable<float>)Single.Parse("101325", CultureInfo.InvariantCulture);
        

[Description("If left blank, it will be considered that gap is not deflected")]
[JsonProperty("deflection_state")]
public string DeflectionState { get; set; } = "";
        

[Description("If left blank, it will be considered that gap does not have support pillars")]
[JsonProperty("support_pillar")]
public string SupportPillar { get; set; } = "";
    }
    
    [Description(@"Specifies the properties of window shade materials. Reflectance and emissivity properties are assumed to be the same on both sides of the shade. Shades are considered to be perfect diffusers (all transmitted and reflected radiation is hemispherically-diffuse) independent of angle of incidence.")]
    [JsonObject("WindowMaterial:Shade")]
    public class WindowMaterial_Shade : BHoMObject, IEnergyPlusClass
    {
        

[Description("Assumed independent of incidence angle")]
[JsonProperty("solar_transmittance")]
public System.Nullable<float> SolarTransmittance { get; set; } = null;
        

[Description("Assumed same for both sides Assumed independent of incidence angle")]
[JsonProperty("solar_reflectance")]
public System.Nullable<float> SolarReflectance { get; set; } = null;
        

[Description("Assumed independent of incidence angle")]
[JsonProperty("visible_transmittance")]
public System.Nullable<float> VisibleTransmittance { get; set; } = null;
        

[Description("Assumed same for both sides Assumed independent of incidence angle")]
[JsonProperty("visible_reflectance")]
public System.Nullable<float> VisibleReflectance { get; set; } = null;
        

[JsonProperty("infrared_hemispherical_emissivity")]
public System.Nullable<float> InfraredHemisphericalEmissivity { get; set; } = null;
        

[JsonProperty("infrared_transmittance")]
public System.Nullable<float> InfraredTransmittance { get; set; } = null;
        

[JsonProperty("thickness")]
public System.Nullable<float> Thickness { get; set; } = null;
        

[JsonProperty("conductivity")]
public System.Nullable<float> Conductivity { get; set; } = null;
        

[JsonProperty("shade_to_glass_distance")]
public System.Nullable<float> ShadeToGlassDistance { get; set; } = (System.Nullable<float>)Single.Parse("0.05", CultureInfo.InvariantCulture);
        

[JsonProperty("top_opening_multiplier")]
public System.Nullable<float> TopOpeningMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[JsonProperty("bottom_opening_multiplier")]
public System.Nullable<float> BottomOpeningMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[JsonProperty("left_side_opening_multiplier")]
public System.Nullable<float> LeftSideOpeningMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[JsonProperty("right_side_opening_multiplier")]
public System.Nullable<float> RightSideOpeningMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[JsonProperty("airflow_permeability")]
public System.Nullable<float> AirflowPermeability { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    [Description("Complex window shading layer thermal properties")]
    [JsonObject("WindowMaterial:ComplexShade")]
    public class WindowMaterial_ComplexShade : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("layer_type")]
public WindowMaterial_ComplexShade_LayerType LayerType { get; set; } = (WindowMaterial_ComplexShade_LayerType)Enum.Parse(typeof(WindowMaterial_ComplexShade_LayerType), "OtherShadingType");
        

[JsonProperty("thickness")]
public System.Nullable<float> Thickness { get; set; } = (System.Nullable<float>)Single.Parse("0.002", CultureInfo.InvariantCulture);
        

[JsonProperty("conductivity")]
public System.Nullable<float> Conductivity { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("ir_transmittance")]
public System.Nullable<float> IrTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("front_emissivity")]
public System.Nullable<float> FrontEmissivity { get; set; } = (System.Nullable<float>)Single.Parse("0.84", CultureInfo.InvariantCulture);
        

[JsonProperty("back_emissivity")]
public System.Nullable<float> BackEmissivity { get; set; } = (System.Nullable<float>)Single.Parse("0.84", CultureInfo.InvariantCulture);
        

[JsonProperty("top_opening_multiplier")]
public System.Nullable<float> TopOpeningMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("bottom_opening_multiplier")]
public System.Nullable<float> BottomOpeningMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("left_side_opening_multiplier")]
public System.Nullable<float> LeftSideOpeningMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("right_side_opening_multiplier")]
public System.Nullable<float> RightSideOpeningMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("front_opening_multiplier")]
public System.Nullable<float> FrontOpeningMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("0.05", CultureInfo.InvariantCulture);
        

[JsonProperty("slat_width")]
public System.Nullable<float> SlatWidth { get; set; } = (System.Nullable<float>)Single.Parse("0.016", CultureInfo.InvariantCulture);
        

[Description("Distance between adjacent slat faces")]
[JsonProperty("slat_spacing")]
public System.Nullable<float> SlatSpacing { get; set; } = (System.Nullable<float>)Single.Parse("0.012", CultureInfo.InvariantCulture);
        

[Description("Distance between top and bottom surfaces of slat Slat is assumed to be rectangula" +
    "r in cross section and flat")]
[JsonProperty("slat_thickness")]
public System.Nullable<float> SlatThickness { get; set; } = (System.Nullable<float>)Single.Parse("0.0006", CultureInfo.InvariantCulture);
        

[JsonProperty("slat_angle")]
public System.Nullable<float> SlatAngle { get; set; } = (System.Nullable<float>)Single.Parse("90", CultureInfo.InvariantCulture);
        

[JsonProperty("slat_conductivity")]
public System.Nullable<float> SlatConductivity { get; set; } = (System.Nullable<float>)Single.Parse("160", CultureInfo.InvariantCulture);
        

[Description("this value represents curvature radius of the slat. if the slat is flat use zero." +
    " if this value is not zero, then it must be > SlatWidth/2.")]
[JsonProperty("slat_curve")]
public System.Nullable<float> SlatCurve { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum WindowMaterial_ComplexShade_LayerType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BSDF")]
        BSDF = 1,
        
        [JsonProperty("OtherShadingType")]
        OtherShadingType = 2,
        
        [JsonProperty("Perforated")]
        Perforated = 3,
        
        [JsonProperty("VenetianHorizontal")]
        VenetianHorizontal = 4,
        
        [JsonProperty("VenetianVertical")]
        VenetianVertical = 5,
        
        [JsonProperty("Woven")]
        Woven = 6,
    }
    
    [Description("Window blind thermal properties")]
    [JsonObject("WindowMaterial:Blind")]
    public class WindowMaterial_Blind : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("slat_orientation")]
public WindowMaterial_Blind_SlatOrientation SlatOrientation { get; set; } = (WindowMaterial_Blind_SlatOrientation)Enum.Parse(typeof(WindowMaterial_Blind_SlatOrientation), "Horizontal");
        

[JsonProperty("slat_width")]
public System.Nullable<float> SlatWidth { get; set; } = null;
        

[Description("Distance between adjacent slat faces")]
[JsonProperty("slat_separation")]
public System.Nullable<float> SlatSeparation { get; set; } = null;
        

[Description("Distance between top and bottom surfaces of slat Slat is assumed to be rectangula" +
    "r in cross section and flat")]
[JsonProperty("slat_thickness")]
public System.Nullable<float> SlatThickness { get; set; } = (System.Nullable<float>)Single.Parse("0.00025", CultureInfo.InvariantCulture);
        

[Description(@"If WindowShadingControl referencing the window that incorporates this blind has Type of Slat Angle Control for Blinds = FixedSlatAngle, then this is the fixed value of the slat angle; If WindowShadingControl referencing the window that incorporates this blind has Type of Slat Angle Control for Blinds = BlockBeamSolar, then this is the slat angle when slat angle control is not in effect (e.g., when there is no beam solar on the blind); Not used if WindowShadingControl referencing the window that incorporates this blind has Type of Slat Angle Control for Blinds = ScheduledSlatAngle.")]
[JsonProperty("slat_angle")]
public System.Nullable<float> SlatAngle { get; set; } = (System.Nullable<float>)Single.Parse("45", CultureInfo.InvariantCulture);
        

[Description("default is for aluminum")]
[JsonProperty("slat_conductivity")]
public System.Nullable<float> SlatConductivity { get; set; } = (System.Nullable<float>)Single.Parse("221", CultureInfo.InvariantCulture);
        

[JsonProperty("slat_beam_solar_transmittance")]
public System.Nullable<float> SlatBeamSolarTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("front_side_slat_beam_solar_reflectance")]
public System.Nullable<float> FrontSideSlatBeamSolarReflectance { get; set; } = null;
        

[JsonProperty("back_side_slat_beam_solar_reflectance")]
public System.Nullable<float> BackSideSlatBeamSolarReflectance { get; set; } = null;
        

[Description("Must equal \"Slat beam solar transmittance\"")]
[JsonProperty("slat_diffuse_solar_transmittance")]
public System.Nullable<float> SlatDiffuseSolarTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Must equal \"Front Side Slat Beam Solar Reflectance\"")]
[JsonProperty("front_side_slat_diffuse_solar_reflectance")]
public System.Nullable<float> FrontSideSlatDiffuseSolarReflectance { get; set; } = null;
        

[Description("Must equal \"Back Side Slat Beam Solar Reflectance\"")]
[JsonProperty("back_side_slat_diffuse_solar_reflectance")]
public System.Nullable<float> BackSideSlatDiffuseSolarReflectance { get; set; } = null;
        

[Description("Required for detailed daylighting calculation")]
[JsonProperty("slat_beam_visible_transmittance")]
public System.Nullable<float> SlatBeamVisibleTransmittance { get; set; } = null;
        

[Description("Required for detailed daylighting calculation")]
[JsonProperty("front_side_slat_beam_visible_reflectance")]
public System.Nullable<float> FrontSideSlatBeamVisibleReflectance { get; set; } = null;
        

[Description("Required for detailed daylighting calculation")]
[JsonProperty("back_side_slat_beam_visible_reflectance")]
public System.Nullable<float> BackSideSlatBeamVisibleReflectance { get; set; } = null;
        

[Description("Used only for detailed daylighting calculation Must equal \"Slat Beam Visible Tran" +
    "smittance\"")]
[JsonProperty("slat_diffuse_visible_transmittance")]
public System.Nullable<float> SlatDiffuseVisibleTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Required for detailed daylighting calculation Must equal \"Front Side Slat Beam Vi" +
    "sible Reflectance\"")]
[JsonProperty("front_side_slat_diffuse_visible_reflectance")]
public System.Nullable<float> FrontSideSlatDiffuseVisibleReflectance { get; set; } = null;
        

[Description("Required for detailed daylighting calculation Must equal \"Back Side Slat Beam Vis" +
    "ible Reflectance\"")]
[JsonProperty("back_side_slat_diffuse_visible_reflectance")]
public System.Nullable<float> BackSideSlatDiffuseVisibleReflectance { get; set; } = null;
        

[JsonProperty("slat_infrared_hemispherical_transmittance")]
public System.Nullable<float> SlatInfraredHemisphericalTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("front_side_slat_infrared_hemispherical_emissivity")]
public System.Nullable<float> FrontSideSlatInfraredHemisphericalEmissivity { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("back_side_slat_infrared_hemispherical_emissivity")]
public System.Nullable<float> BackSideSlatInfraredHemisphericalEmissivity { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("blind_to_glass_distance")]
public System.Nullable<float> BlindToGlassDistance { get; set; } = (System.Nullable<float>)Single.Parse("0.05", CultureInfo.InvariantCulture);
        

[JsonProperty("blind_top_opening_multiplier")]
public System.Nullable<float> BlindTopOpeningMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[JsonProperty("blind_bottom_opening_multiplier")]
public System.Nullable<float> BlindBottomOpeningMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("blind_left_side_opening_multiplier")]
public System.Nullable<float> BlindLeftSideOpeningMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[JsonProperty("blind_right_side_opening_multiplier")]
public System.Nullable<float> BlindRightSideOpeningMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[Description("Used only if WindowShadingControl referencing the window that incorporates this b" +
    "lind varies the slat angle (i.e., WindowShadingControl with Type of Slat Angle C" +
    "ontrol for Blinds = ScheduledSlatAngle or BlockBeamSolar)")]
[JsonProperty("minimum_slat_angle")]
public System.Nullable<float> MinimumSlatAngle { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Used only if WindowShadingControl referencing the window that incorporates this b" +
    "lind varies the slat angle (i.e., WindowShadingControl with Type of Slat Angle C" +
    "ontrol for Blinds = ScheduledSlatAngle or BlockBeamSolar)")]
[JsonProperty("maximum_slat_angle")]
public System.Nullable<float> MaximumSlatAngle { get; set; } = (System.Nullable<float>)Single.Parse("180", CultureInfo.InvariantCulture);
    }
    
    public enum WindowMaterial_Blind_SlatOrientation
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Horizontal")]
        Horizontal = 1,
        
        [JsonProperty("Vertical")]
        Vertical = 2,
    }
    
    [Description("Window screen physical properties. Can only be located on the exterior side of a " +
        "window construction.")]
    [JsonObject("WindowMaterial:Screen")]
    public class WindowMaterial_Screen : BHoMObject, IEnergyPlusClass
    {
        

[Description("Select the method used to account for the beam solar reflected off the material s" +
    "urface.")]
[JsonProperty("reflected_beam_transmittance_accounting_method")]
public WindowMaterial_Screen_ReflectedBeamTransmittanceAccountingMethod ReflectedBeamTransmittanceAccountingMethod { get; set; } = (WindowMaterial_Screen_ReflectedBeamTransmittanceAccountingMethod)Enum.Parse(typeof(WindowMaterial_Screen_ReflectedBeamTransmittanceAccountingMethod), "ModelAsDiffuse");
        

[Description("Diffuse reflectance of the screen material over the entire solar radiation spectr" +
    "um. Assumed to be the same for both sides of the screen.")]
[JsonProperty("diffuse_solar_reflectance")]
public System.Nullable<float> DiffuseSolarReflectance { get; set; } = null;
        

[Description("Diffuse visible reflectance of the screen material averaged over the solar spectr" +
    "um and weighted by the response of the human eye. Assumed to be the same for bot" +
    "h sides of the screen.")]
[JsonProperty("diffuse_visible_reflectance")]
public System.Nullable<float> DiffuseVisibleReflectance { get; set; } = null;
        

[Description("Long-wave emissivity of the screen material. Assumed to be the same for both side" +
    "s of the screen.")]
[JsonProperty("thermal_hemispherical_emissivity")]
public System.Nullable<float> ThermalHemisphericalEmissivity { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("Thermal conductivity of the screen material. Default is for aluminum.")]
[JsonProperty("conductivity")]
public System.Nullable<float> Conductivity { get; set; } = (System.Nullable<float>)Single.Parse("221", CultureInfo.InvariantCulture);
        

[Description("Spacing assumed to be the same in both directions.")]
[JsonProperty("screen_material_spacing")]
public System.Nullable<float> ScreenMaterialSpacing { get; set; } = null;
        

[Description("Diameter assumed to be the same in both directions.")]
[JsonProperty("screen_material_diameter")]
public System.Nullable<float> ScreenMaterialDiameter { get; set; } = null;
        

[Description("Distance from the window screen to the adjacent glass surface.")]
[JsonProperty("screen_to_glass_distance")]
public System.Nullable<float> ScreenToGlassDistance { get; set; } = (System.Nullable<float>)Single.Parse("0.025", CultureInfo.InvariantCulture);
        

[Description("Effective area for air flow at the top of the screen divided by the perpendicular" +
    " area between the glass and the top of the screen.")]
[JsonProperty("top_opening_multiplier")]
public System.Nullable<float> TopOpeningMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Effective area for air flow at the bottom of the screen divided by the perpendicu" +
    "lar area between the glass and the bottom of the screen.")]
[JsonProperty("bottom_opening_multiplier")]
public System.Nullable<float> BottomOpeningMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Effective area for air flow at the left side of the screen divided by the perpend" +
    "icular area between the glass and the left side of the screen.")]
[JsonProperty("left_side_opening_multiplier")]
public System.Nullable<float> LeftSideOpeningMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Effective area for air flow at the right side of the screen divided by the perpen" +
    "dicular area between the glass and the right side of the screen.")]
[JsonProperty("right_side_opening_multiplier")]
public System.Nullable<float> RightSideOpeningMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Select the resolution of azimuth and altitude angles for the screen transmittance" +
    " map. A value of 0 means no transmittance map will be generated. Valid values fo" +
    "r this field are 0, 1, 2, 3 and 5.")]
[JsonProperty("angle_of_resolution_for_screen_transmittance_output_map")]
public string AngleOfResolutionForScreenTransmittanceOutputMap { get; set; } = (System.String)"0";
    }
    
    public enum WindowMaterial_Screen_ReflectedBeamTransmittanceAccountingMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DoNotModel")]
        DoNotModel = 1,
        
        [JsonProperty("ModelAsDiffuse")]
        ModelAsDiffuse = 2,
        
        [JsonProperty("ModelAsDirectBeam")]
        ModelAsDirectBeam = 3,
    }
    
    [Description("Specifies the properties of equivalent layer window shade material Shades are con" +
        "sidered to be perfect diffusers (all transmitted and reflected radiation is hemi" +
        "spherically-diffuse) independent of angle of incidence. Shade represents roller " +
        "blinds.")]
    [JsonObject("WindowMaterial:Shade:EquivalentLayer")]
    public class WindowMaterial_Shade_EquivalentLayer : BHoMObject, IEnergyPlusClass
    {
        

[Description("The beam-beam solar transmittance at normal incidence. This value is the same as " +
    "the openness area fraction of the shade material. Assumed to be the same for fro" +
    "nt and back sides.")]
[JsonProperty("shade_beam_beam_solar_transmittance")]
public System.Nullable<float> ShadeBeamBeamSolarTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The front side beam-diffuse solar transmittance at normal incidence averaged over" +
    " the entire spectrum of solar radiation.")]
[JsonProperty("front_side_shade_beam_diffuse_solar_transmittance")]
public System.Nullable<float> FrontSideShadeBeamDiffuseSolarTransmittance { get; set; } = null;
        

[Description("The back side beam-diffuse solar transmittance at normal incidence averaged over " +
    "the entire spectrum of solar radiation.")]
[JsonProperty("back_side_shade_beam_diffuse_solar_transmittance")]
public System.Nullable<float> BackSideShadeBeamDiffuseSolarTransmittance { get; set; } = null;
        

[Description("The front side beam-diffuse solar reflectance at normal incidence averaged over t" +
    "he entire spectrum of solar radiation.")]
[JsonProperty("front_side_shade_beam_diffuse_solar_reflectance")]
public System.Nullable<float> FrontSideShadeBeamDiffuseSolarReflectance { get; set; } = null;
        

[Description("The back side beam-diffuse solar reflectance at normal incidence averaged over th" +
    "e entire spectrum of solar radiation.")]
[JsonProperty("back_side_shade_beam_diffuse_solar_reflectance")]
public System.Nullable<float> BackSideShadeBeamDiffuseSolarReflectance { get; set; } = null;
        

[Description("The beam-beam visible transmittance at normal incidence averaged over the visible" +
    " spectrum range of solar radiation. Assumed to be the same for front and back si" +
    "des of the shade.")]
[JsonProperty("shade_beam_beam_visible_transmittance_at_normal_incidence")]
public System.Nullable<float> ShadeBeamBeamVisibleTransmittanceAtNormalIncidence { get; set; } = null;
        

[Description("The beam-diffuse visible transmittance at normal incidence averaged over the visi" +
    "ble spectrum range of solar radiation. Assumed to be the same for front and back" +
    " sides of the shade.")]
[JsonProperty("shade_beam_diffuse_visible_transmittance_at_normal_incidence")]
public System.Nullable<float> ShadeBeamDiffuseVisibleTransmittanceAtNormalIncidence { get; set; } = null;
        

[Description("The beam-diffuse visible reflectance at normal incidence averaged over the visibl" +
    "e spectrum range of solar radiation. Assumed to be the same for front and back s" +
    "ides of the shade.")]
[JsonProperty("shade_beam_diffuse_visible_reflectance_at_normal_incidence")]
public System.Nullable<float> ShadeBeamDiffuseVisibleReflectanceAtNormalIncidence { get; set; } = null;
        

[Description("The long-wave transmittance of the shade material at zero shade openness. Assumed" +
    " to be the same for front and back sides of the shade.")]
[JsonProperty("shade_material_infrared_transmittance")]
public System.Nullable<float> ShadeMaterialInfraredTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("0.05", CultureInfo.InvariantCulture);
        

[Description("The front side long-wave emissivity of the shade material at zero shade openness." +
    " Openness fraction is used to calculate the effective emissivity value.")]
[JsonProperty("front_side_shade_material_infrared_emissivity")]
public System.Nullable<float> FrontSideShadeMaterialInfraredEmissivity { get; set; } = (System.Nullable<float>)Single.Parse("0.91", CultureInfo.InvariantCulture);
        

[Description("The back side long-wave emissivity of the shade material at zero shade openness. " +
    "Openness fraction is used to calculate the effective emissivity value.")]
[JsonProperty("back_side_shade_material_infrared_emissivity")]
public System.Nullable<float> BackSideShadeMaterialInfraredEmissivity { get; set; } = (System.Nullable<float>)Single.Parse("0.91", CultureInfo.InvariantCulture);
    }
    
    [Description(@"Specifies the properties of equivalent layer drape fabric materials. Shades are considered to be perfect diffusers (all transmitted and reflected radiation is hemispherically-diffuse) independent of angle of incidence. unpleated drape fabric is treated as thin and flat layer.")]
    [JsonObject("WindowMaterial:Drape:EquivalentLayer")]
    public class WindowMaterial_Drape_EquivalentLayer : BHoMObject, IEnergyPlusClass
    {
        

[Description("The beam-beam solar transmittance at normal incidence. This value is the same as " +
    "the openness area fraction of the drape fabric. Assumed to be same for front and" +
    " back sides.")]
[JsonProperty("drape_beam_beam_solar_transmittance_at_normal_incidence")]
public System.Nullable<float> DrapeBeamBeamSolarTransmittanceAtNormalIncidence { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The front side beam-diffuse solar transmittance at normal incidence averaged over" +
    " the entire spectrum of solar radiation. Assumed to be the same for front and ba" +
    "ck sides.")]
[JsonProperty("front_side_drape_beam_diffuse_solar_transmittance")]
public System.Nullable<float> FrontSideDrapeBeamDiffuseSolarTransmittance { get; set; } = null;
        

[Description("The back side beam-diffuse solar transmittance at normal incidence averaged over " +
    "the entire spectrum of solar radiation. Assumed to be the same for front and bac" +
    "k sides.")]
[JsonProperty("back_side_drape_beam_diffuse_solar_transmittance")]
public System.Nullable<float> BackSideDrapeBeamDiffuseSolarTransmittance { get; set; } = null;
        

[Description("The front side beam-diffuse solar reflectance at normal incidence averaged over t" +
    "he entire spectrum of solar radiation.")]
[JsonProperty("front_side_drape_beam_diffuse_solar_reflectance")]
public System.Nullable<float> FrontSideDrapeBeamDiffuseSolarReflectance { get; set; } = null;
        

[Description("The back side beam-diffuse solar reflectance at normal incidence averaged over th" +
    "e entire spectrum of solar radiation.")]
[JsonProperty("back_side_drape_beam_diffuse_solar_reflectance")]
public System.Nullable<float> BackSideDrapeBeamDiffuseSolarReflectance { get; set; } = null;
        

[Description("The beam-beam visible transmittance at normal incidence averaged over the visible" +
    " spectrum of solar radiation. Assumed same for front and back sides.")]
[JsonProperty("drape_beam_beam_visible_transmittance")]
public System.Nullable<float> DrapeBeamBeamVisibleTransmittance { get; set; } = null;
        

[Description("The beam-diffuse visible transmittance at normal incidence averaged over the visi" +
    "ble spectrum range of solar radiation. Assumed to be the same for front and back" +
    " sides.")]
[JsonProperty("drape_beam_diffuse_visible_transmittance")]
public System.Nullable<float> DrapeBeamDiffuseVisibleTransmittance { get; set; } = null;
        

[Description("The beam-diffuse visible reflectance at normal incidence average over the visible" +
    " spectrum range of solar radiation. Assumed to be the same for front and back si" +
    "des.")]
[JsonProperty("drape_beam_diffuse_visible_reflectance")]
public System.Nullable<float> DrapeBeamDiffuseVisibleReflectance { get; set; } = null;
        

[Description("Long-wave transmittance of the drape fabric at zero openness fraction. Assumed sa" +
    "me for front and back sides.")]
[JsonProperty("drape_material_infrared_transmittance")]
public System.Nullable<float> DrapeMaterialInfraredTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("0.05", CultureInfo.InvariantCulture);
        

[Description("Front side long-wave emissivity of the drape fabric at zero shade openness. Openn" +
    "ess fraction specified above is used to calculate the effective emissivity value" +
    ".")]
[JsonProperty("front_side_drape_material_infrared_emissivity")]
public System.Nullable<float> FrontSideDrapeMaterialInfraredEmissivity { get; set; } = (System.Nullable<float>)Single.Parse("0.87", CultureInfo.InvariantCulture);
        

[Description("Back side long-wave emissivity of the drape fabric at zero shade openness. Openne" +
    "ss fraction specified above is used to calculate the effective emissivity value." +
    "")]
[JsonProperty("back_side_drape_material_infrared_emissivity")]
public System.Nullable<float> BackSideDrapeMaterialInfraredEmissivity { get; set; } = (System.Nullable<float>)Single.Parse("0.87", CultureInfo.InvariantCulture);
        

[Description("Width of the pleated section of the draped fabric. If the drape fabric is unpleat" +
    "ed or is flat, then the pleated section width is set to zero.")]
[JsonProperty("width_of_pleated_fabric")]
public System.Nullable<float> WidthOfPleatedFabric { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Length of the pleated section of the draped fabric. If the drape fabric is unplea" +
    "ted or is flat, then the pleated section length is set to zero.")]
[JsonProperty("length_of_pleated_fabric")]
public System.Nullable<float> LengthOfPleatedFabric { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    [Description("Window equivalent layer blind slat optical and thermal properties. The model assu" +
        "mes that slats are thin and flat, applies correction empirical correlation to ac" +
        "count for curvature effect. Slats are assumed to transmit and reflect diffusely." +
        "")]
    [JsonObject("WindowMaterial:Blind:EquivalentLayer")]
    public class WindowMaterial_Blind_EquivalentLayer : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("slat_orientation")]
public WindowMaterial_Blind_EquivalentLayer_SlatOrientation SlatOrientation { get; set; } = (WindowMaterial_Blind_EquivalentLayer_SlatOrientation)Enum.Parse(typeof(WindowMaterial_Blind_EquivalentLayer_SlatOrientation), "Horizontal");
        

[JsonProperty("slat_width")]
public System.Nullable<float> SlatWidth { get; set; } = null;
        

[Description("Distance between adjacent slat faces")]
[JsonProperty("slat_separation")]
public System.Nullable<float> SlatSeparation { get; set; } = null;
        

[Description("Perpendicular length between the cord and the curve. Slat is assumed to be rectan" +
    "gular in cross section and flat. Crown=0.0625x\"Slat width\"")]
[JsonProperty("slat_crown")]
public System.Nullable<float> SlatCrown { get; set; } = (System.Nullable<float>)Single.Parse("0.0015", CultureInfo.InvariantCulture);
        

[Description("Slat angle is +ve if the tip of the slat front face is tilted upward, else the sl" +
    "at angle is -ve if the tip of the slat front face is tilted downward. The slat a" +
    "ngle varies between -90 to +90. The default value is 45 degrees.")]
[JsonProperty("slat_angle")]
public System.Nullable<float> SlatAngle { get; set; } = (System.Nullable<float>)Single.Parse("45", CultureInfo.InvariantCulture);
        

[Description("The front side beam-diffuse solar transmittance of the slat at normal incidence a" +
    "veraged over the entire spectrum of solar radiation.")]
[JsonProperty("front_side_slat_beam_diffuse_solar_transmittance")]
public System.Nullable<float> FrontSideSlatBeamDiffuseSolarTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The back side beam-diffuse solar transmittance of the slat at normal incidence av" +
    "eraged over the entire spectrum of solar radiation.")]
[JsonProperty("back_side_slat_beam_diffuse_solar_transmittance")]
public System.Nullable<float> BackSideSlatBeamDiffuseSolarTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The front side beam-diffuse solar reflectance of the slat at normal incidence ave" +
    "raged over the entire spectrum of solar radiation.")]
[JsonProperty("front_side_slat_beam_diffuse_solar_reflectance")]
public System.Nullable<float> FrontSideSlatBeamDiffuseSolarReflectance { get; set; } = null;
        

[Description("The back side beam-diffuse solar reflectance of the slat at normal incidence aver" +
    "aged over the entire spectrum of solar radiation.")]
[JsonProperty("back_side_slat_beam_diffuse_solar_reflectance")]
public System.Nullable<float> BackSideSlatBeamDiffuseSolarReflectance { get; set; } = null;
        

[Description("The front side beam-diffuse visible transmittance of the slat at normal incidence" +
    " averaged over the visible spectrum range of solar radiation.")]
[JsonProperty("front_side_slat_beam_diffuse_visible_transmittance")]
public System.Nullable<float> FrontSideSlatBeamDiffuseVisibleTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The back side beam-diffuse visible transmittance of the slat at normal incidence " +
    "averaged over the visible spectrum range of solar radiation.")]
[JsonProperty("back_side_slat_beam_diffuse_visible_transmittance")]
public System.Nullable<float> BackSideSlatBeamDiffuseVisibleTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The front side beam-diffuse visible reflectance of the slat at normal incidence a" +
    "veraged over the visible spectrum range of solar radiation.")]
[JsonProperty("front_side_slat_beam_diffuse_visible_reflectance")]
public System.Nullable<float> FrontSideSlatBeamDiffuseVisibleReflectance { get; set; } = null;
        

[Description("The back side beam-diffuse visible reflectance of the slat at normal incidence av" +
    "eraged over the visible spectrum range of solar radiation.")]
[JsonProperty("back_side_slat_beam_diffuse_visible_reflectance")]
public System.Nullable<float> BackSideSlatBeamDiffuseVisibleReflectance { get; set; } = null;
        

[Description("The beam-diffuse solar transmittance of the slat averaged over the entire solar s" +
    "pectrum of solar radiation.")]
[JsonProperty("slat_diffuse_diffuse_solar_transmittance")]
public System.Nullable<float> SlatDiffuseDiffuseSolarTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The front side beam-diffuse solar reflectance of the slat averaged over the entir" +
    "e solar spectrum of solar radiation.")]
[JsonProperty("front_side_slat_diffuse_diffuse_solar_reflectance")]
public System.Nullable<float> FrontSideSlatDiffuseDiffuseSolarReflectance { get; set; } = null;
        

[Description("The back side beam-diffuse solar reflectance of the slat averaged over the entire" +
    " solar spectrum of solar radiation.")]
[JsonProperty("back_side_slat_diffuse_diffuse_solar_reflectance")]
public System.Nullable<float> BackSideSlatDiffuseDiffuseSolarReflectance { get; set; } = null;
        

[Description("The beam-diffuse visible transmittance of the slat averaged over the visible spec" +
    "trum range of solar radiation.")]
[JsonProperty("slat_diffuse_diffuse_visible_transmittance")]
public System.Nullable<float> SlatDiffuseDiffuseVisibleTransmittance { get; set; } = null;
        

[Description("The front side beam-diffuse visible reflectance of the slat averaged over the vis" +
    "ible spectrum range of solar radiation.")]
[JsonProperty("front_side_slat_diffuse_diffuse_visible_reflectance")]
public System.Nullable<float> FrontSideSlatDiffuseDiffuseVisibleReflectance { get; set; } = null;
        

[Description("The back side beam-diffuse visible reflectance of the slat averaged over the visi" +
    "ble spectrum range of solar radiation.")]
[JsonProperty("back_side_slat_diffuse_diffuse_visible_reflectance")]
public System.Nullable<float> BackSideSlatDiffuseDiffuseVisibleReflectance { get; set; } = null;
        

[Description("Long-wave hemispherical transmittance of the slat material. Assumed to be the sam" +
    "e for both sides of the slat.")]
[JsonProperty("slat_infrared_transmittance")]
public System.Nullable<float> SlatInfraredTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Front side long-wave hemispherical emissivity of the slat material.")]
[JsonProperty("front_side_slat_infrared_emissivity")]
public System.Nullable<float> FrontSideSlatInfraredEmissivity { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("Back side long-wave hemispherical emissivity of the slat material.")]
[JsonProperty("back_side_slat_infrared_emissivity")]
public System.Nullable<float> BackSideSlatInfraredEmissivity { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description(@"Used only if slat angle control is desired to either maximize solar gain (MaximizeSolar), maximize visibility while eliminating beam solar radiation (BlockBeamSolar), or fixed slate angle (FixedSlatAngle). If FixedSlatAngle is selected, the slat angle entered above is used.")]
[JsonProperty("slat_angle_control")]
public WindowMaterial_Blind_EquivalentLayer_SlatAngleControl SlatAngleControl { get; set; } = (WindowMaterial_Blind_EquivalentLayer_SlatAngleControl)Enum.Parse(typeof(WindowMaterial_Blind_EquivalentLayer_SlatAngleControl), "FixedSlatAngle");
    }
    
    public enum WindowMaterial_Blind_EquivalentLayer_SlatOrientation
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Horizontal")]
        Horizontal = 1,
        
        [JsonProperty("Vertical")]
        Vertical = 2,
    }
    
    public enum WindowMaterial_Blind_EquivalentLayer_SlatAngleControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlockBeamSolar")]
        BlockBeamSolar = 1,
        
        [JsonProperty("FixedSlatAngle")]
        FixedSlatAngle = 2,
        
        [JsonProperty("MaximizeSolar")]
        MaximizeSolar = 3,
    }
    
    [Description("Equivalent layer window screen physical properties. Can only be located on the ex" +
        "terior side of a window construction.")]
    [JsonObject("WindowMaterial:Screen:EquivalentLayer")]
    public class WindowMaterial_Screen_EquivalentLayer : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"The beam-beam transmittance of the screen material at normal incidence. This input field is the same as the material openness area fraction and can be autocalculated from the wire spacing and wire and diameter. Assumed to be the same for both sides of the screen.")]
[JsonProperty("screen_beam_beam_solar_transmittance")]
public string ScreenBeamBeamSolarTransmittance { get; set; } = (System.String)"Autocalculate";
        

[Description("The beam-diffuse solar transmittance of the screen material at normal incidence a" +
    "veraged over the entire spectrum of solar radiation. Assumed to be the same for " +
    "both sides of the screen.")]
[JsonProperty("screen_beam_diffuse_solar_transmittance")]
public System.Nullable<float> ScreenBeamDiffuseSolarTransmittance { get; set; } = null;
        

[Description("The beam-diffuse solar reflectance of the screen material at normal incidence ave" +
    "raged over the entire spectrum of solar radiation. Assumed to be the same for bo" +
    "th sides of the screen.")]
[JsonProperty("screen_beam_diffuse_solar_reflectance")]
public System.Nullable<float> ScreenBeamDiffuseSolarReflectance { get; set; } = null;
        

[Description("The beam-beam visible transmittance of the screen material at normal incidence av" +
    "eraged over the visible spectrum range of solar radiation. Assumed to be the sam" +
    "e for both sides of the screen.")]
[JsonProperty("screen_beam_beam_visible_transmittance")]
public System.Nullable<float> ScreenBeamBeamVisibleTransmittance { get; set; } = null;
        

[Description("The beam-diffuse visible transmittance of the screen material at normal incidence" +
    " averaged over the visible spectrum range of solar radiation. Assumed to be the " +
    "same for both sides of the screen.")]
[JsonProperty("screen_beam_diffuse_visible_transmittance")]
public System.Nullable<float> ScreenBeamDiffuseVisibleTransmittance { get; set; } = null;
        

[Description("Beam-diffuse visible reflectance of the screen material at normal incidence avera" +
    "ged over the visible spectrum range of solar radiation. Assumed to be the same f" +
    "or both sides of the screen.")]
[JsonProperty("screen_beam_diffuse_visible_reflectance")]
public System.Nullable<float> ScreenBeamDiffuseVisibleReflectance { get; set; } = null;
        

[Description("The long-wave hemispherical transmittance of the screen material. Assumed to be t" +
    "he same for both sides of the screen.")]
[JsonProperty("screen_infrared_transmittance")]
public System.Nullable<float> ScreenInfraredTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("0.02", CultureInfo.InvariantCulture);
        

[Description("The long-wave hemispherical emissivity of the screen material. Assumed to be the " +
    "same for both sides of the screen.")]
[JsonProperty("screen_infrared_emissivity")]
public System.Nullable<float> ScreenInfraredEmissivity { get; set; } = (System.Nullable<float>)Single.Parse("0.93", CultureInfo.InvariantCulture);
        

[Description("Spacing assumed to be the same in both directions.")]
[JsonProperty("screen_wire_spacing")]
public System.Nullable<float> ScreenWireSpacing { get; set; } = (System.Nullable<float>)Single.Parse("0.025", CultureInfo.InvariantCulture);
        

[Description("Diameter assumed to be the same in both directions.")]
[JsonProperty("screen_wire_diameter")]
public System.Nullable<float> ScreenWireDiameter { get; set; } = (System.Nullable<float>)Single.Parse("0.005", CultureInfo.InvariantCulture);
    }
    
    [Description("Glass material properties for Windows or Glass Doors Transmittance/Reflectance in" +
        "put method.")]
    [JsonObject("WindowMaterial:Glazing:EquivalentLayer")]
    public class WindowMaterial_Glazing_EquivalentLayer : BHoMObject, IEnergyPlusClass
    {
        

[Description("Spectral is not currently supported and SpectralAverage is the default.")]
[JsonProperty("optical_data_type")]
public WindowMaterial_Glazing_EquivalentLayer_OpticalDataType OpticalDataType { get; set; } = (WindowMaterial_Glazing_EquivalentLayer_OpticalDataType)Enum.Parse(typeof(WindowMaterial_Glazing_EquivalentLayer_OpticalDataType), "SpectralAverage");
        

[Description("Spectral data is not currently supported. Used only when Optical Data Type = Spec" +
    "tral")]
[JsonProperty("window_glass_spectral_data_set_name")]
public string WindowGlassSpectralDataSetName { get; set; } = "";
        

[Description("Used only when Optical Data Type = SpectralAverage")]
[JsonProperty("front_side_beam_beam_solar_transmittance")]
public System.Nullable<float> FrontSideBeamBeamSolarTransmittance { get; set; } = null;
        

[Description("Used only when Optical Data Type = SpectralAverage")]
[JsonProperty("back_side_beam_beam_solar_transmittance")]
public System.Nullable<float> BackSideBeamBeamSolarTransmittance { get; set; } = null;
        

[Description("Used only when Optical Data Type = SpectralAverage Front Side is side closest to " +
    "outdoor air")]
[JsonProperty("front_side_beam_beam_solar_reflectance")]
public System.Nullable<float> FrontSideBeamBeamSolarReflectance { get; set; } = null;
        

[Description("Used only when Optical Data Type = SpectralAverage Back Side is side closest to z" +
    "one air")]
[JsonProperty("back_side_beam_beam_solar_reflectance")]
public System.Nullable<float> BackSideBeamBeamSolarReflectance { get; set; } = null;
        

[Description("Used only when Optical Data Type = SpectralAverage")]
[JsonProperty("front_side_beam_beam_visible_solar_transmittance")]
public System.Nullable<float> FrontSideBeamBeamVisibleSolarTransmittance { get; set; } = null;
        

[Description("Used only when Optical Data Type = SpectralAverage")]
[JsonProperty("back_side_beam_beam_visible_solar_transmittance")]
public System.Nullable<float> BackSideBeamBeamVisibleSolarTransmittance { get; set; } = null;
        

[Description("Used only when Optical Data Type = SpectralAverage Front Side is side closest to " +
    "outdoor air")]
[JsonProperty("front_side_beam_beam_visible_solar_reflectance")]
public System.Nullable<float> FrontSideBeamBeamVisibleSolarReflectance { get; set; } = null;
        

[Description("Used only when Optical Data Type = SpectralAverage Back Side is side closest to z" +
    "one air")]
[JsonProperty("back_side_beam_beam_visible_solar_reflectance")]
public System.Nullable<float> BackSideBeamBeamVisibleSolarReflectance { get; set; } = null;
        

[Description("Used only when Optical Data Type = SpectralAverage")]
[JsonProperty("front_side_beam_diffuse_solar_transmittance")]
public System.Nullable<float> FrontSideBeamDiffuseSolarTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Used only when Optical Data Type = SpectralAverage")]
[JsonProperty("back_side_beam_diffuse_solar_transmittance")]
public System.Nullable<float> BackSideBeamDiffuseSolarTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Used only when Optical Data Type = SpectralAverage Front Side is side closest to " +
    "outdoor air")]
[JsonProperty("front_side_beam_diffuse_solar_reflectance")]
public System.Nullable<float> FrontSideBeamDiffuseSolarReflectance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Used only when Optical Data Type = SpectralAverage Back Side is side closest to z" +
    "one air")]
[JsonProperty("back_side_beam_diffuse_solar_reflectance")]
public System.Nullable<float> BackSideBeamDiffuseSolarReflectance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Used only when Optical Data Type = SpectralAverage")]
[JsonProperty("front_side_beam_diffuse_visible_solar_transmittance")]
public System.Nullable<float> FrontSideBeamDiffuseVisibleSolarTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Used only when Optical Data Type = SpectralAverage")]
[JsonProperty("back_side_beam_diffuse_visible_solar_transmittance")]
public System.Nullable<float> BackSideBeamDiffuseVisibleSolarTransmittance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Used only when Optical Data Type = SpectralAverage Front Side is side closest to " +
    "outdoor air")]
[JsonProperty("front_side_beam_diffuse_visible_solar_reflectance")]
public System.Nullable<float> FrontSideBeamDiffuseVisibleSolarReflectance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Used only when Optical Data Type = SpectralAverage Back Side is side closest to z" +
    "one air")]
[JsonProperty("back_side_beam_diffuse_visible_solar_reflectance")]
public System.Nullable<float> BackSideBeamDiffuseVisibleSolarReflectance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Used only when Optical Data Type = SpectralAverage If this field is autocalculate, then the diffuse-diffuse solar transmittance is automatically estimated from other inputs and used in subsequent calculations. If this field is zero or positive, then the value entered here will be used.")]
[JsonProperty("diffuse_diffuse_solar_transmittance")]
public string DiffuseDiffuseSolarTransmittance { get; set; } = (System.String)"Autocalculate";
        

[Description(@"Used only when Optical Data Type = SpectralAverage If this field is autocalculate, then the front diffuse-diffuse solar reflectance is automatically estimated from other inputs and used in subsequent calculations. If this field is zero or positive, then the value entered here will be used. Front Side is side closest to outdoor air.")]
[JsonProperty("front_side_diffuse_diffuse_solar_reflectance")]
public string FrontSideDiffuseDiffuseSolarReflectance { get; set; } = (System.String)"Autocalculate";
        

[Description(@"Used only when Optical Data Type = SpectralAverage If this field is autocalculate, then the back diffuse-diffuse solar reflectance is automatically estimated from other inputs and used in subsequent calculations. If this field is zero or positive, then the value entered here will be used. Back side is side closest to indoor air.")]
[JsonProperty("back_side_diffuse_diffuse_solar_reflectance")]
public string BackSideDiffuseDiffuseSolarReflectance { get; set; } = (System.String)"Autocalculate";
        

[Description("Used only when Optical Data Type = SpectralAverage This input field is not used c" +
    "urrently.")]
[JsonProperty("diffuse_diffuse_visible_solar_transmittance")]
public string DiffuseDiffuseVisibleSolarTransmittance { get; set; } = (System.String)"Autocalculate";
        

[Description("Used only when Optical Data Type = SpectralAverage This input field is not used c" +
    "urrently.")]
[JsonProperty("front_side_diffuse_diffuse_visible_solar_reflectance")]
public string FrontSideDiffuseDiffuseVisibleSolarReflectance { get; set; } = (System.String)"Autocalculate";
        

[Description("Used only when Optical Data Type = SpectralAverage This input field is not used c" +
    "urrently.")]
[JsonProperty("back_side_diffuse_diffuse_visible_solar_reflectance")]
public string BackSideDiffuseDiffuseVisibleSolarReflectance { get; set; } = (System.String)"Autocalculate";
        

[Description("The long-wave hemispherical transmittance of the glazing. Assumed to be the same " +
    "for both sides of the glazing.")]
[JsonProperty("infrared_transmittance_applies_to_front_and_back_")]
public System.Nullable<float> InfraredTransmittanceAppliesToFrontAndBack { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The front side long-wave hemispherical emissivity of the glazing.")]
[JsonProperty("front_side_infrared_emissivity")]
public System.Nullable<float> FrontSideInfraredEmissivity { get; set; } = (System.Nullable<float>)Single.Parse("0.84", CultureInfo.InvariantCulture);
        

[Description("The back side long-wave hemispherical emissivity of the glazing.")]
[JsonProperty("back_side_infrared_emissivity")]
public System.Nullable<float> BackSideInfraredEmissivity { get; set; } = (System.Nullable<float>)Single.Parse("0.84", CultureInfo.InvariantCulture);
        

[Description("This is the R-Value in SI for the glass. The default value is an approximation fo" +
    "r a single layer of glass at 1/4\" inch thickness. This field is used only for mo" +
    "vable insulation defined with this material type.")]
[JsonProperty("thermal_resistance")]
public System.Nullable<float> ThermalResistance { get; set; } = (System.Nullable<float>)Single.Parse("0.158", CultureInfo.InvariantCulture);
    }
    
    public enum WindowMaterial_Glazing_EquivalentLayer_OpticalDataType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Spectral")]
        Spectral = 1,
        
        [JsonProperty("SpectralAverage")]
        SpectralAverage = 2,
    }
    
    [Description("Gas material properties that are used in Windows Equivalent Layer References only" +
        " WindowMaterial:Gas properties")]
    [JsonObject("WindowMaterial:Gap:EquivalentLayer")]
    public class WindowMaterial_Gap_EquivalentLayer : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("gas_type")]
public WindowMaterial_Gap_EquivalentLayer_GasType GasType { get; set; } = (WindowMaterial_Gap_EquivalentLayer_GasType)Enum.Parse(typeof(WindowMaterial_Gap_EquivalentLayer_GasType), "AIR");
        

[JsonProperty("thickness")]
public System.Nullable<float> Thickness { get; set; } = null;
        

[Description(@"Sealed means the gap is enclosed and gas tight, i.e., no venting to indoor or outdoor environment. VentedIndoor means the gap is vented to indoor environment, and VentedOutdoor means the gap is vented to the outdoor environment. The gap types VentedIndoor and VentedOutdoor are used with gas type ""Air"" only.")]
[JsonProperty("gap_vent_type")]
public WindowMaterial_Gap_EquivalentLayer_GapVentType GapVentType { get; set; } = (WindowMaterial_Gap_EquivalentLayer_GapVentType)Enum.Parse(typeof(WindowMaterial_Gap_EquivalentLayer_GapVentType), "Sealed");
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("conductivity_coefficient_a")]
public System.Nullable<float> ConductivityCoefficientA { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("conductivity_coefficient_b")]
public System.Nullable<float> ConductivityCoefficientB { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("conductivity_coefficient_c")]
public System.Nullable<float> ConductivityCoefficientC { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("viscosity_coefficient_a")]
public System.Nullable<float> ViscosityCoefficientA { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("viscosity_coefficient_b")]
public System.Nullable<float> ViscosityCoefficientB { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("viscosity_coefficient_c")]
public System.Nullable<float> ViscosityCoefficientC { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("specific_heat_coefficient_a")]
public System.Nullable<float> SpecificHeatCoefficientA { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("specific_heat_coefficient_b")]
public System.Nullable<float> SpecificHeatCoefficientB { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("specific_heat_coefficient_c")]
public System.Nullable<float> SpecificHeatCoefficientC { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("molecular_weight")]
public System.Nullable<float> MolecularWeight { get; set; } = null;
        

[Description("Used only if Gas Type = Custom")]
[JsonProperty("specific_heat_ratio")]
public System.Nullable<float> SpecificHeatRatio { get; set; } = null;
    }
    
    public enum WindowMaterial_Gap_EquivalentLayer_GasType
    {
        
        [JsonProperty("AIR")]
        AIR = 0,
        
        [JsonProperty("ARGON")]
        ARGON = 1,
        
        [JsonProperty("CUSTOM")]
        CUSTOM = 2,
        
        [JsonProperty("KRYPTON")]
        KRYPTON = 3,
        
        [JsonProperty("XENON")]
        XENON = 4,
    }
    
    public enum WindowMaterial_Gap_EquivalentLayer_GapVentType
    {
        
        [JsonProperty("Sealed")]
        Sealed = 0,
        
        [JsonProperty("VentedIndoor")]
        VentedIndoor = 1,
        
        [JsonProperty("VentedOutdoor")]
        VentedOutdoor = 2,
    }
    
    [Description("Additional properties for moisture using EMPD procedure HeatBalanceAlgorithm choi" +
        "ce=MoisturePenetrationDepthConductionTransferFunction only Has no effect with ot" +
        "her HeatBalanceAlgorithm solution algorithms")]
    [JsonObject("MaterialProperty:MoisturePenetrationDepth:Settings")]
    public class MaterialProperty_MoisturePenetrationDepth_Settings : BHoMObject, IEnergyPlusClass
    {
        

[Description("Ratio of water vapor permeability of stagnant air to water vapor permeability of " +
    "material")]
[JsonProperty("water_vapor_diffusion_resistance_factor")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor { get; set; } = null;
        

[JsonProperty("moisture_equation_coefficient_a")]
public System.Nullable<float> MoistureEquationCoefficientA { get; set; } = null;
        

[JsonProperty("moisture_equation_coefficient_b")]
public System.Nullable<float> MoistureEquationCoefficientB { get; set; } = null;
        

[JsonProperty("moisture_equation_coefficient_c")]
public System.Nullable<float> MoistureEquationCoefficientC { get; set; } = null;
        

[JsonProperty("moisture_equation_coefficient_d")]
public System.Nullable<float> MoistureEquationCoefficientD { get; set; } = null;
        

[JsonProperty("surface_layer_penetration_depth")]
public string SurfaceLayerPenetrationDepth { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("deep_layer_penetration_depth")]
public string DeepLayerPenetrationDepth { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("coating_layer_thickness")]
public System.Nullable<float> CoatingLayerThickness { get; set; } = null;
        

[Description("The coating\'s resistance to water vapor diffusion relative to the resistance to w" +
    "ater vapor diffusion in stagnant air (see Water Vapor Diffusion Resistance Facto" +
    "r above).")]
[JsonProperty("coating_layer_water_vapor_diffusion_resistance_factor")]
public System.Nullable<float> CoatingLayerWaterVaporDiffusionResistanceFactor { get; set; } = null;
    }
    
    [Description(@"Additional properties for temperature dependent thermal conductivity and enthalpy for Phase Change Materials (PCM) HeatBalanceAlgorithm = CondFD(ConductionFiniteDifference) solution algorithm only. Constructions with this should use the detailed CondFD process. Has no effect with other HeatBalanceAlgorithm solution algorithms")]
    [JsonObject("MaterialProperty:PhaseChange")]
    public class MaterialProperty_PhaseChange : BHoMObject, IEnergyPlusClass
    {
        

[Description("The base temperature is 20C. This is the thermal conductivity change per degree e" +
    "xcursion from 20C. This variable conductivity function is overridden by the Vari" +
    "ableThermalConductivity object, if present.")]
[JsonProperty("temperature_coefficient_for_thermal_conductivity")]
public System.Nullable<float> TemperatureCoefficientForThermalConductivity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("for Temperature-enthalpy function")]
[JsonProperty("temperature_1")]
public System.Nullable<float> Temperature1 { get; set; } = null;
        

[Description("for Temperature-enthalpy function corresponding to temperature 1")]
[JsonProperty("enthalpy_1")]
public System.Nullable<float> Enthalpy1 { get; set; } = null;
        

[Description("for Temperature-enthalpy function")]
[JsonProperty("temperature_2")]
public System.Nullable<float> Temperature2 { get; set; } = null;
        

[Description("for Temperature-enthalpy function corresponding to temperature 2")]
[JsonProperty("enthalpy_2")]
public System.Nullable<float> Enthalpy2 { get; set; } = null;
        

[Description("for Temperature-enthalpy function")]
[JsonProperty("temperature_3")]
public System.Nullable<float> Temperature3 { get; set; } = null;
        

[Description("for Temperature-enthalpy function corresponding to temperature 3")]
[JsonProperty("enthalpy_3")]
public System.Nullable<float> Enthalpy3 { get; set; } = null;
        

[Description("for Temperature-enthalpy function")]
[JsonProperty("temperature_4")]
public System.Nullable<float> Temperature4 { get; set; } = null;
        

[Description("for Temperature-enthalpy function corresponding to temperature 4")]
[JsonProperty("enthalpy_4")]
public System.Nullable<float> Enthalpy4 { get; set; } = null;
        

[Description("for Temperature-enthalpy function")]
[JsonProperty("temperature_5")]
public System.Nullable<float> Temperature5 { get; set; } = null;
        

[Description("for Temperature-enthalpy function corresponding to temperature 5")]
[JsonProperty("enthalpy_5")]
public System.Nullable<float> Enthalpy5 { get; set; } = null;
        

[Description("for Temperature-enthalpy function")]
[JsonProperty("temperature_6")]
public System.Nullable<float> Temperature6 { get; set; } = null;
        

[Description("for Temperature-enthalpy function corresponding to temperature 6")]
[JsonProperty("enthalpy_6")]
public System.Nullable<float> Enthalpy6 { get; set; } = null;
        

[Description("for Temperature-enthalpy function")]
[JsonProperty("temperature_7")]
public System.Nullable<float> Temperature7 { get; set; } = null;
        

[Description("for Temperature-enthalpy function corresponding to temperature 7")]
[JsonProperty("enthalpy_7")]
public System.Nullable<float> Enthalpy7 { get; set; } = null;
        

[Description("for Temperature-enthalpy function")]
[JsonProperty("temperature_8")]
public System.Nullable<float> Temperature8 { get; set; } = null;
        

[Description("for Temperature-enthalpy function corresponding to temperature 8")]
[JsonProperty("enthalpy_8")]
public System.Nullable<float> Enthalpy8 { get; set; } = null;
        

[Description("for Temperature-enthalpy function")]
[JsonProperty("temperature_9")]
public System.Nullable<float> Temperature9 { get; set; } = null;
        

[Description("for Temperature-enthalpy function corresponding to temperature 1")]
[JsonProperty("enthalpy_9")]
public System.Nullable<float> Enthalpy9 { get; set; } = null;
        

[Description("for Temperature-enthalpy function")]
[JsonProperty("temperature_10")]
public System.Nullable<float> Temperature10 { get; set; } = null;
        

[Description("for Temperature-enthalpy function corresponding to temperature 2")]
[JsonProperty("enthalpy_10")]
public System.Nullable<float> Enthalpy10 { get; set; } = null;
        

[Description("for Temperature-enthalpy function")]
[JsonProperty("temperature_11")]
public System.Nullable<float> Temperature11 { get; set; } = null;
        

[Description("for Temperature-enthalpy function corresponding to temperature 3")]
[JsonProperty("enthalpy_11")]
public System.Nullable<float> Enthalpy11 { get; set; } = null;
        

[Description("for Temperature-enthalpy function")]
[JsonProperty("temperature_12")]
public System.Nullable<float> Temperature12 { get; set; } = null;
        

[Description("for Temperature-enthalpy function corresponding to temperature 14")]
[JsonProperty("enthalpy_12")]
public System.Nullable<float> Enthalpy12 { get; set; } = null;
        

[Description("for Temperature-enthalpy function")]
[JsonProperty("temperature_13")]
public System.Nullable<float> Temperature13 { get; set; } = null;
        

[Description("for Temperature-enthalpy function corresponding to temperature 15")]
[JsonProperty("enthalpy_13")]
public System.Nullable<float> Enthalpy13 { get; set; } = null;
        

[Description("for Temperature-enthalpy function")]
[JsonProperty("temperature_14")]
public System.Nullable<float> Temperature14 { get; set; } = null;
        

[Description("for Temperature-enthalpy function corresponding to temperature 16")]
[JsonProperty("enthalpy_14")]
public System.Nullable<float> Enthalpy14 { get; set; } = null;
        

[Description("for Temperature-enthalpy function")]
[JsonProperty("temperature_15")]
public System.Nullable<float> Temperature15 { get; set; } = null;
        

[Description("for Temperature-enthalpy function corresponding to temperature 17")]
[JsonProperty("enthalpy_15")]
public System.Nullable<float> Enthalpy15 { get; set; } = null;
        

[Description("for Temperature-enthalpy function")]
[JsonProperty("temperature_16")]
public System.Nullable<float> Temperature16 { get; set; } = null;
        

[Description("for Temperature-enthalpy function corresponding to temperature 16")]
[JsonProperty("enthalpy_16")]
public System.Nullable<float> Enthalpy16 { get; set; } = null;
    }
    
    [Description(@"Additional properties for temperature dependent thermal conductivity and enthalpy for Phase Change Materials (PCM) with separate melting and freezing curves. HeatBalanceAlgorithm = CondFD (ConductionFiniteDifference) solution algorithm only. Constructions with this should use the detailed CondFD process. Has no effect with other HeatBalanceAlgorithm solution algorithms.")]
    [JsonObject("MaterialProperty:PhaseChangeHysteresis")]
    public class MaterialProperty_PhaseChangeHysteresis : BHoMObject, IEnergyPlusClass
    {
        

[Description("The total latent heat absorbed or rejected during the transition from solid to li" +
    "quid, or back")]
[JsonProperty("latent_heat_during_the_entire_phase_change_process")]
public System.Nullable<float> LatentHeatDuringTheEntirePhaseChangeProcess { get; set; } = null;
        

[Description("The thermal conductivity used by this material when the material is fully liquid")]
[JsonProperty("liquid_state_thermal_conductivity")]
public System.Nullable<float> LiquidStateThermalConductivity { get; set; } = null;
        

[Description("The density used by this material when the material is fully liquid")]
[JsonProperty("liquid_state_density")]
public System.Nullable<float> LiquidStateDensity { get; set; } = null;
        

[Description("The constant specific heat used for the fully melted (liquid) state")]
[JsonProperty("liquid_state_specific_heat")]
public System.Nullable<float> LiquidStateSpecificHeat { get; set; } = null;
        

[Description("The total melting range of the material is the sum of low and high temperature di" +
    "fference of melting curve.")]
[JsonProperty("high_temperature_difference_of_melting_curve")]
public System.Nullable<float> HighTemperatureDifferenceOfMeltingCurve { get; set; } = null;
        

[Description("The temperature at which the melting curve peaks")]
[JsonProperty("peak_melting_temperature")]
public System.Nullable<float> PeakMeltingTemperature { get; set; } = null;
        

[Description("The total melting range of the material is the sum of low and high temperature di" +
    "fference of melting curve.")]
[JsonProperty("low_temperature_difference_of_melting_curve")]
public System.Nullable<float> LowTemperatureDifferenceOfMeltingCurve { get; set; } = null;
        

[Description("The thermal conductivity used by this material when the material is fully solid")]
[JsonProperty("solid_state_thermal_conductivity")]
public System.Nullable<float> SolidStateThermalConductivity { get; set; } = null;
        

[Description("The density used by this material when the material is fully solid")]
[JsonProperty("solid_state_density")]
public System.Nullable<float> SolidStateDensity { get; set; } = null;
        

[Description("The constant specific heat used for the fully frozen (crystallized) state")]
[JsonProperty("solid_state_specific_heat")]
public System.Nullable<float> SolidStateSpecificHeat { get; set; } = null;
        

[Description("The total freezing range of the material is the sum of low and high temperature d" +
    "ifference of freezing curve.")]
[JsonProperty("high_temperature_difference_of_freezing_curve")]
public System.Nullable<float> HighTemperatureDifferenceOfFreezingCurve { get; set; } = null;
        

[Description("The temperature at which the freezing curve peaks")]
[JsonProperty("peak_freezing_temperature")]
public System.Nullable<float> PeakFreezingTemperature { get; set; } = null;
        

[Description("The total freezing range of the material is the sum of low and high temperature d" +
    "ifference of freezing curve.")]
[JsonProperty("low_temperature_difference_of_freezing_curve")]
public System.Nullable<float> LowTemperatureDifferenceOfFreezingCurve { get; set; } = null;
    }
    
    [Description(@"Additional properties for temperature dependent thermal conductivity using piecewise linear temperature-conductivity function. HeatBalanceAlgorithm = CondFD(ConductionFiniteDifference) solution algorithm only. Has no effect with other HeatBalanceAlgorithm solution algorithms")]
    [JsonObject("MaterialProperty:VariableThermalConductivity")]
    public class MaterialProperty_VariableThermalConductivity : BHoMObject, IEnergyPlusClass
    {
        

[Description("for Temperature-Thermal Conductivity function")]
[JsonProperty("temperature_1")]
public System.Nullable<float> Temperature1 { get; set; } = null;
        

[Description("for Temperature-Thermal Conductivity function corresponding to temperature 1")]
[JsonProperty("thermal_conductivity_1")]
public System.Nullable<float> ThermalConductivity1 { get; set; } = null;
        

[Description("for Temperature-Thermal Conductivity function")]
[JsonProperty("temperature_2")]
public System.Nullable<float> Temperature2 { get; set; } = null;
        

[Description("for Temperature-Thermal Conductivity function corresponding to temperature 2")]
[JsonProperty("thermal_conductivity_2")]
public System.Nullable<float> ThermalConductivity2 { get; set; } = null;
        

[Description("for Temperature-Thermal Conductivity function")]
[JsonProperty("temperature_3")]
public System.Nullable<float> Temperature3 { get; set; } = null;
        

[Description("for Temperature-Thermal Conductivity function corresponding to temperature 3")]
[JsonProperty("thermal_conductivity_3")]
public System.Nullable<float> ThermalConductivity3 { get; set; } = null;
        

[Description("for Temperature-Thermal Conductivity function")]
[JsonProperty("temperature_4")]
public System.Nullable<float> Temperature4 { get; set; } = null;
        

[Description("for Temperature-Thermal Conductivity function corresponding to temperature 4")]
[JsonProperty("thermal_conductivity_4")]
public System.Nullable<float> ThermalConductivity4 { get; set; } = null;
        

[Description("for Temperature-Thermal Conductivity function")]
[JsonProperty("temperature_5")]
public System.Nullable<float> Temperature5 { get; set; } = null;
        

[Description("for Temperature-Thermal Conductivity function corresponding to temperature 5")]
[JsonProperty("thermal_conductivity_5")]
public System.Nullable<float> ThermalConductivity5 { get; set; } = null;
        

[Description("for Temperature-Thermal Conductivity function")]
[JsonProperty("temperature_6")]
public System.Nullable<float> Temperature6 { get; set; } = null;
        

[Description("for Temperature-Thermal Conductivity function corresponding to temperature 6")]
[JsonProperty("thermal_conductivity_6")]
public System.Nullable<float> ThermalConductivity6 { get; set; } = null;
        

[Description("for Temperature-Thermal Conductivity function")]
[JsonProperty("temperature_7")]
public System.Nullable<float> Temperature7 { get; set; } = null;
        

[Description("for Temperature-Thermal Conductivity function corresponding to temperature 7")]
[JsonProperty("thermal_conductivity_7")]
public System.Nullable<float> ThermalConductivity7 { get; set; } = null;
        

[Description("for Temperature-Thermal Conductivity function")]
[JsonProperty("temperature_8")]
public System.Nullable<float> Temperature8 { get; set; } = null;
        

[Description("for Temperature-Thermal Conductivity function corresponding to temperature 8")]
[JsonProperty("thermal_conductivity_8")]
public System.Nullable<float> ThermalConductivity8 { get; set; } = null;
        

[Description("for Temperature-Thermal Conductivity function")]
[JsonProperty("temperature_9")]
public System.Nullable<float> Temperature9 { get; set; } = null;
        

[Description("for Temperature-Thermal Conductivity function corresponding to temperature 9")]
[JsonProperty("thermal_conductivity_9")]
public System.Nullable<float> ThermalConductivity9 { get; set; } = null;
        

[Description("for Temperature-Thermal Conductivity function")]
[JsonProperty("temperature_10")]
public System.Nullable<float> Temperature10 { get; set; } = null;
        

[Description("for Temperature-Thermal Conductivity function corresponding to temperature 10")]
[JsonProperty("thermal_conductivity_10")]
public System.Nullable<float> ThermalConductivity10 { get; set; } = null;
    }
    
    [Description("HeatBalanceAlgorithm = CombinedHeatAndMoistureFiniteElement solution algorithm on" +
        "ly. Additional material properties for surfaces. Has no effect with other HeatBa" +
        "lanceAlgorithm solution algorithms")]
    [JsonObject("MaterialProperty:HeatAndMoistureTransfer:Settings")]
    public class MaterialProperty_HeatAndMoistureTransfer_Settings : BHoMObject, IEnergyPlusClass
    {
        

[Description("Material Name that the moisture properties will be added to. This augments materi" +
    "al properties needed for combined heat and moisture transfer for surfaces.")]
[JsonProperty("material_name")]
public string MaterialName { get; set; } = "";
        

[JsonProperty("porosity")]
public System.Nullable<float> Porosity { get; set; } = null;
        

[Description("units are the water/material density ratio at the beginning of each run period.")]
[JsonProperty("initial_water_content_ratio")]
public System.Nullable<float> InitialWaterContentRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
    }
    
    [Description("HeatBalanceAlgorithm = CombinedHeatAndMoistureFiniteElement solution algorithm on" +
        "ly. Relationship between moisture content and relative humidity fraction. Has no" +
        " effect with other HeatBalanceAlgorithm solution algorithms")]
    [JsonObject("MaterialProperty:HeatAndMoistureTransfer:SorptionIsotherm")]
    public class MaterialProperty_HeatAndMoistureTransfer_SorptionIsotherm : BHoMObject, IEnergyPlusClass
    {
        

[Description("The Material Name that the moisture sorption isotherm will be added to.")]
[JsonProperty("material_name")]
public string MaterialName { get; set; } = "";
        

[Description("Number of data Coordinates")]
[JsonProperty("number_of_isotherm_coordinates")]
public System.Nullable<float> NumberOfIsothermCoordinates { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_1")]
public System.Nullable<float> RelativeHumidityFraction1 { get; set; } = null;
        

[JsonProperty("moisture_content_1")]
public System.Nullable<float> MoistureContent1 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_2")]
public System.Nullable<float> RelativeHumidityFraction2 { get; set; } = null;
        

[JsonProperty("moisture_content_2")]
public System.Nullable<float> MoistureContent2 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_3")]
public System.Nullable<float> RelativeHumidityFraction3 { get; set; } = null;
        

[JsonProperty("moisture_content_3")]
public System.Nullable<float> MoistureContent3 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_4")]
public System.Nullable<float> RelativeHumidityFraction4 { get; set; } = null;
        

[JsonProperty("moisture_content_4")]
public System.Nullable<float> MoistureContent4 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_5")]
public System.Nullable<float> RelativeHumidityFraction5 { get; set; } = null;
        

[JsonProperty("moisture_content_5")]
public System.Nullable<float> MoistureContent5 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_6")]
public System.Nullable<float> RelativeHumidityFraction6 { get; set; } = null;
        

[JsonProperty("moisture_content_6")]
public System.Nullable<float> MoistureContent6 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_7")]
public System.Nullable<float> RelativeHumidityFraction7 { get; set; } = null;
        

[JsonProperty("moisture_content_7")]
public System.Nullable<float> MoistureContent7 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_8")]
public System.Nullable<float> RelativeHumidityFraction8 { get; set; } = null;
        

[JsonProperty("moisture_content_8")]
public System.Nullable<float> MoistureContent8 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_9")]
public System.Nullable<float> RelativeHumidityFraction9 { get; set; } = null;
        

[JsonProperty("moisture_content_9")]
public System.Nullable<float> MoistureContent9 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_10")]
public System.Nullable<float> RelativeHumidityFraction10 { get; set; } = null;
        

[JsonProperty("moisture_content_10")]
public System.Nullable<float> MoistureContent10 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_11")]
public System.Nullable<float> RelativeHumidityFraction11 { get; set; } = null;
        

[JsonProperty("moisture_content_11")]
public System.Nullable<float> MoistureContent11 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_12")]
public System.Nullable<float> RelativeHumidityFraction12 { get; set; } = null;
        

[JsonProperty("moisture_content_12")]
public System.Nullable<float> MoistureContent12 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_13")]
public System.Nullable<float> RelativeHumidityFraction13 { get; set; } = null;
        

[JsonProperty("moisture_content_13")]
public System.Nullable<float> MoistureContent13 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_14")]
public System.Nullable<float> RelativeHumidityFraction14 { get; set; } = null;
        

[JsonProperty("moisture_content_14")]
public System.Nullable<float> MoistureContent14 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_15")]
public System.Nullable<float> RelativeHumidityFraction15 { get; set; } = null;
        

[JsonProperty("moisture_content_15")]
public System.Nullable<float> MoistureContent15 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_16")]
public System.Nullable<float> RelativeHumidityFraction16 { get; set; } = null;
        

[JsonProperty("moisture_content_16")]
public System.Nullable<float> MoistureContent16 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_17")]
public System.Nullable<float> RelativeHumidityFraction17 { get; set; } = null;
        

[JsonProperty("moisture_content_17")]
public System.Nullable<float> MoistureContent17 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_18")]
public System.Nullable<float> RelativeHumidityFraction18 { get; set; } = null;
        

[JsonProperty("moisture_content_18")]
public System.Nullable<float> MoistureContent18 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_19")]
public System.Nullable<float> RelativeHumidityFraction19 { get; set; } = null;
        

[JsonProperty("moisture_content_19")]
public System.Nullable<float> MoistureContent19 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_20")]
public System.Nullable<float> RelativeHumidityFraction20 { get; set; } = null;
        

[JsonProperty("moisture_content_20")]
public System.Nullable<float> MoistureContent20 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_21")]
public System.Nullable<float> RelativeHumidityFraction21 { get; set; } = null;
        

[JsonProperty("moisture_content_21")]
public System.Nullable<float> MoistureContent21 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_22")]
public System.Nullable<float> RelativeHumidityFraction22 { get; set; } = null;
        

[JsonProperty("moisture_content_22")]
public System.Nullable<float> MoistureContent22 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_23")]
public System.Nullable<float> RelativeHumidityFraction23 { get; set; } = null;
        

[JsonProperty("moisture_content_23")]
public System.Nullable<float> MoistureContent23 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_24")]
public System.Nullable<float> RelativeHumidityFraction24 { get; set; } = null;
        

[JsonProperty("moisture_content_24")]
public System.Nullable<float> MoistureContent24 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_25")]
public System.Nullable<float> RelativeHumidityFraction25 { get; set; } = null;
        

[JsonProperty("moisture_content_25")]
public System.Nullable<float> MoistureContent25 { get; set; } = null;
    }
    
    [Description("HeatBalanceAlgorithm = CombinedHeatAndMoistureFiniteElement solution algorithm on" +
        "ly. Relationship between liquid suction transport coefficient and moisture conte" +
        "nt Has no effect with other HeatBalanceAlgorithm solution algorithms")]
    [JsonObject("MaterialProperty:HeatAndMoistureTransfer:Suction")]
    public class MaterialProperty_HeatAndMoistureTransfer_Suction : BHoMObject, IEnergyPlusClass
    {
        

[Description("Material Name that the moisture properties will be added to.")]
[JsonProperty("material_name")]
public string MaterialName { get; set; } = "";
        

[Description("Number of Suction Liquid Transport Coefficient coordinates")]
[JsonProperty("number_of_suction_points")]
public System.Nullable<float> NumberOfSuctionPoints { get; set; } = null;
        

[JsonProperty("moisture_content_1")]
public System.Nullable<float> MoistureContent1 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_1")]
public System.Nullable<float> LiquidTransportCoefficient1 { get; set; } = null;
        

[JsonProperty("moisture_content_2")]
public System.Nullable<float> MoistureContent2 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_2")]
public System.Nullable<float> LiquidTransportCoefficient2 { get; set; } = null;
        

[JsonProperty("moisture_content_3")]
public System.Nullable<float> MoistureContent3 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_3")]
public System.Nullable<float> LiquidTransportCoefficient3 { get; set; } = null;
        

[JsonProperty("moisture_content_4")]
public System.Nullable<float> MoistureContent4 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_4")]
public System.Nullable<float> LiquidTransportCoefficient4 { get; set; } = null;
        

[JsonProperty("moisture_content_5")]
public System.Nullable<float> MoistureContent5 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_5")]
public System.Nullable<float> LiquidTransportCoefficient5 { get; set; } = null;
        

[JsonProperty("moisture_content_6")]
public System.Nullable<float> MoistureContent6 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_6")]
public System.Nullable<float> LiquidTransportCoefficient6 { get; set; } = null;
        

[JsonProperty("moisture_content_7")]
public System.Nullable<float> MoistureContent7 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_7")]
public System.Nullable<float> LiquidTransportCoefficient7 { get; set; } = null;
        

[JsonProperty("moisture_content_8")]
public System.Nullable<float> MoistureContent8 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_8")]
public System.Nullable<float> LiquidTransportCoefficient8 { get; set; } = null;
        

[JsonProperty("moisture_content_9")]
public System.Nullable<float> MoistureContent9 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_9")]
public System.Nullable<float> LiquidTransportCoefficient9 { get; set; } = null;
        

[JsonProperty("moisture_content_10")]
public System.Nullable<float> MoistureContent10 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_10")]
public System.Nullable<float> LiquidTransportCoefficient10 { get; set; } = null;
        

[JsonProperty("moisture_content_11")]
public System.Nullable<float> MoistureContent11 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_11")]
public System.Nullable<float> LiquidTransportCoefficient11 { get; set; } = null;
        

[JsonProperty("moisture_content_12")]
public System.Nullable<float> MoistureContent12 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_12")]
public System.Nullable<float> LiquidTransportCoefficient12 { get; set; } = null;
        

[JsonProperty("moisture_content_13")]
public System.Nullable<float> MoistureContent13 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_13")]
public System.Nullable<float> LiquidTransportCoefficient13 { get; set; } = null;
        

[JsonProperty("moisture_content_14")]
public System.Nullable<float> MoistureContent14 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_14")]
public System.Nullable<float> LiquidTransportCoefficient14 { get; set; } = null;
        

[JsonProperty("moisture_content_15")]
public System.Nullable<float> MoistureContent15 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_15")]
public System.Nullable<float> LiquidTransportCoefficient15 { get; set; } = null;
        

[JsonProperty("moisture_content_16")]
public System.Nullable<float> MoistureContent16 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_16")]
public System.Nullable<float> LiquidTransportCoefficient16 { get; set; } = null;
        

[JsonProperty("moisture_content_17")]
public System.Nullable<float> MoistureContent17 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_17")]
public System.Nullable<float> LiquidTransportCoefficient17 { get; set; } = null;
        

[JsonProperty("moisture_content_18")]
public System.Nullable<float> MoistureContent18 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_18")]
public System.Nullable<float> LiquidTransportCoefficient18 { get; set; } = null;
        

[JsonProperty("moisture_content_19")]
public System.Nullable<float> MoistureContent19 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_19")]
public System.Nullable<float> LiquidTransportCoefficient19 { get; set; } = null;
        

[JsonProperty("moisture_content_20")]
public System.Nullable<float> MoistureContent20 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_20")]
public System.Nullable<float> LiquidTransportCoefficient20 { get; set; } = null;
        

[JsonProperty("moisture_content_21")]
public System.Nullable<float> MoistureContent21 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_21")]
public System.Nullable<float> LiquidTransportCoefficient21 { get; set; } = null;
        

[JsonProperty("moisture_content_22")]
public System.Nullable<float> MoistureContent22 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_22")]
public System.Nullable<float> LiquidTransportCoefficient22 { get; set; } = null;
        

[JsonProperty("moisture_content_23")]
public System.Nullable<float> MoistureContent23 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_23")]
public System.Nullable<float> LiquidTransportCoefficient23 { get; set; } = null;
        

[JsonProperty("moisture_content_24")]
public System.Nullable<float> MoistureContent24 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_24")]
public System.Nullable<float> LiquidTransportCoefficient24 { get; set; } = null;
        

[JsonProperty("moisture_content_25")]
public System.Nullable<float> MoistureContent25 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_25")]
public System.Nullable<float> LiquidTransportCoefficient25 { get; set; } = null;
    }
    
    [Description("HeatBalanceAlgorithm = CombinedHeatAndMoistureFiniteElement solution algorithm on" +
        "ly. Relationship between liquid transport coefficient and moisture content Has n" +
        "o effect with other HeatBalanceAlgorithm solution algorithms")]
    [JsonObject("MaterialProperty:HeatAndMoistureTransfer:Redistribution")]
    public class MaterialProperty_HeatAndMoistureTransfer_Redistribution : BHoMObject, IEnergyPlusClass
    {
        

[Description("Moisture Material Name that the moisture properties will be added to.")]
[JsonProperty("material_name")]
public string MaterialName { get; set; } = "";
        

[Description("number of data points")]
[JsonProperty("number_of_redistribution_points")]
public System.Nullable<float> NumberOfRedistributionPoints { get; set; } = null;
        

[JsonProperty("moisture_content_1")]
public System.Nullable<float> MoistureContent1 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_1")]
public System.Nullable<float> LiquidTransportCoefficient1 { get; set; } = null;
        

[JsonProperty("moisture_content_2")]
public System.Nullable<float> MoistureContent2 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_2")]
public System.Nullable<float> LiquidTransportCoefficient2 { get; set; } = null;
        

[JsonProperty("moisture_content_3")]
public System.Nullable<float> MoistureContent3 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_3")]
public System.Nullable<float> LiquidTransportCoefficient3 { get; set; } = null;
        

[JsonProperty("moisture_content_4")]
public System.Nullable<float> MoistureContent4 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_4")]
public System.Nullable<float> LiquidTransportCoefficient4 { get; set; } = null;
        

[JsonProperty("moisture_content_5")]
public System.Nullable<float> MoistureContent5 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_5")]
public System.Nullable<float> LiquidTransportCoefficient5 { get; set; } = null;
        

[JsonProperty("moisture_content_6")]
public System.Nullable<float> MoistureContent6 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_6")]
public System.Nullable<float> LiquidTransportCoefficient6 { get; set; } = null;
        

[JsonProperty("moisture_content_7")]
public System.Nullable<float> MoistureContent7 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_7")]
public System.Nullable<float> LiquidTransportCoefficient7 { get; set; } = null;
        

[JsonProperty("moisture_content_8")]
public System.Nullable<float> MoistureContent8 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_8")]
public System.Nullable<float> LiquidTransportCoefficient8 { get; set; } = null;
        

[JsonProperty("moisture_content_9")]
public System.Nullable<float> MoistureContent9 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_9")]
public System.Nullable<float> LiquidTransportCoefficient9 { get; set; } = null;
        

[JsonProperty("moisture_content_10")]
public System.Nullable<float> MoistureContent10 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_10")]
public System.Nullable<float> LiquidTransportCoefficient10 { get; set; } = null;
        

[JsonProperty("moisture_content_11")]
public System.Nullable<float> MoistureContent11 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_11")]
public System.Nullable<float> LiquidTransportCoefficient11 { get; set; } = null;
        

[JsonProperty("moisture_content_12")]
public System.Nullable<float> MoistureContent12 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_12")]
public System.Nullable<float> LiquidTransportCoefficient12 { get; set; } = null;
        

[JsonProperty("moisture_content_13")]
public System.Nullable<float> MoistureContent13 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_13")]
public System.Nullable<float> LiquidTransportCoefficient13 { get; set; } = null;
        

[JsonProperty("moisture_content_14")]
public System.Nullable<float> MoistureContent14 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_14")]
public System.Nullable<float> LiquidTransportCoefficient14 { get; set; } = null;
        

[JsonProperty("moisture_content_15")]
public System.Nullable<float> MoistureContent15 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_15")]
public System.Nullable<float> LiquidTransportCoefficient15 { get; set; } = null;
        

[JsonProperty("moisture_content_16")]
public System.Nullable<float> MoistureContent16 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_16")]
public System.Nullable<float> LiquidTransportCoefficient16 { get; set; } = null;
        

[JsonProperty("moisture_content_17")]
public System.Nullable<float> MoistureContent17 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_17")]
public System.Nullable<float> LiquidTransportCoefficient17 { get; set; } = null;
        

[JsonProperty("moisture_content_18")]
public System.Nullable<float> MoistureContent18 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_18")]
public System.Nullable<float> LiquidTransportCoefficient18 { get; set; } = null;
        

[JsonProperty("moisture_content_19")]
public System.Nullable<float> MoistureContent19 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_19")]
public System.Nullable<float> LiquidTransportCoefficient19 { get; set; } = null;
        

[JsonProperty("moisture_content_20")]
public System.Nullable<float> MoistureContent20 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_20")]
public System.Nullable<float> LiquidTransportCoefficient20 { get; set; } = null;
        

[JsonProperty("moisture_content_21")]
public System.Nullable<float> MoistureContent21 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_21")]
public System.Nullable<float> LiquidTransportCoefficient21 { get; set; } = null;
        

[JsonProperty("moisture_content_22")]
public System.Nullable<float> MoistureContent22 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_22")]
public System.Nullable<float> LiquidTransportCoefficient22 { get; set; } = null;
        

[JsonProperty("moisture_content_23")]
public System.Nullable<float> MoistureContent23 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_23")]
public System.Nullable<float> LiquidTransportCoefficient23 { get; set; } = null;
        

[JsonProperty("moisture_content_24")]
public System.Nullable<float> MoistureContent24 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_24")]
public System.Nullable<float> LiquidTransportCoefficient24 { get; set; } = null;
        

[JsonProperty("moisture_content_25")]
public System.Nullable<float> MoistureContent25 { get; set; } = null;
        

[JsonProperty("liquid_transport_coefficient_25")]
public System.Nullable<float> LiquidTransportCoefficient25 { get; set; } = null;
    }
    
    [Description("HeatBalanceAlgorithm = CombinedHeatAndMoistureFiniteElement solution algorithm on" +
        "ly. Relationship between water vapor diffusion and relative humidity fraction Ha" +
        "s no effect with other HeatBalanceAlgorithm solution algorithms")]
    [JsonObject("MaterialProperty:HeatAndMoistureTransfer:Diffusion")]
    public class MaterialProperty_HeatAndMoistureTransfer_Diffusion : BHoMObject, IEnergyPlusClass
    {
        

[Description("Moisture Material Name that the moisture properties will be added to.")]
[JsonProperty("material_name")]
public string MaterialName { get; set; } = "";
        

[Description("Water Vapor Diffusion Resistance Factor")]
[JsonProperty("number_of_data_pairs")]
public System.Nullable<float> NumberOfDataPairs { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_1")]
public System.Nullable<float> RelativeHumidityFraction1 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_1")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor1 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_2")]
public System.Nullable<float> RelativeHumidityFraction2 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_2")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor2 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_3")]
public System.Nullable<float> RelativeHumidityFraction3 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_3")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor3 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_4")]
public System.Nullable<float> RelativeHumidityFraction4 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_4")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor4 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_5")]
public System.Nullable<float> RelativeHumidityFraction5 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_5")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor5 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_6")]
public System.Nullable<float> RelativeHumidityFraction6 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_6")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor6 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_7")]
public System.Nullable<float> RelativeHumidityFraction7 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_7")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor7 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_8")]
public System.Nullable<float> RelativeHumidityFraction8 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_8")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor8 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_9")]
public System.Nullable<float> RelativeHumidityFraction9 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_9")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor9 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_10")]
public System.Nullable<float> RelativeHumidityFraction10 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_10")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor10 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_11")]
public System.Nullable<float> RelativeHumidityFraction11 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_11")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor11 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_12")]
public System.Nullable<float> RelativeHumidityFraction12 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_12")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor12 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_13")]
public System.Nullable<float> RelativeHumidityFraction13 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_13")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor13 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_14")]
public System.Nullable<float> RelativeHumidityFraction14 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_14")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor14 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_15")]
public System.Nullable<float> RelativeHumidityFraction15 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_15")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor15 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_16")]
public System.Nullable<float> RelativeHumidityFraction16 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_16")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor16 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_17")]
public System.Nullable<float> RelativeHumidityFraction17 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_17")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor17 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_18")]
public System.Nullable<float> RelativeHumidityFraction18 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_18")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor18 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_19")]
public System.Nullable<float> RelativeHumidityFraction19 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_19")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor19 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_20")]
public System.Nullable<float> RelativeHumidityFraction20 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_20")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor20 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_21")]
public System.Nullable<float> RelativeHumidityFraction21 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_21")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor21 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_22")]
public System.Nullable<float> RelativeHumidityFraction22 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_22")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor22 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_23")]
public System.Nullable<float> RelativeHumidityFraction23 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_23")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor23 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_24")]
public System.Nullable<float> RelativeHumidityFraction24 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_24")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor24 { get; set; } = null;
        

[Description("The relative humidity is entered as a fraction.")]
[JsonProperty("relative_humidity_fraction_25")]
public System.Nullable<float> RelativeHumidityFraction25 { get; set; } = null;
        

[JsonProperty("water_vapor_diffusion_resistance_factor_25")]
public System.Nullable<float> WaterVaporDiffusionResistanceFactor25 { get; set; } = null;
    }
    
    [Description("HeatBalanceAlgorithm = CombinedHeatAndMoistureFiniteElement solution algorithm on" +
        "ly. Relationship between thermal conductivity and moisture content Has no effect" +
        " with other HeatBalanceAlgorithm solution algorithms")]
    [JsonObject("MaterialProperty:HeatAndMoistureTransfer:ThermalConductivity")]
    public class MaterialProperty_HeatAndMoistureTransfer_ThermalConductivity : BHoMObject, IEnergyPlusClass
    {
        

[Description("Moisture Material Name that the Thermal Conductivity will be added to.")]
[JsonProperty("material_name")]
public string MaterialName { get; set; } = "";
        

[Description("number of data coordinates")]
[JsonProperty("number_of_thermal_coordinates")]
public System.Nullable<float> NumberOfThermalCoordinates { get; set; } = null;
        

[JsonProperty("moisture_content_1")]
public System.Nullable<float> MoistureContent1 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_1")]
public System.Nullable<float> ThermalConductivity1 { get; set; } = null;
        

[JsonProperty("moisture_content_2")]
public System.Nullable<float> MoistureContent2 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_2")]
public System.Nullable<float> ThermalConductivity2 { get; set; } = null;
        

[JsonProperty("moisture_content_3")]
public System.Nullable<float> MoistureContent3 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_3")]
public System.Nullable<float> ThermalConductivity3 { get; set; } = null;
        

[JsonProperty("moisture_content_4")]
public System.Nullable<float> MoistureContent4 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_4")]
public System.Nullable<float> ThermalConductivity4 { get; set; } = null;
        

[JsonProperty("moisture_content_5")]
public System.Nullable<float> MoistureContent5 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_5")]
public System.Nullable<float> ThermalConductivity5 { get; set; } = null;
        

[JsonProperty("moisture_content_6")]
public System.Nullable<float> MoistureContent6 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_6")]
public System.Nullable<float> ThermalConductivity6 { get; set; } = null;
        

[JsonProperty("moisture_content_7")]
public System.Nullable<float> MoistureContent7 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_7")]
public System.Nullable<float> ThermalConductivity7 { get; set; } = null;
        

[JsonProperty("moisture_content_8")]
public System.Nullable<float> MoistureContent8 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_8")]
public System.Nullable<float> ThermalConductivity8 { get; set; } = null;
        

[JsonProperty("moisture_content_9")]
public System.Nullable<float> MoistureContent9 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_9")]
public System.Nullable<float> ThermalConductivity9 { get; set; } = null;
        

[JsonProperty("moisture_content_10")]
public System.Nullable<float> MoistureContent10 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_10")]
public System.Nullable<float> ThermalConductivity10 { get; set; } = null;
        

[JsonProperty("moisture_content_11")]
public System.Nullable<float> MoistureContent11 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_11")]
public System.Nullable<float> ThermalConductivity11 { get; set; } = null;
        

[JsonProperty("moisture_content_12")]
public System.Nullable<float> MoistureContent12 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_12")]
public System.Nullable<float> ThermalConductivity12 { get; set; } = null;
        

[JsonProperty("moisture_content_13")]
public System.Nullable<float> MoistureContent13 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_13")]
public System.Nullable<float> ThermalConductivity13 { get; set; } = null;
        

[JsonProperty("moisture_content_14")]
public System.Nullable<float> MoistureContent14 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_14")]
public System.Nullable<float> ThermalConductivity14 { get; set; } = null;
        

[JsonProperty("moisture_content_15")]
public System.Nullable<float> MoistureContent15 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_15")]
public System.Nullable<float> ThermalConductivity15 { get; set; } = null;
        

[JsonProperty("moisture_content_16")]
public System.Nullable<float> MoistureContent16 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_16")]
public System.Nullable<float> ThermalConductivity16 { get; set; } = null;
        

[JsonProperty("moisture_content_17")]
public System.Nullable<float> MoistureContent17 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_17")]
public System.Nullable<float> ThermalConductivity17 { get; set; } = null;
        

[JsonProperty("moisture_content_18")]
public System.Nullable<float> MoistureContent18 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_18")]
public System.Nullable<float> ThermalConductivity18 { get; set; } = null;
        

[JsonProperty("moisture_content_19")]
public System.Nullable<float> MoistureContent19 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_19")]
public System.Nullable<float> ThermalConductivity19 { get; set; } = null;
        

[JsonProperty("moisture_content_20")]
public System.Nullable<float> MoistureContent20 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_20")]
public System.Nullable<float> ThermalConductivity20 { get; set; } = null;
        

[JsonProperty("moisture_content_21")]
public System.Nullable<float> MoistureContent21 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_21")]
public System.Nullable<float> ThermalConductivity21 { get; set; } = null;
        

[JsonProperty("moisture_content_22")]
public System.Nullable<float> MoistureContent22 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_22")]
public System.Nullable<float> ThermalConductivity22 { get; set; } = null;
        

[JsonProperty("moisture_content_23")]
public System.Nullable<float> MoistureContent23 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_23")]
public System.Nullable<float> ThermalConductivity23 { get; set; } = null;
        

[JsonProperty("moisture_content_24")]
public System.Nullable<float> MoistureContent24 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_24")]
public System.Nullable<float> ThermalConductivity24 { get; set; } = null;
        

[JsonProperty("moisture_content_25")]
public System.Nullable<float> MoistureContent25 { get; set; } = null;
        

[JsonProperty("thermal_conductivity_25")]
public System.Nullable<float> ThermalConductivity25 { get; set; } = null;
    }
    
    [Description("Name is followed by up to 800 sets of normal-incidence measured values of [wavele" +
        "ngth, transmittance, front reflectance, back reflectance] for wavelengths coveri" +
        "ng the solar spectrum (from about 0.25 to 2.5 microns)")]
    [JsonObject("MaterialProperty:GlazingSpectralData")]
    public class MaterialProperty_GlazingSpectralData : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("wavelength_1")]
public System.Nullable<float> Wavelength1 { get; set; } = null;
        

[JsonProperty("transmittance_1")]
public System.Nullable<float> Transmittance1 { get; set; } = null;
        

[JsonProperty("front_reflectance_1")]
public System.Nullable<float> FrontReflectance1 { get; set; } = null;
        

[JsonProperty("back_reflectance_1")]
public System.Nullable<float> BackReflectance1 { get; set; } = null;
        

[JsonProperty("wavelength_2")]
public System.Nullable<float> Wavelength2 { get; set; } = null;
        

[JsonProperty("transmittance_2")]
public System.Nullable<float> Transmittance2 { get; set; } = null;
        

[JsonProperty("front_reflectance_2")]
public System.Nullable<float> FrontReflectance2 { get; set; } = null;
        

[JsonProperty("back_reflectance_2")]
public System.Nullable<float> BackReflectance2 { get; set; } = null;
        

[JsonProperty("wavelength_3")]
public System.Nullable<float> Wavelength3 { get; set; } = null;
        

[JsonProperty("transmittance_3")]
public System.Nullable<float> Transmittance3 { get; set; } = null;
        

[JsonProperty("front_reflectance_3")]
public System.Nullable<float> FrontReflectance3 { get; set; } = null;
        

[JsonProperty("back_reflectance_3")]
public System.Nullable<float> BackReflectance3 { get; set; } = null;
        

[JsonProperty("wavelength_4")]
public System.Nullable<float> Wavelength4 { get; set; } = null;
        

[JsonProperty("transmittance_4")]
public System.Nullable<float> Transmittance4 { get; set; } = null;
        

[JsonProperty("front_reflectance_4")]
public System.Nullable<float> FrontReflectance4 { get; set; } = null;
        

[JsonProperty("back_reflectance_4")]
public System.Nullable<float> BackReflectance4 { get; set; } = null;
        

[JsonProperty("extensions")]
public string Extensions { get; set; } = "";
    }
    
    [Description("Start with outside layer and work your way to the inside layer Up to 10 layers to" +
        "tal, 8 for windows Enter the material name for each layer")]
    [JsonObject("Construction")]
    public class Construction : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("outside_layer")]
public string OutsideLayer { get; set; } = "";
        

[JsonProperty("layer_2")]
public string Layer2 { get; set; } = "";
        

[JsonProperty("layer_3")]
public string Layer3 { get; set; } = "";
        

[JsonProperty("layer_4")]
public string Layer4 { get; set; } = "";
        

[JsonProperty("layer_5")]
public string Layer5 { get; set; } = "";
        

[JsonProperty("layer_6")]
public string Layer6 { get; set; } = "";
        

[JsonProperty("layer_7")]
public string Layer7 { get; set; } = "";
        

[JsonProperty("layer_8")]
public string Layer8 { get; set; } = "";
        

[JsonProperty("layer_9")]
public string Layer9 { get; set; } = "";
        

[JsonProperty("layer_10")]
public string Layer10 { get; set; } = "";
    }
    
    [Description("Alternate method of describing underground wall constructions")]
    [JsonObject("Construction:CfactorUndergroundWall")]
    public class Construction_CfactorUndergroundWall : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter C-Factor without film coefficients or soil")]
[JsonProperty("c_factor")]
public System.Nullable<float> CFactor { get; set; } = null;
        

[Description("Enter height of the underground wall")]
[JsonProperty("height")]
public System.Nullable<float> Height { get; set; } = null;
    }
    
    [Description("Alternate method of describing slab-on-grade or underground floor constructions")]
    [JsonObject("Construction:FfactorGroundFloor")]
    public class Construction_FfactorGroundFloor : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("f_factor")]
public System.Nullable<float> FFactor { get; set; } = null;
        

[Description("Enter area of the floor")]
[JsonProperty("area")]
public System.Nullable<float> Area { get; set; } = null;
        

[Description("Enter exposed perimeter of the floor")]
[JsonProperty("perimeterexposed")]
public System.Nullable<float> Perimeterexposed { get; set; } = null;
    }
    
    [Description("Internal heat source to be attached to a construction layer")]
    [JsonObject("ConstructionProperty:InternalHeatSource")]
    public class ConstructionProperty_InternalHeatSource : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("refers to the list of materials which follows")]
[JsonProperty("thermal_source_present_after_layer_number")]
public System.Nullable<float> ThermalSourcePresentAfterLayerNumber { get; set; } = null;
        

[Description("refers to the list of materials which follows")]
[JsonProperty("temperature_calculation_requested_after_layer_number")]
public System.Nullable<float> TemperatureCalculationRequestedAfterLayerNumber { get; set; } = null;
        

[Description("1 = 1-dimensional calculation, 2 = 2-dimensional calculation")]
[JsonProperty("dimensions_for_the_ctf_calculation")]
public System.Nullable<float> DimensionsForTheCtfCalculation { get; set; } = null;
        

[Description("uniform spacing between tubes or resistance wires in direction perpendicular to m" +
    "ain intended direction of heat transfer")]
[JsonProperty("tube_spacing")]
public System.Nullable<float> TubeSpacing { get; set; } = null;
        

[Description(@"used in conjunction with field Temperature Calculation Requested After Layer Number this field is the location perpendicular to the main direction of heat transfer 0.0 means in line with the tubing, 1.0 means at the midpoint between two adjacent pipes this field is ignored for 1-D calculations")]
[JsonProperty("two_dimensional_temperature_calculation_position")]
public System.Nullable<float> TwoDimensionalTemperatureCalculationPosition { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    [Description(@"Indicates an open boundary between two zones. It may be used for base surfaces and fenestration surfaces. The two adjacent zones are grouped together for solar, daylighting and radiant exchange. When this construction type is used, the Outside Boundary Condition of the surface (or the base surface of a fenestration surface) must be either Surface or Zone. A base surface with Construction:AirBoundary cannot hold any fenestration surfaces.")]
    [JsonObject("Construction:AirBoundary")]
    public class Construction_AirBoundary : BHoMObject, IEnergyPlusClass
    {
        

[Description("This field controls how air exchange is modeled across this boundary.")]
[JsonProperty("air_exchange_method")]
public Construction_AirBoundary_AirExchangeMethod AirExchangeMethod { get; set; } = (Construction_AirBoundary_AirExchangeMethod)Enum.Parse(typeof(Construction_AirBoundary_AirExchangeMethod), "None");
        

[Description("If the Air Exchange Method is SimpleMixing then this field specifies the air chan" +
    "ges per hour using the volume of the smaller zone as the basis. If an AirflowNet" +
    "work simulation is active this field is ignored.")]
[JsonProperty("simple_mixing_air_changes_per_hour")]
public System.Nullable<float> SimpleMixingAirChangesPerHour { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[Description("If the Air Exchange Method is SimpleMixing then this field specifies the air exch" +
    "ange schedule. If this field is blank, the schedule is always 1.0. If an Airflow" +
    "Network simulation is active this field is ignored.")]
[JsonProperty("simple_mixing_schedule_name")]
public string SimpleMixingScheduleName { get; set; } = "";
    }
    
    public enum Construction_AirBoundary_AirExchangeMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("SimpleMixing")]
        SimpleMixing = 2,
    }
    
    [Description("object is used to select which thermal model should be used in tarcog simulations" +
        "")]
    [JsonObject("WindowThermalModel:Params")]
    public class WindowThermalModel_Params : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("standard")]
public WindowThermalModel_Params_Standard Standard { get; set; } = (WindowThermalModel_Params_Standard)Enum.Parse(typeof(WindowThermalModel_Params_Standard), "ISO15099");
        

[JsonProperty("thermal_model")]
public WindowThermalModel_Params_ThermalModel ThermalModel { get; set; } = (WindowThermalModel_Params_ThermalModel)Enum.Parse(typeof(WindowThermalModel_Params_ThermalModel), "ISO15099");
        

[JsonProperty("sdscalar")]
public System.Nullable<float> Sdscalar { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("deflection_model")]
public WindowThermalModel_Params_DeflectionModel DeflectionModel { get; set; } = (WindowThermalModel_Params_DeflectionModel)Enum.Parse(typeof(WindowThermalModel_Params_DeflectionModel), "NoDeflection");
        

[JsonProperty("vacuum_pressure_limit")]
public System.Nullable<float> VacuumPressureLimit { get; set; } = (System.Nullable<float>)Single.Parse("13.238", CultureInfo.InvariantCulture);
        

[Description("This is temperature in time of window fabrication")]
[JsonProperty("initial_temperature")]
public System.Nullable<float> InitialTemperature { get; set; } = (System.Nullable<float>)Single.Parse("25", CultureInfo.InvariantCulture);
        

[Description("This is pressure in time of window fabrication")]
[JsonProperty("initial_pressure")]
public System.Nullable<float> InitialPressure { get; set; } = (System.Nullable<float>)Single.Parse("101325", CultureInfo.InvariantCulture);
    }
    
    public enum WindowThermalModel_Params_Standard
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("EN673Declared")]
        EN673Declared = 1,
        
        [JsonProperty("EN673Design")]
        EN673Design = 2,
        
        [JsonProperty("ISO15099")]
        ISO15099 = 3,
    }
    
    public enum WindowThermalModel_Params_ThermalModel
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConvectiveScalarModel_NoSDThickness")]
        ConvectiveScalarModelNoSDThickness = 1,
        
        [JsonProperty("ConvectiveScalarModel_withSDThickness")]
        ConvectiveScalarModelWithSDThickness = 2,
        
        [JsonProperty("ISO15099")]
        ISO15099 = 3,
        
        [JsonProperty("ScaledCavityWidth")]
        ScaledCavityWidth = 4,
    }
    
    public enum WindowThermalModel_Params_DeflectionModel
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MeasuredDeflection")]
        MeasuredDeflection = 1,
        
        [JsonProperty("NoDeflection")]
        NoDeflection = 2,
        
        [JsonProperty("TemperatureAndPressureInput")]
        TemperatureAndPressureInput = 3,
    }
    
    [Description(@"Describes which window model will be used in calculations. Built in windows model will use algorithms that are part of EnergyPlus, while ExternalWindowsModel will use Windows-CalcEngine library to perform optical and thermal performances of windows and doors.")]
    [JsonObject("WindowsCalculationEngine")]
    public class WindowsCalculationEngine : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("windows_engine")]
public WindowsCalculationEngine_WindowsEngine WindowsEngine { get; set; } = (WindowsCalculationEngine_WindowsEngine)Enum.Parse(typeof(WindowsCalculationEngine_WindowsEngine), "BuiltInWindowsModel");
    }
    
    public enum WindowsCalculationEngine_WindowsEngine
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BuiltInWindowsModel")]
        BuiltInWindowsModel = 1,
        
        [JsonProperty("ExternalWindowsModel")]
        ExternalWindowsModel = 2,
    }
    
    [Description("Describes one state for a complex glazing system These input objects are typicall" +
        "y generated by using WINDOW software and export to IDF syntax")]
    [JsonObject("Construction:ComplexFenestrationState")]
    public class Construction_ComplexFenestrationState : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("basis_type")]
public Construction_ComplexFenestrationState_BasisType BasisType { get; set; } = (Construction_ComplexFenestrationState_BasisType)Enum.Parse(typeof(Construction_ComplexFenestrationState_BasisType), "LBNLWINDOW");
        

[JsonProperty("basis_symmetry_type")]
public Construction_ComplexFenestrationState_BasisSymmetryType BasisSymmetryType { get; set; } = (Construction_ComplexFenestrationState_BasisSymmetryType)Enum.Parse(typeof(Construction_ComplexFenestrationState_BasisSymmetryType), "None");
        

[JsonProperty("window_thermal_model")]
public string WindowThermalModel { get; set; } = "";
        

[JsonProperty("basis_matrix_name")]
public string BasisMatrixName { get; set; } = "";
        

[JsonProperty("solar_optical_complex_front_transmittance_matrix_name")]
public string SolarOpticalComplexFrontTransmittanceMatrixName { get; set; } = "";
        

[JsonProperty("solar_optical_complex_back_reflectance_matrix_name")]
public string SolarOpticalComplexBackReflectanceMatrixName { get; set; } = "";
        

[JsonProperty("visible_optical_complex_front_transmittance_matrix_name")]
public string VisibleOpticalComplexFrontTransmittanceMatrixName { get; set; } = "";
        

[JsonProperty("visible_optical_complex_back_transmittance_matrix_name")]
public string VisibleOpticalComplexBackTransmittanceMatrixName { get; set; } = "";
        

[JsonProperty("outside_layer_name")]
public string OutsideLayerName { get; set; } = "";
        

[JsonProperty("outside_layer_directional_front_absoptance_matrix_name")]
public string OutsideLayerDirectionalFrontAbsoptanceMatrixName { get; set; } = "";
        

[JsonProperty("outside_layer_directional_back_absoptance_matrix_name")]
public string OutsideLayerDirectionalBackAbsoptanceMatrixName { get; set; } = "";
        

[JsonProperty("gap_1_name")]
public string Gap1Name { get; set; } = "";
        

[Description("Reserved for future use. Leave it blank for this version")]
[JsonProperty("cfs_gap_1_directional_front_absoptance_matrix_name")]
public string CfsGap1DirectionalFrontAbsoptanceMatrixName { get; set; } = "";
        

[Description("Reserved for future use. Leave it blank for this version")]
[JsonProperty("cfs_gap_1_directional_back_absoptance_matrix_name")]
public string CfsGap1DirectionalBackAbsoptanceMatrixName { get; set; } = "";
        

[JsonProperty("layer_2_name")]
public string Layer2Name { get; set; } = "";
        

[JsonProperty("layer_2_directional_front_absoptance_matrix_name")]
public string Layer2DirectionalFrontAbsoptanceMatrixName { get; set; } = "";
        

[JsonProperty("layer_2_directional_back_absoptance_matrix_name")]
public string Layer2DirectionalBackAbsoptanceMatrixName { get; set; } = "";
        

[JsonProperty("gap_2_name")]
public string Gap2Name { get; set; } = "";
        

[Description("Reserved for future use. Leave it blank for this version")]
[JsonProperty("gap_2_directional_front_absoptance_matrix_name")]
public string Gap2DirectionalFrontAbsoptanceMatrixName { get; set; } = "";
        

[Description("Reserved for future use. Leave it blank for this version")]
[JsonProperty("gap_2_directional_back_absoptance_matrix_name")]
public string Gap2DirectionalBackAbsoptanceMatrixName { get; set; } = "";
        

[JsonProperty("layer_3_material")]
public string Layer3Material { get; set; } = "";
        

[JsonProperty("layer_3_directional_front_absoptance_matrix_name")]
public string Layer3DirectionalFrontAbsoptanceMatrixName { get; set; } = "";
        

[JsonProperty("layer_3_directional_back_absoptance_matrix_name")]
public string Layer3DirectionalBackAbsoptanceMatrixName { get; set; } = "";
        

[JsonProperty("gap_3_name")]
public string Gap3Name { get; set; } = "";
        

[Description("Reserved for future use. Leave it blank for this version")]
[JsonProperty("gap_3_directional_front_absoptance_matrix_name")]
public string Gap3DirectionalFrontAbsoptanceMatrixName { get; set; } = "";
        

[Description("Reserved for future use. Leave it blank for this version")]
[JsonProperty("gap_3_directional_back_absoptance_matrix_name")]
public string Gap3DirectionalBackAbsoptanceMatrixName { get; set; } = "";
        

[JsonProperty("layer_4_name")]
public string Layer4Name { get; set; } = "";
        

[JsonProperty("layer_4_directional_front_absoptance_matrix_name")]
public string Layer4DirectionalFrontAbsoptanceMatrixName { get; set; } = "";
        

[JsonProperty("layer_4_directional_back_absoptance_matrix_name")]
public string Layer4DirectionalBackAbsoptanceMatrixName { get; set; } = "";
        

[JsonProperty("gap_4_name")]
public string Gap4Name { get; set; } = "";
        

[Description("Reserved for future use. Leave it blank for this version")]
[JsonProperty("gap_4_directional_front_absoptance_matrix_name")]
public string Gap4DirectionalFrontAbsoptanceMatrixName { get; set; } = "";
        

[Description("Reserved for future use. Leave it blank for this version")]
[JsonProperty("gap_4_directional_back_absoptance_matrix_name")]
public string Gap4DirectionalBackAbsoptanceMatrixName { get; set; } = "";
        

[JsonProperty("layer_5_name")]
public string Layer5Name { get; set; } = "";
        

[JsonProperty("layer_5_directional_front_absoptance_matrix_name")]
public string Layer5DirectionalFrontAbsoptanceMatrixName { get; set; } = "";
        

[JsonProperty("layer_5_directional_back_absoptance_matrix_name")]
public string Layer5DirectionalBackAbsoptanceMatrixName { get; set; } = "";
    }
    
    public enum Construction_ComplexFenestrationState_BasisType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LBNLWINDOW")]
        LBNLWINDOW = 1,
        
        [JsonProperty("UserDefined")]
        UserDefined = 2,
    }
    
    public enum Construction_ComplexFenestrationState_BasisSymmetryType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Axisymmetric")]
        Axisymmetric = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    [Description("Start with outside layer and work your way to the inside Layer Up to 11 layers to" +
        "tal. Up to six solid layers and up to five gaps. Enter the material name for eac" +
        "h layer")]
    [JsonObject("Construction:WindowEquivalentLayer")]
    public class Construction_WindowEquivalentLayer : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("outside_layer")]
public string OutsideLayer { get; set; } = "";
        

[JsonProperty("layer_2")]
public string Layer2 { get; set; } = "";
        

[JsonProperty("layer_3")]
public string Layer3 { get; set; } = "";
        

[JsonProperty("layer_4")]
public string Layer4 { get; set; } = "";
        

[JsonProperty("layer_5")]
public string Layer5 { get; set; } = "";
        

[JsonProperty("layer_6")]
public string Layer6 { get; set; } = "";
        

[JsonProperty("layer_7")]
public string Layer7 { get; set; } = "";
        

[JsonProperty("layer_8")]
public string Layer8 { get; set; } = "";
        

[JsonProperty("layer_9")]
public string Layer9 { get; set; } = "";
        

[JsonProperty("layer_10")]
public string Layer10 { get; set; } = "";
        

[JsonProperty("layer_11")]
public string Layer11 { get; set; } = "";
    }
    
    [Description("Initiates search of the Window data file for a window called Name.")]
    [JsonObject("Construction:WindowDataFile")]
    public class Construction_WindowDataFile : BHoMObject, IEnergyPlusClass
    {
        

[Description("default file name is \"Window5DataFile.dat\" limit on this field is 100 characters." +
    "")]
[JsonProperty("file_name")]
public string FileName { get; set; } = "";
    }
}
namespace BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Determines the availability of a loop or system: whether it is on or off. Schedul" +
        "e overrides fan/pump schedule.")]
    [JsonObject("AvailabilityManager:Scheduled")]
    public class AvailabilityManager_Scheduled : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
    }
    
    [Description("Determines the availability of a loop or system: only controls the turn on action" +
        ". Schedule overrides fan/pump schedule.")]
    [JsonObject("AvailabilityManager:ScheduledOn")]
    public class AvailabilityManager_ScheduledOn : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
    }
    
    [Description("Determines the availability of a loop or system: only controls the turn off actio" +
        "n. Schedule overrides fan/pump schedule.")]
    [JsonObject("AvailabilityManager:ScheduledOff")]
    public class AvailabilityManager_ScheduledOff : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
    }
    
    [Description("Determines the optimal start of HVAC systems before occupancy.")]
    [JsonObject("AvailabilityManager:OptimumStart")]
    public class AvailabilityManager_OptimumStart : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("applicability_schedule_name")]
public string ApplicabilityScheduleName { get; set; } = "";
        

[JsonProperty("fan_schedule_name")]
public string FanScheduleName { get; set; } = "";
        

[JsonProperty("control_type")]
public AvailabilityManager_OptimumStart_ControlType ControlType { get; set; } = (AvailabilityManager_OptimumStart_ControlType)Enum.Parse(typeof(AvailabilityManager_OptimumStart_ControlType), "ControlZone");
        

[JsonProperty("control_zone_name")]
public string ControlZoneName { get; set; } = "";
        

[JsonProperty("zone_list_name")]
public string ZoneListName { get; set; } = "";
        

[Description("this is the maximum number of hours that a system can start before occupancy")]
[JsonProperty("maximum_value_for_optimum_start_time")]
public System.Nullable<float> MaximumValueForOptimumStartTime { get; set; } = (System.Nullable<float>)Single.Parse("6", CultureInfo.InvariantCulture);
        

[JsonProperty("control_algorithm")]
public AvailabilityManager_OptimumStart_ControlAlgorithm ControlAlgorithm { get; set; } = (AvailabilityManager_OptimumStart_ControlAlgorithm)Enum.Parse(typeof(AvailabilityManager_OptimumStart_ControlAlgorithm), "AdaptiveASHRAE");
        

[JsonProperty("constant_temperature_gradient_during_cooling")]
public System.Nullable<float> ConstantTemperatureGradientDuringCooling { get; set; } = null;
        

[JsonProperty("constant_temperature_gradient_during_heating")]
public System.Nullable<float> ConstantTemperatureGradientDuringHeating { get; set; } = null;
        

[JsonProperty("initial_temperature_gradient_during_cooling")]
public System.Nullable<float> InitialTemperatureGradientDuringCooling { get; set; } = null;
        

[JsonProperty("initial_temperature_gradient_during_heating")]
public System.Nullable<float> InitialTemperatureGradientDuringHeating { get; set; } = null;
        

[Description("this is the number of hours before occupancy for a system")]
[JsonProperty("constant_start_time")]
public System.Nullable<float> ConstantStartTime { get; set; } = null;
        

[Description("this is the number of days that their actual temperature gradients will be used i" +
    "n the AdaptiveTemperatureGradient method")]
[JsonProperty("number_of_previous_days")]
public System.Nullable<float> NumberOfPreviousDays { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
    }
    
    public enum AvailabilityManager_OptimumStart_ControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ControlZone")]
        ControlZone = 1,
        
        [JsonProperty("MaximumofZoneList")]
        MaximumofZoneList = 2,
        
        [JsonProperty("StayOff")]
        StayOff = 3,
    }
    
    public enum AvailabilityManager_OptimumStart_ControlAlgorithm
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AdaptiveASHRAE")]
        AdaptiveASHRAE = 1,
        
        [JsonProperty("AdaptiveTemperatureGradient")]
        AdaptiveTemperatureGradient = 2,
        
        [JsonProperty("ConstantStartTime")]
        ConstantStartTime = 3,
        
        [JsonProperty("ConstantTemperatureGradient")]
        ConstantTemperatureGradient = 4,
    }
    
    [Description("Determines the availability of a loop or system: whether it is on or off. Dependi" +
        "ng on zone temperatures, overrides Schedules and forces system Fans on.")]
    [JsonObject("AvailabilityManager:NightCycle")]
    public class AvailabilityManager_NightCycle : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("applicability_schedule_name")]
public string ApplicabilityScheduleName { get; set; } = "";
        

[JsonProperty("fan_schedule_name")]
public string FanScheduleName { get; set; } = "";
        

[Description("When AvailabilityManager:NightCycle is used in the zone component availability ma" +
    "nager assignment list, the key choices for Control Type would only be StayOff an" +
    "d CycleOnControlZone")]
[JsonProperty("control_type")]
public AvailabilityManager_NightCycle_ControlType ControlType { get; set; } = (AvailabilityManager_NightCycle_ControlType)Enum.Parse(typeof(AvailabilityManager_NightCycle_ControlType), "StayOff");
        

[JsonProperty("thermostat_tolerance")]
public System.Nullable<float> ThermostatTolerance { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("cycling_run_time_control_type")]
public AvailabilityManager_NightCycle_CyclingRunTimeControlType CyclingRunTimeControlType { get; set; } = (AvailabilityManager_NightCycle_CyclingRunTimeControlType)Enum.Parse(typeof(AvailabilityManager_NightCycle_CyclingRunTimeControlType), "FixedRunTime");
        

[JsonProperty("cycling_run_time")]
public System.Nullable<float> CyclingRunTime { get; set; } = (System.Nullable<float>)Single.Parse("3600", CultureInfo.InvariantCulture);
        

[Description("When AvailabilityManager:NightCycle is used in the zone component availability ma" +
    "nager assignment list, the Control Zone Name should be the name of the zone in w" +
    "hich the zone component is.")]
[JsonProperty("control_zone_or_zone_list_name")]
public string ControlZoneOrZoneListName { get; set; } = "";
        

[JsonProperty("cooling_control_zone_or_zone_list_name")]
public string CoolingControlZoneOrZoneListName { get; set; } = "";
        

[JsonProperty("heating_control_zone_or_zone_list_name")]
public string HeatingControlZoneOrZoneListName { get; set; } = "";
        

[JsonProperty("heating_zone_fans_only_zone_or_zone_list_name")]
public string HeatingZoneFansOnlyZoneOrZoneListName { get; set; } = "";
    }
    
    public enum AvailabilityManager_NightCycle_ControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CycleOnAny")]
        CycleOnAny = 1,
        
        [JsonProperty("CycleOnAnyCoolingOrHeatingZone")]
        CycleOnAnyCoolingOrHeatingZone = 2,
        
        [JsonProperty("CycleOnAnyCoolingZone")]
        CycleOnAnyCoolingZone = 3,
        
        [JsonProperty("CycleOnAnyHeatingZone")]
        CycleOnAnyHeatingZone = 4,
        
        [JsonProperty("CycleOnAnyHeatingZoneFansOnly")]
        CycleOnAnyHeatingZoneFansOnly = 5,
        
        [JsonProperty("CycleOnAnyZoneFansOnly")]
        CycleOnAnyZoneFansOnly = 6,
        
        [JsonProperty("CycleOnControlZone")]
        CycleOnControlZone = 7,
        
        [JsonProperty("StayOff")]
        StayOff = 8,
    }
    
    public enum AvailabilityManager_NightCycle_CyclingRunTimeControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("FixedRunTime")]
        FixedRunTime = 1,
        
        [JsonProperty("Thermostat")]
        Thermostat = 2,
        
        [JsonProperty("ThermostatWithMinimumRunTime")]
        ThermostatWithMinimumRunTime = 3,
    }
    
    [Description("Overrides fan/pump schedules depending on temperature difference between two node" +
        "s.")]
    [JsonObject("AvailabilityManager:DifferentialThermostat")]
    public class AvailabilityManager_DifferentialThermostat : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("hot_node_name")]
public string HotNodeName { get; set; } = "";
        

[JsonProperty("cold_node_name")]
public string ColdNodeName { get; set; } = "";
        

[JsonProperty("temperature_difference_on_limit")]
public System.Nullable<float> TemperatureDifferenceOnLimit { get; set; } = null;
        

[Description("Defaults to Temperature Difference On Limit.")]
[JsonProperty("temperature_difference_off_limit")]
public System.Nullable<float> TemperatureDifferenceOffLimit { get; set; } = null;
    }
    
    [Description("Overrides fan/pump schedules depending on temperature at sensor node.")]
    [JsonObject("AvailabilityManager:HighTemperatureTurnOff")]
    public class AvailabilityManager_HighTemperatureTurnOff : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("sensor_node_name")]
public string SensorNodeName { get; set; } = "";
        

[JsonProperty("temperature")]
public System.Nullable<float> Temperature { get; set; } = null;
    }
    
    [Description("Overrides fan/pump schedules depending on temperature at sensor node.")]
    [JsonObject("AvailabilityManager:HighTemperatureTurnOn")]
    public class AvailabilityManager_HighTemperatureTurnOn : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("sensor_node_name")]
public string SensorNodeName { get; set; } = "";
        

[JsonProperty("temperature")]
public System.Nullable<float> Temperature { get; set; } = null;
    }
    
    [Description("Overrides fan/pump schedules depending on temperature at sensor node.")]
    [JsonObject("AvailabilityManager:LowTemperatureTurnOff")]
    public class AvailabilityManager_LowTemperatureTurnOff : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("sensor_node_name")]
public string SensorNodeName { get; set; } = "";
        

[JsonProperty("temperature")]
public System.Nullable<float> Temperature { get; set; } = null;
        

[Description("If blank, defaults to always active")]
[JsonProperty("applicability_schedule_name")]
public string ApplicabilityScheduleName { get; set; } = "";
    }
    
    [Description("Overrides fan/pump schedules depending on temperature at sensor node.")]
    [JsonObject("AvailabilityManager:LowTemperatureTurnOn")]
    public class AvailabilityManager_LowTemperatureTurnOn : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("sensor_node_name")]
public string SensorNodeName { get; set; } = "";
        

[JsonProperty("temperature")]
public System.Nullable<float> Temperature { get; set; } = null;
    }
    
    [Description("depending on zone and outdoor conditions overrides fan schedule to do precooling " +
        "with outdoor air")]
    [JsonObject("AvailabilityManager:NightVentilation")]
    public class AvailabilityManager_NightVentilation : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("applicability_schedule_name")]
public string ApplicabilityScheduleName { get; set; } = "";
        

[JsonProperty("fan_schedule_name")]
public string FanScheduleName { get; set; } = "";
        

[Description("One zone temperature must be above this scheduled temperature for night ventilati" +
    "on to be enabled")]
[JsonProperty("ventilation_temperature_schedule_name")]
public string VentilationTemperatureScheduleName { get; set; } = "";
        

[Description("The outdoor air temperature minus the control zone temperature must be greater th" +
    "an the ventilation delta T")]
[JsonProperty("ventilation_temperature_difference")]
public System.Nullable<float> VentilationTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description("Night ventilation is disabled if any conditioned zone served by the system falls " +
    "below this temperature")]
[JsonProperty("ventilation_temperature_low_limit")]
public System.Nullable<float> VentilationTemperatureLowLimit { get; set; } = (System.Nullable<float>)Single.Parse("15", CultureInfo.InvariantCulture);
        

[Description("the fraction (could be > 1) of the design system Flow Rate at which night ventila" +
    "tion will be done")]
[JsonProperty("night_venting_flow_fraction")]
public System.Nullable<float> NightVentingFlowFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("When AvailabilityManager:NightVentilation is used in the zone component availabil" +
    "ity manager assignment list, the Control Zone Name should be the name of the zon" +
    "e in which the zone component is.")]
[JsonProperty("control_zone_name")]
public string ControlZoneName { get; set; } = "";
    }
    
    [Description(@"Depending on zone and outdoor conditions overrides window/door opening controls to maximize natural ventilation and turn off an HVAC system when ventilation control conditions are met. This object (zone ventilation object name) has not been instrumented to work with global Zone or Zone List names option for Ventilation:DesignFlowRate. In order to use, you must enter the single <Ventilation:DesignFlowRate> name in that field. If it is a part of a global ventilation assignment the name will be <Zone Name> <global Ventilation:DesignFlowRate> name. Currently, hybrid ventilation manager is restricted to one per zone. It can either be applied through the air loop or directly to the zone. If hybrid ventilation manager is applied to an air loop and one of the zones served by that air loop also has hybrid ventilation manager, then zone hybrid ventilation manager is disabled.")]
    [JsonObject("AvailabilityManager:HybridVentilation")]
    public class AvailabilityManager_HybridVentilation : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of an AirLoopHVAC or HVACTemplate:System:* object. If this field i" +
    "s left blank, hybrid ventilation managers will be simulated for zone equipment c" +
    "ontrol")]
[JsonProperty("hvac_air_loop_name")]
public string HvacAirLoopName { get; set; } = "";
        

[Description("the zone name should be a zone where a thermostat or humidistat is located served" +
    " by an air primary loop.")]
[JsonProperty("control_zone_name")]
public string ControlZoneName { get; set; } = "";
        

[Description(@"The Ventilation control mode contains appropriate integer control types. 0 - uncontrolled (Natural ventilation and HVAC system are controlled by themselves) 1 = Temperature control 2 = Enthalpy control 3 = Dewpoint control 4 = Outdoor ventilation air control 5 = Operative temperature control with 80% adaptive comfort acceptability limits 6 = Operative temperature control with 90% adaptive comfort acceptability limits 7 = Carbon dioxide control")]
[JsonProperty("ventilation_control_mode_schedule_name")]
public string VentilationControlModeScheduleName { get; set; } = "";
        

[Description("If Yes, ventilation is shutoff when there is rain If No, there is no rain control" +
    "")]
[JsonProperty("use_weather_file_rain_indicators")]
public EmptyNoYes UseWeatherFileRainIndicators { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
        

[Description("this is the wind speed above which ventilation is shutoff")]
[JsonProperty("maximum_wind_speed")]
public System.Nullable<float> MaximumWindSpeed { get; set; } = (System.Nullable<float>)Single.Parse("40", CultureInfo.InvariantCulture);
        

[Description("this is the outdoor temperature below which ventilation is shutoff")]
[JsonProperty("minimum_outdoor_temperature")]
public System.Nullable<float> MinimumOutdoorTemperature { get; set; } = (System.Nullable<float>)Single.Parse("-100", CultureInfo.InvariantCulture);
        

[Description("this is the outdoor temperature above which ventilation is shutoff")]
[JsonProperty("maximum_outdoor_temperature")]
public System.Nullable<float> MaximumOutdoorTemperature { get; set; } = (System.Nullable<float>)Single.Parse("100", CultureInfo.InvariantCulture);
        

[Description("this is the outdoor Enthalpy below which ventilation is shutoff")]
[JsonProperty("minimum_outdoor_enthalpy")]
public System.Nullable<float> MinimumOutdoorEnthalpy { get; set; } = null;
        

[Description("this is the outdoor Enthalpy above which ventilation is shutoff")]
[JsonProperty("maximum_outdoor_enthalpy")]
public System.Nullable<float> MaximumOutdoorEnthalpy { get; set; } = null;
        

[Description("this is the outdoor temperature below which ventilation is shutoff Applicable onl" +
    "y if Ventilation Control Mode = 3")]
[JsonProperty("minimum_outdoor_dewpoint")]
public System.Nullable<float> MinimumOutdoorDewpoint { get; set; } = (System.Nullable<float>)Single.Parse("-100", CultureInfo.InvariantCulture);
        

[Description("this is the outdoor dewpoint above which ventilation is shutoff Applicable only i" +
    "f Ventilation Control Mode = 3")]
[JsonProperty("maximum_outdoor_dewpoint")]
public System.Nullable<float> MaximumOutdoorDewpoint { get; set; } = (System.Nullable<float>)Single.Parse("100", CultureInfo.InvariantCulture);
        

[Description("Used only if Ventilation Control Mode = 4")]
[JsonProperty("minimum_outdoor_ventilation_air_schedule_name")]
public string MinimumOutdoorVentilationAirScheduleName { get; set; } = "";
        

[Description("linear curve = a + b*WS quadratic curve = a + b*WS + c*WS**2 WS = wind speed (m/s" +
    ")")]
[JsonProperty("opening_factor_function_of_wind_speed_curve_name")]
public string OpeningFactorFunctionOfWindSpeedCurveName { get; set; } = "";
        

[Description("The schedule is used to incorporate operation of AirflowNetwork large opening obj" +
    "ects and HVAC system operation.")]
[JsonProperty("airflownetwork_control_type_schedule_name")]
public string AirflownetworkControlTypeScheduleName { get; set; } = "";
        

[Description("The schedule is used to incorporate operation of simple airflow objects and HVAC " +
    "system operation. The simple airflow objects are Ventilation and Mixing only")]
[JsonProperty("simple_airflow_control_type_schedule_name")]
public string SimpleAirflowControlTypeScheduleName { get; set; } = "";
        

[Description(@"This field has not been instrumented to work with global Zone or Zone List names option for Ventilation:DesignFlowRate. In order to use, you must enter the single <Ventilation:DesignFlowRate> name in this field. If it is a part of a global ventilation assignment the name will be <Zone Name> <global Ventilation:DesignFlowRate> name. The other ZoneVentilation:* and ZoneMixing objects controlled in the same AirLoopHVAC will work in the same way as this ventilation object.")]
[JsonProperty("zoneventilation_object_name")]
public string ZoneventilationObjectName { get; set; } = "";
        

[Description("Minimum operation time when HVAC system is forced on.")]
[JsonProperty("minimum_hvac_operation_time")]
public System.Nullable<float> MinimumHvacOperationTime { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Minimum ventilation time when natural ventilation is forced on.")]
[JsonProperty("minimum_ventilation_time")]
public System.Nullable<float> MinimumVentilationTime { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    [Description(@"Defines the applicable managers used for an AirLoopHVAC or PlantLoop. The priority of availability managers is based on a set of rules and are specific to the type of loop. The output from each availability manager is an availability status flag: NoAction, ForceOff, CycleOn, or CycleOnZoneFansOnly (used only for air loops).")]
    [JsonObject("AvailabilityManagerAssignmentList")]
    public class AvailabilityManagerAssignmentList : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("managers")]
public string Managers { get; set; } = "";
    }
}
namespace BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Specifies the geometric rules used to describe the input of surface vertices and " +
        "daylighting reference points.")]
    [JsonObject("GlobalGeometryRules")]
    public class GlobalGeometryRules : BHoMObject, IEnergyPlusClass
    {
        

[Description("Specified as entry for a 4 sided surface/rectangle Surfaces are specified as view" +
    "ed from outside the surface Shading surfaces as viewed from behind. (towards wha" +
    "t they are shading)")]
[JsonProperty("starting_vertex_position")]
public GlobalGeometryRules_StartingVertexPosition StartingVertexPosition { get; set; } = (GlobalGeometryRules_StartingVertexPosition)Enum.Parse(typeof(GlobalGeometryRules_StartingVertexPosition), "LowerLeftCorner");
        

[JsonProperty("vertex_entry_direction")]
public GlobalGeometryRules_VertexEntryDirection VertexEntryDirection { get; set; } = (GlobalGeometryRules_VertexEntryDirection)Enum.Parse(typeof(GlobalGeometryRules_VertexEntryDirection), "Clockwise");
        

[Description("Relative -- coordinates are entered relative to zone origin World -- all coordina" +
    "tes entered are \"absolute\" for this facility")]
[JsonProperty("coordinate_system")]
public GlobalGeometryRules_CoordinateSystem CoordinateSystem { get; set; } = (GlobalGeometryRules_CoordinateSystem)Enum.Parse(typeof(GlobalGeometryRules_CoordinateSystem), "Relative");
        

[Description("Relative -- coordinates are entered relative to zone origin World -- all coordina" +
    "tes entered are \"absolute\" for this facility")]
[JsonProperty("daylighting_reference_point_coordinate_system")]
public GlobalGeometryRules_DaylightingReferencePointCoordinateSystem DaylightingReferencePointCoordinateSystem { get; set; } = (GlobalGeometryRules_DaylightingReferencePointCoordinateSystem)Enum.Parse(typeof(GlobalGeometryRules_DaylightingReferencePointCoordinateSystem), "Relative");
        

[Description("Relative -- Starting corner is entered relative to zone origin World -- Starting " +
    "corner is entered in \"absolute\"")]
[JsonProperty("rectangular_surface_coordinate_system")]
public GlobalGeometryRules_RectangularSurfaceCoordinateSystem RectangularSurfaceCoordinateSystem { get; set; } = (GlobalGeometryRules_RectangularSurfaceCoordinateSystem)Enum.Parse(typeof(GlobalGeometryRules_RectangularSurfaceCoordinateSystem), "Relative");
    }
    
    public enum GlobalGeometryRules_StartingVertexPosition
    {
        
        [JsonProperty("LowerLeftCorner")]
        LowerLeftCorner = 0,
        
        [JsonProperty("LowerRightCorner")]
        LowerRightCorner = 1,
        
        [JsonProperty("UpperLeftCorner")]
        UpperLeftCorner = 2,
        
        [JsonProperty("UpperRightCorner")]
        UpperRightCorner = 3,
    }
    
    public enum GlobalGeometryRules_VertexEntryDirection
    {
        
        [JsonProperty("Clockwise")]
        Clockwise = 0,
        
        [JsonProperty("Counterclockwise")]
        Counterclockwise = 1,
    }
    
    public enum GlobalGeometryRules_CoordinateSystem
    {
        
        [JsonProperty("Relative")]
        Relative = 0,
        
        [JsonProperty("World")]
        World = 1,
    }
    
    public enum GlobalGeometryRules_DaylightingReferencePointCoordinateSystem
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Relative")]
        Relative = 1,
        
        [JsonProperty("World")]
        World = 2,
    }
    
    public enum GlobalGeometryRules_RectangularSurfaceCoordinateSystem
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Relative")]
        Relative = 1,
        
        [JsonProperty("World")]
        World = 2,
    }
    
    [Description("Provides a simple method of altering the footprint geometry of a model. The inten" +
        "t is to provide a single parameter that can be used to reshape the building desc" +
        "ription contained in the rest of the input file.")]
    [JsonObject("GeometryTransform")]
    public class GeometryTransform : BHoMObject, IEnergyPlusClass
    {
        

[Description("only current allowed value is \"XY\"")]
[JsonProperty("plane_of_transform")]
public GeometryTransform_PlaneOfTransform PlaneOfTransform { get; set; } = (GeometryTransform_PlaneOfTransform)Enum.Parse(typeof(GeometryTransform_PlaneOfTransform), "XY");
        

[Description("Aspect ratio of building as described in idf")]
[JsonProperty("current_aspect_ratio")]
public System.Nullable<float> CurrentAspectRatio { get; set; } = null;
        

[Description("Aspect ratio to transform to during run")]
[JsonProperty("new_aspect_ratio")]
public System.Nullable<float> NewAspectRatio { get; set; } = null;
    }
    
    public enum GeometryTransform_PlaneOfTransform
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("XY")]
        XY = 1,
    }
    
    [Description("Defines a thermal zone of the building.")]
    [JsonObject("Zone")]
    public class Zone : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("direction_of_relative_north")]
public System.Nullable<float> DirectionOfRelativeNorth { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("x_origin")]
public System.Nullable<float> XOrigin { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("y_origin")]
public System.Nullable<float> YOrigin { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("z_origin")]
public System.Nullable<float> ZOrigin { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("type")]
public System.Nullable<float> Type { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("multiplier")]
public System.Nullable<float> Multiplier { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description(@"If this field is 0.0, negative or autocalculate, then the average height of the zone is automatically calculated and used in subsequent calculations. If this field is positive, then the number entered here will be used. Note that the Zone Ceiling Height is the distance from the Floor to the Ceiling in the Zone, not an absolute height from the ground.")]
[JsonProperty("ceiling_height")]
public string CeilingHeight { get; set; } = (System.String)"Autocalculate";
        

[Description("If this field is 0.0, negative or autocalculate, then the volume of the zone is a" +
    "utomatically calculated and used in subsequent calculations. If this field is po" +
    "sitive, then the number entered here will be used.")]
[JsonProperty("volume")]
public string Volume { get; set; } = (System.String)"Autocalculate";
        

[Description("If this field is 0.0, negative or autocalculate, then the floor area of the zone " +
    "is automatically calculated and used in subsequent calculations. If this field i" +
    "s positive, then the number entered here will be used.")]
[JsonProperty("floor_area")]
public string FloorArea { get; set; } = (System.String)"Autocalculate";
        

[Description(@"Will default to same value as SurfaceConvectionAlgorithm:Inside object setting this field overrides the default SurfaceConvectionAlgorithm:Inside for this zone Simple = constant natural convection (ASHRAE) TARP = variable natural convection based on temperature difference (ASHRAE) CeilingDiffuser = ACH based forced and mixed convection correlations for ceiling diffuser configuration with simple natural convection limit AdaptiveConvectionAlgorithm = dynamic selection of convection models based on conditions TrombeWall = variable natural convection in an enclosed rectangular cavity ASTMC1340 = mixed convection correlations specified for attic zone")]
[JsonProperty("zone_inside_convection_algorithm")]
public Zone_ZoneInsideConvectionAlgorithm ZoneInsideConvectionAlgorithm { get; set; } = (Zone_ZoneInsideConvectionAlgorithm)Enum.Parse(typeof(Zone_ZoneInsideConvectionAlgorithm), "Empty");
        

[Description(@"Will default to same value as SurfaceConvectionAlgorithm:Outside object setting this field overrides the default SurfaceConvectionAlgorithm:Outside for this zone SimpleCombined = Combined radiation and convection coefficient using simple ASHRAE model TARP = correlation from models developed by ASHRAE, Walton, and Sparrow et. al. MoWiTT = correlation from measurements by Klems and Yazdanian for smooth surfaces DOE-2 = correlation from measurements by Klems and Yazdanian for rough surfaces AdaptiveConvectionAlgorithm = dynamic selection of correlations based on conditions")]
[JsonProperty("zone_outside_convection_algorithm")]
public Zone_ZoneOutsideConvectionAlgorithm ZoneOutsideConvectionAlgorithm { get; set; } = (Zone_ZoneOutsideConvectionAlgorithm)Enum.Parse(typeof(Zone_ZoneOutsideConvectionAlgorithm), "Empty");
        

[JsonProperty("part_of_total_floor_area")]
public EmptyNoYes PartOfTotalFloorArea { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
    }
    
    public enum Zone_ZoneInsideConvectionAlgorithm
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ASTMC1340")]
        ASTMC1340 = 1,
        
        [JsonProperty("AdaptiveConvectionAlgorithm")]
        AdaptiveConvectionAlgorithm = 2,
        
        [JsonProperty("CeilingDiffuser")]
        CeilingDiffuser = 3,
        
        [JsonProperty("Simple")]
        Simple = 4,
        
        [JsonProperty("TARP")]
        TARP = 5,
        
        [JsonProperty("TrombeWall")]
        TrombeWall = 6,
    }
    
    public enum Zone_ZoneOutsideConvectionAlgorithm
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AdaptiveConvectionAlgorithm")]
        AdaptiveConvectionAlgorithm = 1,
        
        [JsonProperty("DOE-2")]
        DOE2 = 2,
        
        [JsonProperty("MoWiTT")]
        MoWiTT = 3,
        
        [JsonProperty("SimpleCombined")]
        SimpleCombined = 4,
        
        [JsonProperty("TARP")]
        TARP = 5,
    }
    
    [Description(@"Defines a list of thermal zones which can be referenced as a group. The ZoneList name may be used elsewhere in the input to apply a parameter to all zones in the list. ZoneLists can be used effectively with the following objects: People, Lights, ElectricEquipment, GasEquipment, HotWaterEquipment, ZoneInfiltration:DesignFlowRate, ZoneVentilation:DesignFlowRate, Sizing:Zone, ZoneControl:Thermostat, and others.")]
    [JsonObject("ZoneList")]
    public class ZoneList : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zones")]
public string Zones { get; set; } = "";
    }
    
    [Description("Adds a multiplier to a ZoneList. This can be used to reduce the amount of input n" +
        "ecessary for simulating repetitive structures, such as the identical floors of a" +
        " multi-story building.")]
    [JsonObject("ZoneGroup")]
    public class ZoneGroup : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_list_name")]
public string ZoneListName { get; set; } = "";
        

[JsonProperty("zone_list_multiplier")]
public System.Nullable<float> ZoneListMultiplier { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    [Description("Allows for detailed entry of building heat transfer surfaces. Does not include su" +
        "bsurfaces such as windows or doors.")]
    [JsonObject("BuildingSurface:Detailed")]
    public class BuildingSurface_Detailed : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("surface_type")]
public BuildingSurface_Detailed_SurfaceType SurfaceType { get; set; } = (BuildingSurface_Detailed_SurfaceType)Enum.Parse(typeof(BuildingSurface_Detailed_SurfaceType), "Ceiling");
        

[Description("To be matched with a construction in this input file")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Zone the surface is a part of")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("outside_boundary_condition")]
public BuildingSurface_Detailed_OutsideBoundaryCondition OutsideBoundaryCondition { get; set; } = (BuildingSurface_Detailed_OutsideBoundaryCondition)Enum.Parse(typeof(BuildingSurface_Detailed_OutsideBoundaryCondition), "Adiabatic");
        

[Description(@"Non-blank only if the field Outside Boundary Condition is Surface, Zone, OtherSideCoefficients or OtherSideConditionsModel If Surface, specify name of corresponding surface in adjacent zone or specify current surface name for internal partition separating like zones If Zone, specify the name of the corresponding zone and the program will generate the corresponding interzone surface If Foundation, specify the name of the corresponding Foundation object and the program will calculate the heat transfer appropriately If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients If OtherSideConditionsModel, specify name of SurfaceProperty:OtherSideConditionsModel")]
[JsonProperty("outside_boundary_condition_object")]
public string OutsideBoundaryConditionObject { get; set; } = "";
        

[JsonProperty("sun_exposure")]
public BuildingSurface_Detailed_SunExposure SunExposure { get; set; } = (BuildingSurface_Detailed_SunExposure)Enum.Parse(typeof(BuildingSurface_Detailed_SunExposure), "SunExposed");
        

[JsonProperty("wind_exposure")]
public BuildingSurface_Detailed_WindExposure WindExposure { get; set; } = (BuildingSurface_Detailed_WindExposure)Enum.Parse(typeof(BuildingSurface_Detailed_WindExposure), "WindExposed");
        

[Description(@"From the exterior of the surface Unused if one uses the ""reflections"" options in Solar Distribution in Building input unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified. autocalculate will automatically calculate this value from the tilt of the surface")]
[JsonProperty("view_factor_to_ground")]
public string ViewFactorToGround { get; set; } = (System.String)"Autocalculate";
        

[Description(@"shown with 120 vertex coordinates -- extensible object ""extensible"" -- duplicate last set of x,y,z coordinates (last 3 fields), remembering to remove ; from ""inner"" fields. for clarity in any error messages, renumber the fields as well. (and changing z terminator to a comma "","" for all but last one which needs a semi-colon "";"") vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates are ""relative"" to the Zone Origin. If world, then building and zone origins are used for some internal calculations, but all coordinates are given in an ""absolute"" system.")]
[JsonProperty("number_of_vertices")]
public string NumberOfVertices { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("vertices")]
public string Vertices { get; set; } = "";
    }
    
    public enum BuildingSurface_Detailed_SurfaceType
    {
        
        [JsonProperty("Ceiling")]
        Ceiling = 0,
        
        [JsonProperty("Floor")]
        Floor = 1,
        
        [JsonProperty("Roof")]
        Roof = 2,
        
        [JsonProperty("Wall")]
        Wall = 3,
    }
    
    public enum BuildingSurface_Detailed_OutsideBoundaryCondition
    {
        
        [JsonProperty("Adiabatic")]
        Adiabatic = 0,
        
        [JsonProperty("Foundation")]
        Foundation = 1,
        
        [JsonProperty("Ground")]
        Ground = 2,
        
        [JsonProperty("GroundBasementPreprocessorAverageFloor")]
        GroundBasementPreprocessorAverageFloor = 3,
        
        [JsonProperty("GroundBasementPreprocessorAverageWall")]
        GroundBasementPreprocessorAverageWall = 4,
        
        [JsonProperty("GroundBasementPreprocessorLowerWall")]
        GroundBasementPreprocessorLowerWall = 5,
        
        [JsonProperty("GroundBasementPreprocessorUpperWall")]
        GroundBasementPreprocessorUpperWall = 6,
        
        [JsonProperty("GroundFCfactorMethod")]
        GroundFCfactorMethod = 7,
        
        [JsonProperty("GroundSlabPreprocessorAverage")]
        GroundSlabPreprocessorAverage = 8,
        
        [JsonProperty("GroundSlabPreprocessorCore")]
        GroundSlabPreprocessorCore = 9,
        
        [JsonProperty("GroundSlabPreprocessorPerimeter")]
        GroundSlabPreprocessorPerimeter = 10,
        
        [JsonProperty("OtherSideCoefficients")]
        OtherSideCoefficients = 11,
        
        [JsonProperty("OtherSideConditionsModel")]
        OtherSideConditionsModel = 12,
        
        [JsonProperty("Outdoors")]
        Outdoors = 13,
        
        [JsonProperty("Surface")]
        Surface = 14,
        
        [JsonProperty("Zone")]
        Zone = 15,
    }
    
    public enum BuildingSurface_Detailed_SunExposure
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("NoSun")]
        NoSun = 1,
        
        [JsonProperty("SunExposed")]
        SunExposed = 2,
    }
    
    public enum BuildingSurface_Detailed_WindExposure
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("NoWind")]
        NoWind = 1,
        
        [JsonProperty("WindExposed")]
        WindExposed = 2,
    }
    
    [Description("Allows for detailed entry of wall heat transfer surfaces.")]
    [JsonObject("Wall:Detailed")]
    public class Wall_Detailed : BHoMObject, IEnergyPlusClass
    {
        

[Description("To be matched with a construction in this input file")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Zone the surface is a part of")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("outside_boundary_condition")]
public Wall_Detailed_OutsideBoundaryCondition OutsideBoundaryCondition { get; set; } = (Wall_Detailed_OutsideBoundaryCondition)Enum.Parse(typeof(Wall_Detailed_OutsideBoundaryCondition), "Adiabatic");
        

[Description(@"Non-blank only if the field Outside Boundary Condition is Surface, Zone, OtherSideCoefficients or OtherSideConditionsModel If Surface, specify name of corresponding surface in adjacent zone or specify current surface name for internal partition separating like zones If Zone, specify the name of the corresponding zone and the program will generate the corresponding interzone surface If Foundation, specify the name of the corresponding Foundation object and If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients If OtherSideConditionsModel, specify name of SurfaceProperty:OtherSideConditionsModel")]
[JsonProperty("outside_boundary_condition_object")]
public string OutsideBoundaryConditionObject { get; set; } = "";
        

[JsonProperty("sun_exposure")]
public Wall_Detailed_SunExposure SunExposure { get; set; } = (Wall_Detailed_SunExposure)Enum.Parse(typeof(Wall_Detailed_SunExposure), "SunExposed");
        

[JsonProperty("wind_exposure")]
public Wall_Detailed_WindExposure WindExposure { get; set; } = (Wall_Detailed_WindExposure)Enum.Parse(typeof(Wall_Detailed_WindExposure), "WindExposed");
        

[Description(@"From the exterior of the surface Unused if one uses the ""reflections"" options in Solar Distribution in Building input unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified. autocalculate will automatically calculate this value from the tilt of the surface")]
[JsonProperty("view_factor_to_ground")]
public string ViewFactorToGround { get; set; } = (System.String)"Autocalculate";
        

[Description(@"shown with 10 vertex coordinates -- extensible object ""extensible"" -- duplicate last set of x,y,z coordinates, renumbering please (and changing z terminator to a comma "","" for all but last one which needs a semi-colon "";"") vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates are ""relative"" to the Zone Origin. If world, then building and zone origins are used for some internal calculations, but all coordinates are given in an ""absolute"" system.")]
[JsonProperty("number_of_vertices")]
public string NumberOfVertices { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("vertices")]
public string Vertices { get; set; } = "";
    }
    
    public enum Wall_Detailed_OutsideBoundaryCondition
    {
        
        [JsonProperty("Adiabatic")]
        Adiabatic = 0,
        
        [JsonProperty("Foundation")]
        Foundation = 1,
        
        [JsonProperty("Ground")]
        Ground = 2,
        
        [JsonProperty("GroundBasementPreprocessorAverageFloor")]
        GroundBasementPreprocessorAverageFloor = 3,
        
        [JsonProperty("GroundBasementPreprocessorAverageWall")]
        GroundBasementPreprocessorAverageWall = 4,
        
        [JsonProperty("GroundBasementPreprocessorLowerWall")]
        GroundBasementPreprocessorLowerWall = 5,
        
        [JsonProperty("GroundBasementPreprocessorUpperWall")]
        GroundBasementPreprocessorUpperWall = 6,
        
        [JsonProperty("GroundFCfactorMethod")]
        GroundFCfactorMethod = 7,
        
        [JsonProperty("GroundSlabPreprocessorAverage")]
        GroundSlabPreprocessorAverage = 8,
        
        [JsonProperty("GroundSlabPreprocessorCore")]
        GroundSlabPreprocessorCore = 9,
        
        [JsonProperty("GroundSlabPreprocessorPerimeter")]
        GroundSlabPreprocessorPerimeter = 10,
        
        [JsonProperty("OtherSideCoefficients")]
        OtherSideCoefficients = 11,
        
        [JsonProperty("OtherSideConditionsModel")]
        OtherSideConditionsModel = 12,
        
        [JsonProperty("Outdoors")]
        Outdoors = 13,
        
        [JsonProperty("Surface")]
        Surface = 14,
        
        [JsonProperty("Zone")]
        Zone = 15,
    }
    
    public enum Wall_Detailed_SunExposure
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("NoSun")]
        NoSun = 1,
        
        [JsonProperty("SunExposed")]
        SunExposed = 2,
    }
    
    public enum Wall_Detailed_WindExposure
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("NoWind")]
        NoWind = 1,
        
        [JsonProperty("WindExposed")]
        WindExposed = 2,
    }
    
    [Description("Allows for detailed entry of roof/ceiling heat transfer surfaces.")]
    [JsonObject("RoofCeiling:Detailed")]
    public class RoofCeiling_Detailed : BHoMObject, IEnergyPlusClass
    {
        

[Description("To be matched with a construction in this input file")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Zone the surface is a part of")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("outside_boundary_condition")]
public RoofCeiling_Detailed_OutsideBoundaryCondition OutsideBoundaryCondition { get; set; } = (RoofCeiling_Detailed_OutsideBoundaryCondition)Enum.Parse(typeof(RoofCeiling_Detailed_OutsideBoundaryCondition), "Adiabatic");
        

[Description(@"Non-blank only if the field Outside Boundary Condition is Surface, Zone, OtherSideCoefficients or OtherSideConditionsModel If Surface, specify name of corresponding surface in adjacent zone or specify current surface name for internal partition separating like zones If Zone, specify the name of the corresponding zone and the program will generate the corresponding interzone surface If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients If OtherSideConditionsModel, specify name of SurfaceProperty:OtherSideConditionsModel")]
[JsonProperty("outside_boundary_condition_object")]
public string OutsideBoundaryConditionObject { get; set; } = "";
        

[JsonProperty("sun_exposure")]
public RoofCeiling_Detailed_SunExposure SunExposure { get; set; } = (RoofCeiling_Detailed_SunExposure)Enum.Parse(typeof(RoofCeiling_Detailed_SunExposure), "SunExposed");
        

[JsonProperty("wind_exposure")]
public RoofCeiling_Detailed_WindExposure WindExposure { get; set; } = (RoofCeiling_Detailed_WindExposure)Enum.Parse(typeof(RoofCeiling_Detailed_WindExposure), "WindExposed");
        

[Description(@"From the exterior of the surface Unused if one uses the ""reflections"" options in Solar Distribution in Building input unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified. autocalculate will automatically calculate this value from the tilt of the surface")]
[JsonProperty("view_factor_to_ground")]
public string ViewFactorToGround { get; set; } = (System.String)"Autocalculate";
        

[Description(@"shown with 10 vertex coordinates -- extensible object ""extensible"" -- duplicate last set of x,y,z coordinates, renumbering please (and changing z terminator to a comma "","" for all but last one which needs a semi-colon "";"") vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates are ""relative"" to the Zone Origin. If world, then building and zone origins are used for some internal calculations, but all coordinates are given in an ""absolute"" system.")]
[JsonProperty("number_of_vertices")]
public string NumberOfVertices { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("vertices")]
public string Vertices { get; set; } = "";
    }
    
    public enum RoofCeiling_Detailed_OutsideBoundaryCondition
    {
        
        [JsonProperty("Adiabatic")]
        Adiabatic = 0,
        
        [JsonProperty("Ground")]
        Ground = 1,
        
        [JsonProperty("GroundBasementPreprocessorAverageFloor")]
        GroundBasementPreprocessorAverageFloor = 2,
        
        [JsonProperty("GroundBasementPreprocessorAverageWall")]
        GroundBasementPreprocessorAverageWall = 3,
        
        [JsonProperty("GroundBasementPreprocessorLowerWall")]
        GroundBasementPreprocessorLowerWall = 4,
        
        [JsonProperty("GroundBasementPreprocessorUpperWall")]
        GroundBasementPreprocessorUpperWall = 5,
        
        [JsonProperty("GroundSlabPreprocessorAverage")]
        GroundSlabPreprocessorAverage = 6,
        
        [JsonProperty("GroundSlabPreprocessorCore")]
        GroundSlabPreprocessorCore = 7,
        
        [JsonProperty("GroundSlabPreprocessorPerimeter")]
        GroundSlabPreprocessorPerimeter = 8,
        
        [JsonProperty("OtherSideCoefficients")]
        OtherSideCoefficients = 9,
        
        [JsonProperty("OtherSideConditionsModel")]
        OtherSideConditionsModel = 10,
        
        [JsonProperty("Outdoors")]
        Outdoors = 11,
        
        [JsonProperty("Surface")]
        Surface = 12,
        
        [JsonProperty("Zone")]
        Zone = 13,
    }
    
    public enum RoofCeiling_Detailed_SunExposure
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("NoSun")]
        NoSun = 1,
        
        [JsonProperty("SunExposed")]
        SunExposed = 2,
    }
    
    public enum RoofCeiling_Detailed_WindExposure
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("NoWind")]
        NoWind = 1,
        
        [JsonProperty("WindExposed")]
        WindExposed = 2,
    }
    
    [Description("Allows for detailed entry of floor heat transfer surfaces.")]
    [JsonObject("Floor:Detailed")]
    public class Floor_Detailed : BHoMObject, IEnergyPlusClass
    {
        

[Description("To be matched with a construction in this input file")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Zone the surface is a part of")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("outside_boundary_condition")]
public Floor_Detailed_OutsideBoundaryCondition OutsideBoundaryCondition { get; set; } = (Floor_Detailed_OutsideBoundaryCondition)Enum.Parse(typeof(Floor_Detailed_OutsideBoundaryCondition), "Adiabatic");
        

[Description(@"Non-blank only if the field Outside Boundary Condition is Surface, Zone, OtherSideCoefficients or OtherSideConditionsModel If Surface, specify name of corresponding surface in adjacent zone or specify current surface name for internal partition separating like zones If Zone, specify the name of the corresponding zone and the program will generate the corresponding interzone surface If Foundation, specify the name of the corresponding Foundation object and If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients If OtherSideConditionsModel, specify name of SurfaceProperty:OtherSideConditionsModel")]
[JsonProperty("outside_boundary_condition_object")]
public string OutsideBoundaryConditionObject { get; set; } = "";
        

[JsonProperty("sun_exposure")]
public Floor_Detailed_SunExposure SunExposure { get; set; } = (Floor_Detailed_SunExposure)Enum.Parse(typeof(Floor_Detailed_SunExposure), "SunExposed");
        

[JsonProperty("wind_exposure")]
public Floor_Detailed_WindExposure WindExposure { get; set; } = (Floor_Detailed_WindExposure)Enum.Parse(typeof(Floor_Detailed_WindExposure), "WindExposed");
        

[Description(@"From the exterior of the surface Unused if one uses the ""reflections"" options in Solar Distribution in Building input unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified. autocalculate will automatically calculate this value from the tilt of the surface")]
[JsonProperty("view_factor_to_ground")]
public string ViewFactorToGround { get; set; } = (System.String)"Autocalculate";
        

[Description(@"shown with 10 vertex coordinates -- extensible object ""extensible"" -- duplicate last set of x,y,z coordinates, renumbering please (and changing z terminator to a comma "","" for all but last one which needs a semi-colon "";"") vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates are ""relative"" to the Zone Origin. If world, then building and zone origins are used for some internal calculations, but all coordinates are given in an ""absolute"" system.")]
[JsonProperty("number_of_vertices")]
public string NumberOfVertices { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("vertices")]
public string Vertices { get; set; } = "";
    }
    
    public enum Floor_Detailed_OutsideBoundaryCondition
    {
        
        [JsonProperty("Adiabatic")]
        Adiabatic = 0,
        
        [JsonProperty("Foundation")]
        Foundation = 1,
        
        [JsonProperty("Ground")]
        Ground = 2,
        
        [JsonProperty("GroundBasementPreprocessorAverageFloor")]
        GroundBasementPreprocessorAverageFloor = 3,
        
        [JsonProperty("GroundBasementPreprocessorAverageWall")]
        GroundBasementPreprocessorAverageWall = 4,
        
        [JsonProperty("GroundBasementPreprocessorLowerWall")]
        GroundBasementPreprocessorLowerWall = 5,
        
        [JsonProperty("GroundBasementPreprocessorUpperWall")]
        GroundBasementPreprocessorUpperWall = 6,
        
        [JsonProperty("GroundFCfactorMethod")]
        GroundFCfactorMethod = 7,
        
        [JsonProperty("GroundSlabPreprocessorAverage")]
        GroundSlabPreprocessorAverage = 8,
        
        [JsonProperty("GroundSlabPreprocessorCore")]
        GroundSlabPreprocessorCore = 9,
        
        [JsonProperty("GroundSlabPreprocessorPerimeter")]
        GroundSlabPreprocessorPerimeter = 10,
        
        [JsonProperty("OtherSideCoefficients")]
        OtherSideCoefficients = 11,
        
        [JsonProperty("OtherSideConditionsModel")]
        OtherSideConditionsModel = 12,
        
        [JsonProperty("Outdoors")]
        Outdoors = 13,
        
        [JsonProperty("Surface")]
        Surface = 14,
        
        [JsonProperty("Zone")]
        Zone = 15,
    }
    
    public enum Floor_Detailed_SunExposure
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("NoSun")]
        NoSun = 1,
        
        [JsonProperty("SunExposed")]
        SunExposed = 2,
    }
    
    public enum Floor_Detailed_WindExposure
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("NoWind")]
        NoWind = 1,
        
        [JsonProperty("WindExposed")]
        WindExposed = 2,
    }
    
    [Description("Allows for simplified entry of exterior walls. View Factor to Ground is automatic" +
        "ally calculated.")]
    [JsonObject("Wall:Exterior")]
    public class Wall_Exterior : BHoMObject, IEnergyPlusClass
    {
        

[Description("To be matched with a construction in this input file")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Zone the surface is a part of")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Facing direction of outside of wall (S=180,N=0,E=90,W=270)")]
[JsonProperty("azimuth_angle")]
public System.Nullable<float> AzimuthAngle { get; set; } = null;
        

[Description("Walls are usually tilted 90 degrees")]
[JsonProperty("tilt_angle")]
public System.Nullable<float> TiltAngle { get; set; } = (System.Nullable<float>)Single.Parse("90", CultureInfo.InvariantCulture);
        

[Description("Starting (x,y,z) coordinate is the Lower Left Corner of the Wall")]
[JsonProperty("starting_x_coordinate")]
public System.Nullable<float> StartingXCoordinate { get; set; } = null;
        

[JsonProperty("starting_y_coordinate")]
public System.Nullable<float> StartingYCoordinate { get; set; } = null;
        

[JsonProperty("starting_z_coordinate")]
public System.Nullable<float> StartingZCoordinate { get; set; } = null;
        

[JsonProperty("length")]
public System.Nullable<float> Length { get; set; } = null;
        

[JsonProperty("height")]
public System.Nullable<float> Height { get; set; } = null;
    }
    
    [Description("Allows for simplified entry of interior walls.")]
    [JsonObject("Wall:Adiabatic")]
    public class Wall_Adiabatic : BHoMObject, IEnergyPlusClass
    {
        

[Description("To be matched with a construction in this input file")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Zone the surface is a part of")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Facing direction of outside of wall (S=180,N=0,E=90,W=270)")]
[JsonProperty("azimuth_angle")]
public System.Nullable<float> AzimuthAngle { get; set; } = null;
        

[Description("Walls are usually tilted 90 degrees")]
[JsonProperty("tilt_angle")]
public System.Nullable<float> TiltAngle { get; set; } = (System.Nullable<float>)Single.Parse("90", CultureInfo.InvariantCulture);
        

[Description("Starting (x,y,z) coordinate is the Lower Left Corner of the Wall")]
[JsonProperty("starting_x_coordinate")]
public System.Nullable<float> StartingXCoordinate { get; set; } = null;
        

[JsonProperty("starting_y_coordinate")]
public System.Nullable<float> StartingYCoordinate { get; set; } = null;
        

[JsonProperty("starting_z_coordinate")]
public System.Nullable<float> StartingZCoordinate { get; set; } = null;
        

[JsonProperty("length")]
public System.Nullable<float> Length { get; set; } = null;
        

[JsonProperty("height")]
public System.Nullable<float> Height { get; set; } = null;
    }
    
    [Description("Allows for simplified entry of underground walls.")]
    [JsonObject("Wall:Underground")]
    public class Wall_Underground : BHoMObject, IEnergyPlusClass
    {
        

[Description("To be matched with a construction in this input file. If the construction is type" +
    " \"Construction:CfactorUndergroundWall\", then the GroundFCfactorMethod will be us" +
    "ed.")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Zone the surface is a part of")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Facing direction of outside of wall (S=180,N=0,E=90,W=270)")]
[JsonProperty("azimuth_angle")]
public System.Nullable<float> AzimuthAngle { get; set; } = null;
        

[Description("Walls are usually tilted 90 degrees")]
[JsonProperty("tilt_angle")]
public System.Nullable<float> TiltAngle { get; set; } = (System.Nullable<float>)Single.Parse("90", CultureInfo.InvariantCulture);
        

[Description("Starting (x,y,z) coordinate is the Lower Left Corner of the Wall")]
[JsonProperty("starting_x_coordinate")]
public System.Nullable<float> StartingXCoordinate { get; set; } = null;
        

[JsonProperty("starting_y_coordinate")]
public System.Nullable<float> StartingYCoordinate { get; set; } = null;
        

[JsonProperty("starting_z_coordinate")]
public System.Nullable<float> StartingZCoordinate { get; set; } = null;
        

[JsonProperty("length")]
public System.Nullable<float> Length { get; set; } = null;
        

[JsonProperty("height")]
public System.Nullable<float> Height { get; set; } = null;
    }
    
    [Description("Allows for simplified entry of interzone walls (walls between zones).")]
    [JsonObject("Wall:Interzone")]
    public class Wall_Interzone : BHoMObject, IEnergyPlusClass
    {
        

[Description("To be matched with a construction in this input file")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Zone for the inside of the surface")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Specify a surface name in an adjacent zone for known interior walls. Specify a zo" +
    "ne name of an adjacent zone to automatically generate the interior wall in the a" +
    "djacent zone.")]
[JsonProperty("outside_boundary_condition_object")]
public string OutsideBoundaryConditionObject { get; set; } = "";
        

[Description("Facing direction of outside of wall (S=180,N=0,E=90,W=270)")]
[JsonProperty("azimuth_angle")]
public System.Nullable<float> AzimuthAngle { get; set; } = null;
        

[Description("Walls are usually tilted 90 degrees")]
[JsonProperty("tilt_angle")]
public System.Nullable<float> TiltAngle { get; set; } = (System.Nullable<float>)Single.Parse("90", CultureInfo.InvariantCulture);
        

[Description("Starting (x,y,z) coordinate is the Lower Left Corner of the Wall")]
[JsonProperty("starting_x_coordinate")]
public System.Nullable<float> StartingXCoordinate { get; set; } = null;
        

[JsonProperty("starting_y_coordinate")]
public System.Nullable<float> StartingYCoordinate { get; set; } = null;
        

[JsonProperty("starting_z_coordinate")]
public System.Nullable<float> StartingZCoordinate { get; set; } = null;
        

[JsonProperty("length")]
public System.Nullable<float> Length { get; set; } = null;
        

[JsonProperty("height")]
public System.Nullable<float> Height { get; set; } = null;
    }
    
    [Description("Allows for simplified entry of roofs (exterior). View Factor to Ground is automat" +
        "ically calculated.")]
    [JsonObject("Roof")]
    public class Roof : BHoMObject, IEnergyPlusClass
    {
        

[Description("To be matched with a construction in this input file")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Zone the surface is a part of")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Facing direction of outside of Roof")]
[JsonProperty("azimuth_angle")]
public System.Nullable<float> AzimuthAngle { get; set; } = null;
        

[Description("Flat Roofs are tilted 0 degrees")]
[JsonProperty("tilt_angle")]
public System.Nullable<float> TiltAngle { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("If not Flat, Starting coordinate is the Lower Left Corner of the Roof")]
[JsonProperty("starting_x_coordinate")]
public System.Nullable<float> StartingXCoordinate { get; set; } = null;
        

[JsonProperty("starting_y_coordinate")]
public System.Nullable<float> StartingYCoordinate { get; set; } = null;
        

[JsonProperty("starting_z_coordinate")]
public System.Nullable<float> StartingZCoordinate { get; set; } = null;
        

[Description("Along X Axis")]
[JsonProperty("length")]
public System.Nullable<float> Length { get; set; } = null;
        

[Description("Along Y Axis")]
[JsonProperty("width")]
public System.Nullable<float> Width { get; set; } = null;
    }
    
    [Description("Allows for simplified entry of interior ceilings.")]
    [JsonObject("Ceiling:Adiabatic")]
    public class Ceiling_Adiabatic : BHoMObject, IEnergyPlusClass
    {
        

[Description("To be matched with a construction in this input file")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Zone the surface is a part of")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Facing direction of outside of Ceiling")]
[JsonProperty("azimuth_angle")]
public System.Nullable<float> AzimuthAngle { get; set; } = null;
        

[Description("Ceilings are usually tilted 0 degrees")]
[JsonProperty("tilt_angle")]
public System.Nullable<float> TiltAngle { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("If not Flat, Starting coordinate is the Lower Left Corner of the Ceiling")]
[JsonProperty("starting_x_coordinate")]
public System.Nullable<float> StartingXCoordinate { get; set; } = null;
        

[JsonProperty("starting_y_coordinate")]
public System.Nullable<float> StartingYCoordinate { get; set; } = null;
        

[JsonProperty("starting_z_coordinate")]
public System.Nullable<float> StartingZCoordinate { get; set; } = null;
        

[Description("Along X Axis")]
[JsonProperty("length")]
public System.Nullable<float> Length { get; set; } = null;
        

[Description("Along Y Axis")]
[JsonProperty("width")]
public System.Nullable<float> Width { get; set; } = null;
    }
    
    [Description("Allows for simplified entry of ceilings using adjacent zone (interzone) heat tran" +
        "sfer - adjacent surface should be a floor")]
    [JsonObject("Ceiling:Interzone")]
    public class Ceiling_Interzone : BHoMObject, IEnergyPlusClass
    {
        

[Description("To be matched with a construction in this input file")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Zone for the inside of the surface")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Specify a surface name in an adjacent zone for known interior floors Specify a zo" +
    "ne name of an adjacent zone to automatically generate the interior floor in the " +
    "adjacent zone.")]
[JsonProperty("outside_boundary_condition_object")]
public string OutsideBoundaryConditionObject { get; set; } = "";
        

[Description("Facing direction of outside of wall (S=180,N=0,E=90,W=270)")]
[JsonProperty("azimuth_angle")]
public System.Nullable<float> AzimuthAngle { get; set; } = null;
        

[Description("Ceilings are usually tilted 0 degrees")]
[JsonProperty("tilt_angle")]
public System.Nullable<float> TiltAngle { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("If not Flat, should be Lower Left Corner (from outside)")]
[JsonProperty("starting_x_coordinate")]
public System.Nullable<float> StartingXCoordinate { get; set; } = null;
        

[JsonProperty("starting_y_coordinate")]
public System.Nullable<float> StartingYCoordinate { get; set; } = null;
        

[JsonProperty("starting_z_coordinate")]
public System.Nullable<float> StartingZCoordinate { get; set; } = null;
        

[Description("Along X Axis")]
[JsonProperty("length")]
public System.Nullable<float> Length { get; set; } = null;
        

[Description("Along Y Axis")]
[JsonProperty("width")]
public System.Nullable<float> Width { get; set; } = null;
    }
    
    [Description("Allows for simplified entry of exterior floors with ground contact. View Factors " +
        "to Ground is automatically calculated.")]
    [JsonObject("Floor:GroundContact")]
    public class Floor_GroundContact : BHoMObject, IEnergyPlusClass
    {
        

[Description("To be matched with a construction in this input file If the construction is type " +
    "\"Construction:FfactorGroundFloor\", then the GroundFCfactorMethod will be used.")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Zone the surface is a part of")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("azimuth_angle")]
public System.Nullable<float> AzimuthAngle { get; set; } = null;
        

[Description("Floors are usually tilted 180 degrees")]
[JsonProperty("tilt_angle")]
public System.Nullable<float> TiltAngle { get; set; } = (System.Nullable<float>)Single.Parse("180", CultureInfo.InvariantCulture);
        

[Description("if not flat, should be lower left corner (from outside)")]
[JsonProperty("starting_x_coordinate")]
public System.Nullable<float> StartingXCoordinate { get; set; } = null;
        

[JsonProperty("starting_y_coordinate")]
public System.Nullable<float> StartingYCoordinate { get; set; } = null;
        

[JsonProperty("starting_z_coordinate")]
public System.Nullable<float> StartingZCoordinate { get; set; } = null;
        

[Description("Along X Axis")]
[JsonProperty("length")]
public System.Nullable<float> Length { get; set; } = null;
        

[Description("Along Y Axis")]
[JsonProperty("width")]
public System.Nullable<float> Width { get; set; } = null;
    }
    
    [Description("Allows for simplified entry of exterior floors ignoring ground contact or interio" +
        "r floors. View Factor to Ground is automatically calculated.")]
    [JsonObject("Floor:Adiabatic")]
    public class Floor_Adiabatic : BHoMObject, IEnergyPlusClass
    {
        

[Description("To be matched with a construction in this input file")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Zone the surface is a part of")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("azimuth_angle")]
public System.Nullable<float> AzimuthAngle { get; set; } = null;
        

[Description("Floors are usually tilted 180 degrees")]
[JsonProperty("tilt_angle")]
public System.Nullable<float> TiltAngle { get; set; } = (System.Nullable<float>)Single.Parse("180", CultureInfo.InvariantCulture);
        

[Description("if not flat, should be lower left corner (from outside)")]
[JsonProperty("starting_x_coordinate")]
public System.Nullable<float> StartingXCoordinate { get; set; } = null;
        

[JsonProperty("starting_y_coordinate")]
public System.Nullable<float> StartingYCoordinate { get; set; } = null;
        

[JsonProperty("starting_z_coordinate")]
public System.Nullable<float> StartingZCoordinate { get; set; } = null;
        

[Description("Along X Axis")]
[JsonProperty("length")]
public System.Nullable<float> Length { get; set; } = null;
        

[Description("Along Y Axis")]
[JsonProperty("width")]
public System.Nullable<float> Width { get; set; } = null;
    }
    
    [Description("Allows for simplified entry of floors using adjacent zone (interzone) heat transf" +
        "er - adjacent surface should be a ceiling.")]
    [JsonObject("Floor:Interzone")]
    public class Floor_Interzone : BHoMObject, IEnergyPlusClass
    {
        

[Description("To be matched with a construction in this input file")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Zone for the inside of the surface")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Specify a surface name in an adjacent zone for known interior ceilings. Specify a" +
    " zone name of an adjacent zone to automatically generate the interior ceiling in" +
    " the adjacent zone.")]
[JsonProperty("outside_boundary_condition_object")]
public string OutsideBoundaryConditionObject { get; set; } = "";
        

[JsonProperty("azimuth_angle")]
public System.Nullable<float> AzimuthAngle { get; set; } = null;
        

[Description("Floors are usually tilted 180 degrees")]
[JsonProperty("tilt_angle")]
public System.Nullable<float> TiltAngle { get; set; } = (System.Nullable<float>)Single.Parse("180", CultureInfo.InvariantCulture);
        

[Description("If not Flat, should be Lower Left Corner (from outside)")]
[JsonProperty("starting_x_coordinate")]
public System.Nullable<float> StartingXCoordinate { get; set; } = null;
        

[JsonProperty("starting_y_coordinate")]
public System.Nullable<float> StartingYCoordinate { get; set; } = null;
        

[JsonProperty("starting_z_coordinate")]
public System.Nullable<float> StartingZCoordinate { get; set; } = null;
        

[Description("Along X Axis")]
[JsonProperty("length")]
public System.Nullable<float> Length { get; set; } = null;
        

[Description("Along Y Axis")]
[JsonProperty("width")]
public System.Nullable<float> Width { get; set; } = null;
    }
    
    [Description("Allows for detailed entry of subsurfaces (windows, doors, glass doors, tubular da" +
        "ylighting devices).")]
    [JsonObject("FenestrationSurface:Detailed")]
    public class FenestrationSurface_Detailed : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("surface_type")]
public FenestrationSurface_Detailed_SurfaceType SurfaceType { get; set; } = (FenestrationSurface_Detailed_SurfaceType)Enum.Parse(typeof(FenestrationSurface_Detailed_SurfaceType), "Door");
        

[Description("To be matched with a construction in this input file")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[JsonProperty("building_surface_name")]
public string BuildingSurfaceName { get; set; } = "";
        

[Description(@"Non-blank only if base surface field Outside Boundary Condition is Surface or OtherSideCoefficients If Base Surface's Surface, specify name of corresponding subsurface in adjacent zone or specify current subsurface name for internal partition separating like zones If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients or leave blank to inherit Base Surface's OtherSide Coefficients")]
[JsonProperty("outside_boundary_condition_object")]
public string OutsideBoundaryConditionObject { get; set; } = "";
        

[Description(@"From the exterior of the surface Unused if one uses the ""reflections"" options in Solar Distribution in Building input unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified. autocalculate will automatically calculate this value from the tilt of the surface")]
[JsonProperty("view_factor_to_ground")]
public string ViewFactorToGround { get; set; } = (System.String)"Autocalculate";
        

[Description(@"Enter the name of a WindowProperty:FrameAndDivider object Used only for exterior windows (rectangular) and glass doors. Unused for triangular windows. If not specified (blank), window or glass door has no frame or divider and no beam solar reflection from reveal surfaces.")]
[JsonProperty("frame_and_divider_name")]
public string FrameAndDividerName { get; set; } = "";
        

[Description("Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be" +
    " truncated to integer")]
[JsonProperty("multiplier")]
public System.Nullable<float> Multiplier { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description(@"vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates are ""relative"" to the Zone Origin. If world, then building and zone origins are used for some internal calculations, but all coordinates are given in an ""absolute"" system.")]
[JsonProperty("number_of_vertices")]
public string NumberOfVertices { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("vertex_1_x_coordinate")]
public System.Nullable<float> Vertex1XCoordinate { get; set; } = null;
        

[JsonProperty("vertex_1_y_coordinate")]
public System.Nullable<float> Vertex1YCoordinate { get; set; } = null;
        

[JsonProperty("vertex_1_z_coordinate")]
public System.Nullable<float> Vertex1ZCoordinate { get; set; } = null;
        

[JsonProperty("vertex_2_x_coordinate")]
public System.Nullable<float> Vertex2XCoordinate { get; set; } = null;
        

[JsonProperty("vertex_2_y_coordinate")]
public System.Nullable<float> Vertex2YCoordinate { get; set; } = null;
        

[JsonProperty("vertex_2_z_coordinate")]
public System.Nullable<float> Vertex2ZCoordinate { get; set; } = null;
        

[JsonProperty("vertex_3_x_coordinate")]
public System.Nullable<float> Vertex3XCoordinate { get; set; } = null;
        

[JsonProperty("vertex_3_y_coordinate")]
public System.Nullable<float> Vertex3YCoordinate { get; set; } = null;
        

[JsonProperty("vertex_3_z_coordinate")]
public System.Nullable<float> Vertex3ZCoordinate { get; set; } = null;
        

[Description("Not used for triangles")]
[JsonProperty("vertex_4_x_coordinate")]
public System.Nullable<float> Vertex4XCoordinate { get; set; } = null;
        

[Description("Not used for triangles")]
[JsonProperty("vertex_4_y_coordinate")]
public System.Nullable<float> Vertex4YCoordinate { get; set; } = null;
        

[Description("Not used for triangles")]
[JsonProperty("vertex_4_z_coordinate")]
public System.Nullable<float> Vertex4ZCoordinate { get; set; } = null;
    }
    
    public enum FenestrationSurface_Detailed_SurfaceType
    {
        
        [JsonProperty("Door")]
        Door = 0,
        
        [JsonProperty("GlassDoor")]
        GlassDoor = 1,
        
        [JsonProperty("TubularDaylightDiffuser")]
        TubularDaylightDiffuser = 2,
        
        [JsonProperty("TubularDaylightDome")]
        TubularDaylightDome = 3,
        
        [JsonProperty("Window")]
        Window = 4,
    }
    
    [Description("Allows for simplified entry of Windows.")]
    [JsonObject("Window")]
    public class Window : BHoMObject, IEnergyPlusClass
    {
        

[Description("To be matched with a construction in this input file")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Name of Surface (Wall, usually) the Window is on (i.e., Base Surface) Window assu" +
    "mes the azimuth and tilt angles of the surface it is on.")]
[JsonProperty("building_surface_name")]
public string BuildingSurfaceName { get; set; } = "";
        

[Description(@"Enter the name of a WindowProperty:FrameAndDivider object Used only for exterior windows (rectangular) and glass doors. Unused for triangular windows. If not specified (blank), window or glass door has no frame or divider and no beam solar reflection from reveal surfaces.")]
[JsonProperty("frame_and_divider_name")]
public string FrameAndDividerName { get; set; } = "";
        

[Description("Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be" +
    " truncated to integer")]
[JsonProperty("multiplier")]
public System.Nullable<float> Multiplier { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Window starting coordinate is specified relative to the Base Surface origin.")]
[JsonProperty("starting_x_coordinate")]
public System.Nullable<float> StartingXCoordinate { get; set; } = null;
        

[Description("How far up the wall the Window starts. (in 2-d, this would be a Y Coordinate)")]
[JsonProperty("starting_z_coordinate")]
public System.Nullable<float> StartingZCoordinate { get; set; } = null;
        

[JsonProperty("length")]
public System.Nullable<float> Length { get; set; } = null;
        

[JsonProperty("height")]
public System.Nullable<float> Height { get; set; } = null;
    }
    
    [Description("Allows for simplified entry of opaque Doors.")]
    [JsonObject("Door")]
    public class Door : BHoMObject, IEnergyPlusClass
    {
        

[Description("To be matched with a construction in this input file")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Name of Surface (Wall, usually) the Door is on (i.e., Base Surface) Door assumes " +
    "the azimuth and tilt angles of the surface it is on.")]
[JsonProperty("building_surface_name")]
public string BuildingSurfaceName { get; set; } = "";
        

[Description("Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be" +
    " truncated to integer")]
[JsonProperty("multiplier")]
public System.Nullable<float> Multiplier { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Door starting coordinate is specified relative to the Base Surface origin.")]
[JsonProperty("starting_x_coordinate")]
public System.Nullable<float> StartingXCoordinate { get; set; } = null;
        

[Description("How far up the wall the Door starts. (in 2-d, this would be a Y Coordinate)")]
[JsonProperty("starting_z_coordinate")]
public System.Nullable<float> StartingZCoordinate { get; set; } = null;
        

[JsonProperty("length")]
public System.Nullable<float> Length { get; set; } = null;
        

[JsonProperty("height")]
public System.Nullable<float> Height { get; set; } = null;
    }
    
    [Description("Allows for simplified entry of glass Doors.")]
    [JsonObject("GlazedDoor")]
    public class GlazedDoor : BHoMObject, IEnergyPlusClass
    {
        

[Description("To be matched with a construction in this input file")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Name of Surface (Wall, usually) the Door is on (i.e., Base Surface) Door assumes " +
    "the azimuth and tilt angles of the surface it is on.")]
[JsonProperty("building_surface_name")]
public string BuildingSurfaceName { get; set; } = "";
        

[Description(@"Enter the name of a WindowProperty:FrameAndDivider object Used only for exterior windows (rectangular) and glass doors. Unused for triangular windows. If not specified (blank), window or glass door has no frame or divider and no beam solar reflection from reveal surfaces.")]
[JsonProperty("frame_and_divider_name")]
public string FrameAndDividerName { get; set; } = "";
        

[Description("Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be" +
    " truncated to integer")]
[JsonProperty("multiplier")]
public System.Nullable<float> Multiplier { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Door starting coordinate is specified relative to the Base Surface origin.")]
[JsonProperty("starting_x_coordinate")]
public System.Nullable<float> StartingXCoordinate { get; set; } = null;
        

[Description("How far up the wall the Door starts. (in 2-d, this would be a Y Coordinate)")]
[JsonProperty("starting_z_coordinate")]
public System.Nullable<float> StartingZCoordinate { get; set; } = null;
        

[JsonProperty("length")]
public System.Nullable<float> Length { get; set; } = null;
        

[JsonProperty("height")]
public System.Nullable<float> Height { get; set; } = null;
    }
    
    [Description("Allows for simplified entry of interzone windows (adjacent to other zones).")]
    [JsonObject("Window:Interzone")]
    public class Window_Interzone : BHoMObject, IEnergyPlusClass
    {
        

[Description("To be matched with a construction in this input file")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Name of Surface (Wall, usually) the Window is on (i.e., Base Surface) Window assu" +
    "mes the azimuth and tilt angles of the surface it is on.")]
[JsonProperty("building_surface_name")]
public string BuildingSurfaceName { get; set; } = "";
        

[Description(@"Specify a surface name in an adjacent zone for known interior windows. Specify a zone name of an adjacent zone to automatically generate the interior window in the adjacent zone. a blank field will set up a Window in an adjacent zone (same zone as adjacent to base surface)")]
[JsonProperty("outside_boundary_condition_object")]
public string OutsideBoundaryConditionObject { get; set; } = "";
        

[Description("Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be" +
    " truncated to integer")]
[JsonProperty("multiplier")]
public System.Nullable<float> Multiplier { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Window starting coordinate is specified relative to the Base Surface origin.")]
[JsonProperty("starting_x_coordinate")]
public System.Nullable<float> StartingXCoordinate { get; set; } = null;
        

[Description("How far up the wall the Window starts. (in 2-d, this would be a Y Coordinate)")]
[JsonProperty("starting_z_coordinate")]
public System.Nullable<float> StartingZCoordinate { get; set; } = null;
        

[JsonProperty("length")]
public System.Nullable<float> Length { get; set; } = null;
        

[JsonProperty("height")]
public System.Nullable<float> Height { get; set; } = null;
    }
    
    [Description("Allows for simplified entry of interzone (opaque interior) doors (adjacent to oth" +
        "er zones).")]
    [JsonObject("Door:Interzone")]
    public class Door_Interzone : BHoMObject, IEnergyPlusClass
    {
        

[Description("To be matched with a construction in this input file")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Name of Surface (Wall, usually) the Door is on (i.e., Base Surface) Door assumes " +
    "the azimuth and tilt angles of the surface it is on.")]
[JsonProperty("building_surface_name")]
public string BuildingSurfaceName { get; set; } = "";
        

[Description(@"Specify a surface name in an adjacent zone for known interior doors. Specify a zone name of an adjacent zone to automatically generate the interior door in the adjacent zone. a blank field will set up a Window in an adjacent zone (same zone as adjacent to base surface)")]
[JsonProperty("outside_boundary_condition_object")]
public string OutsideBoundaryConditionObject { get; set; } = "";
        

[Description("Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be" +
    " truncated to integer")]
[JsonProperty("multiplier")]
public System.Nullable<float> Multiplier { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Door starting coordinate is specified relative to the Base Surface origin.")]
[JsonProperty("starting_x_coordinate")]
public System.Nullable<float> StartingXCoordinate { get; set; } = null;
        

[Description("How far up the wall the Door starts. (in 2-d, this would be a Y Coordinate)")]
[JsonProperty("starting_z_coordinate")]
public System.Nullable<float> StartingZCoordinate { get; set; } = null;
        

[JsonProperty("length")]
public System.Nullable<float> Length { get; set; } = null;
        

[JsonProperty("height")]
public System.Nullable<float> Height { get; set; } = null;
    }
    
    [Description("Allows for simplified entry of interzone (glass interior) doors (adjacent to othe" +
        "r zones).")]
    [JsonObject("GlazedDoor:Interzone")]
    public class GlazedDoor_Interzone : BHoMObject, IEnergyPlusClass
    {
        

[Description("To be matched with a construction in this input file")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Name of Surface (Wall, usually) the Door is on (i.e., Base Surface) Door assumes " +
    "the azimuth and tilt angles of the surface it is on.")]
[JsonProperty("building_surface_name")]
public string BuildingSurfaceName { get; set; } = "";
        

[Description(@"Specify a surface name in an adjacent zone for known interior doors. Specify a zone name of an adjacent zone to automatically generate the interior door in the adjacent zone. a blank field will set up a Window in an adjacent zone (same zone as adjacent to base surface)")]
[JsonProperty("outside_boundary_condition_object")]
public string OutsideBoundaryConditionObject { get; set; } = "";
        

[Description("Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be" +
    " truncated to integer")]
[JsonProperty("multiplier")]
public System.Nullable<float> Multiplier { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Door starting coordinate is specified relative to the Base Surface origin.")]
[JsonProperty("starting_x_coordinate")]
public System.Nullable<float> StartingXCoordinate { get; set; } = null;
        

[Description("How far up the wall the Door starts. (in 2-d, this would be a Y Coordinate)")]
[JsonProperty("starting_z_coordinate")]
public System.Nullable<float> StartingZCoordinate { get; set; } = null;
        

[JsonProperty("length")]
public System.Nullable<float> Length { get; set; } = null;
        

[JsonProperty("height")]
public System.Nullable<float> Height { get; set; } = null;
    }
    
    [Description("Specifies the type, location, and controls for window shades, window blinds, and " +
        "switchable glazing. Referencing the surface objects for exterior windows and gla" +
        "ss doors (ref: FenestrationSurface:Detailed, Window, and GlazedDoor).")]
    [JsonObject("WindowShadingControl")]
    public class WindowShadingControl : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description(@"If multiple WindowShadingControl objects are used than the order that they deploy the window shades can be set with this field. The first WindowShadingControl should be 1 and subsequent WindowShadingControl should 2 or 3 or higher. This is usually used when the Multiple Surface Control Type field is set to Group and groups of windows are being controlled in a certain order.")]
[JsonProperty("shading_control_sequence_number")]
public System.Nullable<float> ShadingControlSequenceNumber { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("shading_type")]
public WindowShadingControl_ShadingType ShadingType { get; set; } = (WindowShadingControl_ShadingType)Enum.Parse(typeof(WindowShadingControl_ShadingType), "BetweenGlassBlind");
        

[Description(@"Required if Shading Type = SwitchableGlazing Required if Shading Type = interior or exterior shade or blind, or exterior screen, and ""Shading Device Material Name"" is not specified. If both ""Construction with Shading Name"" and ""Shading Device Material Name"" are entered, the former takes precedence.")]
[JsonProperty("construction_with_shading_name")]
public string ConstructionWithShadingName { get; set; } = "";
        

[Description(@"OnIfScheduleAllows requires that Schedule Name be specified and Shading Control Is Scheduled = Yes. AlwaysOn, AlwaysOff and OnIfScheduleAllows are the only valid control types for ExteriorScreen. The following six control types are used primarily to reduce zone cooling load due to window solar gain Following entry should be used only if Shading Type = SwitchableGlazing and window is in a daylit zone The following three control types are used to reduce zone Heating load. They can be used with any Shading Type but are most appropriate for opaque interior or exterior shades with high insulating value (""opaque movable insulation"") The following two control types are used to reduce zone heating and cooling load. They can be used with any Shading Type but are most appropriate for translucent interior or exterior shades with high insulating value (""translucent movable insulation"") The following two control types are used to reduce zone Cooling load. They can be used with any Shading Type but are most appropriate for interior or exterior blinds,interior or exterior shades with low insulating value, or switchable glazing The following four control types require that both Setpoint and Setpoint2 be specified Setpoint will correspond to outdoor air temp or zone air temp (deg C) Setpoint2 will correspond to solar on window or horizontal solar (W/m2)")]
[JsonProperty("shading_control_type")]
public WindowShadingControl_ShadingControlType ShadingControlType { get; set; } = (WindowShadingControl_ShadingControlType)Enum.Parse(typeof(WindowShadingControl_ShadingControlType), "AlwaysOff");
        

[Description(@"Required if Shading Control Is Scheduled = Yes. If schedule value = 1, shading control is active, i.e., shading can take place only if the control test passes. If schedule value = 0, shading is off whether or not the control test passes. Schedule Name is required if Shading Control Is Scheduled = Yes. If Schedule Name is not specified, shading control is assumed to be active at all times.")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[Description("W/m2 for solar-based controls, W for cooling- or heating-based controls, deg C fo" +
    "r temperature-based controls. Unused for Shading Control Type = AlwaysOn, Always" +
    "Off, OnIfScheduleAllows, OnIfHighGlare, Glare, and DaylightIlluminance")]
[JsonProperty("setpoint")]
public System.Nullable<float> Setpoint { get; set; } = null;
        

[Description("If Yes, Schedule Name is required; if No, Schedule Name is not used. Shading Cont" +
    "rol Is Scheduled = Yes is required if Shading Control Type = OnIfScheduleAllows." +
    "")]
[JsonProperty("shading_control_is_scheduled")]
public EmptyNoYes ShadingControlIsScheduled { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description(@"If Yes and window is in a daylit zone, shading is on if zone's discomfort glare index exceeds the maximum discomfort glare index specified in the Daylighting object referenced by the zone. The glare test is OR'ed with the test specified by Shading Control Type. Glare Control Is Active = Yes is required if Shading Control Type = OnIfHighGlare.")]
[JsonProperty("glare_control_is_active")]
public EmptyNoYes GlareControlIsActive { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description(@"Enter the name of a WindowMaterial:Shade, WindowMaterial:Screen or WindowMaterial:Blind object. Required if ""Construction with Shading Name"" is not specified. Not used if Shading Control Type = SwitchableGlazing, BetweenGlassShade, or BetweenGlassBlind. If both ""Construction with Shading Name"" and ""Shading Device Material Name"" are entered, the former takes precedence.")]
[JsonProperty("shading_device_material_name")]
public string ShadingDeviceMaterialName { get; set; } = "";
        

[Description("Used only if Shading Type = InteriorBlind, ExteriorBlind or BetweenGlassBlind. If" +
    " choice is ScheduledSlatAngle then Slat Angle Schedule Name is required.")]
[JsonProperty("type_of_slat_angle_control_for_blinds")]
public WindowShadingControl_TypeOfSlatAngleControlForBlinds TypeOfSlatAngleControlForBlinds { get; set; } = (WindowShadingControl_TypeOfSlatAngleControlForBlinds)Enum.Parse(typeof(WindowShadingControl_TypeOfSlatAngleControlForBlinds), "FixedSlatAngle");
        

[Description("Used only if Shading Type = InteriorBlind, ExteriorBlind or BetweenGlassBlind. Re" +
    "quired if Type of Slat Angle Control for Blinds = ScheduledSlatAngle Schedule va" +
    "lues should be degrees (0 minimum, 180 maximum)")]
[JsonProperty("slat_angle_schedule_name")]
public string SlatAngleScheduleName { get; set; } = "";
        

[Description(@"W/m2 for solar-based controls, deg C for temperature-based controls. Used only as the second setpoint for the following two-setpoint control types: OnIfHighOutdoorAirTempAndHighSolarOnWindow, OnIfHighOutdoorAirTempAndHighHorizontalSolar, OnIfHighZoneAirTempAndHighSolarOnWindow, and OnIfHighZoneAirTempAndHighHorizontalSolar")]
[JsonProperty("setpoint_2")]
public System.Nullable<float> Setpoint2 { get; set; } = null;
        

[Description("Reference to the Daylighting:Controls object that provides the glare and illumina" +
    "nce control to the zone.")]
[JsonProperty("daylighting_control_object_name")]
public string DaylightingControlObjectName { get; set; } = "";
        

[Description(@"When Sequential is used the list of fenestration surfaces are controlled individually in the order specified When Group is used the entire list is controlled simultaneously and if glare control is needed the entire group of window shades are deployed together a the same time")]
[JsonProperty("multiple_surface_control_type")]
public WindowShadingControl_MultipleSurfaceControlType MultipleSurfaceControlType { get; set; } = (WindowShadingControl_MultipleSurfaceControlType)Enum.Parse(typeof(WindowShadingControl_MultipleSurfaceControlType), "Sequential");
        

[JsonProperty("fenestration_surfaces")]
public string FenestrationSurfaces { get; set; } = "";
    }
    
    public enum WindowShadingControl_ShadingType
    {
        
        [JsonProperty("BetweenGlassBlind")]
        BetweenGlassBlind = 0,
        
        [JsonProperty("BetweenGlassShade")]
        BetweenGlassShade = 1,
        
        [JsonProperty("ExteriorBlind")]
        ExteriorBlind = 2,
        
        [JsonProperty("ExteriorScreen")]
        ExteriorScreen = 3,
        
        [JsonProperty("ExteriorShade")]
        ExteriorShade = 4,
        
        [JsonProperty("InteriorBlind")]
        InteriorBlind = 5,
        
        [JsonProperty("InteriorShade")]
        InteriorShade = 6,
        
        [JsonProperty("SwitchableGlazing")]
        SwitchableGlazing = 7,
    }
    
    public enum WindowShadingControl_ShadingControlType
    {
        
        [JsonProperty("AlwaysOff")]
        AlwaysOff = 0,
        
        [JsonProperty("AlwaysOn")]
        AlwaysOn = 1,
        
        [JsonProperty("MeetDaylightIlluminanceSetpoint")]
        MeetDaylightIlluminanceSetpoint = 2,
        
        [JsonProperty("OffNightAndOnDayIfCoolingAndHighSolarOnWindow")]
        OffNightAndOnDayIfCoolingAndHighSolarOnWindow = 3,
        
        [JsonProperty("OnIfHighGlare")]
        OnIfHighGlare = 4,
        
        [JsonProperty("OnIfHighHorizontalSolar")]
        OnIfHighHorizontalSolar = 5,
        
        [JsonProperty("OnIfHighOutdoorAirTempAndHighHorizontalSolar")]
        OnIfHighOutdoorAirTempAndHighHorizontalSolar = 6,
        
        [JsonProperty("OnIfHighOutdoorAirTempAndHighSolarOnWindow")]
        OnIfHighOutdoorAirTempAndHighSolarOnWindow = 7,
        
        [JsonProperty("OnIfHighOutdoorAirTemperature")]
        OnIfHighOutdoorAirTemperature = 8,
        
        [JsonProperty("OnIfHighSolarOnWindow")]
        OnIfHighSolarOnWindow = 9,
        
        [JsonProperty("OnIfHighZoneAirTempAndHighHorizontalSolar")]
        OnIfHighZoneAirTempAndHighHorizontalSolar = 10,
        
        [JsonProperty("OnIfHighZoneAirTempAndHighSolarOnWindow")]
        OnIfHighZoneAirTempAndHighSolarOnWindow = 11,
        
        [JsonProperty("OnIfHighZoneAirTemperature")]
        OnIfHighZoneAirTemperature = 12,
        
        [JsonProperty("OnIfHighZoneCooling")]
        OnIfHighZoneCooling = 13,
        
        [JsonProperty("OnIfScheduleAllows")]
        OnIfScheduleAllows = 14,
        
        [JsonProperty("OnNightAndOnDayIfCoolingAndHighSolarOnWindow")]
        OnNightAndOnDayIfCoolingAndHighSolarOnWindow = 15,
        
        [JsonProperty("OnNightIfHeatingAndOffDay")]
        OnNightIfHeatingAndOffDay = 16,
        
        [JsonProperty("OnNightIfHeatingAndOnDayIfCooling")]
        OnNightIfHeatingAndOnDayIfCooling = 17,
        
        [JsonProperty("OnNightIfLowInsideTempAndOffDay")]
        OnNightIfLowInsideTempAndOffDay = 18,
        
        [JsonProperty("OnNightIfLowOutdoorTempAndOffDay")]
        OnNightIfLowOutdoorTempAndOffDay = 19,
        
        [JsonProperty("OnNightIfLowOutdoorTempAndOnDayIfCooling")]
        OnNightIfLowOutdoorTempAndOnDayIfCooling = 20,
    }
    
    public enum WindowShadingControl_TypeOfSlatAngleControlForBlinds
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlockBeamSolar")]
        BlockBeamSolar = 1,
        
        [JsonProperty("FixedSlatAngle")]
        FixedSlatAngle = 2,
        
        [JsonProperty("ScheduledSlatAngle")]
        ScheduledSlatAngle = 3,
    }
    
    public enum WindowShadingControl_MultipleSurfaceControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Group")]
        Group = 1,
        
        [JsonProperty("Sequential")]
        Sequential = 2,
    }
    
    [Description("Specifies the dimensions of a window frame, dividers, and inside reveal surfaces." +
        " Referenced by the surface objects for exterior windows and glass doors (ref: Fe" +
        "nestrationSurface:Detailed, Window, and GlazedDoor).")]
    [JsonObject("WindowProperty:FrameAndDivider")]
    public class WindowProperty_FrameAndDivider : BHoMObject, IEnergyPlusClass
    {
        

[Description("Width of frame in plane of window Frame width assumed the same on all sides of wi" +
    "ndow")]
[JsonProperty("frame_width")]
public System.Nullable<float> FrameWidth { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Amount that frame projects outward from the outside face of the glazing")]
[JsonProperty("frame_outside_projection")]
public System.Nullable<float> FrameOutsideProjection { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Amount that frame projects inward from the inside face of the glazing")]
[JsonProperty("frame_inside_projection")]
public System.Nullable<float> FrameInsideProjection { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Effective conductance of frame Excludes air films Obtained from WINDOW 5 or other" +
    " 2-D calculation")]
[JsonProperty("frame_conductance")]
public System.Nullable<float> FrameConductance { get; set; } = null;
        

[Description("Excludes air films; applies only to multipane windows Obtained from WINDOW 5 or o" +
    "ther 2-D calculation")]
[JsonProperty("ratio_of_frame_edge_glass_conductance_to_center_of_glass_conductance")]
public System.Nullable<float> RatioOfFrameEdgeGlassConductanceToCenterOfGlassConductance { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Assumed same on outside and inside of frame")]
[JsonProperty("frame_solar_absorptance")]
public System.Nullable<float> FrameSolarAbsorptance { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[Description("Assumed same on outside and inside of frame")]
[JsonProperty("frame_visible_absorptance")]
public System.Nullable<float> FrameVisibleAbsorptance { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[Description("Assumed same on outside and inside of frame")]
[JsonProperty("frame_thermal_hemispherical_emissivity")]
public System.Nullable<float> FrameThermalHemisphericalEmissivity { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("divider_type")]
public WindowProperty_FrameAndDivider_DividerType DividerType { get; set; } = (WindowProperty_FrameAndDivider_DividerType)Enum.Parse(typeof(WindowProperty_FrameAndDivider_DividerType), "DividedLite");
        

[Description("Width of dividers in plane of window Width assumed the same for all dividers")]
[JsonProperty("divider_width")]
public System.Nullable<float> DividerWidth { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("\"Horizontal\" means parallel to local window X-axis")]
[JsonProperty("number_of_horizontal_dividers")]
public System.Nullable<float> NumberOfHorizontalDividers { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("\"Vertical\" means parallel to local window Y-axis")]
[JsonProperty("number_of_vertical_dividers")]
public System.Nullable<float> NumberOfVerticalDividers { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Amount that divider projects outward from the outside face of the glazing Outside" +
    " projection assumed the same for all divider elements")]
[JsonProperty("divider_outside_projection")]
public System.Nullable<float> DividerOutsideProjection { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Amount that divider projects inward from the inside face of the glazing Inside pr" +
    "ojection assumed the same for all divider elements")]
[JsonProperty("divider_inside_projection")]
public System.Nullable<float> DividerInsideProjection { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Effective conductance of divider Excludes air films Obtained from WINDOW 5 or oth" +
    "er 2-D calculation")]
[JsonProperty("divider_conductance")]
public System.Nullable<float> DividerConductance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Excludes air films Obtained from WINDOW 5 or other 2-D calculation")]
[JsonProperty("ratio_of_divider_edge_glass_conductance_to_center_of_glass_conductance")]
public System.Nullable<float> RatioOfDividerEdgeGlassConductanceToCenterOfGlassConductance { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Assumed same on outside and inside of divider")]
[JsonProperty("divider_solar_absorptance")]
public System.Nullable<float> DividerSolarAbsorptance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Assumed same on outside and inside of divider")]
[JsonProperty("divider_visible_absorptance")]
public System.Nullable<float> DividerVisibleAbsorptance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Assumed same on outside and inside of divider")]
[JsonProperty("divider_thermal_hemispherical_emissivity")]
public System.Nullable<float> DividerThermalHemisphericalEmissivity { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("outside_reveal_solar_absorptance")]
public System.Nullable<float> OutsideRevealSolarAbsorptance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("inside_sill_depth")]
public System.Nullable<float> InsideSillDepth { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("inside_sill_solar_absorptance")]
public System.Nullable<float> InsideSillSolarAbsorptance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Distance from plane of inside surface of glazing to plane of inside surface of wall. Outside reveal depth is determined from the geometry of the window and the wall it is on; it is non-zero if the plane of the outside surface of the glazing is set back from the plane of the outside surface of the wall.")]
[JsonProperty("inside_reveal_depth")]
public System.Nullable<float> InsideRevealDepth { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("inside_reveal_solar_absorptance")]
public System.Nullable<float> InsideRevealSolarAbsorptance { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum WindowProperty_FrameAndDivider_DividerType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DividedLite")]
        DividedLite = 1,
        
        [JsonProperty("Suspended")]
        Suspended = 2,
    }
    
    [Description("Used to control forced airflow through a gap between glass layers")]
    [JsonObject("WindowProperty:AirflowControl")]
    public class WindowProperty_AirflowControl : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("airflow_source")]
public WindowProperty_AirflowControl_AirflowSource AirflowSource { get; set; } = (WindowProperty_AirflowControl_AirflowSource)Enum.Parse(typeof(WindowProperty_AirflowControl_AirflowSource), "IndoorAir");
        

[Description("If ReturnAir is selected, the name of the Return Air Node may be specified below." +
    "")]
[JsonProperty("airflow_destination")]
public WindowProperty_AirflowControl_AirflowDestination AirflowDestination { get; set; } = (WindowProperty_AirflowControl_AirflowDestination)Enum.Parse(typeof(WindowProperty_AirflowControl_AirflowDestination), "OutdoorAir");
        

[Description("Above is m3/s per m of glazing width")]
[JsonProperty("maximum_flow_rate")]
public System.Nullable<float> MaximumFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("ScheduledOnly requires that Airflow Has Multiplier Schedule Name = Yes and that A" +
    "irflow Multiplier Schedule Name is specified.")]
[JsonProperty("airflow_control_type")]
public WindowProperty_AirflowControl_AirflowControlType AirflowControlType { get; set; } = (WindowProperty_AirflowControl_AirflowControlType)Enum.Parse(typeof(WindowProperty_AirflowControl_AirflowControlType), "AlwaysOnAtMaximumFlow");
        

[Description("If Yes, then Airflow Multiplier Schedule Name must be specified")]
[JsonProperty("airflow_is_scheduled")]
public EmptyNoYes AirflowIsScheduled { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Required if Airflow Is Scheduled = Yes. Schedule values are 0.0 or 1.0 and multip" +
    "ly Maximum Air Flow.")]
[JsonProperty("airflow_multiplier_schedule_name")]
public string AirflowMultiplierScheduleName { get; set; } = "";
        

[Description("Name of the return air node for this airflow window if the Airflow Destination is" +
    " ReturnAir. If left blank, defaults to the first return air node for the zone of" +
    " the window surface.")]
[JsonProperty("airflow_return_air_node_name")]
public string AirflowReturnAirNodeName { get; set; } = "";
    }
    
    public enum WindowProperty_AirflowControl_AirflowSource
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("IndoorAir")]
        IndoorAir = 1,
        
        [JsonProperty("OutdoorAir")]
        OutdoorAir = 2,
    }
    
    public enum WindowProperty_AirflowControl_AirflowDestination
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("IndoorAir")]
        IndoorAir = 1,
        
        [JsonProperty("OutdoorAir")]
        OutdoorAir = 2,
        
        [JsonProperty("ReturnAir")]
        ReturnAir = 3,
    }
    
    public enum WindowProperty_AirflowControl_AirflowControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AlwaysOff")]
        AlwaysOff = 1,
        
        [JsonProperty("AlwaysOnAtMaximumFlow")]
        AlwaysOnAtMaximumFlow = 2,
        
        [JsonProperty("ScheduledOnly")]
        ScheduledOnly = 3,
    }
    
    [Description("This is a movable exterior glass layer that is usually applied in the winter and " +
        "removed in the summer.")]
    [JsonObject("WindowProperty:StormWindow")]
    public class WindowProperty_StormWindow : BHoMObject, IEnergyPlusClass
    {
        

[Description("Must be the name of a FenestrationSurface:Detailed object with Surface Type = WIN" +
    "DOW. The WindowProperty:StormWindow object can only be used with exterior window" +
    "s.")]
[JsonProperty("window_name")]
public string WindowName { get; set; } = "";
        

[Description("Must be a WindowMaterial:Glazing or WindowMaterial:Glazing:RefractionExtinctionMe" +
    "thod Gap between storm glass layer and adjacent glass layer is assumed to be fil" +
    "led with Air")]
[JsonProperty("storm_glass_layer_name")]
public string StormGlassLayerName { get; set; } = "";
        

[JsonProperty("distance_between_storm_glass_layer_and_adjacent_glass")]
public System.Nullable<float> DistanceBetweenStormGlassLayerAndAdjacentGlass { get; set; } = (System.Nullable<float>)Single.Parse("0.05", CultureInfo.InvariantCulture);
        

[JsonProperty("month_that_storm_glass_layer_is_put_on")]
public System.Nullable<float> MonthThatStormGlassLayerIsPutOn { get; set; } = null;
        

[JsonProperty("day_of_month_that_storm_glass_layer_is_put_on")]
public System.Nullable<float> DayOfMonthThatStormGlassLayerIsPutOn { get; set; } = null;
        

[JsonProperty("month_that_storm_glass_layer_is_taken_off")]
public System.Nullable<float> MonthThatStormGlassLayerIsTakenOff { get; set; } = null;
        

[JsonProperty("day_of_month_that_storm_glass_layer_is_taken_off")]
public System.Nullable<float> DayOfMonthThatStormGlassLayerIsTakenOff { get; set; } = null;
    }
    
    [Description(@"Used to describe internal zone surface area that does not need to be part of geometric representation. This should be the total surface area exposed to the zone air. If you use a ZoneList in the Zone or ZoneList name field then this definition applies to all the zones in the ZoneList.")]
    [JsonObject("InternalMass")]
    public class InternalMass : BHoMObject, IEnergyPlusClass
    {
        

[Description("To be matched with a construction in this input file")]
[JsonProperty("construction_name")]
public string ConstructionName { get; set; } = "";
        

[Description("Zone the surface is a part of used to be Interior Environment")]
[JsonProperty("zone_or_zonelist_name")]
public string ZoneOrZonelistName { get; set; } = "";
        

[JsonProperty("surface_area")]
public System.Nullable<float> SurfaceArea { get; set; } = null;
    }
    
    [Description("used for shading elements such as trees these items are fixed in space and would " +
        "not move with relative geometry")]
    [JsonObject("Shading:Site")]
    public class Shading_Site : BHoMObject, IEnergyPlusClass
    {
        

[Description("Facing direction of outside of shading device (S=180,N=0,E=90,W=270)")]
[JsonProperty("azimuth_angle")]
public System.Nullable<float> AzimuthAngle { get; set; } = null;
        

[JsonProperty("tilt_angle")]
public System.Nullable<float> TiltAngle { get; set; } = (System.Nullable<float>)Single.Parse("90", CultureInfo.InvariantCulture);
        

[Description("Starting coordinate is the Lower Left Corner of the Shade")]
[JsonProperty("starting_x_coordinate")]
public System.Nullable<float> StartingXCoordinate { get; set; } = null;
        

[JsonProperty("starting_y_coordinate")]
public System.Nullable<float> StartingYCoordinate { get; set; } = null;
        

[JsonProperty("starting_z_coordinate")]
public System.Nullable<float> StartingZCoordinate { get; set; } = null;
        

[JsonProperty("length")]
public System.Nullable<float> Length { get; set; } = null;
        

[JsonProperty("height")]
public System.Nullable<float> Height { get; set; } = null;
    }
    
    [Description("used for shading elements such as trees, other buildings, parts of this building " +
        "not being modeled these items are relative to the current building and would mov" +
        "e with relative geometry")]
    [JsonObject("Shading:Building")]
    public class Shading_Building : BHoMObject, IEnergyPlusClass
    {
        

[Description("Facing direction of outside of shading device (S=180,N=0,E=90,W=270)")]
[JsonProperty("azimuth_angle")]
public System.Nullable<float> AzimuthAngle { get; set; } = null;
        

[JsonProperty("tilt_angle")]
public System.Nullable<float> TiltAngle { get; set; } = (System.Nullable<float>)Single.Parse("90", CultureInfo.InvariantCulture);
        

[Description("Starting coordinate is the Lower Left Corner of the Shade")]
[JsonProperty("starting_x_coordinate")]
public System.Nullable<float> StartingXCoordinate { get; set; } = null;
        

[JsonProperty("starting_y_coordinate")]
public System.Nullable<float> StartingYCoordinate { get; set; } = null;
        

[JsonProperty("starting_z_coordinate")]
public System.Nullable<float> StartingZCoordinate { get; set; } = null;
        

[JsonProperty("length")]
public System.Nullable<float> Length { get; set; } = null;
        

[JsonProperty("height")]
public System.Nullable<float> Height { get; set; } = null;
    }
    
    [Description("used for shading elements such as trees these items are fixed in space and would " +
        "not move with relative geometry")]
    [JsonObject("Shading:Site:Detailed")]
    public class Shading_Site_Detailed : BHoMObject, IEnergyPlusClass
    {
        

[Description("Transmittance schedule for the shading device, defaults to zero (always opaque)")]
[JsonProperty("transmittance_schedule_name")]
public string TransmittanceScheduleName { get; set; } = "";
        

[Description("shown with 6 vertex coordinates -- extensible object Rules for vertices are given" +
    " in GlobalGeometryRules coordinates -- For this object all surface coordinates a" +
    "re in world coordinates.")]
[JsonProperty("number_of_vertices")]
public string NumberOfVertices { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("vertices")]
public string Vertices { get; set; } = "";
    }
    
    [Description("used for shading elements such as trees, other buildings, parts of this building " +
        "not being modeled these items are relative to the current building and would mov" +
        "e with relative geometry")]
    [JsonObject("Shading:Building:Detailed")]
    public class Shading_Building_Detailed : BHoMObject, IEnergyPlusClass
    {
        

[Description("Transmittance schedule for the shading device, defaults to zero (always opaque)")]
[JsonProperty("transmittance_schedule_name")]
public string TransmittanceScheduleName { get; set; } = "";
        

[Description("shown with 6 vertex coordinates -- extensible object Rules for vertices are given" +
    " in GlobalGeometryRules coordinates -- For this object all surface coordinates a" +
    "re relative to the building origin (0,0,0) and will rotate with the BUILDING nor" +
    "th axis.")]
[JsonProperty("number_of_vertices")]
public string NumberOfVertices { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("vertices")]
public string Vertices { get; set; } = "";
    }
    
    [Description("Overhangs are usually flat shading surfaces that reference a window or door.")]
    [JsonObject("Shading:Overhang")]
    public class Shading_Overhang : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("window_or_door_name")]
public string WindowOrDoorName { get; set; } = "";
        

[JsonProperty("height_above_window_or_door")]
public System.Nullable<float> HeightAboveWindowOrDoor { get; set; } = null;
        

[JsonProperty("tilt_angle_from_window_door")]
public System.Nullable<float> TiltAngleFromWindowDoor { get; set; } = (System.Nullable<float>)Single.Parse("90", CultureInfo.InvariantCulture);
        

[JsonProperty("left_extension_from_window_door_width")]
public System.Nullable<float> LeftExtensionFromWindowDoorWidth { get; set; } = null;
        

[Description("N3 + N4 + Window/Door Width is Overhang Length")]
[JsonProperty("right_extension_from_window_door_width")]
public System.Nullable<float> RightExtensionFromWindowDoorWidth { get; set; } = null;
        

[JsonProperty("depth")]
public System.Nullable<float> Depth { get; set; } = null;
    }
    
    [Description("Overhangs are typically flat shading surfaces that reference a window or door.")]
    [JsonObject("Shading:Overhang:Projection")]
    public class Shading_Overhang_Projection : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("window_or_door_name")]
public string WindowOrDoorName { get; set; } = "";
        

[JsonProperty("height_above_window_or_door")]
public System.Nullable<float> HeightAboveWindowOrDoor { get; set; } = null;
        

[JsonProperty("tilt_angle_from_window_door")]
public System.Nullable<float> TiltAngleFromWindowDoor { get; set; } = (System.Nullable<float>)Single.Parse("90", CultureInfo.InvariantCulture);
        

[JsonProperty("left_extension_from_window_door_width")]
public System.Nullable<float> LeftExtensionFromWindowDoorWidth { get; set; } = null;
        

[Description("N3 + N4 + Window/Door Width is Overhang Length")]
[JsonProperty("right_extension_from_window_door_width")]
public System.Nullable<float> RightExtensionFromWindowDoorWidth { get; set; } = null;
        

[JsonProperty("depth_as_fraction_of_window_door_height")]
public System.Nullable<float> DepthAsFractionOfWindowDoorHeight { get; set; } = null;
    }
    
    [Description("Fins are usually shading surfaces that are perpendicular to a window or door.")]
    [JsonObject("Shading:Fin")]
    public class Shading_Fin : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("window_or_door_name")]
public string WindowOrDoorName { get; set; } = "";
        

[JsonProperty("left_extension_from_window_door")]
public System.Nullable<float> LeftExtensionFromWindowDoor { get; set; } = null;
        

[JsonProperty("left_distance_above_top_of_window")]
public System.Nullable<float> LeftDistanceAboveTopOfWindow { get; set; } = null;
        

[Description("N2 + N3 + height of Window/Door is height of Fin")]
[JsonProperty("left_distance_below_bottom_of_window")]
public System.Nullable<float> LeftDistanceBelowBottomOfWindow { get; set; } = null;
        

[JsonProperty("left_tilt_angle_from_window_door")]
public System.Nullable<float> LeftTiltAngleFromWindowDoor { get; set; } = (System.Nullable<float>)Single.Parse("90", CultureInfo.InvariantCulture);
        

[JsonProperty("left_depth")]
public System.Nullable<float> LeftDepth { get; set; } = null;
        

[JsonProperty("right_extension_from_window_door")]
public System.Nullable<float> RightExtensionFromWindowDoor { get; set; } = null;
        

[JsonProperty("right_distance_above_top_of_window")]
public System.Nullable<float> RightDistanceAboveTopOfWindow { get; set; } = null;
        

[Description("N7 + N8 + height of Window/Door is height of Fin")]
[JsonProperty("right_distance_below_bottom_of_window")]
public System.Nullable<float> RightDistanceBelowBottomOfWindow { get; set; } = null;
        

[JsonProperty("right_tilt_angle_from_window_door")]
public System.Nullable<float> RightTiltAngleFromWindowDoor { get; set; } = (System.Nullable<float>)Single.Parse("90", CultureInfo.InvariantCulture);
        

[JsonProperty("right_depth")]
public System.Nullable<float> RightDepth { get; set; } = null;
    }
    
    [Description("Fins are usually shading surfaces that are perpendicular to a window or door.")]
    [JsonObject("Shading:Fin:Projection")]
    public class Shading_Fin_Projection : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("window_or_door_name")]
public string WindowOrDoorName { get; set; } = "";
        

[JsonProperty("left_extension_from_window_door")]
public System.Nullable<float> LeftExtensionFromWindowDoor { get; set; } = null;
        

[JsonProperty("left_distance_above_top_of_window")]
public System.Nullable<float> LeftDistanceAboveTopOfWindow { get; set; } = null;
        

[Description("N2 + N3 + height of Window/Door is height of Fin")]
[JsonProperty("left_distance_below_bottom_of_window")]
public System.Nullable<float> LeftDistanceBelowBottomOfWindow { get; set; } = null;
        

[JsonProperty("left_tilt_angle_from_window_door")]
public System.Nullable<float> LeftTiltAngleFromWindowDoor { get; set; } = (System.Nullable<float>)Single.Parse("90", CultureInfo.InvariantCulture);
        

[JsonProperty("left_depth_as_fraction_of_window_door_width")]
public System.Nullable<float> LeftDepthAsFractionOfWindowDoorWidth { get; set; } = null;
        

[JsonProperty("right_extension_from_window_door")]
public System.Nullable<float> RightExtensionFromWindowDoor { get; set; } = null;
        

[JsonProperty("right_distance_above_top_of_window")]
public System.Nullable<float> RightDistanceAboveTopOfWindow { get; set; } = null;
        

[Description("N7 + N8 + height of Window/Door is height of Fin")]
[JsonProperty("right_distance_below_bottom_of_window")]
public System.Nullable<float> RightDistanceBelowBottomOfWindow { get; set; } = null;
        

[JsonProperty("right_tilt_angle_from_window_door")]
public System.Nullable<float> RightTiltAngleFromWindowDoor { get; set; } = (System.Nullable<float>)Single.Parse("90", CultureInfo.InvariantCulture);
        

[JsonProperty("right_depth_as_fraction_of_window_door_width")]
public System.Nullable<float> RightDepthAsFractionOfWindowDoorWidth { get; set; } = null;
    }
    
    [Description("used For fins, overhangs, elements that shade the building, are attached to the b" +
        "uilding but are not part of the heat transfer calculations")]
    [JsonObject("Shading:Zone:Detailed")]
    public class Shading_Zone_Detailed : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("base_surface_name")]
public string BaseSurfaceName { get; set; } = "";
        

[Description("Transmittance schedule for the shading device, defaults to zero (always opaque)")]
[JsonProperty("transmittance_schedule_name")]
public string TransmittanceScheduleName { get; set; } = "";
        

[Description(@"shown with 6 vertex coordinates -- extensible object vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates are ""relative"" to the Zone Origin. if world, then building and zone origins are used for some internal calculations, but all coordinates are given in an ""absolute"" system.")]
[JsonProperty("number_of_vertices")]
public string NumberOfVertices { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("vertices")]
public string Vertices { get; set; } = "";
    }
    
    [Description("If this object is not defined for a shading surface the default values listed in " +
        "following fields will be used in the solar reflection calculation.")]
    [JsonObject("ShadingProperty:Reflectance")]
    public class ShadingProperty_Reflectance : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("shading_surface_name")]
public string ShadingSurfaceName { get; set; } = "";
        

[JsonProperty("diffuse_solar_reflectance_of_unglazed_part_of_shading_surface")]
public System.Nullable<float> DiffuseSolarReflectanceOfUnglazedPartOfShadingSurface { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("diffuse_visible_reflectance_of_unglazed_part_of_shading_surface")]
public System.Nullable<float> DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurface { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_of_shading_surface_that_is_glazed")]
public System.Nullable<float> FractionOfShadingSurfaceThatIsGlazed { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Required if Fraction of Shading Surface That Is Glazed > 0.0")]
[JsonProperty("glazing_construction_name")]
public string GlazingConstructionName { get; set; } = "";
    }
}
namespace BH.oM.Adapters.EnergyPlus.UnitaryEquipment
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"AirloopHVAC:UnitarySystem is a generic HVAC system type that allows any configuration of coils and/or fan. This object is a replacement of other AirloopHVAC objects. This object can be used in outdoor air systems, outdoor air units, air loops, and as zone equipment if desired.")]
    [JsonObject("AirLoopHVAC:UnitarySystem")]
    public class AirLoopHVAC_UnitarySystem : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Load control requires a Controlling Zone name. SetPoint control requires set points at coil outlet node. SingleZoneVAV also requires a Controlling Zone name and allows load control at low speed fan until the load exceeds capacity or outlet air temperature limits. The fan speed is then increased.")]
[JsonProperty("control_type")]
public AirLoopHVAC_UnitarySystem_ControlType ControlType { get; set; } = (AirLoopHVAC_UnitarySystem_ControlType)Enum.Parse(typeof(AirLoopHVAC_UnitarySystem_ControlType), "Load");
        

[Description("Used only for Load based control Zone name where thermostat is located. Required " +
    "when Control Type = Load.")]
[JsonProperty("controlling_zone_or_thermostat_location")]
public string ControllingZoneOrThermostatLocation { get; set; } = "";
        

[Description(@"None = meet sensible load only. Required when Control Type = SingleZoneVAV. Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only with cooling coil type Coil:Cooling:DX:TwoStageWithHumidityControlMode or CoilSystem:Cooling:DX:HeatExchangerAssisted. This control mode either switches the coil mode or allows the heat exchanger to be turned on and off based on the zone dehumidification requirements. A ZoneControl:Humidistat object is also required. CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid with all cooling coil types. When a heat exchanger assisted cooling coil is used, the heat exchanger is locked on at all times. A ZoneControl:Humidistat object is also required.")]
[JsonProperty("dehumidification_control_type")]
public AirLoopHVAC_UnitarySystem_DehumidificationControlType DehumidificationControlType { get; set; } = (AirLoopHVAC_UnitarySystem_DehumidificationControlType)Enum.Parse(typeof(AirLoopHVAC_UnitarySystem_DehumidificationControlType), "None");
        

[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. A schedule value greater than zero (usually 1 is used) indicates that the unit is available to operate as needed. A value less than or equal to zero (usually zero is used) denotes that the unit must be off.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Enter the node name used as the inlet air node for the unitary system.")]
[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[Description("Enter the node name used as the outlet air node for the unitary system.")]
[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description(@"Enter the type of supply air fan if included in the unitary system. Fan:ConstantVolume only works with continuous fan operating mode (i.e. supply air fan operating mode schedule values greater than 0). Specify a Fan:SystemModel or a Fan:OnOff object when the Supply Air Fan Operating Mode Schedule Name input field above is left blank. Specify a Fan:SystemModel or a Fan:VariableVolume when modeling VAV systems which used setpoint based control if the fan is included in the unitary system object. The ComponentModel fan type may be substituted for the ConstantVolume or VariableVolume fan types when more detailed fan modeling is required. The variable or constant volume fan may be specified on the branch instead of contained within the unitary system object (i.e., this field may be blank for certain configurations).")]
[JsonProperty("supply_fan_object_type")]
public AirLoopHVAC_UnitarySystem_SupplyFanObjectType SupplyFanObjectType { get; set; } = (AirLoopHVAC_UnitarySystem_SupplyFanObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitarySystem_SupplyFanObjectType), "FanComponentModel");
        

[Description("Enter the name of the supply air fan if included in the unitary system.")]
[JsonProperty("supply_fan_name")]
public string SupplyFanName { get; set; } = "";
        

[Description("Enter the type of supply air fan if included in the unitary system.")]
[JsonProperty("fan_placement")]
public AirLoopHVAC_UnitarySystem_FanPlacement FanPlacement { get; set; } = (AirLoopHVAC_UnitarySystem_FanPlacement)Enum.Parse(typeof(AirLoopHVAC_UnitarySystem_FanPlacement), "BlowThrough");
        

[Description(@"A fan operating mode schedule value of 0 indicates cycling fan mode (supply air fan cycles on and off in tandem with the cooling or heating coil). Any other schedule value indicates continuous fan mode (supply air fan operates continuously regardless of cooling or heating coil operation). Provide a schedule with non-zero values when high humidity control is specified. Leaving this schedule name blank will default to constant fan mode for the entire simulation period. This field is not used when set point based control is used where a set point controls the coil. SingleZoneVAV control type is only active when constant fan operating mode is active.")]
[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        

[Description("Enter the type of heating coil if included in the unitary system.")]
[JsonProperty("heating_coil_object_type")]
public AirLoopHVAC_UnitarySystem_HeatingCoilObjectType HeatingCoilObjectType { get; set; } = (AirLoopHVAC_UnitarySystem_HeatingCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitarySystem_HeatingCoilObjectType), "CoilHeatingDXMultiSpeed");
        

[Description("Enter the name of the heating coil if included in the unitary system.")]
[JsonProperty("heating_coil_name")]
public string HeatingCoilName { get; set; } = "";
        

[Description("Used to adjust heat pump heating capacity with respect to DX cooling capacity use" +
    "d only for heat pump configurations (i.e., a DX cooling and DX heating coil is u" +
    "sed).")]
[JsonProperty("dx_heating_coil_sizing_ratio")]
public System.Nullable<float> DxHeatingCoilSizingRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Enter the type of cooling coil if included in the unitary system.")]
[JsonProperty("cooling_coil_object_type")]
public AirLoopHVAC_UnitarySystem_CoolingCoilObjectType CoolingCoilObjectType { get; set; } = (AirLoopHVAC_UnitarySystem_CoolingCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitarySystem_CoolingCoilObjectType), "CoilCoolingDX");
        

[Description("Enter the name of the cooling coil if included in the unitary system.")]
[JsonProperty("cooling_coil_name")]
public string CoolingCoilName { get; set; } = "";
        

[Description("If Yes, the DX cooling coil runs as 100% DOAS DX coil. If No, the DX cooling coil" +
    " runs as a regular DX coil. If left blank the default is regular dx coil.")]
[JsonProperty("use_doas_dx_cooling_coil")]
public EmptyNoYes UseDoasDxCoolingCoil { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description(@"When Use DOAS DX Cooling Coil is specified as Yes, Minimum Supply Air Temperature defines the minimum DOAS DX cooling coil leaving air temperature that should be maintained to avoid frost formation. This field is not autosizable when the input for Use DOAS DX Cooling Coil = Yes. When Control Type = SingleZoneVAV, enter the minimum air temperature limit for reduced fan speed.")]
[JsonProperty("minimum_supply_air_temperature")]
public string MinimumSupplyAirTemperature { get; set; } = (System.String)"2";
        

[Description(@"SensibleOnlyLoadControl is selected when thermostat or SingleZoneVAV control is used. LatentOnlyLoadControl is selected when humidistat control is used. LatentWithSensibleLoadControl is selected when thermostat control is used and dehumidification is required only when a sensible load exists. LatentOrSensibleLoadControl is selected when thermostat control is used and dehumidification is required any time the humidistat set point is exceeded.")]
[JsonProperty("latent_load_control")]
public AirLoopHVAC_UnitarySystem_LatentLoadControl LatentLoadControl { get; set; } = (AirLoopHVAC_UnitarySystem_LatentLoadControl)Enum.Parse(typeof(AirLoopHVAC_UnitarySystem_LatentLoadControl), "SensibleOnlyLoadControl");
        

[Description(@"Enter the type of supplemental heating or reheat coil if included in the unitary system. Only required if dehumidification control type is ""CoolReheat"". This coil supplements heating mode operation or reheats the supply air during dehumidification mode operation. If set point based control is used the coils operate to meet their respective supply air temperature set point.")]
[JsonProperty("supplemental_heating_coil_object_type")]
public AirLoopHVAC_UnitarySystem_SupplementalHeatingCoilObjectType SupplementalHeatingCoilObjectType { get; set; } = (AirLoopHVAC_UnitarySystem_SupplementalHeatingCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitarySystem_SupplementalHeatingCoilObjectType), "CoilHeatingDesuperheater");
        

[Description("Enter the name of the supplemental heating coil if included in the unitary system" +
    ". Only required if dehumidification control type is \"CoolReheat\".")]
[JsonProperty("supplemental_heating_coil_name")]
public string SupplementalHeatingCoilName { get; set; } = "";
        

[Description(@"Enter the method used to determine the cooling supply air volume flow rate. None is used when a cooling coil is not included in the unitary system or this field may be blank. SupplyAirFlowRate is selected when the magnitude of the supply air volume is used. FlowPerFloorArea is selected when the supply air volume flow rate is based on total floor area served by the unitary system. FractionOfAutosizedCoolingValue is selected when the supply air volume is a fraction of the value determined by the simulation. FlowPerCoolingCapacity is selected when the supply air volume is a fraction of the cooling capacity as determined by the simulation.")]
[JsonProperty("cooling_supply_air_flow_rate_method")]
public AirLoopHVAC_UnitarySystem_CoolingSupplyAirFlowRateMethod CoolingSupplyAirFlowRateMethod { get; set; } = (AirLoopHVAC_UnitarySystem_CoolingSupplyAirFlowRateMethod)Enum.Parse(typeof(AirLoopHVAC_UnitarySystem_CoolingSupplyAirFlowRateMethod), "FlowPerCoolingCapacity");
        

[Description("Enter the magnitude of the supply air volume flow rate during cooling operation. " +
    "Required field when Cooling Supply Air Flow Rate Method is SupplyAirFlowRate. Th" +
    "is field may be blank if a cooling coil is not included in the unitary system.")]
[JsonProperty("cooling_supply_air_flow_rate")]
public string CoolingSupplyAirFlowRate { get; set; } = "";
        

[Description("Enter the supply air volume flow rate per total floor area fraction. Required fie" +
    "ld when Cooling Supply Air Flow Rate Method is FlowPerFloorArea. This field may " +
    "be blank if a cooling coil is not included in the unitary system.")]
[JsonProperty("cooling_supply_air_flow_rate_per_floor_area")]
public System.Nullable<float> CoolingSupplyAirFlowRatePerFloorArea { get; set; } = null;
        

[Description(@"Enter the supply air volume flow rate as a fraction of the cooling supply air flow rate. Required field when Cooling Supply Air Flow Rate Method is FractionOfAutosizedCoolingValue. This field may be blank if a cooling coil is not included in the unitary system.")]
[JsonProperty("cooling_fraction_of_autosized_cooling_supply_air_flow_rate")]
public System.Nullable<float> CoolingFractionOfAutosizedCoolingSupplyAirFlowRate { get; set; } = null;
        

[Description("Enter the supply air volume flow rate as a fraction of the cooling capacity. Requ" +
    "ired field when Cooling Supply Air Flow Rate Method is FlowPerCoolingCapacity. T" +
    "his field may be blank if a cooling coil is not included in the unitary system.")]
[JsonProperty("cooling_supply_air_flow_rate_per_unit_of_capacity")]
public System.Nullable<float> CoolingSupplyAirFlowRatePerUnitOfCapacity { get; set; } = null;
        

[Description(@"Enter the method used to determine the heating supply air volume flow rate. None is used when a heating coil is not included in the unitary system or this field may be blank. SupplyAirFlowRate is selected when the magnitude of the supply air volume is used. FlowPerFloorArea is selected when the supply air volume flow rate is based on total floor area served by the unitary system. FractionOfAutosizedHeatingValue is selected when the supply air volume is a fraction of the value determined by the simulation. FlowPerHeatingCapacity is selected when the supply air volume is a fraction of the heating capacity as determined by the simulation.")]
[JsonProperty("heating_supply_air_flow_rate_method")]
public AirLoopHVAC_UnitarySystem_HeatingSupplyAirFlowRateMethod HeatingSupplyAirFlowRateMethod { get; set; } = (AirLoopHVAC_UnitarySystem_HeatingSupplyAirFlowRateMethod)Enum.Parse(typeof(AirLoopHVAC_UnitarySystem_HeatingSupplyAirFlowRateMethod), "FlowPerFloorArea");
        

[Description("Enter the magnitude of the supply air volume flow rate during heating operation. " +
    "Required field when Heating Supply Air Flow Rate Method is SupplyAirFlowRate. Th" +
    "is field may be blank if a heating coil is not included in the unitary system.")]
[JsonProperty("heating_supply_air_flow_rate")]
public string HeatingSupplyAirFlowRate { get; set; } = "";
        

[Description("Enter the supply air volume flow rate per total floor area fraction. Required fie" +
    "ld when Heating Supply Air Flow Rate Method is FlowPerFloorArea. This field may " +
    "be blank if a heating coil is not included in the unitary system.")]
[JsonProperty("heating_supply_air_flow_rate_per_floor_area")]
public System.Nullable<float> HeatingSupplyAirFlowRatePerFloorArea { get; set; } = null;
        

[Description(@"Enter the supply air volume flow rate as a fraction of the heating supply air flow rate. Required field when Heating Supply Air Flow Rate Method is FractionOfAutosizedHeatingValue. This field may be blank if a heating coil is not included in the unitary system.")]
[JsonProperty("heating_fraction_of_autosized_heating_supply_air_flow_rate")]
public System.Nullable<float> HeatingFractionOfAutosizedHeatingSupplyAirFlowRate { get; set; } = null;
        

[Description("Enter the supply air volume flow rate as a fraction of the heating capacity. Requ" +
    "ired field when Heating Supply Air Flow Rate Method is FlowPerHeatingCapacity. T" +
    "his field may be blank if a heating coil is not included in the unitary system.")]
[JsonProperty("heating_supply_air_flow_rate_per_unit_of_capacity")]
public System.Nullable<float> HeatingSupplyAirFlowRatePerUnitOfCapacity { get; set; } = null;
        

[Description(@"Enter the method used to determine the supply air volume flow rate when no cooling or heating is required. None is used when a cooling and heating coil is not included in the unitary system or this field may be blank. SupplyAirFlowRate is selected when the magnitude of the supply air volume is used. FlowPerFloorArea is selected when the supply air volume flow rate is based on total floor area served by the unitary system. FractionOfAutosizedCoolingValue is selected when the supply air volume is a fraction of the cooling value determined by the simulation. FractionOfAutosizedHeatingValue is selected when the supply air volume is a fraction of the heating value determined by the simulation. FlowPerCoolingCapacity is selected when the supply air volume is a fraction of the cooling capacity as determined by the simulation. FlowPerHeatingCapacity is selected when the supply air volume is a fraction of the heating capacity as determined by the simulation.")]
[JsonProperty("no_load_supply_air_flow_rate_method")]
public AirLoopHVAC_UnitarySystem_NoLoadSupplyAirFlowRateMethod NoLoadSupplyAirFlowRateMethod { get; set; } = (AirLoopHVAC_UnitarySystem_NoLoadSupplyAirFlowRateMethod)Enum.Parse(typeof(AirLoopHVAC_UnitarySystem_NoLoadSupplyAirFlowRateMethod), "FlowPerCoolingCapacity");
        

[Description("Enter the magnitude of the supply air volume flow rate during when no cooling or " +
    "heating is required. Required field when No Load Supply Air Flow Rate Method is " +
    "SupplyAirFlowRate.")]
[JsonProperty("no_load_supply_air_flow_rate")]
public string NoLoadSupplyAirFlowRate { get; set; } = "";
        

[Description("Enter the supply air volume flow rate per total floor area fraction. Required fie" +
    "ld when No Load Supply Air Flow Rate Method is FlowPerFloorArea.")]
[JsonProperty("no_load_supply_air_flow_rate_per_floor_area")]
public System.Nullable<float> NoLoadSupplyAirFlowRatePerFloorArea { get; set; } = null;
        

[Description("Enter the supply air volume flow rate as a fraction of the cooling supply air flo" +
    "w rate. Required field when No Load Supply Air Flow Rate Method is FractionOfAut" +
    "osizedCoolingValue.")]
[JsonProperty("no_load_fraction_of_autosized_cooling_supply_air_flow_rate")]
public System.Nullable<float> NoLoadFractionOfAutosizedCoolingSupplyAirFlowRate { get; set; } = null;
        

[Description("Enter the supply air volume flow rate as a fraction of the heating supply air flo" +
    "w rate. Required field when No Load Supply Air Flow Rate Method is FractionOfAut" +
    "osizedHeatingValue.")]
[JsonProperty("no_load_fraction_of_autosized_heating_supply_air_flow_rate")]
public System.Nullable<float> NoLoadFractionOfAutosizedHeatingSupplyAirFlowRate { get; set; } = null;
        

[Description("Enter the supply air volume flow rate as a fraction of the cooling capacity. Requ" +
    "ired field when No Load Supply Air Flow Rate Method is FlowPerCoolingCapacity.")]
[JsonProperty("no_load_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation")]
public System.Nullable<float> NoLoadSupplyAirFlowRatePerUnitOfCapacityDuringCoolingOperation { get; set; } = null;
        

[Description("Enter the supply air volume flow rate as a fraction of the heating capacity. Requ" +
    "ired field when No Load Supply Air Flow Rate Method is FlowPerHeatingCapacity.")]
[JsonProperty("no_load_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation")]
public System.Nullable<float> NoLoadSupplyAirFlowRatePerUnitOfCapacityDuringHeatingOperation { get; set; } = null;
        

[Description("Enter the maximum supply air temperature leaving the heating coil. When Control T" +
    "ype = SingleZoneVAV, enter the maximum air temperature limit for reduced fan spe" +
    "ed.")]
[JsonProperty("maximum_supply_air_temperature")]
public string MaximumSupplyAirTemperature { get; set; } = (System.String)"80";
        

[Description("Enter the maximum outdoor dry-bulb temperature for supplemental heater operation." +
    "")]
[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForSupplementalHeaterOperation { get; set; } = (System.Nullable<float>)Single.Parse("21", CultureInfo.InvariantCulture);
        

[Description("If this field is blank, outdoor temperature from the weather file is used. If thi" +
    "s field is not blank, the node name specified determines the outdoor temperature" +
    " used for controlling supplemental heater operation.")]
[JsonProperty("outdoor_dry_bulb_temperature_sensor_node_name")]
public string OutdoorDryBulbTemperatureSensorNodeName { get; set; } = "";
        

[Description("Used only for water source heat pump. The maximum on-off cycling rate for the com" +
    "pressor. Suggested value is 2.5 for a typical heat pump.")]
[JsonProperty("maximum_cycling_rate")]
public System.Nullable<float> MaximumCyclingRate { get; set; } = (System.Nullable<float>)Single.Parse("2.5", CultureInfo.InvariantCulture);
        

[Description("Used only for water source heat pump. Time constant for the cooling coil\'s capaci" +
    "ty to reach steady state after startup. Suggested value is 60 for a typical heat" +
    " pump.")]
[JsonProperty("heat_pump_time_constant")]
public System.Nullable<float> HeatPumpTimeConstant { get; set; } = (System.Nullable<float>)Single.Parse("60", CultureInfo.InvariantCulture);
        

[Description("Used only for water source heat pump. The fraction of on-cycle power use to adjus" +
    "t the part load fraction based on the off-cycle power consumption due to crankca" +
    "se heaters, controls, fans, and etc. Suggested value is 0.01 for a typical heat " +
    "pump.")]
[JsonProperty("fraction_of_on_cycle_power_use")]
public System.Nullable<float> FractionOfOnCyclePowerUse { get; set; } = (System.Nullable<float>)Single.Parse("0.01", CultureInfo.InvariantCulture);
        

[Description("Used only for water source heat pump. Programmed time delay for heat pump fan to " +
    "shut off after compressor cycle off. Only required when fan operating mode is cy" +
    "cling. Enter 0 when fan operating mode is continuous.")]
[JsonProperty("heat_pump_fan_delay_time")]
public System.Nullable<float> HeatPumpFanDelayTime { get; set; } = (System.Nullable<float>)Single.Parse("60", CultureInfo.InvariantCulture);
        

[Description("Enter the value of ancillary electric power for controls or other devices consume" +
    "d during the on cycle.")]
[JsonProperty("ancillary_on_cycle_electric_power")]
public System.Nullable<float> AncillaryOnCycleElectricPower { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Enter the value of ancillary electric power for controls or other devices consume" +
    "d during the off cycle.")]
[JsonProperty("ancillary_off_cycle_electric_power")]
public System.Nullable<float> AncillaryOffCycleElectricPower { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("If non-zero, then the heat recovery inlet and outlet node names must be entered. " +
    "Used for heat recovery to an EnergyPlus plant loop.")]
[JsonProperty("design_heat_recovery_water_flow_rate")]
public System.Nullable<float> DesignHeatRecoveryWaterFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Enter the maximum heat recovery inlet temperature allowed for heat recovery.")]
[JsonProperty("maximum_temperature_for_heat_recovery")]
public System.Nullable<float> MaximumTemperatureForHeatRecovery { get; set; } = (System.Nullable<float>)Single.Parse("80", CultureInfo.InvariantCulture);
        

[Description("Enter the name of the heat recovery water inlet node if plant water loop connecti" +
    "ons are present.")]
[JsonProperty("heat_recovery_water_inlet_node_name")]
public string HeatRecoveryWaterInletNodeName { get; set; } = "";
        

[Description("Enter the name of the heat recovery water outlet node if plant water loop connect" +
    "ions are present.")]
[JsonProperty("heat_recovery_water_outlet_node_name")]
public string HeatRecoveryWaterOutletNodeName { get; set; } = "";
        

[Description("Enter the type of performance specification object used to describe the multispee" +
    "d coil.")]
[JsonProperty("design_specification_multispeed_object_type")]
public AirLoopHVAC_UnitarySystem_DesignSpecificationMultispeedObjectType DesignSpecificationMultispeedObjectType { get; set; } = (AirLoopHVAC_UnitarySystem_DesignSpecificationMultispeedObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitarySystem_DesignSpecificationMultispeedObjectType), "UnitarySystemPerformanceMultispeed");
        

[Description("Enter the name of the performance specification object used to describe the multi" +
    "speed coil.")]
[JsonProperty("design_specification_multispeed_object_name")]
public string DesignSpecificationMultispeedObjectName { get; set; } = "";
    }
    
    public enum AirLoopHVAC_UnitarySystem_ControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Load")]
        Load = 1,
        
        [JsonProperty("SetPoint")]
        SetPoint = 2,
        
        [JsonProperty("SingleZoneVAV")]
        SingleZoneVAV = 3,
    }
    
    public enum AirLoopHVAC_UnitarySystem_DehumidificationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("Multimode")]
        Multimode = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum AirLoopHVAC_UnitarySystem_SupplyFanObjectType
    {
        
        [JsonProperty("Fan:ComponentModel")]
        FanComponentModel = 0,
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 1,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 2,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 3,
        
        [JsonProperty("Fan:VariableVolume")]
        FanVariableVolume = 4,
    }
    
    public enum AirLoopHVAC_UnitarySystem_FanPlacement
    {
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 0,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 1,
    }
    
    public enum AirLoopHVAC_UnitarySystem_HeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:DX:MultiSpeed")]
        CoilHeatingDXMultiSpeed = 0,
        
        [JsonProperty("Coil:Heating:DX:SingleSpeed")]
        CoilHeatingDXSingleSpeed = 1,
        
        [JsonProperty("Coil:Heating:DX:VariableSpeed")]
        CoilHeatingDXVariableSpeed = 2,
        
        [JsonProperty("Coil:Heating:Desuperheater")]
        CoilHeatingDesuperheater = 3,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 4,
        
        [JsonProperty("Coil:Heating:Electric:MultiStage")]
        CoilHeatingElectricMultiStage = 5,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 6,
        
        [JsonProperty("Coil:Heating:Gas:MultiStage")]
        CoilHeatingGasMultiStage = 7,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 8,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 9,
        
        [JsonProperty("Coil:Heating:WaterToAirHeatPump:EquationFit")]
        CoilHeatingWaterToAirHeatPumpEquationFit = 10,
        
        [JsonProperty("Coil:Heating:WaterToAirHeatPump:ParameterEstimation")]
        CoilHeatingWaterToAirHeatPumpParameterEstimation = 11,
        
        [JsonProperty("Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit")]
        CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit = 12,
        
        [JsonProperty("Coil:UserDefined")]
        CoilUserDefined = 13,
    }
    
    public enum AirLoopHVAC_UnitarySystem_CoolingCoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:DX")]
        CoilCoolingDX = 0,
        
        [JsonProperty("Coil:Cooling:DX:MultiSpeed")]
        CoilCoolingDXMultiSpeed = 1,
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 2,
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed:ThermalStorage")]
        CoilCoolingDXSingleSpeedThermalStorage = 3,
        
        [JsonProperty("Coil:Cooling:DX:TwoSpeed")]
        CoilCoolingDXTwoSpeed = 4,
        
        [JsonProperty("Coil:Cooling:DX:TwoStageWithHumidityControlMode")]
        CoilCoolingDXTwoStageWithHumidityControlMode = 5,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 6,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 7,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 8,
        
        [JsonProperty("Coil:Cooling:WaterToAirHeatPump:EquationFit")]
        CoilCoolingWaterToAirHeatPumpEquationFit = 9,
        
        [JsonProperty("Coil:Cooling:WaterToAirHeatPump:ParameterEstimation")]
        CoilCoolingWaterToAirHeatPumpParameterEstimation = 10,
        
        [JsonProperty("Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit")]
        CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit = 11,
        
        [JsonProperty("Coil:UserDefined")]
        CoilUserDefined = 12,
        
        [JsonProperty("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
        CoilSystemCoolingDXHeatExchangerAssisted = 13,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatExchangerAssisted")]
        CoilSystemCoolingWaterHeatExchangerAssisted = 14,
    }
    
    public enum AirLoopHVAC_UnitarySystem_LatentLoadControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LatentOnlyLoadControl")]
        LatentOnlyLoadControl = 1,
        
        [JsonProperty("LatentOrSensibleLoadControl")]
        LatentOrSensibleLoadControl = 2,
        
        [JsonProperty("LatentWithSensibleLoadControl")]
        LatentWithSensibleLoadControl = 3,
        
        [JsonProperty("SensibleOnlyLoadControl")]
        SensibleOnlyLoadControl = 4,
    }
    
    public enum AirLoopHVAC_UnitarySystem_SupplementalHeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Desuperheater")]
        CoilHeatingDesuperheater = 0,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 1,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 2,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 3,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 4,
        
        [JsonProperty("Coil:UserDefined")]
        CoilUserDefined = 5,
    }
    
    public enum AirLoopHVAC_UnitarySystem_CoolingSupplyAirFlowRateMethod
    {
        
        [JsonProperty("FlowPerCoolingCapacity")]
        FlowPerCoolingCapacity = 0,
        
        [JsonProperty("FlowPerFloorArea")]
        FlowPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedCoolingValue")]
        FractionOfAutosizedCoolingValue = 2,
        
        [JsonProperty("None")]
        None = 3,
        
        [JsonProperty("SupplyAirFlowRate")]
        SupplyAirFlowRate = 4,
    }
    
    public enum AirLoopHVAC_UnitarySystem_HeatingSupplyAirFlowRateMethod
    {
        
        [JsonProperty("FlowPerFloorArea")]
        FlowPerFloorArea = 0,
        
        [JsonProperty("FlowPerHeatingCapacity")]
        FlowPerHeatingCapacity = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingValue")]
        FractionOfAutosizedHeatingValue = 2,
        
        [JsonProperty("None")]
        None = 3,
        
        [JsonProperty("SupplyAirFlowRate")]
        SupplyAirFlowRate = 4,
    }
    
    public enum AirLoopHVAC_UnitarySystem_NoLoadSupplyAirFlowRateMethod
    {
        
        [JsonProperty("FlowPerCoolingCapacity")]
        FlowPerCoolingCapacity = 0,
        
        [JsonProperty("FlowPerFloorArea")]
        FlowPerFloorArea = 1,
        
        [JsonProperty("FlowPerHeatingCapacity")]
        FlowPerHeatingCapacity = 2,
        
        [JsonProperty("FractionOfAutosizedCoolingValue")]
        FractionOfAutosizedCoolingValue = 3,
        
        [JsonProperty("FractionOfAutosizedHeatingValue")]
        FractionOfAutosizedHeatingValue = 4,
        
        [JsonProperty("None")]
        None = 5,
        
        [JsonProperty("SupplyAirFlowRate")]
        SupplyAirFlowRate = 6,
    }
    
    public enum AirLoopHVAC_UnitarySystem_DesignSpecificationMultispeedObjectType
    {
        
        [JsonProperty("UnitarySystemPerformance:Multispeed")]
        UnitarySystemPerformanceMultispeed = 0,
    }
    
    [Description(@"The UnitarySystemPerformance object is used to specify the air flow ratio at each operating speed. This object is primarily used for multispeed DX and water coils to allow operation at alternate flow rates different from those specified in the coil object.")]
    [JsonObject("UnitarySystemPerformance:Multispeed")]
    public class UnitarySystemPerformance_Multispeed : BHoMObject, IEnergyPlusClass
    {
        

[Description("Used only for Multi speed coils Enter the number of the following sets of data fo" +
    "r air flow rates.")]
[JsonProperty("number_of_speeds_for_heating")]
public System.Nullable<float> NumberOfSpeedsForHeating { get; set; } = null;
        

[Description("Used only for Multi speed coils Enter the number of the following sets of data fo" +
    "r air flow rates.")]
[JsonProperty("number_of_speeds_for_cooling")]
public System.Nullable<float> NumberOfSpeedsForCooling { get; set; } = null;
        

[Description(@"Controls coil operation during each HVAC timestep. This choice does not apply to speed 1 operation. Yes = operate at the highest speed possible without exceeding the current load. No = allow operation at the average of two adjacent speeds to match the current load.")]
[JsonProperty("single_mode_operation")]
public EmptyNoYes SingleModeOperation { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Used to define the no load operating air flow rate when the system fan is specifi" +
    "ed to operate continuously.")]
[JsonProperty("no_load_supply_air_flow_rate_ratio")]
public System.Nullable<float> NoLoadSupplyAirFlowRateRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("flow_ratios")]
public string FlowRatios { get; set; } = "";
    }
    
    [Description("Unitary system, heating-only with constant volume supply fan (continuous or cycli" +
        "ng) and heating coil (gas, electric, hot water, or steam). Identical to AirLoopH" +
        "VAC:UnitaryHeatOnly.")]
    [JsonObject("AirLoopHVAC:Unitary:Furnace:HeatOnly")]
    public class AirLoopHVAC_Unitary_Furnace_HeatOnly : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("furnace_air_inlet_node_name")]
public string FurnaceAirInletNodeName { get; set; } = "";
        

[JsonProperty("furnace_air_outlet_node_name")]
public string FurnaceAirOutletNodeName { get; set; } = "";
        

[Description(@"A fan operating mode schedule value of 0 indicates cycling fan mode (supply air fan cycles on and off in tandem with the heating coil). Any other schedule value indicates continuous fan mode (supply air fan operates continuously regardless of heating coil operation). Leaving this schedule name blank will default to cycling fan mode for the entire simulation period.")]
[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        

[JsonProperty("maximum_supply_air_temperature")]
public string MaximumSupplyAirTemperature { get; set; } = (System.String)"80";
        

[Description("This value should be > 0 and <= than the fan air flow rate.")]
[JsonProperty("heating_supply_air_flow_rate")]
public string HeatingSupplyAirFlowRate { get; set; } = "";
        

[JsonProperty("controlling_zone_or_thermostat_location")]
public string ControllingZoneOrThermostatLocation { get; set; } = "";
        

[Description("Fan:ConstantVolume only works with continuous fan operating mode (i.e. fan operat" +
    "ing mode schedule values are greater than 0).")]
[JsonProperty("supply_fan_object_type")]
public AirLoopHVAC_Unitary_Furnace_HeatOnly_SupplyFanObjectType SupplyFanObjectType { get; set; } = (AirLoopHVAC_Unitary_Furnace_HeatOnly_SupplyFanObjectType)Enum.Parse(typeof(AirLoopHVAC_Unitary_Furnace_HeatOnly_SupplyFanObjectType), "FanConstantVolume");
        

[JsonProperty("supply_fan_name")]
public string SupplyFanName { get; set; } = "";
        

[JsonProperty("fan_placement")]
public AirLoopHVAC_Unitary_Furnace_HeatOnly_FanPlacement FanPlacement { get; set; } = (AirLoopHVAC_Unitary_Furnace_HeatOnly_FanPlacement)Enum.Parse(typeof(AirLoopHVAC_Unitary_Furnace_HeatOnly_FanPlacement), "BlowThrough");
        

[Description("works with gas, electric, hot water and steam heating coils")]
[JsonProperty("heating_coil_object_type")]
public AirLoopHVAC_Unitary_Furnace_HeatOnly_HeatingCoilObjectType HeatingCoilObjectType { get; set; } = (AirLoopHVAC_Unitary_Furnace_HeatOnly_HeatingCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_Unitary_Furnace_HeatOnly_HeatingCoilObjectType), "CoilHeatingElectric");
        

[JsonProperty("heating_coil_name")]
public string HeatingCoilName { get; set; } = "";
    }
    
    public enum AirLoopHVAC_Unitary_Furnace_HeatOnly_SupplyFanObjectType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
    }
    
    public enum AirLoopHVAC_Unitary_Furnace_HeatOnly_FanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum AirLoopHVAC_Unitary_Furnace_HeatOnly_HeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    [Description(@"Unitary system, heating and cooling with constant volume supply fan (continuous or cycling), direct expansion (DX) cooling coil, heating coil (gas, electric, hot water, or steam), and optional reheat coil for dehumidification control. Identical to AirLoopHVAC:UnitaryHeatCool.")]
    [JsonObject("AirLoopHVAC:Unitary:Furnace:HeatCool")]
    public class AirLoopHVAC_Unitary_Furnace_HeatCool : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. A schedule value greater than zero (usually 1 is used) indicates that the unit is available to operate as needed. A value less than or equal to zero (usually zero is used) denotes that the unit must be off.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("furnace_air_inlet_node_name")]
public string FurnaceAirInletNodeName { get; set; } = "";
        

[JsonProperty("furnace_air_outlet_node_name")]
public string FurnaceAirOutletNodeName { get; set; } = "";
        

[Description(@"A fan operating mode schedule value of 0 indicates cycling fan mode (supply air fan cycles on and off in tandem with the cooling or heating coil). Any other schedule value indicates continuous fan mode (supply air fan operates continuously regardless of cooling or heating coil operation). Provide a schedule with non-zero values when high humidity control is specified. Leaving this schedule name blank will default to cycling fan mode for the entire simulation period.")]
[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        

[JsonProperty("maximum_supply_air_temperature")]
public string MaximumSupplyAirTemperature { get; set; } = (System.String)"80";
        

[Description("Must be less than or equal to the fan\'s maximum flow rate.")]
[JsonProperty("cooling_supply_air_flow_rate")]
public string CoolingSupplyAirFlowRate { get; set; } = "";
        

[Description("Must be less than or equal to the fan\'s maximum flow fate.")]
[JsonProperty("heating_supply_air_flow_rate")]
public string HeatingSupplyAirFlowRate { get; set; } = "";
        

[Description(@"Must be less than or equal to the fan's maximum flow rate. Only used when fan operating mode is continuous (disregarded for cycling fan mode). This air flow rate is used when no heating or cooling is required (i.e., the DX coil compressor and heating coil are off). If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
[JsonProperty("no_load_supply_air_flow_rate")]
public string NoLoadSupplyAirFlowRate { get; set; } = "";
        

[JsonProperty("controlling_zone_or_thermostat_location")]
public string ControllingZoneOrThermostatLocation { get; set; } = "";
        

[Description("Fan:ConstantVolume only works with continuous fan operating mode (i.e. supply air" +
    " fan operating mode schedule values not equal to 0).")]
[JsonProperty("supply_fan_object_type")]
public AirLoopHVAC_Unitary_Furnace_HeatCool_SupplyFanObjectType SupplyFanObjectType { get; set; } = (AirLoopHVAC_Unitary_Furnace_HeatCool_SupplyFanObjectType)Enum.Parse(typeof(AirLoopHVAC_Unitary_Furnace_HeatCool_SupplyFanObjectType), "FanConstantVolume");
        

[JsonProperty("supply_fan_name")]
public string SupplyFanName { get; set; } = "";
        

[JsonProperty("fan_placement")]
public AirLoopHVAC_Unitary_Furnace_HeatCool_FanPlacement FanPlacement { get; set; } = (AirLoopHVAC_Unitary_Furnace_HeatCool_FanPlacement)Enum.Parse(typeof(AirLoopHVAC_Unitary_Furnace_HeatCool_FanPlacement), "BlowThrough");
        

[Description("works with gas, electric, hot water and steam heating coils")]
[JsonProperty("heating_coil_object_type")]
public AirLoopHVAC_Unitary_Furnace_HeatCool_HeatingCoilObjectType HeatingCoilObjectType { get; set; } = (AirLoopHVAC_Unitary_Furnace_HeatCool_HeatingCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_Unitary_Furnace_HeatCool_HeatingCoilObjectType), "CoilHeatingElectric");
        

[JsonProperty("heating_coil_name")]
public string HeatingCoilName { get; set; } = "";
        

[Description("Only works with DX cooling coil types")]
[JsonProperty("cooling_coil_object_type")]
public AirLoopHVAC_Unitary_Furnace_HeatCool_CoolingCoilObjectType CoolingCoilObjectType { get; set; } = (AirLoopHVAC_Unitary_Furnace_HeatCool_CoolingCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_Unitary_Furnace_HeatCool_CoolingCoilObjectType), "CoilCoolingDXSingleSpeed");
        

[JsonProperty("cooling_coil_name")]
public string CoolingCoilName { get; set; } = "";
        

[Description(@"None = meet sensible load only Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only with cooling coil type CoilSystem:Cooling:DX:HeatExchangerAssisted. This control mode allows the heat exchanger to be turned on and off based on the zone dehumidification requirements. A ZoneControl:Humidistat object is also required. CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid with all cooling coil types. When a heat exchanger assisted cooling coil is used, the heat exchanger is locked on at all times. A ZoneControl:Humidistat object is also required.")]
[JsonProperty("dehumidification_control_type")]
public AirLoopHVAC_Unitary_Furnace_HeatCool_DehumidificationControlType DehumidificationControlType { get; set; } = (AirLoopHVAC_Unitary_Furnace_HeatCool_DehumidificationControlType)Enum.Parse(typeof(AirLoopHVAC_Unitary_Furnace_HeatCool_DehumidificationControlType), "None");
        

[Description("Only required if dehumidification control type is \"CoolReheat\" works with gas, el" +
    "ectric, hot water and steam heating coils")]
[JsonProperty("reheat_coil_object_type")]
public AirLoopHVAC_Unitary_Furnace_HeatCool_ReheatCoilObjectType ReheatCoilObjectType { get; set; } = (AirLoopHVAC_Unitary_Furnace_HeatCool_ReheatCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_Unitary_Furnace_HeatCool_ReheatCoilObjectType), "CoilHeatingDesuperheater");
        

[Description("Only required if dehumidification control type is \"CoolReheat\"")]
[JsonProperty("reheat_coil_name")]
public string ReheatCoilName { get; set; } = "";
    }
    
    public enum AirLoopHVAC_Unitary_Furnace_HeatCool_SupplyFanObjectType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
    }
    
    public enum AirLoopHVAC_Unitary_Furnace_HeatCool_FanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum AirLoopHVAC_Unitary_Furnace_HeatCool_HeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum AirLoopHVAC_Unitary_Furnace_HeatCool_CoolingCoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 1,
        
        [JsonProperty("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
        CoilSystemCoolingDXHeatExchangerAssisted = 2,
    }
    
    public enum AirLoopHVAC_Unitary_Furnace_HeatCool_DehumidificationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("Multimode")]
        Multimode = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum AirLoopHVAC_Unitary_Furnace_HeatCool_ReheatCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Desuperheater")]
        CoilHeatingDesuperheater = 0,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 1,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 2,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 3,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 4,
    }
    
    [Description("Unitary system, heating-only with constant volume supply fan (continuous or cycli" +
        "ng) and heating coil (gas, electric, hot water, or steam). Identical to AirLoopH" +
        "VAC:Unitary:Furnace:HeatOnly.")]
    [JsonObject("AirLoopHVAC:UnitaryHeatOnly")]
    public class AirLoopHVAC_UnitaryHeatOnly : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("unitary_system_air_inlet_node_name")]
public string UnitarySystemAirInletNodeName { get; set; } = "";
        

[JsonProperty("unitary_system_air_outlet_node_name")]
public string UnitarySystemAirOutletNodeName { get; set; } = "";
        

[Description(@"A fan operating mode schedule value of 0 indicates cycling fan mode (supply air fan cycles on and off in tandem with the heating coil). Any other schedule value indicates continuous fan mode (supply air fan operates continuously regardless of heating coil operation). Leaving this schedule name blank will default to cycling fan mode for the entire simulation period.")]
[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        

[JsonProperty("maximum_supply_air_temperature")]
public string MaximumSupplyAirTemperature { get; set; } = (System.String)"80";
        

[Description("This value should be > 0 and <= than the fan air flow rate.")]
[JsonProperty("heating_supply_air_flow_rate")]
public string HeatingSupplyAirFlowRate { get; set; } = "";
        

[JsonProperty("controlling_zone_or_thermostat_location")]
public string ControllingZoneOrThermostatLocation { get; set; } = "";
        

[Description("Fan:ConstantVolume only works with continuous fan operating mode (i.e. fan operat" +
    "ing mode schedule values are greater than 0).")]
[JsonProperty("supply_fan_object_type")]
public AirLoopHVAC_UnitaryHeatOnly_SupplyFanObjectType SupplyFanObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatOnly_SupplyFanObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatOnly_SupplyFanObjectType), "FanConstantVolume");
        

[JsonProperty("supply_fan_name")]
public string SupplyFanName { get; set; } = "";
        

[JsonProperty("fan_placement")]
public AirLoopHVAC_UnitaryHeatOnly_FanPlacement FanPlacement { get; set; } = (AirLoopHVAC_UnitaryHeatOnly_FanPlacement)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatOnly_FanPlacement), "BlowThrough");
        

[Description("works with gas, electric, hot water and steam heating coils")]
[JsonProperty("heating_coil_object_type")]
public AirLoopHVAC_UnitaryHeatOnly_HeatingCoilObjectType HeatingCoilObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatOnly_HeatingCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatOnly_HeatingCoilObjectType), "CoilHeatingElectric");
        

[JsonProperty("heating_coil_name")]
public string HeatingCoilName { get; set; } = "";
    }
    
    public enum AirLoopHVAC_UnitaryHeatOnly_SupplyFanObjectType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
    }
    
    public enum AirLoopHVAC_UnitaryHeatOnly_FanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum AirLoopHVAC_UnitaryHeatOnly_HeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    [Description(@"Unitary system, heating and cooling with constant volume supply fan (continuous or cycling), direct expansion (DX) cooling coil, heating coil (gas, electric, hot water, or steam), and optional reheat coil for dehumidification control. Identical to AirLoopHVAC:Unitary:Furnace:HeatCool.")]
    [JsonObject("AirLoopHVAC:UnitaryHeatCool")]
    public class AirLoopHVAC_UnitaryHeatCool : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("unitary_system_air_inlet_node_name")]
public string UnitarySystemAirInletNodeName { get; set; } = "";
        

[JsonProperty("unitary_system_air_outlet_node_name")]
public string UnitarySystemAirOutletNodeName { get; set; } = "";
        

[Description(@"A fan operating mode schedule value of 0 indicates cycling fan mode (supply air fan cycles on and off in tandem with the cooling or heating coil). Any other schedule value indicates continuous fan mode (supply air fan operates continuously regardless of cooling or heating coil operation). Provide a schedule with non-zero values when high humidity control is specified. Leaving this schedule name blank will default to cycling fan mode for the entire simulation period.")]
[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        

[JsonProperty("maximum_supply_air_temperature")]
public string MaximumSupplyAirTemperature { get; set; } = (System.String)"80";
        

[Description("Must be less than or equal to the fan\'s maximum flow rate.")]
[JsonProperty("cooling_supply_air_flow_rate")]
public string CoolingSupplyAirFlowRate { get; set; } = "";
        

[Description("Must be less than or equal to the fan\'s maximum flow rate.")]
[JsonProperty("heating_supply_air_flow_rate")]
public string HeatingSupplyAirFlowRate { get; set; } = "";
        

[Description(@"Must be less than or equal to the fan's maximum flow rate. Only used when fan operating mode is continuous (disregarded for cycling fan mode). This air flow rate is used when no heating or cooling is required (i.e., the DX coil compressor and heating coil are off). If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
[JsonProperty("no_load_supply_air_flow_rate")]
public string NoLoadSupplyAirFlowRate { get; set; } = "";
        

[JsonProperty("controlling_zone_or_thermostat_location")]
public string ControllingZoneOrThermostatLocation { get; set; } = "";
        

[Description("Fan:ConstantVolume only works with continuous fan operating mode (i.e. supply air" +
    " fan operating mode schedule values not equal to 0).")]
[JsonProperty("supply_fan_object_type")]
public AirLoopHVAC_UnitaryHeatCool_SupplyFanObjectType SupplyFanObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatCool_SupplyFanObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatCool_SupplyFanObjectType), "FanConstantVolume");
        

[JsonProperty("supply_fan_name")]
public string SupplyFanName { get; set; } = "";
        

[JsonProperty("fan_placement")]
public AirLoopHVAC_UnitaryHeatCool_FanPlacement FanPlacement { get; set; } = (AirLoopHVAC_UnitaryHeatCool_FanPlacement)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatCool_FanPlacement), "BlowThrough");
        

[Description("works with gas, electric, hot water and steam heating coils")]
[JsonProperty("heating_coil_object_type")]
public AirLoopHVAC_UnitaryHeatCool_HeatingCoilObjectType HeatingCoilObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatCool_HeatingCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatCool_HeatingCoilObjectType), "CoilHeatingElectric");
        

[JsonProperty("heating_coil_name")]
public string HeatingCoilName { get; set; } = "";
        

[Description("Only works with DX cooling coil types or Coil:Cooling:DX:VariableSpeed.")]
[JsonProperty("cooling_coil_object_type")]
public AirLoopHVAC_UnitaryHeatCool_CoolingCoilObjectType CoolingCoilObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatCool_CoolingCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatCool_CoolingCoilObjectType), "CoilCoolingDXSingleSpeed");
        

[JsonProperty("cooling_coil_name")]
public string CoolingCoilName { get; set; } = "";
        

[Description(@"None = meet sensible load only Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only with cooling coil type CoilSystem:Cooling:DX:HeatExchangerAssisted. This control mode allows the heat exchanger to be turned on and off based on the zone dehumidification requirements. A ZoneControl:Humidistat object is also required. CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid with all cooling coil types. When a heat exchanger assisted Cooling coil is used, the heat exchanger is locked on at all times. A ZoneControl:Humidistat object is also required.")]
[JsonProperty("dehumidification_control_type")]
public AirLoopHVAC_UnitaryHeatCool_DehumidificationControlType DehumidificationControlType { get; set; } = (AirLoopHVAC_UnitaryHeatCool_DehumidificationControlType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatCool_DehumidificationControlType), "None");
        

[Description("Only required if dehumidification control type is \"CoolReheat\" works with gas, el" +
    "ectric, desuperheating, hot water and steam heating coils")]
[JsonProperty("reheat_coil_object_type")]
public AirLoopHVAC_UnitaryHeatCool_ReheatCoilObjectType ReheatCoilObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatCool_ReheatCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatCool_ReheatCoilObjectType), "CoilHeatingDesuperheater");
        

[Description("Only required if dehumidification control type is \"CoolReheat\"")]
[JsonProperty("reheat_coil_name")]
public string ReheatCoilName { get; set; } = "";
    }
    
    public enum AirLoopHVAC_UnitaryHeatCool_SupplyFanObjectType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
    }
    
    public enum AirLoopHVAC_UnitaryHeatCool_FanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum AirLoopHVAC_UnitaryHeatCool_HeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum AirLoopHVAC_UnitaryHeatCool_CoolingCoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 1,
        
        [JsonProperty("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
        CoilSystemCoolingDXHeatExchangerAssisted = 2,
    }
    
    public enum AirLoopHVAC_UnitaryHeatCool_DehumidificationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("Multimode")]
        Multimode = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum AirLoopHVAC_UnitaryHeatCool_ReheatCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Desuperheater")]
        CoilHeatingDesuperheater = 0,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 1,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 2,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 3,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 4,
    }
    
    [Description("Unitary heat pump system, heating and cooling, single-speed with supply fan, dire" +
        "ct expansion (DX) cooling coil, DX heating coil (air-to-air heat pump), and supp" +
        "lemental heating coil (gas, electric, hot water, or steam).")]
    [JsonObject("AirLoopHVAC:UnitaryHeatPump:AirToAir")]
    public class AirLoopHVAC_UnitaryHeatPump_AirToAir : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. A schedule value greater than zero (usually 1 is used) indicates that the unit is available to operate as needed. A value less than or equal to zero (usually zero is used) denotes that the unit must be off.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Must be less than or equal to the fan\'s maximum flow rate.")]
[JsonProperty("cooling_supply_air_flow_rate")]
public string CoolingSupplyAirFlowRate { get; set; } = "";
        

[Description("Must be less than or equal to the fan\'s maximum flow rate.")]
[JsonProperty("heating_supply_air_flow_rate")]
public string HeatingSupplyAirFlowRate { get; set; } = "";
        

[Description(@"Must be less than or equal to the fan's maximum flow rate. Only used when fan operating mode is continuous (disregarded for cycling fan mode). This air flow rate is used when no heating or cooling is required (i.e., the DX coil compressor and supplemental heating coil are off). If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
[JsonProperty("no_load_supply_air_flow_rate")]
public string NoLoadSupplyAirFlowRate { get; set; } = "";
        

[JsonProperty("controlling_zone_or_thermostat_location")]
public string ControllingZoneOrThermostatLocation { get; set; } = "";
        

[Description("Fan:ConstantVolume only works with continuous fan operating mode (i.e. fan operat" +
    "ing mode schedule values are greater than 0 or the fan operating mode schedule n" +
    "ame field is left blank).")]
[JsonProperty("supply_air_fan_object_type")]
public AirLoopHVAC_UnitaryHeatPump_AirToAir_SupplyAirFanObjectType SupplyAirFanObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatPump_AirToAir_SupplyAirFanObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatPump_AirToAir_SupplyAirFanObjectType), "FanConstantVolume");
        

[Description("Needs to match in the fan object")]
[JsonProperty("supply_air_fan_name")]
public string SupplyAirFanName { get; set; } = "";
        

[Description("Only works with Coil:Heating:DX:SingleSpeed or Coil:Heating:DX:VariableSpeed or C" +
    "oilSystem:IntegratedHeatPump:AirSource")]
[JsonProperty("heating_coil_object_type")]
public AirLoopHVAC_UnitaryHeatPump_AirToAir_HeatingCoilObjectType HeatingCoilObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatPump_AirToAir_HeatingCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatPump_AirToAir_HeatingCoilObjectType), "CoilHeatingDXSingleSpeed");
        

[Description("Needs to match in the DX heating coil object")]
[JsonProperty("heating_coil_name")]
public string HeatingCoilName { get; set; } = "";
        

[Description("Only works with Coil:Cooling:DX:SingleSpeed or CoilSystem:Cooling:DX:HeatExchange" +
    "rAssisted or Coil:Cooling:DX:VariableSpeed or CoilSystem:IntegratedHeatPump:AirS" +
    "ource")]
[JsonProperty("cooling_coil_object_type")]
public AirLoopHVAC_UnitaryHeatPump_AirToAir_CoolingCoilObjectType CoolingCoilObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatPump_AirToAir_CoolingCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatPump_AirToAir_CoolingCoilObjectType), "CoilCoolingDXSingleSpeed");
        

[Description("Needs to match in the DX cooling coil object")]
[JsonProperty("cooling_coil_name")]
public string CoolingCoilName { get; set; } = "";
        

[Description("works with gas, electric, hot water and steam heating coils")]
[JsonProperty("supplemental_heating_coil_object_type")]
public AirLoopHVAC_UnitaryHeatPump_AirToAir_SupplementalHeatingCoilObjectType SupplementalHeatingCoilObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatPump_AirToAir_SupplementalHeatingCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatPump_AirToAir_SupplementalHeatingCoilObjectType), "CoilHeatingElectric");
        

[Description("Needs to match in the supplemental heating coil object")]
[JsonProperty("supplemental_heating_coil_name")]
public string SupplementalHeatingCoilName { get; set; } = "";
        

[JsonProperty("maximum_supply_air_temperature_from_supplemental_heater")]
public string MaximumSupplyAirTemperatureFromSupplementalHeater { get; set; } = "";
        

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForSupplementalHeaterOperation { get; set; } = (System.Nullable<float>)Single.Parse("21", CultureInfo.InvariantCulture);
        

[JsonProperty("fan_placement")]
public AirLoopHVAC_UnitaryHeatPump_AirToAir_FanPlacement FanPlacement { get; set; } = (AirLoopHVAC_UnitaryHeatPump_AirToAir_FanPlacement)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatPump_AirToAir_FanPlacement), "BlowThrough");
        

[Description(@"A fan operating mode schedule value of 0 indicates cycling fan mode (supply air fan cycles on and off in tandem with the cooling or heating coil). Any other schedule value indicates continuous fan mode (supply air fan operates continuously regardless of cooling or heating coil operation). Leaving this schedule name blank will default to cycling fan mode for the entire simulation period.")]
[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        

[Description(@"None = meet sensible load only Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only with cooling coil type CoilSystem:Cooling:DX:HeatExchangerAssisted. This control mode allows the heat exchanger to be turned on and off based on the zone dehumidification requirements. A ZoneControl:Humidistat object is also required. CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid with all cooling coil types. When a heat exchanger assisted Cooling coil is used, the heat exchanger is locked on at all times. A ZoneControl:Humidistat object is also required.")]
[JsonProperty("dehumidification_control_type")]
public AirLoopHVAC_UnitaryHeatPump_AirToAir_DehumidificationControlType DehumidificationControlType { get; set; } = (AirLoopHVAC_UnitaryHeatPump_AirToAir_DehumidificationControlType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatPump_AirToAir_DehumidificationControlType), "None");
    }
    
    public enum AirLoopHVAC_UnitaryHeatPump_AirToAir_SupplyAirFanObjectType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
    }
    
    public enum AirLoopHVAC_UnitaryHeatPump_AirToAir_HeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:DX:SingleSpeed")]
        CoilHeatingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Heating:DX:VariableSpeed")]
        CoilHeatingDXVariableSpeed = 1,
        
        [JsonProperty("CoilSystem:IntegratedHeatPump:AirSource")]
        CoilSystemIntegratedHeatPumpAirSource = 2,
    }
    
    public enum AirLoopHVAC_UnitaryHeatPump_AirToAir_CoolingCoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 1,
        
        [JsonProperty("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
        CoilSystemCoolingDXHeatExchangerAssisted = 2,
        
        [JsonProperty("CoilSystem:IntegratedHeatPump:AirSource")]
        CoilSystemIntegratedHeatPumpAirSource = 3,
    }
    
    public enum AirLoopHVAC_UnitaryHeatPump_AirToAir_SupplementalHeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum AirLoopHVAC_UnitaryHeatPump_AirToAir_FanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum AirLoopHVAC_UnitaryHeatPump_AirToAir_DehumidificationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("Multimode")]
        Multimode = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    [Description(@"Unitary heat pump system, heating and cooling, single-speed with constant volume supply fan (continuous or cycling), direct expansion (DX) cooling coil, DX heating coil (water-to-air heat pump), and supplemental heating coil (gas, electric, hot water, or steam).")]
    [JsonObject("AirLoopHVAC:UnitaryHeatPump:WaterToAir")]
    public class AirLoopHVAC_UnitaryHeatPump_WaterToAir : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("This value should be > 0 and <= than the fan air flow rate.")]
[JsonProperty("supply_air_flow_rate")]
public string SupplyAirFlowRate { get; set; } = "";
        

[JsonProperty("controlling_zone_or_thermostat_location")]
public string ControllingZoneOrThermostatLocation { get; set; } = "";
        

[Description("Only works with On/Off Fan")]
[JsonProperty("supply_air_fan_object_type")]
public AirLoopHVAC_UnitaryHeatPump_WaterToAir_SupplyAirFanObjectType SupplyAirFanObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatPump_WaterToAir_SupplyAirFanObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatPump_WaterToAir_SupplyAirFanObjectType), "FanOnOff");
        

[Description("Needs to match Fan:OnOff object")]
[JsonProperty("supply_air_fan_name")]
public string SupplyAirFanName { get; set; } = "";
        

[JsonProperty("heating_coil_object_type")]
public AirLoopHVAC_UnitaryHeatPump_WaterToAir_HeatingCoilObjectType HeatingCoilObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatPump_WaterToAir_HeatingCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatPump_WaterToAir_HeatingCoilObjectType), "CoilHeatingWaterToAirHeatPumpEquationFit");
        

[Description("Needs to match in the water-to-air heat pump heating coil object")]
[JsonProperty("heating_coil_name")]
public string HeatingCoilName { get; set; } = "";
        

[JsonProperty("heating_convergence")]
public System.Nullable<float> HeatingConvergence { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[JsonProperty("cooling_coil_object_type")]
public AirLoopHVAC_UnitaryHeatPump_WaterToAir_CoolingCoilObjectType CoolingCoilObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatPump_WaterToAir_CoolingCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatPump_WaterToAir_CoolingCoilObjectType), "CoilCoolingWaterToAirHeatPumpEquationFit");
        

[Description("Needs to match in the water-to-air heat pump cooling coil object")]
[JsonProperty("cooling_coil_name")]
public string CoolingCoilName { get; set; } = "";
        

[JsonProperty("cooling_convergence")]
public System.Nullable<float> CoolingConvergence { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[Description("The maximum on-off cycling rate for the compressor Suggested value is 2.5 for a t" +
    "ypical heat pump")]
[JsonProperty("maximum_cycling_rate")]
public System.Nullable<float> MaximumCyclingRate { get; set; } = (System.Nullable<float>)Single.Parse("2.5", CultureInfo.InvariantCulture);
        

[Description("Time constant for the cooling coil\'s capacity to reach steady state after startup" +
    " Suggested value is 60 for a typical heat pump")]
[JsonProperty("heat_pump_time_constant")]
public System.Nullable<float> HeatPumpTimeConstant { get; set; } = (System.Nullable<float>)Single.Parse("60", CultureInfo.InvariantCulture);
        

[Description("The fraction of on-cycle power use to adjust the part load fraction based on the " +
    "off-cycle power consumption due to crankcase heaters, controls, fans, and etc. S" +
    "uggested value is 0.01 for a typical heat pump")]
[JsonProperty("fraction_of_on_cycle_power_use")]
public System.Nullable<float> FractionOfOnCyclePowerUse { get; set; } = (System.Nullable<float>)Single.Parse("0.01", CultureInfo.InvariantCulture);
        

[Description("Programmed time delay for heat pump fan to shut off after compressor cycle off. O" +
    "nly required when fan operating mode is cycling Enter 0 when fan operating mode " +
    "is continuous")]
[JsonProperty("heat_pump_fan_delay_time")]
public System.Nullable<float> HeatPumpFanDelayTime { get; set; } = (System.Nullable<float>)Single.Parse("60", CultureInfo.InvariantCulture);
        

[Description("works with gas, electric, hot water and steam heating coils")]
[JsonProperty("supplemental_heating_coil_object_type")]
public AirLoopHVAC_UnitaryHeatPump_WaterToAir_SupplementalHeatingCoilObjectType SupplementalHeatingCoilObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatPump_WaterToAir_SupplementalHeatingCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatPump_WaterToAir_SupplementalHeatingCoilObjectType), "CoilHeatingElectric");
        

[Description("Needs to match in the supplemental heating coil object")]
[JsonProperty("supplemental_heating_coil_name")]
public string SupplementalHeatingCoilName { get; set; } = "";
        

[JsonProperty("maximum_supply_air_temperature_from_supplemental_heater")]
public string MaximumSupplyAirTemperatureFromSupplementalHeater { get; set; } = "";
        

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForSupplementalHeaterOperation { get; set; } = (System.Nullable<float>)Single.Parse("21", CultureInfo.InvariantCulture);
        

[JsonProperty("outdoor_dry_bulb_temperature_sensor_node_name")]
public string OutdoorDryBulbTemperatureSensorNodeName { get; set; } = "";
        

[JsonProperty("fan_placement")]
public AirLoopHVAC_UnitaryHeatPump_WaterToAir_FanPlacement FanPlacement { get; set; } = (AirLoopHVAC_UnitaryHeatPump_WaterToAir_FanPlacement)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatPump_WaterToAir_FanPlacement), "BlowThrough");
        

[Description(@"Enter the name of a schedule that controls fan operation. Schedule values of 0 denote cycling fan operation (fan cycles with cooling or heating coil). Schedule values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this field is left blank.")]
[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        

[Description("None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint. as" +
    " required to meet the humidity setpoint. Valid only with Coil:Cooling:WaterToAir" +
    "HeatPump:EquationFit or Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit" +
    "")]
[JsonProperty("dehumidification_control_type")]
public AirLoopHVAC_UnitaryHeatPump_WaterToAir_DehumidificationControlType DehumidificationControlType { get; set; } = (AirLoopHVAC_UnitaryHeatPump_WaterToAir_DehumidificationControlType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatPump_WaterToAir_DehumidificationControlType), "None");
        

[Description(@"used only when the heat pump coils are of the type WaterToAirHeatPump:EquationFit Constant results in 100% water flow regardless of compressor PLR Cycling results in water flow that matches compressor PLR ConstantOnDemand results in 100% water flow whenever the coil is on, but is 0% whenever the coil has no load")]
[JsonProperty("heat_pump_coil_water_flow_mode")]
public AirLoopHVAC_UnitaryHeatPump_WaterToAir_HeatPumpCoilWaterFlowMode HeatPumpCoilWaterFlowMode { get; set; } = (AirLoopHVAC_UnitaryHeatPump_WaterToAir_HeatPumpCoilWaterFlowMode)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatPump_WaterToAir_HeatPumpCoilWaterFlowMode), "Cycling");
    }
    
    public enum AirLoopHVAC_UnitaryHeatPump_WaterToAir_SupplyAirFanObjectType
    {
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 0,
    }
    
    public enum AirLoopHVAC_UnitaryHeatPump_WaterToAir_HeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:WaterToAirHeatPump:EquationFit")]
        CoilHeatingWaterToAirHeatPumpEquationFit = 0,
        
        [JsonProperty("Coil:Heating:WaterToAirHeatPump:ParameterEstimation")]
        CoilHeatingWaterToAirHeatPumpParameterEstimation = 1,
        
        [JsonProperty("Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit")]
        CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit = 2,
    }
    
    public enum AirLoopHVAC_UnitaryHeatPump_WaterToAir_CoolingCoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:WaterToAirHeatPump:EquationFit")]
        CoilCoolingWaterToAirHeatPumpEquationFit = 0,
        
        [JsonProperty("Coil:Cooling:WaterToAirHeatPump:ParameterEstimation")]
        CoilCoolingWaterToAirHeatPumpParameterEstimation = 1,
        
        [JsonProperty("Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit")]
        CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit = 2,
    }
    
    public enum AirLoopHVAC_UnitaryHeatPump_WaterToAir_SupplementalHeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum AirLoopHVAC_UnitaryHeatPump_WaterToAir_FanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum AirLoopHVAC_UnitaryHeatPump_WaterToAir_DehumidificationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    public enum AirLoopHVAC_UnitaryHeatPump_WaterToAir_HeatPumpCoilWaterFlowMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Constant")]
        Constant = 1,
        
        [JsonProperty("ConstantOnDemand")]
        ConstantOnDemand = 2,
        
        [JsonProperty("Cycling")]
        Cycling = 3,
    }
    
    [Description(@"Unitary system, heating and cooling with constant volume supply fan (continuous or cycling), direct expansion (DX) cooling coil, heating coil (gas, electric, hot water, steam, or DX air-to-air heat pump) and bypass damper for variable volume flow to terminal units. Used with AirTerminal:SingleDuct:VAV:HeatAndCool:Reheat or AirTerminal:SingleDuct:VAV:HeatAndCool:NoReheat.")]
    [JsonObject("AirLoopHVAC:UnitaryHeatCool:VAVChangeoverBypass")]
    public class AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Enter the availability schedule name. Schedule values of zero denote system is Off. Non-zero schedule values denote system is available to operate.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Enter the system air flow rate during cooling operation or specify autosize.")]
[JsonProperty("cooling_supply_air_flow_rate")]
public string CoolingSupplyAirFlowRate { get; set; } = "";
        

[Description("Enter the system air flow rate during heating operation or specify autosize.")]
[JsonProperty("heating_supply_air_flow_rate")]
public string HeatingSupplyAirFlowRate { get; set; } = "";
        

[Description(@"Only used when the supply air fan operating mode is continuous (see field Supply air fan operating mode schedule name). This system air flow rate is used when no heating or cooling is required and the coils are off. If this field is left blank or zero, the system air flow rate from the previous on cycle (either cooling or heating) is used.")]
[JsonProperty("no_load_supply_air_flow_rate")]
public string NoLoadSupplyAirFlowRate { get; set; } = "";
        

[Description("Enter the outdoor air flow rate during cooling operation or specify autosize.")]
[JsonProperty("cooling_outdoor_air_flow_rate")]
public string CoolingOutdoorAirFlowRate { get; set; } = "";
        

[Description("Enter the outdoor air flow rate during heating operation or specify autosize.")]
[JsonProperty("heating_outdoor_air_flow_rate")]
public string HeatingOutdoorAirFlowRate { get; set; } = "";
        

[Description(@"Only used when the supply air fan operating mode is continuous (see field Supply air fan operating mode schedule name). This outdoor air flow rate is used when no heating or cooling is required and the coils are off. If this field is left blank or zero, the outdoor air flow rate from the previous on cycle (either cooling or heating) is used.")]
[JsonProperty("no_load_outdoor_air_flow_rate")]
public string NoLoadOutdoorAirFlowRate { get; set; } = "";
        

[Description("Enter the name of a schedule that contains multipliers for the outdoor air flow r" +
    "ates. Schedule values must be from 0 to 1. If field is left blank, model assumes" +
    " multiplier is 1 for the entire simulation period.")]
[JsonProperty("outdoor_air_flow_rate_multiplier_schedule_name")]
public string OutdoorAirFlowRateMultiplierScheduleName { get; set; } = "";
        

[Description("Enter the name of the unitary system\'s air inlet node.")]
[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[Description("Enter the name of the bypass duct mixer node. This name should be the name of the" +
    " return air node for the outdoor air mixer associated with this system. This nod" +
    "e name must be different from the air inlet node name.")]
[JsonProperty("bypass_duct_mixer_node_name")]
public string BypassDuctMixerNodeName { get; set; } = "";
        

[Description(@"Enter the name of the bypass duct splitter node. This splitter air node is the outlet node of the last component in this unitary system. For blow through fan placement, the splitter air node is the outlet node of the heating coil. For draw through fan placement, the splitter node is the outlet node of the supply air fan.")]
[JsonProperty("bypass_duct_splitter_node_name")]
public string BypassDuctSplitterNodeName { get; set; } = "";
        

[Description("Enter the name of the unitary system\'s air outlet node.")]
[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("currently only one type OutdoorAir:Mixer object is available.")]
[JsonProperty("outdoor_air_mixer_object_type")]
public AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_OutdoorAirMixerObjectType OutdoorAirMixerObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_OutdoorAirMixerObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_OutdoorAirMixerObjectType), "OutdoorAirMixer");
        

[Description("Enter the name of the outdoor air mixer used with this unitary system.")]
[JsonProperty("outdoor_air_mixer_name")]
public string OutdoorAirMixerName { get; set; } = "";
        

[Description("Specify the type of supply air fan used in this unitary system.")]
[JsonProperty("supply_air_fan_object_type")]
public AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_SupplyAirFanObjectType SupplyAirFanObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_SupplyAirFanObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_SupplyAirFanObjectType), "FanConstantVolume");
        

[Description("Enter the name of the supply air fan used in this unitary system.")]
[JsonProperty("supply_air_fan_name")]
public string SupplyAirFanName { get; set; } = "";
        

[Description("Specify supply air fan placement as either blow through or draw through. BlowThro" +
    "ugh means the supply air fan is located before the cooling coil. DrawThrough mea" +
    "ns the supply air fan is located after the heating coil.")]
[JsonProperty("supply_air_fan_placement")]
public AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_SupplyAirFanPlacement SupplyAirFanPlacement { get; set; } = (AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_SupplyAirFanPlacement)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_SupplyAirFanPlacement), "BlowThrough");
        

[Description(@"Enter the name of a schedule to control the supply air fan. Schedule Name values of zero mean that the supply air fan will cycle off if there is no cooling or heating load in any of the zones being served by this system. Non-zero schedule values mean that the supply air fan will operate continuously even if there is no cooling or heating load in any of the zones being served. If this field is left blank, the supply air fan will operate continuously for the entire simulation period.")]
[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        

[Description("Specify the type of cooling coil used in this unitary system.")]
[JsonProperty("cooling_coil_object_type")]
public AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_CoolingCoilObjectType CoolingCoilObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_CoolingCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_CoolingCoilObjectType), "CoilCoolingDXSingleSpeed");
        

[Description("Enter the name of the cooling coil used in this unitary system.")]
[JsonProperty("cooling_coil_name")]
public string CoolingCoilName { get; set; } = "";
        

[Description("works with DX, gas, electric, hot water and steam heating coils Specify the type " +
    "of heating coil used in this unitary system.")]
[JsonProperty("heating_coil_object_type")]
public AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_HeatingCoilObjectType HeatingCoilObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_HeatingCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_HeatingCoilObjectType), "CoilHeatingDXSingleSpeed");
        

[Description("Enter the name of the heating coil used in this unitary system.")]
[JsonProperty("heating_coil_name")]
public string HeatingCoilName { get; set; } = "";
        

[Description(@"CoolingPriority = system provides cooling if any zone requires cooling. HeatingPriority = system provides heating if any zone requires heating. ZonePriority = system controlled based on the total number of zones requiring cooling or heating (highest number of zones in cooling or heating determines the system's operating mode). LoadPriority = system provides cooling or heating based on total zone loads.")]
[JsonProperty("priority_control_mode")]
public AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_PriorityControlMode PriorityControlMode { get; set; } = (AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_PriorityControlMode)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_PriorityControlMode), "ZonePriority");
        

[Description("Specify the minimum outlet air temperature allowed for this unitary system during" +
    " cooling operation. This value should be less than the maximum outlet air temper" +
    "ature during heating operation.")]
[JsonProperty("minimum_outlet_air_temperature_during_cooling_operation")]
public System.Nullable<float> MinimumOutletAirTemperatureDuringCoolingOperation { get; set; } = (System.Nullable<float>)Single.Parse("8", CultureInfo.InvariantCulture);
        

[Description("Specify the maximum outlet air temperature allowed for this unitary system during" +
    " heating operation. This value should be greater than the minimum outlet air tem" +
    "perature during cooling operation.")]
[JsonProperty("maximum_outlet_air_temperature_during_heating_operation")]
public System.Nullable<float> MaximumOutletAirTemperatureDuringHeatingOperation { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[Description(@"None = meet sensible load only. Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only with Coil:Cooling:DX:TwoStageWithHumidityControlMode. CoolReheat = cool beyond the Dry-Bulb temperature setpoint as required to meet the humidity setpoint. Valid only with Coil:Cooling:DX:TwoStageWithHumidityControlMode. For all dehumidification controls, the max humidity setpoint on this unitary system's air outlet node is used. This must be set using ZoneControl:Humidistat and SetpointManager:SingleZone:Humidity:Maximum, SetpointManager:MultiZone:Humidity:Maximum or SetpointManager:MultiZone:MaximumHumidity:Average objects.")]
[JsonProperty("dehumidification_control_type")]
public AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_DehumidificationControlType DehumidificationControlType { get; set; } = (AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_DehumidificationControlType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_DehumidificationControlType), "None");
        

[Description("Enter the name of the bypass duct node connected to a plenum or mixer. This field" +
    " is required when this HVAC System is connected to a plenum or mixer. This is a " +
    "different node name than that entered in the Bypass Duct Splitter Node Name fiel" +
    "d.")]
[JsonProperty("plenum_or_mixer_inlet_node_name")]
public string PlenumOrMixerInletNodeName { get; set; } = "";
        

[Description("This is the minimum amount of time the unit operates in cooling or heating mode b" +
    "efore changing modes.")]
[JsonProperty("minimum_runtime_before_operating_mode_change")]
public System.Nullable<float> MinimumRuntimeBeforeOperatingModeChange { get; set; } = (System.Nullable<float>)Single.Parse("0.25", CultureInfo.InvariantCulture);
    }
    
    public enum AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_OutdoorAirMixerObjectType
    {
        
        [JsonProperty("OutdoorAir:Mixer")]
        OutdoorAirMixer = 0,
    }
    
    public enum AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_SupplyAirFanObjectType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 2,
    }
    
    public enum AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_SupplyAirFanPlacement
    {
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 0,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 1,
    }
    
    public enum AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_CoolingCoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:TwoStageWithHumidityControlMode")]
        CoilCoolingDXTwoStageWithHumidityControlMode = 1,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 2,
        
        [JsonProperty("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
        CoilSystemCoolingDXHeatExchangerAssisted = 3,
    }
    
    public enum AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_HeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:DX:SingleSpeed")]
        CoilHeatingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Heating:DX:VariableSpeed")]
        CoilHeatingDXVariableSpeed = 1,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 2,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 3,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 4,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 5,
    }
    
    public enum AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_PriorityControlMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CoolingPriority")]
        CoolingPriority = 1,
        
        [JsonProperty("HeatingPriority")]
        HeatingPriority = 2,
        
        [JsonProperty("LoadPriority")]
        LoadPriority = 3,
        
        [JsonProperty("ZonePriority")]
        ZonePriority = 4,
    }
    
    public enum AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass_DehumidificationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("Multimode")]
        Multimode = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    [Description(@"Unitary system, heating and cooling, multi-speed with constant volume supply fan (continuous or cycling), direct expansion (DX) cooling coil, heating coil (DX air-to-air heat pump, gas, electric, hot water, or steam), and supplemental heating coil (gas, electric, hot water, or steam).")]
    [JsonObject("AirLoopHVAC:UnitaryHeatPump:AirToAir:MultiSpeed")]
    public class AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("controlling_zone_or_thermostat_location")]
public string ControllingZoneOrThermostatLocation { get; set; } = "";
        

[Description("Select the type of supply air fan used in this unitary system.")]
[JsonProperty("supply_air_fan_object_type")]
public AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed_SupplyAirFanObjectType SupplyAirFanObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed_SupplyAirFanObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed_SupplyAirFanObjectType), "FanConstantVolume");
        

[Description("Enter the name of the supply air fan used in this unitary system.")]
[JsonProperty("supply_air_fan_name")]
public string SupplyAirFanName { get; set; } = "";
        

[Description(@"Select supply air fan placement as either BlowThrough or DrawThrough. BlowThrough means the supply air fan is located before the cooling coil. DrawThrough means the supply air fan is located after the heating coil but before the optional supplemental heating coil.")]
[JsonProperty("supply_air_fan_placement")]
public AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed_SupplyAirFanPlacement SupplyAirFanPlacement { get; set; } = (AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed_SupplyAirFanPlacement)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed_SupplyAirFanPlacement), "BlowThrough");
        

[Description(@"Enter the name of a schedule to control the supply air fan. Schedule values of zero mean that the supply air fan will cycle off if there is no cooling or heating load in the control zone. Non-zero schedule values mean that the supply air fan will operate continuously even if there is no cooling or heating load in the control zone. If this field is left blank, the supply air fan will operate continuously for the entire simulation period.")]
[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        

[Description("Multi Speed DX, Electric, Gas, and Single speed Water and Steam coils")]
[JsonProperty("heating_coil_object_type")]
public AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed_HeatingCoilObjectType HeatingCoilObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed_HeatingCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed_HeatingCoilObjectType), "CoilHeatingDXMultiSpeed");
        

[JsonProperty("heating_coil_name")]
public string HeatingCoilName { get; set; } = "";
        

[Description("Needs to match the corresponding minimum outdoor temperature defined in the DX he" +
    "ating coil object.")]
[JsonProperty("minimum_outdoor_dry_bulb_temperature_for_compressor_operation")]
public System.Nullable<float> MinimumOutdoorDryBulbTemperatureForCompressorOperation { get; set; } = (System.Nullable<float>)Single.Parse("-8", CultureInfo.InvariantCulture);
        

[Description("Only works with Coil:Cooling:DX:MultiSpeed")]
[JsonProperty("cooling_coil_object_type")]
public AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed_CoolingCoilObjectType CoolingCoilObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed_CoolingCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed_CoolingCoilObjectType), "CoilCoolingDXMultiSpeed");
        

[Description("Needs to match in the DX Cooling Coil object")]
[JsonProperty("cooling_coil_name")]
public string CoolingCoilName { get; set; } = "";
        

[Description("works with gas, electric, hot water and steam heating coils")]
[JsonProperty("supplemental_heating_coil_object_type")]
public AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed_SupplementalHeatingCoilObjectType SupplementalHeatingCoilObjectType { get; set; } = (AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed_SupplementalHeatingCoilObjectType)Enum.Parse(typeof(AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed_SupplementalHeatingCoilObjectType), "CoilHeatingElectric");
        

[Description("Needs to match in the supplemental heating coil object")]
[JsonProperty("supplemental_heating_coil_name")]
public string SupplementalHeatingCoilName { get; set; } = "";
        

[JsonProperty("maximum_supply_air_temperature_from_supplemental_heater")]
public string MaximumSupplyAirTemperatureFromSupplementalHeater { get; set; } = "";
        

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForSupplementalHeaterOperation { get; set; } = (System.Nullable<float>)Single.Parse("21", CultureInfo.InvariantCulture);
        

[JsonProperty("auxiliary_on_cycle_electric_power")]
public System.Nullable<float> AuxiliaryOnCycleElectricPower { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("auxiliary_off_cycle_electric_power")]
public System.Nullable<float> AuxiliaryOffCycleElectricPower { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("If non-zero, then the heat recovery inlet and outlet node names must be entered. " +
    "Used for heat recovery to an EnergyPlus plant loop.")]
[JsonProperty("design_heat_recovery_water_flow_rate")]
public System.Nullable<float> DesignHeatRecoveryWaterFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_temperature_for_heat_recovery")]
public System.Nullable<float> MaximumTemperatureForHeatRecovery { get; set; } = (System.Nullable<float>)Single.Parse("80", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_recovery_water_inlet_node_name")]
public string HeatRecoveryWaterInletNodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_water_outlet_node_name")]
public string HeatRecoveryWaterOutletNodeName { get; set; } = "";
        

[Description(@"Only used when the supply air fan operating mode is continuous (see field Supply Air Fan Operating Mode Schedule Name). This air flow rate is used when no heating or cooling is required and the coils are off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
[JsonProperty("no_load_supply_air_flow_rate")]
public string NoLoadSupplyAirFlowRate { get; set; } = "";
        

[Description("Enter the number of the following sets of data for air flow rates. If Heating Coi" +
    "l Object Type is Coil:Heating:Water or Coil:Heating:Steam, this field should be " +
    "1.")]
[JsonProperty("number_of_speeds_for_heating")]
public System.Nullable<float> NumberOfSpeedsForHeating { get; set; } = null;
        

[Description("Enter the number of the following sets of data for air flow rates.")]
[JsonProperty("number_of_speeds_for_cooling")]
public System.Nullable<float> NumberOfSpeedsForCooling { get; set; } = null;
        

[Description("Enter the operating supply air flow rate during heating operation or specify auto" +
    "size.")]
[JsonProperty("heating_speed_1_supply_air_flow_rate")]
public string HeatingSpeed1SupplyAirFlowRate { get; set; } = "";
        

[Description("Enter the operating supply air flow rate during heating operation or specify auto" +
    "size.")]
[JsonProperty("heating_speed_2_supply_air_flow_rate")]
public string HeatingSpeed2SupplyAirFlowRate { get; set; } = "";
        

[Description("Enter the operating supply air flow rate during heating operation or specify auto" +
    "size.")]
[JsonProperty("heating_speed_3_supply_air_flow_rate")]
public string HeatingSpeed3SupplyAirFlowRate { get; set; } = "";
        

[Description("Enter the operating supply air flow rate during heating operation or specify auto" +
    "size.")]
[JsonProperty("heating_speed_4_supply_air_flow_rate")]
public string HeatingSpeed4SupplyAirFlowRate { get; set; } = "";
        

[Description("Enter the operating supply air flow rate during cooling operation or specify auto" +
    "size.")]
[JsonProperty("cooling_speed_1_supply_air_flow_rate")]
public string CoolingSpeed1SupplyAirFlowRate { get; set; } = "";
        

[Description("Enter the operating supply air flow rate during cooling operation or specify auto" +
    "size.")]
[JsonProperty("cooling_speed_2_supply_air_flow_rate")]
public string CoolingSpeed2SupplyAirFlowRate { get; set; } = "";
        

[Description("Enter the operating supply air flow rate during cooling operation or specify auto" +
    "size.")]
[JsonProperty("cooling_speed_3_supply_air_flow_rate")]
public string CoolingSpeed3SupplyAirFlowRate { get; set; } = "";
        

[Description("Enter the operating supply air flow rate during cooling operation or specify auto" +
    "size.")]
[JsonProperty("cooling_speed_4_supply_air_flow_rate")]
public string CoolingSpeed4SupplyAirFlowRate { get; set; } = "";
    }
    
    public enum AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed_SupplyAirFanObjectType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
    }
    
    public enum AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed_SupplyAirFanPlacement
    {
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 0,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 1,
    }
    
    public enum AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed_HeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:DX:MultiSpeed")]
        CoilHeatingDXMultiSpeed = 0,
        
        [JsonProperty("Coil:Heating:Electric:MultiStage")]
        CoilHeatingElectricMultiStage = 1,
        
        [JsonProperty("Coil:Heating:Gas:MultiStage")]
        CoilHeatingGasMultiStage = 2,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 3,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 4,
    }
    
    public enum AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed_CoolingCoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:DX:MultiSpeed")]
        CoilCoolingDXMultiSpeed = 0,
    }
    
    public enum AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed_SupplementalHeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
}
namespace BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Defines a generic zone air unit for custom modeling using Energy Management Syste" +
        "m or External Interface")]
    [JsonObject("ZoneHVAC:ForcedAir:UserDefined")]
    public class ZoneHVAC_ForcedAir_UserDefined : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("overall_model_simulation_program_calling_manager_name")]
public string OverallModelSimulationProgramCallingManagerName { get; set; } = "";
        

[JsonProperty("model_setup_and_sizing_program_calling_manager_name")]
public string ModelSetupAndSizingProgramCallingManagerName { get; set; } = "";
        

[Description("Air inlet node for the unit must be a zone air exhaust Node.")]
[JsonProperty("primary_air_inlet_node_name")]
public string PrimaryAirInletNodeName { get; set; } = "";
        

[Description("Air outlet node for the unit must be a zone air inlet node.")]
[JsonProperty("primary_air_outlet_node_name")]
public string PrimaryAirOutletNodeName { get; set; } = "";
        

[Description("Inlet air used for heat rejection or air source")]
[JsonProperty("secondary_air_inlet_node_name")]
public string SecondaryAirInletNodeName { get; set; } = "";
        

[Description("Outlet air used for heat rejection or air source")]
[JsonProperty("secondary_air_outlet_node_name")]
public string SecondaryAirOutletNodeName { get; set; } = "";
        

[JsonProperty("number_of_plant_loop_connections")]
public System.Nullable<float> NumberOfPlantLoopConnections { get; set; } = null;
        

[JsonProperty("plant_connection_1_inlet_node_name")]
public string PlantConnection1InletNodeName { get; set; } = "";
        

[JsonProperty("plant_connection_1_outlet_node_name")]
public string PlantConnection1OutletNodeName { get; set; } = "";
        

[JsonProperty("plant_connection_2_inlet_node_name")]
public string PlantConnection2InletNodeName { get; set; } = "";
        

[JsonProperty("plant_connection_2_outlet_node_name")]
public string PlantConnection2OutletNodeName { get; set; } = "";
        

[JsonProperty("plant_connection_3_inlet_node_name")]
public string PlantConnection3InletNodeName { get; set; } = "";
        

[JsonProperty("plant_connection_3_outlet_node_name")]
public string PlantConnection3OutletNodeName { get; set; } = "";
        

[Description("Water use storage tank for alternate source of water consumed by device")]
[JsonProperty("supply_inlet_water_storage_tank_name")]
public string SupplyInletWaterStorageTankName { get; set; } = "";
        

[Description("Water use storage tank for collection of condensate by device")]
[JsonProperty("collection_outlet_water_storage_tank_name")]
public string CollectionOutletWaterStorageTankName { get; set; } = "";
        

[Description("Used for modeling device losses to surrounding zone")]
[JsonProperty("ambient_zone_name")]
public string AmbientZoneName { get; set; } = "";
    }
    
    [Description("Defines a generic single duct air terminal unit for custom modeling using Energy " +
        "Management System or External Interface")]
    [JsonObject("AirTerminal:SingleDuct:UserDefined")]
    public class AirTerminal_SingleDuct_UserDefined : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("overall_model_simulation_program_calling_manager_name")]
public string OverallModelSimulationProgramCallingManagerName { get; set; } = "";
        

[JsonProperty("model_setup_and_sizing_program_calling_manager_name")]
public string ModelSetupAndSizingProgramCallingManagerName { get; set; } = "";
        

[Description("Air inlet node for the unit must be a zone splitter outlet.")]
[JsonProperty("primary_air_inlet_node_name")]
public string PrimaryAirInletNodeName { get; set; } = "";
        

[Description("Air outlet node for the unit must be a zone air inlet node.")]
[JsonProperty("primary_air_outlet_node_name")]
public string PrimaryAirOutletNodeName { get; set; } = "";
        

[Description("Inlet air used for heat rejection or air source")]
[JsonProperty("secondary_air_inlet_node_name")]
public string SecondaryAirInletNodeName { get; set; } = "";
        

[Description("Outlet air used for heat rejection or air source")]
[JsonProperty("secondary_air_outlet_node_name")]
public string SecondaryAirOutletNodeName { get; set; } = "";
        

[JsonProperty("number_of_plant_loop_connections")]
public System.Nullable<float> NumberOfPlantLoopConnections { get; set; } = null;
        

[JsonProperty("plant_connection_1_inlet_node_name")]
public string PlantConnection1InletNodeName { get; set; } = "";
        

[JsonProperty("plant_connection_1_outlet_node_name")]
public string PlantConnection1OutletNodeName { get; set; } = "";
        

[JsonProperty("plant_connection_2_inlet_node_name")]
public string PlantConnection2InletNodeName { get; set; } = "";
        

[JsonProperty("plant_connection_2_outlet_node_name")]
public string PlantConnection2OutletNodeName { get; set; } = "";
        

[Description("Water use storage tank for alternate source of water consumed by device")]
[JsonProperty("supply_inlet_water_storage_tank_name")]
public string SupplyInletWaterStorageTankName { get; set; } = "";
        

[Description("Water use storage tank for collection of condensate by device")]
[JsonProperty("collection_outlet_water_storage_tank_name")]
public string CollectionOutletWaterStorageTankName { get; set; } = "";
        

[Description("Used for modeling device losses to surrounding zone")]
[JsonProperty("ambient_zone_name")]
public string AmbientZoneName { get; set; } = "";
    }
    
    [Description("Defines a generic air system component for custom modeling using Energy Managemen" +
        "t System or External Interface")]
    [JsonObject("Coil:UserDefined")]
    public class Coil_UserDefined : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("overall_model_simulation_program_calling_manager_name")]
public string OverallModelSimulationProgramCallingManagerName { get; set; } = "";
        

[JsonProperty("model_setup_and_sizing_program_calling_manager_name")]
public string ModelSetupAndSizingProgramCallingManagerName { get; set; } = "";
        

[JsonProperty("number_of_air_connections")]
public System.Nullable<float> NumberOfAirConnections { get; set; } = null;
        

[Description("Inlet air for primary air stream")]
[JsonProperty("air_connection_1_inlet_node_name")]
public string AirConnection1InletNodeName { get; set; } = "";
        

[Description("Outlet air for primary air stream")]
[JsonProperty("air_connection_1_outlet_node_name")]
public string AirConnection1OutletNodeName { get; set; } = "";
        

[Description("Inlet air for secondary air stream")]
[JsonProperty("air_connection_2_inlet_node_name")]
public string AirConnection2InletNodeName { get; set; } = "";
        

[Description("Outlet air for secondary air stream")]
[JsonProperty("air_connection_2_outlet_node_name")]
public string AirConnection2OutletNodeName { get; set; } = "";
        

[JsonProperty("plant_connection_is_used")]
public Coil_UserDefined_PlantConnectionIsUsed PlantConnectionIsUsed { get; set; } = (Coil_UserDefined_PlantConnectionIsUsed)Enum.Parse(typeof(Coil_UserDefined_PlantConnectionIsUsed), "No");
        

[JsonProperty("plant_connection_inlet_node_name")]
public string PlantConnectionInletNodeName { get; set; } = "";
        

[JsonProperty("plant_connection_outlet_node_name")]
public string PlantConnectionOutletNodeName { get; set; } = "";
        

[Description("Water use storage tank for alternate source of water consumed by device")]
[JsonProperty("supply_inlet_water_storage_tank_name")]
public string SupplyInletWaterStorageTankName { get; set; } = "";
        

[Description("Water use storage tank for collection of condensate by device")]
[JsonProperty("collection_outlet_water_storage_tank_name")]
public string CollectionOutletWaterStorageTankName { get; set; } = "";
        

[Description("Used for modeling device losses to surrounding zone")]
[JsonProperty("ambient_zone_name")]
public string AmbientZoneName { get; set; } = "";
    }
    
    public enum Coil_UserDefined_PlantConnectionIsUsed
    {
        
        [JsonProperty("No")]
        No = 0,
        
        [JsonProperty("Yes")]
        Yes = 1,
    }
    
    [Description("Defines a generic plant component for custom modeling using Energy Management Sys" +
        "tem or External Interface")]
    [JsonObject("PlantComponent:UserDefined")]
    public class PlantComponent_UserDefined : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("main_model_program_calling_manager_name")]
public string MainModelProgramCallingManagerName { get; set; } = "";
        

[JsonProperty("number_of_plant_loop_connections")]
public System.Nullable<float> NumberOfPlantLoopConnections { get; set; } = null;
        

[JsonProperty("plant_connection_1_inlet_node_name")]
public string PlantConnection1InletNodeName { get; set; } = "";
        

[JsonProperty("plant_connection_1_outlet_node_name")]
public string PlantConnection1OutletNodeName { get; set; } = "";
        

[JsonProperty("plant_connection_1_loading_mode")]
public PlantComponent_UserDefined_PlantConnection1LoadingMode PlantConnection1LoadingMode { get; set; } = (PlantComponent_UserDefined_PlantConnection1LoadingMode)Enum.Parse(typeof(PlantComponent_UserDefined_PlantConnection1LoadingMode), "DemandsLoad");
        

[JsonProperty("plant_connection_1_loop_flow_request_mode")]
public PlantComponent_UserDefined_PlantConnection1LoopFlowRequestMode PlantConnection1LoopFlowRequestMode { get; set; } = (PlantComponent_UserDefined_PlantConnection1LoopFlowRequestMode)Enum.Parse(typeof(PlantComponent_UserDefined_PlantConnection1LoopFlowRequestMode), "NeedsFlowAndTurnsLoopOn");
        

[JsonProperty("plant_connection_1_initialization_program_calling_manager_name")]
public string PlantConnection1InitializationProgramCallingManagerName { get; set; } = "";
        

[JsonProperty("plant_connection_1_simulation_program_calling_manager_name")]
public string PlantConnection1SimulationProgramCallingManagerName { get; set; } = "";
        

[JsonProperty("plant_connection_2_inlet_node_name")]
public string PlantConnection2InletNodeName { get; set; } = "";
        

[JsonProperty("plant_connection_2_outlet_node_name")]
public string PlantConnection2OutletNodeName { get; set; } = "";
        

[JsonProperty("plant_connection_2_loading_mode")]
public PlantComponent_UserDefined_PlantConnection2LoadingMode PlantConnection2LoadingMode { get; set; } = (PlantComponent_UserDefined_PlantConnection2LoadingMode)Enum.Parse(typeof(PlantComponent_UserDefined_PlantConnection2LoadingMode), "DemandsLoad");
        

[JsonProperty("plant_connection_2_loop_flow_request_mode")]
public PlantComponent_UserDefined_PlantConnection2LoopFlowRequestMode PlantConnection2LoopFlowRequestMode { get; set; } = (PlantComponent_UserDefined_PlantConnection2LoopFlowRequestMode)Enum.Parse(typeof(PlantComponent_UserDefined_PlantConnection2LoopFlowRequestMode), "NeedsFlowAndTurnsLoopOn");
        

[JsonProperty("plant_connection_2_initialization_program_calling_manager_name")]
public string PlantConnection2InitializationProgramCallingManagerName { get; set; } = "";
        

[JsonProperty("plant_connection_2_simulation_program_calling_manager_name")]
public string PlantConnection2SimulationProgramCallingManagerName { get; set; } = "";
        

[JsonProperty("plant_connection_3_inlet_node_name")]
public string PlantConnection3InletNodeName { get; set; } = "";
        

[JsonProperty("plant_connection_3_outlet_node_name")]
public string PlantConnection3OutletNodeName { get; set; } = "";
        

[JsonProperty("plant_connection_3_loading_mode")]
public PlantComponent_UserDefined_PlantConnection3LoadingMode PlantConnection3LoadingMode { get; set; } = (PlantComponent_UserDefined_PlantConnection3LoadingMode)Enum.Parse(typeof(PlantComponent_UserDefined_PlantConnection3LoadingMode), "DemandsLoad");
        

[JsonProperty("plant_connection_3_loop_flow_request_mode")]
public PlantComponent_UserDefined_PlantConnection3LoopFlowRequestMode PlantConnection3LoopFlowRequestMode { get; set; } = (PlantComponent_UserDefined_PlantConnection3LoopFlowRequestMode)Enum.Parse(typeof(PlantComponent_UserDefined_PlantConnection3LoopFlowRequestMode), "NeedsFlowAndTurnsLoopOn");
        

[JsonProperty("plant_connection_3_initialization_program_calling_manager_name")]
public string PlantConnection3InitializationProgramCallingManagerName { get; set; } = "";
        

[JsonProperty("plant_connection_3_simulation_program_calling_manager_name")]
public string PlantConnection3SimulationProgramCallingManagerName { get; set; } = "";
        

[JsonProperty("plant_connection_4_inlet_node_name")]
public string PlantConnection4InletNodeName { get; set; } = "";
        

[JsonProperty("plant_connection_4_outlet_node_name")]
public string PlantConnection4OutletNodeName { get; set; } = "";
        

[JsonProperty("plant_connection_4_loading_mode")]
public PlantComponent_UserDefined_PlantConnection4LoadingMode PlantConnection4LoadingMode { get; set; } = (PlantComponent_UserDefined_PlantConnection4LoadingMode)Enum.Parse(typeof(PlantComponent_UserDefined_PlantConnection4LoadingMode), "DemandsLoad");
        

[JsonProperty("plant_connection_4_loop_flow_request_mode")]
public PlantComponent_UserDefined_PlantConnection4LoopFlowRequestMode PlantConnection4LoopFlowRequestMode { get; set; } = (PlantComponent_UserDefined_PlantConnection4LoopFlowRequestMode)Enum.Parse(typeof(PlantComponent_UserDefined_PlantConnection4LoopFlowRequestMode), "NeedsFlowAndTurnsLoopOn");
        

[JsonProperty("plant_connection_4_initialization_program_calling_manager_name")]
public string PlantConnection4InitializationProgramCallingManagerName { get; set; } = "";
        

[JsonProperty("plant_connection_4_simulation_program_calling_manager_name")]
public string PlantConnection4SimulationProgramCallingManagerName { get; set; } = "";
        

[Description("Inlet air used for heat rejection or air source")]
[JsonProperty("air_connection_inlet_node_name")]
public string AirConnectionInletNodeName { get; set; } = "";
        

[Description("Outlet air used for heat rejection or air source")]
[JsonProperty("air_connection_outlet_node_name")]
public string AirConnectionOutletNodeName { get; set; } = "";
        

[Description("Water use storage tank for alternate source of water consumed by device")]
[JsonProperty("supply_inlet_water_storage_tank_name")]
public string SupplyInletWaterStorageTankName { get; set; } = "";
        

[Description("Water use storage tank for collection of condensate by device")]
[JsonProperty("collection_outlet_water_storage_tank_name")]
public string CollectionOutletWaterStorageTankName { get; set; } = "";
        

[Description("Used for modeling device losses to surrounding zone")]
[JsonProperty("ambient_zone_name")]
public string AmbientZoneName { get; set; } = "";
    }
    
    public enum PlantComponent_UserDefined_PlantConnection1LoadingMode
    {
        
        [JsonProperty("DemandsLoad")]
        DemandsLoad = 0,
        
        [JsonProperty("MeetsLoadWithNominalCapacity")]
        MeetsLoadWithNominalCapacity = 1,
        
        [JsonProperty("MeetsLoadWithNominalCapacityHiOutLimit")]
        MeetsLoadWithNominalCapacityHiOutLimit = 2,
        
        [JsonProperty("MeetsLoadWithNominalCapacityLowOutLimit")]
        MeetsLoadWithNominalCapacityLowOutLimit = 3,
        
        [JsonProperty("MeetsLoadWithPassiveCapacity")]
        MeetsLoadWithPassiveCapacity = 4,
    }
    
    public enum PlantComponent_UserDefined_PlantConnection1LoopFlowRequestMode
    {
        
        [JsonProperty("NeedsFlowAndTurnsLoopOn")]
        NeedsFlowAndTurnsLoopOn = 0,
        
        [JsonProperty("NeedsFlowIfLoopOn")]
        NeedsFlowIfLoopOn = 1,
        
        [JsonProperty("ReceivesWhateverFlowAvailable")]
        ReceivesWhateverFlowAvailable = 2,
    }
    
    public enum PlantComponent_UserDefined_PlantConnection2LoadingMode
    {
        
        [JsonProperty("DemandsLoad")]
        DemandsLoad = 0,
        
        [JsonProperty("MeetLoadWithNominalCapacity")]
        MeetLoadWithNominalCapacity = 1,
        
        [JsonProperty("MeetLoadWithNominalCapacityHiOutLimit")]
        MeetLoadWithNominalCapacityHiOutLimit = 2,
        
        [JsonProperty("MeetLoadWithNominalCapacityLowOutLimit")]
        MeetLoadWithNominalCapacityLowOutLimit = 3,
        
        [JsonProperty("MeetLoadWithPassiveCapacity")]
        MeetLoadWithPassiveCapacity = 4,
    }
    
    public enum PlantComponent_UserDefined_PlantConnection2LoopFlowRequestMode
    {
        
        [JsonProperty("NeedsFlowAndTurnsLoopOn")]
        NeedsFlowAndTurnsLoopOn = 0,
        
        [JsonProperty("NeedsFlowIfLoopOn")]
        NeedsFlowIfLoopOn = 1,
        
        [JsonProperty("ReceivesWhateverFlowAvailable")]
        ReceivesWhateverFlowAvailable = 2,
    }
    
    public enum PlantComponent_UserDefined_PlantConnection3LoadingMode
    {
        
        [JsonProperty("DemandsLoad")]
        DemandsLoad = 0,
        
        [JsonProperty("MeetLoadWithNominalCapacity")]
        MeetLoadWithNominalCapacity = 1,
        
        [JsonProperty("MeetLoadWithNominalCapacityHiOutLimit")]
        MeetLoadWithNominalCapacityHiOutLimit = 2,
        
        [JsonProperty("MeetLoadWithNominalCapacityLowOutLimit")]
        MeetLoadWithNominalCapacityLowOutLimit = 3,
        
        [JsonProperty("MeetLoadWithPassiveCapacity")]
        MeetLoadWithPassiveCapacity = 4,
    }
    
    public enum PlantComponent_UserDefined_PlantConnection3LoopFlowRequestMode
    {
        
        [JsonProperty("NeedsFlowAndTurnsLoopOn")]
        NeedsFlowAndTurnsLoopOn = 0,
        
        [JsonProperty("NeedsFlowIfLoopOn")]
        NeedsFlowIfLoopOn = 1,
        
        [JsonProperty("ReceivesWhateverFlowAvailable")]
        ReceivesWhateverFlowAvailable = 2,
    }
    
    public enum PlantComponent_UserDefined_PlantConnection4LoadingMode
    {
        
        [JsonProperty("DemandsLoad")]
        DemandsLoad = 0,
        
        [JsonProperty("MeetLoadWithNominalCapacity")]
        MeetLoadWithNominalCapacity = 1,
        
        [JsonProperty("MeetLoadWithNominalCapacityHiOutLimit")]
        MeetLoadWithNominalCapacityHiOutLimit = 2,
        
        [JsonProperty("MeetLoadWithNominalCapacityLowOutLimit")]
        MeetLoadWithNominalCapacityLowOutLimit = 3,
        
        [JsonProperty("MeetLoadWithPassiveCapacity")]
        MeetLoadWithPassiveCapacity = 4,
    }
    
    public enum PlantComponent_UserDefined_PlantConnection4LoopFlowRequestMode
    {
        
        [JsonProperty("NeedsFlowAndTurnsLoopOn")]
        NeedsFlowAndTurnsLoopOn = 0,
        
        [JsonProperty("NeedsFlowIfLoopOn")]
        NeedsFlowIfLoopOn = 1,
        
        [JsonProperty("ReceivesWhateverFlowAvailable")]
        ReceivesWhateverFlowAvailable = 2,
    }
    
    [Description("Defines a generic plant operation scheme for custom supervisory control using Ene" +
        "rgy Management System or External Interface to dispatch loads")]
    [JsonObject("PlantEquipmentOperation:UserDefined")]
    public class PlantEquipmentOperation_UserDefined : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("main_model_program_calling_manager_name")]
public string MainModelProgramCallingManagerName { get; set; } = "";
        

[JsonProperty("initialization_program_calling_manager_name")]
public string InitializationProgramCallingManagerName { get; set; } = "";
        

[JsonProperty("equipment_1_object_type")]
public string Equipment1ObjectType { get; set; } = "";
        

[JsonProperty("equipment_1_name")]
public string Equipment1Name { get; set; } = "";
        

[JsonProperty("equipment_2_object_type")]
public string Equipment2ObjectType { get; set; } = "";
        

[JsonProperty("equipment_2_name")]
public string Equipment2Name { get; set; } = "";
        

[JsonProperty("equipment_3_object_type")]
public string Equipment3ObjectType { get; set; } = "";
        

[JsonProperty("equipment_3_name")]
public string Equipment3Name { get; set; } = "";
        

[JsonProperty("equipment_4_object_type")]
public string Equipment4ObjectType { get; set; } = "";
        

[JsonProperty("equipment_4_name")]
public string Equipment4Name { get; set; } = "";
        

[JsonProperty("equipment_5_object_type")]
public string Equipment5ObjectType { get; set; } = "";
        

[JsonProperty("equipment_5_name")]
public string Equipment5Name { get; set; } = "";
        

[JsonProperty("equipment_6_object_type")]
public string Equipment6ObjectType { get; set; } = "";
        

[JsonProperty("equipment_6_name")]
public string Equipment6Name { get; set; } = "";
        

[JsonProperty("equipment_7_object_type")]
public string Equipment7ObjectType { get; set; } = "";
        

[JsonProperty("equipment_7_name")]
public string Equipment7Name { get; set; } = "";
        

[JsonProperty("equipment_8_object_type")]
public string Equipment8ObjectType { get; set; } = "";
        

[JsonProperty("equipment_8_name")]
public string Equipment8Name { get; set; } = "";
        

[JsonProperty("equipment_9_object_type")]
public string Equipment9ObjectType { get; set; } = "";
        

[JsonProperty("equipment_9_name")]
public string Equipment9Name { get; set; } = "";
        

[JsonProperty("equipment_10_object_type")]
public string Equipment10ObjectType { get; set; } = "";
        

[JsonProperty("equipment_10_name")]
public string Equipment10Name { get; set; } = "";
    }
}
namespace BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Variable refrigerant flow (VRF) air-to-air heat pump condensing unit (includes on" +
        "e or more electric compressors and outdoor fan). Serves one or more VRF zone ter" +
        "minal units. See ZoneHVAC:TerminalUnit:VariableRefrigerantFlow and ZoneTerminalU" +
        "nitList.")]
    [JsonObject("AirConditioner:VariableRefrigerantFlow")]
    public class AirConditioner_VariableRefrigerantFlow : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Enter the name of a schedule that defines the availability of the unit. Schedule values of 0 denote the unit is off. All other values denote the unit is available. If this field is left blank, the unit is available the entire simulation.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Enter the total cooling capacity in watts at rated conditions or set to autosize." +
    " Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("gross_rated_total_cooling_capacity")]
public string GrossRatedTotalCoolingCapacity { get; set; } = "";
        

[Description("Enter the coefficient of performance at rated conditions or leave blank to use de" +
    "fault. COP includes compressor and condenser fan electrical energy input COP doe" +
    "s not include supply fan heat or supply fan electric power input")]
[JsonProperty("gross_rated_cooling_cop")]
public System.Nullable<float> GrossRatedCoolingCop { get; set; } = (System.Nullable<float>)Single.Parse("3.3", CultureInfo.InvariantCulture);
        

[Description("Enter the minimum outdoor temperature allowed for cooling operation. Cooling is d" +
    "isabled below this temperature.")]
[JsonProperty("minimum_outdoor_temperature_in_cooling_mode")]
public System.Nullable<float> MinimumOutdoorTemperatureInCoolingMode { get; set; } = (System.Nullable<float>)Single.Parse("-6", CultureInfo.InvariantCulture);
        

[Description("Enter the maximum outdoor temperature allowed for cooling operation. Cooling is d" +
    "isabled above this temperature.")]
[JsonProperty("maximum_outdoor_temperature_in_cooling_mode")]
public System.Nullable<float> MaximumOutdoorTemperatureInCoolingMode { get; set; } = (System.Nullable<float>)Single.Parse("43", CultureInfo.InvariantCulture);
        

[Description(@"Enter a curve name that represents full load cooling capacity ratio as a function of outdoor dry-bulb temperature and indoor wet-bulb temperature. Up to two curves are allowed if the performance cannot be represented by a single curve. The following two fields are used if two curves are required.")]
[JsonProperty("cooling_capacity_ratio_modifier_function_of_low_temperature_curve_name")]
public string CoolingCapacityRatioModifierFunctionOfLowTemperatureCurveName { get; set; } = "";
        

[Description(@"This curve object is used to allow separate low and high cooling capacity ratio performance curves. This curve represents a line passing through the points where performance changes. The curve calculates outdoor dry-bulb temperature given weighted average indoor wet-bulb temperature. If a single performance curve is used, leave this field blank.")]
[JsonProperty("cooling_capacity_ratio_boundary_curve_name")]
public string CoolingCapacityRatioBoundaryCurveName { get; set; } = "";
        

[Description(@"This curve object is used to describe the high outdoor temperature performance curve used to describe cooling capacity ratio. This curve is used when a single performance curve does not accurately describe cooling capacity ratio as a function of temperature. If a single performance curve is used, leave this field blank.")]
[JsonProperty("cooling_capacity_ratio_modifier_function_of_high_temperature_curve_name")]
public string CoolingCapacityRatioModifierFunctionOfHighTemperatureCurveName { get; set; } = "";
        

[Description("Enter a curve name that represents cooling energy ratio as a function of outdoor " +
    "dry-bulb temperature and indoor wet-bulb temperature")]
[JsonProperty("cooling_energy_input_ratio_modifier_function_of_low_temperature_curve_name")]
public string CoolingEnergyInputRatioModifierFunctionOfLowTemperatureCurveName { get; set; } = "";
        

[Description(@"This curve object is used to allow separate low and high cooling energy input ratio performance curves. This curve represents a line passing through the points where performance changes. The curve calculates outdoor dry-bulb temperature given weighted average indoor wet-bulb temperature. If a single performance curve is used, leave this field blank.")]
[JsonProperty("cooling_energy_input_ratio_boundary_curve_name")]
public string CoolingEnergyInputRatioBoundaryCurveName { get; set; } = "";
        

[Description("This curve object is used to describe the high outdoor temperature performance cu" +
    "rve used to describe cooling energy ratio. This curve is used when a single perf" +
    "ormance curve does not accurately describe cooling energy ratio as a function of" +
    " temperature")]
[JsonProperty("cooling_energy_input_ratio_modifier_function_of_high_temperature_curve_name")]
public string CoolingEnergyInputRatioModifierFunctionOfHighTemperatureCurveName { get; set; } = "";
        

[Description("Enter a curve name that represents cooling energy ratio as a function of part-loa" +
    "d ratio for part-load ratios less than or equal to 1. If this field is left blan" +
    "k, the model assumes energy is proportional to part-load ratio.")]
[JsonProperty("cooling_energy_input_ratio_modifier_function_of_low_part_load_ratio_curve_name")]
public string CoolingEnergyInputRatioModifierFunctionOfLowPartLoadRatioCurveName { get; set; } = "";
        

[Description(@"Enter a curve name that represents cooling energy ratio as a function of part-load ratio for part-load ratios greater than 1. Part-load ratios can exceed 1 in variable speed compression systems. If this field is left blank, the model assumes energy is proportional to part-load ratio.")]
[JsonProperty("cooling_energy_input_ratio_modifier_function_of_high_part_load_ratio_curve_name")]
public string CoolingEnergyInputRatioModifierFunctionOfHighPartLoadRatioCurveName { get; set; } = "";
        

[Description(@"This curve defines how rated capacity changes when the total indoor terminal unit cooling capacity is greater than the Gross Rated Total Cooling Capacity defined in this object. If this field is left blank, the model assumes total indoor terminal unit cooling capacity is equal to the Gross Rated Total Cooling Capacity defined above.")]
[JsonProperty("cooling_combination_ratio_correction_factor_curve_name")]
public string CoolingCombinationRatioCorrectionFactorCurveName { get; set; } = "";
        

[Description("This curve defines the cycling losses when the heat pump compressor cycles on and" +
    " off below the Minimum Heat Pump Part-Load Ratio specified in the field below.")]
[JsonProperty("cooling_part_load_fraction_correlation_curve_name")]
public string CoolingPartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description("Enter the heating capacity in watts at rated conditions or set to autosize. Heati" +
    "ng capacity not accounting for the effect of supply air fan heat")]
[JsonProperty("gross_rated_heating_capacity")]
public string GrossRatedHeatingCapacity { get; set; } = "";
        

[Description(@"If the Gross Rated Heating Capacity is autosized, the heating capacity is sized to be equal to the cooling capacity multiplied by this sizing ratio. The zone terminal unit heating coils are also sized using this ratio unless the sizing ratio input in the ZoneHVAC:TerminalUnit:VariableRefrigerantFlow object is entered.")]
[JsonProperty("rated_heating_capacity_sizing_ratio")]
public System.Nullable<float> RatedHeatingCapacitySizingRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("COP includes compressor and condenser fan electrical energy input COP does not in" +
    "clude supply fan heat or supply fan electrical energy input")]
[JsonProperty("gross_rated_heating_cop")]
public System.Nullable<float> GrossRatedHeatingCop { get; set; } = (System.Nullable<float>)Single.Parse("3.4", CultureInfo.InvariantCulture);
        

[Description("Enter the minimum outdoor temperature allowed for heating operation.")]
[JsonProperty("minimum_outdoor_temperature_in_heating_mode")]
public System.Nullable<float> MinimumOutdoorTemperatureInHeatingMode { get; set; } = (System.Nullable<float>)Single.Parse("-20", CultureInfo.InvariantCulture);
        

[Description("Enter the maximum outdoor temperature allowed for heating operation.")]
[JsonProperty("maximum_outdoor_temperature_in_heating_mode")]
public System.Nullable<float> MaximumOutdoorTemperatureInHeatingMode { get; set; } = (System.Nullable<float>)Single.Parse("16", CultureInfo.InvariantCulture);
        

[Description(@"Enter a curve name that represents full load heating capacity ratio as a function of outdoor wet-bulb temperature and indoor dry-bulb temperature. Outdoor dry-bulb temperature may be used if wet-bulb temperature data is unavailable. See Heating Performance Curve Outdoor Temperature Type input below to determine which outdoor temperature type to use. Up to two curves are allowed if the performance cannot be represented by a single curve. The following two fields are used if two curves are required.")]
[JsonProperty("heating_capacity_ratio_modifier_function_of_low_temperature_curve_name")]
public string HeatingCapacityRatioModifierFunctionOfLowTemperatureCurveName { get; set; } = "";
        

[Description(@"This curve object is used to allow separate low and high heating capacity ratio performance curves. This curve represents a line passing through the points where performance changes. The curve calculates outdoor dry-bulb or wet-bulb temperature given weighted average indoor dry-bulb temperature. See Heating Performance Curve Outdoor Temperature Type input below to determine which outdoor temperature type to use. If a single performance curve is used, leave this field blank.")]
[JsonProperty("heating_capacity_ratio_boundary_curve_name")]
public string HeatingCapacityRatioBoundaryCurveName { get; set; } = "";
        

[Description(@"This curve object is used to describe the high outdoor temperature performance curve used to describe heating capacity ratio. This curve is used when a single performance curve does not accurately describe heating capacity ratio as a function of temperature. If a single performance curve is used, leave this field blank.")]
[JsonProperty("heating_capacity_ratio_modifier_function_of_high_temperature_curve_name")]
public string HeatingCapacityRatioModifierFunctionOfHighTemperatureCurveName { get; set; } = "";
        

[Description(@"Enter a curve name that represents heating energy ratio as a function of outdoor wet-bulb temperature and indoor dry-bulb temperature Outdoor dry-bulb temperature may be used if wet-bulb temperature data is unavailable. See Heating Performance Curve Outdoor Temperature Type input below to determine which outdoor temperature type to use.")]
[JsonProperty("heating_energy_input_ratio_modifier_function_of_low_temperature_curve_name")]
public string HeatingEnergyInputRatioModifierFunctionOfLowTemperatureCurveName { get; set; } = "";
        

[Description(@"This curve object is used to allow separate low and high heating energy input ratio performance curves. This curve represents a line passing through the points where performance changes. The curve calculates outdoor dry-bulb or wet-bulb temperature given weighted average indoor dry-bulb temperature. See Heating Performance Curve Outdoor Temperature Type input below to determine which outdoor temperature type to use. If a single performance curve is used, leave this field blank.")]
[JsonProperty("heating_energy_input_ratio_boundary_curve_name")]
public string HeatingEnergyInputRatioBoundaryCurveName { get; set; } = "";
        

[Description("This curve object is used to allow separate performance curves for heating energy" +
    ". If a single performance curve is used, leave this field blank.")]
[JsonProperty("heating_energy_input_ratio_modifier_function_of_high_temperature_curve_name")]
public string HeatingEnergyInputRatioModifierFunctionOfHighTemperatureCurveName { get; set; } = "";
        

[Description("Determines temperature type for heating capacity curves and heating energy curves" +
    ". This input determines whether the outdoor air dry-bulb or wet-bulb temperature" +
    " is used to evaluate these curves.")]
[JsonProperty("heating_performance_curve_outdoor_temperature_type")]
public AirConditioner_VariableRefrigerantFlow_HeatingPerformanceCurveOutdoorTemperatureType HeatingPerformanceCurveOutdoorTemperatureType { get; set; } = (AirConditioner_VariableRefrigerantFlow_HeatingPerformanceCurveOutdoorTemperatureType)Enum.Parse(typeof(AirConditioner_VariableRefrigerantFlow_HeatingPerformanceCurveOutdoorTemperatureType), "WetBulbTemperature");
        

[Description("This curve represents the heating energy input ratio for part-load ratios less th" +
    "an 1.")]
[JsonProperty("heating_energy_input_ratio_modifier_function_of_low_part_load_ratio_curve_name")]
public string HeatingEnergyInputRatioModifierFunctionOfLowPartLoadRatioCurveName { get; set; } = "";
        

[Description("This curve represents the heating energy input ratio for part-load ratios greater" +
    " than 1.")]
[JsonProperty("heating_energy_input_ratio_modifier_function_of_high_part_load_ratio_curve_name")]
public string HeatingEnergyInputRatioModifierFunctionOfHighPartLoadRatioCurveName { get; set; } = "";
        

[Description(@"This curve defines how rated capacity changes when the total indoor terminal unit heating capacity is greater than the Gross Rated Heating Capacity defined in this object. If this field is left blank, the model assumes total indoor terminal unit heating capacity is equal to the Gross Rated Heating Capacity defined above.")]
[JsonProperty("heating_combination_ratio_correction_factor_curve_name")]
public string HeatingCombinationRatioCorrectionFactorCurveName { get; set; } = "";
        

[Description("This curve defines the cycling losses when the heat pump compressor cycles on and" +
    " off below the Minimum Heat Pump Part-Load Ratio specified in the following fiel" +
    "d.")]
[JsonProperty("heating_part_load_fraction_correlation_curve_name")]
public string HeatingPartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description("Enter the minimum heat pump part-load ratio (PLR). When the cooling or heating PL" +
    "R is below this value, the heat pump compressor will cycle to meet the cooling o" +
    "r heating demand.")]
[JsonProperty("minimum_heat_pump_part_load_ratio")]
public System.Nullable<float> MinimumHeatPumpPartLoadRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.15", CultureInfo.InvariantCulture);
        

[Description("Enter the name of the zone where the master thermostat is located.")]
[JsonProperty("zone_name_for_master_thermostat_location")]
public string ZoneNameForMasterThermostatLocation { get; set; } = "";
        

[Description("Choose a thermostat control logic scheme. If these control types fail to control " +
    "zone temperature within a reasonable limit, consider using multiple VRF systems." +
    " This field is not used when all terminal units are set point controlled.")]
[JsonProperty("master_thermostat_priority_control_type")]
public AirConditioner_VariableRefrigerantFlow_MasterThermostatPriorityControlType MasterThermostatPriorityControlType { get; set; } = (AirConditioner_VariableRefrigerantFlow_MasterThermostatPriorityControlType)Enum.Parse(typeof(AirConditioner_VariableRefrigerantFlow_MasterThermostatPriorityControlType), "MasterThermostatPriority");
        

[Description("this field is required if Master Thermostat Priority Control Type is Scheduled. S" +
    "chedule values of 0 denote cooling, 1 for heating, and all other values disable " +
    "the system.")]
[JsonProperty("thermostat_priority_schedule_name")]
public string ThermostatPriorityScheduleName { get; set; } = "";
        

[Description("Enter the name of a ZoneTerminalUnitList. This list connects zone terminal units " +
    "to this heat pump.")]
[JsonProperty("zone_terminal_unit_list_name")]
public string ZoneTerminalUnitListName { get; set; } = "";
        

[Description("This field enables heat recovery operation within this VRF outdoor unit.")]
[JsonProperty("heat_pump_waste_heat_recovery")]
public EmptyNoYes HeatPumpWasteHeatRecovery { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Enter the equivalent length of the farthest terminal unit from the condenser")]
[JsonProperty("equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode")]
public System.Nullable<float> EquivalentPipingLengthUsedForPipingCorrectionFactorInCoolingMode { get; set; } = null;
        

[Description("Enter the height difference between the highest and lowest terminal unit")]
[JsonProperty("vertical_height_used_for_piping_correction_factor")]
public System.Nullable<float> VerticalHeightUsedForPipingCorrectionFactor { get; set; } = null;
        

[Description("PCF = a0 + a1*L + a2*L^2 + a3*L^3 + a4*H PCF = a0 + a1*L + a2*L^2 + a3*CR + a4*CR" +
    "^2 + a5*(L)(CR) where L = length and CR = combination ratio specifies coefficien" +
    "ts for a0, a1, a2, and a3 in the PCF equation")]
[JsonProperty("piping_correction_factor_for_length_in_cooling_mode_curve_name")]
public string PipingCorrectionFactorForLengthInCoolingModeCurveName { get; set; } = "";
        

[Description("PCF = a0 + a1*L + a2*L^2 + a3*L^3 + a4*H PCF = a0 + a1*L + a2*L^2 + a3*CR + a4*CR" +
    "^2 + a5*(L)(CR) + a6*H where L = length, H = height, and CR = combination ratio " +
    "specifies coefficient a4 (or a6 for biquadratic) in the PCF equation")]
[JsonProperty("piping_correction_factor_for_height_in_cooling_mode_coefficient")]
public System.Nullable<float> PipingCorrectionFactorForHeightInCoolingModeCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Enter the equivalent length of the farthest terminal unit from the condenser")]
[JsonProperty("equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode")]
public System.Nullable<float> EquivalentPipingLengthUsedForPipingCorrectionFactorInHeatingMode { get; set; } = null;
        

[Description("PCF = a0 + a1*L + a2*L^2 + a3*L^3 + a4*H PCF = a0 + a1*L + a2*L^2 + a3*CR + a4*CR" +
    "^2 + a5*(L)(CR) + a6*H where L = length and CR = combination ratio specifies coe" +
    "fficients for a0, a1, a2, and a3 (or a0-a5 for biquadratic) in the PCF equation")]
[JsonProperty("piping_correction_factor_for_length_in_heating_mode_curve_name")]
public string PipingCorrectionFactorForLengthInHeatingModeCurveName { get; set; } = "";
        

[Description("PCF = a0 + a1*L + a2*L^2 + a3*L^3 + a4*H PCF = a0 + a1*L + a2*L^2 + a3*CR + a4*CR" +
    "^2 + a5*(L)(CR) + a6*H where L = length, H = height, and CR = combination ratio " +
    "specifies coefficient a4 (or a6 for biquadratic) in the PCF equation")]
[JsonProperty("piping_correction_factor_for_height_in_heating_mode_coefficient")]
public System.Nullable<float> PipingCorrectionFactorForHeightInHeatingModeCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Enter the value of the resistive heater located in the compressor(s). This heater" +
    " is used to warm the refrigerant and oil when the compressor is off.")]
[JsonProperty("crankcase_heater_power_per_compressor")]
public System.Nullable<float> CrankcaseHeaterPowerPerCompressor { get; set; } = (System.Nullable<float>)Single.Parse("33", CultureInfo.InvariantCulture);
        

[Description("Enter the total number of compressor. This input is used only for crankcase heate" +
    "r calculations.")]
[JsonProperty("number_of_compressors")]
public System.Nullable<float> NumberOfCompressors { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description("Enter the ratio of the first stage compressor to total compressor capacity. All o" +
    "ther compressors are assumed to be equally sized. This inputs is used only for c" +
    "rankcase heater calculations.")]
[JsonProperty("ratio_of_compressor_size_to_total_compressor_capacity")]
public System.Nullable<float> RatioOfCompressorSizeToTotalCompressorCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[Description("Enter the maximum outdoor temperature above which the crankcase heaters are disab" +
    "led.")]
[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForCrankcaseHeater { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[Description("Select a defrost strategy. Reverse cycle reverses the operating mode from heating" +
    " to cooling to melt frost formation on the condenser coil. The resistive strateg" +
    "y uses a resistive heater to melt the frost.")]
[JsonProperty("defrost_strategy")]
public AirConditioner_VariableRefrigerantFlow_DefrostStrategy DefrostStrategy { get; set; } = (AirConditioner_VariableRefrigerantFlow_DefrostStrategy)Enum.Parse(typeof(AirConditioner_VariableRefrigerantFlow_DefrostStrategy), "Resistive");
        

[Description("Choose a defrost control type. Either use a fixed Timed defrost period or select " +
    "OnDemand to defrost only when necessary.")]
[JsonProperty("defrost_control")]
public AirConditioner_VariableRefrigerantFlow_DefrostControl DefrostControl { get; set; } = (AirConditioner_VariableRefrigerantFlow_DefrostControl)Enum.Parse(typeof(AirConditioner_VariableRefrigerantFlow_DefrostControl), "Timed");
        

[Description("A valid performance curve must be used if reversecycle defrost strategy is select" +
    "ed.")]
[JsonProperty("defrost_energy_input_ratio_modifier_function_of_temperature_curve_name")]
public string DefrostEnergyInputRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Fraction of time in defrost mode. Only applicable if timed defrost control is spe" +
    "cified.")]
[JsonProperty("defrost_time_period_fraction")]
public System.Nullable<float> DefrostTimePeriodFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.058333", CultureInfo.InvariantCulture);
        

[Description("Enter the size of the resistive defrost heating element. Only applicable if resis" +
    "tive defrost strategy is specified")]
[JsonProperty("resistive_defrost_heater_capacity")]
public string ResistiveDefrostHeaterCapacity { get; set; } = (System.String)"0";
        

[Description("Enter the maximum outdoor temperature above which defrost operation is disabled.")]
[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_defrost_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForDefrostOperation { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[Description("Select either an air-cooled, evaporatively-cooled or water-cooled condenser.")]
[JsonProperty("condenser_type")]
public AirConditioner_VariableRefrigerantFlow_CondenserType CondenserType { get; set; } = (AirConditioner_VariableRefrigerantFlow_CondenserType)Enum.Parse(typeof(AirConditioner_VariableRefrigerantFlow_CondenserType), "AirCooled");
        

[Description("Choose an outside air node name or leave this field blank to use weather data. If" +
    " this field is blank, the Condenser Type is assumed to be AirCooled. This input " +
    "must be specified if Condenser Type = WaterCooled.")]
[JsonProperty("condenser_inlet_node_name")]
public string CondenserInletNodeName { get; set; } = "";
        

[Description("Enter a water outlet node name if Condenser Type = WaterCooled. Leave this field " +
    "blank if Condenser Type = Air or EvaporativelyCooled.")]
[JsonProperty("condenser_outlet_node_name")]
public string CondenserOutletNodeName { get; set; } = "";
        

[Description("Only used when Condenser Type = WaterCooled.")]
[JsonProperty("water_condenser_volume_flow_rate")]
public string WaterCondenserVolumeFlowRate { get; set; } = "";
        

[Description("Enter the effectiveness of the evaporatively cooled condenser. This field is only" +
    " used when the Condenser Type = EvaporativelyCooled.")]
[JsonProperty("evaporative_condenser_effectiveness")]
public System.Nullable<float> EvaporativeCondenserEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("Used to calculate evaporative condenser water use. This field is only used when t" +
    "he Condenser Type = EvaporativelyCooled.")]
[JsonProperty("evaporative_condenser_air_flow_rate")]
public string EvaporativeCondenserAirFlowRate { get; set; } = "";
        

[Description("Rated power consumed by the evaporative condenser\'s water pump. This field is onl" +
    "y used when the Condenser Type = EvaporativelyCooled.")]
[JsonProperty("evaporative_condenser_pump_rated_power_consumption")]
public string EvaporativeCondenserPumpRatedPowerConsumption { get; set; } = (System.String)"0";
        

[Description("A separate storage tank may be used to supply an evaporatively cooled condenser.")]
[JsonProperty("supply_water_storage_tank_name")]
public string SupplyWaterStorageTankName { get; set; } = "";
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
[JsonProperty("basin_heater_capacity")]
public System.Nullable<float> BasinHeaterCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdo" +
    "or dry-bulb temperature when the basin heater turns on.")]
[JsonProperty("basin_heater_setpoint_temperature")]
public System.Nullable<float> BasinHeaterSetpointTemperature { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty("basin_heater_operating_schedule_name")]
public string BasinHeaterOperatingScheduleName { get; set; } = "";
        

[JsonProperty("fuel_type")]
public AirConditioner_VariableRefrigerantFlow_FuelType FuelType { get; set; } = (AirConditioner_VariableRefrigerantFlow_FuelType)Enum.Parse(typeof(AirConditioner_VariableRefrigerantFlow_FuelType), "Electricity");
        

[Description("The minimum outdoor temperature below which heat recovery mode will not operate.")]
[JsonProperty("minimum_outdoor_temperature_in_heat_recovery_mode")]
public System.Nullable<float> MinimumOutdoorTemperatureInHeatRecoveryMode { get; set; } = null;
        

[Description("The maximum outdoor temperature above which heat recovery mode will not operate.")]
[JsonProperty("maximum_outdoor_temperature_in_heat_recovery_mode")]
public System.Nullable<float> MaximumOutdoorTemperatureInHeatRecoveryMode { get; set; } = null;
        

[Description("Enter the name of a performance curve which represents the change in cooling capa" +
    "city when heat recovery is active A default constant of 0.9 is used if this inpu" +
    "t is blank")]
[JsonProperty("heat_recovery_cooling_capacity_modifier_curve_name")]
public string HeatRecoveryCoolingCapacityModifierCurveName { get; set; } = "";
        

[Description("Enter the fractional capacity available at the start of heat recovery mode. The c" +
    "apacity exponentially approaches the steady-state value according to the inputs " +
    "for Heat Recovery Cooling Capacity Modifier and Heat Recovery Cooling Capacity T" +
    "ime Constant")]
[JsonProperty("initial_heat_recovery_cooling_capacity_fraction")]
public System.Nullable<float> InitialHeatRecoveryCoolingCapacityFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[Description("Enter the time constant used to model the transition from cooling only mode to he" +
    "at recovery mode")]
[JsonProperty("heat_recovery_cooling_capacity_time_constant")]
public System.Nullable<float> HeatRecoveryCoolingCapacityTimeConstant { get; set; } = (System.Nullable<float>)Single.Parse("0.15", CultureInfo.InvariantCulture);
        

[Description("Enter the name of a performance curve which represents the change in cooling ener" +
    "gy when heat recovery is active A default constant of 1.1 is used if this input " +
    "is blank")]
[JsonProperty("heat_recovery_cooling_energy_modifier_curve_name")]
public string HeatRecoveryCoolingEnergyModifierCurveName { get; set; } = "";
        

[Description(@"Enter the fractional electric consumption rate at the start of heat recovery mode. The electric consumption rate exponentially approaches the steady-state value according to the inputs for Heat Recovery Cooling Energy Modifier and Heat Recovery Cooling Energy Time Constant")]
[JsonProperty("initial_heat_recovery_cooling_energy_fraction")]
public System.Nullable<float> InitialHeatRecoveryCoolingEnergyFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Enter the time constant used to model the transition from cooling only mode to he" +
    "at recovery mode")]
[JsonProperty("heat_recovery_cooling_energy_time_constant")]
public System.Nullable<float> HeatRecoveryCoolingEnergyTimeConstant { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Enter the name of a performance curve which represents the change in heating capa" +
    "city when heat recovery is active A default constant of 1.1 is used if this inpu" +
    "t is blank")]
[JsonProperty("heat_recovery_heating_capacity_modifier_curve_name")]
public string HeatRecoveryHeatingCapacityModifierCurveName { get; set; } = "";
        

[Description("Enter the fractional capacity available at the start of heat recovery mode. The c" +
    "apacity exponentially approaches the steady-state value according to the inputs " +
    "for Heat Recovery Heating Capacity Modifier and Heat Recovery Heating Capacity T" +
    "ime Constant")]
[JsonProperty("initial_heat_recovery_heating_capacity_fraction")]
public System.Nullable<float> InitialHeatRecoveryHeatingCapacityFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Enter the time constant used to model the transition from cooling only mode to he" +
    "at recovery mode")]
[JsonProperty("heat_recovery_heating_capacity_time_constant")]
public System.Nullable<float> HeatRecoveryHeatingCapacityTimeConstant { get; set; } = (System.Nullable<float>)Single.Parse("0.15", CultureInfo.InvariantCulture);
        

[Description("Enter the name of a performance curve which represents the change in heating elec" +
    "tric consumption rate when heat recovery is active A default constant of 1.1 is " +
    "used if this input is blank")]
[JsonProperty("heat_recovery_heating_energy_modifier_curve_name")]
public string HeatRecoveryHeatingEnergyModifierCurveName { get; set; } = "";
        

[Description(@"Enter the fractional electric consumption rate at the start of heat recovery mode. The electric consumption rate exponentially approaches the steady-state value according to the inputs for Heat Recovery Cooling Energy Modifier and Heat Recovery Cooling Energy Time Constant")]
[JsonProperty("initial_heat_recovery_heating_energy_fraction")]
public System.Nullable<float> InitialHeatRecoveryHeatingEnergyFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Enter the time constant used to model the transition from cooling only mode to he" +
    "at recovery mode")]
[JsonProperty("heat_recovery_heating_energy_time_constant")]
public System.Nullable<float> HeatRecoveryHeatingEnergyTimeConstant { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum AirConditioner_VariableRefrigerantFlow_HeatingPerformanceCurveOutdoorTemperatureType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DryBulbTemperature")]
        DryBulbTemperature = 1,
        
        [JsonProperty("WetBulbTemperature")]
        WetBulbTemperature = 2,
    }
    
    public enum AirConditioner_VariableRefrigerantFlow_MasterThermostatPriorityControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LoadPriority")]
        LoadPriority = 1,
        
        [JsonProperty("MasterThermostatPriority")]
        MasterThermostatPriority = 2,
        
        [JsonProperty("Scheduled")]
        Scheduled = 3,
        
        [JsonProperty("ThermostatOffsetPriority")]
        ThermostatOffsetPriority = 4,
        
        [JsonProperty("ZonePriority")]
        ZonePriority = 5,
    }
    
    public enum AirConditioner_VariableRefrigerantFlow_DefrostStrategy
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Resistive")]
        Resistive = 1,
        
        [JsonProperty("ReverseCycle")]
        ReverseCycle = 2,
    }
    
    public enum AirConditioner_VariableRefrigerantFlow_DefrostControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("OnDemand")]
        OnDemand = 1,
        
        [JsonProperty("Timed")]
        Timed = 2,
    }
    
    public enum AirConditioner_VariableRefrigerantFlow_CondenserType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 3,
    }
    
    public enum AirConditioner_VariableRefrigerantFlow_FuelType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("Electricity")]
        Electricity = 2,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 3,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 4,
        
        [JsonProperty("Gasoline")]
        Gasoline = 5,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 6,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 7,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 8,
        
        [JsonProperty("Propane")]
        Propane = 9,
    }
    
    [Description(@"This is a key object in the new physics based VRF model applicable for Fluid Temperature Control It describes the Variable Refrigerant Flow system excluding the performance of indoor units Indoor units are modeled separately, see ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")]
    [JsonObject("AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl")]
    public class AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter a unique name for this variable refrigerant flow heat pump")]
[JsonProperty("heat_pump_name")]
public string HeatPumpName { get; set; } = "";
        

[Description("Enter the name of a schedule that defines the availability of the unit Schedule v" +
    "alues of 0 denote the unit is off. All other values denote the unit is available" +
    " If this field is left blank, the unit is available the entire simulation")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Enter the name of a ZoneTerminalUnitList. This list connects zone terminal units " +
    "to this heat pump")]
[JsonProperty("zone_terminal_unit_list_name")]
public string ZoneTerminalUnitListName { get; set; } = "";
        

[JsonProperty("refrigerant_type")]
public string RefrigerantType { get; set; } = (System.String)"R410A";
        

[Description(@"Enter the total evaporative capacity in watts at rated conditions This is the capacity corresponding to the max compressor speed at rated conditions The actual evaporative capacity is obtained by multiplying the rated capacity with the modification factor calculated by Evaporative Capacity Multiplier Function of Temperature Curve")]
[JsonProperty("rated_evaporative_capacity")]
public string RatedEvaporativeCapacity { get; set; } = (System.String)"40000";
        

[Description(@"Enter the rated compressor power per Watt of rated evaporative capacity [W/W] Rated compressor power corresponds to the max compressor speed at rated conditions The actual compressor power is obtained by multiplying the rated power with the modification factor calculated by Compressor Power Multiplier Function of Temperature Curve")]
[JsonProperty("rated_compressor_power_per_unit_of_rated_evaporative_capacity")]
public System.Nullable<float> RatedCompressorPowerPerUnitOfRatedEvaporativeCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0.35", CultureInfo.InvariantCulture);
        

[Description("Enter the minimum outdoor temperature allowed for cooling operation Cooling is di" +
    "sabled below this temperature")]
[JsonProperty("minimum_outdoor_air_temperature_in_cooling_mode")]
public System.Nullable<float> MinimumOutdoorAirTemperatureInCoolingMode { get; set; } = (System.Nullable<float>)Single.Parse("-6", CultureInfo.InvariantCulture);
        

[Description("Enter the maximum outdoor temperature allowed for cooling operation Cooling is di" +
    "sabled above this temperature")]
[JsonProperty("maximum_outdoor_air_temperature_in_cooling_mode")]
public System.Nullable<float> MaximumOutdoorAirTemperatureInCoolingMode { get; set; } = (System.Nullable<float>)Single.Parse("43", CultureInfo.InvariantCulture);
        

[Description("Enter the minimum outdoor temperature allowed for heating operation Heating is di" +
    "sabled below this temperature")]
[JsonProperty("minimum_outdoor_air_temperature_in_heating_mode")]
public System.Nullable<float> MinimumOutdoorAirTemperatureInHeatingMode { get; set; } = (System.Nullable<float>)Single.Parse("-20", CultureInfo.InvariantCulture);
        

[Description("Enter the maximum outdoor temperature allowed for heating operation Heating is di" +
    "sabled below this temperature")]
[JsonProperty("maximum_outdoor_air_temperature_in_heating_mode")]
public System.Nullable<float> MaximumOutdoorAirTemperatureInHeatingMode { get; set; } = (System.Nullable<float>)Single.Parse("16", CultureInfo.InvariantCulture);
        

[JsonProperty("reference_outdoor_unit_superheating")]
public System.Nullable<float> ReferenceOutdoorUnitSuperheating { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[JsonProperty("reference_outdoor_unit_subcooling")]
public System.Nullable<float> ReferenceOutdoorUnitSubcooling { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[JsonProperty("refrigerant_temperature_control_algorithm_for_indoor_unit")]
public AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_RefrigerantTemperatureControlAlgorithmForIndoorUnit RefrigerantTemperatureControlAlgorithmForIndoorUnit { get; set; } = (AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_RefrigerantTemperatureControlAlgorithmForIndoorUnit)Enum.Parse(typeof(AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_RefrigerantTemperatureControlAlgorithmForIndoorUnit), "VariableTemp");
        

[Description("This field is used if Refrigerant Temperature Control Algorithm is ConstantTemp E" +
    "vaporating temperature is the refrigerant temperature, not air temperature")]
[JsonProperty("reference_evaporating_temperature_for_indoor_unit")]
public System.Nullable<float> ReferenceEvaporatingTemperatureForIndoorUnit { get; set; } = (System.Nullable<float>)Single.Parse("6", CultureInfo.InvariantCulture);
        

[Description("This field is used if Refrigerant Temperature Control Algorithm is ConstantTemp C" +
    "ondensing temperature is the refrigerant temperature, not air temperature")]
[JsonProperty("reference_condensing_temperature_for_indoor_unit")]
public System.Nullable<float> ReferenceCondensingTemperatureForIndoorUnit { get; set; } = (System.Nullable<float>)Single.Parse("44", CultureInfo.InvariantCulture);
        

[Description("This field is used if Refrigerant Temperature Control Algorithm is VariableTemp E" +
    "vaporating temperature is the refrigerant temperature, not air temperature")]
[JsonProperty("variable_evaporating_temperature_minimum_for_indoor_unit")]
public System.Nullable<float> VariableEvaporatingTemperatureMinimumForIndoorUnit { get; set; } = (System.Nullable<float>)Single.Parse("4", CultureInfo.InvariantCulture);
        

[Description("This field is used if Refrigerant Temperature Control Algorithm is VariableTemp E" +
    "vaporating temperature is the refrigerant temperature, not air temperature")]
[JsonProperty("variable_evaporating_temperature_maximum_for_indoor_unit")]
public System.Nullable<float> VariableEvaporatingTemperatureMaximumForIndoorUnit { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[Description("This field is used if Refrigerant Temperature Control Algorithm is VariableTemp C" +
    "ondensing temperature is the refrigerant temperature, not air temperature")]
[JsonProperty("variable_condensing_temperature_minimum_for_indoor_unit")]
public System.Nullable<float> VariableCondensingTemperatureMinimumForIndoorUnit { get; set; } = (System.Nullable<float>)Single.Parse("42", CultureInfo.InvariantCulture);
        

[Description("This field is used if Refrigerant Temperature Control Algorithm is VariableTemp C" +
    "ondensing temperature is the refrigerant temperature, not air temperature")]
[JsonProperty("variable_condensing_temperature_maximum_for_indoor_unit")]
public System.Nullable<float> VariableCondensingTemperatureMaximumForIndoorUnit { get; set; } = (System.Nullable<float>)Single.Parse("46", CultureInfo.InvariantCulture);
        

[Description("Enter the outdoor unit fan power per Watt of rated evaporative capacity [W/W]")]
[JsonProperty("outdoor_unit_fan_power_per_unit_of_rated_evaporative_capacity")]
public System.Nullable<float> OutdoorUnitFanPowerPerUnitOfRatedEvaporativeCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0.00425", CultureInfo.InvariantCulture);
        

[Description("This field is only used if the previous is set to autocalculate and performance i" +
    "nput method is NominalCapacity")]
[JsonProperty("outdoor_unit_fan_flow_rate_per_unit_of_rated_evaporative_capacity")]
public System.Nullable<float> OutdoorUnitFanFlowRatePerUnitOfRatedEvaporativeCapacity { get; set; } = (System.Nullable<float>)Single.Parse("7.5E-05", CultureInfo.InvariantCulture);
        

[JsonProperty("outdoor_unit_evaporating_temperature_function_of_superheating_curve_name")]
public string OutdoorUnitEvaporatingTemperatureFunctionOfSuperheatingCurveName { get; set; } = "";
        

[JsonProperty("outdoor_unit_condensing_temperature_function_of_subcooling_curve_name")]
public string OutdoorUnitCondensingTemperatureFunctionOfSubcoolingCurveName { get; set; } = "";
        

[Description("used to calculate the piping loss")]
[JsonProperty("diameter_of_main_pipe_connecting_outdoor_unit_to_the_first_branch_joint")]
public System.Nullable<float> DiameterOfMainPipeConnectingOutdoorUnitToTheFirstBranchJoint { get; set; } = (System.Nullable<float>)Single.Parse("0.0762", CultureInfo.InvariantCulture);
        

[Description("used to calculate the heat loss of the main pipe")]
[JsonProperty("length_of_main_pipe_connecting_outdoor_unit_to_the_first_branch_joint")]
public System.Nullable<float> LengthOfMainPipeConnectingOutdoorUnitToTheFirstBranchJoint { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[Description("used to calculate the refrigerant pressure drop of the main pipe")]
[JsonProperty("equivalent_length_of_main_pipe_connecting_outdoor_unit_to_the_first_branch_joint")]
public System.Nullable<float> EquivalentLengthOfMainPipeConnectingOutdoorUnitToTheFirstBranchJoint { get; set; } = (System.Nullable<float>)Single.Parse("36", CultureInfo.InvariantCulture);
        

[Description("Difference between outdoor unit height and indoor unit height Positive means outd" +
    "oor unit is higher than indoor unit Negative means outdoor unit is lower than in" +
    "door unit")]
[JsonProperty("height_difference_between_outdoor_unit_and_indoor_units")]
public System.Nullable<float> HeightDifferenceBetweenOutdoorUnitAndIndoorUnits { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[JsonProperty("main_pipe_insulation_thickness")]
public System.Nullable<float> MainPipeInsulationThickness { get; set; } = (System.Nullable<float>)Single.Parse("0.02", CultureInfo.InvariantCulture);
        

[JsonProperty("main_pipe_insulation_thermal_conductivity")]
public System.Nullable<float> MainPipeInsulationThermalConductivity { get; set; } = (System.Nullable<float>)Single.Parse("0.032", CultureInfo.InvariantCulture);
        

[Description("Enter the value of the resistive heater located in the compressor(s). This heater" +
    " is used to warm the refrigerant and oil when the compressor is off")]
[JsonProperty("crankcase_heater_power_per_compressor")]
public System.Nullable<float> CrankcaseHeaterPowerPerCompressor { get; set; } = (System.Nullable<float>)Single.Parse("33", CultureInfo.InvariantCulture);
        

[Description("Enter the total number of compressor. This input is used only for crankcase heate" +
    "r calculations.")]
[JsonProperty("number_of_compressors")]
public System.Nullable<float> NumberOfCompressors { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description("Enter the ratio of the first stage compressor to total compressor capacity All ot" +
    "her compressors are assumed to be equally sized. This inputs is used only for cr" +
    "ankcase heater calculations")]
[JsonProperty("ratio_of_compressor_size_to_total_compressor_capacity")]
public System.Nullable<float> RatioOfCompressorSizeToTotalCompressorCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[Description("Enter the maximum outdoor temperature above which the crankcase heaters are disab" +
    "led")]
[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForCrankcaseHeater { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[Description("Select a defrost strategy. Reverse cycle reverses the operating mode from heating" +
    " to cooling to melt frost formation on the condenser coil The resistive strategy" +
    " uses a resistive heater to melt the frost.")]
[JsonProperty("defrost_strategy")]
public AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_DefrostStrategy DefrostStrategy { get; set; } = (AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_DefrostStrategy)Enum.Parse(typeof(AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_DefrostStrategy), "Resistive");
        

[Description("Choose a defrost control type Either use a fixed Timed defrost period or select O" +
    "nDemand to defrost only when necessary")]
[JsonProperty("defrost_control")]
public AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_DefrostControl DefrostControl { get; set; } = (AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_DefrostControl)Enum.Parse(typeof(AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_DefrostControl), "Timed");
        

[Description("A valid performance curve must be used if ReverseCycle defrost strategy is select" +
    "ed")]
[JsonProperty("defrost_energy_input_ratio_modifier_function_of_temperature_curve_name")]
public string DefrostEnergyInputRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Fraction of time in defrost mode Only applicable if timed defrost control is spec" +
    "ified")]
[JsonProperty("defrost_time_period_fraction")]
public System.Nullable<float> DefrostTimePeriodFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.058333", CultureInfo.InvariantCulture);
        

[Description("Enter the size of the resistive defrost heating element Only applicable if resist" +
    "ive defrost strategy is specified")]
[JsonProperty("resistive_defrost_heater_capacity")]
public string ResistiveDefrostHeaterCapacity { get; set; } = (System.String)"0";
        

[Description("Enter the maximum outdoor temperature above which the defrost operation is disabl" +
    "ed")]
[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_defrost_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForDefrostOperation { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[JsonProperty("compressor_maximum_delta_pressure")]
public System.Nullable<float> CompressorMaximumDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("4500000", CultureInfo.InvariantCulture);
        

[Description("First index represents minimal capacity operation Last index represents full capa" +
    "city operation")]
[JsonProperty("number_of_compressor_loading_index_entries")]
public System.Nullable<float> NumberOfCompressorLoadingIndexEntries { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[JsonProperty("loading_indices")]
public string LoadingIndices { get; set; } = "";
    }
    
    public enum AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_RefrigerantTemperatureControlAlgorithmForIndoorUnit
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantTemp")]
        ConstantTemp = 1,
        
        [JsonProperty("VariableTemp")]
        VariableTemp = 2,
    }
    
    public enum AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_DefrostStrategy
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Resistive")]
        Resistive = 1,
        
        [JsonProperty("ReverseCycle")]
        ReverseCycle = 2,
    }
    
    public enum AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_DefrostControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("OnDemand")]
        OnDemand = 1,
        
        [JsonProperty("Timed")]
        Timed = 2,
    }
    
    [Description(@"This is a key object in the new physics based VRF Heat Recovery (HR) model applicable for Fluid Temperature Control. It describes the VRF HR system excluding the performance of indoor units. Indoor units are modeled separately in the ZoneHVAC:TerminalUnit:VariableRefrigerantFlow object")]
    [JsonObject("AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR")]
    public class AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_HR : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of a schedule that defines the availability of the unit Schedule v" +
    "alues of 0 denote the unit is off. All other values denote the unit is available" +
    " If this field is left blank, the unit is available the entire simulation")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Enter the name of a ZoneTerminalUnitList. This list connects zone terminal units " +
    "to this heat pump")]
[JsonProperty("zone_terminal_unit_list_name")]
public string ZoneTerminalUnitListName { get; set; } = "";
        

[JsonProperty("refrigerant_type")]
public string RefrigerantType { get; set; } = (System.String)"R410A";
        

[Description(@"Enter the total evaporative capacity in watts at rated conditions This is the capacity corresponding to the max compressor speed at rated conditions The actual evaporative capacity is obtained by multiplying the rated capacity with the modification factor calculated by Evaporative Capacity Multiplier Function of Temperature Curve")]
[JsonProperty("rated_evaporative_capacity")]
public string RatedEvaporativeCapacity { get; set; } = (System.String)"40000";
        

[Description(@"Enter the rated compressor power per Watt of rated evaporative capacity [W/W] Rated compressor power corresponds to the max compressor speed at rated conditions The actual compressor power is obtained by multiplying the rated power with the modification factor calculated by Compressor Power Multiplier Function of Temperature Curve")]
[JsonProperty("rated_compressor_power_per_unit_of_rated_evaporative_capacity")]
public System.Nullable<float> RatedCompressorPowerPerUnitOfRatedEvaporativeCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0.35", CultureInfo.InvariantCulture);
        

[Description("Enter the minimum outdoor temperature allowed for cooling operation Cooling is di" +
    "sabled below this temperature")]
[JsonProperty("minimum_outdoor_air_temperature_in_cooling_only_mode")]
public System.Nullable<float> MinimumOutdoorAirTemperatureInCoolingOnlyMode { get; set; } = (System.Nullable<float>)Single.Parse("-6", CultureInfo.InvariantCulture);
        

[Description("Enter the maximum outdoor temperature allowed for cooling operation Cooling is di" +
    "sabled above this temperature")]
[JsonProperty("maximum_outdoor_air_temperature_in_cooling_only_mode")]
public System.Nullable<float> MaximumOutdoorAirTemperatureInCoolingOnlyMode { get; set; } = (System.Nullable<float>)Single.Parse("43", CultureInfo.InvariantCulture);
        

[Description("Enter the minimum outdoor temperature allowed for heating operation Heating is di" +
    "sabled below this temperature")]
[JsonProperty("minimum_outdoor_air_temperature_in_heating_only_mode")]
public System.Nullable<float> MinimumOutdoorAirTemperatureInHeatingOnlyMode { get; set; } = (System.Nullable<float>)Single.Parse("-20", CultureInfo.InvariantCulture);
        

[Description("Enter the maximum outdoor temperature allowed for heating operation Heating is di" +
    "sabled below this temperature")]
[JsonProperty("maximum_outdoor_air_temperature_in_heating_only_mode")]
public System.Nullable<float> MaximumOutdoorAirTemperatureInHeatingOnlyMode { get; set; } = (System.Nullable<float>)Single.Parse("16", CultureInfo.InvariantCulture);
        

[Description("The minimum outdoor temperature below which heat recovery mode will not operate.")]
[JsonProperty("minimum_outdoor_temperature_in_heat_recovery_mode")]
public System.Nullable<float> MinimumOutdoorTemperatureInHeatRecoveryMode { get; set; } = (System.Nullable<float>)Single.Parse("-20", CultureInfo.InvariantCulture);
        

[Description("The maximum outdoor temperature above which heat recovery mode will not operate.")]
[JsonProperty("maximum_outdoor_temperature_in_heat_recovery_mode")]
public System.Nullable<float> MaximumOutdoorTemperatureInHeatRecoveryMode { get; set; } = (System.Nullable<float>)Single.Parse("43", CultureInfo.InvariantCulture);
        

[JsonProperty("refrigerant_temperature_control_algorithm_for_indoor_unit")]
public AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_HR_RefrigerantTemperatureControlAlgorithmForIndoorUnit RefrigerantTemperatureControlAlgorithmForIndoorUnit { get; set; } = (AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_HR_RefrigerantTemperatureControlAlgorithmForIndoorUnit)Enum.Parse(typeof(AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_HR_RefrigerantTemperatureControlAlgorithmForIndoorUnit), "VariableTemp");
        

[Description("This field is used if Refrigerant Temperature Control Algorithm is ConstantTemp E" +
    "vaporating temperature is the refrigerant temperature, not air temperature")]
[JsonProperty("reference_evaporating_temperature_for_indoor_unit")]
public System.Nullable<float> ReferenceEvaporatingTemperatureForIndoorUnit { get; set; } = (System.Nullable<float>)Single.Parse("6", CultureInfo.InvariantCulture);
        

[Description("This field is used if Refrigerant Temperature Control Algorithm is ConstantTemp C" +
    "ondensing temperature is the refrigerant temperature, not air temperature")]
[JsonProperty("reference_condensing_temperature_for_indoor_unit")]
public System.Nullable<float> ReferenceCondensingTemperatureForIndoorUnit { get; set; } = (System.Nullable<float>)Single.Parse("44", CultureInfo.InvariantCulture);
        

[Description("This field is used if Refrigerant Temperature Control Algorithm is VariableTemp E" +
    "vaporating temperature is the refrigerant temperature, not air temperature")]
[JsonProperty("variable_evaporating_temperature_minimum_for_indoor_unit")]
public System.Nullable<float> VariableEvaporatingTemperatureMinimumForIndoorUnit { get; set; } = (System.Nullable<float>)Single.Parse("4", CultureInfo.InvariantCulture);
        

[Description("This field is used if Refrigerant Temperature Control Algorithm is VariableTemp E" +
    "vaporating temperature is the refrigerant temperature, not air temperature")]
[JsonProperty("variable_evaporating_temperature_maximum_for_indoor_unit")]
public System.Nullable<float> VariableEvaporatingTemperatureMaximumForIndoorUnit { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[Description("This field is used if Refrigerant Temperature Control Algorithm is VariableTemp C" +
    "ondensing temperature is the refrigerant temperature, not air temperature")]
[JsonProperty("variable_condensing_temperature_minimum_for_indoor_unit")]
public System.Nullable<float> VariableCondensingTemperatureMinimumForIndoorUnit { get; set; } = (System.Nullable<float>)Single.Parse("42", CultureInfo.InvariantCulture);
        

[Description("This field is used if Refrigerant Temperature Control Algorithm is VariableTemp C" +
    "ondensing temperature is the refrigerant temperature, not air temperature")]
[JsonProperty("variable_condensing_temperature_maximum_for_indoor_unit")]
public System.Nullable<float> VariableCondensingTemperatureMaximumForIndoorUnit { get; set; } = (System.Nullable<float>)Single.Parse("46", CultureInfo.InvariantCulture);
        

[JsonProperty("outdoor_unit_evaporator_reference_superheating")]
public System.Nullable<float> OutdoorUnitEvaporatorReferenceSuperheating { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[JsonProperty("outdoor_unit_condenser_reference_subcooling")]
public System.Nullable<float> OutdoorUnitCondenserReferenceSubcooling { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[JsonProperty("outdoor_unit_evaporator_rated_bypass_factor")]
public System.Nullable<float> OutdoorUnitEvaporatorRatedBypassFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.4", CultureInfo.InvariantCulture);
        

[JsonProperty("outdoor_unit_condenser_rated_bypass_factor")]
public System.Nullable<float> OutdoorUnitCondenserRatedBypassFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("difference_between_outdoor_unit_evaporating_temperature_and_outdoor_air_temperatu" +
    "re_in_heat_recovery_mode")]
public System.Nullable<float> DifferenceBetweenOutdoorUnitEvaporatingTemperatureAndOutdoorAirTemperatureInHeatRecoveryMode { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[Description("Enter the rated capacity ratio between the main and supplementary outdoor unit he" +
    "at exchangers [W/W]")]
[JsonProperty("outdoor_unit_heat_exchanger_capacity_ratio")]
public System.Nullable<float> OutdoorUnitHeatExchangerCapacityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.3", CultureInfo.InvariantCulture);
        

[Description("Enter the outdoor unit fan power per Watt of rated evaporative capacity [W/W]")]
[JsonProperty("outdoor_unit_fan_power_per_unit_of_rated_evaporative_capacity")]
public System.Nullable<float> OutdoorUnitFanPowerPerUnitOfRatedEvaporativeCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0.00425", CultureInfo.InvariantCulture);
        

[Description("Enter the outdoor unit fan flow rate per Watt of rated evaporative capacity [W/W]" +
    "")]
[JsonProperty("outdoor_unit_fan_flow_rate_per_unit_of_rated_evaporative_capacity")]
public System.Nullable<float> OutdoorUnitFanFlowRatePerUnitOfRatedEvaporativeCapacity { get; set; } = (System.Nullable<float>)Single.Parse("7.5E-05", CultureInfo.InvariantCulture);
        

[JsonProperty("outdoor_unit_evaporating_temperature_function_of_superheating_curve_name")]
public string OutdoorUnitEvaporatingTemperatureFunctionOfSuperheatingCurveName { get; set; } = "";
        

[JsonProperty("outdoor_unit_condensing_temperature_function_of_subcooling_curve_name")]
public string OutdoorUnitCondensingTemperatureFunctionOfSubcoolingCurveName { get; set; } = "";
        

[Description("used to calculate the piping loss")]
[JsonProperty("diameter_of_main_pipe_for_suction_gas")]
public System.Nullable<float> DiameterOfMainPipeForSuctionGas { get; set; } = (System.Nullable<float>)Single.Parse("0.0762", CultureInfo.InvariantCulture);
        

[Description("used to calculate the piping loss")]
[JsonProperty("diameter_of_main_pipe_for_discharge_gas")]
public System.Nullable<float> DiameterOfMainPipeForDischargeGas { get; set; } = (System.Nullable<float>)Single.Parse("0.0762", CultureInfo.InvariantCulture);
        

[Description("used to calculate the heat loss of the main pipe")]
[JsonProperty("length_of_main_pipe_connecting_outdoor_unit_to_the_first_branch_joint")]
public System.Nullable<float> LengthOfMainPipeConnectingOutdoorUnitToTheFirstBranchJoint { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

[Description("used to calculate the refrigerant pressure drop of the main pipe")]
[JsonProperty("equivalent_length_of_main_pipe_connecting_outdoor_unit_to_the_first_branch_joint")]
public System.Nullable<float> EquivalentLengthOfMainPipeConnectingOutdoorUnitToTheFirstBranchJoint { get; set; } = (System.Nullable<float>)Single.Parse("36", CultureInfo.InvariantCulture);
        

[Description("Difference between outdoor unit height and indoor unit height Positive means outd" +
    "oor unit is higher than indoor unit Negative means outdoor unit is lower than in" +
    "door unit")]
[JsonProperty("height_difference_between_outdoor_unit_and_indoor_units")]
public System.Nullable<float> HeightDifferenceBetweenOutdoorUnitAndIndoorUnits { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[JsonProperty("main_pipe_insulation_thickness")]
public System.Nullable<float> MainPipeInsulationThickness { get; set; } = (System.Nullable<float>)Single.Parse("0.02", CultureInfo.InvariantCulture);
        

[JsonProperty("main_pipe_insulation_thermal_conductivity")]
public System.Nullable<float> MainPipeInsulationThermalConductivity { get; set; } = (System.Nullable<float>)Single.Parse("0.032", CultureInfo.InvariantCulture);
        

[Description("Enter the value of the resistive heater located in the compressor(s). This heater" +
    " is used to warm the refrigerant and oil when the compressor is off")]
[JsonProperty("crankcase_heater_power_per_compressor")]
public System.Nullable<float> CrankcaseHeaterPowerPerCompressor { get; set; } = (System.Nullable<float>)Single.Parse("33", CultureInfo.InvariantCulture);
        

[Description("Enter the total number of compressor. This input is used only for crankcase heate" +
    "r calculations.")]
[JsonProperty("number_of_compressors")]
public System.Nullable<float> NumberOfCompressors { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description("Enter the ratio of the first stage compressor to total compressor capacity All ot" +
    "her compressors are assumed to be equally sized. This inputs is used only for cr" +
    "ankcase heater calculations")]
[JsonProperty("ratio_of_compressor_size_to_total_compressor_capacity")]
public System.Nullable<float> RatioOfCompressorSizeToTotalCompressorCapacity { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[Description("Enter the maximum outdoor temperature above which the crankcase heaters are disab" +
    "led")]
[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForCrankcaseHeater { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[Description("Select a defrost strategy. Reverse cycle reverses the operating mode from heating" +
    " to cooling to melt frost formation on the condenser coil The resistive strategy" +
    " uses a resistive heater to melt the frost.")]
[JsonProperty("defrost_strategy")]
public AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_HR_DefrostStrategy DefrostStrategy { get; set; } = (AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_HR_DefrostStrategy)Enum.Parse(typeof(AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_HR_DefrostStrategy), "Resistive");
        

[Description("Choose a defrost control type Either use a fixed Timed defrost period or select O" +
    "nDemand to defrost only when necessary")]
[JsonProperty("defrost_control")]
public AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_HR_DefrostControl DefrostControl { get; set; } = (AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_HR_DefrostControl)Enum.Parse(typeof(AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_HR_DefrostControl), "Timed");
        

[Description("A valid performance curve must be used if ReverseCycle defrost strategy is select" +
    "ed")]
[JsonProperty("defrost_energy_input_ratio_modifier_function_of_temperature_curve_name")]
public string DefrostEnergyInputRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        

[Description("Fraction of time in defrost mode Only applicable if timed defrost control is spec" +
    "ified")]
[JsonProperty("defrost_time_period_fraction")]
public System.Nullable<float> DefrostTimePeriodFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.058333", CultureInfo.InvariantCulture);
        

[Description("Enter the size of the resistive defrost heating element Only applicable if resist" +
    "ive defrost strategy is specified")]
[JsonProperty("resistive_defrost_heater_capacity")]
public string ResistiveDefrostHeaterCapacity { get; set; } = (System.String)"0";
        

[Description("Enter the maximum outdoor temperature above which the defrost operation is disabl" +
    "ed")]
[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_defrost_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForDefrostOperation { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[Description(@"This is used to describe the transition from Cooling Only mode to Heat Recovery mode Enter the fractional capacity available at the start of heat recovery mode. The capacity exponentially approaches the steady-state value according to the inputs for Heat Recovery Cooling Capacity Modifier and Heat Recovery Cooling Capacity Time Constant")]
[JsonProperty("initial_heat_recovery_cooling_capacity_fraction")]
public System.Nullable<float> InitialHeatRecoveryCoolingCapacityFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This is used to describe the transition from Cooling Only mode to Heat Recovery m" +
    "ode Enter the time constant used to model the transition from cooling only mode " +
    "to heat recovery mode")]
[JsonProperty("heat_recovery_cooling_capacity_time_constant")]
public System.Nullable<float> HeatRecoveryCoolingCapacityTimeConstant { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"This is used to describe the transition from Cooling Only mode to Heat Recovery mode Enter the fractional electric consumption rate at the start of heat recovery mode. The electric consumption rate exponentially approaches the steady-state value according to the inputs for Heat Recovery Cooling Energy Modifier and Heat Recovery Cooling Energy Time Constant")]
[JsonProperty("initial_heat_recovery_cooling_energy_fraction")]
public System.Nullable<float> InitialHeatRecoveryCoolingEnergyFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This is used to describe the transition from Cooling Only mode to Heat Recovery m" +
    "ode Enter the time constant used to model the transition from cooling only mode " +
    "to heat recovery mode")]
[JsonProperty("heat_recovery_cooling_energy_time_constant")]
public System.Nullable<float> HeatRecoveryCoolingEnergyTimeConstant { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"This is used to describe the transition from Heating Only mode to Heat Recovery mode Enter the fractional capacity available at the start of heat recovery mode. The capacity exponentially approaches the steady-state value according to the inputs for Heat Recovery Heating Capacity Modifier and Heat Recovery Heating Capacity Time Constant")]
[JsonProperty("initial_heat_recovery_heating_capacity_fraction")]
public System.Nullable<float> InitialHeatRecoveryHeatingCapacityFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This is used to describe the transition from Heating Only mode to Heat Recovery m" +
    "ode Enter the time constant used to model the transition from cooling only mode " +
    "to heat recovery mode")]
[JsonProperty("heat_recovery_heating_capacity_time_constant")]
public System.Nullable<float> HeatRecoveryHeatingCapacityTimeConstant { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"This is used to describe the transition from Heating Only mode to Heat Recovery mode Enter the fractional electric consumption rate at the start of heat recovery mode. The electric consumption rate exponentially approaches the steady-state value according to the inputs for Heat Recovery Cooling Energy Modifier and Heat Recovery Cooling Energy Time Constant")]
[JsonProperty("initial_heat_recovery_heating_energy_fraction")]
public System.Nullable<float> InitialHeatRecoveryHeatingEnergyFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("This is used to describe the transition from Heating Only mode to Heat Recovery m" +
    "ode Enter the time constant used to model the transition from cooling only mode " +
    "to heat recovery mode")]
[JsonProperty("heat_recovery_heating_energy_time_constant")]
public System.Nullable<float> HeatRecoveryHeatingEnergyTimeConstant { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("compressor_maximum_delta_pressure")]
public System.Nullable<float> CompressorMaximumDeltaPressure { get; set; } = (System.Nullable<float>)Single.Parse("4500000", CultureInfo.InvariantCulture);
        

[Description("Efficiency of the compressor inverter")]
[JsonProperty("compressor_inverter_efficiency")]
public System.Nullable<float> CompressorInverterEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.95", CultureInfo.InvariantCulture);
        

[Description("Describe the evaporative capacity difference because of system configuration diff" +
    "erence between test bed and real system.")]
[JsonProperty("compressor_evaporative_capacity_correction_factor")]
public System.Nullable<float> CompressorEvaporativeCapacityCorrectionFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Load index describe the compressor operational state, either a single compressor " +
    "or multiple compressors, at different load levels. First index represents minima" +
    "l capacity operation Last index represents full capacity operation")]
[JsonProperty("number_of_compressor_loading_index_entries")]
public System.Nullable<float> NumberOfCompressorLoadingIndexEntries { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[JsonProperty("loading_indices")]
public string LoadingIndices { get; set; } = "";
    }
    
    public enum AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_HR_RefrigerantTemperatureControlAlgorithmForIndoorUnit
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantTemp")]
        ConstantTemp = 1,
        
        [JsonProperty("VariableTemp")]
        VariableTemp = 2,
    }
    
    public enum AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_HR_DefrostStrategy
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Resistive")]
        Resistive = 1,
        
        [JsonProperty("ReverseCycle")]
        ReverseCycle = 2,
    }
    
    public enum AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_HR_DefrostControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("OnDemand")]
        OnDemand = 1,
        
        [JsonProperty("Timed")]
        Timed = 2,
    }
    
    [Description("List of variable refrigerant flow (VRF) terminal units served by a given VRF cond" +
        "ensing unit. See ZoneHVAC:TerminalUnit:VariableRefrigerantFlow and AirConditione" +
        "r:VariableRefrigerantFlow.")]
    [JsonObject("ZoneTerminalUnitList")]
    public class ZoneTerminalUnitList : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_terminal_unit_list_name")]
public string ZoneTerminalUnitListName { get; set; } = "";
        

[JsonProperty("terminal_units")]
public string TerminalUnits { get; set; } = "";
    }
}
namespace BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Water heater with well-mixed, single-node water tank. May be used to model a tank" +
        "less water heater (small tank volume), a hot water storage tank (zero heater cap" +
        "acity), or a heat pump water heater (see WaterHeater:HeatPump:PumpedCondenser.)")]
    [JsonObject("WaterHeater:Mixed")]
    public class WaterHeater_Mixed : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("tank_volume")]
public string TankVolume { get; set; } = (System.String)"0";
        

[JsonProperty("setpoint_temperature_schedule_name")]
public string SetpointTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("deadband_temperature_difference")]
public System.Nullable<float> DeadbandTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_temperature_limit")]
public System.Nullable<float> MaximumTemperatureLimit { get; set; } = null;
        

[JsonProperty("heater_control_type")]
public WaterHeater_Mixed_HeaterControlType HeaterControlType { get; set; } = (WaterHeater_Mixed_HeaterControlType)Enum.Parse(typeof(WaterHeater_Mixed_HeaterControlType), "Cycle");
        

[JsonProperty("heater_maximum_capacity")]
public string HeaterMaximumCapacity { get; set; } = "";
        

[Description("Only used when Heater Control Type is set to Modulate")]
[JsonProperty("heater_minimum_capacity")]
public System.Nullable<float> HeaterMinimumCapacity { get; set; } = null;
        

[Description("Not yet implemented")]
[JsonProperty("heater_ignition_minimum_flow_rate")]
public System.Nullable<float> HeaterIgnitionMinimumFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Not yet implemented")]
[JsonProperty("heater_ignition_delay")]
public System.Nullable<float> HeaterIgnitionDelay { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("heater_fuel_type")]
public WaterHeater_Mixed_HeaterFuelType HeaterFuelType { get; set; } = (WaterHeater_Mixed_HeaterFuelType)Enum.Parse(typeof(WaterHeater_Mixed_HeaterFuelType), "Coal");
        

[JsonProperty("heater_thermal_efficiency")]
public System.Nullable<float> HeaterThermalEfficiency { get; set; } = null;
        

[JsonProperty("part_load_factor_curve_name")]
public string PartLoadFactorCurveName { get; set; } = "";
        

[JsonProperty("off_cycle_parasitic_fuel_consumption_rate")]
public System.Nullable<float> OffCycleParasiticFuelConsumptionRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("off_cycle_parasitic_fuel_type")]
public WaterHeater_Mixed_OffCycleParasiticFuelType OffCycleParasiticFuelType { get; set; } = (WaterHeater_Mixed_OffCycleParasiticFuelType)Enum.Parse(typeof(WaterHeater_Mixed_OffCycleParasiticFuelType), "Coal");
        

[JsonProperty("off_cycle_parasitic_heat_fraction_to_tank")]
public System.Nullable<float> OffCycleParasiticHeatFractionToTank { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("on_cycle_parasitic_fuel_consumption_rate")]
public System.Nullable<float> OnCycleParasiticFuelConsumptionRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("on_cycle_parasitic_fuel_type")]
public WaterHeater_Mixed_OnCycleParasiticFuelType OnCycleParasiticFuelType { get; set; } = (WaterHeater_Mixed_OnCycleParasiticFuelType)Enum.Parse(typeof(WaterHeater_Mixed_OnCycleParasiticFuelType), "Coal");
        

[JsonProperty("on_cycle_parasitic_heat_fraction_to_tank")]
public System.Nullable<float> OnCycleParasiticHeatFractionToTank { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("ambient_temperature_indicator")]
public WaterHeater_Mixed_AmbientTemperatureIndicator AmbientTemperatureIndicator { get; set; } = (WaterHeater_Mixed_AmbientTemperatureIndicator)Enum.Parse(typeof(WaterHeater_Mixed_AmbientTemperatureIndicator), "Outdoors");
        

[JsonProperty("ambient_temperature_schedule_name")]
public string AmbientTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("ambient_temperature_zone_name")]
public string AmbientTemperatureZoneName { get; set; } = "";
        

[Description("required for Ambient Temperature Indicator=Outdoors")]
[JsonProperty("ambient_temperature_outdoor_air_node_name")]
public string AmbientTemperatureOutdoorAirNodeName { get; set; } = "";
        

[JsonProperty("off_cycle_loss_coefficient_to_ambient_temperature")]
public System.Nullable<float> OffCycleLossCoefficientToAmbientTemperature { get; set; } = null;
        

[JsonProperty("off_cycle_loss_fraction_to_zone")]
public System.Nullable<float> OffCycleLossFractionToZone { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("on_cycle_loss_coefficient_to_ambient_temperature")]
public System.Nullable<float> OnCycleLossCoefficientToAmbientTemperature { get; set; } = null;
        

[JsonProperty("on_cycle_loss_fraction_to_zone")]
public System.Nullable<float> OnCycleLossFractionToZone { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Only used if Use Side Node connections are blank")]
[JsonProperty("peak_use_flow_rate")]
public System.Nullable<float> PeakUseFlowRate { get; set; } = null;
        

[Description("Only used if Use Side Node connections are blank")]
[JsonProperty("use_flow_rate_fraction_schedule_name")]
public string UseFlowRateFractionScheduleName { get; set; } = "";
        

[Description("Only used if Use Side Node connections are blank Defaults to water temperatures c" +
    "alculated by Site:WaterMainsTemperature object")]
[JsonProperty("cold_water_supply_temperature_schedule_name")]
public string ColdWaterSupplyTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("use_side_inlet_node_name")]
public string UseSideInletNodeName { get; set; } = "";
        

[JsonProperty("use_side_outlet_node_name")]
public string UseSideOutletNodeName { get; set; } = "";
        

[JsonProperty("use_side_effectiveness")]
public System.Nullable<float> UseSideEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("source_side_inlet_node_name")]
public string SourceSideInletNodeName { get; set; } = "";
        

[JsonProperty("source_side_outlet_node_name")]
public string SourceSideOutletNodeName { get; set; } = "";
        

[JsonProperty("source_side_effectiveness")]
public System.Nullable<float> SourceSideEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("use_side_design_flow_rate")]
public string UseSideDesignFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("source_side_design_flow_rate")]
public string SourceSideDesignFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("Parameter for autosizing design flow rates for indirectly heated water tanks Time" +
    " required to raise temperature of entire tank from 14.4C to 57.2C")]
[JsonProperty("indirect_water_heating_recovery_time")]
public System.Nullable<float> IndirectWaterHeatingRecoveryTime { get; set; } = (System.Nullable<float>)Single.Parse("1.5", CultureInfo.InvariantCulture);
        

[Description(@"StorageTank mode always requests flow unless tank is at its Maximum Temperature Limit IndirectHeatPrimarySetpoint mode requests flow whenever primary setpoint calls for heat IndirectHeatAlternateSetpoint mode requests flow whenever alternate indirect setpoint calls for heat")]
[JsonProperty("source_side_flow_control_mode")]
public WaterHeater_Mixed_SourceSideFlowControlMode SourceSideFlowControlMode { get; set; } = (WaterHeater_Mixed_SourceSideFlowControlMode)Enum.Parse(typeof(WaterHeater_Mixed_SourceSideFlowControlMode), "IndirectHeatPrimarySetpoint");
        

[Description("This field is only used if the previous is set to IndirectHeatAlternateSetpoint")]
[JsonProperty("indirect_alternate_setpoint_temperature_schedule_name")]
public string IndirectAlternateSetpointTemperatureScheduleName { get; set; } = "";
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
    }
    
    public enum WaterHeater_Mixed_HeaterControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Cycle")]
        Cycle = 1,
        
        [JsonProperty("Modulate")]
        Modulate = 2,
    }
    
    public enum WaterHeater_Mixed_HeaterFuelType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 2,
        
        [JsonProperty("Electricity")]
        Electricity = 3,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 4,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 5,
        
        [JsonProperty("Gasoline")]
        Gasoline = 6,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 7,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 8,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 9,
        
        [JsonProperty("Propane")]
        Propane = 10,
        
        [JsonProperty("Steam")]
        Steam = 11,
    }
    
    public enum WaterHeater_Mixed_OffCycleParasiticFuelType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 2,
        
        [JsonProperty("Electricity")]
        Electricity = 3,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 4,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 5,
        
        [JsonProperty("Gasoline")]
        Gasoline = 6,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 7,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 8,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 9,
        
        [JsonProperty("Propane")]
        Propane = 10,
        
        [JsonProperty("Steam")]
        Steam = 11,
    }
    
    public enum WaterHeater_Mixed_OnCycleParasiticFuelType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 2,
        
        [JsonProperty("Electricity")]
        Electricity = 3,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 4,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 5,
        
        [JsonProperty("Gasoline")]
        Gasoline = 6,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 7,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 8,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 9,
        
        [JsonProperty("Propane")]
        Propane = 10,
        
        [JsonProperty("Steam")]
        Steam = 11,
    }
    
    public enum WaterHeater_Mixed_AmbientTemperatureIndicator
    {
        
        [JsonProperty("Outdoors")]
        Outdoors = 0,
        
        [JsonProperty("Schedule")]
        Schedule = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    public enum WaterHeater_Mixed_SourceSideFlowControlMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("IndirectHeatAlternateSetpoint")]
        IndirectHeatAlternateSetpoint = 1,
        
        [JsonProperty("IndirectHeatPrimarySetpoint")]
        IndirectHeatPrimarySetpoint = 2,
        
        [JsonProperty("StorageTank")]
        StorageTank = 3,
    }
    
    [Description("Water heater with stratified, multi-node water tank. May be used to model a tankl" +
        "ess water heater (small tank volume), a hot water storage tank (zero heater capa" +
        "city), or a heat pump water heater (see WaterHeater:HeatPump:*.)")]
    [JsonObject("WaterHeater:Stratified")]
    public class WaterHeater_Stratified : BHoMObject, IEnergyPlusClass
    {
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
        

[JsonProperty("tank_volume")]
public string TankVolume { get; set; } = "";
        

[Description("Height is measured in the axial direction for horizontal cylinders")]
[JsonProperty("tank_height")]
public string TankHeight { get; set; } = "";
        

[JsonProperty("tank_shape")]
public WaterHeater_Stratified_TankShape TankShape { get; set; } = (WaterHeater_Stratified_TankShape)Enum.Parse(typeof(WaterHeater_Stratified_TankShape), "VerticalCylinder");
        

[Description("Only used if Tank Shape is Other")]
[JsonProperty("tank_perimeter")]
public System.Nullable<float> TankPerimeter { get; set; } = null;
        

[JsonProperty("maximum_temperature_limit")]
public System.Nullable<float> MaximumTemperatureLimit { get; set; } = null;
        

[JsonProperty("heater_priority_control")]
public WaterHeater_Stratified_HeaterPriorityControl HeaterPriorityControl { get; set; } = (WaterHeater_Stratified_HeaterPriorityControl)Enum.Parse(typeof(WaterHeater_Stratified_HeaterPriorityControl), "MasterSlave");
        

[JsonProperty("heater_1_setpoint_temperature_schedule_name")]
public string Heater1SetpointTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("heater_1_deadband_temperature_difference")]
public System.Nullable<float> Heater1DeadbandTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("heater_1_capacity")]
public string Heater1Capacity { get; set; } = "";
        

[JsonProperty("heater_1_height")]
public System.Nullable<float> Heater1Height { get; set; } = null;
        

[JsonProperty("heater_2_setpoint_temperature_schedule_name")]
public string Heater2SetpointTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("heater_2_deadband_temperature_difference")]
public System.Nullable<float> Heater2DeadbandTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("heater_2_capacity")]
public System.Nullable<float> Heater2Capacity { get; set; } = null;
        

[JsonProperty("heater_2_height")]
public System.Nullable<float> Heater2Height { get; set; } = null;
        

[JsonProperty("heater_fuel_type")]
public WaterHeater_Stratified_HeaterFuelType HeaterFuelType { get; set; } = (WaterHeater_Stratified_HeaterFuelType)Enum.Parse(typeof(WaterHeater_Stratified_HeaterFuelType), "Coal");
        

[JsonProperty("heater_thermal_efficiency")]
public System.Nullable<float> HeaterThermalEfficiency { get; set; } = null;
        

[JsonProperty("off_cycle_parasitic_fuel_consumption_rate")]
public System.Nullable<float> OffCycleParasiticFuelConsumptionRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("off_cycle_parasitic_fuel_type")]
public WaterHeater_Stratified_OffCycleParasiticFuelType OffCycleParasiticFuelType { get; set; } = (WaterHeater_Stratified_OffCycleParasiticFuelType)Enum.Parse(typeof(WaterHeater_Stratified_OffCycleParasiticFuelType), "Coal");
        

[JsonProperty("off_cycle_parasitic_heat_fraction_to_tank")]
public System.Nullable<float> OffCycleParasiticHeatFractionToTank { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("off_cycle_parasitic_height")]
public System.Nullable<float> OffCycleParasiticHeight { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("on_cycle_parasitic_fuel_consumption_rate")]
public System.Nullable<float> OnCycleParasiticFuelConsumptionRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("on_cycle_parasitic_fuel_type")]
public WaterHeater_Stratified_OnCycleParasiticFuelType OnCycleParasiticFuelType { get; set; } = (WaterHeater_Stratified_OnCycleParasiticFuelType)Enum.Parse(typeof(WaterHeater_Stratified_OnCycleParasiticFuelType), "Coal");
        

[JsonProperty("on_cycle_parasitic_heat_fraction_to_tank")]
public System.Nullable<float> OnCycleParasiticHeatFractionToTank { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("on_cycle_parasitic_height")]
public System.Nullable<float> OnCycleParasiticHeight { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("ambient_temperature_indicator")]
public WaterHeater_Stratified_AmbientTemperatureIndicator AmbientTemperatureIndicator { get; set; } = (WaterHeater_Stratified_AmbientTemperatureIndicator)Enum.Parse(typeof(WaterHeater_Stratified_AmbientTemperatureIndicator), "Outdoors");
        

[JsonProperty("ambient_temperature_schedule_name")]
public string AmbientTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("ambient_temperature_zone_name")]
public string AmbientTemperatureZoneName { get; set; } = "";
        

[Description("required for Ambient Temperature Indicator=Outdoors")]
[JsonProperty("ambient_temperature_outdoor_air_node_name")]
public string AmbientTemperatureOutdoorAirNodeName { get; set; } = "";
        

[JsonProperty("uniform_skin_loss_coefficient_per_unit_area_to_ambient_temperature")]
public System.Nullable<float> UniformSkinLossCoefficientPerUnitAreaToAmbientTemperature { get; set; } = null;
        

[JsonProperty("skin_loss_fraction_to_zone")]
public System.Nullable<float> SkinLossFractionToZone { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("off_cycle_flue_loss_coefficient_to_ambient_temperature")]
public System.Nullable<float> OffCycleFlueLossCoefficientToAmbientTemperature { get; set; } = null;
        

[JsonProperty("off_cycle_flue_loss_fraction_to_zone")]
public System.Nullable<float> OffCycleFlueLossFractionToZone { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Only used if Use Side Node connections are blank")]
[JsonProperty("peak_use_flow_rate")]
public System.Nullable<float> PeakUseFlowRate { get; set; } = null;
        

[Description("If blank, defaults to 1.0 at all times Only used if use side node connections are" +
    " blank")]
[JsonProperty("use_flow_rate_fraction_schedule_name")]
public string UseFlowRateFractionScheduleName { get; set; } = "";
        

[Description("Only used if use side node connections are blank Defaults to water temperatures c" +
    "alculated by Site:WaterMainsTemperature object")]
[JsonProperty("cold_water_supply_temperature_schedule_name")]
public string ColdWaterSupplyTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("use_side_inlet_node_name")]
public string UseSideInletNodeName { get; set; } = "";
        

[JsonProperty("use_side_outlet_node_name")]
public string UseSideOutletNodeName { get; set; } = "";
        

[Description(@"The use side effectiveness in the stratified tank model is a simplified analogy of a heat exchanger's effectiveness. This effectiveness is equal to the fraction of use mass flow rate that directly mixes with the tank fluid. And one minus the effectiveness is the fraction that bypasses the tank. The use side mass flow rate that bypasses the tank is mixed with the fluid or water leaving the stratified tank.")]
[JsonProperty("use_side_effectiveness")]
public System.Nullable<float> UseSideEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Defaults to bottom of tank")]
[JsonProperty("use_side_inlet_height")]
public System.Nullable<float> UseSideInletHeight { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Defaults to top of tank")]
[JsonProperty("use_side_outlet_height")]
public string UseSideOutletHeight { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("source_side_inlet_node_name")]
public string SourceSideInletNodeName { get; set; } = "";
        

[JsonProperty("source_side_outlet_node_name")]
public string SourceSideOutletNodeName { get; set; } = "";
        

[Description(@"The source side effectiveness in the stratified tank model is a simplified analogy of a heat exchanger's effectiveness. This effectiveness is equal to the fraction of source mass flow rate that directly mixes with the tank fluid. And one minus the effectiveness is the fraction that bypasses the tank. The source side mass flow rate that bypasses the tank is mixed with the fluid or water leaving the stratified tank.")]
[JsonProperty("source_side_effectiveness")]
public System.Nullable<float> SourceSideEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Defaults to top of tank")]
[JsonProperty("source_side_inlet_height")]
public string SourceSideInletHeight { get; set; } = (System.String)"Autocalculate";
        

[Description("Defaults to bottom of tank")]
[JsonProperty("source_side_outlet_height")]
public System.Nullable<float> SourceSideOutletHeight { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("inlet_mode")]
public WaterHeater_Stratified_InletMode InletMode { get; set; } = (WaterHeater_Stratified_InletMode)Enum.Parse(typeof(WaterHeater_Stratified_InletMode), "Fixed");
        

[JsonProperty("use_side_design_flow_rate")]
public string UseSideDesignFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("source_side_design_flow_rate")]
public string SourceSideDesignFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("Parameter for autosizing design flow rates for indirectly heated water tanks time" +
    " required to raise temperature of entire tank from 14.4C to 57.2C")]
[JsonProperty("indirect_water_heating_recovery_time")]
public System.Nullable<float> IndirectWaterHeatingRecoveryTime { get; set; } = (System.Nullable<float>)Single.Parse("1.5", CultureInfo.InvariantCulture);
        

[JsonProperty("number_of_nodes")]
public System.Nullable<float> NumberOfNodes { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("additional_destratification_conductivity")]
public System.Nullable<float> AdditionalDestratificationConductivity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_1_additional_loss_coefficient")]
public System.Nullable<float> Node1AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_2_additional_loss_coefficient")]
public System.Nullable<float> Node2AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_3_additional_loss_coefficient")]
public System.Nullable<float> Node3AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_4_additional_loss_coefficient")]
public System.Nullable<float> Node4AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_5_additional_loss_coefficient")]
public System.Nullable<float> Node5AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_6_additional_loss_coefficient")]
public System.Nullable<float> Node6AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_7_additional_loss_coefficient")]
public System.Nullable<float> Node7AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_8_additional_loss_coefficient")]
public System.Nullable<float> Node8AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_9_additional_loss_coefficient")]
public System.Nullable<float> Node9AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_10_additional_loss_coefficient")]
public System.Nullable<float> Node10AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_11_additional_loss_coefficient")]
public System.Nullable<float> Node11AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_12_additional_loss_coefficient")]
public System.Nullable<float> Node12AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"StorageTank mode always requests flow unless tank is at its Maximum Temperature Limit IndirectHeatPrimarySetpoint mode requests flow whenever primary setpoint for heater 1 calls for heat IndirectHeatAlternateSetpoint mode requests flow whenever alternate indirect setpoint calls for heat")]
[JsonProperty("source_side_flow_control_mode")]
public WaterHeater_Stratified_SourceSideFlowControlMode SourceSideFlowControlMode { get; set; } = (WaterHeater_Stratified_SourceSideFlowControlMode)Enum.Parse(typeof(WaterHeater_Stratified_SourceSideFlowControlMode), "IndirectHeatPrimarySetpoint");
        

[Description("This field is only used if the previous is set to IndirectHeatAlternateSetpoint")]
[JsonProperty("indirect_alternate_setpoint_temperature_schedule_name")]
public string IndirectAlternateSetpointTemperatureScheduleName { get; set; } = "";
    }
    
    public enum WaterHeater_Stratified_TankShape
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("HorizontalCylinder")]
        HorizontalCylinder = 1,
        
        [JsonProperty("Other")]
        Other = 2,
        
        [JsonProperty("VerticalCylinder")]
        VerticalCylinder = 3,
    }
    
    public enum WaterHeater_Stratified_HeaterPriorityControl
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MasterSlave")]
        MasterSlave = 1,
        
        [JsonProperty("Simultaneous")]
        Simultaneous = 2,
    }
    
    public enum WaterHeater_Stratified_HeaterFuelType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 2,
        
        [JsonProperty("Electricity")]
        Electricity = 3,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 4,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 5,
        
        [JsonProperty("Gasoline")]
        Gasoline = 6,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 7,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 8,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 9,
        
        [JsonProperty("Propane")]
        Propane = 10,
        
        [JsonProperty("Steam")]
        Steam = 11,
    }
    
    public enum WaterHeater_Stratified_OffCycleParasiticFuelType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 2,
        
        [JsonProperty("Electricity")]
        Electricity = 3,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 4,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 5,
        
        [JsonProperty("Gasoline")]
        Gasoline = 6,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 7,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 8,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 9,
        
        [JsonProperty("Propane")]
        Propane = 10,
        
        [JsonProperty("Steam")]
        Steam = 11,
    }
    
    public enum WaterHeater_Stratified_OnCycleParasiticFuelType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 2,
        
        [JsonProperty("Electricity")]
        Electricity = 3,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 4,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 5,
        
        [JsonProperty("Gasoline")]
        Gasoline = 6,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 7,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 8,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 9,
        
        [JsonProperty("Propane")]
        Propane = 10,
        
        [JsonProperty("Steam")]
        Steam = 11,
    }
    
    public enum WaterHeater_Stratified_AmbientTemperatureIndicator
    {
        
        [JsonProperty("Outdoors")]
        Outdoors = 0,
        
        [JsonProperty("Schedule")]
        Schedule = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    public enum WaterHeater_Stratified_InletMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Fixed")]
        Fixed = 1,
        
        [JsonProperty("Seeking")]
        Seeking = 2,
    }
    
    public enum WaterHeater_Stratified_SourceSideFlowControlMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("IndirectHeatAlternateSetpoint")]
        IndirectHeatAlternateSetpoint = 1,
        
        [JsonProperty("IndirectHeatPrimarySetpoint")]
        IndirectHeatPrimarySetpoint = 2,
        
        [JsonProperty("StorageTank")]
        StorageTank = 3,
    }
    
    [Description("This input object is used with WaterHeater:Mixed or with WaterHeater:Stratified t" +
        "o autosize tank volume and heater capacity This object is not needed if water he" +
        "aters are not autosized.")]
    [JsonObject("WaterHeater:Sizing")]
    public class WaterHeater_Sizing : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("waterheater_name")]
public string WaterheaterName { get; set; } = "";
        

[JsonProperty("design_mode")]
public WaterHeater_Sizing_DesignMode DesignMode { get; set; } = (WaterHeater_Sizing_DesignMode)Enum.Parse(typeof(WaterHeater_Sizing_DesignMode), "PeakDraw");
        

[Description("Only used for Design Mode = PeakDraw")]
[JsonProperty("time_storage_can_meet_peak_draw")]
public System.Nullable<float> TimeStorageCanMeetPeakDraw { get; set; } = null;
        

[Description("Only used for Design Mode = PeakDraw")]
[JsonProperty("time_for_tank_recovery")]
public System.Nullable<float> TimeForTankRecovery { get; set; } = null;
        

[Description("Only used if Design Mode = PeakDraw and the water heater also has autosized flow " +
    "rates for connections on the demand side of a plant loop")]
[JsonProperty("nominal_tank_volume_for_autosizing_plant_connections")]
public System.Nullable<float> NominalTankVolumeForAutosizingPlantConnections { get; set; } = null;
        

[Description("Only used for Design Mode = ResidentialHUD-FHAMinimum")]
[JsonProperty("number_of_bedrooms")]
public System.Nullable<float> NumberOfBedrooms { get; set; } = null;
        

[Description("Only used for Design Mode = ResidentialHUD-FHAMinimum")]
[JsonProperty("number_of_bathrooms")]
public System.Nullable<float> NumberOfBathrooms { get; set; } = null;
        

[Description("Only used for Design Mode = PerPerson")]
[JsonProperty("storage_capacity_per_person")]
public System.Nullable<float> StorageCapacityPerPerson { get; set; } = null;
        

[Description("Only used for Design Mode = PerPerson")]
[JsonProperty("recovery_capacity_per_person")]
public System.Nullable<float> RecoveryCapacityPerPerson { get; set; } = null;
        

[Description("Only used for Design Mode = PerFloorArea")]
[JsonProperty("storage_capacity_per_floor_area")]
public System.Nullable<float> StorageCapacityPerFloorArea { get; set; } = null;
        

[Description("Only used for Design Mode = PerFloorArea")]
[JsonProperty("recovery_capacity_per_floor_area")]
public System.Nullable<float> RecoveryCapacityPerFloorArea { get; set; } = null;
        

[Description("Only used for Design Mode = PerUnit")]
[JsonProperty("number_of_units")]
public System.Nullable<float> NumberOfUnits { get; set; } = null;
        

[Description("Only used for Design Mode = PerUnit")]
[JsonProperty("storage_capacity_per_unit")]
public System.Nullable<float> StorageCapacityPerUnit { get; set; } = null;
        

[Description("Only used for Design Mode = PerUnit")]
[JsonProperty("recovery_capacity_perunit")]
public System.Nullable<float> RecoveryCapacityPerunit { get; set; } = null;
        

[Description("Only used for Design Mode = PerSolarCollectorArea")]
[JsonProperty("storage_capacity_per_collector_area")]
public System.Nullable<float> StorageCapacityPerCollectorArea { get; set; } = null;
        

[Description("only used if for WaterHeater:Stratified")]
[JsonProperty("height_aspect_ratio")]
public System.Nullable<float> HeightAspectRatio { get; set; } = null;
    }
    
    public enum WaterHeater_Sizing_DesignMode
    {
        
        [JsonProperty("PeakDraw")]
        PeakDraw = 0,
        
        [JsonProperty("PerFloorArea")]
        PerFloorArea = 1,
        
        [JsonProperty("PerPerson")]
        PerPerson = 2,
        
        [JsonProperty("PerSolarCollectorArea")]
        PerSolarCollectorArea = 3,
        
        [JsonProperty("PerUnit")]
        PerUnit = 4,
        
        [JsonProperty("ResidentialHUD-FHAMinimum")]
        ResidentialHUDFHAMinimum = 5,
    }
    
    [Description(@"This object models an air-source heat pump for water heating where the water is pumped out of the tank, through a heating coil and returned to the tank. For wrapped condenser HPWHs, see WaterHeater:HeatPump:WrappedCondenser. WaterHeater:HeatPump:PumpedCondenser is a compound object that references other component objects - Coil:WaterHeating:AirToWaterHeatPump:*, Fan:OnOff, WaterHeater:Mixed or WaterHeater:Stratified")]
    [JsonObject("WaterHeater:HeatPump:PumpedCondenser")]
    public class WaterHeater_HeatPump_PumpedCondenser : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Schedule values of 0 denote the heat pump compressor is off and the parasitic electric energy is also off.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Defines the cut-out temperature where the heat pump compressor turns off. The hea" +
    "t pump compressor setpoint temperature should always be greater than the water t" +
    "ank\'s heater (element or burner) setpoint temperature.")]
[JsonProperty("compressor_setpoint_temperature_schedule_name")]
public string CompressorSetpointTemperatureScheduleName { get; set; } = "";
        

[Description(@"Setpoint temperature minus the dead band temperature difference defines the cut-in temperature where the heat pump compressor turns on. The water tank's heater (element or burner) setpoint temperature should always be less than the heat pump compressor cut-in temperature.")]
[JsonProperty("dead_band_temperature_difference")]
public System.Nullable<float> DeadBandTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[Description("Should match the field Source Outlet Node Name in the water heater tank object. S" +
    "hould also match the Condenser Water Inlet Node Name in the associated DX coil o" +
    "bject.")]
[JsonProperty("condenser_water_inlet_node_name")]
public string CondenserWaterInletNodeName { get; set; } = "";
        

[Description("Should match the field Source Inlet Node Name in water heater tank object. Should" +
    " also match the Condenser Water Outlet Node Name in the associated DX Coil objec" +
    "t.")]
[JsonProperty("condenser_water_outlet_node_name")]
public string CondenserWaterOutletNodeName { get; set; } = "";
        

[Description("Actual water flow rate through the heat pump\'s water coil (condenser). If autocal" +
    "culated, the water flow rate is set equal to 4.487E-8 m3/s/W times the rated hea" +
    "ting capacity of the heat pump\'s DX coil.")]
[JsonProperty("condenser_water_flow_rate")]
public string CondenserWaterFlowRate { get; set; } = "";
        

[Description("Actual air flow rate across the heat pump\'s air coil (evaporator). If autocalcula" +
    "ted, the air flow rate is set equal to 5.035E-5 m3/s/W times the rated heating c" +
    "apacity of the heat pump\'s DX coil.")]
[JsonProperty("evaporator_air_flow_rate")]
public string EvaporatorAirFlowRate { get; set; } = "";
        

[Description("Defines the configuration of the airflow path through the air coil and fan sectio" +
    "n.")]
[JsonProperty("inlet_air_configuration")]
public WaterHeater_HeatPump_PumpedCondenser_InletAirConfiguration InletAirConfiguration { get; set; } = (WaterHeater_HeatPump_PumpedCondenser_InletAirConfiguration)Enum.Parse(typeof(WaterHeater_HeatPump_PumpedCondenser_InletAirConfiguration), "OutdoorAirOnly");
        

[Description("Zone air exhaust node name if Inlet Air Configuration is ZoneAirOnly or ZoneAndOu" +
    "tdoorAir. Simply a unique Node Name if Inlet Air Configuration is Schedule. Othe" +
    "rwise, leave field blank.")]
[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[Description("Zone Air Inlet Node Name if Inlet Air Configuration is ZoneAirOnly or ZoneAndOutd" +
    "oorAir. Simply a unique Node Name if Inlet Air Configuration is Schedule. Otherw" +
    "ise, leave field blank.")]
[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Outdoor air node name if inlet air configuration is ZoneAndOutdoorAir or OutdoorA" +
    "irOnly, otherwise leave field blank.")]
[JsonProperty("outdoor_air_node_name")]
public string OutdoorAirNodeName { get; set; } = "";
        

[Description("Simply a unique Node Name if Inlet Air Configuration is ZoneAndOutdoorAir or Outd" +
    "oorAirOnly, otherwise leave field blank.")]
[JsonProperty("exhaust_air_node_name")]
public string ExhaustAirNodeName { get; set; } = "";
        

[Description("Used only if Inlet Air Configuration is Schedule, otherwise leave blank. Schedule" +
    " values should be degrees C.")]
[JsonProperty("inlet_air_temperature_schedule_name")]
public string InletAirTemperatureScheduleName { get; set; } = "";
        

[Description("Used only if Inlet Air Configuration is Schedule, otherwise leave blank. Schedule" +
    " values are entered as a fraction (e.g. 0.5 is equal to 50%RH)")]
[JsonProperty("inlet_air_humidity_schedule_name")]
public string InletAirHumidityScheduleName { get; set; } = "";
        

[Description("Used only if Inlet Air Configuration is ZoneAirOnly or ZoneAndOutdoorAir. Otherwi" +
    "se, leave field blank.")]
[JsonProperty("inlet_air_zone_name")]
public string InletAirZoneName { get; set; } = "";
        

[Description("Specify the type of water heater tank used by this heat pump water heater.")]
[JsonProperty("tank_object_type")]
public WaterHeater_HeatPump_PumpedCondenser_TankObjectType TankObjectType { get; set; } = (WaterHeater_HeatPump_PumpedCondenser_TankObjectType)Enum.Parse(typeof(WaterHeater_HeatPump_PumpedCondenser_TankObjectType), "Empty");
        

[Description("Needs to match the name used in the corresponding Water Heater object.")]
[JsonProperty("tank_name")]
public string TankName { get; set; } = "";
        

[Description("Used only when the heat pump water heater is connected to a plant loop, otherwise" +
    " leave blank. Needs to match the name used in the corresponding Water Heater obj" +
    "ect when connected to a plant loop.")]
[JsonProperty("tank_use_side_inlet_node_name")]
public string TankUseSideInletNodeName { get; set; } = "";
        

[Description("Used only when the heat pump water heater is connected to a plant loop, otherwise" +
    " leave blank. Needs to match the name used in the corresponding Water Heater obj" +
    "ect when connected to a plant loop.")]
[JsonProperty("tank_use_side_outlet_node_name")]
public string TankUseSideOutletNodeName { get; set; } = "";
        

[Description("Specify the type of DX coil used by this heat pump water heater. The only valid c" +
    "hoice is Coil:WaterHeating:AirToWaterHeatPump:Pumped and Coil:WaterHeating:AirTo" +
    "WaterHeatPump:VariableSpeed, and CoilSystem:IntegratedHeatPump:AirSource")]
[JsonProperty("dx_coil_object_type")]
public WaterHeater_HeatPump_PumpedCondenser_DxCoilObjectType DxCoilObjectType { get; set; } = (WaterHeater_HeatPump_PumpedCondenser_DxCoilObjectType)Enum.Parse(typeof(WaterHeater_HeatPump_PumpedCondenser_DxCoilObjectType), "Empty");
        

[Description("Must match the name used in the corresponding Coil:WaterHeating:AirToWaterHeatPum" +
    "p:* object, or CoilSystem:IntegratedHeatPump:AirSource")]
[JsonProperty("dx_coil_name")]
public string DxCoilName { get; set; } = "";
        

[Description("Heat pump compressor will not operate when the inlet air dry-bulb temperature is " +
    "below this value.")]
[JsonProperty("minimum_inlet_air_temperature_for_compressor_operation")]
public System.Nullable<float> MinimumInletAirTemperatureForCompressorOperation { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("Heat pump compressor will not operate when the inlet air dry-bulb temperature is " +
    "above this value.")]
[JsonProperty("maximum_inlet_air_temperature_for_compressor_operation")]
public System.Nullable<float> MaximumInletAirTemperatureForCompressorOperation { get; set; } = (System.Nullable<float>)Single.Parse("48.88888888889", CultureInfo.InvariantCulture);
        

[Description("If Zone is selected, Inlet Air Configuration must be ZoneAirOnly or ZoneAndOutdoo" +
    "rAir. If Schedule is selected, then you must provide a Compressor Ambient Temper" +
    "ature Schedule Name below.")]
[JsonProperty("compressor_location")]
public WaterHeater_HeatPump_PumpedCondenser_CompressorLocation CompressorLocation { get; set; } = (WaterHeater_HeatPump_PumpedCondenser_CompressorLocation)Enum.Parse(typeof(WaterHeater_HeatPump_PumpedCondenser_CompressorLocation), "Outdoors");
        

[Description("Used only if Compressor Location is Schedule, otherwise leave field blank.")]
[JsonProperty("compressor_ambient_temperature_schedule_name")]
public string CompressorAmbientTemperatureScheduleName { get; set; } = "";
        

[Description("Specify the type of fan used by this heat pump water heater. The only valid choic" +
    "es are Fan:SystemModel or Fan:OnOff.")]
[JsonProperty("fan_object_type")]
public WaterHeater_HeatPump_PumpedCondenser_FanObjectType FanObjectType { get; set; } = (WaterHeater_HeatPump_PumpedCondenser_FanObjectType)Enum.Parse(typeof(WaterHeater_HeatPump_PumpedCondenser_FanObjectType), "Empty");
        

[Description("Needs to match the name used in the corresponding Fan:SystemModel or Fan:OnOff ob" +
    "ject.")]
[JsonProperty("fan_name")]
public string FanName { get; set; } = "";
        

[Description("BlowThrough means the fan is located before the air coil (upstream). DrawThrough " +
    "means the fan is located after the air coil (downstream).")]
[JsonProperty("fan_placement")]
public WaterHeater_HeatPump_PumpedCondenser_FanPlacement FanPlacement { get; set; } = (WaterHeater_HeatPump_PumpedCondenser_FanPlacement)Enum.Parse(typeof(WaterHeater_HeatPump_PumpedCondenser_FanPlacement), "DrawThrough");
        

[Description("Parasitic electric power consumed when the heat pump compressor operates. Does no" +
    "t contribute to water heating but can impact the zone air heat balance.")]
[JsonProperty("on_cycle_parasitic_electric_load")]
public System.Nullable<float> OnCycleParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Parasitic electric power consumed when the heat pump compressor is off. Does not " +
    "contribute to water heating but can impact the zone air heat balance. Off-cycle " +
    "parasitic power is 0 when the availability schedule is 0.")]
[JsonProperty("off_cycle_parasitic_electric_load")]
public System.Nullable<float> OffCycleParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field determines if the parasitic electric load impacts the zone air heat ba" +
    "lance. If Zone is selected, Inlet Air Configuration must be ZoneAirOnly or ZoneA" +
    "ndOutdoorAir.")]
[JsonProperty("parasitic_heat_rejection_location")]
public WaterHeater_HeatPump_PumpedCondenser_ParasiticHeatRejectionLocation ParasiticHeatRejectionLocation { get; set; } = (WaterHeater_HeatPump_PumpedCondenser_ParasiticHeatRejectionLocation)Enum.Parse(typeof(WaterHeater_HeatPump_PumpedCondenser_ParasiticHeatRejectionLocation), "Outdoors");
        

[Description("Required only if Inlet Air Configuration is ZoneAndOutdoorAir, otherwise leave fi" +
    "eld blank.")]
[JsonProperty("inlet_air_mixer_node_name")]
public string InletAirMixerNodeName { get; set; } = "";
        

[Description("Required only if Inlet Air Configuration is ZoneAndOutdoorAir, otherwise leave fi" +
    "eld blank.")]
[JsonProperty("outlet_air_splitter_node_name")]
public string OutletAirSplitterNodeName { get; set; } = "";
        

[Description(@"Required only if Inlet Air Configuration is ZoneAndOutdoorAir, otherwise leave field blank. Schedule values define whether the heat pump draws its inlet air from the zone, outdoors or a combination of zone and outdoor air. A schedule value of 0 denotes inlet air is drawn only from the zone. A schedule value of 1 denotes inlet air is drawn only from outdoors. Schedule values between 0 and 1 denote a mixture of zone and outdoor air proportional to the schedule value (i.e. 0.4 = 40% outdoor air, 60% zone air).")]
[JsonProperty("inlet_air_mixer_schedule_name")]
public string InletAirMixerScheduleName { get; set; } = "";
        

[Description(@"MutuallyExclusive means that once the tank heating element is active the heat pump is shut down until setpoint is reached. Simultaneous (default) means that both the tank heating element and heat pump are used at the same time recover the tank temperature.")]
[JsonProperty("tank_element_control_logic")]
public WaterHeater_HeatPump_PumpedCondenser_TankElementControlLogic TankElementControlLogic { get; set; } = (WaterHeater_HeatPump_PumpedCondenser_TankElementControlLogic)Enum.Parse(typeof(WaterHeater_HeatPump_PumpedCondenser_TankElementControlLogic), "Simultaneous");
        

[Description("Used to indicate height of control sensor for Tank Object Type = WaterHeater:Stra" +
    "tified If left blank, it will default to the height of Heater1")]
[JsonProperty("control_sensor_1_height_in_stratified_tank")]
public System.Nullable<float> ControlSensor1HeightInStratifiedTank { get; set; } = null;
        

[Description("Weight to give Control Sensor 1 temperature The weight of Control Sensor 2 will b" +
    "e 1 - (wt. of control sensor 1)")]
[JsonProperty("control_sensor_1_weight")]
public System.Nullable<float> ControlSensor1Weight { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Used to indicate height of control sensor for Tank Object Type = WaterHeater:Stra" +
    "tified If left blank, it will default to the height of Heater2")]
[JsonProperty("control_sensor_2_height_in_stratified_tank")]
public System.Nullable<float> ControlSensor2HeightInStratifiedTank { get; set; } = null;
    }
    
    public enum WaterHeater_HeatPump_PumpedCondenser_InletAirConfiguration
    {
        
        [JsonProperty("OutdoorAirOnly")]
        OutdoorAirOnly = 0,
        
        [JsonProperty("Schedule")]
        Schedule = 1,
        
        [JsonProperty("ZoneAirOnly")]
        ZoneAirOnly = 2,
        
        [JsonProperty("ZoneAndOutdoorAir")]
        ZoneAndOutdoorAir = 3,
    }
    
    public enum WaterHeater_HeatPump_PumpedCondenser_TankObjectType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("WaterHeater:Mixed")]
        WaterHeaterMixed = 1,
        
        [JsonProperty("WaterHeater:Stratified")]
        WaterHeaterStratified = 2,
    }
    
    public enum WaterHeater_HeatPump_PumpedCondenser_DxCoilObjectType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Coil:WaterHeating:AirToWaterHeatPump:Pumped")]
        CoilWaterHeatingAirToWaterHeatPumpPumped = 1,
        
        [JsonProperty("Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed")]
        CoilWaterHeatingAirToWaterHeatPumpVariableSpeed = 2,
        
        [JsonProperty("CoilSystem:IntegratedHeatPump:AirSource")]
        CoilSystemIntegratedHeatPumpAirSource = 3,
    }
    
    public enum WaterHeater_HeatPump_PumpedCondenser_CompressorLocation
    {
        
        [JsonProperty("Outdoors")]
        Outdoors = 0,
        
        [JsonProperty("Schedule")]
        Schedule = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    public enum WaterHeater_HeatPump_PumpedCondenser_FanObjectType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 2,
    }
    
    public enum WaterHeater_HeatPump_PumpedCondenser_FanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum WaterHeater_HeatPump_PumpedCondenser_ParasiticHeatRejectionLocation
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Outdoors")]
        Outdoors = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    public enum WaterHeater_HeatPump_PumpedCondenser_TankElementControlLogic
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MutuallyExclusive")]
        MutuallyExclusive = 1,
        
        [JsonProperty("Simultaneous")]
        Simultaneous = 2,
    }
    
    [Description(@"This object models an air-source heat pump for water heating where the heating coil is wrapped around the tank, which is typical of residential HPWHs. For pumped condenser HPWHs, see WaterHeater:HeatPump:PumpedCondenser. WaterHeater:HeatPump:WrappedCondenser is a compound object that references other component objects - Coil:WaterHeating:AirToWaterHeatPump:Pumped, Fan:OnOff, WaterHeater:Mixed")]
    [JsonObject("WaterHeater:HeatPump:WrappedCondenser")]
    public class WaterHeater_HeatPump_WrappedCondenser : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Schedule values of 0 denote the heat pump compressor is off and the parasitic electric energy is also off.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Defines the cut-out temperature where the heat pump compressor turns off. The hea" +
    "t pump compressor setpoint temperature should always be greater than the water t" +
    "ank\'s heater (element or burner) setpoint temperature.")]
[JsonProperty("compressor_setpoint_temperature_schedule_name")]
public string CompressorSetpointTemperatureScheduleName { get; set; } = "";
        

[Description(@"Setpoint temperature minus the dead band temperature difference defines the cut-in temperature where the heat pump compressor turns on. The water tank's heater (element or burner) setpoint temperature should always be less than the heat pump compressor cut-in temperature.")]
[JsonProperty("dead_band_temperature_difference")]
public System.Nullable<float> DeadBandTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[Description("Distance from the bottom of the tank to the bottom of the wrapped condenser.")]
[JsonProperty("condenser_bottom_location")]
public System.Nullable<float> CondenserBottomLocation { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Distance from the bottom of the tank to the top of the wrapped condenser.")]
[JsonProperty("condenser_top_location")]
public System.Nullable<float> CondenserTopLocation { get; set; } = null;
        

[Description("Actual air flow rate across the heat pump\'s air coil (evaporator). If autocalcula" +
    "ted, the air flow rate is set equal to 5.035E-5 m3/s/W times the rated heating c" +
    "apacity of the heat pump\'s DX coil.")]
[JsonProperty("evaporator_air_flow_rate")]
public string EvaporatorAirFlowRate { get; set; } = "";
        

[Description("Defines the configuration of the airflow path through the air coil and fan sectio" +
    "n.")]
[JsonProperty("inlet_air_configuration")]
public WaterHeater_HeatPump_WrappedCondenser_InletAirConfiguration InletAirConfiguration { get; set; } = (WaterHeater_HeatPump_WrappedCondenser_InletAirConfiguration)Enum.Parse(typeof(WaterHeater_HeatPump_WrappedCondenser_InletAirConfiguration), "OutdoorAirOnly");
        

[Description("Zone air exhaust node name if Inlet Air Configuration is ZoneAirOnly or ZoneAndOu" +
    "tdoorAir. Simply a unique Node Name if Inlet Air Configuration is Schedule. Othe" +
    "rwise, leave field blank.")]
[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[Description("Zone Air Inlet Node Name if Inlet Air Configuration is ZoneAirOnly or ZoneAndOutd" +
    "oorAir. Simply a unique Node Name if Inlet Air Configuration is Schedule. Otherw" +
    "ise, leave field blank.")]
[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Outdoor air node name if inlet air configuration is ZoneAndOutdoorAir or OutdoorA" +
    "irOnly, otherwise leave field blank.")]
[JsonProperty("outdoor_air_node_name")]
public string OutdoorAirNodeName { get; set; } = "";
        

[Description("Simply a unique Node Name if Inlet Air Configuration is ZoneAndOutdoorAir or Outd" +
    "oorAirOnly, otherwise leave field blank.")]
[JsonProperty("exhaust_air_node_name")]
public string ExhaustAirNodeName { get; set; } = "";
        

[Description("Used only if Inlet Air Configuration is Schedule, otherwise leave blank. Schedule" +
    " values should be degrees C.")]
[JsonProperty("inlet_air_temperature_schedule_name")]
public string InletAirTemperatureScheduleName { get; set; } = "";
        

[Description("Used only if Inlet Air Configuration is Schedule, otherwise leave blank. Schedule" +
    " values are entered as a fraction (e.g. 0.5 is equal to 50%RH)")]
[JsonProperty("inlet_air_humidity_schedule_name")]
public string InletAirHumidityScheduleName { get; set; } = "";
        

[Description("Used only if Inlet Air Configuration is ZoneAirOnly or ZoneAndOutdoorAir. Otherwi" +
    "se, leave field blank.")]
[JsonProperty("inlet_air_zone_name")]
public string InletAirZoneName { get; set; } = "";
        

[Description("Specify the type of water heater tank used by this heat pump water heater.")]
[JsonProperty("tank_object_type")]
public WaterHeater_HeatPump_WrappedCondenser_TankObjectType TankObjectType { get; set; } = (WaterHeater_HeatPump_WrappedCondenser_TankObjectType)Enum.Parse(typeof(WaterHeater_HeatPump_WrappedCondenser_TankObjectType), "Empty");
        

[Description("Needs to match the name used in the corresponding Water Heater object. Must be a " +
    "WaterHeater:Stratified tank.")]
[JsonProperty("tank_name")]
public string TankName { get; set; } = "";
        

[Description("Used only when the heat pump water heater is connected to a plant loop, otherwise" +
    " leave blank. Needs to match the name used in the corresponding Water Heater obj" +
    "ect when connected to a plant loop.")]
[JsonProperty("tank_use_side_inlet_node_name")]
public string TankUseSideInletNodeName { get; set; } = "";
        

[Description("Used only when the heat pump water heater is connected to a plant loop, otherwise" +
    " leave blank. Needs to match the name used in the corresponding Water Heater obj" +
    "ect when connected to a plant loop.")]
[JsonProperty("tank_use_side_outlet_node_name")]
public string TankUseSideOutletNodeName { get; set; } = "";
        

[Description("Specify the type of DX coil used by this heat pump water heater. The only valid c" +
    "hoice is Coil:WaterHeating:AirToWaterHeatPump:Wrapped")]
[JsonProperty("dx_coil_object_type")]
public WaterHeater_HeatPump_WrappedCondenser_DxCoilObjectType DxCoilObjectType { get; set; } = (WaterHeater_HeatPump_WrappedCondenser_DxCoilObjectType)Enum.Parse(typeof(WaterHeater_HeatPump_WrappedCondenser_DxCoilObjectType), "Empty");
        

[Description("Must match the name used in the corresponding Coil:WaterHeating:AirToWaterHeatPum" +
    "p:Wrapped object.")]
[JsonProperty("dx_coil_name")]
public string DxCoilName { get; set; } = "";
        

[Description("Heat pump compressor will not operate when the inlet air dry-bulb temperature is " +
    "below this value.")]
[JsonProperty("minimum_inlet_air_temperature_for_compressor_operation")]
public System.Nullable<float> MinimumInletAirTemperatureForCompressorOperation { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("Heat pump compressor will not operate when the inlet air dry-bulb temperature is " +
    "above this value.")]
[JsonProperty("maximum_inlet_air_temperature_for_compressor_operation")]
public System.Nullable<float> MaximumInletAirTemperatureForCompressorOperation { get; set; } = (System.Nullable<float>)Single.Parse("48.88888888889", CultureInfo.InvariantCulture);
        

[Description("If Zone is selected, Inlet Air Configuration must be ZoneAirOnly or ZoneAndOutdoo" +
    "rAir. If Schedule is selected, then you must provide a Compressor Ambient Temper" +
    "ature Schedule Name below.")]
[JsonProperty("compressor_location")]
public WaterHeater_HeatPump_WrappedCondenser_CompressorLocation CompressorLocation { get; set; } = (WaterHeater_HeatPump_WrappedCondenser_CompressorLocation)Enum.Parse(typeof(WaterHeater_HeatPump_WrappedCondenser_CompressorLocation), "Outdoors");
        

[Description("Used only if Compressor Location is Schedule, otherwise leave field blank.")]
[JsonProperty("compressor_ambient_temperature_schedule_name")]
public string CompressorAmbientTemperatureScheduleName { get; set; } = "";
        

[Description("Specify the type of fan used by this heat pump water heater. The only valid choic" +
    "es are Fan:SystemModel or Fan:OnOff.")]
[JsonProperty("fan_object_type")]
public WaterHeater_HeatPump_WrappedCondenser_FanObjectType FanObjectType { get; set; } = (WaterHeater_HeatPump_WrappedCondenser_FanObjectType)Enum.Parse(typeof(WaterHeater_HeatPump_WrappedCondenser_FanObjectType), "Empty");
        

[Description("Needs to match the name used in the corresponding Fan:SystemModel or Fan:OnOff ob" +
    "ject.")]
[JsonProperty("fan_name")]
public string FanName { get; set; } = "";
        

[Description("BlowThrough means the fan is located before the air coil (upstream). DrawThrough " +
    "means the fan is located after the air coil (downstream).")]
[JsonProperty("fan_placement")]
public WaterHeater_HeatPump_WrappedCondenser_FanPlacement FanPlacement { get; set; } = (WaterHeater_HeatPump_WrappedCondenser_FanPlacement)Enum.Parse(typeof(WaterHeater_HeatPump_WrappedCondenser_FanPlacement), "DrawThrough");
        

[Description("Parasitic electric power consumed when the heat pump compressor operates. Does no" +
    "t contribute to water heating but can impact the zone air heat balance.")]
[JsonProperty("on_cycle_parasitic_electric_load")]
public System.Nullable<float> OnCycleParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Parasitic electric power consumed when the heat pump compressor is off. Does not " +
    "contribute to water heating but can impact the zone air heat balance. Off-cycle " +
    "parasitic power is 0 when the availability schedule is 0.")]
[JsonProperty("off_cycle_parasitic_electric_load")]
public System.Nullable<float> OffCycleParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field determines if the parasitic electric load impacts the zone air heat ba" +
    "lance. If Zone is selected, Inlet Air Configuration must be ZoneAirOnly or ZoneA" +
    "ndOutdoorAir.")]
[JsonProperty("parasitic_heat_rejection_location")]
public WaterHeater_HeatPump_WrappedCondenser_ParasiticHeatRejectionLocation ParasiticHeatRejectionLocation { get; set; } = (WaterHeater_HeatPump_WrappedCondenser_ParasiticHeatRejectionLocation)Enum.Parse(typeof(WaterHeater_HeatPump_WrappedCondenser_ParasiticHeatRejectionLocation), "Outdoors");
        

[Description("Required only if Inlet Air Configuration is ZoneAndOutdoorAir, otherwise leave fi" +
    "eld blank.")]
[JsonProperty("inlet_air_mixer_node_name")]
public string InletAirMixerNodeName { get; set; } = "";
        

[Description("Required only if Inlet Air Configuration is ZoneAndOutdoorAir, otherwise leave fi" +
    "eld blank.")]
[JsonProperty("outlet_air_splitter_node_name")]
public string OutletAirSplitterNodeName { get; set; } = "";
        

[Description(@"Required only if Inlet Air Configuration is ZoneAndOutdoorAir, otherwise leave field blank. Schedule values define whether the heat pump draws its inlet air from the zone, outdoors or a combination of zone and outdoor air. A schedule value of 0 denotes inlet air is drawn only from the zone. A schedule value of 1 denotes inlet air is drawn only from outdoors. Schedule values between 0 and 1 denote a mixture of zone and outdoor air proportional to the schedule value.")]
[JsonProperty("inlet_air_mixer_schedule_name")]
public string InletAirMixerScheduleName { get; set; } = "";
        

[Description(@"MutuallyExclusive means that once the tank heating element is active the heat pump is shut down until setpoint is reached. Simultaneous (default) means that both the tank heating element and heat pump are used at the same time recover the tank temperature.")]
[JsonProperty("tank_element_control_logic")]
public WaterHeater_HeatPump_WrappedCondenser_TankElementControlLogic TankElementControlLogic { get; set; } = (WaterHeater_HeatPump_WrappedCondenser_TankElementControlLogic)Enum.Parse(typeof(WaterHeater_HeatPump_WrappedCondenser_TankElementControlLogic), "Simultaneous");
        

[Description("Used to indicate height of control sensor if Tank Object Type is WaterHeater:Stra" +
    "tified If left blank, it will default to the height of Heater1")]
[JsonProperty("control_sensor_1_height_in_stratified_tank")]
public System.Nullable<float> ControlSensor1HeightInStratifiedTank { get; set; } = null;
        

[Description("Weight to give Control Sensor 1 temperature")]
[JsonProperty("control_sensor_1_weight")]
public System.Nullable<float> ControlSensor1Weight { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Used to indicate height of control sensor if Tank Object Type is WaterHeater:Stra" +
    "tified If left blank, it will default to the height of Heater2 The weight of thi" +
    "s control sensor will be 1 - (wt. of control sensor 1)")]
[JsonProperty("control_sensor_2_height_in_stratified_tank")]
public System.Nullable<float> ControlSensor2HeightInStratifiedTank { get; set; } = null;
    }
    
    public enum WaterHeater_HeatPump_WrappedCondenser_InletAirConfiguration
    {
        
        [JsonProperty("OutdoorAirOnly")]
        OutdoorAirOnly = 0,
        
        [JsonProperty("Schedule")]
        Schedule = 1,
        
        [JsonProperty("ZoneAirOnly")]
        ZoneAirOnly = 2,
        
        [JsonProperty("ZoneAndOutdoorAir")]
        ZoneAndOutdoorAir = 3,
    }
    
    public enum WaterHeater_HeatPump_WrappedCondenser_TankObjectType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("WaterHeater:Stratified")]
        WaterHeaterStratified = 1,
    }
    
    public enum WaterHeater_HeatPump_WrappedCondenser_DxCoilObjectType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Coil:WaterHeating:AirToWaterHeatPump:Wrapped")]
        CoilWaterHeatingAirToWaterHeatPumpWrapped = 1,
    }
    
    public enum WaterHeater_HeatPump_WrappedCondenser_CompressorLocation
    {
        
        [JsonProperty("Outdoors")]
        Outdoors = 0,
        
        [JsonProperty("Schedule")]
        Schedule = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    public enum WaterHeater_HeatPump_WrappedCondenser_FanObjectType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 2,
    }
    
    public enum WaterHeater_HeatPump_WrappedCondenser_FanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum WaterHeater_HeatPump_WrappedCondenser_ParasiticHeatRejectionLocation
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Outdoors")]
        Outdoors = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    public enum WaterHeater_HeatPump_WrappedCondenser_TankElementControlLogic
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MutuallyExclusive")]
        MutuallyExclusive = 1,
        
        [JsonProperty("Simultaneous")]
        Simultaneous = 2,
    }
    
    [Description(@"This ice storage model is a simplified model It requires a setpoint placed on the Chilled Water Side Outlet Node It should be placed in the chilled water supply side outlet branch followed by a pipe. Use the PlantEquipmentOperation:ComponentSetpoint plant operation scheme.")]
    [JsonObject("ThermalStorage:Ice:Simple")]
    public class ThermalStorage_Ice_Simple : BHoMObject, IEnergyPlusClass
    {
        

[Description("IceOnCoilInternal = Ice-on-Coil, internal melt IceOnCoilExternal = Ice-on-Coil, e" +
    "xternal melt")]
[JsonProperty("ice_storage_type")]
public ThermalStorage_Ice_Simple_IceStorageType IceStorageType { get; set; } = (ThermalStorage_Ice_Simple_IceStorageType)Enum.Parse(typeof(ThermalStorage_Ice_Simple_IceStorageType), "IceOnCoilExternal");
        

[JsonProperty("capacity")]
public System.Nullable<float> Capacity { get; set; } = null;
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
    }
    
    public enum ThermalStorage_Ice_Simple_IceStorageType
    {
        
        [JsonProperty("IceOnCoilExternal")]
        IceOnCoilExternal = 0,
        
        [JsonProperty("IceOnCoilInternal")]
        IceOnCoilInternal = 1,
    }
    
    [Description("This input syntax is intended to describe a thermal storage system that includes " +
        "smaller containers filled with water that are placed in a larger tank or series " +
        "of tanks. The model uses polynomial equations to describe the system performance" +
        ".")]
    [JsonObject("ThermalStorage:Ice:Detailed")]
    public class ThermalStorage_Ice_Detailed : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("This includes only the latent storage capacity")]
[JsonProperty("capacity")]
public System.Nullable<float> Capacity { get; set; } = null;
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[JsonProperty("discharging_curve_variable_specifications")]
public ThermalStorage_Ice_Detailed_DischargingCurveVariableSpecifications DischargingCurveVariableSpecifications { get; set; } = (ThermalStorage_Ice_Detailed_DischargingCurveVariableSpecifications)Enum.Parse(typeof(ThermalStorage_Ice_Detailed_DischargingCurveVariableSpecifications), "FractionChargedLMTD");
        

[JsonProperty("discharging_curve_name")]
public string DischargingCurveName { get; set; } = "";
        

[JsonProperty("charging_curve_variable_specifications")]
public ThermalStorage_Ice_Detailed_ChargingCurveVariableSpecifications ChargingCurveVariableSpecifications { get; set; } = (ThermalStorage_Ice_Detailed_ChargingCurveVariableSpecifications)Enum.Parse(typeof(ThermalStorage_Ice_Detailed_ChargingCurveVariableSpecifications), "FractionChargedLMTD");
        

[JsonProperty("charging_curve_name")]
public string ChargingCurveName { get; set; } = "";
        

[JsonProperty("timestep_of_the_curve_data")]
public System.Nullable<float> TimestepOfTheCurveData { get; set; } = null;
        

[JsonProperty("parasitic_electric_load_during_discharging")]
public System.Nullable<float> ParasiticElectricLoadDuringDischarging { get; set; } = null;
        

[JsonProperty("parasitic_electric_load_during_charging")]
public System.Nullable<float> ParasiticElectricLoadDuringCharging { get; set; } = null;
        

[Description("This is the fraction the total storage capacity that is lost or melts each hour")]
[JsonProperty("tank_loss_coefficient")]
public System.Nullable<float> TankLossCoefficient { get; set; } = null;
        

[Description("This temperature is typically 0C for water. Simply changing this temperature with" +
    "out adjusting the performance parameters input above is inappropriate and not ad" +
    "vised.")]
[JsonProperty("freezing_temperature_of_storage_medium")]
public System.Nullable<float> FreezingTemperatureOfStorageMedium { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This field determines whether the system uses internal or external melt during di" +
    "scharging. This will then have an impact on charging performance.")]
[JsonProperty("thaw_process_indicator")]
public ThermalStorage_Ice_Detailed_ThawProcessIndicator ThawProcessIndicator { get; set; } = (ThermalStorage_Ice_Detailed_ThawProcessIndicator)Enum.Parse(typeof(ThermalStorage_Ice_Detailed_ThawProcessIndicator), "OutsideMelt");
    }
    
    public enum ThermalStorage_Ice_Detailed_DischargingCurveVariableSpecifications
    {
        
        [JsonProperty("FractionChargedLMTD")]
        FractionChargedLMTD = 0,
        
        [JsonProperty("FractionDischargedLMTD")]
        FractionDischargedLMTD = 1,
        
        [JsonProperty("LMTDFractionCharged")]
        LMTDFractionCharged = 2,
        
        [JsonProperty("LMTDMassFlow")]
        LMTDMassFlow = 3,
    }
    
    public enum ThermalStorage_Ice_Detailed_ChargingCurveVariableSpecifications
    {
        
        [JsonProperty("FractionChargedLMTD")]
        FractionChargedLMTD = 0,
        
        [JsonProperty("FractionDischargedLMTD")]
        FractionDischargedLMTD = 1,
        
        [JsonProperty("LMTDFractionCharged")]
        LMTDFractionCharged = 2,
        
        [JsonProperty("LMTDMassFlow")]
        LMTDMassFlow = 3,
    }
    
    public enum ThermalStorage_Ice_Detailed_ThawProcessIndicator
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("InsideMelt")]
        InsideMelt = 1,
        
        [JsonProperty("OutsideMelt")]
        OutsideMelt = 2,
    }
    
    [Description("Chilled water storage with a well-mixed, single-node tank. The chilled water is \"" +
        "used\" by drawing from the \"Use Side\" of the water tank. The tank is indirectly c" +
        "harged by circulating cold water through the \"Source Side\" of the water tank.")]
    [JsonObject("ThermalStorage:ChilledWater:Mixed")]
    public class ThermalStorage_ChilledWater_Mixed : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("tank_volume")]
public System.Nullable<float> TankVolume { get; set; } = (System.Nullable<float>)Single.Parse("0.1", CultureInfo.InvariantCulture);
        

[JsonProperty("setpoint_temperature_schedule_name")]
public string SetpointTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("deadband_temperature_difference")]
public System.Nullable<float> DeadbandTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[JsonProperty("minimum_temperature_limit")]
public System.Nullable<float> MinimumTemperatureLimit { get; set; } = null;
        

[JsonProperty("nominal_cooling_capacity")]
public System.Nullable<float> NominalCoolingCapacity { get; set; } = null;
        

[JsonProperty("ambient_temperature_indicator")]
public ThermalStorage_ChilledWater_Mixed_AmbientTemperatureIndicator AmbientTemperatureIndicator { get; set; } = (ThermalStorage_ChilledWater_Mixed_AmbientTemperatureIndicator)Enum.Parse(typeof(ThermalStorage_ChilledWater_Mixed_AmbientTemperatureIndicator), "Outdoors");
        

[JsonProperty("ambient_temperature_schedule_name")]
public string AmbientTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("ambient_temperature_zone_name")]
public string AmbientTemperatureZoneName { get; set; } = "";
        

[Description("required when field Ambient Temperature Indicator=Outdoors")]
[JsonProperty("ambient_temperature_outdoor_air_node_name")]
public string AmbientTemperatureOutdoorAirNodeName { get; set; } = "";
        

[JsonProperty("heat_gain_coefficient_from_ambient_temperature")]
public System.Nullable<float> HeatGainCoefficientFromAmbientTemperature { get; set; } = null;
        

[JsonProperty("use_side_inlet_node_name")]
public string UseSideInletNodeName { get; set; } = "";
        

[JsonProperty("use_side_outlet_node_name")]
public string UseSideOutletNodeName { get; set; } = "";
        

[JsonProperty("use_side_heat_transfer_effectiveness")]
public System.Nullable<float> UseSideHeatTransferEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Availability schedule name for use side. Schedule value > 0 means the system is a" +
    "vailable. If this field is blank, the system is always available.")]
[JsonProperty("use_side_availability_schedule_name")]
public string UseSideAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("use_side_design_flow_rate")]
public string UseSideDesignFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("source_side_inlet_node_name")]
public string SourceSideInletNodeName { get; set; } = "";
        

[JsonProperty("source_side_outlet_node_name")]
public string SourceSideOutletNodeName { get; set; } = "";
        

[JsonProperty("source_side_heat_transfer_effectiveness")]
public System.Nullable<float> SourceSideHeatTransferEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Availability schedule name for source side. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("source_side_availability_schedule_name")]
public string SourceSideAvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("source_side_design_flow_rate")]
public string SourceSideDesignFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("Parameter for autosizing design flow rates for indirectly cooled water tanks time" +
    " required to lower temperature of entire tank from 14.4C to 9.0C")]
[JsonProperty("tank_recovery_time")]
public System.Nullable<float> TankRecoveryTime { get; set; } = (System.Nullable<float>)Single.Parse("4", CultureInfo.InvariantCulture);
    }
    
    public enum ThermalStorage_ChilledWater_Mixed_AmbientTemperatureIndicator
    {
        
        [JsonProperty("Outdoors")]
        Outdoors = 0,
        
        [JsonProperty("Schedule")]
        Schedule = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    [Description("Chilled water storage with a stratified, multi-node tank. The chilled water is \"u" +
        "sed\" by drawing from the \"Use Side\" of the water tank. The tank is indirectly ch" +
        "arged by circulating cold water through the \"Source Side\" of the water tank.")]
    [JsonObject("ThermalStorage:ChilledWater:Stratified")]
    public class ThermalStorage_ChilledWater_Stratified : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("tank_volume")]
public System.Nullable<float> TankVolume { get; set; } = null;
        

[Description("Height is measured in the axial direction for horizontal cylinders")]
[JsonProperty("tank_height")]
public System.Nullable<float> TankHeight { get; set; } = null;
        

[JsonProperty("tank_shape")]
public ThermalStorage_ChilledWater_Stratified_TankShape TankShape { get; set; } = (ThermalStorage_ChilledWater_Stratified_TankShape)Enum.Parse(typeof(ThermalStorage_ChilledWater_Stratified_TankShape), "VerticalCylinder");
        

[Description("Only used if Tank Shape is Other")]
[JsonProperty("tank_perimeter")]
public System.Nullable<float> TankPerimeter { get; set; } = null;
        

[JsonProperty("setpoint_temperature_schedule_name")]
public string SetpointTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("deadband_temperature_difference")]
public System.Nullable<float> DeadbandTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("temperature_sensor_height")]
public System.Nullable<float> TemperatureSensorHeight { get; set; } = null;
        

[JsonProperty("minimum_temperature_limit")]
public System.Nullable<float> MinimumTemperatureLimit { get; set; } = null;
        

[JsonProperty("nominal_cooling_capacity")]
public System.Nullable<float> NominalCoolingCapacity { get; set; } = null;
        

[JsonProperty("ambient_temperature_indicator")]
public ThermalStorage_ChilledWater_Stratified_AmbientTemperatureIndicator AmbientTemperatureIndicator { get; set; } = (ThermalStorage_ChilledWater_Stratified_AmbientTemperatureIndicator)Enum.Parse(typeof(ThermalStorage_ChilledWater_Stratified_AmbientTemperatureIndicator), "Outdoors");
        

[JsonProperty("ambient_temperature_schedule_name")]
public string AmbientTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("ambient_temperature_zone_name")]
public string AmbientTemperatureZoneName { get; set; } = "";
        

[Description("required for Ambient Temperature Indicator=Outdoors")]
[JsonProperty("ambient_temperature_outdoor_air_node_name")]
public string AmbientTemperatureOutdoorAirNodeName { get; set; } = "";
        

[JsonProperty("uniform_skin_loss_coefficient_per_unit_area_to_ambient_temperature")]
public System.Nullable<float> UniformSkinLossCoefficientPerUnitAreaToAmbientTemperature { get; set; } = null;
        

[JsonProperty("use_side_inlet_node_name")]
public string UseSideInletNodeName { get; set; } = "";
        

[JsonProperty("use_side_outlet_node_name")]
public string UseSideOutletNodeName { get; set; } = "";
        

[Description(@"The use side effectiveness in the stratified tank model is a simplified analogy of a heat exchanger's effectiveness. This effectiveness is equal to the fraction of use mass flow rate that directly mixes with the tank fluid. And one minus the effectiveness is the fraction that bypasses the tank. The use side mass flow rate that bypasses the tank is mixed with the fluid or water leaving the stratified tank.")]
[JsonProperty("use_side_heat_transfer_effectiveness")]
public System.Nullable<float> UseSideHeatTransferEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Availability schedule name for use side. Schedule value > 0 means the system is a" +
    "vailable. If this field is blank, the system is always available.")]
[JsonProperty("use_side_availability_schedule_name")]
public string UseSideAvailabilityScheduleName { get; set; } = "";
        

[Description("Defaults to top of tank")]
[JsonProperty("use_side_inlet_height")]
public string UseSideInletHeight { get; set; } = (System.String)"Autocalculate";
        

[Description("Defaults to bottom of tank")]
[JsonProperty("use_side_outlet_height")]
public System.Nullable<float> UseSideOutletHeight { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("use_side_design_flow_rate")]
public string UseSideDesignFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("source_side_inlet_node_name")]
public string SourceSideInletNodeName { get; set; } = "";
        

[JsonProperty("source_side_outlet_node_name")]
public string SourceSideOutletNodeName { get; set; } = "";
        

[Description(@"The source side effectiveness in the stratified tank model is a simplified analogy of a heat exchanger's effectiveness. This effectiveness is equal to the fraction of source mass flow rate that directly mixes with the tank fluid. And one minus the effectiveness is the fraction that bypasses the tank. The source side mass flow rate that bypasses the tank is mixed with the fluid or water leaving the stratified tank.")]
[JsonProperty("source_side_heat_transfer_effectiveness")]
public System.Nullable<float> SourceSideHeatTransferEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Availability schedule name for use side. Schedule value > 0 means the system is a" +
    "vailable. If this field is blank, the system is always available.")]
[JsonProperty("source_side_availability_schedule_name")]
public string SourceSideAvailabilityScheduleName { get; set; } = "";
        

[Description("Defaults to bottom of tank")]
[JsonProperty("source_side_inlet_height")]
public System.Nullable<float> SourceSideInletHeight { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Defaults to top of tank")]
[JsonProperty("source_side_outlet_height")]
public string SourceSideOutletHeight { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("source_side_design_flow_rate")]
public string SourceSideDesignFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("Parameter for autosizing design flow rates for indirectly cooled water tanks time" +
    " required to lower temperature of entire tank from 14.4C to 9.0C")]
[JsonProperty("tank_recovery_time")]
public System.Nullable<float> TankRecoveryTime { get; set; } = (System.Nullable<float>)Single.Parse("4", CultureInfo.InvariantCulture);
        

[JsonProperty("inlet_mode")]
public ThermalStorage_ChilledWater_Stratified_InletMode InletMode { get; set; } = (ThermalStorage_ChilledWater_Stratified_InletMode)Enum.Parse(typeof(ThermalStorage_ChilledWater_Stratified_InletMode), "Fixed");
        

[JsonProperty("number_of_nodes")]
public System.Nullable<float> NumberOfNodes { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("additional_destratification_conductivity")]
public System.Nullable<float> AdditionalDestratificationConductivity { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_1_additional_loss_coefficient")]
public System.Nullable<float> Node1AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_2_additional_loss_coefficient")]
public System.Nullable<float> Node2AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_3_additional_loss_coefficient")]
public System.Nullable<float> Node3AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_4_additional_loss_coefficient")]
public System.Nullable<float> Node4AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_5_additional_loss_coefficient")]
public System.Nullable<float> Node5AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_6_additional_loss_coefficient")]
public System.Nullable<float> Node6AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_7_additional_loss_coefficient")]
public System.Nullable<float> Node7AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_8_additional_loss_coefficient")]
public System.Nullable<float> Node8AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_9_additional_loss_coefficient")]
public System.Nullable<float> Node9AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("node_10_additional_loss_coefficient")]
public System.Nullable<float> Node10AdditionalLossCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum ThermalStorage_ChilledWater_Stratified_TankShape
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("HorizontalCylinder")]
        HorizontalCylinder = 1,
        
        [JsonProperty("Other")]
        Other = 2,
        
        [JsonProperty("VerticalCylinder")]
        VerticalCylinder = 3,
    }
    
    public enum ThermalStorage_ChilledWater_Stratified_AmbientTemperatureIndicator
    {
        
        [JsonProperty("Outdoors")]
        Outdoors = 0,
        
        [JsonProperty("Schedule")]
        Schedule = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    public enum ThermalStorage_ChilledWater_Stratified_InletMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Fixed")]
        Fixed = 1,
        
        [JsonProperty("Seeking")]
        Seeking = 2,
    }
}
namespace BH.oM.Adapters.EnergyPlus.WaterSystems
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"A generalized object for simulating all water end uses. Hot and cold water uses are included, as well as controlled mixing of hot and cold water at the tap. The WaterUse:Equipment object can be used stand-alone, or coupled into a plant loop using the WaterUse:Connections object (see below). The WaterUse:Connections object allows water uses to be linked to WaterUse:Storage objects to store and draw reclaimed water. The object can also simulate drainwater heat recovery.")]
    [JsonObject("WaterUse:Equipment")]
    public class WaterUse_Equipment : BHoMObject, IEnergyPlusClass
    {
        

[Description("Any text may be used here to categorize the end-uses in the ABUPS End Uses by Sub" +
    "category table.")]
[JsonProperty("end_use_subcategory")]
public string EndUseSubcategory { get; set; } = (System.String)"General";
        

[JsonProperty("peak_flow_rate")]
public System.Nullable<float> PeakFlowRate { get; set; } = null;
        

[Description("Defaults to 1.0 at all times")]
[JsonProperty("flow_rate_fraction_schedule_name")]
public string FlowRateFractionScheduleName { get; set; } = "";
        

[Description("Defaults to hot water supply temperature")]
[JsonProperty("target_temperature_schedule_name")]
public string TargetTemperatureScheduleName { get; set; } = "";
        

[Description("Defaults to cold water supply temperature")]
[JsonProperty("hot_water_supply_temperature_schedule_name")]
public string HotWaterSupplyTemperatureScheduleName { get; set; } = "";
        

[Description("Defaults to water temperatures calculated by Site:WaterMainsTemperature object")]
[JsonProperty("cold_water_supply_temperature_schedule_name")]
public string ColdWaterSupplyTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Defaults to 0.0 at all times")]
[JsonProperty("sensible_fraction_schedule_name")]
public string SensibleFractionScheduleName { get; set; } = "";
        

[Description("Defaults to 0.0 at all times")]
[JsonProperty("latent_fraction_schedule_name")]
public string LatentFractionScheduleName { get; set; } = "";
    }
    
    [Description(@"A subsystem that groups together multiple WaterUse:Equipment components. As its name suggests, the object provides connections that are shared by these components, including: 1. Inlet node and outlet node connections to a plant loop 2. Connections to WaterUse:Storage objects to store and draw reclaimed water 3. Internal connections to simulate drainwater heat recovery.")]
    [JsonObject("WaterUse:Connections")]
    public class WaterUse_Connections : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[Description("If blank, or tank is empty, defaults to fresh water from the mains")]
[JsonProperty("supply_water_storage_tank_name")]
public string SupplyWaterStorageTankName { get; set; } = "";
        

[JsonProperty("reclamation_water_storage_tank_name")]
public string ReclamationWaterStorageTankName { get; set; } = "";
        

[Description("Defaults to cold water supply temperature")]
[JsonProperty("hot_water_supply_temperature_schedule_name")]
public string HotWaterSupplyTemperatureScheduleName { get; set; } = "";
        

[Description("Defaults to water temperatures calculated by Site:WaterMainsTemperature object")]
[JsonProperty("cold_water_supply_temperature_schedule_name")]
public string ColdWaterSupplyTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("drain_water_heat_exchanger_type")]
public WaterUse_Connections_DrainWaterHeatExchangerType DrainWaterHeatExchangerType { get; set; } = (WaterUse_Connections_DrainWaterHeatExchangerType)Enum.Parse(typeof(WaterUse_Connections_DrainWaterHeatExchangerType), "None");
        

[JsonProperty("drain_water_heat_exchanger_destination")]
public WaterUse_Connections_DrainWaterHeatExchangerDestination DrainWaterHeatExchangerDestination { get; set; } = (WaterUse_Connections_DrainWaterHeatExchangerDestination)Enum.Parse(typeof(WaterUse_Connections_DrainWaterHeatExchangerDestination), "Plant");
        

[JsonProperty("drain_water_heat_exchanger_u_factor_times_area")]
public System.Nullable<float> DrainWaterHeatExchangerUFactorTimesArea { get; set; } = null;
        

[JsonProperty("connections")]
public string Connections { get; set; } = "";
    }
    
    public enum WaterUse_Connections_DrainWaterHeatExchangerType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CounterFlow")]
        CounterFlow = 1,
        
        [JsonProperty("CrossFlow")]
        CrossFlow = 2,
        
        [JsonProperty("Ideal")]
        Ideal = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum WaterUse_Connections_DrainWaterHeatExchangerDestination
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Equipment")]
        Equipment = 1,
        
        [JsonProperty("Plant")]
        Plant = 2,
        
        [JsonProperty("PlantAndEquipment")]
        PlantAndEquipment = 3,
    }
    
    [Description(@"A water storage tank. If the building model is to include any on-site water collection, wells, or storing and reuse of graywater, then a WaterUse:Storage object is needed. Each WaterUse:Storage can serve as a central node and make connections to numerous sources of supply or numerous components with demand. If a maximum capacity is not specified, the tank is assumed to have unlimited capacity.")]
    [JsonObject("WaterUse:Storage")]
    public class WaterUse_Storage : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("water_quality_subcategory")]
public string WaterQualitySubcategory { get; set; } = "";
        

[Description("Defaults to unlimited capacity.")]
[JsonProperty("maximum_capacity")]
public System.Nullable<float> MaximumCapacity { get; set; } = null;
        

[JsonProperty("initial_volume")]
public System.Nullable<float> InitialVolume { get; set; } = null;
        

[Description("Defaults to unlimited flow.")]
[JsonProperty("design_in_flow_rate")]
public System.Nullable<float> DesignInFlowRate { get; set; } = null;
        

[Description("Defaults to unlimited flow.")]
[JsonProperty("design_out_flow_rate")]
public System.Nullable<float> DesignOutFlowRate { get; set; } = null;
        

[Description("If blank, overflow is discarded")]
[JsonProperty("overflow_destination")]
public string OverflowDestination { get; set; } = "";
        

[JsonProperty("type_of_supply_controlled_by_float_valve")]
public WaterUse_Storage_TypeOfSupplyControlledByFloatValve TypeOfSupplyControlledByFloatValve { get; set; } = (WaterUse_Storage_TypeOfSupplyControlledByFloatValve)Enum.Parse(typeof(WaterUse_Storage_TypeOfSupplyControlledByFloatValve), "GroundwaterWell");
        

[Description("Lower range of target storage level e.g. float valve kicks on")]
[JsonProperty("float_valve_on_capacity")]
public System.Nullable<float> FloatValveOnCapacity { get; set; } = null;
        

[Description("Upper range of target storage level e.g. float valve kicks off")]
[JsonProperty("float_valve_off_capacity")]
public System.Nullable<float> FloatValveOffCapacity { get; set; } = null;
        

[Description("Lower range of secondary target storage level used to keep tanks at a minimum lev" +
    "el using mains water if well can\'t keep up")]
[JsonProperty("backup_mains_capacity")]
public System.Nullable<float> BackupMainsCapacity { get; set; } = null;
        

[JsonProperty("other_tank_name")]
public string OtherTankName { get; set; } = "";
        

[JsonProperty("water_thermal_mode")]
public WaterUse_Storage_WaterThermalMode WaterThermalMode { get; set; } = (WaterUse_Storage_WaterThermalMode)Enum.Parse(typeof(WaterUse_Storage_WaterThermalMode), "ScheduledTemperature");
        

[JsonProperty("water_temperature_schedule_name")]
public string WaterTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("ambient_temperature_indicator")]
public WaterUse_Storage_AmbientTemperatureIndicator AmbientTemperatureIndicator { get; set; } = (WaterUse_Storage_AmbientTemperatureIndicator)Enum.Parse(typeof(WaterUse_Storage_AmbientTemperatureIndicator), "Outdoors");
        

[JsonProperty("ambient_temperature_schedule_name")]
public string AmbientTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("tank_surface_area")]
public System.Nullable<float> TankSurfaceArea { get; set; } = null;
        

[JsonProperty("tank_u_value")]
public System.Nullable<float> TankUValue { get; set; } = null;
        

[JsonProperty("tank_outside_surface_material_name")]
public string TankOutsideSurfaceMaterialName { get; set; } = "";
    }
    
    public enum WaterUse_Storage_TypeOfSupplyControlledByFloatValve
    {
        
        [JsonProperty("GroundwaterWell")]
        GroundwaterWell = 0,
        
        [JsonProperty("Mains")]
        Mains = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("OtherTank")]
        OtherTank = 3,
    }
    
    public enum WaterUse_Storage_WaterThermalMode
    {
        
        [JsonProperty("ScheduledTemperature")]
        ScheduledTemperature = 0,
        
        [JsonProperty("ThermalModel")]
        ThermalModel = 1,
    }
    
    public enum WaterUse_Storage_AmbientTemperatureIndicator
    {
        
        [JsonProperty("Outdoors")]
        Outdoors = 0,
        
        [JsonProperty("Schedule")]
        Schedule = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    [Description(@"Simulates on-site water supply from a well. Well water is pumped out of the ground into a WaterUse:Storage. The operation of the ground water well is controlled by the associated WaterUse:Storage which is assumed to be operated as a vented cistern with no pressure tank.")]
    [JsonObject("WaterUse:Well")]
    public class WaterUse_Well : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("storage_tank_name")]
public string StorageTankName { get; set; } = "";
        

[JsonProperty("pump_depth")]
public System.Nullable<float> PumpDepth { get; set; } = null;
        

[JsonProperty("pump_rated_flow_rate")]
public System.Nullable<float> PumpRatedFlowRate { get; set; } = null;
        

[JsonProperty("pump_rated_head")]
public System.Nullable<float> PumpRatedHead { get; set; } = null;
        

[JsonProperty("pump_rated_power_consumption")]
public System.Nullable<float> PumpRatedPowerConsumption { get; set; } = null;
        

[JsonProperty("pump_efficiency")]
public System.Nullable<float> PumpEfficiency { get; set; } = null;
        

[JsonProperty("well_recovery_rate")]
public System.Nullable<float> WellRecoveryRate { get; set; } = null;
        

[JsonProperty("nominal_well_storage_volume")]
public System.Nullable<float> NominalWellStorageVolume { get; set; } = null;
        

[JsonProperty("water_table_depth_mode")]
public WaterUse_Well_WaterTableDepthMode WaterTableDepthMode { get; set; } = (WaterUse_Well_WaterTableDepthMode)Enum.Parse(typeof(WaterUse_Well_WaterTableDepthMode), "Constant");
        

[JsonProperty("water_table_depth")]
public System.Nullable<float> WaterTableDepth { get; set; } = null;
        

[JsonProperty("water_table_depth_schedule_name")]
public string WaterTableDepthScheduleName { get; set; } = "";
    }
    
    public enum WaterUse_Well_WaterTableDepthMode
    {
        
        [JsonProperty("Constant")]
        Constant = 0,
        
        [JsonProperty("Scheduled")]
        Scheduled = 1,
    }
    
    [Description("Used for harvesting rainwater falling on building surfaces. The rainwater is sent" +
        " to a WaterUse:Storage object. In order to use this object it is necessary to al" +
        "so include a Site:Precipitation object to describe the rates of rainfall.")]
    [JsonObject("WaterUse:RainCollector")]
    public class WaterUse_RainCollector : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("storage_tank_name")]
public string StorageTankName { get; set; } = "";
        

[JsonProperty("loss_factor_mode")]
public WaterUse_RainCollector_LossFactorMode LossFactorMode { get; set; } = (WaterUse_RainCollector_LossFactorMode)Enum.Parse(typeof(WaterUse_RainCollector_LossFactorMode), "Constant");
        

[Description("this is the portion of rain that is lost in the process of collecting it the rain" +
    " collected is one minus this factor")]
[JsonProperty("collection_loss_factor")]
public System.Nullable<float> CollectionLossFactor { get; set; } = null;
        

[JsonProperty("collection_loss_factor_schedule_name")]
public string CollectionLossFactorScheduleName { get; set; } = "";
        

[Description("Defaults to unlimited flow.")]
[JsonProperty("maximum_collection_rate")]
public System.Nullable<float> MaximumCollectionRate { get; set; } = null;
        

[JsonProperty("surfaces")]
public string Surfaces { get; set; } = "";
    }
    
    public enum WaterUse_RainCollector_LossFactorMode
    {
        
        [JsonProperty("Constant")]
        Constant = 0,
        
        [JsonProperty("Scheduled")]
        Scheduled = 1,
    }
}
namespace BH.oM.Adapters.EnergyPlus.ZoneAirflow
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Infiltration is specified as a design level which is modified by a Schedule fraction, temperature difference and wind speed: Infiltration=Idesign * FSchedule * (A + B*|(Tzone-Todb)| + C*WindSpd + D * WindSpd**2) If you use a ZoneList in the Zone or ZoneList name field then this definition applies to all the zones in the ZoneList.")]
    [JsonObject("ZoneInfiltration:DesignFlowRate")]
    public class ZoneInfiltration_DesignFlowRate : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_or_zonelist_name")]
public string ZoneOrZonelistName { get; set; } = "";
        

[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[Description(@"The entered calculation method is used to create the maximum amount of infiltration for this set of attributes Choices: Flow/Zone => Design Flow Rate -- simply enter Design Flow Rate Flow/Area => Flow per Zone Floor Area - Value * Floor Area (zone) = Design Flow Rate Flow/ExteriorArea => Flow per Exterior Surface Area - Value * Exterior Surface Area (zone) = Design Flow Rate Flow/ExteriorWallArea => Flow per Exterior Surface Area - Value * Exterior Wall Surface Area (zone) = Design Flow Rate AirChanges/Hour => Air Changes per Hour - Value * Floor Volume (zone) adjusted for m3/s = Design Volume Flow Rate ""Idesign"" in Equation is the result.")]
[JsonProperty("design_flow_rate_calculation_method")]
public ZoneInfiltration_DesignFlowRate_DesignFlowRateCalculationMethod DesignFlowRateCalculationMethod { get; set; } = (ZoneInfiltration_DesignFlowRate_DesignFlowRateCalculationMethod)Enum.Parse(typeof(ZoneInfiltration_DesignFlowRate_DesignFlowRateCalculationMethod), "Empty");
        

[JsonProperty("design_flow_rate")]
public System.Nullable<float> DesignFlowRate { get; set; } = null;
        

[JsonProperty("flow_per_zone_floor_area")]
public System.Nullable<float> FlowPerZoneFloorArea { get; set; } = null;
        

[Description("use key Flow/ExteriorArea for all exterior surface area use key Flow/ExteriorWall" +
    "Area to include only exterior wall area")]
[JsonProperty("flow_per_exterior_surface_area")]
public System.Nullable<float> FlowPerExteriorSurfaceArea { get; set; } = null;
        

[JsonProperty("air_changes_per_hour")]
public System.Nullable<float> AirChangesPerHour { get; set; } = null;
        

[Description("\"A\" in Equation")]
[JsonProperty("constant_term_coefficient")]
public System.Nullable<float> ConstantTermCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("\"B\" in Equation")]
[JsonProperty("temperature_term_coefficient")]
public System.Nullable<float> TemperatureTermCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("\"C\" in Equation")]
[JsonProperty("velocity_term_coefficient")]
public System.Nullable<float> VelocityTermCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("\"D\" in Equation")]
[JsonProperty("velocity_squared_term_coefficient")]
public System.Nullable<float> VelocitySquaredTermCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum ZoneInfiltration_DesignFlowRate_DesignFlowRateCalculationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirChanges/Hour")]
        AirChangesHour = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/ExteriorArea")]
        FlowExteriorArea = 3,
        
        [JsonProperty("Flow/ExteriorWallArea")]
        FlowExteriorWallArea = 4,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 5,
    }
    
    [Description("Infiltration is specified as effective leakage area at 4 Pa, schedule fraction, s" +
        "tack and wind coefficients, and is a function of temperature difference and wind" +
        " speed: Infiltration=FSchedule * (AL /1000) SQRT(Cs*|(Tzone-Todb)| +  Cw*WindSpd" +
        "**2 )")]
    [JsonObject("ZoneInfiltration:EffectiveLeakageArea")]
    public class ZoneInfiltration_EffectiveLeakageArea : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[Description("\"AL\" in Equation units are cm2 (square centimeters)")]
[JsonProperty("effective_air_leakage_area")]
public System.Nullable<float> EffectiveAirLeakageArea { get; set; } = null;
        

[Description("\"Cs\" in Equation")]
[JsonProperty("stack_coefficient")]
public System.Nullable<float> StackCoefficient { get; set; } = null;
        

[Description("\"Cw\" in Equation")]
[JsonProperty("wind_coefficient")]
public System.Nullable<float> WindCoefficient { get; set; } = null;
    }
    
    [Description("Infiltration is specified as flow coefficient, schedule fraction, stack and wind " +
        "coefficients, and is a function of temperature difference and wind speed: Infilt" +
        "ration=FSchedule * SQRT( (c * Cs*|(Tzone-Todb)|**n)**2 + (c* Cw*(s * WindSpd)**2" +
        "n)**2 )")]
    [JsonObject("ZoneInfiltration:FlowCoefficient")]
    public class ZoneInfiltration_FlowCoefficient : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[Description("\"c\" in Equation")]
[JsonProperty("flow_coefficient")]
public System.Nullable<float> FlowCoefficient { get; set; } = null;
        

[Description("\"Cs\" in Equation")]
[JsonProperty("stack_coefficient")]
public System.Nullable<float> StackCoefficient { get; set; } = null;
        

[Description("\"n\" in Equation")]
[JsonProperty("pressure_exponent")]
public System.Nullable<float> PressureExponent { get; set; } = (System.Nullable<float>)Single.Parse("0.67", CultureInfo.InvariantCulture);
        

[Description("\"Cw\" in Equation")]
[JsonProperty("wind_coefficient")]
public System.Nullable<float> WindCoefficient { get; set; } = null;
        

[Description("\"s\" in Equation")]
[JsonProperty("shelter_factor")]
public System.Nullable<float> ShelterFactor { get; set; } = null;
    }
    
    [Description(@"Ventilation is specified as a design level which is modified by a schedule fraction, temperature difference and wind speed: Ventilation=Vdesign * Fschedule * (A + B*|(Tzone-Todb)| + C*WindSpd + D * WindSpd**2) If you use a ZoneList in the Zone or ZoneList name field then this definition applies to all the zones in the ZoneList.")]
    [JsonObject("ZoneVentilation:DesignFlowRate")]
    public class ZoneVentilation_DesignFlowRate : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_or_zonelist_name")]
public string ZoneOrZonelistName { get; set; } = "";
        

[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[Description(@"The entered calculation method is used to create the maximum amount of ventilation for this set of attributes Choices: Flow/Zone => Design Flow Rate -- simply enter Design Flow Rate Flow/Area => Flow Rate per Zone Floor Area - Value * Floor Area (zone) = Design Flow Rate Flow/Person => Flow Rate per Person - Value * #people = Design Flow Rate AirChanges/Hour => Air Changes per Hour - Value * Floor Volume (zone) adjusted for m3/s = Design Volume Flow Rate ""Vdesign"" in Equation is the result.")]
[JsonProperty("design_flow_rate_calculation_method")]
public ZoneVentilation_DesignFlowRate_DesignFlowRateCalculationMethod DesignFlowRateCalculationMethod { get; set; } = (ZoneVentilation_DesignFlowRate_DesignFlowRateCalculationMethod)Enum.Parse(typeof(ZoneVentilation_DesignFlowRate_DesignFlowRateCalculationMethod), "Empty");
        

[JsonProperty("design_flow_rate")]
public System.Nullable<float> DesignFlowRate { get; set; } = null;
        

[JsonProperty("flow_rate_per_zone_floor_area")]
public System.Nullable<float> FlowRatePerZoneFloorArea { get; set; } = null;
        

[JsonProperty("flow_rate_per_person")]
public System.Nullable<float> FlowRatePerPerson { get; set; } = null;
        

[JsonProperty("air_changes_per_hour")]
public System.Nullable<float> AirChangesPerHour { get; set; } = null;
        

[JsonProperty("ventilation_type")]
public ZoneVentilation_DesignFlowRate_VentilationType VentilationType { get; set; } = (ZoneVentilation_DesignFlowRate_VentilationType)Enum.Parse(typeof(ZoneVentilation_DesignFlowRate_VentilationType), "Natural");
        

[Description("pressure rise across the fan")]
[JsonProperty("fan_pressure_rise")]
public System.Nullable<float> FanPressureRise { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("fan_total_efficiency")]
public System.Nullable<float> FanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("\"A\" in Equation")]
[JsonProperty("constant_term_coefficient")]
public System.Nullable<float> ConstantTermCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("\"B\" in Equation")]
[JsonProperty("temperature_term_coefficient")]
public System.Nullable<float> TemperatureTermCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("\"C\" in Equation")]
[JsonProperty("velocity_term_coefficient")]
public System.Nullable<float> VelocityTermCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("\"D\" in Equation")]
[JsonProperty("velocity_squared_term_coefficient")]
public System.Nullable<float> VelocitySquaredTermCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("this is the indoor temperature below which ventilation is shutoff")]
[JsonProperty("minimum_indoor_temperature")]
public System.Nullable<float> MinimumIndoorTemperature { get; set; } = (System.Nullable<float>)Single.Parse("-100", CultureInfo.InvariantCulture);
        

[Description("This schedule contains the indoor temperature versus time below which ventilation" +
    " is shutoff.")]
[JsonProperty("minimum_indoor_temperature_schedule_name")]
public string MinimumIndoorTemperatureScheduleName { get; set; } = "";
        

[Description("this is the indoor temperature above which ventilation is shutoff")]
[JsonProperty("maximum_indoor_temperature")]
public System.Nullable<float> MaximumIndoorTemperature { get; set; } = (System.Nullable<float>)Single.Parse("100", CultureInfo.InvariantCulture);
        

[Description("This schedule contains the indoor temperature versus time above which ventilation" +
    " is shutoff.")]
[JsonProperty("maximum_indoor_temperature_schedule_name")]
public string MaximumIndoorTemperatureScheduleName { get; set; } = "";
        

[Description(@"This is the temperature differential between indoor and outdoor below which ventilation is shutoff. If ((IndoorTemp - OutdoorTemp) < DeltaTemperature) then ventilation is not allowed. For example, if delta temperature is 2C, ventilation is assumed to be available if the outside air temperature is at least 2C cooler than the zone air temperature. The values for this field can include negative numbers. This allows ventilation to occur even if the outdoor temperature is above the indoor temperature.")]
[JsonProperty("delta_temperature")]
public System.Nullable<float> DeltaTemperature { get; set; } = (System.Nullable<float>)Single.Parse("-100", CultureInfo.InvariantCulture);
        

[Description("This schedule contains the temperature differential between indoor and outdoor ve" +
    "rsus time below which ventilation is shutoff.")]
[JsonProperty("delta_temperature_schedule_name")]
public string DeltaTemperatureScheduleName { get; set; } = "";
        

[Description("this is the outdoor temperature below which ventilation is shutoff")]
[JsonProperty("minimum_outdoor_temperature")]
public System.Nullable<float> MinimumOutdoorTemperature { get; set; } = (System.Nullable<float>)Single.Parse("-100", CultureInfo.InvariantCulture);
        

[Description("This schedule contains the outdoor temperature versus time below which ventilatio" +
    "n is shutoff.")]
[JsonProperty("minimum_outdoor_temperature_schedule_name")]
public string MinimumOutdoorTemperatureScheduleName { get; set; } = "";
        

[Description("this is the outdoor temperature above which ventilation is shutoff")]
[JsonProperty("maximum_outdoor_temperature")]
public System.Nullable<float> MaximumOutdoorTemperature { get; set; } = (System.Nullable<float>)Single.Parse("100", CultureInfo.InvariantCulture);
        

[Description("This schedule contains the outdoor temperature versus time above which ventilatio" +
    "n is shutoff.")]
[JsonProperty("maximum_outdoor_temperature_schedule_name")]
public string MaximumOutdoorTemperatureScheduleName { get; set; } = "";
        

[Description("this is the outdoor wind speed above which ventilation is shutoff")]
[JsonProperty("maximum_wind_speed")]
public System.Nullable<float> MaximumWindSpeed { get; set; } = (System.Nullable<float>)Single.Parse("40", CultureInfo.InvariantCulture);
    }
    
    public enum ZoneVentilation_DesignFlowRate_DesignFlowRateCalculationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirChanges/Hour")]
        AirChangesHour = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
    }
    
    public enum ZoneVentilation_DesignFlowRate_VentilationType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Balanced")]
        Balanced = 1,
        
        [JsonProperty("Exhaust")]
        Exhaust = 2,
        
        [JsonProperty("Intake")]
        Intake = 3,
        
        [JsonProperty("Natural")]
        Natural = 4,
    }
    
    [Description(@"This object is specified as natural ventilation driven by wind and stack effect only: Ventilation Wind = Cw * Opening Area * Schedule * WindSpd Ventilation Stack = Cd * Opening Area * Schedule * SQRT(2*g*DH*(|(Tzone-Todb)|/Tzone)) Total Ventilation = SQRT((Ventilation Wind)^2 + (Ventilation Stack)^2)")]
    [JsonObject("ZoneVentilation:WindandStackOpenArea")]
    public class ZoneVentilation_WindandStackOpenArea : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("This is the opening area used to calculate stack effect and wind driven ventilati" +
    "on.")]
[JsonProperty("opening_area")]
public System.Nullable<float> OpeningArea { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This schedule contains the fraction values applied to the opening area given in t" +
    "he previous input field (0.0 - 1.0).")]
[JsonProperty("opening_area_fraction_schedule_name")]
public string OpeningAreaFractionScheduleName { get; set; } = "";
        

[Description(@"This field is used to calculate wind driven ventilation. ""Cw"" in the wind-driven equation and the maximum value is 1.0. When the input is Autocalculate, the program calculates Cw based on an angle between wind direction and effective angle Cw = 0.55 at angle = 0, and Cw = 0.3 at angle=180 Linear interpolation is used to calculate Cw based on the above two values.")]
[JsonProperty("opening_effectiveness")]
public string OpeningEffectiveness { get; set; } = (System.String)"Autocalculate";
        

[Description("This field is defined as normal angle of the opening area and is used when input " +
    "field Opening Effectiveness = Autocalculate.")]
[JsonProperty("effective_angle")]
public System.Nullable<float> EffectiveAngle { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This is the height difference between the midpoint of an opening and the neutral " +
    "pressure level. \"DH\" in the stack equation.")]
[JsonProperty("height_difference")]
public System.Nullable<float> HeightDifference { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This is the discharge coefficient used to calculate stack effect. \"Cd\" in the sta" +
    "ck equation and the maximum value is 1.0. When the input is Autocalculate, the f" +
    "ollowing equation is used to calculate the coefficient: Cd = 0.4 + 0.0045*|(Tzon" +
    "e-Todb)|")]
[JsonProperty("discharge_coefficient_for_opening")]
public string DischargeCoefficientForOpening { get; set; } = (System.String)"Autocalculate";
        

[Description("This is the indoor temperature below which ventilation is shutoff.")]
[JsonProperty("minimum_indoor_temperature")]
public System.Nullable<float> MinimumIndoorTemperature { get; set; } = (System.Nullable<float>)Single.Parse("-100", CultureInfo.InvariantCulture);
        

[Description("This schedule contains the indoor temperature versus time below which ventilation" +
    " is shutoff.")]
[JsonProperty("minimum_indoor_temperature_schedule_name")]
public string MinimumIndoorTemperatureScheduleName { get; set; } = "";
        

[Description("This is the indoor temperature above which ventilation is shutoff.")]
[JsonProperty("maximum_indoor_temperature")]
public System.Nullable<float> MaximumIndoorTemperature { get; set; } = (System.Nullable<float>)Single.Parse("100", CultureInfo.InvariantCulture);
        

[Description("This schedule contains the indoor temperature versus time above which ventilation" +
    " is shutoff.")]
[JsonProperty("maximum_indoor_temperature_schedule_name")]
public string MaximumIndoorTemperatureScheduleName { get; set; } = "";
        

[Description("This is the temperature differential between indoor and outdoor below which venti" +
    "lation is shutoff.")]
[JsonProperty("delta_temperature")]
public System.Nullable<float> DeltaTemperature { get; set; } = (System.Nullable<float>)Single.Parse("-100", CultureInfo.InvariantCulture);
        

[Description("This schedule contains the temperature differential between indoor and outdoor ve" +
    "rsus time below which ventilation is shutoff.")]
[JsonProperty("delta_temperature_schedule_name")]
public string DeltaTemperatureScheduleName { get; set; } = "";
        

[Description("This is the outdoor temperature below which ventilation is shutoff.")]
[JsonProperty("minimum_outdoor_temperature")]
public System.Nullable<float> MinimumOutdoorTemperature { get; set; } = (System.Nullable<float>)Single.Parse("-100", CultureInfo.InvariantCulture);
        

[Description("This schedule contains the outdoor temperature versus time below which ventilatio" +
    "n is shutoff.")]
[JsonProperty("minimum_outdoor_temperature_schedule_name")]
public string MinimumOutdoorTemperatureScheduleName { get; set; } = "";
        

[Description("This is the outdoor temperature above which ventilation is shutoff.")]
[JsonProperty("maximum_outdoor_temperature")]
public System.Nullable<float> MaximumOutdoorTemperature { get; set; } = (System.Nullable<float>)Single.Parse("100", CultureInfo.InvariantCulture);
        

[Description("This schedule contains the outdoor temperature versus time above which ventilatio" +
    "n is shutoff.")]
[JsonProperty("maximum_outdoor_temperature_schedule_name")]
public string MaximumOutdoorTemperatureScheduleName { get; set; } = "";
        

[Description("This is the outdoor wind speed above which ventilation is shutoff.")]
[JsonProperty("maximum_wind_speed")]
public System.Nullable<float> MaximumWindSpeed { get; set; } = (System.Nullable<float>)Single.Parse("40", CultureInfo.InvariantCulture);
    }
    
    [Description(@"Provide a combined zone outdoor air flow by including interactions between mechanical ventilation, infiltration and duct leakage. This object will combine outdoor flows from all ZoneInfiltration and ZoneVentilation objects in the same zone. Balanced flows will be summed, while unbalanced flows will be added in quadrature.")]
    [JsonObject("ZoneAirBalance:OutdoorAir")]
    public class ZoneAirBalance_OutdoorAir : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("None: Only perform simple calculations without using a combined zone outdoor air." +
    " Quadrature: A combined outdoor air is used in the quadrature sum.")]
[JsonProperty("air_balance_method")]
public ZoneAirBalance_OutdoorAir_AirBalanceMethod AirBalanceMethod { get; set; } = (ZoneAirBalance_OutdoorAir_AirBalanceMethod)Enum.Parse(typeof(ZoneAirBalance_OutdoorAir_AirBalanceMethod), "Quadrature");
        

[JsonProperty("induced_outdoor_air_due_to_unbalanced_duct_leakage")]
public System.Nullable<float> InducedOutdoorAirDueToUnbalancedDuctLeakage { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This schedule contains the fraction values applied to the Induced Outdoor Air giv" +
    "en in the previous input field (0.0 - 1.0).")]
[JsonProperty("induced_outdoor_air_schedule_name")]
public string InducedOutdoorAirScheduleName { get; set; } = "";
    }
    
    public enum ZoneAirBalance_OutdoorAir_AirBalanceMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("Quadrature")]
        Quadrature = 2,
    }
    
    [Description(@"ZoneMixing is a simple air exchange from one zone to another. Note that this statement only affects the energy balance of the ""receiving"" zone and will not produce any effect on the ""source"" zone. Mixing statements can be complementary and include multiple zones, but the balancing of flows between zones is left to the user's discretion.")]
    [JsonObject("ZoneMixing")]
    public class ZoneMixing : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[Description(@"The entered calculation method is used to create the maximum amount of ventilation for this set of attributes Choices: Flow/Zone => Design Flow Rate -- simply enter Design Flow Rate Flow/Area => Flow Rate per Zone Floor Area - Value * Floor Area (zone) = Design Flow Rate Flow/Person => Flow Rate per Person - Value * #people = Design Flow Rate AirChanges/Hour => Air Changes per Hour - Value * Floor Volume (zone) adjusted for m3/s = Design Volume Flow Rate ""Vdesign"" in Equation is the result.")]
[JsonProperty("design_flow_rate_calculation_method")]
public ZoneMixing_DesignFlowRateCalculationMethod DesignFlowRateCalculationMethod { get; set; } = (ZoneMixing_DesignFlowRateCalculationMethod)Enum.Parse(typeof(ZoneMixing_DesignFlowRateCalculationMethod), "Empty");
        

[JsonProperty("design_flow_rate")]
public System.Nullable<float> DesignFlowRate { get; set; } = null;
        

[JsonProperty("flow_rate_per_zone_floor_area")]
public System.Nullable<float> FlowRatePerZoneFloorArea { get; set; } = null;
        

[JsonProperty("flow_rate_per_person")]
public System.Nullable<float> FlowRatePerPerson { get; set; } = null;
        

[JsonProperty("air_changes_per_hour")]
public System.Nullable<float> AirChangesPerHour { get; set; } = null;
        

[JsonProperty("source_zone_name")]
public string SourceZoneName { get; set; } = "";
        

[Description("This field contains the constant temperature differential between source and rece" +
    "iving zones below which mixing is shutoff.")]
[JsonProperty("delta_temperature")]
public System.Nullable<float> DeltaTemperature { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This schedule contains the temperature differential between source and receiving " +
    "zones versus time below which mixing is shutoff.")]
[JsonProperty("delta_temperature_schedule_name")]
public string DeltaTemperatureScheduleName { get; set; } = "";
        

[Description("This schedule contains the zone dry-bulb temperature versus time below which mixi" +
    "ng is shutoff.")]
[JsonProperty("minimum_zone_temperature_schedule_name")]
public string MinimumZoneTemperatureScheduleName { get; set; } = "";
        

[Description("This schedule contains the zone dry-bulb temperature versus time above which mixi" +
    "ng is shutoff.")]
[JsonProperty("maximum_zone_temperature_schedule_name")]
public string MaximumZoneTemperatureScheduleName { get; set; } = "";
        

[Description("This schedule contains the source zone dry-bulb temperature versus time below whi" +
    "ch mixing is shutoff.")]
[JsonProperty("minimum_source_zone_temperature_schedule_name")]
public string MinimumSourceZoneTemperatureScheduleName { get; set; } = "";
        

[Description("This schedule contains the source zone dry-bulb temperature versus time above whi" +
    "ch mixing is shutoff.")]
[JsonProperty("maximum_source_zone_temperature_schedule_name")]
public string MaximumSourceZoneTemperatureScheduleName { get; set; } = "";
        

[Description("This schedule contains the outdoor temperature versus time below which mixing is " +
    "shutoff.")]
[JsonProperty("minimum_outdoor_temperature_schedule_name")]
public string MinimumOutdoorTemperatureScheduleName { get; set; } = "";
        

[Description("This schedule contains the outdoor temperature versus time above which mixing is " +
    "shutoff.")]
[JsonProperty("maximum_outdoor_temperature_schedule_name")]
public string MaximumOutdoorTemperatureScheduleName { get; set; } = "";
    }
    
    public enum ZoneMixing_DesignFlowRateCalculationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirChanges/Hour")]
        AirChangesHour = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
    }
    
    [Description("ZoneCrossMixing exchanges an equal amount of air between two zones. Note that thi" +
        "s statement affects the energy balance of both zones.")]
    [JsonObject("ZoneCrossMixing")]
    public class ZoneCrossMixing : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[Description(@"The entered calculation method is used to create the maximum amount of ventilation for this set of attributes Choices: Flow/Zone => Design Flow Rate -- simply enter Design Flow Rate Flow/Area => Flow Rate per Zone Floor Area - Value * Floor Area (zone) = Design Flow Rate Flow/Person => Flow Rate per Person - Value * #people = Design Flow Rate AirChanges/Hour => Air Changes per Hour - Value * Floor Volume (zone) adjusted for m3/s = Design Volume Flow Rate ""Vdesign"" in Equation is the result.")]
[JsonProperty("design_flow_rate_calculation_method")]
public ZoneCrossMixing_DesignFlowRateCalculationMethod DesignFlowRateCalculationMethod { get; set; } = (ZoneCrossMixing_DesignFlowRateCalculationMethod)Enum.Parse(typeof(ZoneCrossMixing_DesignFlowRateCalculationMethod), "Empty");
        

[JsonProperty("design_flow_rate")]
public System.Nullable<float> DesignFlowRate { get; set; } = null;
        

[JsonProperty("flow_rate_per_zone_floor_area")]
public System.Nullable<float> FlowRatePerZoneFloorArea { get; set; } = null;
        

[JsonProperty("flow_rate_per_person")]
public System.Nullable<float> FlowRatePerPerson { get; set; } = null;
        

[JsonProperty("air_changes_per_hour")]
public System.Nullable<float> AirChangesPerHour { get; set; } = null;
        

[JsonProperty("source_zone_name")]
public string SourceZoneName { get; set; } = "";
        

[Description("This field contains the constant temperature differential between source and rece" +
    "iving zones below which cross mixing is shutoff. This value must be greater than" +
    " or equal to zero.")]
[JsonProperty("delta_temperature")]
public System.Nullable<float> DeltaTemperature { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This schedule contains the temperature differential between source and receiving " +
    "zones versus time below which cross mixing is shutoff.")]
[JsonProperty("delta_temperature_schedule_name")]
public string DeltaTemperatureScheduleName { get; set; } = "";
        

[Description("This schedule contains the indoor temperature versus time below which cross mixin" +
    "g is shutoff.")]
[JsonProperty("minimum_zone_temperature_schedule_name")]
public string MinimumZoneTemperatureScheduleName { get; set; } = "";
        

[Description("This schedule contains the indoor temperature versus time above which cross mixin" +
    "g is shutoff.")]
[JsonProperty("maximum_zone_temperature_schedule_name")]
public string MaximumZoneTemperatureScheduleName { get; set; } = "";
        

[Description("This schedule contains the source zone dry-bulb temperature versus time below whi" +
    "ch cross mixing is shutoff.")]
[JsonProperty("minimum_source_zone_temperature_schedule_name")]
public string MinimumSourceZoneTemperatureScheduleName { get; set; } = "";
        

[Description("This schedule contains the source zone dry-bulb temperature versus time above whi" +
    "ch cross mixing is shutoff.")]
[JsonProperty("maximum_source_zone_temperature_schedule_name")]
public string MaximumSourceZoneTemperatureScheduleName { get; set; } = "";
        

[Description("This schedule contains the outdoor temperature versus time below which cross mixi" +
    "ng is shutoff.")]
[JsonProperty("minimum_outdoor_temperature_schedule_name")]
public string MinimumOutdoorTemperatureScheduleName { get; set; } = "";
        

[Description("This schedule contains the outdoor temperature versus time above which cross mixi" +
    "ng is shutoff.")]
[JsonProperty("maximum_outdoor_temperature_schedule_name")]
public string MaximumOutdoorTemperatureScheduleName { get; set; } = "";
    }
    
    public enum ZoneCrossMixing_DesignFlowRateCalculationMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirChanges/Hour")]
        AirChangesHour = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
    }
    
    [Description(@"Refrigeration Door Mixing is used for an opening between two zones that are at the same elevation but have different air temperatures. In this case, the mixing air flow between the two zones is determined by the density difference between the two zones. This would typically be used between two zones in a refrigerated warehouse that are controlled at different temperatures. It could also be used to model a door to a walk-in refrigerated space if that space were modeled as a zone instead of using the object Refrigeration:WalkIn.")]
    [JsonObject("ZoneRefrigerationDoorMixing")]
    public class ZoneRefrigerationDoorMixing : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_1_name")]
public string Zone1Name { get; set; } = "";
        

[JsonProperty("zone_2_name")]
public string Zone2Name { get; set; } = "";
        

[Description(@"This schedule defines the fraction of the time the refrigeration door is open For example, if the warehouse is closed at night and there are no door openings between two zones, the value for that time period would be 0. If doors were propped open, the value  over that time period would be 1.0 If the doors were open about 20% of the time, the value over that period would be 0.2 Schedule values must lie between 0 and 1.0")]
[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[JsonProperty("door_height")]
public System.Nullable<float> DoorHeight { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[JsonProperty("door_area")]
public System.Nullable<float> DoorArea { get; set; } = (System.Nullable<float>)Single.Parse("9", CultureInfo.InvariantCulture);
        

[Description("Door protection can reduce the air flow through a refrigeration door The default " +
    "value is \"None\" Choices: \"None\", \"AirCurtain\", and \"StripCurtain\" A strip curtai" +
    "n reduces the air flow more than an air curtain")]
[JsonProperty("door_protection_type")]
public ZoneRefrigerationDoorMixing_DoorProtectionType DoorProtectionType { get; set; } = (ZoneRefrigerationDoorMixing_DoorProtectionType)Enum.Parse(typeof(ZoneRefrigerationDoorMixing_DoorProtectionType), "None");
    }
    
    public enum ZoneRefrigerationDoorMixing_DoorProtectionType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AirCurtain")]
        AirCurtain = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("StripCurtain")]
        StripCurtain = 3,
    }
    
    [Description("Earth Tube is specified as a design level which is modified by a Schedule fractio" +
        "n, temperature difference and wind speed: Earthtube=Edesign * Fschedule * (A + B" +
        "*|(Tzone-Todb)| + C*WindSpd + D * WindSpd**2)")]
    [JsonObject("ZoneEarthtube")]
    public class ZoneEarthtube : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("schedule_name")]
public string ScheduleName { get; set; } = "";
        

[Description("\"Edesign\" in Equation")]
[JsonProperty("design_flow_rate")]
public System.Nullable<float> DesignFlowRate { get; set; } = null;
        

[Description("this is the indoor temperature below which the earth tube is shut off")]
[JsonProperty("minimum_zone_temperature_when_cooling")]
public System.Nullable<float> MinimumZoneTemperatureWhenCooling { get; set; } = null;
        

[Description("this is the indoor temperature above which the earth tube is shut off")]
[JsonProperty("maximum_zone_temperature_when_heating")]
public System.Nullable<float> MaximumZoneTemperatureWhenHeating { get; set; } = null;
        

[Description("This is the temperature difference between indoor and outdoor below which the ear" +
    "th tube is shut off")]
[JsonProperty("delta_temperature")]
public System.Nullable<float> DeltaTemperature { get; set; } = null;
        

[JsonProperty("earthtube_type")]
public ZoneEarthtube_EarthtubeType EarthtubeType { get; set; } = (ZoneEarthtube_EarthtubeType)Enum.Parse(typeof(ZoneEarthtube_EarthtubeType), "Natural");
        

[Description("pressure rise across the fan")]
[JsonProperty("fan_pressure_rise")]
public System.Nullable<float> FanPressureRise { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("fan_total_efficiency")]
public System.Nullable<float> FanTotalEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("pipe_radius")]
public System.Nullable<float> PipeRadius { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("pipe_thickness")]
public System.Nullable<float> PipeThickness { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[JsonProperty("pipe_length")]
public System.Nullable<float> PipeLength { get; set; } = (System.Nullable<float>)Single.Parse("15", CultureInfo.InvariantCulture);
        

[JsonProperty("pipe_thermal_conductivity")]
public System.Nullable<float> PipeThermalConductivity { get; set; } = (System.Nullable<float>)Single.Parse("200", CultureInfo.InvariantCulture);
        

[JsonProperty("pipe_depth_under_ground_surface")]
public System.Nullable<float> PipeDepthUnderGroundSurface { get; set; } = (System.Nullable<float>)Single.Parse("3", CultureInfo.InvariantCulture);
        

[JsonProperty("soil_condition")]
public ZoneEarthtube_SoilCondition SoilCondition { get; set; } = (ZoneEarthtube_SoilCondition)Enum.Parse(typeof(ZoneEarthtube_SoilCondition), "HeavyAndDamp");
        

[JsonProperty("average_soil_surface_temperature")]
public System.Nullable<float> AverageSoilSurfaceTemperature { get; set; } = null;
        

[JsonProperty("amplitude_of_soil_surface_temperature")]
public System.Nullable<float> AmplitudeOfSoilSurfaceTemperature { get; set; } = null;
        

[JsonProperty("phase_constant_of_soil_surface_temperature")]
public System.Nullable<float> PhaseConstantOfSoilSurfaceTemperature { get; set; } = null;
        

[Description("\"A\" in Equation")]
[JsonProperty("constant_term_flow_coefficient")]
public System.Nullable<float> ConstantTermFlowCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("\"B\" in Equation")]
[JsonProperty("temperature_term_flow_coefficient")]
public System.Nullable<float> TemperatureTermFlowCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("\"C\" in Equation")]
[JsonProperty("velocity_term_flow_coefficient")]
public System.Nullable<float> VelocityTermFlowCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("\"D\" in Equation")]
[JsonProperty("velocity_squared_term_flow_coefficient")]
public System.Nullable<float> VelocitySquaredTermFlowCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum ZoneEarthtube_EarthtubeType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Exhaust")]
        Exhaust = 1,
        
        [JsonProperty("Intake")]
        Intake = 2,
        
        [JsonProperty("Natural")]
        Natural = 3,
    }
    
    public enum ZoneEarthtube_SoilCondition
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("HeavyAndDamp")]
        HeavyAndDamp = 1,
        
        [JsonProperty("HeavyAndDry")]
        HeavyAndDry = 2,
        
        [JsonProperty("HeavyAndSaturated")]
        HeavyAndSaturated = 3,
        
        [JsonProperty("LightAndDry")]
        LightAndDry = 4,
    }
    
    [Description(@"A cooltower (sometimes referred to as a wind tower or a shower cooling tower) models passive downdraught evaporative cooling (PDEC) that is designed to capture the wind at the top of a tower and cool the outdoor air using water evaporation before delivering it to a space.")]
    [JsonObject("ZoneCoolTower:Shower")]
    public class ZoneCoolTower_Shower : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("In case of stand alone tank or underground water, leave this input blank")]
[JsonProperty("water_supply_storage_tank_name")]
public string WaterSupplyStorageTankName { get; set; } = "";
        

[Description("Water flow schedule should be selected when the water flow rate is known. Wind-dr" +
    "iven flow should be selected when the water flow rate is unknown.")]
[JsonProperty("flow_control_type")]
public ZoneCoolTower_Shower_FlowControlType FlowControlType { get; set; } = (ZoneCoolTower_Shower_FlowControlType)Enum.Parse(typeof(ZoneCoolTower_Shower_FlowControlType), "WindDrivenFlow");
        

[JsonProperty("pump_flow_rate_schedule_name")]
public string PumpFlowRateScheduleName { get; set; } = "";
        

[JsonProperty("maximum_water_flow_rate")]
public System.Nullable<float> MaximumWaterFlowRate { get; set; } = null;
        

[Description("This field is from either the spray or the wet pad to the top of the outlet.")]
[JsonProperty("effective_tower_height")]
public System.Nullable<float> EffectiveTowerHeight { get; set; } = null;
        

[Description("User have to specify effective area when outlet area is relatively bigger than th" +
    "e cross sectional area of cooltower. If the number of outlet is more than one, a" +
    "ssume the air passes through only one.")]
[JsonProperty("airflow_outlet_area")]
public System.Nullable<float> AirflowOutletArea { get; set; } = null;
        

[JsonProperty("maximum_air_flow_rate")]
public System.Nullable<float> MaximumAirFlowRate { get; set; } = null;
        

[Description("This field is to specify the indoor temperature below which cooltower is shutoff." +
    "")]
[JsonProperty("minimum_indoor_temperature")]
public System.Nullable<float> MinimumIndoorTemperature { get; set; } = null;
        

[JsonProperty("fraction_of_water_loss")]
public System.Nullable<float> FractionOfWaterLoss { get; set; } = null;
        

[JsonProperty("fraction_of_flow_schedule")]
public System.Nullable<float> FractionOfFlowSchedule { get; set; } = null;
        

[JsonProperty("rated_power_consumption")]
public System.Nullable<float> RatedPowerConsumption { get; set; } = null;
    }
    
    public enum ZoneCoolTower_Shower_FlowControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("WaterFlowSchedule")]
        WaterFlowSchedule = 1,
        
        [JsonProperty("WindDrivenFlow")]
        WindDrivenFlow = 2,
    }
    
    [Description("A thermal chimney is a vertical shaft utilizing solar radiation to enhance natura" +
        "l ventilation. It consists of an absorber wall, air gap and glass cover with hig" +
        "h solar transmissivity.")]
    [JsonObject("ZoneThermalChimney")]
    public class ZoneThermalChimney : BHoMObject, IEnergyPlusClass
    {
        

[Description("Name of zone that is the thermal chimney")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("width_of_the_absorber_wall")]
public System.Nullable<float> WidthOfTheAbsorberWall { get; set; } = null;
        

[JsonProperty("cross_sectional_area_of_air_channel_outlet")]
public System.Nullable<float> CrossSectionalAreaOfAirChannelOutlet { get; set; } = null;
        

[JsonProperty("discharge_coefficient")]
public System.Nullable<float> DischargeCoefficient { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[JsonProperty("zone_1_name")]
public string Zone1Name { get; set; } = "";
        

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_1")]
public System.Nullable<float> DistanceFromTopOfThermalChimneyToInlet1 { get; set; } = null;
        

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_1")]
public System.Nullable<float> RelativeRatiosOfAirFlowRatesPassingThroughZone1 { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_1")]
public System.Nullable<float> CrossSectionalAreasOfAirChannelInlet1 { get; set; } = null;
        

[JsonProperty("zone_2_name")]
public string Zone2Name { get; set; } = "";
        

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_2")]
public System.Nullable<float> DistanceFromTopOfThermalChimneyToInlet2 { get; set; } = null;
        

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_2")]
public System.Nullable<float> RelativeRatiosOfAirFlowRatesPassingThroughZone2 { get; set; } = null;
        

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_2")]
public System.Nullable<float> CrossSectionalAreasOfAirChannelInlet2 { get; set; } = null;
        

[JsonProperty("zone_3_name")]
public string Zone3Name { get; set; } = "";
        

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_3")]
public System.Nullable<float> DistanceFromTopOfThermalChimneyToInlet3 { get; set; } = null;
        

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_3")]
public System.Nullable<float> RelativeRatiosOfAirFlowRatesPassingThroughZone3 { get; set; } = null;
        

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_3")]
public System.Nullable<float> CrossSectionalAreasOfAirChannelInlet3 { get; set; } = null;
        

[JsonProperty("zone_4_name")]
public string Zone4Name { get; set; } = "";
        

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_4")]
public System.Nullable<float> DistanceFromTopOfThermalChimneyToInlet4 { get; set; } = null;
        

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_4")]
public System.Nullable<float> RelativeRatiosOfAirFlowRatesPassingThroughZone4 { get; set; } = null;
        

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_4")]
public System.Nullable<float> CrossSectionalAreasOfAirChannelInlet4 { get; set; } = null;
        

[JsonProperty("zone_5_name")]
public string Zone5Name { get; set; } = "";
        

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_5")]
public System.Nullable<float> DistanceFromTopOfThermalChimneyToInlet5 { get; set; } = null;
        

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_5")]
public System.Nullable<float> RelativeRatiosOfAirFlowRatesPassingThroughZone5 { get; set; } = null;
        

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_5")]
public System.Nullable<float> CrossSectionalAreasOfAirChannelInlet5 { get; set; } = null;
        

[JsonProperty("zone_6_name")]
public string Zone6Name { get; set; } = "";
        

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_6")]
public System.Nullable<float> DistanceFromTopOfThermalChimneyToInlet6 { get; set; } = null;
        

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_6")]
public System.Nullable<float> RelativeRatiosOfAirFlowRatesPassingThroughZone6 { get; set; } = null;
        

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_6")]
public System.Nullable<float> CrossSectionalAreasOfAirChannelInlet6 { get; set; } = null;
        

[JsonProperty("zone_7_name")]
public string Zone7Name { get; set; } = "";
        

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_7")]
public System.Nullable<float> DistanceFromTopOfThermalChimneyToInlet7 { get; set; } = null;
        

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_7")]
public System.Nullable<float> RelativeRatiosOfAirFlowRatesPassingThroughZone7 { get; set; } = null;
        

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_7")]
public System.Nullable<float> CrossSectionalAreasOfAirChannelInlet7 { get; set; } = null;
        

[JsonProperty("zone_8_name")]
public string Zone8Name { get; set; } = "";
        

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_8")]
public System.Nullable<float> DistanceFromTopOfThermalChimneyToInlet8 { get; set; } = null;
        

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_8")]
public System.Nullable<float> RelativeRatiosOfAirFlowRatesPassingThroughZone8 { get; set; } = null;
        

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_8")]
public System.Nullable<float> CrossSectionalAreasOfAirChannelInlet8 { get; set; } = null;
        

[JsonProperty("zone_9_name")]
public string Zone9Name { get; set; } = "";
        

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_9")]
public System.Nullable<float> DistanceFromTopOfThermalChimneyToInlet9 { get; set; } = null;
        

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_9")]
public System.Nullable<float> RelativeRatiosOfAirFlowRatesPassingThroughZone9 { get; set; } = null;
        

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_9")]
public System.Nullable<float> CrossSectionalAreasOfAirChannelInlet9 { get; set; } = null;
        

[JsonProperty("zone_10_name")]
public string Zone10Name { get; set; } = "";
        

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_10")]
public System.Nullable<float> DistanceFromTopOfThermalChimneyToInlet10 { get; set; } = null;
        

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_10")]
public System.Nullable<float> RelativeRatiosOfAirFlowRatesPassingThroughZone10 { get; set; } = null;
        

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_10")]
public System.Nullable<float> CrossSectionalAreasOfAirChannelInlet10 { get; set; } = null;
        

[JsonProperty("zone_11_name")]
public string Zone11Name { get; set; } = "";
        

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_11")]
public System.Nullable<float> DistanceFromTopOfThermalChimneyToInlet11 { get; set; } = null;
        

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_11")]
public System.Nullable<float> RelativeRatiosOfAirFlowRatesPassingThroughZone11 { get; set; } = null;
        

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_11")]
public System.Nullable<float> CrossSectionalAreasOfAirChannelInlet11 { get; set; } = null;
        

[JsonProperty("zone_12_name")]
public string Zone12Name { get; set; } = "";
        

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_12")]
public System.Nullable<float> DistanceFromTopOfThermalChimneyToInlet12 { get; set; } = null;
        

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_12")]
public System.Nullable<float> RelativeRatiosOfAirFlowRatesPassingThroughZone12 { get; set; } = null;
        

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_12")]
public System.Nullable<float> CrossSectionalAreasOfAirChannelInlet12 { get; set; } = null;
        

[JsonProperty("zone_13_name")]
public string Zone13Name { get; set; } = "";
        

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_13")]
public System.Nullable<float> DistanceFromTopOfThermalChimneyToInlet13 { get; set; } = null;
        

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_13")]
public System.Nullable<float> RelativeRatiosOfAirFlowRatesPassingThroughZone13 { get; set; } = null;
        

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_13")]
public System.Nullable<float> CrossSectionalAreasOfAirChannelInlet13 { get; set; } = null;
        

[JsonProperty("zone_14_name")]
public string Zone14Name { get; set; } = "";
        

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_14")]
public System.Nullable<float> DistanceFromTopOfThermalChimneyToInlet14 { get; set; } = null;
        

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_14")]
public System.Nullable<float> RelativeRatiosOfAirFlowRatesPassingThroughZone14 { get; set; } = null;
        

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_14")]
public System.Nullable<float> CrossSectionalAreasOfAirChannelInlet14 { get; set; } = null;
        

[JsonProperty("zone_15_name")]
public string Zone15Name { get; set; } = "";
        

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_15")]
public System.Nullable<float> DistanceFromTopOfThermalChimneyToInlet15 { get; set; } = null;
        

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_15")]
public System.Nullable<float> RelativeRatiosOfAirFlowRatesPassingThroughZone15 { get; set; } = null;
        

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_15")]
public System.Nullable<float> CrossSectionalAreasOfAirChannelInlet15 { get; set; } = null;
        

[JsonProperty("zone_16_name")]
public string Zone16Name { get; set; } = "";
        

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_16")]
public System.Nullable<float> DistanceFromTopOfThermalChimneyToInlet16 { get; set; } = null;
        

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_16")]
public System.Nullable<float> RelativeRatiosOfAirFlowRatesPassingThroughZone16 { get; set; } = null;
        

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_16")]
public System.Nullable<float> CrossSectionalAreasOfAirChannelInlet16 { get; set; } = null;
        

[JsonProperty("zone_17_name")]
public string Zone17Name { get; set; } = "";
        

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_17")]
public System.Nullable<float> DistanceFromTopOfThermalChimneyToInlet17 { get; set; } = null;
        

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_17")]
public System.Nullable<float> RelativeRatiosOfAirFlowRatesPassingThroughZone17 { get; set; } = null;
        

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_17")]
public System.Nullable<float> CrossSectionalAreasOfAirChannelInlet17 { get; set; } = null;
        

[JsonProperty("zone_18_name")]
public string Zone18Name { get; set; } = "";
        

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_18")]
public System.Nullable<float> DistanceFromTopOfThermalChimneyToInlet18 { get; set; } = null;
        

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_18")]
public System.Nullable<float> RelativeRatiosOfAirFlowRatesPassingThroughZone18 { get; set; } = null;
        

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_18")]
public System.Nullable<float> CrossSectionalAreasOfAirChannelInlet18 { get; set; } = null;
        

[JsonProperty("zone_19_name")]
public string Zone19Name { get; set; } = "";
        

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_19")]
public System.Nullable<float> DistanceFromTopOfThermalChimneyToInlet19 { get; set; } = null;
        

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_19")]
public System.Nullable<float> RelativeRatiosOfAirFlowRatesPassingThroughZone19 { get; set; } = null;
        

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_19")]
public System.Nullable<float> CrossSectionalAreasOfAirChannelInlet19 { get; set; } = null;
        

[JsonProperty("zone_20_name")]
public string Zone20Name { get; set; } = "";
        

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_20")]
public System.Nullable<float> DistanceFromTopOfThermalChimneyToInlet20 { get; set; } = null;
        

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_20")]
public System.Nullable<float> RelativeRatiosOfAirFlowRatesPassingThroughZone20 { get; set; } = null;
        

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_20")]
public System.Nullable<float> CrossSectionalAreasOfAirChannelInlet20 { get; set; } = null;
    }
}
namespace BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Central air system terminal unit, single duct, constant volume, with reheat coil " +
        "(hot water, electric, gas, or steam).")]
    [JsonObject("AirTerminal:SingleDuct:ConstantVolume:Reheat")]
    public class AirTerminal_SingleDuct_ConstantVolume_Reheat : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("maximum_air_flow_rate")]
public string MaximumAirFlowRate { get; set; } = "";
        

[JsonProperty("reheat_coil_object_type")]
public AirTerminal_SingleDuct_ConstantVolume_Reheat_ReheatCoilObjectType ReheatCoilObjectType { get; set; } = (AirTerminal_SingleDuct_ConstantVolume_Reheat_ReheatCoilObjectType)Enum.Parse(typeof(AirTerminal_SingleDuct_ConstantVolume_Reheat_ReheatCoilObjectType), "CoilHeatingElectric");
        

[JsonProperty("reheat_coil_name")]
public string ReheatCoilName { get; set; } = "";
        

[Description("Not used when reheat coil type is gas or electric")]
[JsonProperty("maximum_hot_water_or_steam_flow_rate")]
public string MaximumHotWaterOrSteamFlowRate { get; set; } = "";
        

[Description("Not used when reheat coil type is gas or electric")]
[JsonProperty("minimum_hot_water_or_steam_flow_rate")]
public System.Nullable<float> MinimumHotWaterOrSteamFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("convergence_tolerance")]
public System.Nullable<float> ConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[Description("Specifies the maximum allowable supply air temperature leaving the reheat coil. I" +
    "f left blank, there is no limit and no default. If unknown, 35C (95F) is recomme" +
    "nded.")]
[JsonProperty("maximum_reheat_air_temperature")]
public System.Nullable<float> MaximumReheatAirTemperature { get; set; } = null;
    }
    
    public enum AirTerminal_SingleDuct_ConstantVolume_Reheat_ReheatCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    [Description("Central air system terminal unit, single duct, constant volume, without reheat co" +
        "il")]
    [JsonObject("AirTerminal:SingleDuct:ConstantVolume:NoReheat")]
    public class AirTerminal_SingleDuct_ConstantVolume_NoReheat : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("The air-inlet node name that connects the air splitter to the individual zone air" +
    " distribution unit. This node should also be one of the outlet air node of an Ai" +
    "rLoopHVAC:ZoneSplitter or AirLoopHVAC:SupplyPlenum component.")]
[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[Description("This is an air outlet node from the air distribution unit. This node name should " +
    "be one of the supply air inlet node names of a zone served by this component.")]
[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("maximum_air_flow_rate")]
public string MaximumAirFlowRate { get; set; } = "";
        

[Description(@"This field is used to modulate the terminal unit flow rate based on the specified outdoor air requirement. When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will adjust flow to meet this outdoor air requirement and no more. There is no control for zone load. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on either the current or design occupancy as specified in the Per Person Ventilation Rate Mode field. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate. The requested flow rate may not be fully met if the system is operating with cycling fan. If this field is blank, then the terminal unit will not be controlled for outdoor air flow. This field is optional.")]
[JsonProperty("design_specification_outdoor_air_object_name")]
public string DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        

[Description("CurrentOccupancy uses current number of people in the zone which may vary DesignO" +
    "ccupancy uses the total number of people in the zone and is constant")]
[JsonProperty("per_person_ventilation_rate_mode")]
public AirTerminal_SingleDuct_ConstantVolume_NoReheat_PerPersonVentilationRateMode PerPersonVentilationRateMode { get; set; } = (AirTerminal_SingleDuct_ConstantVolume_NoReheat_PerPersonVentilationRateMode)Enum.Parse(typeof(AirTerminal_SingleDuct_ConstantVolume_NoReheat_PerPersonVentilationRateMode), "CurrentOccupancy");
    }
    
    public enum AirTerminal_SingleDuct_ConstantVolume_NoReheat_PerPersonVentilationRateMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CurrentOccupancy")]
        CurrentOccupancy = 1,
        
        [JsonProperty("DesignOccupancy")]
        DesignOccupancy = 2,
    }
    
    [Description("Central air system terminal unit, single duct, variable volume, with no reheat co" +
        "il.")]
    [JsonObject("AirTerminal:SingleDuct:VAV:NoReheat")]
    public class AirTerminal_SingleDuct_VAV_NoReheat : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("maximum_air_flow_rate")]
public string MaximumAirFlowRate { get; set; } = "";
        

[Description("Constant = Constant Minimum Air Flow Fraction (a fraction of Maximum Air Flow Rat" +
    "e) FixedFlowRate = Fixed Minimum Air Flow Rate (a fixed minimum air volume flow " +
    "rate) Scheduled = Scheduled Minimum Air Flow Fraction (a fraction of Maximum Air" +
    " Flow")]
[JsonProperty("zone_minimum_air_flow_input_method")]
public AirTerminal_SingleDuct_VAV_NoReheat_ZoneMinimumAirFlowInputMethod ZoneMinimumAirFlowInputMethod { get; set; } = (AirTerminal_SingleDuct_VAV_NoReheat_ZoneMinimumAirFlowInputMethod)Enum.Parse(typeof(AirTerminal_SingleDuct_VAV_NoReheat_ZoneMinimumAirFlowInputMethod), "Constant");
        

[Description(@"This field is used if the field Zone Minimum Air Flow Input Method is Constant If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional; if a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the following field are entered, the larger result is used. The values for autosizing are picked up from the Sizing:Zone input fields ""Cooling Minimum Air Flow per Zone Floor Area"", ""Cooling Minimum Air Flow"", and ""Cooling Minimum Air Flow Fraction"". If there is no sizing calculation a default of 0.000762 m3/s-m2 (0.15 cfm/ft2) is used.")]
[JsonProperty("constant_minimum_air_flow_fraction")]
public string ConstantMinimumAirFlowFraction { get; set; } = (System.String)"Autosize";
        

[Description(@"This field is used if the field Zone Minimum Air Flow Input Method is FixedFlowRate. If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional; if a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the previous field are entered, the larger result is used. The values for autosizing are picked up from the Sizing:Zone input fields ""Cooling Minimum Air Flow per Zone Floor Area"", ""Cooling Minimum Air Flow"", and ""Cooling Minimum Air Flow Fraction"". If there is no sizing calculation a default of 0.000762 m3/s-m2 (0.15 cfm/ft2) is used.")]
[JsonProperty("fixed_minimum_air_flow_rate")]
public string FixedMinimumAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description(@"This field is used if the field Zone Minimum Air Flow Input Method is Scheduled Schedule values are fractions, 0.0 to 1.0. If the field Constant Minimum Air Flow Fraction is blank, then the average of the minimum and maximum schedule values is used for sizing normal-action reheat coils.")]
[JsonProperty("minimum_air_flow_fraction_schedule_name")]
public string MinimumAirFlowFractionScheduleName { get; set; } = "";
        

[Description(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will increase flow as needed to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on the current number of occupants in the zone. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate. If this field is blank, then the terminal unit will not be controlled for outdoor air flow.")]
[JsonProperty("design_specification_outdoor_air_object_name")]
public string DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        

[Description(@"This field adjusts the design minimum flow rate by multiplying it using this schedule of fraction values. This field can be used with any of the three ""Zone Minimum Air Flow Input Method"". Schedule values are fractions, 0.0 to 1.0. This field adjusts the minimum airflow turndown below the design minimum air flow and is intended for use with ASHRAE Standard 170. If this field is left blank, then the turndown minimum air flow fraction value is set to 1.")]
[JsonProperty("minimum_air_flow_turndown_schedule_name")]
public string MinimumAirFlowTurndownScheduleName { get; set; } = "";
    }
    
    public enum AirTerminal_SingleDuct_VAV_NoReheat_ZoneMinimumAirFlowInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Constant")]
        Constant = 1,
        
        [JsonProperty("FixedFlowRate")]
        FixedFlowRate = 2,
        
        [JsonProperty("Scheduled")]
        Scheduled = 3,
    }
    
    [Description("Central air system terminal unit, single duct, variable volume, with reheat coil " +
        "(hot water, electric, gas, or steam).")]
    [JsonObject("AirTerminal:SingleDuct:VAV:Reheat")]
    public class AirTerminal_SingleDuct_VAV_Reheat : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("the outlet node of the damper and the inlet node of the reheat coil this is an in" +
    "ternal node to the terminal unit and connects the damper and reheat coil")]
[JsonProperty("damper_air_outlet_node_name")]
public string DamperAirOutletNodeName { get; set; } = "";
        

[Description("the inlet node to the terminal unit and the damper")]
[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("maximum_air_flow_rate")]
public string MaximumAirFlowRate { get; set; } = "";
        

[Description("Constant = Constant Minimum Air Flow Fraction (a fraction of Maximum Air Flow Rat" +
    "e) FixedFlowRate = Fixed Minimum Air Flow Rate (a fixed minimum air volume flow " +
    "rate) Scheduled = Scheduled Minimum Air Flow Fraction (a fraction of Maximum Air" +
    " Flow")]
[JsonProperty("zone_minimum_air_flow_input_method")]
public AirTerminal_SingleDuct_VAV_Reheat_ZoneMinimumAirFlowInputMethod ZoneMinimumAirFlowInputMethod { get; set; } = (AirTerminal_SingleDuct_VAV_Reheat_ZoneMinimumAirFlowInputMethod)Enum.Parse(typeof(AirTerminal_SingleDuct_VAV_Reheat_ZoneMinimumAirFlowInputMethod), "Constant");
        

[Description(@"This field is used if the field Zone Minimum Air Flow Input Method is Constant If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional; if a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the following field are entered, the larger result is used. The values for autosizing are picked up from the Sizing:Zone input fields ""Cooling Minimum Air Flow per Zone Floor Area"", ""Cooling Minimum Air Flow"", and ""Cooling Minimum Air Flow Fraction"". If there is no sizing calculation a default of 0.000762 m3/s-m2 (0.15 cfm/ft2) is used.")]
[JsonProperty("constant_minimum_air_flow_fraction")]
public string ConstantMinimumAirFlowFraction { get; set; } = (System.String)"Autosize";
        

[Description(@"This field is used if the field Zone Minimum Air Flow Input Method is FixedFlowRate. If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional; if a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the previous field are entered, the larger result is used. The values for autosizing are picked up from the Sizing:Zone input fields ""Cooling Minimum Air Flow per Zone Floor Area"", ""Cooling Minimum Air Flow"", and ""Cooling Minimum Air Flow Fraction"". If there is no sizing calculation a default of 0.000762 m3/s-m2 (0.15 cfm/ft2) is used.")]
[JsonProperty("fixed_minimum_air_flow_rate")]
public string FixedMinimumAirFlowRate { get; set; } = (System.String)"Autosize";
        

[Description(@"This field is used if the field Zone Minimum Air Flow Input Method is Scheduled Schedule values are fractions, 0.0 to 1.0. If the field Constant Minimum Air Flow Fraction is blank, then the average of the minimum and maximum schedule values is used for sizing normal-action reheat coils.")]
[JsonProperty("minimum_air_flow_fraction_schedule_name")]
public string MinimumAirFlowFractionScheduleName { get; set; } = "";
        

[JsonProperty("reheat_coil_object_type")]
public AirTerminal_SingleDuct_VAV_Reheat_ReheatCoilObjectType ReheatCoilObjectType { get; set; } = (AirTerminal_SingleDuct_VAV_Reheat_ReheatCoilObjectType)Enum.Parse(typeof(AirTerminal_SingleDuct_VAV_Reheat_ReheatCoilObjectType), "CoilHeatingElectric");
        

[JsonProperty("reheat_coil_name")]
public string ReheatCoilName { get; set; } = "";
        

[Description("Not used when reheat coil type is gas or electric")]
[JsonProperty("maximum_hot_water_or_steam_flow_rate")]
public string MaximumHotWaterOrSteamFlowRate { get; set; } = "";
        

[Description("Not used when reheat coil type is gas or electric")]
[JsonProperty("minimum_hot_water_or_steam_flow_rate")]
public System.Nullable<float> MinimumHotWaterOrSteamFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The outlet node of the terminal unit and the reheat coil. This is also the zone i" +
    "nlet node.")]
[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("convergence_tolerance")]
public System.Nullable<float> ConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[Description("Normal means the damper is fixed at the minimum position in heating mode Reverse " +
    "means the damper can open fully during reheat ReverseWithLimits means the damper" +
    " will open partially during reheat as specified in the following 2 fields")]
[JsonProperty("damper_heating_action")]
public AirTerminal_SingleDuct_VAV_Reheat_DamperHeatingAction DamperHeatingAction { get; set; } = (AirTerminal_SingleDuct_VAV_Reheat_DamperHeatingAction)Enum.Parse(typeof(AirTerminal_SingleDuct_VAV_Reheat_DamperHeatingAction), "ReverseWithLimits");
        

[Description(@"Used only when Reheat Coil Object Type = Coil:Heating:Water and Damper Heating Action = ReverseWithLimits When autocalculating, the maximum flow per zone is set to 0.002032 m3/s-m2 (0.4 cfm/sqft) This optional field limits the maximum flow allowed in reheat mode. At no time will the maximum flow rate calculated here exceed the value of Maximum Air Flow Rate.")]
[JsonProperty("maximum_flow_per_zone_floor_area_during_reheat")]
public string MaximumFlowPerZoneFloorAreaDuringReheat { get; set; } = (System.String)"Autosize";
        

[Description(@"Used only when Reheat Coil Object Type = Coil:Heating:Water and Damper Heating Action = ReverseWithLimits When autocalculating, the maximum flow fraction is set to the ratio of 0.002032 m3/s-m2 (0.4 cfm/sqft) multiplied by the zone floor area and the Maximum Air Flow Rate. This optional field limits the maximum flow allowed in reheat mode. At no time will the maximum flow rate calculated here exceed the value of Maximum Air Flow Rate.")]
[JsonProperty("maximum_flow_fraction_during_reheat")]
public string MaximumFlowFractionDuringReheat { get; set; } = (System.String)"Autosize";
        

[Description("Specifies the maximum allowable supply air temperature leaving the reheat coil. I" +
    "f left blank, there is no limit and no default. If unknown, 35C (95F) is recomme" +
    "nded.")]
[JsonProperty("maximum_reheat_air_temperature")]
public System.Nullable<float> MaximumReheatAirTemperature { get; set; } = null;
        

[Description(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will increase flow as needed to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on the current number of occupants in the zone. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate. If this field is blank, then the terminal unit will not be controlled for outdoor air flow.")]
[JsonProperty("design_specification_outdoor_air_object_name")]
public string DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        

[Description(@"This field adjusts the design minimum flow rate by multiplying it using this schedule of fraction values. This field can be used with any of the three ""Zone Minimum Air Flow Input Method"". Schedule values are fractions, 0.0 to 1.0. This field adjusts the minimum airflow turndown below the design minimum air flow and is intended for use with ASHRAE Standard 170. If this field is left blank, then the turndown minimum air flow fraction value is set to 1.")]
[JsonProperty("minimum_air_flow_turndown_schedule_name")]
public string MinimumAirFlowTurndownScheduleName { get; set; } = "";
    }
    
    public enum AirTerminal_SingleDuct_VAV_Reheat_ZoneMinimumAirFlowInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Constant")]
        Constant = 1,
        
        [JsonProperty("FixedFlowRate")]
        FixedFlowRate = 2,
        
        [JsonProperty("Scheduled")]
        Scheduled = 3,
    }
    
    public enum AirTerminal_SingleDuct_VAV_Reheat_ReheatCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum AirTerminal_SingleDuct_VAV_Reheat_DamperHeatingAction
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Normal")]
        Normal = 1,
        
        [JsonProperty("Reverse")]
        Reverse = 2,
        
        [JsonProperty("ReverseWithLimits")]
        ReverseWithLimits = 3,
    }
    
    [Description(@"Central air system terminal unit, single duct, variable volume, with reheat coil (hot water, electric, gas, or steam) and variable-speed fan. These units are usually employed in underfloor air distribution (UFAD) systems where the air is supplied at low static pressure through an underfloor plenum. The fan is used to control the flow of conditioned air that enters the space.")]
    [JsonObject("AirTerminal:SingleDuct:VAV:Reheat:VariableSpeedFan")]
    public class AirTerminal_SingleDuct_VAV_Reheat_VariableSpeedFan : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("maximum_cooling_air_flow_rate")]
public string MaximumCoolingAirFlowRate { get; set; } = "";
        

[JsonProperty("maximum_heating_air_flow_rate")]
public string MaximumHeatingAirFlowRate { get; set; } = "";
        

[Description("fraction of cooling air flow rate")]
[JsonProperty("zone_minimum_air_flow_fraction")]
public System.Nullable<float> ZoneMinimumAirFlowFraction { get; set; } = null;
        

[Description("The name of the HVAC system node that is the air inlet node for the terminal unit" +
    ". This is also the air inlet node for the unit\'s fan.")]
[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[Description("The name of the HVAC system node that is the air outlet node for the terminal uni" +
    "t. This is also the air outlet node for the unit\'s heating coil\'s air outlet nod" +
    "e. This node is also a zone inlet node.")]
[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("fan_object_type")]
public AirTerminal_SingleDuct_VAV_Reheat_VariableSpeedFan_FanObjectType FanObjectType { get; set; } = (AirTerminal_SingleDuct_VAV_Reheat_VariableSpeedFan_FanObjectType)Enum.Parse(typeof(AirTerminal_SingleDuct_VAV_Reheat_VariableSpeedFan_FanObjectType), "FanSystemModel");
        

[JsonProperty("fan_name")]
public string FanName { get; set; } = "";
        

[JsonProperty("heating_coil_object_type")]
public AirTerminal_SingleDuct_VAV_Reheat_VariableSpeedFan_HeatingCoilObjectType HeatingCoilObjectType { get; set; } = (AirTerminal_SingleDuct_VAV_Reheat_VariableSpeedFan_HeatingCoilObjectType)Enum.Parse(typeof(AirTerminal_SingleDuct_VAV_Reheat_VariableSpeedFan_HeatingCoilObjectType), "CoilHeatingElectric");
        

[JsonProperty("heating_coil_name")]
public string HeatingCoilName { get; set; } = "";
        

[Description("Not used when heating coil type is gas or electric")]
[JsonProperty("maximum_hot_water_or_steam_flow_rate")]
public string MaximumHotWaterOrSteamFlowRate { get; set; } = "";
        

[Description("Not used when heating coil type is gas or electric")]
[JsonProperty("minimum_hot_water_or_steam_flow_rate")]
public System.Nullable<float> MinimumHotWaterOrSteamFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_convergence_tolerance")]
public System.Nullable<float> HeatingConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[Description(@"This field adjusts the fan-off minimum flow rate by multiplying it using this scheduled fraction values. This field is used with ""Zone Minimum Air Flow Fraction"". Schedule values are fractions 0.0 to 1.0. This field adjusts the minimum airflow turndown below the design minimum air flow and is intended for use with ASHRAE Standard 170. If this field is left blank, then the turndown minimum air flow fraction value is set to 1 and the model uses the fixed fraction specified in in the field ""Zone Minimum Air Flow Fraction"".")]
[JsonProperty("minimum_air_flow_turndown_schedule_name")]
public string MinimumAirFlowTurndownScheduleName { get; set; } = "";
    }
    
    public enum AirTerminal_SingleDuct_VAV_Reheat_VariableSpeedFan_FanObjectType
    {
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 0,
        
        [JsonProperty("Fan:VariableVolume")]
        FanVariableVolume = 1,
    }
    
    public enum AirTerminal_SingleDuct_VAV_Reheat_VariableSpeedFan_HeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    [Description("Central air system terminal unit, single duct, variable volume for both cooling a" +
        "nd heating, with no reheat coil.")]
    [JsonObject("AirTerminal:SingleDuct:VAV:HeatAndCool:NoReheat")]
    public class AirTerminal_SingleDuct_VAV_HeatAndCool_NoReheat : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("The outlet node of the terminal unit. This is also the zone inlet node.")]
[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("maximum_air_flow_rate")]
public string MaximumAirFlowRate { get; set; } = "";
        

[Description("fraction of maximum air flow")]
[JsonProperty("zone_minimum_air_flow_fraction")]
public System.Nullable<float> ZoneMinimumAirFlowFraction { get; set; } = null;
        

[Description(@"This field adjusts the design minimum flow rate by multiplying it using this schedule of fraction values. This field is used with ""Zone Minimum Air Flow Fraction"". Schedule values are fractions 0.0 to 1.0. This field adjusts the minimum airflow turndown below the design minimum air flow and is intended for use with ASHRAE Standard 170. If this field is left blank, then the turndown minimum air flow fraction value is set to 1 and the model uses the fixed fraction specified in in the field ""Zone Minimum Air Flow Fraction"".")]
[JsonProperty("minimum_air_flow_turndown_schedule_name")]
public string MinimumAirFlowTurndownScheduleName { get; set; } = "";
    }
    
    [Description("Central air system terminal unit, single duct, variable volume for both cooling a" +
        "nd heating, with reheat coil (hot water, electric, gas, or steam).")]
    [JsonObject("AirTerminal:SingleDuct:VAV:HeatAndCool:Reheat")]
    public class AirTerminal_SingleDuct_VAV_HeatAndCool_Reheat : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("the outlet node of the damper and the inlet node of the reheat coil this is an in" +
    "ternal node to the terminal unit and connects the damper and reheat coil")]
[JsonProperty("damper_air_outlet_node_name")]
public string DamperAirOutletNodeName { get; set; } = "";
        

[Description("the inlet node to the terminal unit and the damper")]
[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("maximum_air_flow_rate")]
public string MaximumAirFlowRate { get; set; } = "";
        

[Description("fraction of maximum air flow")]
[JsonProperty("zone_minimum_air_flow_fraction")]
public System.Nullable<float> ZoneMinimumAirFlowFraction { get; set; } = null;
        

[JsonProperty("reheat_coil_object_type")]
public AirTerminal_SingleDuct_VAV_HeatAndCool_Reheat_ReheatCoilObjectType ReheatCoilObjectType { get; set; } = (AirTerminal_SingleDuct_VAV_HeatAndCool_Reheat_ReheatCoilObjectType)Enum.Parse(typeof(AirTerminal_SingleDuct_VAV_HeatAndCool_Reheat_ReheatCoilObjectType), "CoilHeatingElectric");
        

[JsonProperty("reheat_coil_name")]
public string ReheatCoilName { get; set; } = "";
        

[Description("Not used when reheat coil type is gas or electric")]
[JsonProperty("maximum_hot_water_or_steam_flow_rate")]
public string MaximumHotWaterOrSteamFlowRate { get; set; } = "";
        

[Description("Not used when reheat coil type is gas or electric")]
[JsonProperty("minimum_hot_water_or_steam_flow_rate")]
public System.Nullable<float> MinimumHotWaterOrSteamFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("The outlet node of the terminal unit and the reheat coil. This is also the zone i" +
    "nlet node.")]
[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("convergence_tolerance")]
public System.Nullable<float> ConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[Description("Specifies the maximum allowable supply air temperature leaving the reheat coil. I" +
    "f left blank, there is no limit and no default. If unknown, 35C (95F) is recomme" +
    "nded.")]
[JsonProperty("maximum_reheat_air_temperature")]
public System.Nullable<float> MaximumReheatAirTemperature { get; set; } = null;
        

[Description(@"This field adjusts the design minimum flow rate by multiplying it using this schedule of fraction values. This field is used with ""Zone Minimum Air Flow Fraction"". Schedule values are fractions 0.0 to 1.0. This field adjusts the minimum airflow turndown below the design minimum air flow and is intended for use with ASHRAE Standard 170. If this field is left blank, then the turndown minimum air flow fraction value is set to 1 and the model uses the fixed fraction specified in in the field ""Zone Minimum Air Flow Fraction"".")]
[JsonProperty("minimum_air_flow_turndown_schedule_name")]
public string MinimumAirFlowTurndownScheduleName { get; set; } = "";
    }
    
    public enum AirTerminal_SingleDuct_VAV_HeatAndCool_Reheat_ReheatCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    [Description("Central air system terminal unit, single duct, variable volume, series powered in" +
        "duction unit (PIU), with reheat coil (hot water, electric, gas, or steam).")]
    [JsonObject("AirTerminal:SingleDuct:SeriesPIU:Reheat")]
    public class AirTerminal_SingleDuct_SeriesPIU_Reheat : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("maximum_air_flow_rate")]
public string MaximumAirFlowRate { get; set; } = "";
        

[JsonProperty("maximum_primary_air_flow_rate")]
public string MaximumPrimaryAirFlowRate { get; set; } = "";
        

[JsonProperty("minimum_primary_air_flow_fraction")]
public string MinimumPrimaryAirFlowFraction { get; set; } = "";
        

[JsonProperty("supply_air_inlet_node_name")]
public string SupplyAirInletNodeName { get; set; } = "";
        

[JsonProperty("secondary_air_inlet_node_name")]
public string SecondaryAirInletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[JsonProperty("reheat_coil_air_inlet_node_name")]
public string ReheatCoilAirInletNodeName { get; set; } = "";
        

[JsonProperty("zone_mixer_name")]
public string ZoneMixerName { get; set; } = "";
        

[Description("Fan type must be Fan:SystemModel or Fan:ConstantVolume")]
[JsonProperty("fan_name")]
public string FanName { get; set; } = "";
        

[JsonProperty("reheat_coil_object_type")]
public AirTerminal_SingleDuct_SeriesPIU_Reheat_ReheatCoilObjectType ReheatCoilObjectType { get; set; } = (AirTerminal_SingleDuct_SeriesPIU_Reheat_ReheatCoilObjectType)Enum.Parse(typeof(AirTerminal_SingleDuct_SeriesPIU_Reheat_ReheatCoilObjectType), "CoilHeatingElectric");
        

[JsonProperty("reheat_coil_name")]
public string ReheatCoilName { get; set; } = "";
        

[Description("Not used when reheat coil type is gas or electric")]
[JsonProperty("maximum_hot_water_or_steam_flow_rate")]
public string MaximumHotWaterOrSteamFlowRate { get; set; } = "";
        

[Description("Not used when reheat coil type is gas or electric")]
[JsonProperty("minimum_hot_water_or_steam_flow_rate")]
public System.Nullable<float> MinimumHotWaterOrSteamFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("convergence_tolerance")]
public System.Nullable<float> ConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
    }
    
    public enum AirTerminal_SingleDuct_SeriesPIU_Reheat_ReheatCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    [Description("Central air system terminal unit, single duct, variable volume, parallel powered " +
        "induction unit (PIU), with reheat coil (hot water, electric, gas, or steam).")]
    [JsonObject("AirTerminal:SingleDuct:ParallelPIU:Reheat")]
    public class AirTerminal_SingleDuct_ParallelPIU_Reheat : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("maximum_primary_air_flow_rate")]
public string MaximumPrimaryAirFlowRate { get; set; } = "";
        

[JsonProperty("maximum_secondary_air_flow_rate")]
public string MaximumSecondaryAirFlowRate { get; set; } = "";
        

[JsonProperty("minimum_primary_air_flow_fraction")]
public string MinimumPrimaryAirFlowFraction { get; set; } = "";
        

[Description("the fraction of the primary air flow at which fan turns on")]
[JsonProperty("fan_on_flow_fraction")]
public string FanOnFlowFraction { get; set; } = "";
        

[JsonProperty("supply_air_inlet_node_name")]
public string SupplyAirInletNodeName { get; set; } = "";
        

[JsonProperty("secondary_air_inlet_node_name")]
public string SecondaryAirInletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[Description("mixer outlet node")]
[JsonProperty("reheat_coil_air_inlet_node_name")]
public string ReheatCoilAirInletNodeName { get; set; } = "";
        

[JsonProperty("zone_mixer_name")]
public string ZoneMixerName { get; set; } = "";
        

[Description("Fan type must be Fan:SystemModel or Fan:ConstantVolume")]
[JsonProperty("fan_name")]
public string FanName { get; set; } = "";
        

[JsonProperty("reheat_coil_object_type")]
public AirTerminal_SingleDuct_ParallelPIU_Reheat_ReheatCoilObjectType ReheatCoilObjectType { get; set; } = (AirTerminal_SingleDuct_ParallelPIU_Reheat_ReheatCoilObjectType)Enum.Parse(typeof(AirTerminal_SingleDuct_ParallelPIU_Reheat_ReheatCoilObjectType), "CoilHeatingElectric");
        

[JsonProperty("reheat_coil_name")]
public string ReheatCoilName { get; set; } = "";
        

[Description("Not used when reheat coil type is gas or electric")]
[JsonProperty("maximum_hot_water_or_steam_flow_rate")]
public string MaximumHotWaterOrSteamFlowRate { get; set; } = "";
        

[Description("Not used when reheat coil type is gas or electric")]
[JsonProperty("minimum_hot_water_or_steam_flow_rate")]
public System.Nullable<float> MinimumHotWaterOrSteamFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("convergence_tolerance")]
public System.Nullable<float> ConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
    }
    
    public enum AirTerminal_SingleDuct_ParallelPIU_Reheat_ReheatCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    [Description("Central air system terminal unit, single duct, variable volume, induction unit wi" +
        "th hot water reheat coil and chilled water recool coil.")]
    [JsonObject("AirTerminal:SingleDuct:ConstantVolume:FourPipeInduction")]
    public class AirTerminal_SingleDuct_ConstantVolume_FourPipeInduction : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("maximum_total_air_flow_rate")]
public string MaximumTotalAirFlowRate { get; set; } = "";
        

[Description("ratio of induced air flow rate to primary air flow rate")]
[JsonProperty("induction_ratio")]
public System.Nullable<float> InductionRatio { get; set; } = (System.Nullable<float>)Single.Parse("2.5", CultureInfo.InvariantCulture);
        

[JsonProperty("supply_air_inlet_node_name")]
public string SupplyAirInletNodeName { get; set; } = "";
        

[Description("should be a zone exhaust node, also the heating coil inlet node")]
[JsonProperty("induced_air_inlet_node_name")]
public string InducedAirInletNodeName { get; set; } = "";
        

[Description("should be a zone inlet node")]
[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("heating_coil_object_type")]
public AirTerminal_SingleDuct_ConstantVolume_FourPipeInduction_HeatingCoilObjectType HeatingCoilObjectType { get; set; } = (AirTerminal_SingleDuct_ConstantVolume_FourPipeInduction_HeatingCoilObjectType)Enum.Parse(typeof(AirTerminal_SingleDuct_ConstantVolume_FourPipeInduction_HeatingCoilObjectType), "CoilHeatingWater");
        

[JsonProperty("heating_coil_name")]
public string HeatingCoilName { get; set; } = "";
        

[Description("Not used when heating coil type is gas or electric")]
[JsonProperty("maximum_hot_water_flow_rate")]
public string MaximumHotWaterFlowRate { get; set; } = "";
        

[Description("Not used when heating coil type is gas or electric")]
[JsonProperty("minimum_hot_water_flow_rate")]
public System.Nullable<float> MinimumHotWaterFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_convergence_tolerance")]
public System.Nullable<float> HeatingConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[JsonProperty("cooling_coil_object_type")]
public AirTerminal_SingleDuct_ConstantVolume_FourPipeInduction_CoolingCoilObjectType CoolingCoilObjectType { get; set; } = (AirTerminal_SingleDuct_ConstantVolume_FourPipeInduction_CoolingCoilObjectType)Enum.Parse(typeof(AirTerminal_SingleDuct_ConstantVolume_FourPipeInduction_CoolingCoilObjectType), "CoilCoolingWater");
        

[JsonProperty("cooling_coil_name")]
public string CoolingCoilName { get; set; } = "";
        

[JsonProperty("maximum_cold_water_flow_rate")]
public string MaximumColdWaterFlowRate { get; set; } = "";
        

[JsonProperty("minimum_cold_water_flow_rate")]
public System.Nullable<float> MinimumColdWaterFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("cooling_convergence_tolerance")]
public System.Nullable<float> CoolingConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[JsonProperty("zone_mixer_name")]
public string ZoneMixerName { get; set; } = "";
    }
    
    public enum AirTerminal_SingleDuct_ConstantVolume_FourPipeInduction_HeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 0,
    }
    
    public enum AirTerminal_SingleDuct_ConstantVolume_FourPipeInduction_CoolingCoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 0,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 1,
    }
    
    [Description("Central air system terminal unit, single duct, constant volume, with heating and/" +
        "or cooling. Operates as two-pipe unit if heating or cooling water is omitted. He" +
        "ating and/or cooling can be scheduled off for dedicated ventilation.")]
    [JsonObject("AirTerminal:SingleDuct:ConstantVolume:FourPipeBeam")]
    public class AirTerminal_SingleDuct_ConstantVolume_FourPipeBeam : BHoMObject, IEnergyPlusClass
    {
        

[Description("Primary air is supplied by central air handling unit and must be on for heating o" +
    "r cooling. Schedule value > 0 means the primary air supply is available. If this" +
    " field is blank, the primary air supply is always available.")]
[JsonProperty("primary_air_availability_schedule_name")]
public string PrimaryAirAvailabilityScheduleName { get; set; } = "";
        

[Description("Cooling operation can be controlled separately using this availability schedule. " +
    "Schedule value > 0 means beam cooling is available. If this field is blank, the " +
    "beam cooling is always available (as long as primary air is also available).")]
[JsonProperty("cooling_availability_schedule_name")]
public string CoolingAvailabilityScheduleName { get; set; } = "";
        

[Description("Heating operation can be controlled separately using this availability schedule. " +
    "Schedule value > 0 means beam heating is available. If this field is blank, the " +
    "beam heating is always available (as long as primary air is also available).")]
[JsonProperty("heating_availability_schedule_name")]
public string HeatingAvailabilityScheduleName { get; set; } = "";
        

[Description("Name of the air system node for primary supply air entering the air distribution " +
    "unit.")]
[JsonProperty("primary_air_inlet_node_name")]
public string PrimaryAirInletNodeName { get; set; } = "";
        

[Description("Name of the air system node for primary supply air leaving the air distribution u" +
    "nit and entering the zone.")]
[JsonProperty("primary_air_outlet_node_name")]
public string PrimaryAirOutletNodeName { get; set; } = "";
        

[Description("Name of the plant system node for chilled water entering the beam. The two chille" +
    "d water nodes can (only) be omitted to model a two-pipe heating only beam.")]
[JsonProperty("chilled_water_inlet_node_name")]
public string ChilledWaterInletNodeName { get; set; } = "";
        

[Description("Name of the plant system node for chilled water leaving the beam.")]
[JsonProperty("chilled_water_outlet_node_name")]
public string ChilledWaterOutletNodeName { get; set; } = "";
        

[Description("Name of the plant system node for hot water entering the beam. The two hot water " +
    "nodes can (only) be omitted to model a two-pipe cooling-only beam.")]
[JsonProperty("hot_water_inlet_node_name")]
public string HotWaterInletNodeName { get; set; } = "";
        

[Description("Name of the plant system node for hot water leaving the beam.")]
[JsonProperty("hot_water_outlet_node_name")]
public string HotWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("design_primary_air_volume_flow_rate")]
public string DesignPrimaryAirVolumeFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("design_chilled_water_volume_flow_rate")]
public string DesignChilledWaterVolumeFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("design_hot_water_volume_flow_rate")]
public string DesignHotWaterVolumeFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("Sum of the length of all the beam units in the zone represented by this terminal " +
    "unit.")]
[JsonProperty("zone_total_beam_length")]
public string ZoneTotalBeamLength { get; set; } = (System.String)"Autosize";
        

[Description("Primary air supply flow rate normalized by beam length.")]
[JsonProperty("rated_primary_air_flow_rate_per_beam_length")]
public System.Nullable<float> RatedPrimaryAirFlowRatePerBeamLength { get; set; } = (System.Nullable<float>)Single.Parse("0.035", CultureInfo.InvariantCulture);
        

[Description("Sensible cooling capacity per meter of beam length at the rating point.")]
[JsonProperty("beam_rated_cooling_capacity_per_beam_length")]
public System.Nullable<float> BeamRatedCoolingCapacityPerBeamLength { get; set; } = (System.Nullable<float>)Single.Parse("600", CultureInfo.InvariantCulture);
        

[Description("Difference in temperature between the zone air and the entering chilled water at " +
    "the rating point.")]
[JsonProperty("beam_rated_cooling_room_air_chilled_water_temperature_difference")]
public System.Nullable<float> BeamRatedCoolingRoomAirChilledWaterTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("The volume flow rate of chilled water per meter of beam length at the rating poin" +
    "t.")]
[JsonProperty("beam_rated_chilled_water_volume_flow_rate_per_beam_length")]
public System.Nullable<float> BeamRatedChilledWaterVolumeFlowRatePerBeamLength { get; set; } = (System.Nullable<float>)Single.Parse("5E-05", CultureInfo.InvariantCulture);
        

[Description(@"Adjusts beam cooling capacity when the temperature difference between entering water and zone air is different than at the rating point. Single independent variable is the ratio of the current temperature difference divided by the rating point temperature difference. This field is required when beam is connected to a chilled water plant.")]
[JsonProperty("beam_cooling_capacity_temperature_difference_modification_factor_curve_name")]
public string BeamCoolingCapacityTemperatureDifferenceModificationFactorCurveName { get; set; } = "";
        

[Description(@"Adjusts beam cooling capacity when the primary air supply flow rate is different than at the rating point. The single independent variable is the current normalized air flow rate divided by the normalized air flow rate at the rating point. This field is required when beam is connected to a chilled water plant.")]
[JsonProperty("beam_cooling_capacity_air_flow_modification_factor_curve_name")]
public string BeamCoolingCapacityAirFlowModificationFactorCurveName { get; set; } = "";
        

[Description(@"Adjusts beam cooling capacity when the normalized chilled water flow rate is different than at the rating point. The single independent variable is the current normalized chilled water flow rate divided by the normalized chilled water flow rate at the rating point. This field is required when beam is connected to a chilled water plant.")]
[JsonProperty("beam_cooling_capacity_chilled_water_flow_modification_factor_curve_name")]
public string BeamCoolingCapacityChilledWaterFlowModificationFactorCurveName { get; set; } = "";
        

[Description("Sensible heating capacity per meter of beam length at the rating point.")]
[JsonProperty("beam_rated_heating_capacity_per_beam_length")]
public System.Nullable<float> BeamRatedHeatingCapacityPerBeamLength { get; set; } = (System.Nullable<float>)Single.Parse("1500", CultureInfo.InvariantCulture);
        

[Description("Difference in temperature between the zone air and the entering hot water at the " +
    "rating point.")]
[JsonProperty("beam_rated_heating_room_air_hot_water_temperature_difference")]
public System.Nullable<float> BeamRatedHeatingRoomAirHotWaterTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("27.8", CultureInfo.InvariantCulture);
        

[Description("The volume flow rate of hoy water per meter of beam length at the rating point.")]
[JsonProperty("beam_rated_hot_water_volume_flow_rate_per_beam_length")]
public System.Nullable<float> BeamRatedHotWaterVolumeFlowRatePerBeamLength { get; set; } = (System.Nullable<float>)Single.Parse("5E-05", CultureInfo.InvariantCulture);
        

[Description(@"Adjusts beam heating capacity when the temperature difference between entering water and zone air is different than at the rating point. Single independent variable is the ratio of the current temperature difference divided by the rating point temperature difference. This field is required when beam is connected to a hot water plant.")]
[JsonProperty("beam_heating_capacity_temperature_difference_modification_factor_curve_name")]
public string BeamHeatingCapacityTemperatureDifferenceModificationFactorCurveName { get; set; } = "";
        

[Description(@"Adjusts beam heating capacity when the primary air supply flow rate is different than at the rating point. The single independent variable is the current normalized air flow rate divided by the normalized air flow rate at the rating point. This field is required when beam is connected to a hot water plant.")]
[JsonProperty("beam_heating_capacity_air_flow_modification_factor_curve_name")]
public string BeamHeatingCapacityAirFlowModificationFactorCurveName { get; set; } = "";
        

[Description(@"Adjusts beam heating capacity when the normalized hot water flow rate is different than at the rating point. The single independent variable is the current normalized hot water flow rate divided by the normalized hot water flow rate at the rating point. This field is required when beam is connected to a hot water plant.")]
[JsonProperty("beam_heating_capacity_hot_water_flow_modification_factor_curve_name")]
public string BeamHeatingCapacityHotWaterFlowModificationFactorCurveName { get; set; } = "";
    }
    
    [Description("Central air system terminal unit, single duct, constant volume, with cooled beam " +
        "(active or passive).")]
    [JsonObject("AirTerminal:SingleDuct:ConstantVolume:CooledBeam")]
    public class AirTerminal_SingleDuct_ConstantVolume_CooledBeam : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("cooled_beam_type")]
public AirTerminal_SingleDuct_ConstantVolume_CooledBeam_CooledBeamType CooledBeamType { get; set; } = (AirTerminal_SingleDuct_ConstantVolume_CooledBeam_CooledBeamType)Enum.Parse(typeof(AirTerminal_SingleDuct_ConstantVolume_CooledBeam_CooledBeamType), "Active");
        

[JsonProperty("supply_air_inlet_node_name")]
public string SupplyAirInletNodeName { get; set; } = "";
        

[JsonProperty("supply_air_outlet_node_name")]
public string SupplyAirOutletNodeName { get; set; } = "";
        

[JsonProperty("chilled_water_inlet_node_name")]
public string ChilledWaterInletNodeName { get; set; } = "";
        

[JsonProperty("chilled_water_outlet_node_name")]
public string ChilledWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("supply_air_volumetric_flow_rate")]
public string SupplyAirVolumetricFlowRate { get; set; } = (System.String)"Autosize";
        

[JsonProperty("maximum_total_chilled_water_volumetric_flow_rate")]
public string MaximumTotalChilledWaterVolumetricFlowRate { get; set; } = (System.String)"Autosize";
        

[Description("Number of individual beam units in the zone")]
[JsonProperty("number_of_beams")]
public string NumberOfBeams { get; set; } = (System.String)"Autosize";
        

[Description("Length of an individual beam unit")]
[JsonProperty("beam_length")]
public string BeamLength { get; set; } = (System.String)"Autosize";
        

[JsonProperty("design_inlet_water_temperature")]
public System.Nullable<float> DesignInletWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("15", CultureInfo.InvariantCulture);
        

[JsonProperty("design_outlet_water_temperature")]
public System.Nullable<float> DesignOutletWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("17", CultureInfo.InvariantCulture);
        

[JsonProperty("coil_surface_area_per_coil_length")]
public System.Nullable<float> CoilSurfaceAreaPerCoilLength { get; set; } = (System.Nullable<float>)Single.Parse("5.422", CultureInfo.InvariantCulture);
        

[JsonProperty("model_parameter_a")]
public System.Nullable<float> ModelParameterA { get; set; } = (System.Nullable<float>)Single.Parse("15.3", CultureInfo.InvariantCulture);
        

[JsonProperty("model_parameter_n1")]
public System.Nullable<float> ModelParameterN1 { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("model_parameter_n2")]
public System.Nullable<float> ModelParameterN2 { get; set; } = (System.Nullable<float>)Single.Parse("0.84", CultureInfo.InvariantCulture);
        

[JsonProperty("model_parameter_n3")]
public System.Nullable<float> ModelParameterN3 { get; set; } = (System.Nullable<float>)Single.Parse("0.12", CultureInfo.InvariantCulture);
        

[Description("Free area of the coil in plan view per unit beam length")]
[JsonProperty("model_parameter_a0")]
public System.Nullable<float> ModelParameterA0 { get; set; } = (System.Nullable<float>)Single.Parse("0.171", CultureInfo.InvariantCulture);
        

[JsonProperty("model_parameter_k1")]
public System.Nullable<float> ModelParameterK1 { get; set; } = (System.Nullable<float>)Single.Parse("0.0057", CultureInfo.InvariantCulture);
        

[JsonProperty("model_parameter_n")]
public System.Nullable<float> ModelParameterN { get; set; } = (System.Nullable<float>)Single.Parse("0.4", CultureInfo.InvariantCulture);
        

[JsonProperty("coefficient_of_induction_kin")]
public string CoefficientOfInductionKin { get; set; } = (System.String)"Autocalculate";
        

[JsonProperty("leaving_pipe_inside_diameter")]
public System.Nullable<float> LeavingPipeInsideDiameter { get; set; } = (System.Nullable<float>)Single.Parse("0.0145", CultureInfo.InvariantCulture);
    }
    
    public enum AirTerminal_SingleDuct_ConstantVolume_CooledBeam_CooledBeamType
    {
        
        [JsonProperty("Active")]
        Active = 0,
        
        [JsonProperty("Passive")]
        Passive = 1,
    }
    
    [Description(@"The mixer air terminal unit provides a means of supplying central system air to the air inlet or outlet side of a zoneHVAC equipment such as a four pipe fan coil unit. Normally the central air would be ventilation air from a dedicated outdoor air system (DOAS).")]
    [JsonObject("AirTerminal:SingleDuct:Mixer")]
    public class AirTerminal_SingleDuct_Mixer : BHoMObject, IEnergyPlusClass
    {
        

[Description("The type of ZoneHVAC equipment to which this terminal mixer will be connected.")]
[JsonProperty("zonehvac_unit_object_type")]
public AirTerminal_SingleDuct_Mixer_ZonehvacUnitObjectType ZonehvacUnitObjectType { get; set; } = (AirTerminal_SingleDuct_Mixer_ZonehvacUnitObjectType)Enum.Parse(typeof(AirTerminal_SingleDuct_Mixer_ZonehvacUnitObjectType), "AirLoopHVACUnitarySystem");
        

[Description("The name of ZoneHVAC equipment to which this terminal mixer will be connected.")]
[JsonProperty("zonehvac_unit_object_name")]
public string ZonehvacUnitObjectName { get; set; } = "";
        

[Description(@"This is the outlet air node name of the mixer. This will be the inlet air node name of the ZoneHVAC equipment if the connection type in the input field Mixer Connection Type below is InletSide, else this will be an inlet air node name of the conditioned zone if the connection type in the input field Mixer Connection Type below is SupplySide.")]
[JsonProperty("mixer_outlet_node_name")]
public string MixerOutletNodeName { get; set; } = "";
        

[Description("The primary air (treated outdoor air) inlet node name of the mixer. This will be " +
    "an outlet air node name of an AirLoopHVAC:ZoneSplitter or AirLoopHVAC:SupplyPlen" +
    "um providing the connection to the DOA system.")]
[JsonProperty("mixer_primary_air_inlet_node_name")]
public string MixerPrimaryAirInletNodeName { get; set; } = "";
        

[Description(@"The secondary air (recirculating air) inlet node name of the mixer. This will be the outlet air node name of the ZoneHVAC equipment if the connection type in the input field mixer Connection Type below is SupplySide, or else this will be an exhaust air node name of the conditioned zone if the connection type in the input field Mixer Connection Type below is InletSide.")]
[JsonProperty("mixer_secondary_air_inlet_node_name")]
public string MixerSecondaryAirInletNodeName { get; set; } = "";
        

[Description(@"This input field allows user to specify the mixer connection type. Valid choices are InletSide or SupplySide. This is a required input field. If the mixer connection type selected is InletSide, then the mixer is connected on the inlet side of the ZoneHVAC equipment, or else if the mixer connection type selected is SupplySide, then the mixer is connected at the outlet side of the ZoneHVAC equipment.")]
[JsonProperty("mixer_connection_type")]
public AirTerminal_SingleDuct_Mixer_MixerConnectionType MixerConnectionType { get; set; } = (AirTerminal_SingleDuct_Mixer_MixerConnectionType)Enum.Parse(typeof(AirTerminal_SingleDuct_Mixer_MixerConnectionType), "InletSide");
        

[Description(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will adjust flow to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on the current number of occupants in the zone, as for demand controlled ventilation. If this field is blank, then the terminal unit will be controlled using the DesignSpecification:OutdoorAir objec referenced in the Sizing:Zone object.")]
[JsonProperty("design_specification_outdoor_air_object_name")]
public string DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        

[Description("CurrentOccupancy models demand controlled ventilation using the current number of" +
    " people DesignOccupancy uses the total Number of People in the zone and is const" +
    "ant")]
[JsonProperty("per_person_ventilation_rate_mode")]
public AirTerminal_SingleDuct_Mixer_PerPersonVentilationRateMode PerPersonVentilationRateMode { get; set; } = (AirTerminal_SingleDuct_Mixer_PerPersonVentilationRateMode)Enum.Parse(typeof(AirTerminal_SingleDuct_Mixer_PerPersonVentilationRateMode), "CurrentOccupancy");
    }
    
    public enum AirTerminal_SingleDuct_Mixer_ZonehvacUnitObjectType
    {
        
        [JsonProperty("AirLoopHVAC:UnitarySystem")]
        AirLoopHVACUnitarySystem = 0,
        
        [JsonProperty("ZoneHVAC:FourPipeFanCoil")]
        ZoneHVACFourPipeFanCoil = 1,
        
        [JsonProperty("ZoneHVAC:PackagedTerminalAirConditioner")]
        ZoneHVACPackagedTerminalAirConditioner = 2,
        
        [JsonProperty("ZoneHVAC:PackagedTerminalHeatPump")]
        ZoneHVACPackagedTerminalHeatPump = 3,
        
        [JsonProperty("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")]
        ZoneHVACTerminalUnitVariableRefrigerantFlow = 4,
        
        [JsonProperty("ZoneHVAC:UnitVentilator")]
        ZoneHVACUnitVentilator = 5,
        
        [JsonProperty("ZoneHVAC:WaterToAirHeatPump")]
        ZoneHVACWaterToAirHeatPump = 6,
    }
    
    public enum AirTerminal_SingleDuct_Mixer_MixerConnectionType
    {
        
        [JsonProperty("InletSide")]
        InletSide = 0,
        
        [JsonProperty("SupplySide")]
        SupplySide = 1,
    }
    
    public enum AirTerminal_SingleDuct_Mixer_PerPersonVentilationRateMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CurrentOccupancy")]
        CurrentOccupancy = 1,
        
        [JsonProperty("DesignOccupancy")]
        DesignOccupancy = 2,
    }
    
    [Description("Central air system terminal unit, dual duct, constant volume.")]
    [JsonObject("AirTerminal:DualDuct:ConstantVolume")]
    public class AirTerminal_DualDuct_ConstantVolume : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("The outlet node of the terminal unit. This is also the zone inlet node.")]
[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("hot_air_inlet_node_name")]
public string HotAirInletNodeName { get; set; } = "";
        

[JsonProperty("cold_air_inlet_node_name")]
public string ColdAirInletNodeName { get; set; } = "";
        

[JsonProperty("maximum_air_flow_rate")]
public string MaximumAirFlowRate { get; set; } = "";
    }
    
    [Description("Central air system terminal unit, dual duct, variable volume.")]
    [JsonObject("AirTerminal:DualDuct:VAV")]
    public class AirTerminal_DualDuct_VAV : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("The outlet node of the terminal unit. This is also the zone inlet node.")]
[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("hot_air_inlet_node_name")]
public string HotAirInletNodeName { get; set; } = "";
        

[JsonProperty("cold_air_inlet_node_name")]
public string ColdAirInletNodeName { get; set; } = "";
        

[JsonProperty("maximum_damper_air_flow_rate")]
public string MaximumDamperAirFlowRate { get; set; } = "";
        

[Description("fraction of maximum air flow")]
[JsonProperty("zone_minimum_air_flow_fraction")]
public System.Nullable<float> ZoneMinimumAirFlowFraction { get; set; } = (System.Nullable<float>)Single.Parse("0.2", CultureInfo.InvariantCulture);
        

[Description(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will increase flow as needed to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on the current number of occupants in the zone. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate. If this field is blank, then the terminal unit will not be controlled for outdoor air flow.")]
[JsonProperty("design_specification_outdoor_air_object_name")]
public string DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        

[Description(@"This field adjusts the design minimum flow rate by multiplying it using this schedule of fraction values. This field is used with ""Zone Minimum Air Flow Fraction"". Schedule values are fractions 0.0 to 1.0. This field adjusts the minimum airflow turndown below the design minimum air flow and is intended for use with ASHRAE Standard 170. If this field is left blank, then the turndown minimum air flow fraction value is set to 1 and the VAV air terminal uses fixed fraction specified in the field ""Zone Minimum Air Flow Fraction"".")]
[JsonProperty("minimum_air_flow_turndown_schedule_name")]
public string MinimumAirFlowTurndownScheduleName { get; set; } = "";
    }
    
    [Description("Central air system terminal unit, dual duct, variable volume with special control" +
        "s. One VAV duct is controlled to supply ventilation air and the other VAV duct i" +
        "s controlled to meet the zone cooling load.")]
    [JsonObject("AirTerminal:DualDuct:VAV:OutdoorAir")]
    public class AirTerminal_DualDuct_VAV_OutdoorAir : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("The outlet node of the terminal unit. This is also the zone inlet node.")]
[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[JsonProperty("outdoor_air_inlet_node_name")]
public string OutdoorAirInletNodeName { get; set; } = "";
        

[JsonProperty("recirculated_air_inlet_node_name")]
public string RecirculatedAirInletNodeName { get; set; } = "";
        

[Description("If autosized this is the sum of flow needed for cooling and maximum required outd" +
    "oor air")]
[JsonProperty("maximum_terminal_air_flow_rate")]
public string MaximumTerminalAirFlowRate { get; set; } = "";
        

[Description(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will increase flow as needed to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based mode selected in the next field. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate.")]
[JsonProperty("design_specification_outdoor_air_object_name")]
public string DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        

[Description("CurrentOccupancy models demand controlled ventilation using the current number of" +
    " people DesignOccupancy uses the total Number of People in the zone and is const" +
    "ant")]
[JsonProperty("per_person_ventilation_rate_mode")]
public AirTerminal_DualDuct_VAV_OutdoorAir_PerPersonVentilationRateMode PerPersonVentilationRateMode { get; set; } = (AirTerminal_DualDuct_VAV_OutdoorAir_PerPersonVentilationRateMode)Enum.Parse(typeof(AirTerminal_DualDuct_VAV_OutdoorAir_PerPersonVentilationRateMode), "CurrentOccupancy");
    }
    
    public enum AirTerminal_DualDuct_VAV_OutdoorAir_PerPersonVentilationRateMode
    {
        
        [JsonProperty("CurrentOccupancy")]
        CurrentOccupancy = 0,
        
        [JsonProperty("DesignOccupancy")]
        DesignOccupancy = 1,
    }
    
    [Description("Central air system air distribution unit, serves as a wrapper for a specific type" +
        " of air terminal unit. This object is referenced in a ZoneHVAC:EquipmentList.")]
    [JsonObject("ZoneHVAC:AirDistributionUnit")]
    public class ZoneHVAC_AirDistributionUnit : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("air_distribution_unit_outlet_node_name")]
public string AirDistributionUnitOutletNodeName { get; set; } = "";
        

[JsonProperty("air_terminal_object_type")]
public ZoneHVAC_AirDistributionUnit_AirTerminalObjectType AirTerminalObjectType { get; set; } = (ZoneHVAC_AirDistributionUnit_AirTerminalObjectType)Enum.Parse(typeof(ZoneHVAC_AirDistributionUnit_AirTerminalObjectType), "AirTerminalDualDuctConstantVolume");
        

[JsonProperty("air_terminal_name")]
public string AirTerminalName { get; set; } = "";
        

[Description("fraction at system design Flow; leakage Flow constant, leakage fraction varies wi" +
    "th variable system Flow Rate.")]
[JsonProperty("nominal_upstream_leakage_fraction")]
public System.Nullable<float> NominalUpstreamLeakageFraction { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("constant_downstream_leakage_fraction")]
public System.Nullable<float> ConstantDownstreamLeakageFraction { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("This optional field is the name of a DesignSpecification:AirTerminal:Sizing objec" +
    "t which specifies sizing adjustments to be made for this terminal unit.")]
[JsonProperty("design_specification_air_terminal_sizing_object_name")]
public string DesignSpecificationAirTerminalSizingObjectName { get; set; } = "";
    }
    
    public enum ZoneHVAC_AirDistributionUnit_AirTerminalObjectType
    {
        
        [JsonProperty("AirTerminal:DualDuct:ConstantVolume")]
        AirTerminalDualDuctConstantVolume = 0,
        
        [JsonProperty("AirTerminal:DualDuct:VAV")]
        AirTerminalDualDuctVAV = 1,
        
        [JsonProperty("AirTerminal:DualDuct:VAV:OutdoorAir")]
        AirTerminalDualDuctVAVOutdoorAir = 2,
        
        [JsonProperty("AirTerminal:SingleDuct:ConstantVolume:CooledBeam")]
        AirTerminalSingleDuctConstantVolumeCooledBeam = 3,
        
        [JsonProperty("AirTerminal:SingleDuct:ConstantVolume:FourPipeBeam")]
        AirTerminalSingleDuctConstantVolumeFourPipeBeam = 4,
        
        [JsonProperty("AirTerminal:SingleDuct:ConstantVolume:FourPipeInduction")]
        AirTerminalSingleDuctConstantVolumeFourPipeInduction = 5,
        
        [JsonProperty("AirTerminal:SingleDuct:ConstantVolume:NoReheat")]
        AirTerminalSingleDuctConstantVolumeNoReheat = 6,
        
        [JsonProperty("AirTerminal:SingleDuct:ConstantVolume:Reheat")]
        AirTerminalSingleDuctConstantVolumeReheat = 7,
        
        [JsonProperty("AirTerminal:SingleDuct:Mixer")]
        AirTerminalSingleDuctMixer = 8,
        
        [JsonProperty("AirTerminal:SingleDuct:ParallelPIU:Reheat")]
        AirTerminalSingleDuctParallelPIUReheat = 9,
        
        [JsonProperty("AirTerminal:SingleDuct:SeriesPIU:Reheat")]
        AirTerminalSingleDuctSeriesPIUReheat = 10,
        
        [JsonProperty("AirTerminal:SingleDuct:UserDefined")]
        AirTerminalSingleDuctUserDefined = 11,
        
        [JsonProperty("AirTerminal:SingleDuct:VAV:HeatAndCool:NoReheat")]
        AirTerminalSingleDuctVAVHeatAndCoolNoReheat = 12,
        
        [JsonProperty("AirTerminal:SingleDuct:VAV:HeatAndCool:Reheat")]
        AirTerminalSingleDuctVAVHeatAndCoolReheat = 13,
        
        [JsonProperty("AirTerminal:SingleDuct:VAV:NoReheat")]
        AirTerminalSingleDuctVAVNoReheat = 14,
        
        [JsonProperty("AirTerminal:SingleDuct:VAV:Reheat")]
        AirTerminalSingleDuctVAVReheat = 15,
        
        [JsonProperty("AirTerminal:SingleDuct:VAV:Reheat:VariableSpeedFan")]
        AirTerminalSingleDuctVAVReheatVariableSpeedFan = 16,
    }
}
namespace BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Specifies zone relative humidity setpoint schedules for humidifying and dehumidif" +
        "ying.")]
    [JsonObject("ZoneControl:Humidistat")]
    public class ZoneControl_Humidistat : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("hourly schedule values should be in Relative Humidity (percent)")]
[JsonProperty("humidifying_relative_humidity_setpoint_schedule_name")]
public string HumidifyingRelativeHumiditySetpointScheduleName { get; set; } = "";
        

[Description("hourly schedule values should be in Relative Humidity (percent)")]
[JsonProperty("dehumidifying_relative_humidity_setpoint_schedule_name")]
public string DehumidifyingRelativeHumiditySetpointScheduleName { get; set; } = "";
    }
    
    [Description("Define the Thermostat settings for a zone or list of zones. If you use a ZoneList" +
        " in the Zone or ZoneList name field then this definition applies to all the zone" +
        "s in the ZoneList.")]
    [JsonObject("ZoneControl:Thermostat")]
    public class ZoneControl_Thermostat : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_or_zonelist_name")]
public string ZoneOrZonelistName { get; set; } = "";
        

[Description(@"This schedule contains appropriate control types for thermostat. Control types are integers: 0 - Uncontrolled (floating, no thermostat), 1 = ThermostatSetpoint:SingleHeating, 2 = ThermostatSetpoint:SingleCooling, 3 = ThermostatSetpoint:SingleHeatingOrCooling, 4 = ThermostatSetpoint:DualSetpoint")]
[JsonProperty("control_type_schedule_name")]
public string ControlTypeScheduleName { get; set; } = "";
        

[JsonProperty("control_1_object_type")]
public ZoneControl_Thermostat_Control1ObjectType Control1ObjectType { get; set; } = (ZoneControl_Thermostat_Control1ObjectType)Enum.Parse(typeof(ZoneControl_Thermostat_Control1ObjectType), "ThermostatSetpointDualSetpoint");
        

[Description("Control names are names of individual control objects (e.g. ThermostatSetpoint:Si" +
    "ngleHeating) Schedule values in these objects list actual setpoint temperatures " +
    "for the control types")]
[JsonProperty("control_1_name")]
public string Control1Name { get; set; } = "";
        

[JsonProperty("control_2_object_type")]
public ZoneControl_Thermostat_Control2ObjectType Control2ObjectType { get; set; } = (ZoneControl_Thermostat_Control2ObjectType)Enum.Parse(typeof(ZoneControl_Thermostat_Control2ObjectType), "ThermostatSetpointDualSetpoint");
        

[Description("Control names are names of individual control objects (e.g. ThermostatSetpoint:Si" +
    "ngleHeating) Schedule values in these objects list actual setpoint temperatures " +
    "for the control types")]
[JsonProperty("control_2_name")]
public string Control2Name { get; set; } = "";
        

[JsonProperty("control_3_object_type")]
public ZoneControl_Thermostat_Control3ObjectType Control3ObjectType { get; set; } = (ZoneControl_Thermostat_Control3ObjectType)Enum.Parse(typeof(ZoneControl_Thermostat_Control3ObjectType), "ThermostatSetpointDualSetpoint");
        

[Description("Control names are names of individual control objects (e.g. ThermostatSetpoint:Si" +
    "ngleHeating) Schedule values in these objects list actual setpoint temperatures " +
    "for the control types")]
[JsonProperty("control_3_name")]
public string Control3Name { get; set; } = "";
        

[JsonProperty("control_4_object_type")]
public ZoneControl_Thermostat_Control4ObjectType Control4ObjectType { get; set; } = (ZoneControl_Thermostat_Control4ObjectType)Enum.Parse(typeof(ZoneControl_Thermostat_Control4ObjectType), "ThermostatSetpointDualSetpoint");
        

[Description("Control names are names of individual control objects (e.g. ThermostatSetpoint:Si" +
    "ngleHeating) Schedule values in these objects list actual setpoint temperatures " +
    "for the control types")]
[JsonProperty("control_4_name")]
public string Control4Name { get; set; } = "";
        

[Description("This optional choice field provides a temperature difference between cut-out temp" +
    "erature and setpoint. The difference is used to adjust to heating or cooling set" +
    "point based on control types.")]
[JsonProperty("temperature_difference_between_cutout_and_setpoint")]
public System.Nullable<float> TemperatureDifferenceBetweenCutoutAndSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
    }
    
    public enum ZoneControl_Thermostat_Control1ObjectType
    {
        
        [JsonProperty("ThermostatSetpoint:DualSetpoint")]
        ThermostatSetpointDualSetpoint = 0,
        
        [JsonProperty("ThermostatSetpoint:SingleCooling")]
        ThermostatSetpointSingleCooling = 1,
        
        [JsonProperty("ThermostatSetpoint:SingleHeating")]
        ThermostatSetpointSingleHeating = 2,
        
        [JsonProperty("ThermostatSetpoint:SingleHeatingOrCooling")]
        ThermostatSetpointSingleHeatingOrCooling = 3,
    }
    
    public enum ZoneControl_Thermostat_Control2ObjectType
    {
        
        [JsonProperty("ThermostatSetpoint:DualSetpoint")]
        ThermostatSetpointDualSetpoint = 0,
        
        [JsonProperty("ThermostatSetpoint:SingleCooling")]
        ThermostatSetpointSingleCooling = 1,
        
        [JsonProperty("ThermostatSetpoint:SingleHeating")]
        ThermostatSetpointSingleHeating = 2,
        
        [JsonProperty("ThermostatSetpoint:SingleHeatingOrCooling")]
        ThermostatSetpointSingleHeatingOrCooling = 3,
    }
    
    public enum ZoneControl_Thermostat_Control3ObjectType
    {
        
        [JsonProperty("ThermostatSetpoint:DualSetpoint")]
        ThermostatSetpointDualSetpoint = 0,
        
        [JsonProperty("ThermostatSetpoint:SingleCooling")]
        ThermostatSetpointSingleCooling = 1,
        
        [JsonProperty("ThermostatSetpoint:SingleHeating")]
        ThermostatSetpointSingleHeating = 2,
        
        [JsonProperty("ThermostatSetpoint:SingleHeatingOrCooling")]
        ThermostatSetpointSingleHeatingOrCooling = 3,
    }
    
    public enum ZoneControl_Thermostat_Control4ObjectType
    {
        
        [JsonProperty("ThermostatSetpoint:DualSetpoint")]
        ThermostatSetpointDualSetpoint = 0,
        
        [JsonProperty("ThermostatSetpoint:SingleCooling")]
        ThermostatSetpointSingleCooling = 1,
        
        [JsonProperty("ThermostatSetpoint:SingleHeating")]
        ThermostatSetpointSingleHeating = 2,
        
        [JsonProperty("ThermostatSetpoint:SingleHeatingOrCooling")]
        ThermostatSetpointSingleHeatingOrCooling = 3,
    }
    
    [Description("This object can be used with the ZoneList option on a thermostat or with one of t" +
        "he zones on that list (but you won\'t be able to use the object list to pick only" +
        " one of those zones. Thermostat names are <Zone Name> <global Thermostat name> i" +
        "nternally.")]
    [JsonObject("ZoneControl:Thermostat:OperativeTemperature")]
    public class ZoneControl_Thermostat_OperativeTemperature : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the name of a ZoneControl:Thermostat object. This object modifies a ZoneCon" +
    "trol:Thermostat object to add a radiative fraction.")]
[JsonProperty("thermostat_name")]
public string ThermostatName { get; set; } = "";
        

[JsonProperty("radiative_fraction_input_mode")]
public ZoneControl_Thermostat_OperativeTemperature_RadiativeFractionInputMode RadiativeFractionInputMode { get; set; } = (ZoneControl_Thermostat_OperativeTemperature_RadiativeFractionInputMode)Enum.Parse(typeof(ZoneControl_Thermostat_OperativeTemperature_RadiativeFractionInputMode), "Constant");
        

[JsonProperty("fixed_radiative_fraction")]
public System.Nullable<float> FixedRadiativeFraction { get; set; } = null;
        

[Description("Schedule values of 0.0 indicate no operative temperature control")]
[JsonProperty("radiative_fraction_schedule_name")]
public string RadiativeFractionScheduleName { get; set; } = "";
        

[Description("the cooling setpoint temperature schedule of the referenced thermostat will be ad" +
    "justed based on the selected adaptive comfort model type")]
[JsonProperty("adaptive_comfort_model_type")]
public ZoneControl_Thermostat_OperativeTemperature_AdaptiveComfortModelType AdaptiveComfortModelType { get; set; } = (ZoneControl_Thermostat_OperativeTemperature_AdaptiveComfortModelType)Enum.Parse(typeof(ZoneControl_Thermostat_OperativeTemperature_AdaptiveComfortModelType), "None");
    }
    
    public enum ZoneControl_Thermostat_OperativeTemperature_RadiativeFractionInputMode
    {
        
        [JsonProperty("Constant")]
        Constant = 0,
        
        [JsonProperty("Scheduled")]
        Scheduled = 1,
    }
    
    public enum ZoneControl_Thermostat_OperativeTemperature_AdaptiveComfortModelType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("AdaptiveASH5580PercentUpperLine")]
        AdaptiveASH5580PercentUpperLine = 1,
        
        [JsonProperty("AdaptiveASH5590PercentUpperLine")]
        AdaptiveASH5590PercentUpperLine = 2,
        
        [JsonProperty("AdaptiveASH55CentralLine")]
        AdaptiveASH55CentralLine = 3,
        
        [JsonProperty("AdaptiveCEN15251CategoryIIIUpperLine")]
        AdaptiveCEN15251CategoryIIIUpperLine = 4,
        
        [JsonProperty("AdaptiveCEN15251CategoryIIUpperLine")]
        AdaptiveCEN15251CategoryIIUpperLine = 5,
        
        [JsonProperty("AdaptiveCEN15251CategoryIUpperLine")]
        AdaptiveCEN15251CategoryIUpperLine = 6,
        
        [JsonProperty("AdaptiveCEN15251CentralLine")]
        AdaptiveCEN15251CentralLine = 7,
        
        [JsonProperty("None")]
        None = 8,
    }
    
    [Description("If you use a ZoneList in the Zone or ZoneList name field then this definition app" +
        "lies to all the zones in the ZoneList.")]
    [JsonObject("ZoneControl:Thermostat:ThermalComfort")]
    public class ZoneControl_Thermostat_ThermalComfort : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_or_zonelist_name")]
public string ZoneOrZonelistName { get; set; } = "";
        

[Description("The method used to calculate thermal comfort dry-bulb temperature setpoint for mu" +
    "ltiple people objects in a zone")]
[JsonProperty("averaging_method")]
public ZoneControl_Thermostat_ThermalComfort_AveragingMethod AveragingMethod { get; set; } = (ZoneControl_Thermostat_ThermalComfort_AveragingMethod)Enum.Parse(typeof(ZoneControl_Thermostat_ThermalComfort_AveragingMethod), "PeopleAverage");
        

[Description("Used only when Averaging Method = SpecificObject in the previous field.")]
[JsonProperty("specific_people_name")]
public string SpecificPeopleName { get; set; } = "";
        

[JsonProperty("minimum_dry_bulb_temperature_setpoint")]
public System.Nullable<float> MinimumDryBulbTemperatureSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_dry_bulb_temperature_setpoint")]
public System.Nullable<float> MaximumDryBulbTemperatureSetpoint { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[Description(@"The Thermal Comfort Control Type Schedule contains values that are appropriate control types. Thermal Comfort Control types are integers: 0 - Uncontrolled (floating), 1 = ThermostatSetpoint:ThermalComfort:Fanger:SingleHeating 2 = ThermostatSetpoint:ThermalComfort:Fanger:SingleCooling 3 = ThermostatSetpoint:ThermalComfort:Fanger:SingleHeatingOrCooling 4 = ThermostatSetpoint:ThermalComfort:Fanger:DualSetpoint")]
[JsonProperty("thermal_comfort_control_type_schedule_name")]
public string ThermalComfortControlTypeScheduleName { get; set; } = "";
        

[JsonProperty("thermal_comfort_control_1_object_type")]
public ZoneControl_Thermostat_ThermalComfort_ThermalComfortControl1ObjectType ThermalComfortControl1ObjectType { get; set; } = (ZoneControl_Thermostat_ThermalComfort_ThermalComfortControl1ObjectType)Enum.Parse(typeof(ZoneControl_Thermostat_ThermalComfort_ThermalComfortControl1ObjectType), "ThermostatSetpointThermalComfortFangerDualSetpoint");
        

[Description("Control type names are names for individual control type objects. Schedule values" +
    " in these objects list actual setpoint temperatures for the control types")]
[JsonProperty("thermal_comfort_control_1_name")]
public string ThermalComfortControl1Name { get; set; } = "";
        

[JsonProperty("thermal_comfort_control_2_object_type")]
public ZoneControl_Thermostat_ThermalComfort_ThermalComfortControl2ObjectType ThermalComfortControl2ObjectType { get; set; } = (ZoneControl_Thermostat_ThermalComfort_ThermalComfortControl2ObjectType)Enum.Parse(typeof(ZoneControl_Thermostat_ThermalComfort_ThermalComfortControl2ObjectType), "ThermostatSetpointThermalComfortFangerDualSetpoint");
        

[Description("Control Type names are names for individual control type objects. Schedule values" +
    " in these objects list actual setpoint temperatures for the control types")]
[JsonProperty("thermal_comfort_control_2_name")]
public string ThermalComfortControl2Name { get; set; } = "";
        

[JsonProperty("thermal_comfort_control_3_object_type")]
public ZoneControl_Thermostat_ThermalComfort_ThermalComfortControl3ObjectType ThermalComfortControl3ObjectType { get; set; } = (ZoneControl_Thermostat_ThermalComfort_ThermalComfortControl3ObjectType)Enum.Parse(typeof(ZoneControl_Thermostat_ThermalComfort_ThermalComfortControl3ObjectType), "ThermostatSetpointThermalComfortFangerDualSetpoint");
        

[Description("Control type names are names for individual control type objects. Schedule values" +
    " in these objects list actual setpoint temperatures for the control types")]
[JsonProperty("thermal_comfort_control_3_name")]
public string ThermalComfortControl3Name { get; set; } = "";
        

[JsonProperty("thermal_comfort_control_4_object_type")]
public ZoneControl_Thermostat_ThermalComfort_ThermalComfortControl4ObjectType ThermalComfortControl4ObjectType { get; set; } = (ZoneControl_Thermostat_ThermalComfort_ThermalComfortControl4ObjectType)Enum.Parse(typeof(ZoneControl_Thermostat_ThermalComfort_ThermalComfortControl4ObjectType), "ThermostatSetpointThermalComfortFangerDualSetpoint");
        

[Description("Control type names are names for individual control type objects. Schedule values" +
    " in these objects list actual setpoint temperatures for the control types")]
[JsonProperty("thermal_comfort_control_4_name")]
public string ThermalComfortControl4Name { get; set; } = "";
    }
    
    public enum ZoneControl_Thermostat_ThermalComfort_AveragingMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ObjectAverage")]
        ObjectAverage = 1,
        
        [JsonProperty("PeopleAverage")]
        PeopleAverage = 2,
        
        [JsonProperty("SpecificObject")]
        SpecificObject = 3,
    }
    
    public enum ZoneControl_Thermostat_ThermalComfort_ThermalComfortControl1ObjectType
    {
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:DualSetpoint")]
        ThermostatSetpointThermalComfortFangerDualSetpoint = 0,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleCooling")]
        ThermostatSetpointThermalComfortFangerSingleCooling = 1,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeating")]
        ThermostatSetpointThermalComfortFangerSingleHeating = 2,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeatingOrCooling")]
        ThermostatSetpointThermalComfortFangerSingleHeatingOrCooling = 3,
    }
    
    public enum ZoneControl_Thermostat_ThermalComfort_ThermalComfortControl2ObjectType
    {
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:DualSetpoint")]
        ThermostatSetpointThermalComfortFangerDualSetpoint = 0,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleCooling")]
        ThermostatSetpointThermalComfortFangerSingleCooling = 1,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeating")]
        ThermostatSetpointThermalComfortFangerSingleHeating = 2,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeatingOrCooling")]
        ThermostatSetpointThermalComfortFangerSingleHeatingOrCooling = 3,
    }
    
    public enum ZoneControl_Thermostat_ThermalComfort_ThermalComfortControl3ObjectType
    {
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:DualSetpoint")]
        ThermostatSetpointThermalComfortFangerDualSetpoint = 0,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleCooling")]
        ThermostatSetpointThermalComfortFangerSingleCooling = 1,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeating")]
        ThermostatSetpointThermalComfortFangerSingleHeating = 2,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeatingOrCooling")]
        ThermostatSetpointThermalComfortFangerSingleHeatingOrCooling = 3,
    }
    
    public enum ZoneControl_Thermostat_ThermalComfort_ThermalComfortControl4ObjectType
    {
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:DualSetpoint")]
        ThermostatSetpointThermalComfortFangerDualSetpoint = 0,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleCooling")]
        ThermostatSetpointThermalComfortFangerSingleCooling = 1,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeating")]
        ThermostatSetpointThermalComfortFangerSingleHeating = 2,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeatingOrCooling")]
        ThermostatSetpointThermalComfortFangerSingleHeatingOrCooling = 3,
    }
    
    [Description("This object modifies a ZoneControl:Thermostat object to effect temperature contro" +
        "l based on zone air humidity conditions.")]
    [JsonObject("ZoneControl:Thermostat:TemperatureAndHumidity")]
    public class ZoneControl_Thermostat_TemperatureAndHumidity : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Enter the name of a ZoneControl:Thermostat object whose operation is to be modified to effect temperature control based on zone air humidity conditions. If the ZoneControl: Thermostat object references a ZoneList, simply enter the name of the ZoneControl:Thermostat object and this temperature and humidity thermostat control will be applied to all zones in the ZoneList. If the ZoneControl:Thermostat object references a ZoneList but it is desired that only a single zone within the ZoneList be controlled based on temperature and humidity control, then the name to be put here is <Zone Name> <Thermostat Name> where the Thermostat Name is the the name of the ZoneControl:Thermostat object.")]
[JsonProperty("thermostat_name")]
public string ThermostatName { get; set; } = "";
        

[Description("Schedule values should be in Relative Humidity (percent)")]
[JsonProperty("dehumidifying_relative_humidity_setpoint_schedule_name")]
public string DehumidifyingRelativeHumiditySetpointScheduleName { get; set; } = "";
        

[JsonProperty("dehumidification_control_type")]
public ZoneControl_Thermostat_TemperatureAndHumidity_DehumidificationControlType DehumidificationControlType { get; set; } = (ZoneControl_Thermostat_TemperatureAndHumidity_DehumidificationControlType)Enum.Parse(typeof(ZoneControl_Thermostat_TemperatureAndHumidity_DehumidificationControlType), "Overcool");
        

[JsonProperty("overcool_range_input_method")]
public ZoneControl_Thermostat_TemperatureAndHumidity_OvercoolRangeInputMethod OvercoolRangeInputMethod { get; set; } = (ZoneControl_Thermostat_TemperatureAndHumidity_OvercoolRangeInputMethod)Enum.Parse(typeof(ZoneControl_Thermostat_TemperatureAndHumidity_OvercoolRangeInputMethod), "Constant");
        

[Description("Maximum Overcool temperature range for cooling setpoint reduction. Used with Dehu" +
    "midification Control Type = Overcool. A value of 0.0 indicates no zone temperatu" +
    "re overcooling will be provided to gain additional dehumidification.")]
[JsonProperty("overcool_constant_range")]
public System.Nullable<float> OvercoolConstantRange { get; set; } = (System.Nullable<float>)Single.Parse("1.7", CultureInfo.InvariantCulture);
        

[Description("Schedule values of 0.0 indicates no zone temperature overcooling will be provided" +
    " to gain additional dehumidification. Schedule values should be >= 0 and <= 3 (d" +
    "eltaC).")]
[JsonProperty("overcool_range_schedule_name")]
public string OvercoolRangeScheduleName { get; set; } = "";
        

[Description(@"The value of this input field is used to adjust the cooling setpoint temperature (established by the associated ZoneControl:Thermostat object) downward based on the difference between the zone air relative humidity level and the dehumidifying relative humidity setpoint.")]
[JsonProperty("overcool_control_ratio")]
public System.Nullable<float> OvercoolControlRatio { get; set; } = (System.Nullable<float>)Single.Parse("3.6", CultureInfo.InvariantCulture);
    }
    
    public enum ZoneControl_Thermostat_TemperatureAndHumidity_DehumidificationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("Overcool")]
        Overcool = 2,
    }
    
    public enum ZoneControl_Thermostat_TemperatureAndHumidity_OvercoolRangeInputMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Constant")]
        Constant = 1,
        
        [JsonProperty("Scheduled")]
        Scheduled = 2,
    }
    
    [Description("Used for a heating only thermostat. The setpoint can be scheduled and varied thro" +
        "ughout the simulation but only heating is allowed with this control type.")]
    [JsonObject("ThermostatSetpoint:SingleHeating")]
    public class ThermostatSetpoint_SingleHeating : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("setpoint_temperature_schedule_name")]
public string SetpointTemperatureScheduleName { get; set; } = "";
    }
    
    [Description("Used for a cooling only thermostat. The setpoint can be scheduled and varied thro" +
        "ughout the simulation but only cooling is allowed.")]
    [JsonObject("ThermostatSetpoint:SingleCooling")]
    public class ThermostatSetpoint_SingleCooling : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("setpoint_temperature_schedule_name")]
public string SetpointTemperatureScheduleName { get; set; } = "";
    }
    
    [Description("Used for a heating and cooling thermostat with a single setpoint. The setpoint ca" +
        "n be scheduled and varied throughout the simulation for both heating and cooling" +
        ".")]
    [JsonObject("ThermostatSetpoint:SingleHeatingOrCooling")]
    public class ThermostatSetpoint_SingleHeatingOrCooling : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("setpoint_temperature_schedule_name")]
public string SetpointTemperatureScheduleName { get; set; } = "";
    }
    
    [Description("Used for a heating and cooling thermostat with dual setpoints. The setpoints can " +
        "be scheduled and varied throughout the simulation for both heating and cooling.")]
    [JsonObject("ThermostatSetpoint:DualSetpoint")]
    public class ThermostatSetpoint_DualSetpoint : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("heating_setpoint_temperature_schedule_name")]
public string HeatingSetpointTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("cooling_setpoint_temperature_schedule_name")]
public string CoolingSetpointTemperatureScheduleName { get; set; } = "";
    }
    
    [Description("Used for heating only thermal comfort control. The PMV setpoint can be scheduled " +
        "and varied throughout the simulation but only heating is allowed with this contr" +
        "ol type.")]
    [JsonObject("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeating")]
    public class ThermostatSetpoint_ThermalComfort_Fanger_SingleHeating : BHoMObject, IEnergyPlusClass
    {
        

[Description("Schedule values should be Predicted Mean Vote (PMV)")]
[JsonProperty("fanger_thermal_comfort_schedule_name")]
public string FangerThermalComfortScheduleName { get; set; } = "";
    }
    
    [Description("Used for cooling only thermal comfort control. The PMV setpoint can be scheduled " +
        "and varied throughout the simulation but only cooling is allowed with this contr" +
        "ol type.")]
    [JsonObject("ThermostatSetpoint:ThermalComfort:Fanger:SingleCooling")]
    public class ThermostatSetpoint_ThermalComfort_Fanger_SingleCooling : BHoMObject, IEnergyPlusClass
    {
        

[Description("Schedule values should be Predicted Mean Vote (PMV)")]
[JsonProperty("fanger_thermal_comfort_schedule_name")]
public string FangerThermalComfortScheduleName { get; set; } = "";
    }
    
    [Description("Used for heating and cooling thermal comfort control with a single setpoint. The " +
        "PMV setpoint can be scheduled and varied throughout the simulation for both heat" +
        "ing and cooling.")]
    [JsonObject("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeatingOrCooling")]
    public class ThermostatSetpoint_ThermalComfort_Fanger_SingleHeatingOrCooling : BHoMObject, IEnergyPlusClass
    {
        

[Description("Schedule values should be Predicted Mean Vote (PMV)")]
[JsonProperty("fanger_thermal_comfort_schedule_name")]
public string FangerThermalComfortScheduleName { get; set; } = "";
    }
    
    [Description("Used for heating and cooling thermal comfort control with dual setpoints. The PMV" +
        " setpoints can be scheduled and varied throughout the simulation for both heatin" +
        "g and cooling.")]
    [JsonObject("ThermostatSetpoint:ThermalComfort:Fanger:DualSetpoint")]
    public class ThermostatSetpoint_ThermalComfort_Fanger_DualSetpoint : BHoMObject, IEnergyPlusClass
    {
        

[Description("Schedule values should be Predicted Mean Vote (PMV)")]
[JsonProperty("fanger_thermal_comfort_heating_schedule_name")]
public string FangerThermalComfortHeatingScheduleName { get; set; } = "";
        

[Description("Schedule values should be Predicted Mean Vote (PMV)")]
[JsonProperty("fanger_thermal_comfort_cooling_schedule_name")]
public string FangerThermalComfortCoolingScheduleName { get; set; } = "";
    }
    
    [Description("Define the Thermostat StagedDualSetpoint settings for a zone or list of zones. If" +
        " you use a ZoneList in the Zone or ZoneList name field then this definition appl" +
        "ies to all the zones in the ZoneList.")]
    [JsonObject("ZoneControl:Thermostat:StagedDualSetpoint")]
    public class ZoneControl_Thermostat_StagedDualSetpoint : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_or_zonelist_name")]
public string ZoneOrZonelistName { get; set; } = "";
        

[Description("Enter the number of the following sets of data for heating temperature offset")]
[JsonProperty("number_of_heating_stages")]
public System.Nullable<float> NumberOfHeatingStages { get; set; } = null;
        

[JsonProperty("heating_temperature_setpoint_schedule_name")]
public string HeatingTemperatureSetpointScheduleName { get; set; } = "";
        

[JsonProperty("heating_throttling_temperature_range")]
public System.Nullable<float> HeatingThrottlingTemperatureRange { get; set; } = (System.Nullable<float>)Single.Parse("1.1", CultureInfo.InvariantCulture);
        

[Description(@"The heating temperature offset is used to determine heating stage number for multi stage equipment. When the temperature difference of the heating setpoint and the controlled zone temperature at previous time step is less than Stage 1 value and greater than Stage 2 value, the stage number is 1.")]
[JsonProperty("stage_1_heating_temperature_offset")]
public System.Nullable<float> Stage1HeatingTemperatureOffset { get; set; } = null;
        

[Description(@"The heating temperature offset is used to determine heating stage number for multi stage equipment. When the temperature difference of the heating setpoint and the controlled zone temperature at previous time step is less than Stage 2 value and greater than Stage 3 value, the stage number is 2. The value of this field has to be less the value at the previous field.")]
[JsonProperty("stage_2_heating_temperature_offset")]
public System.Nullable<float> Stage2HeatingTemperatureOffset { get; set; } = null;
        

[Description(@"The heating temperature offset is used to determine heating stage number for multi stage equipment. When the temperature difference of the heating setpoint and the controlled zone temperature at previous time step is less than Stage 3 value and greater than Stage 4 value, the stage number is 3. The value of this field has to be less the value at the previous field.")]
[JsonProperty("stage_3_heating_temperature_offset")]
public System.Nullable<float> Stage3HeatingTemperatureOffset { get; set; } = null;
        

[Description(@"The heating temperature offset is used to determine heating stage number for multi stage equipment. When the temperature difference of the heating setpoint and the controlled zone temperature at previous time step is less than Stage 4 value, the stage number is 4. The value of this field has to be less the value at the previous field.")]
[JsonProperty("stage_4_heating_temperature_offset")]
public System.Nullable<float> Stage4HeatingTemperatureOffset { get; set; } = null;
        

[Description("Enter the number of the following sets of data for cooling temperature offset")]
[JsonProperty("number_of_cooling_stages")]
public System.Nullable<float> NumberOfCoolingStages { get; set; } = null;
        

[JsonProperty("cooling_temperature_setpoint_base_schedule_name")]
public string CoolingTemperatureSetpointBaseScheduleName { get; set; } = "";
        

[JsonProperty("cooling_throttling_temperature_range")]
public System.Nullable<float> CoolingThrottlingTemperatureRange { get; set; } = (System.Nullable<float>)Single.Parse("1.1", CultureInfo.InvariantCulture);
        

[Description(@"The cooling temperature offset is used to determine cooling stage number for multi stage equipment. When the temperature difference of the cooling setpoint and the controlled zone temperature at previous time step is greater than Stage 1 value and less than Stage 2 value, the stage number is 1.")]
[JsonProperty("stage_1_cooling_temperature_offset")]
public System.Nullable<float> Stage1CoolingTemperatureOffset { get; set; } = null;
        

[Description(@"The cooling temperature offset is used to determine cooling stage number for multi stage equipment. When the temperature difference of the cooling setpoint and the controlled zone temperature at previous time step is greater than Stage 2 value and less than Stage 3 value, the stage number is 2. The value of this field has to be greater than the value at the previous field.")]
[JsonProperty("stage_2_cooling_temperature_offset")]
public System.Nullable<float> Stage2CoolingTemperatureOffset { get; set; } = null;
        

[Description(@"The cooling temperature offset is used to determine cooling stage number for multi stage equipment. When the temperature difference of the cooling setpoint and the controlled zone temperature at previous time step is greater than Stage 3 value and less than Stage 4 value, the stage number is 3. The value of this field has to be greater than the value at the previous field.")]
[JsonProperty("stage_3_cooling_temperature_offset")]
public System.Nullable<float> Stage3CoolingTemperatureOffset { get; set; } = null;
        

[Description(@"The cooling temperature offset is used to determine cooling stage number for multi stage equipment. When the temperature difference of the cooling setpoint and the controlled zone temperature at previous time step is greater than Stage 4 value, the stage number is 4. The value of this field has to be greater than the value at the previous field.")]
[JsonProperty("stage_4_cooling_temperature_offset")]
public System.Nullable<float> Stage4CoolingTemperatureOffset { get; set; } = null;
    }
    
    [Description("Used to control a zone to a specified indoor level of CO2 or generic contaminants" +
        ", or to specify minimum CO2 concentration schedule name for a zone.")]
    [JsonObject("ZoneControl:ContaminantController")]
    public class ZoneControl_ContaminantController : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Availability schedule name for CO2 controller. Schedule value > 0 means the CO2 c" +
    "ontroller is enabled. If this field is blank, then CO2 controller is always enab" +
    "led.")]
[JsonProperty("carbon_dioxide_control_availability_schedule_name")]
public string CarbonDioxideControlAvailabilityScheduleName { get; set; } = "";
        

[Description("Schedule values should be carbon dioxide concentration in parts per million (ppm)" +
    "")]
[JsonProperty("carbon_dioxide_setpoint_schedule_name")]
public string CarbonDioxideSetpointScheduleName { get; set; } = "";
        

[Description(@"Schedule values should be carbon dioxide concentration in parts per million (ppm) This field is used when the field System Outdoor Air Method = ProportionalControlBasedOnOccupancySchedule or ProportionalControlBasedOnDesignOccupancy, or ProportionalControlBasedOnDesignOARate in Controller:MechanicalVentilation")]
[JsonProperty("minimum_carbon_dioxide_concentration_schedule_name")]
public string MinimumCarbonDioxideConcentrationScheduleName { get; set; } = "";
        

[Description(@"Schedule values should be carbon dioxide concentration in parts per million (ppm) This field is used when the field System Outdoor Air Method = ProportionalControlBasedOnOccupancySchedule or ProportionalControlBasedOnDesignOccupancy or ProportionalControlBasedOnDesignOARate.")]
[JsonProperty("maximum_carbon_dioxide_concentration_schedule_name")]
public string MaximumCarbonDioxideConcentrationScheduleName { get; set; } = "";
        

[Description("Availability schedule name for generic contaminant controller. Schedule value > 0" +
    " means the generic contaminant controller is enabled. If this field is blank, th" +
    "en generic contaminant controller is always enabled.")]
[JsonProperty("generic_contaminant_control_availability_schedule_name")]
public string GenericContaminantControlAvailabilityScheduleName { get; set; } = "";
        

[Description("Schedule values should be generic contaminant concentration in parts per million " +
    "(ppm) This field is used when the field System Outdoor Air Method = IndoorAirQua" +
    "lityProcedureGenericContaminant in Controller:MechanicalVentilation")]
[JsonProperty("generic_contaminant_setpoint_schedule_name")]
public string GenericContaminantSetpointScheduleName { get; set; } = "";
    }
}
namespace BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"List equipment in simulation order. Note that an ZoneHVAC:AirDistributionUnit object must be listed in this statement if there is a forced air system serving the zone from the air loop. Equipment is simulated in the order specified by Zone Equipment Cooling Sequence and Zone Equipment Heating or No-Load Sequence, depending on the thermostat request. For equipment of similar type, assign sequence 1 to the first system intended to serve that type of load. For situations where one or more equipment types has limited capacity or limited control, order the sequence so that the most controllable piece of equipment runs last. For example, with a dedicated outdoor air system (DOAS), the air terminal for the DOAS should be assigned Heating Sequence = 1 and Cooling Sequence = 1. Any other equipment should be assigned sequence 2 or higher so that it will see the net load after the DOAS air is added to the zone.")]
    [JsonObject("ZoneHVAC:EquipmentList")]
    public class ZoneHVAC_EquipmentList : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("load_distribution_scheme")]
public ZoneHVAC_EquipmentList_LoadDistributionScheme LoadDistributionScheme { get; set; } = (ZoneHVAC_EquipmentList_LoadDistributionScheme)Enum.Parse(typeof(ZoneHVAC_EquipmentList_LoadDistributionScheme), "SequentialLoad");
        

[JsonProperty("equipment")]
public string Equipment { get; set; } = "";
    }
    
    public enum ZoneHVAC_EquipmentList_LoadDistributionScheme
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SequentialLoad")]
        SequentialLoad = 1,
        
        [JsonProperty("SequentialUniformPLR")]
        SequentialUniformPLR = 2,
        
        [JsonProperty("UniformLoad")]
        UniformLoad = 3,
        
        [JsonProperty("UniformPLR")]
        UniformPLR = 4,
    }
    
    [Description("Specifies the HVAC equipment connections for a zone. Node names are specified for" +
        " the zone air node, air inlet nodes, air exhaust nodes, and the air return node." +
        " A zone equipment list is referenced which lists all HVAC equipment connected to" +
        " the zone.")]
    [JsonObject("ZoneHVAC:EquipmentConnections")]
    public class ZoneHVAC_EquipmentConnections : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Enter the name of a ZoneHVAC:EquipmentList object.")]
[JsonProperty("zone_conditioning_equipment_list_name")]
public string ZoneConditioningEquipmentListName { get; set; } = "";
        

[JsonProperty("zone_air_inlet_node_or_nodelist_name")]
public string ZoneAirInletNodeOrNodelistName { get; set; } = "";
        

[JsonProperty("zone_air_exhaust_node_or_nodelist_name")]
public string ZoneAirExhaustNodeOrNodelistName { get; set; } = "";
        

[JsonProperty("zone_air_node_name")]
public string ZoneAirNodeName { get; set; } = "";
        

[JsonProperty("zone_return_air_node_or_nodelist_name")]
public string ZoneReturnAirNodeOrNodelistName { get; set; } = "";
        

[Description("This schedule is multiplied times the base return air flow rate. If this field is" +
    " left blank, the schedule defaults to 1.0 at all times.")]
[JsonProperty("zone_return_air_node_1_flow_rate_fraction_schedule_name")]
public string ZoneReturnAirNode1FlowRateFractionScheduleName { get; set; } = "";
        

[Description(@"The optional basis node(s) used to calculate the base return air flow rate for the first return air node in this zone. The return air flow rate is the sum of the flow rates at the basis node(s) multiplied by the Zone Return Air Flow Rate Fraction Schedule. If this  field is blank, then the base return air flow rate is the total supply inlet flow rate to the zone less the total exhaust node flow rate from the zone.")]
[JsonProperty("zone_return_air_node_1_flow_rate_basis_node_or_nodelist_name")]
public string ZoneReturnAirNode1FlowRateBasisNodeOrNodelistName { get; set; } = "";
    }
}
namespace BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Ideal system used to calculate loads without modeling a full HVAC system. All that is required for the ideal system are zone controls, zone equipment configurations, and the ideal loads system component. This component can be thought of as an ideal unit that mixes zone air with the specified amount of outdoor air and then adds or removes heat and moisture at 100% efficiency in order to meet the specified controls. Energy use is reported as DistrictHeating and DistrictCooling.")]
    [JsonObject("ZoneHVAC:IdealLoadsAirSystem")]
    public class ZoneHVAC_IdealLoadsAirSystem : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Must match a zone air inlet node name.")]
[JsonProperty("zone_supply_air_node_name")]
public string ZoneSupplyAirNodeName { get; set; } = "";
        

[Description("Should match a zone air exhaust node name. This field is optional, but is require" +
    "d if this this object is used with other forced air equipment.")]
[JsonProperty("zone_exhaust_air_node_name")]
public string ZoneExhaustAirNodeName { get; set; } = "";
        

[Description(@"This field is only required when the Ideal Loads Air System is connected to an AirloopHVAC:ZoneReturnPlenum, otherwise leave this field blank. When connected to a plenum the return plenum Outlet Node Name (or Induced Air Outlet Node Name when connecting multiple ideal loads air sytems) is entered here. The two ideal loads air system node name fields described above, the Zone Supply Air Node Name and the Zone Exhaust Air Node Name must also be entered. The Zone Supply Air Node Name must match a zone inlet air node name for the zone where this Ideal Loads Air System is connected. The Zone Exhaust Air Node Name must match an inlet air node name of an AirloopHVAC:ReturnAirPlenum object.")]
[JsonProperty("system_inlet_air_node_name")]
public string SystemInletAirNodeName { get; set; } = "";
        

[JsonProperty("maximum_heating_supply_air_temperature")]
public System.Nullable<float> MaximumHeatingSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("50", CultureInfo.InvariantCulture);
        

[JsonProperty("minimum_cooling_supply_air_temperature")]
public System.Nullable<float> MinimumCoolingSupplyAirTemperature { get; set; } = (System.Nullable<float>)Single.Parse("13", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_heating_supply_air_humidity_ratio")]
public System.Nullable<float> MaximumHeatingSupplyAirHumidityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.0156", CultureInfo.InvariantCulture);
        

[JsonProperty("minimum_cooling_supply_air_humidity_ratio")]
public System.Nullable<float> MinimumCoolingSupplyAirHumidityRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.0077", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_limit")]
public ZoneHVAC_IdealLoadsAirSystem_HeatingLimit HeatingLimit { get; set; } = (ZoneHVAC_IdealLoadsAirSystem_HeatingLimit)Enum.Parse(typeof(ZoneHVAC_IdealLoadsAirSystem_HeatingLimit), "NoLimit");
        

[Description("This field is ignored if Heating Limit = NoLimit If this field is blank, there is" +
    " no limit.")]
[JsonProperty("maximum_heating_air_flow_rate")]
public string MaximumHeatingAirFlowRate { get; set; } = "";
        

[Description("This field is ignored if Heating Limit = NoLimit If this field is blank, there is" +
    " no limit.")]
[JsonProperty("maximum_sensible_heating_capacity")]
public string MaximumSensibleHeatingCapacity { get; set; } = "";
        

[JsonProperty("cooling_limit")]
public ZoneHVAC_IdealLoadsAirSystem_CoolingLimit CoolingLimit { get; set; } = (ZoneHVAC_IdealLoadsAirSystem_CoolingLimit)Enum.Parse(typeof(ZoneHVAC_IdealLoadsAirSystem_CoolingLimit), "NoLimit");
        

[Description("This field is ignored if Cooling Limit = NoLimit This field is required if Outdoo" +
    "r Air Economizer Type is anything other than NoEconomizer.")]
[JsonProperty("maximum_cooling_air_flow_rate")]
public string MaximumCoolingAirFlowRate { get; set; } = "";
        

[Description("This field is ignored if Cooling Limit = NoLimit")]
[JsonProperty("maximum_total_cooling_capacity")]
public string MaximumTotalCoolingCapacity { get; set; } = "";
        

[Description("If blank, heating is always available.")]
[JsonProperty("heating_availability_schedule_name")]
public string HeatingAvailabilityScheduleName { get; set; } = "";
        

[Description("If blank, cooling is always available.")]
[JsonProperty("cooling_availability_schedule_name")]
public string CoolingAvailabilityScheduleName { get; set; } = "";
        

[Description(@"ConstantSensibleHeatRatio means that the ideal loads system will be controlled to meet the sensible cooling load, and the latent cooling rate will be computed using a constant sensible heat ratio (SHR) Humidistat means that there is a ZoneControl:Humidistat for this zone and the ideal loads system will attempt to satisfy the humidistat. None means that there is no dehumidification. ConstantSupplyHumidityRatio means that during cooling the supply air will always be at the Minimum Cooling Supply Humidity Ratio.")]
[JsonProperty("dehumidification_control_type")]
public ZoneHVAC_IdealLoadsAirSystem_DehumidificationControlType DehumidificationControlType { get; set; } = (ZoneHVAC_IdealLoadsAirSystem_DehumidificationControlType)Enum.Parse(typeof(ZoneHVAC_IdealLoadsAirSystem_DehumidificationControlType), "ConstantSensibleHeatRatio");
        

[Description("This field is applicable only when Dehumidification Control Type is ConstantSensi" +
    "bleHeatRatio")]
[JsonProperty("cooling_sensible_heat_ratio")]
public System.Nullable<float> CoolingSensibleHeatRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[Description(@"None means that there is no humidification. Humidistat means that there is a ZoneControl:Humidistat for this zone and the ideal loads system will attempt to satisfy the humidistat. ConstantSupplyHumidityRatio means that during heating the supply air will always be at the Maximum Heating Supply Humidity Ratio.")]
[JsonProperty("humidification_control_type")]
public ZoneHVAC_IdealLoadsAirSystem_HumidificationControlType HumidificationControlType { get; set; } = (ZoneHVAC_IdealLoadsAirSystem_HumidificationControlType)Enum.Parse(typeof(ZoneHVAC_IdealLoadsAirSystem_HumidificationControlType), "None");
        

[Description(@"When the name of a DesignSpecification:OutdoorAir object is entered, the minimum outdoor air flow rate will be computed using these specifications. The outdoor air flow rate will also be affected by the next two fields. If this field is blank, there will be no outdoor air and the remaining fields will be ignored.")]
[JsonProperty("design_specification_outdoor_air_object_name")]
public string DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        

[Description("This field is required if the system provides outdoor air Enter the name of an ou" +
    "tdoor air node. This node name is also specified in an OutdoorAir:Node or Outdoo" +
    "rAir:NodeList object.")]
[JsonProperty("outdoor_air_inlet_node_name")]
public string OutdoorAirInletNodeName { get; set; } = "";
        

[Description(@"This field controls how the minimum outdoor air flow rate is calculated. None means that design occupancy will be used to compute the minimum outdoor air flow rate OccupancySchedule means that current occupancy level will be used. CO2Setpoint means that the design occupancy will be used to compute the minimum outdoor air flow rate and the outdoor air flow rate may be increased if necessary to maintain the indoor air carbon dioxide setpoint defined in a ZoneControl:ContaminantController object.")]
[JsonProperty("demand_controlled_ventilation_type")]
public ZoneHVAC_IdealLoadsAirSystem_DemandControlledVentilationType DemandControlledVentilationType { get; set; } = (ZoneHVAC_IdealLoadsAirSystem_DemandControlledVentilationType)Enum.Parse(typeof(ZoneHVAC_IdealLoadsAirSystem_DemandControlledVentilationType), "None");
        

[Description("DifferentialDryBulb and DifferentialEnthalpy will increase the outdoor air flow r" +
    "ate when there is a cooling load and the outdoor air temperature or enthalpy is " +
    "below the zone exhaust air temperature or enthalpy.")]
[JsonProperty("outdoor_air_economizer_type")]
public ZoneHVAC_IdealLoadsAirSystem_OutdoorAirEconomizerType OutdoorAirEconomizerType { get; set; } = (ZoneHVAC_IdealLoadsAirSystem_OutdoorAirEconomizerType)Enum.Parse(typeof(ZoneHVAC_IdealLoadsAirSystem_OutdoorAirEconomizerType), "NoEconomizer");
        

[JsonProperty("heat_recovery_type")]
public ZoneHVAC_IdealLoadsAirSystem_HeatRecoveryType HeatRecoveryType { get; set; } = (ZoneHVAC_IdealLoadsAirSystem_HeatRecoveryType)Enum.Parse(typeof(ZoneHVAC_IdealLoadsAirSystem_HeatRecoveryType), "None");
        

[JsonProperty("sensible_heat_recovery_effectiveness")]
public System.Nullable<float> SensibleHeatRecoveryEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[Description("Applicable only if Heat Recovery Type is Enthalpy.")]
[JsonProperty("latent_heat_recovery_effectiveness")]
public System.Nullable<float> LatentHeatRecoveryEffectiveness { get; set; } = (System.Nullable<float>)Single.Parse("0.65", CultureInfo.InvariantCulture);
        

[Description("Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
    }
    
    public enum ZoneHVAC_IdealLoadsAirSystem_HeatingLimit
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LimitCapacity")]
        LimitCapacity = 1,
        
        [JsonProperty("LimitFlowRate")]
        LimitFlowRate = 2,
        
        [JsonProperty("LimitFlowRateAndCapacity")]
        LimitFlowRateAndCapacity = 3,
        
        [JsonProperty("NoLimit")]
        NoLimit = 4,
    }
    
    public enum ZoneHVAC_IdealLoadsAirSystem_CoolingLimit
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("LimitCapacity")]
        LimitCapacity = 1,
        
        [JsonProperty("LimitFlowRate")]
        LimitFlowRate = 2,
        
        [JsonProperty("LimitFlowRateAndCapacity")]
        LimitFlowRateAndCapacity = 3,
        
        [JsonProperty("NoLimit")]
        NoLimit = 4,
    }
    
    public enum ZoneHVAC_IdealLoadsAirSystem_DehumidificationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantSensibleHeatRatio")]
        ConstantSensibleHeatRatio = 1,
        
        [JsonProperty("ConstantSupplyHumidityRatio")]
        ConstantSupplyHumidityRatio = 2,
        
        [JsonProperty("Humidistat")]
        Humidistat = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum ZoneHVAC_IdealLoadsAirSystem_HumidificationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConstantSupplyHumidityRatio")]
        ConstantSupplyHumidityRatio = 1,
        
        [JsonProperty("Humidistat")]
        Humidistat = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum ZoneHVAC_IdealLoadsAirSystem_DemandControlledVentilationType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CO2Setpoint")]
        CO2Setpoint = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("OccupancySchedule")]
        OccupancySchedule = 3,
    }
    
    public enum ZoneHVAC_IdealLoadsAirSystem_OutdoorAirEconomizerType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("DifferentialDryBulb")]
        DifferentialDryBulb = 1,
        
        [JsonProperty("DifferentialEnthalpy")]
        DifferentialEnthalpy = 2,
        
        [JsonProperty("NoEconomizer")]
        NoEconomizer = 3,
    }
    
    public enum ZoneHVAC_IdealLoadsAirSystem_HeatRecoveryType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Sensible")]
        Sensible = 3,
    }
    
    [Description("Four pipe fan coil system. Forced-convection hydronic heating-cooling unit with s" +
        "upply fan, hot water heating coil, chilled water cooling coil, and fixed-positio" +
        "n outdoor air mixer.")]
    [JsonObject("ZoneHVAC:FourPipeFanCoil")]
    public class ZoneHVAC_FourPipeFanCoil : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("capacity_control_method")]
public ZoneHVAC_FourPipeFanCoil_CapacityControlMethod CapacityControlMethod { get; set; } = (ZoneHVAC_FourPipeFanCoil_CapacityControlMethod)Enum.Parse(typeof(ZoneHVAC_FourPipeFanCoil_CapacityControlMethod), "ASHRAE90VariableFan");
        

[JsonProperty("maximum_supply_air_flow_rate")]
public string MaximumSupplyAirFlowRate { get; set; } = "";
        

[JsonProperty("low_speed_supply_air_flow_ratio")]
public System.Nullable<float> LowSpeedSupplyAirFlowRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.33", CultureInfo.InvariantCulture);
        

[Description("Medium Speed Supply Air Flow Ratio should be greater than Low Speed Supply Air Fl" +
    "ow Ratio")]
[JsonProperty("medium_speed_supply_air_flow_ratio")]
public System.Nullable<float> MediumSpeedSupplyAirFlowRatio { get; set; } = (System.Nullable<float>)Single.Parse("0.66", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string MaximumOutdoorAirFlowRate { get; set; } = "";
        

[Description("Value of schedule multiplies maximum outdoor air flow rate")]
[JsonProperty("outdoor_air_schedule_name")]
public string OutdoorAirScheduleName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Currently only one type OutdoorAir:Mixer object is available. This field should b" +
    "e left blank if the FanCoil is connected to central dedicated outdoor air throug" +
    "h an AirTerminal:SingleDuct:Mixer object.")]
[JsonProperty("outdoor_air_mixer_object_type")]
public ZoneHVAC_FourPipeFanCoil_OutdoorAirMixerObjectType OutdoorAirMixerObjectType { get; set; } = (ZoneHVAC_FourPipeFanCoil_OutdoorAirMixerObjectType)Enum.Parse(typeof(ZoneHVAC_FourPipeFanCoil_OutdoorAirMixerObjectType), "OutdoorAirMixer");
        

[Description(@"If this field is blank, the OutdoorAir:Mixer is not used. This optional field specifies the name of the OutdoorAir:Mixer object. When used, this name needs to match name of the OutdoorAir:Mixer object. This field should be left blank if the FanCoil is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object.")]
[JsonProperty("outdoor_air_mixer_name")]
public string OutdoorAirMixerName { get; set; } = "";
        

[Description(@"Fan type must be according to capacity control method (see I/O) For ConstantFanVariableFlow a Fan:OnOff or Fan:ConstantVolume is valid. For CyclingFan a Fan:OnOff is valid. For VariableFanVariableFlow or VariableFanConstantFlow a Fan:VariableVolume is valid. For ASHRAE90.1 a Fan:OnOff or Fan:VariableVolume is valid. Fan:SystemModel is valid for all capacity control methods. The fan's inlet node should be the same as the outdoor air mixer's mixed air node.")]
[JsonProperty("supply_air_fan_object_type")]
public ZoneHVAC_FourPipeFanCoil_SupplyAirFanObjectType SupplyAirFanObjectType { get; set; } = (ZoneHVAC_FourPipeFanCoil_SupplyAirFanObjectType)Enum.Parse(typeof(ZoneHVAC_FourPipeFanCoil_SupplyAirFanObjectType), "FanConstantVolume");
        

[JsonProperty("supply_air_fan_name")]
public string SupplyAirFanName { get; set; } = "";
        

[JsonProperty("cooling_coil_object_type")]
public ZoneHVAC_FourPipeFanCoil_CoolingCoilObjectType CoolingCoilObjectType { get; set; } = (ZoneHVAC_FourPipeFanCoil_CoolingCoilObjectType)Enum.Parse(typeof(ZoneHVAC_FourPipeFanCoil_CoolingCoilObjectType), "CoilCoolingWater");
        

[JsonProperty("cooling_coil_name")]
public string CoolingCoilName { get; set; } = "";
        

[JsonProperty("maximum_cold_water_flow_rate")]
public string MaximumColdWaterFlowRate { get; set; } = "";
        

[JsonProperty("minimum_cold_water_flow_rate")]
public System.Nullable<float> MinimumColdWaterFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("cooling_convergence_tolerance")]
public System.Nullable<float> CoolingConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_coil_object_type")]
public ZoneHVAC_FourPipeFanCoil_HeatingCoilObjectType HeatingCoilObjectType { get; set; } = (ZoneHVAC_FourPipeFanCoil_HeatingCoilObjectType)Enum.Parse(typeof(ZoneHVAC_FourPipeFanCoil_HeatingCoilObjectType), "CoilHeatingElectric");
        

[JsonProperty("heating_coil_name")]
public string HeatingCoilName { get; set; } = "";
        

[JsonProperty("maximum_hot_water_flow_rate")]
public string MaximumHotWaterFlowRate { get; set; } = "";
        

[JsonProperty("minimum_hot_water_flow_rate")]
public System.Nullable<float> MinimumHotWaterFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_convergence_tolerance")]
public System.Nullable<float> HeatingConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[Description("Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty("availability_manager_list_name")]
public string AvailabilityManagerListName { get; set; } = "";
        

[Description("Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
        

[Description(@"Enter the name of a schedule that controls fan operation. Schedule Name values of 0 denote cycling fan operation (fan cycles with cooling coil). Schedule values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this field is left blank. This input field is currently used with MultiStageFan capacity control method")]
[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        

[Description("For Capacity Control Method = ASHRAE90VariableFan, enter the minimum air temperat" +
    "ure in cooling mode. Leave this field blank or enter 0 to control to the zone lo" +
    "ad per ASHRAE 90.1. In this case, a zone sizing simulation is required.")]
[JsonProperty("minimum_supply_air_temperature_in_cooling_mode")]
public string MinimumSupplyAirTemperatureInCoolingMode { get; set; } = (System.String)"Autosize";
        

[Description("For Capacity Control Method = ASHRAE90VariableFan, enter the maximum air temperat" +
    "ure in heating mode. Leave this field blank or enter 0 to control to the zone lo" +
    "ad per ASHRAE 90.1. In this case, a zone sizing simulation is required.")]
[JsonProperty("maximum_supply_air_temperature_in_heating_mode")]
public string MaximumSupplyAirTemperatureInHeatingMode { get; set; } = (System.String)"Autosize";
    }
    
    public enum ZoneHVAC_FourPipeFanCoil_CapacityControlMethod
    {
        
        [JsonProperty("ASHRAE90VariableFan")]
        ASHRAE90VariableFan = 0,
        
        [JsonProperty("ConstantFanVariableFlow")]
        ConstantFanVariableFlow = 1,
        
        [JsonProperty("CyclingFan")]
        CyclingFan = 2,
        
        [JsonProperty("MultiSpeedFan")]
        MultiSpeedFan = 3,
        
        [JsonProperty("VariableFanConstantFlow")]
        VariableFanConstantFlow = 4,
        
        [JsonProperty("VariableFanVariableFlow")]
        VariableFanVariableFlow = 5,
    }
    
    public enum ZoneHVAC_FourPipeFanCoil_OutdoorAirMixerObjectType
    {
        
        [JsonProperty("OutdoorAir:Mixer")]
        OutdoorAirMixer = 0,
    }
    
    public enum ZoneHVAC_FourPipeFanCoil_SupplyAirFanObjectType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 2,
        
        [JsonProperty("Fan:VariableVolume")]
        FanVariableVolume = 3,
    }
    
    public enum ZoneHVAC_FourPipeFanCoil_CoolingCoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 0,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 1,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatExchangerAssisted")]
        CoilSystemCoolingWaterHeatExchangerAssisted = 2,
    }
    
    public enum ZoneHVAC_FourPipeFanCoil_HeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 1,
    }
    
    [Description("Window air conditioner. Forced-convection cooling-only unit with supply fan, dire" +
        "ct expansion (DX) cooling coil, and fixed-position outdoor air mixer.")]
    [JsonObject("ZoneHVAC:WindowAirConditioner")]
    public class ZoneHVAC_WindowAirConditioner : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("maximum_supply_air_flow_rate")]
public string MaximumSupplyAirFlowRate { get; set; } = "";
        

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string MaximumOutdoorAirFlowRate { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("currently only one OutdoorAir:Mixer object type is available.")]
[JsonProperty("outdoor_air_mixer_object_type")]
public ZoneHVAC_WindowAirConditioner_OutdoorAirMixerObjectType OutdoorAirMixerObjectType { get; set; } = (ZoneHVAC_WindowAirConditioner_OutdoorAirMixerObjectType)Enum.Parse(typeof(ZoneHVAC_WindowAirConditioner_OutdoorAirMixerObjectType), "OutdoorAirMixer");
        

[JsonProperty("outdoor_air_mixer_name")]
public string OutdoorAirMixerName { get; set; } = "";
        

[Description(@"Fan:ConstantVolume only works when continuous fan operation is used the entire simulation (all supply air fan operating mode schedule values are greater than 0). If any fan operating mode schedule values are 0 a Fan:SystemModel or Fan:OnOff object must be used.")]
[JsonProperty("supply_air_fan_object_type")]
public ZoneHVAC_WindowAirConditioner_SupplyAirFanObjectType SupplyAirFanObjectType { get; set; } = (ZoneHVAC_WindowAirConditioner_SupplyAirFanObjectType)Enum.Parse(typeof(ZoneHVAC_WindowAirConditioner_SupplyAirFanObjectType), "FanConstantVolume");
        

[Description("Fan type Fan:ConstantVolume is used with continuous fan and fan type Fan:OnOff is" +
    " used with cycling Fan.")]
[JsonProperty("supply_air_fan_name")]
public string SupplyAirFanName { get; set; } = "";
        

[JsonProperty("cooling_coil_object_type")]
public ZoneHVAC_WindowAirConditioner_CoolingCoilObjectType CoolingCoilObjectType { get; set; } = (ZoneHVAC_WindowAirConditioner_CoolingCoilObjectType)Enum.Parse(typeof(ZoneHVAC_WindowAirConditioner_CoolingCoilObjectType), "CoilCoolingDXSingleSpeed");
        

[JsonProperty("dx_cooling_coil_name")]
public string DxCoolingCoilName { get; set; } = "";
        

[Description(@"Enter the name of a schedule that controls fan operation. Schedule Name values of 0 denote cycling fan operation (fan cycles with cooling coil). Schedule values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this field is left blank.")]
[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        

[JsonProperty("fan_placement")]
public ZoneHVAC_WindowAirConditioner_FanPlacement FanPlacement { get; set; } = (ZoneHVAC_WindowAirConditioner_FanPlacement)Enum.Parse(typeof(ZoneHVAC_WindowAirConditioner_FanPlacement), "BlowThrough");
        

[JsonProperty("cooling_convergence_tolerance")]
public System.Nullable<float> CoolingConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[Description("Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty("availability_manager_list_name")]
public string AvailabilityManagerListName { get; set; } = "";
        

[Description("Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
    }
    
    public enum ZoneHVAC_WindowAirConditioner_OutdoorAirMixerObjectType
    {
        
        [JsonProperty("OutdoorAir:Mixer")]
        OutdoorAirMixer = 0,
    }
    
    public enum ZoneHVAC_WindowAirConditioner_SupplyAirFanObjectType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 2,
    }
    
    public enum ZoneHVAC_WindowAirConditioner_CoolingCoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 1,
        
        [JsonProperty("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
        CoilSystemCoolingDXHeatExchangerAssisted = 2,
    }
    
    public enum ZoneHVAC_WindowAirConditioner_FanPlacement
    {
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 0,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 1,
    }
    
    [Description("Packaged terminal air conditioner (PTAC). Forced-convection heating-cooling unit " +
        "with supply fan, direct expansion (DX) cooling coil, heating coil (gas, electric" +
        ", hot water, or steam) and fixed-position outdoor air mixer.")]
    [JsonObject("ZoneHVAC:PackagedTerminalAirConditioner")]
    public class ZoneHVAC_PackagedTerminalAirConditioner : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available. Schedule va" +
    "lues of 0 denote the unit is off.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Air inlet node for the PTAC must be a zone air exhaust Node.")]
[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[Description("Air outlet node for the PTAC must be a zone air inlet node.")]
[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Currently only one OutdoorAir:Mixer object type is available. This field should b" +
    "e left blank if the PTAC is connected to central dedicated outdoor air through a" +
    "n AirTerminal:SingleDuct:Mixer object.")]
[JsonProperty("outdoor_air_mixer_object_type")]
public ZoneHVAC_PackagedTerminalAirConditioner_OutdoorAirMixerObjectType OutdoorAirMixerObjectType { get; set; } = (ZoneHVAC_PackagedTerminalAirConditioner_OutdoorAirMixerObjectType)Enum.Parse(typeof(ZoneHVAC_PackagedTerminalAirConditioner_OutdoorAirMixerObjectType), "OutdoorAirMixer");
        

[Description(@"If this field is blank, the OutdoorAir:Mixer is not used. This optional field specifies the name of the OutdoorAir:Mixer object. When used, this name needs to match name of the OutdoorAir:Mixer object. This field should be left blank if the PTAC is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object.")]
[JsonProperty("outdoor_air_mixer_name")]
public string OutdoorAirMixerName { get; set; } = "";
        

[Description("Must be less than or equal to fan size.")]
[JsonProperty("cooling_supply_air_flow_rate")]
public string CoolingSupplyAirFlowRate { get; set; } = "";
        

[Description("Must be less than or equal to fan size.")]
[JsonProperty("heating_supply_air_flow_rate")]
public string HeatingSupplyAirFlowRate { get; set; } = "";
        

[Description(@"Must be less than or equal to fan size. Only used when supply air fan operating mode schedule values specify continuous fan (schedule values greater than 0 specify continuous fan operation). This air flow rate is used when no heating or cooling is required and the cooling or heating coil is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
[JsonProperty("no_load_supply_air_flow_rate")]
public string NoLoadSupplyAirFlowRate { get; set; } = "";
        

[Description("Must be less than or equal to supply air flow rate during cooling operation. This" +
    " field is set to zero flow when the PTAC is connected to central dedicated outdo" +
    "or air through air terminal single duct mixer object.")]
[JsonProperty("cooling_outdoor_air_flow_rate")]
public string CoolingOutdoorAirFlowRate { get; set; } = "";
        

[Description("Must be less than or equal to supply air flow rate during heating operation. This" +
    " field is set to zero flow when the PTAC is connected to central dedicated outdo" +
    "or air through air terminal single duct mixer object.")]
[JsonProperty("heating_outdoor_air_flow_rate")]
public string HeatingOutdoorAirFlowRate { get; set; } = "";
        

[Description(@"Only used when supply air fan operating mode schedule values specify continuous fan (schedule values greater than 0 specify continuous fan operation). This air flow rate is used when no heating or cooling is required and the cooling or heating coil is off. If this field is left blank or zero, the outdoor air flow rate from the previous on cycle (either cooling or heating) is used. This field is set to zero flow when the PTAC is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
[JsonProperty("no_load_outdoor_air_flow_rate")]
public string NoLoadOutdoorAirFlowRate { get; set; } = "";
        

[Description(@"Fan:ConstantVolume only works when continuous fan operation is used the entire simulation (all supply air fan operating mode schedule values are greater than 0). If any fan operating mode schedule values are 0 a Fan:SystemModel or Fan:OnOff object must be used.")]
[JsonProperty("supply_air_fan_object_type")]
public ZoneHVAC_PackagedTerminalAirConditioner_SupplyAirFanObjectType SupplyAirFanObjectType { get; set; } = (ZoneHVAC_PackagedTerminalAirConditioner_SupplyAirFanObjectType)Enum.Parse(typeof(ZoneHVAC_PackagedTerminalAirConditioner_SupplyAirFanObjectType), "FanConstantVolume");
        

[Description("Needs to match in the fan object.")]
[JsonProperty("supply_air_fan_name")]
public string SupplyAirFanName { get; set; } = "";
        

[Description("Select the type of heating coil.")]
[JsonProperty("heating_coil_object_type")]
public ZoneHVAC_PackagedTerminalAirConditioner_HeatingCoilObjectType HeatingCoilObjectType { get; set; } = (ZoneHVAC_PackagedTerminalAirConditioner_HeatingCoilObjectType)Enum.Parse(typeof(ZoneHVAC_PackagedTerminalAirConditioner_HeatingCoilObjectType), "CoilHeatingElectric");
        

[Description("Needs to match in the heating coil object.")]
[JsonProperty("heating_coil_name")]
public string HeatingCoilName { get; set; } = "";
        

[Description("Select the type of Cooling Coil. Only works with Coil:Cooling:DX:SingleSpeed or C" +
    "oilSystem:Cooling:DX:HeatExchangerAssisted or Coil:Cooling:DX:VariableSpeed.")]
[JsonProperty("cooling_coil_object_type")]
public ZoneHVAC_PackagedTerminalAirConditioner_CoolingCoilObjectType CoolingCoilObjectType { get; set; } = (ZoneHVAC_PackagedTerminalAirConditioner_CoolingCoilObjectType)Enum.Parse(typeof(ZoneHVAC_PackagedTerminalAirConditioner_CoolingCoilObjectType), "CoilCoolingDXSingleSpeed");
        

[Description("Needs to match a DX cooling coil object.")]
[JsonProperty("cooling_coil_name")]
public string CoolingCoilName { get; set; } = "";
        

[Description("Select fan placement as either blow through or draw through.")]
[JsonProperty("fan_placement")]
public ZoneHVAC_PackagedTerminalAirConditioner_FanPlacement FanPlacement { get; set; } = (ZoneHVAC_PackagedTerminalAirConditioner_FanPlacement)Enum.Parse(typeof(ZoneHVAC_PackagedTerminalAirConditioner_FanPlacement), "DrawThrough");
        

[Description(@"Enter the name of a schedule that controls fan operation. Schedule Name values of 0 denote cycling fan operation (fan cycles with cooling or heating coil). Schedule Name values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation).")]
[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        

[Description("Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty("availability_manager_list_name")]
public string AvailabilityManagerListName { get; set; } = "";
        

[Description("Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
        

[JsonProperty("capacity_control_method")]
public ZoneHVAC_PackagedTerminalAirConditioner_CapacityControlMethod CapacityControlMethod { get; set; } = (ZoneHVAC_PackagedTerminalAirConditioner_CapacityControlMethod)Enum.Parse(typeof(ZoneHVAC_PackagedTerminalAirConditioner_CapacityControlMethod), "None");
        

[Description("For Capacity Control Method = SingleZoneVAV, enter the minimum air temperature li" +
    "mit for reduced fan speed.")]
[JsonProperty("minimum_supply_air_temperature_in_cooling_mode")]
public string MinimumSupplyAirTemperatureInCoolingMode { get; set; } = (System.String)"Autosize";
        

[Description("For Capacity Control Method = SingleZoneVAV, enter the maximum air temperature li" +
    "mit for reduced fan speed.")]
[JsonProperty("maximum_supply_air_temperature_in_heating_mode")]
public string MaximumSupplyAirTemperatureInHeatingMode { get; set; } = (System.String)"Autosize";
    }
    
    public enum ZoneHVAC_PackagedTerminalAirConditioner_OutdoorAirMixerObjectType
    {
        
        [JsonProperty("OutdoorAir:Mixer")]
        OutdoorAirMixer = 0,
    }
    
    public enum ZoneHVAC_PackagedTerminalAirConditioner_SupplyAirFanObjectType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 2,
    }
    
    public enum ZoneHVAC_PackagedTerminalAirConditioner_HeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum ZoneHVAC_PackagedTerminalAirConditioner_CoolingCoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 1,
        
        [JsonProperty("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
        CoilSystemCoolingDXHeatExchangerAssisted = 2,
    }
    
    public enum ZoneHVAC_PackagedTerminalAirConditioner_FanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum ZoneHVAC_PackagedTerminalAirConditioner_CapacityControlMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("SingleZoneVAV")]
        SingleZoneVAV = 2,
    }
    
    [Description(@"Packaged terminal heat pump (PTHP). Forced-convection heating-cooling unit with supply fan, direct expansion (DX) cooling coil, DX heating coil (air-to-air heat pump), supplemental heating coil (gas, electric, hot water, or steam), and fixed-position outdoor air mixer.")]
    [JsonObject("ZoneHVAC:PackagedTerminalHeatPump")]
    public class ZoneHVAC_PackagedTerminalHeatPump : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available. Schedule va" +
    "lues of 0 denote the unit is off.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Air inlet node for the PTHP must be a zone air exhaust node.")]
[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[Description("Air outlet node for the PTHP must be a zone air inlet node.")]
[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Currently only one OutdoorAir:Mixer object type is available. This field should b" +
    "e left blank if the PTHP is connected to central dedicated outdoor air through a" +
    "n AirTerminal:SingleDuct:Mixer object.")]
[JsonProperty("outdoor_air_mixer_object_type")]
public ZoneHVAC_PackagedTerminalHeatPump_OutdoorAirMixerObjectType OutdoorAirMixerObjectType { get; set; } = (ZoneHVAC_PackagedTerminalHeatPump_OutdoorAirMixerObjectType)Enum.Parse(typeof(ZoneHVAC_PackagedTerminalHeatPump_OutdoorAirMixerObjectType), "OutdoorAirMixer");
        

[Description(@"If this field is blank, the OutdoorAir:Mixer is not used. This optional field specifies the name of the OutdoorAir:Mixer object. When used, this name needs to match name of the OutdoorAir:Mixer object. This field should be left blank if the PTHP is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object.")]
[JsonProperty("outdoor_air_mixer_name")]
public string OutdoorAirMixerName { get; set; } = "";
        

[Description("Must be less than or equal to fan size.")]
[JsonProperty("cooling_supply_air_flow_rate")]
public string CoolingSupplyAirFlowRate { get; set; } = "";
        

[Description("Must be less than or equal to fan size.")]
[JsonProperty("heating_supply_air_flow_rate")]
public string HeatingSupplyAirFlowRate { get; set; } = "";
        

[Description(@"Must be less than or equal to fan size. Only used when heat pump fan operating mode is continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
[JsonProperty("no_load_supply_air_flow_rate")]
public string NoLoadSupplyAirFlowRate { get; set; } = "";
        

[Description("Must be less than or equal to supply air flow rate during cooling operation. This" +
    " field is set to zero flow when the PTHP is connected to central dedicated outdo" +
    "or air through air terminal single duct mixer object.")]
[JsonProperty("cooling_outdoor_air_flow_rate")]
public string CoolingOutdoorAirFlowRate { get; set; } = "";
        

[Description("Must be less than or equal to supply air flow rate during heating operation. This" +
    " field is set to zero flow when the PTHP is connected to central dedicated outdo" +
    "or air through air terminal single duct mixer object.")]
[JsonProperty("heating_outdoor_air_flow_rate")]
public string HeatingOutdoorAirFlowRate { get; set; } = "";
        

[Description(@"Only used when heat pump Fan operating mode is continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the outdoor air flow rate from the previous on cycle (either cooling or heating) is used. This field is set to zero flow when the PTHP is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
[JsonProperty("no_load_outdoor_air_flow_rate")]
public string NoLoadOutdoorAirFlowRate { get; set; } = "";
        

[Description("Fan:ConstantVolume only works with fan operating mode is continuous.")]
[JsonProperty("supply_air_fan_object_type")]
public ZoneHVAC_PackagedTerminalHeatPump_SupplyAirFanObjectType SupplyAirFanObjectType { get; set; } = (ZoneHVAC_PackagedTerminalHeatPump_SupplyAirFanObjectType)Enum.Parse(typeof(ZoneHVAC_PackagedTerminalHeatPump_SupplyAirFanObjectType), "FanConstantVolume");
        

[Description("Needs to match a fan object.")]
[JsonProperty("supply_air_fan_name")]
public string SupplyAirFanName { get; set; } = "";
        

[Description("Only works with Coil:Heating:DX:SingleSpeed or Coil:Heating:DX:VariableSpeed.")]
[JsonProperty("heating_coil_object_type")]
public ZoneHVAC_PackagedTerminalHeatPump_HeatingCoilObjectType HeatingCoilObjectType { get; set; } = (ZoneHVAC_PackagedTerminalHeatPump_HeatingCoilObjectType)Enum.Parse(typeof(ZoneHVAC_PackagedTerminalHeatPump_HeatingCoilObjectType), "CoilHeatingDXSingleSpeed");
        

[Description("Needs to match in the DX Heating Coil object.")]
[JsonProperty("heating_coil_name")]
public string HeatingCoilName { get; set; } = "";
        

[Description("Defines Heating convergence tolerance as a fraction of Heating load to be met.")]
[JsonProperty("heating_convergence_tolerance")]
public System.Nullable<float> HeatingConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[Description("Only works with Coil:Cooling:DX:SingleSpeed or CoilSystem:Cooling:DX:HeatExchange" +
    "rAssisted or Coil:Cooling:DX:VariableSpeed.")]
[JsonProperty("cooling_coil_object_type")]
public ZoneHVAC_PackagedTerminalHeatPump_CoolingCoilObjectType CoolingCoilObjectType { get; set; } = (ZoneHVAC_PackagedTerminalHeatPump_CoolingCoilObjectType)Enum.Parse(typeof(ZoneHVAC_PackagedTerminalHeatPump_CoolingCoilObjectType), "CoilCoolingDXSingleSpeed");
        

[Description("Needs to match in the DX Cooling Coil object.")]
[JsonProperty("cooling_coil_name")]
public string CoolingCoilName { get; set; } = "";
        

[Description("Defines Cooling convergence tolerance as a fraction of the Cooling load to be met" +
    ".")]
[JsonProperty("cooling_convergence_tolerance")]
public System.Nullable<float> CoolingConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[Description("works with gas, electric, hot water and steam heating coil.")]
[JsonProperty("supplemental_heating_coil_object_type")]
public ZoneHVAC_PackagedTerminalHeatPump_SupplementalHeatingCoilObjectType SupplementalHeatingCoilObjectType { get; set; } = (ZoneHVAC_PackagedTerminalHeatPump_SupplementalHeatingCoilObjectType)Enum.Parse(typeof(ZoneHVAC_PackagedTerminalHeatPump_SupplementalHeatingCoilObjectType), "CoilHeatingElectric");
        

[Description("Needs to match in the supplemental heating coil object.")]
[JsonProperty("supplemental_heating_coil_name")]
public string SupplementalHeatingCoilName { get; set; } = "";
        

[Description("Supply air temperature from the supplemental heater will not exceed this value.")]
[JsonProperty("maximum_supply_air_temperature_from_supplemental_heater")]
public string MaximumSupplyAirTemperatureFromSupplementalHeater { get; set; } = "";
        

[Description("Supplemental heater will not operate when outdoor temperature exceeds this value." +
    "")]
[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForSupplementalHeaterOperation { get; set; } = (System.Nullable<float>)Single.Parse("21", CultureInfo.InvariantCulture);
        

[Description("Select fan placement as either blow through or draw through.")]
[JsonProperty("fan_placement")]
public ZoneHVAC_PackagedTerminalHeatPump_FanPlacement FanPlacement { get; set; } = (ZoneHVAC_PackagedTerminalHeatPump_FanPlacement)Enum.Parse(typeof(ZoneHVAC_PackagedTerminalHeatPump_FanPlacement), "DrawThrough");
        

[Description(@"Enter the name of a schedule that controls fan operation. Schedule values of 0 denote cycling fan operation (fan cycles with cooling or heating coil). Schedule Name values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this field is left blank.")]
[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        

[Description("Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty("availability_manager_list_name")]
public string AvailabilityManagerListName { get; set; } = "";
        

[Description("Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
        

[JsonProperty("capacity_control_method")]
public ZoneHVAC_PackagedTerminalHeatPump_CapacityControlMethod CapacityControlMethod { get; set; } = (ZoneHVAC_PackagedTerminalHeatPump_CapacityControlMethod)Enum.Parse(typeof(ZoneHVAC_PackagedTerminalHeatPump_CapacityControlMethod), "None");
        

[Description("For Capacity Control Method = SingleZoneVAV, enter the minimum air temperature li" +
    "mit for reduced fan speed.")]
[JsonProperty("minimum_supply_air_temperature_in_cooling_mode")]
public string MinimumSupplyAirTemperatureInCoolingMode { get; set; } = (System.String)"Autosize";
        

[Description("For Capacity Control Method = SingleZoneVAV, enter the maximum air temperature li" +
    "mit for reduced fan speed.")]
[JsonProperty("maximum_supply_air_temperature_in_heating_mode")]
public string MaximumSupplyAirTemperatureInHeatingMode { get; set; } = (System.String)"Autosize";
    }
    
    public enum ZoneHVAC_PackagedTerminalHeatPump_OutdoorAirMixerObjectType
    {
        
        [JsonProperty("OutdoorAir:Mixer")]
        OutdoorAirMixer = 0,
    }
    
    public enum ZoneHVAC_PackagedTerminalHeatPump_SupplyAirFanObjectType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 2,
    }
    
    public enum ZoneHVAC_PackagedTerminalHeatPump_HeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:DX:SingleSpeed")]
        CoilHeatingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Heating:DX:VariableSpeed")]
        CoilHeatingDXVariableSpeed = 1,
    }
    
    public enum ZoneHVAC_PackagedTerminalHeatPump_CoolingCoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 1,
        
        [JsonProperty("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
        CoilSystemCoolingDXHeatExchangerAssisted = 2,
    }
    
    public enum ZoneHVAC_PackagedTerminalHeatPump_SupplementalHeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum ZoneHVAC_PackagedTerminalHeatPump_FanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum ZoneHVAC_PackagedTerminalHeatPump_CapacityControlMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("SingleZoneVAV")]
        SingleZoneVAV = 2,
    }
    
    [Description("Water-to-air heat pump. Forced-convection heating-cooling unit with supply fan, w" +
        "ater-to-air cooling and heating coils, supplemental heating coil (gas, electric," +
        " hot water, or steam), and fixed-position outdoor air mixer.")]
    [JsonObject("ZoneHVAC:WaterToAirHeatPump")]
    public class ZoneHVAC_WaterToAirHeatPump : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Currently only one OutdoorAir:Mixer object type is available. This field should b" +
    "e left blank if the WSHP is connected to central dedicated outdoor air through a" +
    "n AirTerminal:SingleDuct:Mixer object.")]
[JsonProperty("outdoor_air_mixer_object_type")]
public ZoneHVAC_WaterToAirHeatPump_OutdoorAirMixerObjectType OutdoorAirMixerObjectType { get; set; } = (ZoneHVAC_WaterToAirHeatPump_OutdoorAirMixerObjectType)Enum.Parse(typeof(ZoneHVAC_WaterToAirHeatPump_OutdoorAirMixerObjectType), "OutdoorAirMixer");
        

[Description(@"If this field is blank, the OutdoorAir:Mixer is not used. This optional field specifies the name of the OutdoorAir:Mixer object. When used, this name needs to match name of the OutdoorAir:Mixer object. This field should be left blank if the WSHP is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object.")]
[JsonProperty("outdoor_air_mixer_name")]
public string OutdoorAirMixerName { get; set; } = "";
        

[Description("Must be less than or equal to fan size.")]
[JsonProperty("cooling_supply_air_flow_rate")]
public string CoolingSupplyAirFlowRate { get; set; } = "";
        

[Description("Must be less than or equal to fan size.")]
[JsonProperty("heating_supply_air_flow_rate")]
public string HeatingSupplyAirFlowRate { get; set; } = "";
        

[Description(@"Must be less than or equal to fan size. Only used when heat pump fan operating mode is continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
[JsonProperty("no_load_supply_air_flow_rate")]
public string NoLoadSupplyAirFlowRate { get; set; } = "";
        

[Description("Must be less than or equal to supply air flow rate during cooling operation. This" +
    " field is set to zero flow when the WSHP is connected to central dedicated outdo" +
    "or air through air terminal single duct mixer object.")]
[JsonProperty("cooling_outdoor_air_flow_rate")]
public string CoolingOutdoorAirFlowRate { get; set; } = "";
        

[Description("Must be less than or equal to supply air flow rate during heating operation. This" +
    " field is set to zero flow when the WSHP is connected to central dedicated outdo" +
    "or air through air terminal single duct mixer object.")]
[JsonProperty("heating_outdoor_air_flow_rate")]
public string HeatingOutdoorAirFlowRate { get; set; } = "";
        

[Description(@"Only used when heat pump Fan operating mode is continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the outdoor air flow rate from the previous on cycle (either cooling or heating) is used. This field is set to zero flow when the PTHP is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
[JsonProperty("no_load_outdoor_air_flow_rate")]
public string NoLoadOutdoorAirFlowRate { get; set; } = "";
        

[JsonProperty("supply_air_fan_object_type")]
public ZoneHVAC_WaterToAirHeatPump_SupplyAirFanObjectType SupplyAirFanObjectType { get; set; } = (ZoneHVAC_WaterToAirHeatPump_SupplyAirFanObjectType)Enum.Parse(typeof(ZoneHVAC_WaterToAirHeatPump_SupplyAirFanObjectType), "FanOnOff");
        

[Description("Needs to match Fan:SystemModel or Fan:OnOff object")]
[JsonProperty("supply_air_fan_name")]
public string SupplyAirFanName { get; set; } = "";
        

[JsonProperty("heating_coil_object_type")]
public ZoneHVAC_WaterToAirHeatPump_HeatingCoilObjectType HeatingCoilObjectType { get; set; } = (ZoneHVAC_WaterToAirHeatPump_HeatingCoilObjectType)Enum.Parse(typeof(ZoneHVAC_WaterToAirHeatPump_HeatingCoilObjectType), "CoilHeatingWaterToAirHeatPumpEquationFit");
        

[Description("Needs to match in the water-to-air heat pump heating coil object")]
[JsonProperty("heating_coil_name")]
public string HeatingCoilName { get; set; } = "";
        

[JsonProperty("cooling_coil_object_type")]
public ZoneHVAC_WaterToAirHeatPump_CoolingCoilObjectType CoolingCoilObjectType { get; set; } = (ZoneHVAC_WaterToAirHeatPump_CoolingCoilObjectType)Enum.Parse(typeof(ZoneHVAC_WaterToAirHeatPump_CoolingCoilObjectType), "CoilCoolingWaterToAirHeatPumpEquationFit");
        

[Description("Needs to match in the water-to-air heat pump cooling coil object")]
[JsonProperty("cooling_coil_name")]
public string CoolingCoilName { get; set; } = "";
        

[Description("The maximum on-off cycling rate for the compressor Suggested value is 2.5 for a t" +
    "ypical heat pump")]
[JsonProperty("maximum_cycling_rate")]
public System.Nullable<float> MaximumCyclingRate { get; set; } = (System.Nullable<float>)Single.Parse("2.5", CultureInfo.InvariantCulture);
        

[Description("Time constant for the cooling coil\'s capacity to reach steady state after startup" +
    " Suggested value is 60 for a typical heat pump")]
[JsonProperty("heat_pump_time_constant")]
public System.Nullable<float> HeatPumpTimeConstant { get; set; } = (System.Nullable<float>)Single.Parse("60", CultureInfo.InvariantCulture);
        

[Description("The fraction of on-cycle power use to adjust the part load fraction based on the " +
    "off-cycle power consumption due to crankcase heaters, controls, fans, and etc. S" +
    "uggested value is 0.01 for a typical heat pump")]
[JsonProperty("fraction_of_on_cycle_power_use")]
public System.Nullable<float> FractionOfOnCyclePowerUse { get; set; } = (System.Nullable<float>)Single.Parse("0.01", CultureInfo.InvariantCulture);
        

[Description("Programmed time delay for heat pump fan to shut off after compressor cycle off. O" +
    "nly required when fan operating mode is cycling Enter 0 when fan operating mode " +
    "is continuous")]
[JsonProperty("heat_pump_fan_delay_time")]
public System.Nullable<float> HeatPumpFanDelayTime { get; set; } = (System.Nullable<float>)Single.Parse("60", CultureInfo.InvariantCulture);
        

[Description("works with gas, electric, hot water and steam heating coils")]
[JsonProperty("supplemental_heating_coil_object_type")]
public ZoneHVAC_WaterToAirHeatPump_SupplementalHeatingCoilObjectType SupplementalHeatingCoilObjectType { get; set; } = (ZoneHVAC_WaterToAirHeatPump_SupplementalHeatingCoilObjectType)Enum.Parse(typeof(ZoneHVAC_WaterToAirHeatPump_SupplementalHeatingCoilObjectType), "CoilHeatingElectric");
        

[Description("Needs to match in the supplemental heating coil object")]
[JsonProperty("supplemental_heating_coil_name")]
public string SupplementalHeatingCoilName { get; set; } = "";
        

[Description("Supply air temperature from the supplemental heater will not exceed this value.")]
[JsonProperty("maximum_supply_air_temperature_from_supplemental_heater")]
public string MaximumSupplyAirTemperatureFromSupplementalHeater { get; set; } = (System.String)"Autosize";
        

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForSupplementalHeaterOperation { get; set; } = (System.Nullable<float>)Single.Parse("21", CultureInfo.InvariantCulture);
        

[JsonProperty("outdoor_dry_bulb_temperature_sensor_node_name")]
public string OutdoorDryBulbTemperatureSensorNodeName { get; set; } = "";
        

[JsonProperty("fan_placement")]
public ZoneHVAC_WaterToAirHeatPump_FanPlacement FanPlacement { get; set; } = (ZoneHVAC_WaterToAirHeatPump_FanPlacement)Enum.Parse(typeof(ZoneHVAC_WaterToAirHeatPump_FanPlacement), "BlowThrough");
        

[Description(@"Enter the name of a schedule that controls fan operation. Schedule values of 0 denote cycling fan operation (fan cycles with cooling or heating coil). Schedule values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this field is left blank.")]
[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        

[Description("Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty("availability_manager_list_name")]
public string AvailabilityManagerListName { get; set; } = "";
        

[Description(@"used only when the heat pump coils are of the type WaterToAirHeatPump:EquationFit Constant results in 100% water flow regardless of compressor PLR Cycling results in water flow that matches compressor PLR ConstantOnDemand results in 100% water flow whenever the coil is on, but is 0% whenever the coil has no load")]
[JsonProperty("heat_pump_coil_water_flow_mode")]
public ZoneHVAC_WaterToAirHeatPump_HeatPumpCoilWaterFlowMode HeatPumpCoilWaterFlowMode { get; set; } = (ZoneHVAC_WaterToAirHeatPump_HeatPumpCoilWaterFlowMode)Enum.Parse(typeof(ZoneHVAC_WaterToAirHeatPump_HeatPumpCoilWaterFlowMode), "Cycling");
        

[Description("Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
    }
    
    public enum ZoneHVAC_WaterToAirHeatPump_OutdoorAirMixerObjectType
    {
        
        [JsonProperty("OutdoorAir:Mixer")]
        OutdoorAirMixer = 0,
    }
    
    public enum ZoneHVAC_WaterToAirHeatPump_SupplyAirFanObjectType
    {
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 0,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 1,
    }
    
    public enum ZoneHVAC_WaterToAirHeatPump_HeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:WaterToAirHeatPump:EquationFit")]
        CoilHeatingWaterToAirHeatPumpEquationFit = 0,
        
        [JsonProperty("Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit")]
        CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit = 1,
    }
    
    public enum ZoneHVAC_WaterToAirHeatPump_CoolingCoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:WaterToAirHeatPump:EquationFit")]
        CoilCoolingWaterToAirHeatPumpEquationFit = 0,
        
        [JsonProperty("Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit")]
        CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit = 1,
    }
    
    public enum ZoneHVAC_WaterToAirHeatPump_SupplementalHeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum ZoneHVAC_WaterToAirHeatPump_FanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum ZoneHVAC_WaterToAirHeatPump_HeatPumpCoilWaterFlowMode
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Constant")]
        Constant = 1,
        
        [JsonProperty("ConstantOnDemand")]
        ConstantOnDemand = 2,
        
        [JsonProperty("Cycling")]
        Cycling = 3,
    }
    
    [Description(@"This object calculates the performance of zone (room) air dehumidifiers. Meant to model conventional direct expansion (DX) cooling-based room air dehumidifiers (reject 100% of condenser heat to the zone air), but this object might be able to be used to model other room air dehumidifier types.")]
    [JsonObject("ZoneHVAC:Dehumidifier:DX")]
    public class ZoneHVAC_Dehumidifier_DX : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Schedule values of 0 denote the unit is off. Schedule values >0.0 (usually 1.0) indicate that the dehumidifier is available to operate.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Air inlet node for the dehumidifier must be a zone air exhaust node.")]
[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[Description("Air outlet node for the dehumidifier must be a zone air inlet node.")]
[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Rating point: air entering dehumidifier at 26.7 C (80 F) dry-bulb and 60% relativ" +
    "e humidity.")]
[JsonProperty("rated_water_removal")]
public System.Nullable<float> RatedWaterRemoval { get; set; } = null;
        

[Description("Rating point: air entering dehumidifier at 26.7 C (80 F) dry-bulb and 60% relativ" +
    "e humidity.")]
[JsonProperty("rated_energy_factor")]
public System.Nullable<float> RatedEnergyFactor { get; set; } = null;
        

[JsonProperty("rated_air_flow_rate")]
public System.Nullable<float> RatedAirFlowRate { get; set; } = null;
        

[Description(@"Name of a curve that describes the water removal rate (normalized to rated conditions) as a function of the dry-bulb temperature and relative humidity of the air entering the dehumidifier. Curve output = (actual water removal/rated water removal) = a + b*T + c*T**2 + d*RH + e*RH**2 + f*T*RH T = inlet air dry-bulb temperature (C) RH = inlet air RH (%)")]
[JsonProperty("water_removal_curve_name")]
public string WaterRemovalCurveName { get; set; } = "";
        

[Description(@"Name of a curve that describes the energy factor (normalized to rated conditions) as a function of the dry-bulb temperature and relative humidity of the air entering the dehumidifier. Curve output = (actual energy factor/rated energy factor) = a + b*T + c*T**2 + d*RH + e*RH**2 + f*T*RH T = inlet air dry-bulb temperature (C) RH = inlet air RH (%)")]
[JsonProperty("energy_factor_curve_name")]
public string EnergyFactorCurveName { get; set; } = "";
        

[Description(@"Name of a curve that describes the part load fraction (PLF) of the system as a function of the part load ratio. Used to calculate dehumidifier run time fraction and electric power. quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (dehumidification load/steady state water removal capacity)")]
[JsonProperty("part_load_fraction_correlation_curve_name")]
public string PartLoadFractionCorrelationCurveName { get; set; } = "";
        

[Description("Dehumidifier shut off if inlet air (zone) temperature is below this value. This v" +
    "alue must be less than the Maximum Dry-Bulb Temperature for Dehumidifier Operati" +
    "on.")]
[JsonProperty("minimum_dry_bulb_temperature_for_dehumidifier_operation")]
public System.Nullable<float> MinimumDryBulbTemperatureForDehumidifierOperation { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("Dehumidifier shut off if inlet air (zone) temperature is above this value. This v" +
    "alue must be greater than the Minimum Dry-Bulb Temperature for Dehumidifier Oper" +
    "ation.")]
[JsonProperty("maximum_dry_bulb_temperature_for_dehumidifier_operation")]
public System.Nullable<float> MaximumDryBulbTemperatureForDehumidifierOperation { get; set; } = (System.Nullable<float>)Single.Parse("35", CultureInfo.InvariantCulture);
        

[Description(@"Parasitic electric power consumed when the dehumidifier is available to operate, but does not operate (i.e., no high humidity load to be met). Off cycle parasitic power is 0 when the availability schedule is 0. This electric load is considered as a heat gain to the zone air.")]
[JsonProperty("off_cycle_parasitic_electric_load")]
public System.Nullable<float> OffCycleParasiticElectricLoad { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Name of storage tank used to collect water removed by the dehumidifier.")]
[JsonProperty("condensate_collection_water_storage_tank_name")]
public string CondensateCollectionWaterStorageTankName { get; set; } = "";
    }
    
    [Description(@"This compound component models a stand-alone energy recovery ventilator (ERV) that conditions outdoor ventilation air and supplies that air directly to a zone. The ERV unit is modeled as a collection of components: air-to-air heat exchanger, supply air fan, exhaust air fan and an optional controller to avoid overheating of the supply air (economizer or free cooling operation).")]
    [JsonObject("ZoneHVAC:EnergyRecoveryVentilator")]
    public class ZoneHVAC_EnergyRecoveryVentilator : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Heat exchanger type must be HeatExchanger:AirToAir:SensibleAndLatent")]
[JsonProperty("heat_exchanger_name")]
public string HeatExchangerName { get; set; } = "";
        

[Description("This flow rate must match the supply fan\'s air flow rate.")]
[JsonProperty("supply_air_flow_rate")]
public string SupplyAirFlowRate { get; set; } = "";
        

[Description("This flow rate must match the supply fan air flow rate.")]
[JsonProperty("exhaust_air_flow_rate")]
public string ExhaustAirFlowRate { get; set; } = "";
        

[Description("Fan type must be Fan:OnOff or Fan:SystemModel")]
[JsonProperty("supply_air_fan_name")]
public string SupplyAirFanName { get; set; } = "";
        

[Description("Fan type must be Fan:OnOff or Fan:SystemModel")]
[JsonProperty("exhaust_air_fan_name")]
public string ExhaustAirFanName { get; set; } = "";
        

[Description("Enter the name of a ZoneHVAC:EnergyRecoveryVentilator:Controller object.")]
[JsonProperty("controller_name")]
public string ControllerName { get; set; } = "";
        

[Description("0.000508 m3/s-m2 corresponds to 0.1 ft3/min-ft2 Used only when supply and exhaust" +
    " air flow rates are autosized.")]
[JsonProperty("ventilation_rate_per_unit_floor_area")]
public System.Nullable<float> VentilationRatePerUnitFloorArea { get; set; } = null;
        

[Description("0.00236 m3/s-person corresponds to 5 ft3/min-person Used only when supply and exh" +
    "aust air flow rates are autosized.")]
[JsonProperty("ventilation_rate_per_occupant")]
public System.Nullable<float> VentilationRatePerOccupant { get; set; } = null;
        

[Description("Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty("availability_manager_list_name")]
public string AvailabilityManagerListName { get; set; } = "";
    }
    
    [Description("This controller is used exclusively by the ZoneHVAC:EnergyRecoveryVentilator obje" +
        "ct to allow economizer (free cooling) operation when possible.")]
    [JsonObject("ZoneHVAC:EnergyRecoveryVentilator:Controller")]
    public class ZoneHVAC_EnergyRecoveryVentilator_Controller : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the maximum outdoor dry-bulb temperature limit for economizer operation. No" +
    " input or blank input means this limit is not operative")]
[JsonProperty("temperature_high_limit")]
public System.Nullable<float> TemperatureHighLimit { get; set; } = null;
        

[Description("Enter the minimum outdoor dry-bulb temperature limit for economizer operation. No" +
    " input or blank input means this limit is not operative")]
[JsonProperty("temperature_low_limit")]
public System.Nullable<float> TemperatureLowLimit { get; set; } = null;
        

[Description("Enter the maximum outdoor enthalpy limit for economizer operation. No input or bl" +
    "ank input means this limit is not operative")]
[JsonProperty("enthalpy_high_limit")]
public System.Nullable<float> EnthalpyHighLimit { get; set; } = null;
        

[Description("Enter the maximum outdoor dew point temperature limit for economizer operation. N" +
    "o input or blank input means this limit is not operative")]
[JsonProperty("dewpoint_temperature_limit")]
public System.Nullable<float> DewpointTemperatureLimit { get; set; } = null;
        

[Description("Enter the name of a quadratic or cubic curve which defines the maximum outdoor hu" +
    "midity ratio (function of outdoor dry-bulb temperature) for economizer operation" +
    ". No input or blank input means this limit is not operative")]
[JsonProperty("electronic_enthalpy_limit_curve_name")]
public string ElectronicEnthalpyLimitCurveName { get; set; } = "";
        

[JsonProperty("exhaust_air_temperature_limit")]
public ZoneHVAC_EnergyRecoveryVentilator_Controller_ExhaustAirTemperatureLimit ExhaustAirTemperatureLimit { get; set; } = (ZoneHVAC_EnergyRecoveryVentilator_Controller_ExhaustAirTemperatureLimit)Enum.Parse(typeof(ZoneHVAC_EnergyRecoveryVentilator_Controller_ExhaustAirTemperatureLimit), "NoExhaustAirTemperatureLimit");
        

[JsonProperty("exhaust_air_enthalpy_limit")]
public ZoneHVAC_EnergyRecoveryVentilator_Controller_ExhaustAirEnthalpyLimit ExhaustAirEnthalpyLimit { get; set; } = (ZoneHVAC_EnergyRecoveryVentilator_Controller_ExhaustAirEnthalpyLimit)Enum.Parse(typeof(ZoneHVAC_EnergyRecoveryVentilator_Controller_ExhaustAirEnthalpyLimit), "NoExhaustAirEnthalpyLimit");
        

[Description("Schedule values greater than 0 indicate economizer operation is active. This sche" +
    "dule may be used with or without the High Humidity Control option. When used tog" +
    "ether, high humidity control has priority over economizer control.")]
[JsonProperty("time_of_day_economizer_flow_control_schedule_name")]
public string TimeOfDayEconomizerFlowControlScheduleName { get; set; } = "";
        

[Description("Select Yes to modify air flow rates based on a zone humidistat. Select No to disa" +
    "ble this feature.")]
[JsonProperty("high_humidity_control_flag")]
public EmptyNoYes HighHumidityControlFlag { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("Enter the name of the zone where the humidistat is located.")]
[JsonProperty("humidistat_control_zone_name")]
public string HumidistatControlZoneName { get; set; } = "";
        

[Description("Enter the ratio of supply (outdoor) air to the maximum supply air flow rate when " +
    "modified air flow rates are active based on high indoor humidity.")]
[JsonProperty("high_humidity_outdoor_air_flow_ratio")]
public System.Nullable<float> HighHumidityOutdoorAirFlowRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description(@"If NO is selected, the air flow rate is modified any time indoor relative humidity is above humidistat setpoint. If YES is selected, outdoor air flow rate is modified any time indoor relative humidity is above the humidistat setpoint AND the outdoor humidity ratio is less than the indoor humidity ratio.")]
[JsonProperty("control_high_indoor_humidity_based_on_outdoor_humidity_ratio")]
public EmptyNoYes ControlHighIndoorHumidityBasedOnOutdoorHumidityRatio { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "Yes");
    }
    
    public enum ZoneHVAC_EnergyRecoveryVentilator_Controller_ExhaustAirTemperatureLimit
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ExhaustAirTemperatureLimit")]
        ExhaustAirTemperatureLimit = 1,
        
        [JsonProperty("NoExhaustAirTemperatureLimit")]
        NoExhaustAirTemperatureLimit = 2,
    }
    
    public enum ZoneHVAC_EnergyRecoveryVentilator_Controller_ExhaustAirEnthalpyLimit
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ExhaustAirEnthalpyLimit")]
        ExhaustAirEnthalpyLimit = 1,
        
        [JsonProperty("NoExhaustAirEnthalpyLimit")]
        NoExhaustAirEnthalpyLimit = 2,
    }
    
    [Description("Unit ventilator. Forced-convection ventilation unit with supply fan (constant-vol" +
        "ume or variable-volume), optional chilled water cooling coil, optional heating c" +
        "oil (gas, electric, hot water, or steam) and controllable outdoor air mixer.")]
    [JsonObject("ZoneHVAC:UnitVentilator")]
    public class ZoneHVAC_UnitVentilator : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("maximum_supply_air_flow_rate")]
public string MaximumSupplyAirFlowRate { get; set; } = "";
        

[JsonProperty("outdoor_air_control_type")]
public ZoneHVAC_UnitVentilator_OutdoorAirControlType OutdoorAirControlType { get; set; } = (ZoneHVAC_UnitVentilator_OutdoorAirControlType)Enum.Parse(typeof(ZoneHVAC_UnitVentilator_OutdoorAirControlType), "FixedAmount");
        

[JsonProperty("minimum_outdoor_air_flow_rate")]
public string MinimumOutdoorAirFlowRate { get; set; } = "";
        

[Description("schedule values multiply the minimum outdoor air flow rate")]
[JsonProperty("minimum_outdoor_air_schedule_name")]
public string MinimumOutdoorAirScheduleName { get; set; } = "";
        

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string MaximumOutdoorAirFlowRate { get; set; } = "";
        

[Description("that this depends on the control type as to whether it is a fraction or temperatu" +
    "re")]
[JsonProperty("maximum_outdoor_air_fraction_or_temperature_schedule_name")]
public string MaximumOutdoorAirFractionOrTemperatureScheduleName { get; set; } = "";
        

[Description("Inlet node name must be zone exhaust node name if there is no DOA Mixer, or if th" +
    "e unit ventilator is connected DOA, then the air inlet node name must be the mix" +
    "er outlet air node name for InletSide mixer connection.")]
[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[Description("Outlet node name must be zone inlet node name if there is no DOA Mixer, or if the" +
    " unit ventilator is connected DOA, then the air outlet node name must be the mix" +
    "er secondary air inlet node name for SupplySide mixer connection.")]
[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("this field is left blank only if the Unit Ventilator is connected to a central de" +
    "dicated outdoor air (DOA) via AirTerminal:SingleDuct:Mixer object")]
[JsonProperty("outdoor_air_node_name")]
public string OutdoorAirNodeName { get; set; } = "";
        

[Description("this field is left blank only if the Unit Ventilator is connected to a central de" +
    "dicated outdoor air (DOA) via AirTerminal:SingleDuct:Mixer object")]
[JsonProperty("exhaust_air_node_name")]
public string ExhaustAirNodeName { get; set; } = "";
        

[Description("inlet to coils this field is left blank only if the Unit Ventilator is connected " +
    "to a central dedicated outdoor air (DOA) via AirTerminal:SingleDuct:Mixer object" +
    "")]
[JsonProperty("mixed_air_node_name")]
public string MixedAirNodeName { get; set; } = "";
        

[Description("Allowable fan types are Fan:ConstantVolume, Fan:OnOff, Fan:VariableVolume, and Fa" +
    "n:SystemModel")]
[JsonProperty("supply_air_fan_object_type")]
public ZoneHVAC_UnitVentilator_SupplyAirFanObjectType SupplyAirFanObjectType { get; set; } = (ZoneHVAC_UnitVentilator_SupplyAirFanObjectType)Enum.Parse(typeof(ZoneHVAC_UnitVentilator_SupplyAirFanObjectType), "FanConstantVolume");
        

[JsonProperty("supply_air_fan_name")]
public string SupplyAirFanName { get; set; } = "";
        

[JsonProperty("coil_option")]
public ZoneHVAC_UnitVentilator_CoilOption CoilOption { get; set; } = (ZoneHVAC_UnitVentilator_CoilOption)Enum.Parse(typeof(ZoneHVAC_UnitVentilator_CoilOption), "Cooling");
        

[Description(@"Enter the name of a schedule that controls fan operation. Schedule name values of 0 denote cycling fan operation (fan cycles with cooling/heating coil). Schedule values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this input field is left blank.")]
[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        

[JsonProperty("heating_coil_object_type")]
public ZoneHVAC_UnitVentilator_HeatingCoilObjectType HeatingCoilObjectType { get; set; } = (ZoneHVAC_UnitVentilator_HeatingCoilObjectType)Enum.Parse(typeof(ZoneHVAC_UnitVentilator_HeatingCoilObjectType), "CoilHeatingElectric");
        

[JsonProperty("heating_coil_name")]
public string HeatingCoilName { get; set; } = "";
        

[JsonProperty("heating_convergence_tolerance")]
public System.Nullable<float> HeatingConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[JsonProperty("cooling_coil_object_type")]
public ZoneHVAC_UnitVentilator_CoolingCoilObjectType CoolingCoilObjectType { get; set; } = (ZoneHVAC_UnitVentilator_CoolingCoilObjectType)Enum.Parse(typeof(ZoneHVAC_UnitVentilator_CoolingCoilObjectType), "CoilCoolingWater");
        

[JsonProperty("cooling_coil_name")]
public string CoolingCoilName { get; set; } = "";
        

[JsonProperty("cooling_convergence_tolerance")]
public System.Nullable<float> CoolingConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[Description("Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty("availability_manager_list_name")]
public string AvailabilityManagerListName { get; set; } = "";
        

[Description("Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
    }
    
    public enum ZoneHVAC_UnitVentilator_OutdoorAirControlType
    {
        
        [JsonProperty("FixedAmount")]
        FixedAmount = 0,
        
        [JsonProperty("FixedTemperature")]
        FixedTemperature = 1,
        
        [JsonProperty("VariablePercent")]
        VariablePercent = 2,
    }
    
    public enum ZoneHVAC_UnitVentilator_SupplyAirFanObjectType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 2,
        
        [JsonProperty("Fan:VariableVolume")]
        FanVariableVolume = 3,
    }
    
    public enum ZoneHVAC_UnitVentilator_CoilOption
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Heating")]
        Heating = 1,
        
        [JsonProperty("HeatingAndCooling")]
        HeatingAndCooling = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum ZoneHVAC_UnitVentilator_HeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum ZoneHVAC_UnitVentilator_CoolingCoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 0,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 1,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatExchangerAssisted")]
        CoilSystemCoolingWaterHeatExchangerAssisted = 2,
    }
    
    [Description("Unit heater. Forced-convection heating-only unit with supply fan, heating coil (g" +
        "as, electric, hot water, or steam) and fixed-position outdoor air mixer.")]
    [JsonObject("ZoneHVAC:UnitHeater")]
    public class ZoneHVAC_UnitHeater : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("air_inlet_node_name")]
public string AirInletNodeName { get; set; } = "";
        

[JsonProperty("air_outlet_node_name")]
public string AirOutletNodeName { get; set; } = "";
        

[Description("Allowable fan types are Fan:ConstantVolume, Fan:OnOff, Fan:VariableVolume and Fan" +
    ":SystemModel")]
[JsonProperty("supply_air_fan_object_type")]
public ZoneHVAC_UnitHeater_SupplyAirFanObjectType SupplyAirFanObjectType { get; set; } = (ZoneHVAC_UnitHeater_SupplyAirFanObjectType)Enum.Parse(typeof(ZoneHVAC_UnitHeater_SupplyAirFanObjectType), "FanConstantVolume");
        

[JsonProperty("supply_air_fan_name")]
public string SupplyAirFanName { get; set; } = "";
        

[JsonProperty("maximum_supply_air_flow_rate")]
public string MaximumSupplyAirFlowRate { get; set; } = "";
        

[JsonProperty("heating_coil_object_type")]
public ZoneHVAC_UnitHeater_HeatingCoilObjectType HeatingCoilObjectType { get; set; } = (ZoneHVAC_UnitHeater_HeatingCoilObjectType)Enum.Parse(typeof(ZoneHVAC_UnitHeater_HeatingCoilObjectType), "CoilHeatingElectric");
        

[JsonProperty("heating_coil_name")]
public string HeatingCoilName { get; set; } = "";
        

[Description(@"Enter the name of a schedule that controls fan operation. Schedule name values of 0 denote cycling fan operation (fan cycles with the heating coil). Schedule values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this input field is left blank.")]
[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        

[Description(@"This choice field allows the user to define how the unit heater will operate under ""no heating load"" or cooling conditions. If the ""No"" is selected, then the fan will not run unless there is a heating load. If the fan does not run, this effectively shuts the unit heater system off when there is no heating load. If the ""Yes"" is selected, the unit heater is available and has a ConstantVolume fan, or has an OnOff fan with ""Supply Air Fan Operating Mode Schedule"" value greater than zero, then the fan will always run regardless of the zone load.")]
[JsonProperty("supply_air_fan_operation_during_no_heating")]
public ZoneHVAC_UnitHeater_SupplyAirFanOperationDuringNoHeating SupplyAirFanOperationDuringNoHeating { get; set; } = (ZoneHVAC_UnitHeater_SupplyAirFanOperationDuringNoHeating)Enum.Parse(typeof(ZoneHVAC_UnitHeater_SupplyAirFanOperationDuringNoHeating), "No");
        

[Description("Not used when heating coil is gas or electric")]
[JsonProperty("maximum_hot_water_or_steam_flow_rate")]
public string MaximumHotWaterOrSteamFlowRate { get; set; } = "";
        

[Description("Not used when heating coil is gas or electric")]
[JsonProperty("minimum_hot_water_or_steam_flow_rate")]
public System.Nullable<float> MinimumHotWaterOrSteamFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_convergence_tolerance")]
public System.Nullable<float> HeatingConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[Description("Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty("availability_manager_list_name")]
public string AvailabilityManagerListName { get; set; } = "";
        

[Description("Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
    }
    
    public enum ZoneHVAC_UnitHeater_SupplyAirFanObjectType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 2,
        
        [JsonProperty("Fan:VariableVolume")]
        FanVariableVolume = 3,
    }
    
    public enum ZoneHVAC_UnitHeater_HeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum ZoneHVAC_UnitHeater_SupplyAirFanOperationDuringNoHeating
    {
        
        [JsonProperty("No")]
        No = 0,
        
        [JsonProperty("Yes")]
        Yes = 1,
    }
    
    [Description("Zone evaporative cooler. Forced-convection cooling-only unit with supply fan, 100" +
        "% outdoor air supply. Optional relief exhaust node")]
    [JsonObject("ZoneHVAC:EvaporativeCoolerUnit")]
    public class ZoneHVAC_EvaporativeCoolerUnit : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty("availability_manager_list_name")]
public string AvailabilityManagerListName { get; set; } = "";
        

[Description("this is an outdoor air node")]
[JsonProperty("outdoor_air_inlet_node_name")]
public string OutdoorAirInletNodeName { get; set; } = "";
        

[Description("this is a zone inlet node")]
[JsonProperty("cooler_outlet_node_name")]
public string CoolerOutletNodeName { get; set; } = "";
        

[Description("this is a zone exhaust node, optional if flow is being balanced elsewhere")]
[JsonProperty("zone_relief_air_node_name")]
public string ZoneReliefAirNodeName { get; set; } = "";
        

[JsonProperty("supply_air_fan_object_type")]
public ZoneHVAC_EvaporativeCoolerUnit_SupplyAirFanObjectType SupplyAirFanObjectType { get; set; } = (ZoneHVAC_EvaporativeCoolerUnit_SupplyAirFanObjectType)Enum.Parse(typeof(ZoneHVAC_EvaporativeCoolerUnit_SupplyAirFanObjectType), "FanComponentModel");
        

[JsonProperty("supply_air_fan_name")]
public string SupplyAirFanName { get; set; } = "";
        

[JsonProperty("design_supply_air_flow_rate")]
public string DesignSupplyAirFlowRate { get; set; } = "";
        

[JsonProperty("fan_placement")]
public ZoneHVAC_EvaporativeCoolerUnit_FanPlacement FanPlacement { get; set; } = (ZoneHVAC_EvaporativeCoolerUnit_FanPlacement)Enum.Parse(typeof(ZoneHVAC_EvaporativeCoolerUnit_FanPlacement), "BlowThrough");
        

[JsonProperty("cooler_unit_control_method")]
public ZoneHVAC_EvaporativeCoolerUnit_CoolerUnitControlMethod CoolerUnitControlMethod { get; set; } = (ZoneHVAC_EvaporativeCoolerUnit_CoolerUnitControlMethod)Enum.Parse(typeof(ZoneHVAC_EvaporativeCoolerUnit_CoolerUnitControlMethod), "ZoneCoolingLoadOnOffCycling");
        

[Description("used for ZoneTemperatureDeadbandOnOffCycling hystersis range for thermostatic con" +
    "trol")]
[JsonProperty("throttling_range_temperature_difference")]
public System.Nullable<float> ThrottlingRangeTemperatureDifference { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Sign convention is that positive values indicate a cooling load")]
[JsonProperty("cooling_load_control_threshold_heat_transfer_rate")]
public System.Nullable<float> CoolingLoadControlThresholdHeatTransferRate { get; set; } = (System.Nullable<float>)Single.Parse("100", CultureInfo.InvariantCulture);
        

[JsonProperty("first_evaporative_cooler_object_type")]
public ZoneHVAC_EvaporativeCoolerUnit_FirstEvaporativeCoolerObjectType FirstEvaporativeCoolerObjectType { get; set; } = (ZoneHVAC_EvaporativeCoolerUnit_FirstEvaporativeCoolerObjectType)Enum.Parse(typeof(ZoneHVAC_EvaporativeCoolerUnit_FirstEvaporativeCoolerObjectType), "EvaporativeCoolerDirectCelDekPad");
        

[JsonProperty("first_evaporative_cooler_object_name")]
public string FirstEvaporativeCoolerObjectName { get; set; } = "";
        

[Description("optional, used for direct/indirect configurations second cooler must be immediate" +
    "ly downstream of first cooler, if present")]
[JsonProperty("second_evaporative_cooler_object_type")]
public ZoneHVAC_EvaporativeCoolerUnit_SecondEvaporativeCoolerObjectType SecondEvaporativeCoolerObjectType { get; set; } = (ZoneHVAC_EvaporativeCoolerUnit_SecondEvaporativeCoolerObjectType)Enum.Parse(typeof(ZoneHVAC_EvaporativeCoolerUnit_SecondEvaporativeCoolerObjectType), "EvaporativeCoolerDirectCelDekPad");
        

[Description("optional, used for direct/indirect configurations")]
[JsonProperty("second_evaporative_cooler_name")]
public string SecondEvaporativeCoolerName { get; set; } = "";
        

[Description("Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
    }
    
    public enum ZoneHVAC_EvaporativeCoolerUnit_SupplyAirFanObjectType
    {
        
        [JsonProperty("Fan:ComponentModel")]
        FanComponentModel = 0,
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 1,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 2,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 3,
        
        [JsonProperty("Fan:VariableVolume")]
        FanVariableVolume = 4,
    }
    
    public enum ZoneHVAC_EvaporativeCoolerUnit_FanPlacement
    {
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 0,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 1,
    }
    
    public enum ZoneHVAC_EvaporativeCoolerUnit_CoolerUnitControlMethod
    {
        
        [JsonProperty("ZoneCoolingLoadOnOffCycling")]
        ZoneCoolingLoadOnOffCycling = 0,
        
        [JsonProperty("ZoneCoolingLoadVariableSpeedFan")]
        ZoneCoolingLoadVariableSpeedFan = 1,
        
        [JsonProperty("ZoneTemperatureDeadbandOnOffCycling")]
        ZoneTemperatureDeadbandOnOffCycling = 2,
    }
    
    public enum ZoneHVAC_EvaporativeCoolerUnit_FirstEvaporativeCoolerObjectType
    {
        
        [JsonProperty("EvaporativeCooler:Direct:CelDekPad")]
        EvaporativeCoolerDirectCelDekPad = 0,
        
        [JsonProperty("EvaporativeCooler:Direct:ResearchSpecial")]
        EvaporativeCoolerDirectResearchSpecial = 1,
        
        [JsonProperty("EvaporativeCooler:Indirect:CelDekPad")]
        EvaporativeCoolerIndirectCelDekPad = 2,
        
        [JsonProperty("EvaporativeCooler:Indirect:ResearchSpecial")]
        EvaporativeCoolerIndirectResearchSpecial = 3,
        
        [JsonProperty("EvaporativeCooler:Indirect:WetCoil")]
        EvaporativeCoolerIndirectWetCoil = 4,
    }
    
    public enum ZoneHVAC_EvaporativeCoolerUnit_SecondEvaporativeCoolerObjectType
    {
        
        [JsonProperty("EvaporativeCooler:Direct:CelDekPad")]
        EvaporativeCoolerDirectCelDekPad = 0,
        
        [JsonProperty("EvaporativeCooler:Direct:ResearchSpecial")]
        EvaporativeCoolerDirectResearchSpecial = 1,
        
        [JsonProperty("EvaporativeCooler:Indirect:CelDekPad")]
        EvaporativeCoolerIndirectCelDekPad = 2,
        
        [JsonProperty("EvaporativeCooler:Indirect:ResearchSpecial")]
        EvaporativeCoolerIndirectResearchSpecial = 3,
        
        [JsonProperty("EvaporativeCooler:Indirect:WetCoil")]
        EvaporativeCoolerIndirectWetCoil = 4,
    }
    
    [Description(@"Hybrid Unitary HVAC. A black box model for multi-mode packaged forced air equipment. Independent variables include outdoor air conditions and indoor air conditions. Controlled inputs include operating mode, supply air flow rate, and outdoor air faction. Emperical lookup tables are required to map supply air temperature supply air humidity, electricity use, fuel uses, water use, fan electricity use, and external static pressure as a function of each indpednent varaible and each controlled input. In each timestep the model will choose one or more combinations of settings for mode, supply air flow rate, outdoor air faction, and part runtime fraction so as to satisfy zone requests for sensible cooling, heating, ventilation, and/or dehumidification with the least resource consumption. Equipment in this class may consume electricity, water, and up to two additional fuel types.")]
    [JsonObject("ZoneHVAC:HybridUnitaryHVAC")]
    public class ZoneHVAC_HybridUnitaryHVAC : BHoMObject, IEnergyPlusClass
    {
        

[Description("Enter the availability schedule name for this system. Schedule value > 0 means th" +
    "e system is available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty("availability_manager_list_name")]
public string AvailabilityManagerListName { get; set; } = "";
        

[Description("Values in this schedule are used as a constraint in choosing the feasible setting" +
    "s for supply air flow rate and ouside air fraction in each operating mode. If th" +
    "is field is blank, no minimum is imposed.")]
[JsonProperty("minimum_supply_air_temperature_schedule_name")]
public string MinimumSupplyAirTemperatureScheduleName { get; set; } = "";
        

[Description("Values in this schedule are used as a constraint in choosing the feasible setting" +
    "s for supply air flow rate and outdoor air fraction in each operating mode. If t" +
    "his field is blank, no maximum is imposed.")]
[JsonProperty("maximum_supply_air_temperature_schedule_name")]
public string MaximumSupplyAirTemperatureScheduleName { get; set; } = "";
        

[Description("Values in this schedule are used as a constraint in choosing the feasible setting" +
    "s for supply air flow rate and outdoor air fraction in each operating mode. If t" +
    "his field is blank, no minimum is imposed.")]
[JsonProperty("minimum_supply_air_humidity_ratio_schedule_name")]
public string MinimumSupplyAirHumidityRatioScheduleName { get; set; } = "";
        

[Description("Values in this schedule are used as a constraint in choosing the feasible setting" +
    "s for supply air flow rate and outdoor air fraction in each operating mode. If t" +
    "his field is blank, no maximum is imposed.")]
[JsonProperty("maximum_supply_air_humidity_ratio_schedule_name")]
public string MaximumSupplyAirHumidityRatioScheduleName { get; set; } = "";
        

[Description(@"Select the method that will be used to choose operating mode(s), supply air flow rate(s), outdoor air fraction(s) and part runtime fraction(s) in each time step. ""Automatic"" = chooses controlled inputs and part runtime fraction(s) to minimize resource use within each time step while best satisfying requested sensible cooling, dehumidification and ventilation, and subject to constraints. ""User Defined"" = EMS will be used to choose controlled inputs and part runtime fraction(s) in each time step. If this field is blank, default to ""Automatic"".")]
[JsonProperty("method_to_choose_controlled_inputs_and_part_runtime_fraction")]
public ZoneHVAC_HybridUnitaryHVAC_MethodToChooseControlledInputsAndPartRuntimeFraction MethodToChooseControlledInputsAndPartRuntimeFraction { get; set; } = (ZoneHVAC_HybridUnitaryHVAC_MethodToChooseControlledInputsAndPartRuntimeFraction)Enum.Parse(typeof(ZoneHVAC_HybridUnitaryHVAC_MethodToChooseControlledInputsAndPartRuntimeFraction), "Automatic");
        

[Description("Return air node for the hybrid unit must be a zone exhaust node.")]
[JsonProperty("return_air_node_name")]
public string ReturnAirNodeName { get; set; } = "";
        

[Description("Outdoor air node for the hybrid unit must be an outdoor air node.")]
[JsonProperty("outdoor_air_node_name")]
public string OutdoorAirNodeName { get; set; } = "";
        

[Description("Supply air node for the hybrid unit must be a zone air inlet node.")]
[JsonProperty("supply_air_node_name")]
public string SupplyAirNodeName { get; set; } = "";
        

[Description("Relief node for the hybrid unit must be a zone exhaust node, unless flow is being" +
    " balanced elsewhere.")]
[JsonProperty("relief_node_name")]
public string ReliefNodeName { get; set; } = "";
        

[Description(@"The value in this field represents the maximum supply air volume flow rate among all operating modes. Values of extensive variables in lookup tables are normalized by the system maximum supply air mass flow rate that was used to build performance curves. The value in this field is used to rescale the output from exenstive variables to a desired system size.")]
[JsonProperty("system_maximum_supply_air_flow_rate")]
public System.Nullable<float> SystemMaximumSupplyAirFlowRate { get; set; } = null;
        

[Description(@"Input the external static pressure when the system operates at maximum supply air flow rate. Fan affinity laws are used to scale supply fan power from the values tabulated in lookup tables, to values that match the external static pressure input to this field. If this field is blank, the supply fan power is not scaled from the values tabulated in lookup tables.")]
[JsonProperty("external_static_pressure_at_system_maximum_supply_air_flow_rate")]
public System.Nullable<float> ExternalStaticPressureAtSystemMaximumSupplyAirFlowRate { get; set; } = null;
        

[Description("This field specifies if the fan heat is accounted for in the lookup tables.")]
[JsonProperty("fan_heat_included_in_lookup_tables")]
public EmptyNoYes FanHeatIncludedInLookupTables { get; set; } = (EmptyNoYes)Enum.Parse(typeof(EmptyNoYes), "No");
        

[Description("This field specifies where to add the fan heat in the air stream.")]
[JsonProperty("fan_heat_gain_location")]
public ZoneHVAC_HybridUnitaryHVAC_FanHeatGainLocation FanHeatGainLocation { get; set; } = (ZoneHVAC_HybridUnitaryHVAC_FanHeatGainLocation)Enum.Parse(typeof(ZoneHVAC_HybridUnitaryHVAC_FanHeatGainLocation), "SupplyAirStream");
        

[Description("0.0 means no fan heat is added to the air stream, 1.0 means all fan heat is added" +
    " to the air stream.")]
[JsonProperty("fan_heat_in_air_stream_fraction")]
public System.Nullable<float> FanHeatInAirStreamFraction { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("The value in this field scales all extensive performance variables including: sup" +
    "ply air mass flow rate, fuel uses, and water use. If this field is blank, the de" +
    "fault scaling factor is 1.")]
[JsonProperty("scaling_factor")]
public System.Nullable<float> ScalingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description(@"Any mode selected will not operate for less time than the value input in this field. If the value in this field is larger than each timestep, the mode selected in one time step will persist in later time steps until the minimum time between mode change is satisfied. Supply air mass flow rate and outdoor air fraction within a mode are not subject to minimum runtime and may change in every time step. Mode 0 does not have a minimum time. If this field is blank, the default minimum time between mode change is 10 minutes.")]
[JsonProperty("minimum_time_between_mode_change")]
public System.Nullable<float> MinimumTimeBetweenModeChange { get; set; } = (System.Nullable<float>)Single.Parse("10", CultureInfo.InvariantCulture);
        

[Description("Select the fuel type associated with field: \"System Electric Power Lookup Table\" " +
    "in each mode. If this field is blank, default first fuel type = Electricity.")]
[JsonProperty("first_fuel_type")]
public ZoneHVAC_HybridUnitaryHVAC_FirstFuelType FirstFuelType { get; set; } = (ZoneHVAC_HybridUnitaryHVAC_FirstFuelType)Enum.Parse(typeof(ZoneHVAC_HybridUnitaryHVAC_FirstFuelType), "Electricity");
        

[Description("Select the fuel type associated with field: \"System Second Fuel Consumption Looku" +
    "p Table\" in each mode. If this field is blank, default second fuel type = None.")]
[JsonProperty("second_fuel_type")]
public ZoneHVAC_HybridUnitaryHVAC_SecondFuelType SecondFuelType { get; set; } = (ZoneHVAC_HybridUnitaryHVAC_SecondFuelType)Enum.Parse(typeof(ZoneHVAC_HybridUnitaryHVAC_SecondFuelType), "None");
        

[Description("Select the fuel type associated with field: \"System Third Fuel Consumption Lookup" +
    " Table\" in each mode. If this field is blank, default third fuel type = None.")]
[JsonProperty("third_fuel_type")]
public ZoneHVAC_HybridUnitaryHVAC_ThirdFuelType ThirdFuelType { get; set; } = (ZoneHVAC_HybridUnitaryHVAC_ThirdFuelType)Enum.Parse(typeof(ZoneHVAC_HybridUnitaryHVAC_ThirdFuelType), "None");
        

[Description("In each time step, controlled variables will be chosen to minimize the selection " +
    "in this field, subject to constraints. If this field is blank, the objective fun" +
    "ction will minimize electricity use.")]
[JsonProperty("objective_function_to_minimize")]
public ZoneHVAC_HybridUnitaryHVAC_ObjectiveFunctionToMinimize ObjectiveFunctionToMinimize { get; set; } = (ZoneHVAC_HybridUnitaryHVAC_ObjectiveFunctionToMinimize)Enum.Parse(typeof(ZoneHVAC_HybridUnitaryHVAC_ObjectiveFunctionToMinimize), "Empty");
        

[Description(@"Enter the name of a DesignSpecification:OutdoorAir object. Information in that object will be used to compute the minimum outdoor air flow rate in each time step. If this field is blank, the system may still supply outdoor air, if it is capable as described by lookup tables, when doing so is the most efficient way to satisfy other constraints.")]
[JsonProperty("design_specification_outdoor_air_object_name")]
public string DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        

[Description(@"Enter a name for Mode 0. Mode 0 describes equipment performance in standby. Mode 0 is usually characterized by electricity use for controls and crankcase heaters, or other standby resouce consumption. Mode 0 will be chosen for any timestep, or portion of timestep, when no ventilation, cooling, humidification, or dehumidification is required. Mode 0 is available at any environmental condition.")]
[JsonProperty("mode_0_name")]
public string Mode0Name { get; set; } = "";
        

[Description(@"Enter the name of the Supply Air Temperature Lookup Table for Mode 0. Units for lookup table values should be in C. If this field is blank, Mode 0 will not be considered for any period that requires ventilation, heating, cooling, humidification, or dehumidification. If this field is blank, when Mode 0 is chosen (during standby periods) the supply air temperature will equal the return air temperature.")]
[JsonProperty("mode_0_supply_air_temperature_lookup_table_name")]
public string Mode0SupplyAirTemperatureLookupTableName { get; set; } = "";
        

[Description(@"Enter the name of the Supply Air Humidity Ratio Lookup Table for Mode 0. Units for lookup table values should be in kgWater/kgDryAir. If this field is blank, Mode 0 will not be considered for any period that requires ventilation, heating, cooling, humidification, or dehumidification. If this field is blank, when Mode 0 is chosen (during standby periods) the supply air humidty ratio will equal the return air humidity ratio.")]
[JsonProperty("mode_0_supply_air_humidity_ratio_lookup_table_name")]
public string Mode0SupplyAirHumidityRatioLookupTableName { get; set; } = "";
        

[Description("Enter the name of the Electric Power Lookup Table for Mode 0. Units for lookup ta" +
    "ble values should be in W. If this field is blank, Mode 0 does not consume elect" +
    "ricity.")]
[JsonProperty("mode_0_system_electric_power_lookup_table_name")]
public string Mode0SystemElectricPowerLookupTableName { get; set; } = "";
        

[Description("Enter the name of the Supply Fan Electric Power Lookup Table for Mode 0. Units fo" +
    "r lookup table values should be in W. If this field is blank, Mode 0 does not co" +
    "nsume electricity for supply fan.")]
[JsonProperty("mode_0_supply_fan_electric_power_lookup_table_name")]
public string Mode0SupplyFanElectricPowerLookupTableName { get; set; } = "";
        

[Description("Enter the name of the External Static Pressure Lookup Table for Mode 0. Units for" +
    " lookup table values should be in Pa. If this field is blank, external static pr" +
    "essure will not be reported.")]
[JsonProperty("mode_0_external_static_pressure_lookup_table_name")]
public string Mode0ExternalStaticPressureLookupTableName { get; set; } = "";
        

[Description("Enter the name of the System Second Fuel Consumption Lookup Table for Mode 0. Uni" +
    "ts for lookup table values should be in W. If this field is blank, Mode 0 does n" +
    "ot consume a second fuel.")]
[JsonProperty("mode_0_system_second_fuel_consumption_lookup_table_name")]
public string Mode0SystemSecondFuelConsumptionLookupTableName { get; set; } = "";
        

[Description("Enter the name of the System Third Fuel Consumption Lookup Table for Mode 0. Unit" +
    "s for lookup table values should be in W. If this field is blank, Mode 0 does no" +
    "t consume a third fuel.")]
[JsonProperty("mode_0_system_third_fuel_consumption_lookup_table_name")]
public string Mode0SystemThirdFuelConsumptionLookupTableName { get; set; } = "";
        

[Description("Enter the name of the System Water Use Lookup Table for Mode 0. Units for lookup " +
    "table values should be in kg/s. If this field is blank, Mode 0 does not consume " +
    "water.")]
[JsonProperty("mode_0_system_water_use_lookup_table_name")]
public string Mode0SystemWaterUseLookupTableName { get; set; } = "";
        

[Description("Enter the outdoor air fraction for Mode 0. If this field is blank, the outdoor ai" +
    "r fraction for Mode 0 will be 0.00.")]
[JsonProperty("mode_0_outdoor_air_fraction")]
public System.Nullable<float> Mode0OutdoorAirFraction { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"Enter the supply air mass flow rate ratio for Mode 0. The value in this field will be used to determine the supply air mass flow rate in Mode 0. Supply air mass flow rate ratio describes supply air mass flow rate as a fraction of mass flow rate associated with the value in field: ""System Maximum Supply Air Flow Rate"". If this field is blank, the supply air mass flow rate ratio for Mode 0 will be 0.")]
[JsonProperty("mode_0_supply_air_mass_flow_rate_ratio")]
public System.Nullable<float> Mode0SupplyAirMassFlowRateRatio { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("modes")]
public string Modes { get; set; } = "";
    }
    
    public enum ZoneHVAC_HybridUnitaryHVAC_MethodToChooseControlledInputsAndPartRuntimeFraction
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Automatic")]
        Automatic = 1,
        
        [JsonProperty("User Defined")]
        UserDefined = 2,
    }
    
    public enum ZoneHVAC_HybridUnitaryHVAC_FanHeatGainLocation
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MixedAirStream")]
        MixedAirStream = 1,
        
        [JsonProperty("SupplyAirStream")]
        SupplyAirStream = 2,
    }
    
    public enum ZoneHVAC_HybridUnitaryHVAC_FirstFuelType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Coal")]
        Coal = 1,
        
        [JsonProperty("Diesel")]
        Diesel = 2,
        
        [JsonProperty("DistrictCooling")]
        DistrictCooling = 3,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 4,
        
        [JsonProperty("Electricity")]
        Electricity = 5,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 6,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 7,
        
        [JsonProperty("Gasoline")]
        Gasoline = 8,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 9,
        
        [JsonProperty("None")]
        None = 10,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 11,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 12,
        
        [JsonProperty("Propane")]
        Propane = 13,
        
        [JsonProperty("Steam")]
        Steam = 14,
    }
    
    public enum ZoneHVAC_HybridUnitaryHVAC_SecondFuelType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Coal")]
        Coal = 1,
        
        [JsonProperty("Diesel")]
        Diesel = 2,
        
        [JsonProperty("DistrictCooling")]
        DistrictCooling = 3,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 4,
        
        [JsonProperty("Electricity")]
        Electricity = 5,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 6,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 7,
        
        [JsonProperty("Gasoline")]
        Gasoline = 8,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 9,
        
        [JsonProperty("None")]
        None = 10,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 11,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 12,
        
        [JsonProperty("Propane")]
        Propane = 13,
        
        [JsonProperty("Steam")]
        Steam = 14,
    }
    
    public enum ZoneHVAC_HybridUnitaryHVAC_ThirdFuelType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Coal")]
        Coal = 1,
        
        [JsonProperty("Diesel")]
        Diesel = 2,
        
        [JsonProperty("DistrictCooling")]
        DistrictCooling = 3,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 4,
        
        [JsonProperty("Electricity")]
        Electricity = 5,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo1 = 6,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo2 = 7,
        
        [JsonProperty("Gasoline")]
        Gasoline = 8,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 9,
        
        [JsonProperty("None")]
        None = 10,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel1 = 11,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel2 = 12,
        
        [JsonProperty("Propane")]
        Propane = 13,
        
        [JsonProperty("Steam")]
        Steam = 14,
    }
    
    public enum ZoneHVAC_HybridUnitaryHVAC_ObjectiveFunctionToMinimize
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Electricity Use")]
        ElectricityUse = 1,
        
        [JsonProperty("Second Fuel Use")]
        SecondFuelUse = 2,
        
        [JsonProperty("Third Fuel Use")]
        ThirdFuelUse = 3,
        
        [JsonProperty("Water Use")]
        WaterUse = 4,
    }
    
    [Description("The zone outdoor air unit models a single-zone dedicated outdoor air system (DOAS" +
        "). Forced-convection 100% outdoor air unit with supply fan and optional equipmen" +
        "t including exhaust fan, heating coil, cooling coil, and heat recovery.")]
    [JsonObject("ZoneHVAC:OutdoorAirUnit")]
    public class ZoneHVAC_OutdoorAirUnit : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("(name of zone system is serving)")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[JsonProperty("outdoor_air_flow_rate")]
public string OutdoorAirFlowRate { get; set; } = "";
        

[JsonProperty("outdoor_air_schedule_name")]
public string OutdoorAirScheduleName { get; set; } = "";
        

[Description("Allowable fan types are Fan:SystemModel and Fan:ConstantVolume and Fan:VariableVo" +
    "lume")]
[JsonProperty("supply_fan_name")]
public string SupplyFanName { get; set; } = "";
        

[JsonProperty("supply_fan_placement")]
public ZoneHVAC_OutdoorAirUnit_SupplyFanPlacement SupplyFanPlacement { get; set; } = (ZoneHVAC_OutdoorAirUnit_SupplyFanPlacement)Enum.Parse(typeof(ZoneHVAC_OutdoorAirUnit_SupplyFanPlacement), "DrawThrough");
        

[Description("Allowable fan types are Fan:SystemModel and Fan:ConstantVolume and Fan:VariableVo" +
    "lume Fan:VariableVolume")]
[JsonProperty("exhaust_fan_name")]
public string ExhaustFanName { get; set; } = "";
        

[JsonProperty("exhaust_air_flow_rate")]
public string ExhaustAirFlowRate { get; set; } = "";
        

[JsonProperty("exhaust_air_schedule_name")]
public string ExhaustAirScheduleName { get; set; } = "";
        

[JsonProperty("unit_control_type")]
public ZoneHVAC_OutdoorAirUnit_UnitControlType UnitControlType { get; set; } = (ZoneHVAC_OutdoorAirUnit_UnitControlType)Enum.Parse(typeof(ZoneHVAC_OutdoorAirUnit_UnitControlType), "NeutralControl");
        

[Description(@"Air and control temperatures for cooling. If outdoor air temperature is above the high air control temperature, then the zone inlet air temperature is set to the high air control temperature. If the outdoor air is between high and low air control temperature, then there is no cooling/heating requirements.")]
[JsonProperty("high_air_control_temperature_schedule_name")]
public string HighAirControlTemperatureScheduleName { get; set; } = "";
        

[Description(@"Air and control temperatures for Heating. If outdoor air temperature is below the low air control temperature, then the zone inlet air temperature is set to the low air control temperature. If the outdoor air is between high and low air control temperature, then there is no cooling/heating requirements.")]
[JsonProperty("low_air_control_temperature_schedule_name")]
public string LowAirControlTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("outdoor_air_node_name")]
public string OutdoorAirNodeName { get; set; } = "";
        

[JsonProperty("airoutlet_node_name")]
public string AiroutletNodeName { get; set; } = "";
        

[Description("air leaves zone")]
[JsonProperty("airinlet_node_name")]
public string AirinletNodeName { get; set; } = "";
        

[JsonProperty("supply_fanoutlet_node_name")]
public string SupplyFanoutletNodeName { get; set; } = "";
        

[Description("Enter the name of an ZoneHVAC:OutdoorAirUnit:EquipmentList object.")]
[JsonProperty("outdoor_air_unit_list_name")]
public string OutdoorAirUnitListName { get; set; } = "";
        

[Description("Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty("availability_manager_list_name")]
public string AvailabilityManagerListName { get; set; } = "";
    }
    
    public enum ZoneHVAC_OutdoorAirUnit_SupplyFanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum ZoneHVAC_OutdoorAirUnit_UnitControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("NeutralControl")]
        NeutralControl = 1,
        
        [JsonProperty("TemperatureControl")]
        TemperatureControl = 2,
    }
    
    [Description("Equipment list for components in a ZoneHVAC:OutdoorAirUnit. Components are simula" +
        "ted sequentially in the order given in the equipment list.")]
    [JsonObject("ZoneHVAC:OutdoorAirUnit:EquipmentList")]
    public class ZoneHVAC_OutdoorAirUnit_EquipmentList : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("component_1_object_type")]
public ZoneHVAC_OutdoorAirUnit_EquipmentList_Component1ObjectType Component1ObjectType { get; set; } = (ZoneHVAC_OutdoorAirUnit_EquipmentList_Component1ObjectType)Enum.Parse(typeof(ZoneHVAC_OutdoorAirUnit_EquipmentList_Component1ObjectType), "AirLoopHVACUnitarySystem");
        

[JsonProperty("component_1_name")]
public string Component1Name { get; set; } = "";
        

[JsonProperty("component_2_object_type")]
public ZoneHVAC_OutdoorAirUnit_EquipmentList_Component2ObjectType Component2ObjectType { get; set; } = (ZoneHVAC_OutdoorAirUnit_EquipmentList_Component2ObjectType)Enum.Parse(typeof(ZoneHVAC_OutdoorAirUnit_EquipmentList_Component2ObjectType), "AirLoopHVACUnitarySystem");
        

[JsonProperty("component_2_name")]
public string Component2Name { get; set; } = "";
        

[JsonProperty("component_3_object_type")]
public ZoneHVAC_OutdoorAirUnit_EquipmentList_Component3ObjectType Component3ObjectType { get; set; } = (ZoneHVAC_OutdoorAirUnit_EquipmentList_Component3ObjectType)Enum.Parse(typeof(ZoneHVAC_OutdoorAirUnit_EquipmentList_Component3ObjectType), "AirLoopHVACUnitarySystem");
        

[JsonProperty("component_3_name")]
public string Component3Name { get; set; } = "";
        

[JsonProperty("component_4_object_type")]
public ZoneHVAC_OutdoorAirUnit_EquipmentList_Component4ObjectType Component4ObjectType { get; set; } = (ZoneHVAC_OutdoorAirUnit_EquipmentList_Component4ObjectType)Enum.Parse(typeof(ZoneHVAC_OutdoorAirUnit_EquipmentList_Component4ObjectType), "AirLoopHVACUnitarySystem");
        

[JsonProperty("component_4_name")]
public string Component4Name { get; set; } = "";
        

[JsonProperty("component_5_object_type")]
public ZoneHVAC_OutdoorAirUnit_EquipmentList_Component5ObjectType Component5ObjectType { get; set; } = (ZoneHVAC_OutdoorAirUnit_EquipmentList_Component5ObjectType)Enum.Parse(typeof(ZoneHVAC_OutdoorAirUnit_EquipmentList_Component5ObjectType), "AirLoopHVACUnitarySystem");
        

[JsonProperty("component_5_name")]
public string Component5Name { get; set; } = "";
        

[JsonProperty("component_6_object_type")]
public ZoneHVAC_OutdoorAirUnit_EquipmentList_Component6ObjectType Component6ObjectType { get; set; } = (ZoneHVAC_OutdoorAirUnit_EquipmentList_Component6ObjectType)Enum.Parse(typeof(ZoneHVAC_OutdoorAirUnit_EquipmentList_Component6ObjectType), "AirLoopHVACUnitarySystem");
        

[JsonProperty("component_6_name")]
public string Component6Name { get; set; } = "";
        

[JsonProperty("component_7_object_type")]
public ZoneHVAC_OutdoorAirUnit_EquipmentList_Component7ObjectType Component7ObjectType { get; set; } = (ZoneHVAC_OutdoorAirUnit_EquipmentList_Component7ObjectType)Enum.Parse(typeof(ZoneHVAC_OutdoorAirUnit_EquipmentList_Component7ObjectType), "AirLoopHVACUnitarySystem");
        

[JsonProperty("component_7_name")]
public string Component7Name { get; set; } = "";
        

[JsonProperty("component_8_object_type")]
public ZoneHVAC_OutdoorAirUnit_EquipmentList_Component8ObjectType Component8ObjectType { get; set; } = (ZoneHVAC_OutdoorAirUnit_EquipmentList_Component8ObjectType)Enum.Parse(typeof(ZoneHVAC_OutdoorAirUnit_EquipmentList_Component8ObjectType), "AirLoopHVACUnitarySystem");
        

[JsonProperty("component_8_name")]
public string Component8Name { get; set; } = "";
    }
    
    public enum ZoneHVAC_OutdoorAirUnit_EquipmentList_Component1ObjectType
    {
        
        [JsonProperty("AirLoopHVAC:UnitarySystem")]
        AirLoopHVACUnitarySystem = 0,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 1,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 2,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 3,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 4,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 5,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 6,
        
        [JsonProperty("CoilSystem:Cooling:DX")]
        CoilSystemCoolingDX = 7,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatexchangerAssisted")]
        CoilSystemCoolingWaterHeatexchangerAssisted = 8,
        
        [JsonProperty("CoilSystem:Heating:DX")]
        CoilSystemHeatingDX = 9,
        
        [JsonProperty("Dehumidifier:Desiccant:NoFans")]
        DehumidifierDesiccantNoFans = 10,
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 11,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 12,
    }
    
    public enum ZoneHVAC_OutdoorAirUnit_EquipmentList_Component2ObjectType
    {
        
        [JsonProperty("AirLoopHVAC:UnitarySystem")]
        AirLoopHVACUnitarySystem = 0,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 1,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 2,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 3,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 4,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 5,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 6,
        
        [JsonProperty("CoilSystem:Cooling:DX")]
        CoilSystemCoolingDX = 7,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatexchangerAssisted")]
        CoilSystemCoolingWaterHeatexchangerAssisted = 8,
        
        [JsonProperty("CoilSystem:Heating:DX")]
        CoilSystemHeatingDX = 9,
        
        [JsonProperty("Dehumidifier:Desiccant:NoFans")]
        DehumidifierDesiccantNoFans = 10,
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 11,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 12,
    }
    
    public enum ZoneHVAC_OutdoorAirUnit_EquipmentList_Component3ObjectType
    {
        
        [JsonProperty("AirLoopHVAC:UnitarySystem")]
        AirLoopHVACUnitarySystem = 0,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 1,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 2,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 3,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 4,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 5,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 6,
        
        [JsonProperty("CoilSystem:Cooling:DX")]
        CoilSystemCoolingDX = 7,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatexchangerAssisted")]
        CoilSystemCoolingWaterHeatexchangerAssisted = 8,
        
        [JsonProperty("CoilSystem:Heating:DX")]
        CoilSystemHeatingDX = 9,
        
        [JsonProperty("Dehumidifier:Desiccant:NoFans")]
        DehumidifierDesiccantNoFans = 10,
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 11,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 12,
    }
    
    public enum ZoneHVAC_OutdoorAirUnit_EquipmentList_Component4ObjectType
    {
        
        [JsonProperty("AirLoopHVAC:UnitarySystem")]
        AirLoopHVACUnitarySystem = 0,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 1,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 2,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 3,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 4,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 5,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 6,
        
        [JsonProperty("CoilSystem:Cooling:DX")]
        CoilSystemCoolingDX = 7,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatexchangerAssisted")]
        CoilSystemCoolingWaterHeatexchangerAssisted = 8,
        
        [JsonProperty("CoilSystem:Heating:DX")]
        CoilSystemHeatingDX = 9,
        
        [JsonProperty("Dehumidifier:Desiccant:NoFans")]
        DehumidifierDesiccantNoFans = 10,
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 11,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 12,
    }
    
    public enum ZoneHVAC_OutdoorAirUnit_EquipmentList_Component5ObjectType
    {
        
        [JsonProperty("AirLoopHVAC:UnitarySystem")]
        AirLoopHVACUnitarySystem = 0,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 1,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 2,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 3,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 4,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 5,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 6,
        
        [JsonProperty("CoilSystem:Cooling:DX")]
        CoilSystemCoolingDX = 7,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatexchangerAssisted")]
        CoilSystemCoolingWaterHeatexchangerAssisted = 8,
        
        [JsonProperty("CoilSystem:Heating:DX")]
        CoilSystemHeatingDX = 9,
        
        [JsonProperty("Dehumidifier:Desiccant:NoFans")]
        DehumidifierDesiccantNoFans = 10,
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 11,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 12,
    }
    
    public enum ZoneHVAC_OutdoorAirUnit_EquipmentList_Component6ObjectType
    {
        
        [JsonProperty("AirLoopHVAC:UnitarySystem")]
        AirLoopHVACUnitarySystem = 0,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 1,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 2,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 3,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 4,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 5,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 6,
        
        [JsonProperty("CoilSystem:Cooling:DX")]
        CoilSystemCoolingDX = 7,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatexchangerAssisted")]
        CoilSystemCoolingWaterHeatexchangerAssisted = 8,
        
        [JsonProperty("CoilSystem:Heating:DX")]
        CoilSystemHeatingDX = 9,
        
        [JsonProperty("Dehumidifier:Desiccant:NoFans")]
        DehumidifierDesiccantNoFans = 10,
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 11,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 12,
    }
    
    public enum ZoneHVAC_OutdoorAirUnit_EquipmentList_Component7ObjectType
    {
        
        [JsonProperty("AirLoopHVAC:UnitarySystem")]
        AirLoopHVACUnitarySystem = 0,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 1,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 2,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 3,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 4,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 5,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 6,
        
        [JsonProperty("CoilSystem:Cooling:DX")]
        CoilSystemCoolingDX = 7,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatexchangerAssisted")]
        CoilSystemCoolingWaterHeatexchangerAssisted = 8,
        
        [JsonProperty("CoilSystem:Heating:DX")]
        CoilSystemHeatingDX = 9,
        
        [JsonProperty("Dehumidifier:Desiccant:NoFans")]
        DehumidifierDesiccantNoFans = 10,
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 11,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 12,
    }
    
    public enum ZoneHVAC_OutdoorAirUnit_EquipmentList_Component8ObjectType
    {
        
        [JsonProperty("AirLoopHVAC:UnitarySystem")]
        AirLoopHVACUnitarySystem = 0,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 1,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 2,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 3,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 4,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 5,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 6,
        
        [JsonProperty("CoilSystem:Cooling:DX")]
        CoilSystemCoolingDX = 7,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatexchangerAssisted")]
        CoilSystemCoolingWaterHeatexchangerAssisted = 8,
        
        [JsonProperty("CoilSystem:Heating:DX")]
        CoilSystemHeatingDX = 9,
        
        [JsonProperty("Dehumidifier:Desiccant:NoFans")]
        DehumidifierDesiccantNoFans = 10,
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 11,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 12,
    }
    
    [Description(@"A terminal unit with variable refrigerant flow (VRF) DX cooling and heating coils (air-to-air heat pump). The VRF terminal units are served by an AirConditioner:VariableRefrigerantFlow or AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:* system. Terminal units can be configured as zone, air loop or outside air system equipment.")]
    [JsonObject("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")]
    public class ZoneHVAC_TerminalUnit_VariableRefrigerantFlow : BHoMObject, IEnergyPlusClass
    {
        

[Description("The unit is available the entire simulation if this field is left blank Schedule " +
    "values of 0 denote the unit is off.")]
[JsonProperty("terminal_unit_availability_schedule")]
public string TerminalUnitAvailabilitySchedule { get; set; } = "";
        

[Description("the inlet node to the terminal unit")]
[JsonProperty("terminal_unit_air_inlet_node_name")]
public string TerminalUnitAirInletNodeName { get; set; } = "";
        

[Description("the outlet node of the terminal unit")]
[JsonProperty("terminal_unit_air_outlet_node_name")]
public string TerminalUnitAirOutletNodeName { get; set; } = "";
        

[JsonProperty("cooling_supply_air_flow_rate")]
public string CoolingSupplyAirFlowRate { get; set; } = "";
        

[JsonProperty("no_cooling_supply_air_flow_rate")]
public string NoCoolingSupplyAirFlowRate { get; set; } = "";
        

[JsonProperty("heating_supply_air_flow_rate")]
public string HeatingSupplyAirFlowRate { get; set; } = "";
        

[JsonProperty("no_heating_supply_air_flow_rate")]
public string NoHeatingSupplyAirFlowRate { get; set; } = "";
        

[Description(@"This field is used only when an oudoor air mixer is included. This field is set to zero flow when the VRF terminal unit is connected to central dedicated outdoor air through air terminal single duct mixer object. When this VRF terminal is used as air loop equipment the autosized flow rate will be set to 0 when an outdoor air system is connected to this air loop, otherwise the outdoor air flow rate will equal the maximum outdoor air flow rate.")]
[JsonProperty("cooling_outdoor_air_flow_rate")]
public string CoolingOutdoorAirFlowRate { get; set; } = "";
        

[Description(@"This field is used only when an oudoor air mixer is included. This field is set to zero flow when the VRF terminal unit is connected to central dedicated outdoor air through air terminal single duct mixer object. When this VRF terminal is used as air loop equipment the autosized flow rate will be set to 0 when an outdoor air system is connected to this air loop, otherwise the outdoor air flow rate will equal the maximum outdoor air flow rate.")]
[JsonProperty("heating_outdoor_air_flow_rate")]
public string HeatingOutdoorAirFlowRate { get; set; } = "";
        

[Description(@"This field is used only when an oudoor air mixer is included. This field is set to zero flow when the VRF terminal unit is connected to central dedicated outdoor air through air terminal single duct mixer object. When this VRF terminal is used as air loop equipment the autosized flow rate will be set to 0 when an outdoor air system is connected to this air loop, otherwise the outdoor air flow rate will equal the maximum outdoor air flow rate.")]
[JsonProperty("no_load_outdoor_air_flow_rate")]
public string NoLoadOutdoorAirFlowRate { get; set; } = "";
        

[Description("Required for zone equipment. Leave blank if terminal unit is used in AirLoopHVAC:" +
    "OutdoorAirSystem:EquipmentList. Also leave blank if terminal unit is used on mai" +
    "n AirloopHVAC branch and terminal unit has no fan.")]
[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        

[Description(@"Select fan placement as either blow through or draw through. Required for zone equipment. This field is ignored if the VRF terminal unit is used in AirLoopHVAC:OutdoorAirSystem:EquipmentList. This field is also ignored if VRF terminal unit is used on main AirloopHVAC branch and terminal unit has no fan.")]
[JsonProperty("supply_air_fan_placement")]
public ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_SupplyAirFanPlacement SupplyAirFanPlacement { get; set; } = (ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_SupplyAirFanPlacement)Enum.Parse(typeof(ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_SupplyAirFanPlacement), "BlowThrough");
        

[Description(@"Supply Air Fan Object Type must be Fan:SystemModel, Fan:OnOff, or Fan:ConstantVolume if AirConditioner:VariableRefrigerantFlow is used to model VRF outdoor unit Supply Air Fan Object Type must be Fan:SystemModel or Fan:VariableVolume if AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl or AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR is used to model VRF outdoor unit Required for zone equipment. Leave blank if terminal unit is used in AirLoopHVAC:OutdoorAirSystem:EquipmentList. Also leave blank if terminal unit is used on main AirloopHVAC branch and terminal unit has no fan.")]
[JsonProperty("supply_air_fan_object_type")]
public ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_SupplyAirFanObjectType SupplyAirFanObjectType { get; set; } = (ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_SupplyAirFanObjectType)Enum.Parse(typeof(ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_SupplyAirFanObjectType), "Empty");
        

[JsonProperty("supply_air_fan_object_name")]
public string SupplyAirFanObjectName { get; set; } = "";
        

[Description(@"Currently only one type OutdoorAir:Mixer object is available. If this field is blank, and outside air mixer is not used. This field should be left blank if the VRF terminal unit is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object. This field may also be left blank when the VRF terminal is used in the air loop or outdoor air system.")]
[JsonProperty("outside_air_mixer_object_type")]
public ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_OutsideAirMixerObjectType OutsideAirMixerObjectType { get; set; } = (ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_OutsideAirMixerObjectType)Enum.Parse(typeof(ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_OutsideAirMixerObjectType), "OutdoorAirMixer");
        

[Description(@"If this field is blank, the OutdoorAir:Mixer is not used. This optional field specifies the name of the OutdoorAir:Mixer object. When used, this name needs to match name of the OutdoorAir:Mixer object. This field should be left blank if the VRF terminal unit is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object. This field may also be left blank when the VRF terminal is used in the air loop or outdoor air system.")]
[JsonProperty("outside_air_mixer_object_name")]
public string OutsideAirMixerObjectName { get; set; } = "";
        

[Description(@"Cooling Coil Type must be Coil:Cooling:DX:VariableRefrigerantFlow if AirConditioner:VariableRefrigerantFlow is used to model VRF outdoor unit Cooling Coil Type must be Coil:Cooling:DX:VariableRefrigerantFlow:FluidTemperatureControl if AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl or if AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR is used to model VRF outdoor unit This field may be left blank if heating-only mode is used")]
[JsonProperty("cooling_coil_object_type")]
public ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_CoolingCoilObjectType CoolingCoilObjectType { get; set; } = (ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_CoolingCoilObjectType)Enum.Parse(typeof(ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_CoolingCoilObjectType), "CoilCoolingDXVariableRefrigerantFlow");
        

[Description("Cooling Coil Type must be Coil:Cooling:DX:VariableRefrigerantFlow This field may " +
    "be left blank if heating-only mode is used")]
[JsonProperty("cooling_coil_object_name")]
public string CoolingCoilObjectName { get; set; } = "";
        

[Description(@"Heating Coil Type must be Coil:Heating:DX:VariableRefrigerantFlow if AirConditioner:VariableRefrigerantFlow is used to model VRF outdoor unit Heating Coil Type must be Coil:Heating:DX:VariableRefrigerantFlow:FluidTemperatureControl if AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl or if AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR is used to model VRF outdoor unit This field may be left blank if cooling-only mode is used")]
[JsonProperty("heating_coil_object_type")]
public ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_HeatingCoilObjectType HeatingCoilObjectType { get; set; } = (ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_HeatingCoilObjectType)Enum.Parse(typeof(ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_HeatingCoilObjectType), "CoilHeatingDXVariableRefrigerantFlow");
        

[Description("Heating Coil Type must be Coil:Heating:DX:VariableRefrigerantFlow This field may " +
    "be left blank if cooling-only mode is used")]
[JsonProperty("heating_coil_object_name")]
public string HeatingCoilObjectName { get; set; } = "";
        

[JsonProperty("zone_terminal_unit_on_parasitic_electric_energy_use")]
public System.Nullable<float> ZoneTerminalUnitOnParasiticElectricEnergyUse { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("zone_terminal_unit_off_parasitic_electric_energy_use")]
public System.Nullable<float> ZoneTerminalUnitOffParasiticElectricEnergyUse { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description(@"If this terminal unit's heating coil is autosized, the heating capacity is sized to be equal to the cooling capacity multiplied by this sizing ratio. This input applies to the terminal unit heating coil and overrides the sizing ratio entered in the AirConditioner:VariableRefrigerantFlow object.")]
[JsonProperty("rated_heating_capacity_sizing_ratio")]
public System.Nullable<float> RatedHeatingCapacitySizingRatio { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty("availability_manager_list_name")]
public string AvailabilityManagerListName { get; set; } = "";
        

[Description("Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
        

[Description("works with gas, electric, hot water and steam heating coil.")]
[JsonProperty("supplemental_heating_coil_object_type")]
public ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_SupplementalHeatingCoilObjectType SupplementalHeatingCoilObjectType { get; set; } = (ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_SupplementalHeatingCoilObjectType)Enum.Parse(typeof(ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_SupplementalHeatingCoilObjectType), "CoilHeatingElectric");
        

[Description("Needs to match in the supplemental heating coil object.")]
[JsonProperty("supplemental_heating_coil_name")]
public string SupplementalHeatingCoilName { get; set; } = "";
        

[Description("Supply air temperature from the supplemental heater will not exceed this value.")]
[JsonProperty("maximum_supply_air_temperature_from_supplemental_heater")]
public string MaximumSupplyAirTemperatureFromSupplementalHeater { get; set; } = (System.String)"Autosize";
        

[Description("Supplemental heater will not operate when outdoor temperature exceeds this value." +
    "")]
[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation")]
public System.Nullable<float> MaximumOutdoorDryBulbTemperatureForSupplementalHeaterOperation { get; set; } = (System.Nullable<float>)Single.Parse("21", CultureInfo.InvariantCulture);
        

[Description(@"Used only for AirloopHVAC equipment on a main branch and defines zone name where thermostat is located. Not required for zone equipment. Leave blank if terminal unit is used in AirLoopHVAC:OutdoorAirSystem:EquipmentList. Required when terminal unit is used on main AirloopHVAC branch and coils are not set point controlled. When terminal unit is used in air loop and is load controlled, this zone's thermostat will control operation.")]
[JsonProperty("controlling_zone_or_thermostat_location")]
public string ControllingZoneOrThermostatLocation { get; set; } = "";
    }
    
    public enum ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_SupplyAirFanPlacement
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_SupplyAirFanObjectType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 1,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 2,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 3,
        
        [JsonProperty("Fan:VariableVolume")]
        FanVariableVolume = 4,
    }
    
    public enum ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_OutsideAirMixerObjectType
    {
        
        [JsonProperty("OutdoorAir:Mixer")]
        OutdoorAirMixer = 0,
    }
    
    public enum ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_CoolingCoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:DX:VariableRefrigerantFlow")]
        CoilCoolingDXVariableRefrigerantFlow = 0,
        
        [JsonProperty("Coil:Cooling:DX:VariableRefrigerantFlow:FluidTemperatureControl")]
        CoilCoolingDXVariableRefrigerantFlowFluidTemperatureControl = 1,
    }
    
    public enum ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_HeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:DX:VariableRefrigerantFlow")]
        CoilHeatingDXVariableRefrigerantFlow = 0,
        
        [JsonProperty("Coil:Heating:DX:VariableRefrigerantFlow:FluidTemperatureControl")]
        CoilHeatingDXVariableRefrigerantFlowFluidTemperatureControl = 1,
    }
    
    public enum ZoneHVAC_TerminalUnit_VariableRefrigerantFlow_SupplementalHeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
}
namespace BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    
    
    [Description(null)]
    [JsonObject("ZoneHVAC:Baseboard:RadiantConvective:Water:Design")]
    public class ZoneHVAC_Baseboard_RadiantConvective_Water_Design : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
[JsonProperty("heating_design_capacity_method")]
public ZoneHVAC_Baseboard_RadiantConvective_Water_Design_HeatingDesignCapacityMethod HeatingDesignCapacityMethod { get; set; } = (ZoneHVAC_Baseboard_RadiantConvective_Water_Design_HeatingDesignCapacityMethod)Enum.Parse(typeof(ZoneHVAC_Baseboard_RadiantConvective_Water_Design_HeatingDesignCapacityMethod), "HeatingDesignCapacity");
        

[Description("Enter the heating design capacity per zone floor area. Required field when the he" +
    "ating design capacity method field is CapacityPerFloorArea.")]
[JsonProperty("heating_design_capacity_per_floor_area")]
public System.Nullable<float> HeatingDesignCapacityPerFloorArea { get; set; } = null;
        

[Description("Enter the fraction of autosized heating design capacity. Required field when capa" +
    "city the heating design capacity method field is FractionOfAutosizedHeatingCapac" +
    "ity.")]
[JsonProperty("fraction_of_autosized_heating_design_capacity")]
public System.Nullable<float> FractionOfAutosizedHeatingDesignCapacity { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("convergence_tolerance")]
public System.Nullable<float> ConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_radiant")]
public System.Nullable<float> FractionRadiant { get; set; } = null;
        

[JsonProperty("fraction_of_radiant_energy_incident_on_people")]
public System.Nullable<float> FractionOfRadiantEnergyIncidentOnPeople { get; set; } = null;
    }
    
    public enum ZoneHVAC_Baseboard_RadiantConvective_Water_Design_HeatingDesignCapacityMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingCapacity")]
        FractionOfAutosizedHeatingCapacity = 2,
        
        [JsonProperty("HeatingDesignCapacity")]
        HeatingDesignCapacity = 3,
    }
    
    [Description("The number of surfaces can be expanded beyond 100, if necessary, by adding more g" +
        "roups to the end of the list")]
    [JsonObject("ZoneHVAC:Baseboard:RadiantConvective:Water")]
    public class ZoneHVAC_Baseboard_RadiantConvective_Water : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("design_object")]
public string DesignObject { get; set; } = "";
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[Description("Rated average water temperature is the average of the inlet and outlet water temp" +
    "eratures at rated conditions.")]
[JsonProperty("rated_average_water_temperature")]
public System.Nullable<float> RatedAverageWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("87.78", CultureInfo.InvariantCulture);
        

[Description(@"Standard is I=B=R Rating document where all baseboards are rated at either 0.063 kg/s (1 gpm) or 0.252 kg/s (4 gpm). It is recommended that users find data for the baseboard heater that corresponds to performance at 0.063 kg/s unless the flow rate is expected to be above 0.252 kg/s. If the flow rate is expected to be above 0.252 kg/s, this field should be 0.252 kg/s.")]
[JsonProperty("rated_water_mass_flow_rate")]
public System.Nullable<float> RatedWaterMassFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0.063", CultureInfo.InvariantCulture);
        

[Description(@"Enter the design heating capacity. Required field when the heating design capacity method HeatingDesignCapacity. This input field is rated heating capacity. Users must multiply the actual finned length published in the literature to determine the rated capacity. Rated Capacity is for an inlet air dry-bulb temperature of 18.0C, the Rated Water Mass Flow Rate of 0.063kg/s or 0.252kg/s, and the Rated Average Water Temperature between 32.2C and 115.6C.")]
[JsonProperty("heating_design_capacity")]
public string HeatingDesignCapacity { get; set; } = (System.String)"Autosize";
        

[JsonProperty("maximum_water_flow_rate")]
public string MaximumWaterFlowRate { get; set; } = "";
        

[JsonProperty("surface_fractions")]
public string SurfaceFractions { get; set; } = "";
    }
    
    [Description(null)]
    [JsonObject("ZoneHVAC:Baseboard:RadiantConvective:Steam:Design")]
    public class ZoneHVAC_Baseboard_RadiantConvective_Steam_Design : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity is selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea is selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
[JsonProperty("heating_design_capacity_method")]
public ZoneHVAC_Baseboard_RadiantConvective_Steam_Design_HeatingDesignCapacityMethod HeatingDesignCapacityMethod { get; set; } = (ZoneHVAC_Baseboard_RadiantConvective_Steam_Design_HeatingDesignCapacityMethod)Enum.Parse(typeof(ZoneHVAC_Baseboard_RadiantConvective_Steam_Design_HeatingDesignCapacityMethod), "HeatingDesignCapacity");
        

[Description("Enter the heating design capacity per zone floor area. Required field when the he" +
    "ating design capacity method field is CapacityPerFloorArea.")]
[JsonProperty("heating_design_capacity_per_floor_area")]
public System.Nullable<float> HeatingDesignCapacityPerFloorArea { get; set; } = null;
        

[Description("Enter the fraction of autosized heating design capacity. Required field when capa" +
    "city the heating design capacity method field is FractionOfAutosizedHeatingCapac" +
    "ity.")]
[JsonProperty("fraction_of_autosized_heating_design_capacity")]
public System.Nullable<float> FractionOfAutosizedHeatingDesignCapacity { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("convergence_tolerance")]
public System.Nullable<float> ConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_radiant")]
public System.Nullable<float> FractionRadiant { get; set; } = null;
        

[JsonProperty("fraction_of_radiant_energy_incident_on_people")]
public System.Nullable<float> FractionOfRadiantEnergyIncidentOnPeople { get; set; } = null;
    }
    
    public enum ZoneHVAC_Baseboard_RadiantConvective_Steam_Design_HeatingDesignCapacityMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingCapacity")]
        FractionOfAutosizedHeatingCapacity = 2,
        
        [JsonProperty("HeatingDesignCapacity")]
        HeatingDesignCapacity = 3,
    }
    
    [Description("The number of surfaces can be expanded beyond 100, if necessary, by adding more g" +
        "roups to the end of the list.")]
    [JsonObject("ZoneHVAC:Baseboard:RadiantConvective:Steam")]
    public class ZoneHVAC_Baseboard_RadiantConvective_Steam : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("design_object")]
public string DesignObject { get; set; } = "";
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[Description("Enter the design heating capacity. Required field when the heating design capacit" +
    "y method HeatingDesignCapacity.")]
[JsonProperty("heating_design_capacity")]
public string HeatingDesignCapacity { get; set; } = (System.String)"Autosize";
        

[JsonProperty("degree_of_subcooling")]
public System.Nullable<float> DegreeOfSubcooling { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[JsonProperty("maximum_steam_flow_rate")]
public string MaximumSteamFlowRate { get; set; } = "";
        

[JsonProperty("surface_fractions")]
public string SurfaceFractions { get; set; } = "";
    }
    
    [Description("The number of surfaces can be expanded beyond 100, if necessary, by adding more g" +
        "roups to the end of the list")]
    [JsonObject("ZoneHVAC:Baseboard:RadiantConvective:Electric")]
    public class ZoneHVAC_Baseboard_RadiantConvective_Electric : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
[JsonProperty("heating_design_capacity_method")]
public ZoneHVAC_Baseboard_RadiantConvective_Electric_HeatingDesignCapacityMethod HeatingDesignCapacityMethod { get; set; } = (ZoneHVAC_Baseboard_RadiantConvective_Electric_HeatingDesignCapacityMethod)Enum.Parse(typeof(ZoneHVAC_Baseboard_RadiantConvective_Electric_HeatingDesignCapacityMethod), "HeatingDesignCapacity");
        

[Description("Enter the design heating capacity. Required field when the heating design capacit" +
    "y method HeatingDesignCapacity.")]
[JsonProperty("heating_design_capacity")]
public string HeatingDesignCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Enter the heating design capacity per zone floor area. Required field when the he" +
    "ating design capacity method field is CapacityPerFloorArea.")]
[JsonProperty("heating_design_capacity_per_floor_area")]
public System.Nullable<float> HeatingDesignCapacityPerFloorArea { get; set; } = null;
        

[Description("Enter the fraction of autosized heating design capacity. Required field when capa" +
    "city the heating design capacity method field is FractionOfAutosizedHeatingCapac" +
    "ity.")]
[JsonProperty("fraction_of_autosized_heating_design_capacity")]
public System.Nullable<float> FractionOfAutosizedHeatingDesignCapacity { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("efficiency")]
public System.Nullable<float> Efficiency { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_radiant")]
public System.Nullable<float> FractionRadiant { get; set; } = null;
        

[JsonProperty("fraction_of_radiant_energy_incident_on_people")]
public System.Nullable<float> FractionOfRadiantEnergyIncidentOnPeople { get; set; } = null;
        

[JsonProperty("surface_fractions")]
public string SurfaceFractions { get; set; } = "";
    }
    
    public enum ZoneHVAC_Baseboard_RadiantConvective_Electric_HeatingDesignCapacityMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingCapacity")]
        FractionOfAutosizedHeatingCapacity = 2,
        
        [JsonProperty("HeatingDesignCapacity")]
        HeatingDesignCapacity = 3,
    }
    
    [Description("The number of surfaces can be expanded beyond 100, if necessary, by adding more g" +
        "roups to the end of the list")]
    [JsonObject("ZoneHVAC:CoolingPanel:RadiantConvective:Water")]
    public class ZoneHVAC_CoolingPanel_RadiantConvective_Water : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("water_inlet_node_name")]
public string WaterInletNodeName { get; set; } = "";
        

[JsonProperty("water_outlet_node_name")]
public string WaterOutletNodeName { get; set; } = "";
        

[JsonProperty("rated_inlet_water_temperature")]
public System.Nullable<float> RatedInletWaterTemperature { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

[JsonProperty("rated_inlet_space_temperature")]
public System.Nullable<float> RatedInletSpaceTemperature { get; set; } = (System.Nullable<float>)Single.Parse("24", CultureInfo.InvariantCulture);
        

[JsonProperty("rated_water_mass_flow_rate")]
public System.Nullable<float> RatedWaterMassFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0.063", CultureInfo.InvariantCulture);
        

[Description(@"Enter the method used to determine the cooling design capacity for scalable sizing. CoolingDesignCapacity => selected when the design cooling capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determined from user specified cooling capacity per floor area and total floor area of cooled zone served by the hydrolic unit. FractionOfAutosizedCoolingCapacity => is selected when the design cooling capacity is determined from a user specified fraction and the auto-sized design cooling capacity of the system.")]
[JsonProperty("cooling_design_capacity_method")]
public ZoneHVAC_CoolingPanel_RadiantConvective_Water_CoolingDesignCapacityMethod CoolingDesignCapacityMethod { get; set; } = (ZoneHVAC_CoolingPanel_RadiantConvective_Water_CoolingDesignCapacityMethod)Enum.Parse(typeof(ZoneHVAC_CoolingPanel_RadiantConvective_Water_CoolingDesignCapacityMethod), "CoolingDesignCapacity");
        

[Description("Enter the design cooling capacity. Required field when the cooling design capacit" +
    "y method CoolingDesignCapacity.")]
[JsonProperty("cooling_design_capacity")]
public string CoolingDesignCapacity { get; set; } = "";
        

[Description("Enter the cooling design capacity per total floor area of cooled zones served by " +
    "the unit. Required field when the cooling design capacity method field is Capaci" +
    "tyPerFloorArea.")]
[JsonProperty("cooling_design_capacity_per_floor_area")]
public System.Nullable<float> CoolingDesignCapacityPerFloorArea { get; set; } = null;
        

[Description("Enter the fraction of auto-sized cooling design capacity. Required field when the" +
    " cooling design capacity method field is FractionOfAutosizedCoolingCapacity.")]
[JsonProperty("fraction_of_autosized_cooling_design_capacity")]
public System.Nullable<float> FractionOfAutosizedCoolingDesignCapacity { get; set; } = null;
        

[JsonProperty("maximum_chilled_water_flow_rate")]
public string MaximumChilledWaterFlowRate { get; set; } = "";
        

[Description("Temperature on which unit is controlled")]
[JsonProperty("control_type")]
public ZoneHVAC_CoolingPanel_RadiantConvective_Water_ControlType ControlType { get; set; } = (ZoneHVAC_CoolingPanel_RadiantConvective_Water_ControlType)Enum.Parse(typeof(ZoneHVAC_CoolingPanel_RadiantConvective_Water_ControlType), "MeanAirTemperature");
        

[JsonProperty("cooling_control_throttling_range")]
public System.Nullable<float> CoolingControlThrottlingRange { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[JsonProperty("cooling_control_temperature_schedule_name")]
public string CoolingControlTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("condensation_control_type")]
public ZoneHVAC_CoolingPanel_RadiantConvective_Water_CondensationControlType CondensationControlType { get; set; } = (ZoneHVAC_CoolingPanel_RadiantConvective_Water_CondensationControlType)Enum.Parse(typeof(ZoneHVAC_CoolingPanel_RadiantConvective_Water_CondensationControlType), "SimpleOff");
        

[JsonProperty("condensation_control_dewpoint_offset")]
public System.Nullable<float> CondensationControlDewpointOffset { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_radiant")]
public System.Nullable<float> FractionRadiant { get; set; } = null;
        

[JsonProperty("fraction_of_radiant_energy_incident_on_people")]
public System.Nullable<float> FractionOfRadiantEnergyIncidentOnPeople { get; set; } = null;
        

[JsonProperty("surface_fractions")]
public string SurfaceFractions { get; set; } = "";
    }
    
    public enum ZoneHVAC_CoolingPanel_RadiantConvective_Water_CoolingDesignCapacityMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("CoolingDesignCapacity")]
        CoolingDesignCapacity = 2,
        
        [JsonProperty("FractionOfAutosizedCoolingCapacity")]
        FractionOfAutosizedCoolingCapacity = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum ZoneHVAC_CoolingPanel_RadiantConvective_Water_ControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MeanAirTemperature")]
        MeanAirTemperature = 1,
        
        [JsonProperty("MeanRadiantTemperature")]
        MeanRadiantTemperature = 2,
        
        [JsonProperty("OperativeTemperature")]
        OperativeTemperature = 3,
        
        [JsonProperty("OutdoorDryBulbTemperature")]
        OutdoorDryBulbTemperature = 4,
        
        [JsonProperty("OutdoorWetBulbTemperature")]
        OutdoorWetBulbTemperature = 5,
        
        [JsonProperty("ZoneConvectiveLoad")]
        ZoneConvectiveLoad = 6,
        
        [JsonProperty("ZoneTotalLoad")]
        ZoneTotalLoad = 7,
    }
    
    public enum ZoneHVAC_CoolingPanel_RadiantConvective_Water_CondensationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Off")]
        Off = 1,
        
        [JsonProperty("SimpleOff")]
        SimpleOff = 2,
        
        [JsonProperty("VariableOff")]
        VariableOff = 3,
    }
    
    [Description("Hot water baseboard heater, convection-only. Natural convection hydronic heating " +
        "unit.")]
    [JsonObject("ZoneHVAC:Baseboard:Convective:Water")]
    public class ZoneHVAC_Baseboard_Convective_Water : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[JsonProperty("inlet_node_name")]
public string InletNodeName { get; set; } = "";
        

[JsonProperty("outlet_node_name")]
public string OutletNodeName { get; set; } = "";
        

[Description(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
[JsonProperty("heating_design_capacity_method")]
public ZoneHVAC_Baseboard_Convective_Water_HeatingDesignCapacityMethod HeatingDesignCapacityMethod { get; set; } = (ZoneHVAC_Baseboard_Convective_Water_HeatingDesignCapacityMethod)Enum.Parse(typeof(ZoneHVAC_Baseboard_Convective_Water_HeatingDesignCapacityMethod), "HeatingDesignCapacity");
        

[Description("Enter the design heating capacity. Required field when the heating design capacit" +
    "y method HeatingDesignCapacity.")]
[JsonProperty("heating_design_capacity")]
public string HeatingDesignCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Enter the heating design capacity per zone floor area. Required field when the he" +
    "ating design capacity method field is CapacityPerFloorArea.")]
[JsonProperty("heating_design_capacity_per_floor_area")]
public System.Nullable<float> HeatingDesignCapacityPerFloorArea { get; set; } = null;
        

[Description("Enter the fraction of autosized heating design capacity. Required field when capa" +
    "city the heating design capacity method field is FractionOfAutosizedHeatingCapac" +
    "ity.")]
[JsonProperty("fraction_of_autosized_heating_design_capacity")]
public System.Nullable<float> FractionOfAutosizedHeatingDesignCapacity { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("u_factor_times_area_value")]
public string UFactorTimesAreaValue { get; set; } = "";
        

[JsonProperty("maximum_water_flow_rate")]
public string MaximumWaterFlowRate { get; set; } = "";
        

[JsonProperty("convergence_tolerance")]
public System.Nullable<float> ConvergenceTolerance { get; set; } = (System.Nullable<float>)Single.Parse("0.001", CultureInfo.InvariantCulture);
    }
    
    public enum ZoneHVAC_Baseboard_Convective_Water_HeatingDesignCapacityMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingCapacity")]
        FractionOfAutosizedHeatingCapacity = 2,
        
        [JsonProperty("HeatingDesignCapacity")]
        HeatingDesignCapacity = 3,
    }
    
    [Description("Electric baseboard heater, convection-only. Natural convection electric heating u" +
        "nit.")]
    [JsonObject("ZoneHVAC:Baseboard:Convective:Electric")]
    public class ZoneHVAC_Baseboard_Convective_Electric : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
[JsonProperty("heating_design_capacity_method")]
public ZoneHVAC_Baseboard_Convective_Electric_HeatingDesignCapacityMethod HeatingDesignCapacityMethod { get; set; } = (ZoneHVAC_Baseboard_Convective_Electric_HeatingDesignCapacityMethod)Enum.Parse(typeof(ZoneHVAC_Baseboard_Convective_Electric_HeatingDesignCapacityMethod), "HeatingDesignCapacity");
        

[Description("Enter the design heating capacity. Required field when the heating design capacit" +
    "y method HeatingDesignCapacity.")]
[JsonProperty("heating_design_capacity")]
public string HeatingDesignCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Enter the heating design capacity per zone floor area. Required field when the he" +
    "ating design capacity method field is CapacityPerFloorArea.")]
[JsonProperty("heating_design_capacity_per_floor_area")]
public System.Nullable<float> HeatingDesignCapacityPerFloorArea { get; set; } = null;
        

[Description("Enter the fraction of autosized heating design capacity. Required field when capa" +
    "city the heating design capacity method field is FractionOfAutosizedHeatingCapac" +
    "ity.")]
[JsonProperty("fraction_of_autosized_heating_design_capacity")]
public System.Nullable<float> FractionOfAutosizedHeatingDesignCapacity { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("efficiency")]
public System.Nullable<float> Efficiency { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
    
    public enum ZoneHVAC_Baseboard_Convective_Electric_HeatingDesignCapacityMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingCapacity")]
        FractionOfAutosizedHeatingCapacity = 2,
        
        [JsonProperty("HeatingDesignCapacity")]
        HeatingDesignCapacity = 3,
    }
    
    [Description("Low temperature hydronic radiant heating and/or cooling system embedded in a buil" +
        "ding surface (wall, ceiling, or floor). Controlled by varying the hot or chilled" +
        " water flow to the unit.")]
    [JsonObject("ZoneHVAC:LowTemperatureRadiant:VariableFlow")]
    public class ZoneHVAC_LowTemperatureRadiant_VariableFlow : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("design_object")]
public string DesignObject { get; set; } = "";
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Name of zone system is serving")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Identifies surfaces that radiant system is embedded in. For a system with multipl" +
    "e surfaces, enter the name of a ZoneHVAC:LowTemperatureRadiant:SurfaceGroup obje" +
    "ct.")]
[JsonProperty("surface_name_or_radiant_surface_group_name")]
public string SurfaceNameOrRadiantSurfaceGroupName { get; set; } = "";
        

[Description("(total length of pipe embedded in surface)")]
[JsonProperty("hydronic_tubing_length")]
public string HydronicTubingLength { get; set; } = (System.String)"Autosize";
        

[Description("Enter the design heating capacity. Required field when the heating design capacit" +
    "y method HeatingDesignCapacity.")]
[JsonProperty("heating_design_capacity")]
public string HeatingDesignCapacity { get; set; } = (System.String)"Autosize";
        

[JsonProperty("maximum_hot_water_flow")]
public string MaximumHotWaterFlow { get; set; } = "";
        

[JsonProperty("heating_water_inlet_node_name")]
public string HeatingWaterInletNodeName { get; set; } = "";
        

[JsonProperty("heating_water_outlet_node_name")]
public string HeatingWaterOutletNodeName { get; set; } = "";
        

[Description("Enter the design cooling capacity. Required field when the cooling design capacit" +
    "y method CoolingDesignCapacity.")]
[JsonProperty("cooling_design_capacity")]
public string CoolingDesignCapacity { get; set; } = "";
        

[JsonProperty("maximum_cold_water_flow")]
public string MaximumColdWaterFlow { get; set; } = "";
        

[JsonProperty("cooling_water_inlet_node_name")]
public string CoolingWaterInletNodeName { get; set; } = "";
        

[JsonProperty("cooling_water_outlet_node_name")]
public string CoolingWaterOutletNodeName { get; set; } = "";
        

[JsonProperty("number_of_circuits")]
public ZoneHVAC_LowTemperatureRadiant_VariableFlow_NumberOfCircuits NumberOfCircuits { get; set; } = (ZoneHVAC_LowTemperatureRadiant_VariableFlow_NumberOfCircuits)Enum.Parse(typeof(ZoneHVAC_LowTemperatureRadiant_VariableFlow_NumberOfCircuits), "OnePerSurface");
        

[JsonProperty("circuit_length")]
public System.Nullable<float> CircuitLength { get; set; } = (System.Nullable<float>)Single.Parse("106.7", CultureInfo.InvariantCulture);
    }
    
    public enum ZoneHVAC_LowTemperatureRadiant_VariableFlow_NumberOfCircuits
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CalculateFromCircuitLength")]
        CalculateFromCircuitLength = 1,
        
        [JsonProperty("OnePerSurface")]
        OnePerSurface = 2,
    }
    
    [Description(null)]
    [JsonObject("ZoneHVAC:LowTemperatureRadiant:VariableFlow:Design")]
    public class ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"This parameter identifies how the heat transfer between fluid being circulated through the radiant system and the radiant system (slab) is modeled. ConvectionOnly means that only convection between the fluid and the inside surface of the pipe is modeled using a conventional equation for flow inside a pipe. ISOStandard models convection between the fluid and the inside of of the pipe and conduction through the pipe material using equations specific to ISO Standard 11855-2.")]
[JsonProperty("fluid_to_radiant_surface_heat_transfer_model")]
public ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_FluidToRadiantSurfaceHeatTransferModel FluidToRadiantSurfaceHeatTransferModel { get; set; } = (ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_FluidToRadiantSurfaceHeatTransferModel)Enum.Parse(typeof(ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_FluidToRadiantSurfaceHeatTransferModel), "ConvectionOnly");
        

[JsonProperty("hydronic_tubing_inside_diameter")]
public System.Nullable<float> HydronicTubingInsideDiameter { get; set; } = (System.Nullable<float>)Single.Parse("0.013", CultureInfo.InvariantCulture);
        

[JsonProperty("hydronic_tubing_outside_diameter")]
public System.Nullable<float> HydronicTubingOutsideDiameter { get; set; } = (System.Nullable<float>)Single.Parse("0.016", CultureInfo.InvariantCulture);
        

[Description("Conductivity of the tubing/piping material")]
[JsonProperty("hydronic_tubing_conductivity")]
public System.Nullable<float> HydronicTubingConductivity { get; set; } = (System.Nullable<float>)Single.Parse("0.35", CultureInfo.InvariantCulture);
        

[Description("(Temperature on which unit is controlled)")]
[JsonProperty("temperature_control_type")]
public ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_TemperatureControlType TemperatureControlType { get; set; } = (ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_TemperatureControlType)Enum.Parse(typeof(ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_TemperatureControlType), "MeanAirTemperature");
        

[Description("How setpoint temperature is defined")]
[JsonProperty("setpoint_control_type")]
public ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_SetpointControlType SetpointControlType { get; set; } = (ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_SetpointControlType)Enum.Parse(typeof(ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_SetpointControlType), "HalfFlowPower");
        

[Description(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
[JsonProperty("heating_design_capacity_method")]
public ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_HeatingDesignCapacityMethod HeatingDesignCapacityMethod { get; set; } = (ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_HeatingDesignCapacityMethod)Enum.Parse(typeof(ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_HeatingDesignCapacityMethod), "HeatingDesignCapacity");
        

[Description("Enter the heating design capacity per zone floor area. Required field when the he" +
    "ating design capacity method field is CapacityPerFloorArea.")]
[JsonProperty("heating_design_capacity_per_floor_area")]
public System.Nullable<float> HeatingDesignCapacityPerFloorArea { get; set; } = null;
        

[Description("Enter the fraction of autosized heating design capacity. Required field when capa" +
    "city the heating design capacity method field is FractionOfAutosizedHeatingCapac" +
    "ity.")]
[JsonProperty("fraction_of_autosized_heating_design_capacity")]
public System.Nullable<float> FractionOfAutosizedHeatingDesignCapacity { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_control_throttling_range")]
public System.Nullable<float> HeatingControlThrottlingRange { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_control_temperature_schedule_name")]
public string HeatingControlTemperatureScheduleName { get; set; } = "";
        

[Description(@"Enter the method used to determine the cooling design capacity for scalable sizing. CoolingDesignCapacity => selected when the design cooling capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determined from user specified cooling capacity per floor area and total floor area of cooled zone served by the hydrolic unit. FractionOfAutosizedCoolingCapacity => is selected when the design cooling capacity is determined from a user specified fraction and the auto-sized design cooling capacity of the system.")]
[JsonProperty("cooling_design_capacity_method")]
public ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_CoolingDesignCapacityMethod CoolingDesignCapacityMethod { get; set; } = (ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_CoolingDesignCapacityMethod)Enum.Parse(typeof(ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_CoolingDesignCapacityMethod), "CoolingDesignCapacity");
        

[Description("Enter the cooling design capacity per total floor area of cooled zones served by " +
    "the unit. Required field when the cooling design capacity method field is Capaci" +
    "tyPerFloorArea.")]
[JsonProperty("cooling_design_capacity_per_floor_area")]
public System.Nullable<float> CoolingDesignCapacityPerFloorArea { get; set; } = null;
        

[Description("Enter the fraction of auto-sized cooling design capacity. Required field when the" +
    " cooling design capacity method field is FractionOfAutosizedCoolingCapacity.")]
[JsonProperty("fraction_of_autosized_cooling_design_capacity")]
public System.Nullable<float> FractionOfAutosizedCoolingDesignCapacity { get; set; } = null;
        

[JsonProperty("cooling_control_throttling_range")]
public System.Nullable<float> CoolingControlThrottlingRange { get; set; } = (System.Nullable<float>)Single.Parse("0.5", CultureInfo.InvariantCulture);
        

[JsonProperty("cooling_control_temperature_schedule_name")]
public string CoolingControlTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("condensation_control_type")]
public ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_CondensationControlType CondensationControlType { get; set; } = (ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_CondensationControlType)Enum.Parse(typeof(ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_CondensationControlType), "SimpleOff");
        

[JsonProperty("condensation_control_dewpoint_offset")]
public System.Nullable<float> CondensationControlDewpointOffset { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Changeover delay schedule name for this system. Schedule value <= 0 allows change" +
    "over with no delay The schedule values are interpretted as hours. If this field " +
    "is blank, the system allows changeover with no delay")]
[JsonProperty("changeover_delay_time_period_schedule")]
public string ChangeoverDelayTimePeriodSchedule { get; set; } = "";
    }
    
    public enum ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_FluidToRadiantSurfaceHeatTransferModel
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConvectionOnly")]
        ConvectionOnly = 1,
        
        [JsonProperty("ISOStandard")]
        ISOStandard = 2,
    }
    
    public enum ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_TemperatureControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MeanAirTemperature")]
        MeanAirTemperature = 1,
        
        [JsonProperty("MeanRadiantTemperature")]
        MeanRadiantTemperature = 2,
        
        [JsonProperty("OperativeTemperature")]
        OperativeTemperature = 3,
        
        [JsonProperty("OutdoorDryBulbTemperature")]
        OutdoorDryBulbTemperature = 4,
        
        [JsonProperty("OutdoorWetBulbTemperature")]
        OutdoorWetBulbTemperature = 5,
        
        [JsonProperty("SurfaceFaceTemperature")]
        SurfaceFaceTemperature = 6,
        
        [JsonProperty("SurfaceInteriorTemperature")]
        SurfaceInteriorTemperature = 7,
    }
    
    public enum ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_SetpointControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("HalfFlowPower")]
        HalfFlowPower = 1,
        
        [JsonProperty("ZeroFlowPower")]
        ZeroFlowPower = 2,
    }
    
    public enum ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_HeatingDesignCapacityMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingCapacity")]
        FractionOfAutosizedHeatingCapacity = 2,
        
        [JsonProperty("HeatingDesignCapacity")]
        HeatingDesignCapacity = 3,
    }
    
    public enum ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_CoolingDesignCapacityMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("CoolingDesignCapacity")]
        CoolingDesignCapacity = 2,
        
        [JsonProperty("FractionOfAutosizedCoolingCapacity")]
        FractionOfAutosizedCoolingCapacity = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design_CondensationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Off")]
        Off = 1,
        
        [JsonProperty("SimpleOff")]
        SimpleOff = 2,
        
        [JsonProperty("VariableOff")]
        VariableOff = 3,
    }
    
    [Description("Low temperature hydronic radiant heating and/or cooling system embedded in a buil" +
        "ding surface (wall, ceiling, or floor). Controlled by varying the hot or chilled" +
        " water temperature circulating through the unit.")]
    [JsonObject("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")]
    public class ZoneHVAC_LowTemperatureRadiant_ConstantFlow : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("design_object")]
public string DesignObject { get; set; } = "";
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Name of zone system is serving")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Identifies surfaces that radiant system is embedded in. For a system with multipl" +
    "e surfaces, enter the name of a ZoneHVAC:LowTemperatureRadiant:SurfaceGroup obje" +
    "ct.")]
[JsonProperty("surface_name_or_radiant_surface_group_name")]
public string SurfaceNameOrRadiantSurfaceGroupName { get; set; } = "";
        

[Description("(total length of pipe embedded in surface)")]
[JsonProperty("hydronic_tubing_length")]
public string HydronicTubingLength { get; set; } = (System.String)"Autosize";
        

[JsonProperty("rated_flow_rate")]
public string RatedFlowRate { get; set; } = "";
        

[Description(@"Modifies the Rated Flow Rate of the pump on a time basis the default is that the pump is ON and runs according to its other operational requirements specified above. The schedule is for special pump operations. Values here are between 0 and 1 and are multipliers on the previous field (Rated Flow Rate).")]
[JsonProperty("pump_flow_rate_schedule_name")]
public string PumpFlowRateScheduleName { get; set; } = "";
        

[Description("default head is 60 feet")]
[JsonProperty("rated_pump_head")]
public System.Nullable<float> RatedPumpHead { get; set; } = (System.Nullable<float>)Single.Parse("179352", CultureInfo.InvariantCulture);
        

[JsonProperty("rated_power_consumption")]
public System.Nullable<float> RatedPowerConsumption { get; set; } = null;
        

[JsonProperty("heating_water_inlet_node_name")]
public string HeatingWaterInletNodeName { get; set; } = "";
        

[JsonProperty("heating_water_outlet_node_name")]
public string HeatingWaterOutletNodeName { get; set; } = "";
        

[Description(@"Water and control temperatures for heating work together to provide a linear function that determines the water temperature sent to the radiant system. The current control temperature (see Temperature Control Type above) is compared to the high and low control temperatures at the current time. If the control temperature is above the high temperature, then the inlet water temperature is set to the low water temperature. If the control temperature is below the low temperature, then the inlet water temperature is set to the high water temperature. If the control temperature is between the high and low value, then the inlet water temperature is linearly interpolated between the low and high water temperature values.")]
[JsonProperty("heating_high_water_temperature_schedule_name")]
public string HeatingHighWaterTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("heating_low_water_temperature_schedule_name")]
public string HeatingLowWaterTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("heating_high_control_temperature_schedule_name")]
public string HeatingHighControlTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("heating_low_control_temperature_schedule_name")]
public string HeatingLowControlTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("cooling_water_inlet_node_name")]
public string CoolingWaterInletNodeName { get; set; } = "";
        

[JsonProperty("cooling_water_outlet_node_name")]
public string CoolingWaterOutletNodeName { get; set; } = "";
        

[Description("See note for Heating High Water Temperature Schedule above for interpretation inf" +
    "ormation (or see the Input/Output Reference).")]
[JsonProperty("cooling_high_water_temperature_schedule_name")]
public string CoolingHighWaterTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("cooling_low_water_temperature_schedule_name")]
public string CoolingLowWaterTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("cooling_high_control_temperature_schedule_name")]
public string CoolingHighControlTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("cooling_low_control_temperature_schedule_name")]
public string CoolingLowControlTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("number_of_circuits")]
public ZoneHVAC_LowTemperatureRadiant_ConstantFlow_NumberOfCircuits NumberOfCircuits { get; set; } = (ZoneHVAC_LowTemperatureRadiant_ConstantFlow_NumberOfCircuits)Enum.Parse(typeof(ZoneHVAC_LowTemperatureRadiant_ConstantFlow_NumberOfCircuits), "OnePerSurface");
        

[JsonProperty("circuit_length")]
public System.Nullable<float> CircuitLength { get; set; } = (System.Nullable<float>)Single.Parse("106.7", CultureInfo.InvariantCulture);
    }
    
    public enum ZoneHVAC_LowTemperatureRadiant_ConstantFlow_NumberOfCircuits
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CalculateFromCircuitLength")]
        CalculateFromCircuitLength = 1,
        
        [JsonProperty("OnePerSurface")]
        OnePerSurface = 2,
    }
    
    [Description(null)]
    [JsonObject("ZoneHVAC:LowTemperatureRadiant:ConstantFlow:Design")]
    public class ZoneHVAC_LowTemperatureRadiant_ConstantFlow_Design : BHoMObject, IEnergyPlusClass
    {
        

[Description(@"This parameter identifies how the heat transfer between fluid being circulated through the radiant system and the radiant system (slab) is modeled. ConvectionOnly means that only convection between the fluid and the inside surface of the pipe is modeled using a conventional equation for flow inside a pipe. ISOStandard models convection between the fluid and the inside of of the pipe and conduction through the pipe material using equations specific to ISO Standard 11855-2.")]
[JsonProperty("fluid_to_radiant_surface_heat_transfer_model")]
public ZoneHVAC_LowTemperatureRadiant_ConstantFlow_Design_FluidToRadiantSurfaceHeatTransferModel FluidToRadiantSurfaceHeatTransferModel { get; set; } = (ZoneHVAC_LowTemperatureRadiant_ConstantFlow_Design_FluidToRadiantSurfaceHeatTransferModel)Enum.Parse(typeof(ZoneHVAC_LowTemperatureRadiant_ConstantFlow_Design_FluidToRadiantSurfaceHeatTransferModel), "ConvectionOnly");
        

[JsonProperty("hydronic_tubing_inside_diameter")]
public System.Nullable<float> HydronicTubingInsideDiameter { get; set; } = (System.Nullable<float>)Single.Parse("0.013", CultureInfo.InvariantCulture);
        

[JsonProperty("hydronic_tubing_outside_diameter")]
public System.Nullable<float> HydronicTubingOutsideDiameter { get; set; } = (System.Nullable<float>)Single.Parse("0.016", CultureInfo.InvariantCulture);
        

[Description("Conductivity of the tubing/piping material")]
[JsonProperty("hydronic_tubing_conductivity")]
public System.Nullable<float> HydronicTubingConductivity { get; set; } = (System.Nullable<float>)Single.Parse("0.35", CultureInfo.InvariantCulture);
        

[Description("Temperature used to control system")]
[JsonProperty("temperature_control_type")]
public ZoneHVAC_LowTemperatureRadiant_ConstantFlow_Design_TemperatureControlType TemperatureControlType { get; set; } = (ZoneHVAC_LowTemperatureRadiant_ConstantFlow_Design_TemperatureControlType)Enum.Parse(typeof(ZoneHVAC_LowTemperatureRadiant_ConstantFlow_Design_TemperatureControlType), "MeanAirTemperature");
        

[Description(@"this is the weighting factor in the equation that calculate the running mean outdoor dry-bulb temperature as a weighted average of the previous dayâ€™s running mean outdoor dry-bulb temperature and the previous dayâ€™s average outdoor dry-bulb temperature this value is only used by EnergyPlus when the user elects to use the RunningMeanOutdoorDryBulbTemperature control type")]
[JsonProperty("running_mean_outdoor_dry_bulb_temperature_weighting_factor")]
public System.Nullable<float> RunningMeanOutdoorDryBulbTemperatureWeightingFactor { get; set; } = (System.Nullable<float>)Single.Parse("0.8", CultureInfo.InvariantCulture);
        

[JsonProperty("motor_efficiency")]
public System.Nullable<float> MotorEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_of_motor_inefficiencies_to_fluid_stream")]
public System.Nullable<float> FractionOfMotorInefficienciesToFluidStream { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("condensation_control_type")]
public ZoneHVAC_LowTemperatureRadiant_ConstantFlow_Design_CondensationControlType CondensationControlType { get; set; } = (ZoneHVAC_LowTemperatureRadiant_ConstantFlow_Design_CondensationControlType)Enum.Parse(typeof(ZoneHVAC_LowTemperatureRadiant_ConstantFlow_Design_CondensationControlType), "SimpleOff");
        

[JsonProperty("condensation_control_dewpoint_offset")]
public System.Nullable<float> CondensationControlDewpointOffset { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Changeover delay schedule name for this system. Schedule value <= 0 allows change" +
    "over with no delay The schedule values are interpretted as hours. If this field " +
    "is blank, the system allows changeover with no delay")]
[JsonProperty("changeover_delay_time_period_schedule")]
public string ChangeoverDelayTimePeriodSchedule { get; set; } = "";
    }
    
    public enum ZoneHVAC_LowTemperatureRadiant_ConstantFlow_Design_FluidToRadiantSurfaceHeatTransferModel
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("ConvectionOnly")]
        ConvectionOnly = 1,
        
        [JsonProperty("ISOStandard")]
        ISOStandard = 2,
    }
    
    public enum ZoneHVAC_LowTemperatureRadiant_ConstantFlow_Design_TemperatureControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MeanAirTemperature")]
        MeanAirTemperature = 1,
        
        [JsonProperty("MeanRadiantTemperature")]
        MeanRadiantTemperature = 2,
        
        [JsonProperty("OperativeTemperature")]
        OperativeTemperature = 3,
        
        [JsonProperty("OutdoorDryBulbTemperature")]
        OutdoorDryBulbTemperature = 4,
        
        [JsonProperty("OutdoorWetBulbTemperature")]
        OutdoorWetBulbTemperature = 5,
        
        [JsonProperty("RunningMeanOutdoorDryBulbTemperature")]
        RunningMeanOutdoorDryBulbTemperature = 6,
        
        [JsonProperty("SurfaceFaceTemperature")]
        SurfaceFaceTemperature = 7,
        
        [JsonProperty("SurfaceInteriorTemperature")]
        SurfaceInteriorTemperature = 8,
    }
    
    public enum ZoneHVAC_LowTemperatureRadiant_ConstantFlow_Design_CondensationControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("Off")]
        Off = 1,
        
        [JsonProperty("SimpleOff")]
        SimpleOff = 2,
        
        [JsonProperty("VariableOff")]
        VariableOff = 3,
    }
    
    [Description("Electric resistance low temperature radiant system")]
    [JsonObject("ZoneHVAC:LowTemperatureRadiant:Electric")]
    public class ZoneHVAC_LowTemperatureRadiant_Electric : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Name of zone system is serving")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("Identifies surfaces that radiant system is embedded in. For a system with multipl" +
    "e surfaces, enter the name of a ZoneHVAC:LowTemperatureRadiant:SurfaceGroup obje" +
    "ct.")]
[JsonProperty("surface_name_or_radiant_surface_group_name")]
public string SurfaceNameOrRadiantSurfaceGroupName { get; set; } = "";
        

[Description(@"Enter the method used to determine the maximum electrical heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
[JsonProperty("heating_design_capacity_method")]
public ZoneHVAC_LowTemperatureRadiant_Electric_HeatingDesignCapacityMethod HeatingDesignCapacityMethod { get; set; } = (ZoneHVAC_LowTemperatureRadiant_Electric_HeatingDesignCapacityMethod)Enum.Parse(typeof(ZoneHVAC_LowTemperatureRadiant_Electric_HeatingDesignCapacityMethod), "HeatingDesignCapacity");
        

[Description("Enter the design heating capacity. Required field when the heating design capacit" +
    "y method HeatingDesignCapacity.")]
[JsonProperty("heating_design_capacity")]
public string HeatingDesignCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Enter the heating design capacity per zone floor area. Required field when the he" +
    "ating design capacity method field is CapacityPerFloorArea.")]
[JsonProperty("heating_design_capacity_per_floor_area")]
public System.Nullable<float> HeatingDesignCapacityPerFloorArea { get; set; } = null;
        

[Description("Enter the fraction of autosized heating design capacity. Required field when capa" +
    "city the heating design capacity method field is FractionOfAutosizedHeatingCapac" +
    "ity.")]
[JsonProperty("fraction_of_autosized_heating_design_capacity")]
public System.Nullable<float> FractionOfAutosizedHeatingDesignCapacity { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Temperature used to control unit")]
[JsonProperty("temperature_control_type")]
public ZoneHVAC_LowTemperatureRadiant_Electric_TemperatureControlType TemperatureControlType { get; set; } = (ZoneHVAC_LowTemperatureRadiant_Electric_TemperatureControlType)Enum.Parse(typeof(ZoneHVAC_LowTemperatureRadiant_Electric_TemperatureControlType), "MeanAirTemperature");
        

[Description("How setpoint temperature is defined")]
[JsonProperty("setpoint_control_type")]
public ZoneHVAC_LowTemperatureRadiant_Electric_SetpointControlType SetpointControlType { get; set; } = (ZoneHVAC_LowTemperatureRadiant_Electric_SetpointControlType)Enum.Parse(typeof(ZoneHVAC_LowTemperatureRadiant_Electric_SetpointControlType), "HalfFlowPower");
        

[JsonProperty("heating_throttling_range")]
public System.Nullable<float> HeatingThrottlingRange { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("heating_setpoint_temperature_schedule_name")]
public string HeatingSetpointTemperatureScheduleName { get; set; } = "";
    }
    
    public enum ZoneHVAC_LowTemperatureRadiant_Electric_HeatingDesignCapacityMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingCapacity")]
        FractionOfAutosizedHeatingCapacity = 2,
        
        [JsonProperty("HeatingDesignCapacity")]
        HeatingDesignCapacity = 3,
    }
    
    public enum ZoneHVAC_LowTemperatureRadiant_Electric_TemperatureControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MeanAirTemperature")]
        MeanAirTemperature = 1,
        
        [JsonProperty("MeanRadiantTemperature")]
        MeanRadiantTemperature = 2,
        
        [JsonProperty("OperativeTemperature")]
        OperativeTemperature = 3,
        
        [JsonProperty("OutdoorDryBulbTemperature")]
        OutdoorDryBulbTemperature = 4,
        
        [JsonProperty("OutdoorWetBulbTemperature")]
        OutdoorWetBulbTemperature = 5,
        
        [JsonProperty("SurfaceFaceTemperature")]
        SurfaceFaceTemperature = 6,
        
        [JsonProperty("SurfaceInteriorTemperature")]
        SurfaceInteriorTemperature = 7,
    }
    
    public enum ZoneHVAC_LowTemperatureRadiant_Electric_SetpointControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("HalfFlowPower")]
        HalfFlowPower = 1,
        
        [JsonProperty("ZeroFlowPower")]
        ZeroFlowPower = 2,
    }
    
    [Description("This is used to allow the coordinate control of several radiant system surfaces. " +
        "Note that the following flow fractions must sum up to 1.0 The number of surfaces" +
        " can be expanded beyond 100, if necessary, by adding more groups to the end of t" +
        "he list")]
    [JsonObject("ZoneHVAC:LowTemperatureRadiant:SurfaceGroup")]
    public class ZoneHVAC_LowTemperatureRadiant_SurfaceGroup : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("surface_fractions")]
public string SurfaceFractions { get; set; } = "";
    }
    
    [Description("The number of surfaces can be expanded beyond 100, if necessary, by adding more g" +
        "roups to the end of the list")]
    [JsonObject("ZoneHVAC:HighTemperatureRadiant")]
    public class ZoneHVAC_HighTemperatureRadiant : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("Name of zone system is serving")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description(@"Enter the method used to determine the maximum heating power input capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
[JsonProperty("heating_design_capacity_method")]
public ZoneHVAC_HighTemperatureRadiant_HeatingDesignCapacityMethod HeatingDesignCapacityMethod { get; set; } = (ZoneHVAC_HighTemperatureRadiant_HeatingDesignCapacityMethod)Enum.Parse(typeof(ZoneHVAC_HighTemperatureRadiant_HeatingDesignCapacityMethod), "HeatingDesignCapacity");
        

[Description("Enter the design heating capacity. Required field when the heating design capacit" +
    "y method HeatingDesignCapacity.")]
[JsonProperty("heating_design_capacity")]
public string HeatingDesignCapacity { get; set; } = (System.String)"Autosize";
        

[Description("Enter the heating design capacity per zone floor area. Required field when the he" +
    "ating design capacity method field is CapacityPerFloorArea.")]
[JsonProperty("heating_design_capacity_per_floor_area")]
public System.Nullable<float> HeatingDesignCapacityPerFloorArea { get; set; } = null;
        

[Description("Enter the fraction of autosized heating design capacity. Required field when capa" +
    "city the heating design capacity method field is FractionOfAutosizedHeatingCapac" +
    "ity.")]
[JsonProperty("fraction_of_autosized_heating_design_capacity")]
public System.Nullable<float> FractionOfAutosizedHeatingDesignCapacity { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

[Description("Natural gas or electricity")]
[JsonProperty("fuel_type")]
public ZoneHVAC_HighTemperatureRadiant_FuelType FuelType { get; set; } = (ZoneHVAC_HighTemperatureRadiant_FuelType)Enum.Parse(typeof(ZoneHVAC_HighTemperatureRadiant_FuelType), "Electricity");
        

[Description("Not used for non-gas radiant heaters")]
[JsonProperty("combustion_efficiency")]
public System.Nullable<float> CombustionEfficiency { get; set; } = (System.Nullable<float>)Single.Parse("0.9", CultureInfo.InvariantCulture);
        

[Description("Radiant+latent+lost fractions must sum to 1 or less, remainder is considered conv" +
    "ective heat")]
[JsonProperty("fraction_of_input_converted_to_radiant_energy")]
public System.Nullable<float> FractionOfInputConvertedToRadiantEnergy { get; set; } = (System.Nullable<float>)Single.Parse("0.7", CultureInfo.InvariantCulture);
        

[JsonProperty("fraction_of_input_converted_to_latent_energy")]
public System.Nullable<float> FractionOfInputConvertedToLatentEnergy { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Fraction of input vented to outdoor environment")]
[JsonProperty("fraction_of_input_that_is_lost")]
public System.Nullable<float> FractionOfInputThatIsLost { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[Description("Temperature type used to control unit")]
[JsonProperty("temperature_control_type")]
public ZoneHVAC_HighTemperatureRadiant_TemperatureControlType TemperatureControlType { get; set; } = (ZoneHVAC_HighTemperatureRadiant_TemperatureControlType)Enum.Parse(typeof(ZoneHVAC_HighTemperatureRadiant_TemperatureControlType), "OperativeTemperature");
        

[JsonProperty("heating_throttling_range")]
public System.Nullable<float> HeatingThrottlingRange { get; set; } = (System.Nullable<float>)Single.Parse("2", CultureInfo.InvariantCulture);
        

[Description("This setpoint is an \"operative temperature\" setpoint")]
[JsonProperty("heating_setpoint_temperature_schedule_name")]
public string HeatingSetpointTemperatureScheduleName { get; set; } = "";
        

[Description("This will affect thermal comfort but from an energy balance standpoint this value" +
    " gets added to the convective gains from the radiant heater")]
[JsonProperty("fraction_of_radiant_energy_incident_on_people")]
public System.Nullable<float> FractionOfRadiantEnergyIncidentOnPeople { get; set; } = null;
        

[JsonProperty("surface_fractions")]
public string SurfaceFractions { get; set; } = "";
    }
    
    public enum ZoneHVAC_HighTemperatureRadiant_HeatingDesignCapacityMethod
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingCapacity")]
        FractionOfAutosizedHeatingCapacity = 2,
        
        [JsonProperty("HeatingDesignCapacity")]
        HeatingDesignCapacity = 3,
    }
    
    public enum ZoneHVAC_HighTemperatureRadiant_FuelType
    {
        
        [JsonProperty("Electricity")]
        Electricity = 0,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 1,
    }
    
    public enum ZoneHVAC_HighTemperatureRadiant_TemperatureControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MeanAirTemperature")]
        MeanAirTemperature = 1,
        
        [JsonProperty("MeanAirTemperatureSetpoint")]
        MeanAirTemperatureSetpoint = 2,
        
        [JsonProperty("MeanRadiantTemperature")]
        MeanRadiantTemperature = 3,
        
        [JsonProperty("MeanRadiantTemperatureSetpoint")]
        MeanRadiantTemperatureSetpoint = 4,
        
        [JsonProperty("OperativeTemperature")]
        OperativeTemperature = 5,
        
        [JsonProperty("OperativeTemperatureSetpoint")]
        OperativeTemperatureSetpoint = 6,
    }
    
    [Description("Ventilated slab system where outdoor air flows through hollow cores in a building" +
        " surface (wall, ceiling, or floor).")]
    [JsonObject("ZoneHVAC:VentilatedSlab")]
    public class ZoneHVAC_VentilatedSlab : BHoMObject, IEnergyPlusClass
    {
        

[Description("Availability schedule name for this system. Schedule value > 0 means the system i" +
    "s available. If this field is blank, the system is always available.")]
[JsonProperty("availability_schedule_name")]
public string AvailabilityScheduleName { get; set; } = "";
        

[Description("(name of zone system is serving)")]
[JsonProperty("zone_name")]
public string ZoneName { get; set; } = "";
        

[Description("(name of surface system is embedded in) or list of surfaces")]
[JsonProperty("surface_name_or_radiant_surface_group_name")]
public string SurfaceNameOrRadiantSurfaceGroupName { get; set; } = "";
        

[JsonProperty("maximum_air_flow_rate")]
public string MaximumAirFlowRate { get; set; } = "";
        

[JsonProperty("outdoor_air_control_type")]
public ZoneHVAC_VentilatedSlab_OutdoorAirControlType OutdoorAirControlType { get; set; } = (ZoneHVAC_VentilatedSlab_OutdoorAirControlType)Enum.Parse(typeof(ZoneHVAC_VentilatedSlab_OutdoorAirControlType), "FixedAmount");
        

[JsonProperty("minimum_outdoor_air_flow_rate")]
public string MinimumOutdoorAirFlowRate { get; set; } = "";
        

[JsonProperty("minimum_outdoor_air_schedule_name")]
public string MinimumOutdoorAirScheduleName { get; set; } = "";
        

[Description("schedule values multiply the minimum outdoor air flow rate")]
[JsonProperty("maximum_outdoor_air_flow_rate")]
public string MaximumOutdoorAirFlowRate { get; set; } = "";
        

[Description("Note that this depends on the control type as to whether schedule values are a fr" +
    "action or temperature")]
[JsonProperty("maximum_outdoor_air_fraction_or_temperature_schedule_name")]
public string MaximumOutdoorAirFractionOrTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("system_configuration_type")]
public ZoneHVAC_VentilatedSlab_SystemConfigurationType SystemConfigurationType { get; set; } = (ZoneHVAC_VentilatedSlab_SystemConfigurationType)Enum.Parse(typeof(ZoneHVAC_VentilatedSlab_SystemConfigurationType), "SlabOnly");
        

[JsonProperty("hollow_core_inside_diameter")]
public System.Nullable<float> HollowCoreInsideDiameter { get; set; } = (System.Nullable<float>)Single.Parse("0.05", CultureInfo.InvariantCulture);
        

[Description("(length of core cavity embedded in surface)")]
[JsonProperty("hollow_core_length")]
public System.Nullable<float> HollowCoreLength { get; set; } = null;
        

[Description("flow will be divided evenly among the cores")]
[JsonProperty("number_of_cores")]
public System.Nullable<float> NumberOfCores { get; set; } = null;
        

[Description("(temperature on which unit is controlled)")]
[JsonProperty("temperature_control_type")]
public ZoneHVAC_VentilatedSlab_TemperatureControlType TemperatureControlType { get; set; } = (ZoneHVAC_VentilatedSlab_TemperatureControlType)Enum.Parse(typeof(ZoneHVAC_VentilatedSlab_TemperatureControlType), "OutdoorDryBulbTemperature");
        

[Description(@"Air and control temperatures for heating work together to provide a linear function that determines the air temperature sent to the radiant system. The current control temperature (see A14) is compared to the high and low control temperatures at the current time. If the control temperature is above the high temperature, then the inlet air temperature is set to the low air temperature. If the control temperature is below the low temperature, then the inlet air temperature is set to the high air temperature. If the control temperature is between the high and low value, then the inlet air temperature is linearly interpolated between the low and high air temperature values.")]
[JsonProperty("heating_high_air_temperature_schedule_name")]
public string HeatingHighAirTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("heating_low_air_temperature_schedule_name")]
public string HeatingLowAirTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("heating_high_control_temperature_schedule_name")]
public string HeatingHighControlTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("heating_low_control_temperature_schedule_name")]
public string HeatingLowControlTemperatureScheduleName { get; set; } = "";
        

[Description("See note for heating high air temperature schedule above for interpretation infor" +
    "mation (or see the Input/Output Reference).")]
[JsonProperty("cooling_high_air_temperature_schedule_name")]
public string CoolingHighAirTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("cooling_low_air_temperature_schedule_name")]
public string CoolingLowAirTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("cooling_high_control_temperature_schedule_name")]
public string CoolingHighControlTemperatureScheduleName { get; set; } = "";
        

[JsonProperty("cooling_low_control_temperature_schedule_name")]
public string CoolingLowControlTemperatureScheduleName { get; set; } = "";
        

[Description("This is the zone return air inlet to the ventilated slab system outdoor air mixer" +
    ". This node is typically a zone exhaust node (do not connect to \"Zone Return Air" +
    " Node\").")]
[JsonProperty("return_air_node_name")]
public string ReturnAirNodeName { get; set; } = "";
        

[Description("This is the node entering the slab or series of slabs after the fan and coil(s).")]
[JsonProperty("slab_in_node_name")]
public string SlabInNodeName { get; set; } = "";
        

[Description("This is the node name exiting the slab. This node is typically a zone inlet node." +
    " Leave blank when the system configuration is SlabOnly or SeriesSlabs.")]
[JsonProperty("zone_supply_air_node_name")]
public string ZoneSupplyAirNodeName { get; set; } = "";
        

[Description("This node is the outdoor air inlet to the ventilated slab oa mixer. This node sho" +
    "uld also be specified in an OutdoorAir:Node or OutdoorAir:NodeList object.")]
[JsonProperty("outdoor_air_node_name")]
public string OutdoorAirNodeName { get; set; } = "";
        

[Description("This node is the relief air node from the ventilated slab outdoor air mixer.")]
[JsonProperty("relief_air_node_name")]
public string ReliefAirNodeName { get; set; } = "";
        

[Description("This is the node name leaving the outdoor air mixer and entering the fan and coil" +
    "(s).")]
[JsonProperty("outdoor_air_mixer_outlet_node_name")]
public string OutdoorAirMixerOutletNodeName { get; set; } = "";
        

[Description("This is the node name of the fan outlet.")]
[JsonProperty("fan_outlet_node_name")]
public string FanOutletNodeName { get; set; } = "";
        

[Description("Allowable fan types are Fan:SystemModel and Fan:ConstantVolume")]
[JsonProperty("fan_name")]
public string FanName { get; set; } = "";
        

[JsonProperty("coil_option_type")]
public ZoneHVAC_VentilatedSlab_CoilOptionType CoilOptionType { get; set; } = (ZoneHVAC_VentilatedSlab_CoilOptionType)Enum.Parse(typeof(ZoneHVAC_VentilatedSlab_CoilOptionType), "Cooling");
        

[JsonProperty("heating_coil_object_type")]
public ZoneHVAC_VentilatedSlab_HeatingCoilObjectType HeatingCoilObjectType { get; set; } = (ZoneHVAC_VentilatedSlab_HeatingCoilObjectType)Enum.Parse(typeof(ZoneHVAC_VentilatedSlab_HeatingCoilObjectType), "CoilHeatingElectric");
        

[JsonProperty("heating_coil_name")]
public string HeatingCoilName { get; set; } = "";
        

[JsonProperty("hot_water_or_steam_inlet_node_name")]
public string HotWaterOrSteamInletNodeName { get; set; } = "";
        

[JsonProperty("cooling_coil_object_type")]
public ZoneHVAC_VentilatedSlab_CoolingCoilObjectType CoolingCoilObjectType { get; set; } = (ZoneHVAC_VentilatedSlab_CoolingCoilObjectType)Enum.Parse(typeof(ZoneHVAC_VentilatedSlab_CoolingCoilObjectType), "CoilCoolingWater");
        

[JsonProperty("cooling_coil_name")]
public string CoolingCoilName { get; set; } = "";
        

[JsonProperty("cold_water_inlet_node_name")]
public string ColdWaterInletNodeName { get; set; } = "";
        

[Description("Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty("availability_manager_list_name")]
public string AvailabilityManagerListName { get; set; } = "";
        

[Description("Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
    }
    
    public enum ZoneHVAC_VentilatedSlab_OutdoorAirControlType
    {
        
        [JsonProperty("FixedAmount")]
        FixedAmount = 0,
        
        [JsonProperty("FixedTemperature")]
        FixedTemperature = 1,
        
        [JsonProperty("VariablePercent")]
        VariablePercent = 2,
    }
    
    public enum ZoneHVAC_VentilatedSlab_SystemConfigurationType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("SeriesSlabs")]
        SeriesSlabs = 1,
        
        [JsonProperty("SlabAndZone")]
        SlabAndZone = 2,
        
        [JsonProperty("SlabOnly")]
        SlabOnly = 3,
    }
    
    public enum ZoneHVAC_VentilatedSlab_TemperatureControlType
    {
        
        [JsonProperty("")]
        Empty = 0,
        
        [JsonProperty("MeanAirTemperature")]
        MeanAirTemperature = 1,
        
        [JsonProperty("MeanRadiantTemperature")]
        MeanRadiantTemperature = 2,
        
        [JsonProperty("OperativeTemperature")]
        OperativeTemperature = 3,
        
        [JsonProperty("OutdoorDryBulbTemperature")]
        OutdoorDryBulbTemperature = 4,
        
        [JsonProperty("OutdoorWetBulbTemperature")]
        OutdoorWetBulbTemperature = 5,
        
        [JsonProperty("SurfaceTemperature")]
        SurfaceTemperature = 6,
        
        [JsonProperty("ZoneAirDewPointTemperature")]
        ZoneAirDewPointTemperature = 7,
    }
    
    public enum ZoneHVAC_VentilatedSlab_CoilOptionType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Heating")]
        Heating = 1,
        
        [JsonProperty("HeatingAndCooling")]
        HeatingAndCooling = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum ZoneHVAC_VentilatedSlab_HeatingCoilObjectType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum ZoneHVAC_VentilatedSlab_CoolingCoilObjectType
    {
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 0,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 1,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatExchangerAssisted")]
        CoilSystemCoolingWaterHeatExchangerAssisted = 2,
    }
    
    [Description("This is used to allow the coordinate control of several ventilated slab system su" +
        "rfaces. Note that the flow fractions must sum up to 1.0. The number of surfaces " +
        "can be expanded beyond 10, if necessary, by adding more groups to the end of the" +
        " list")]
    [JsonObject("ZoneHVAC:VentilatedSlab:SlabGroup")]
    public class ZoneHVAC_VentilatedSlab_SlabGroup : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("data")]
public string Data { get; set; } = "";
    }
}
