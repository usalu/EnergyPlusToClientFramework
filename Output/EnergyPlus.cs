//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EnergyPlus
{
    using System.ComponentModel;
    using System;
    using Newtonsoft.Json;
    
    
    public enum YesNoDefault
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("No")]
        No = 1,
        
        [JsonProperty("Yes")]
        Yes = 2,
    }
    
    public enum HeatTransferAlgorithm
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CombinedHeatAndMoistureFiniteElement")]
        CombinedHeatAndMoistureFiniteElement = 1,
        
        [JsonProperty("ConductionFiniteDifference")]
        ConductionFiniteDifference = 2,
        
        [JsonProperty("ConductionTransferFunction")]
        ConductionTransferFunction = 3,
        
        [JsonProperty("MoisturePenetrationDepthConductionTransferFunction")]
        MoisturePenetrationDepthConductionTransferFunction = 4,
    }
}
namespace EnergyPlus.AdvancedConstructionSurfaceZoneConcepts
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Determines which Heat Balance Algorithm will be used for a specific surface Allows selectively overriding the global setting in HeatBalanceAlgorithm CTF (Conduction Transfer Functions), EMPD (Effective Moisture Penetration Depth with Conduction Transfer Functions). Advanced/Research Usage: CondFD (Conduction Finite Difference) Advanced/Research Usage: HAMT (Combined Heat And Moisture Finite Element)")]
    [JsonObject("SurfaceProperty:HeatTransferAlgorithm")]
    public class SurfaceProperty_HeatTransferAlgorithm
    {
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public HeatTransferAlgorithm Algorithm { get; set; } = (HeatTransferAlgorithm)Enum.Parse(typeof(HeatTransferAlgorithm), "ConductionTransferFunction");
    }
    
    [Description(@"Determines which Heat Balance Algorithm will be used for a group of surface types Allows selectively overriding the global setting in HeatBalanceAlgorithm CTF (Conduction Transfer Functions), EMPD (Effective Moisture Penetration Depth with Conduction Transfer Functions). Advanced/Research Usage: CondFD (Conduction Finite Difference) Advanced/Research Usage: HAMT (Combined Heat And Moisture Finite Element)")]
    [JsonObject("SurfaceProperty:HeatTransferAlgorithm:MultipleSurface")]
    public class SurfaceProperty_HeatTransferAlgorithm_MultipleSurface
    {
        
[JsonProperty(@"")]
public YesNoDefault SurfaceType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public HeatTransferAlgorithm Algorithm { get; set; } = (HeatTransferAlgorithm)Enum.Parse(typeof(HeatTransferAlgorithm), "ConductionTransferFunction");
    }
    
    public enum SurfaceTypeType
    {
        
        [JsonProperty("AllExteriorFloors")]
        AllExteriorFloors = 0,
        
        [JsonProperty("AllExteriorRoofs")]
        AllExteriorRoofs = 1,
        
        [JsonProperty("AllExteriorSurfaces")]
        AllExteriorSurfaces = 2,
        
        [JsonProperty("AllExteriorWalls")]
        AllExteriorWalls = 3,
        
        [JsonProperty("AllGroundContactSurfaces")]
        AllGroundContactSurfaces = 4,
        
        [JsonProperty("AllInteriorCeilings")]
        AllInteriorCeilings = 5,
        
        [JsonProperty("AllInteriorFloors")]
        AllInteriorFloors = 6,
        
        [JsonProperty("AllInteriorSurfaces")]
        AllInteriorSurfaces = 7,
        
        [JsonProperty("AllInteriorWalls")]
        AllInteriorWalls = 8,
    }
    
    [Description(@"Determines which Heat Balance Algorithm will be used for a list of surfaces Allows selectively overriding the global setting in HeatBalanceAlgorithm CTF (Conduction Transfer Functions), EMPD (Effective Moisture Penetration Depth with Conduction Transfer Functions). Advanced/Research Usage: CondFD (Conduction Finite Difference) Advanced/Research Usage: HAMT (Combined Heat And Moisture Finite Element)")]
    [JsonObject("SurfaceProperty:HeatTransferAlgorithm:SurfaceList")]
    public class SurfaceProperty_HeatTransferAlgorithm_SurfaceList
    {
        
[JsonProperty(@"")]
public HeatTransferAlgorithm Algorithm { get; set; } = (HeatTransferAlgorithm)Enum.Parse(typeof(HeatTransferAlgorithm), "ConductionTransferFunction");
        
[JsonProperty(@"")]
public System.String Surface { get; set; } = "";
    }
    
    [Description(@"Determines which Heat Balance Algorithm will be used for surfaces that have a specific type of construction Allows selectively overriding the global setting in HeatBalanceAlgorithm CTF (Conduction Transfer Functions), EMPD (Effective Moisture Penetration Depth with Conduction Transfer Functions). Advanced/Research Usage: CondFD (Conduction Finite Difference) Advanced/Research Usage: HAMT (Combined Heat And Moisture Finite Element)")]
    [JsonObject("SurfaceProperty:HeatTransferAlgorithm:Construction")]
    public class SurfaceProperty_HeatTransferAlgorithm_Construction
    {
        
[JsonProperty(@"")]
public HeatTransferAlgorithm Algorithm { get; set; } = (HeatTransferAlgorithm)Enum.Parse(typeof(HeatTransferAlgorithm), "ConductionTransferFunction");
        
[JsonProperty(@"")]
public System.String ConstructionName { get; set; } = "";
    }
    
    [Description("Allows an additional heat source term to be added to the inside or outside surfac" +
        "e boundary. A heat source can be added to either or both the inside and outside " +
        "of the same surface.")]
    [JsonObject("SurfaceProperty:HeatBalanceSourceTerm")]
    public class SurfaceProperty_HeatBalanceSourceTerm
    {
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[Description(@"The value of this schedule is the source term value for the inside face of this surface If this field is left blank, no inside surface source term will be applied. The schedule values are heat rate per surface area (W/m2), when positive schedule values indicate heat gain and negative values indicates loss.")]
[JsonProperty(@"The value of this schedule is the source term value for the inside face of this surface If this field is left blank, no inside surface source term will be applied. The schedule values are heat rate per surface area (W/m2), when positive schedule values indicate heat gain and negative values indicates loss.")]
public System.String InsideFaceHeatSourceTermScheduleName { get; set; } = "";
        
[Description(@"The value of this schedule is the source term value for the outside face of this surface If this field is left blank, no outside surface source term will be applied. The schedule values are heat rate per surface area (W/m2), when positive schedule values indicate heat gain and negative values indicates loss.")]
[JsonProperty(@"The value of this schedule is the source term value for the outside face of this surface If this field is left blank, no outside surface source term will be applied. The schedule values are heat rate per surface area (W/m2), when positive schedule values indicate heat gain and negative values indicates loss.")]
public System.String OutsideFaceHeatSourceTermScheduleName { get; set; } = "";
    }
    
    [Description("Exterior or Interior Insulation on opaque surfaces")]
    [JsonObject("SurfaceControl:MovableInsulation")]
    public class SurfaceControl_MovableInsulation
    {
        
[JsonProperty(@"")]
public YesNoDefault InsulationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaterialName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ScheduleName { get; set; } = "";
    }
    
    public enum InsulationTypeType
    {
        
        [JsonProperty("Inside")]
        Inside = 0,
        
        [JsonProperty("Outside")]
        Outside = 1,
    }
    
    [Description("This object sets the other side conditions for a surface in a variety of ways.")]
    [JsonObject("SurfaceProperty:OtherSideCoefficients")]
    public class SurfaceProperty_OtherSideCoefficients
    {
        
[Description(@"if>0, this field becomes the exterior convective/radiative film coefficient and the other fields are used to calculate the outdoor air temperature then exterior surface temperature based on outdoor air and specified coefficient if<=0, then remaining fields calculate the outside surface temperature The following fields are used in the equation: OtherSideTemp=N2*N3 + N4*OutdoorDry-bulb + N5*GroundTemp + N6*WindSpeed*OutdoorDry-bulb + N7*TempZone + N9*TempPrev")]
[JsonProperty(@"if>0, this field becomes the exterior convective/radiative film coefficient and the other fields are used to calculate the outdoor air temperature then exterior surface temperature based on outdoor air and specified coefficient if<=0, then remaining fields calculate the outside surface temperature The following fields are used in the equation: OtherSideTemp=N2*N3 + N4*OutdoorDry-bulb + N5*GroundTemp + N6*WindSpeed*OutdoorDry-bulb + N7*TempZone + N9*TempPrev")]
public System.Single CombinedConvectiveRadiativeFilmCoefficient { get; set; } = ;
        
[Description(@"This parameter will be overwritten by the values from the Constant Temperature Schedule Name (below) if one is present")]
[JsonProperty(@"This parameter will be overwritten by the values from the Constant Temperature Schedule Name (below) if one is present")]
public System.Single ConstantTemperature { get; set; } = 0;
        
[Description(@"This coefficient is used even with a Schedule. It should normally be 1.0 in that case. This field is ignored if Sinusoidal Variation of Constant Temperature Coefficient = Yes.")]
[JsonProperty(@"This coefficient is used even with a Schedule. It should normally be 1.0 in that case. This field is ignored if Sinusoidal Variation of Constant Temperature Coefficient = Yes.")]
public System.Single ConstantTemperatureCoefficient { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single ExternalDryBulbTemperatureCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single GroundTemperatureCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single WindSpeedCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single ZoneAirTemperatureCoefficient { get; set; } = 0;
        
[Description(@"Name of schedule for values of constant temperature. Schedule values replace any value specified in the field Constant Temperature.")]
[JsonProperty(@"Name of schedule for values of constant temperature. Schedule values replace any value specified in the field Constant Temperature.")]
public System.String ConstantTemperatureScheduleName { get; set; } = "";
        
[Description(@"Optionally used to vary Constant Temperature Coefficient with unitary sine wave")]
[JsonProperty(@"Optionally used to vary Constant Temperature Coefficient with unitary sine wave")]
public YesNoDefault SinusoidalVariationOfConstantTemperatureCoefficient { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Use with sinusoidal variation to define the time period")]
[JsonProperty(@"Use with sinusoidal variation to define the time period")]
public System.Single PeriodOfSinusoidalVariation { get; set; } = 24;
        
[Description(@"This coefficient multiplies the other side temperature result from the previous zone timestep")]
[JsonProperty(@"This coefficient multiplies the other side temperature result from the previous zone timestep")]
public System.Single PreviousOtherSideTemperatureCoefficient { get; set; } = 0;
        
[Description(@"This field specifies a lower limit for the other side temperature result. Blank indicates no limit")]
[JsonProperty(@"This field specifies a lower limit for the other side temperature result. Blank indicates no limit")]
public System.Single MinimumOtherSideTemperatureLimit { get; set; } = ;
        
[Description(@"This field specifies an upper limit for the other side temperature result. Blank indicates no limit")]
[JsonProperty(@"This field specifies an upper limit for the other side temperature result. Blank indicates no limit")]
public System.Single MaximumOtherSideTemperatureLimit { get; set; } = ;
    }
    
    [Description("This object sets up modifying the other side conditions for a surface from other " +
        "model results.")]
    [JsonObject("SurfaceProperty:OtherSideConditionsModel")]
    public class SurfaceProperty_OtherSideConditionsModel
    {
        
[Description(@"GapConvectionRadiation provides boundary conditions for convection and linearized thermal radiation across a gap or cavity on the other side of the surface that are modeled separately. UndergroundPipingSystemSurface provides boundary conditions for surfaces in contact with PipingSystem:Underground domains GroundCoupledSurface provides boundary conditions for surfaces in contact with GroundDomain objects ConvectiveUnderwater provides a connection between a surface and an underwater boundary condition defined using a SurfaceProperty:Underwater object")]
[JsonProperty(@"GapConvectionRadiation provides boundary conditions for convection and linearized thermal radiation across a gap or cavity on the other side of the surface that are modeled separately. UndergroundPipingSystemSurface provides boundary conditions for surfaces in contact with PipingSystem:Underground domains GroundCoupledSurface provides boundary conditions for surfaces in contact with GroundDomain objects ConvectiveUnderwater provides a connection between a surface and an underwater boundary condition defined using a SurfaceProperty:Underwater object")]
public YesNoDefault TypeOfModeling { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "GapConvectionRadiation");
    }
    
    public enum TypeOfModelingType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConvectiveUnderwater")]
        ConvectiveUnderwater = 1,
        
        [JsonProperty("GapConvectionRadiation")]
        GapConvectionRadiation = 2,
        
        [JsonProperty("GroundCoupledSurface")]
        GroundCoupledSurface = 3,
        
        [JsonProperty("UndergroundPipingSystemSurface")]
        UndergroundPipingSystemSurface = 4,
    }
    
    [Description("This object sets up a convective water boundary condition for a surface The free " +
        "stream temperature and velocity are scheduled. If the free stream velocity is ze" +
        "ro, the surface will naturally convect with the surrounding water.")]
    [JsonObject("SurfaceProperty:Underwater")]
    public class SurfaceProperty_Underwater
    {
        
[Description(@"This is the distance from the leading edge of the boundary layer development to the centroid of the surface of interest. The value of this field is used as the distance in the Reynolds number for evaluating the local convection coefficient.")]
[JsonProperty(@"This is the distance from the leading edge of the boundary layer development to the centroid of the surface of interest. The value of this field is used as the distance in the Reynolds number for evaluating the local convection coefficient.")]
public System.Single DistanceFromSurfaceCentroidToLeadingEdgeOfBoundaryLayer { get; set; } = ;
        
[JsonProperty(@"")]
public System.String FreeStreamWaterTemperatureSchedule { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FreeStreamWaterVelocitySchedule { get; set; } = "";
    }
    
    [Description("Refined definition of the foundation surface construction used to inform two-dime" +
        "nsional heat transfer calculated using the Kiva ground heat transfer methodology" +
        ".")]
    [JsonObject("Foundation:Kiva")]
    public class Foundation_Kiva
    {
        
[Description(@"Indoor air temperature used for Kiva initialization (prior to warmup period) If left blank, indoor air temperature will be determined based on zone setpoints")]
[JsonProperty(@"Indoor air temperature used for Kiva initialization (prior to warmup period) If left blank, indoor air temperature will be determined based on zone setpoints")]
public System.Single InitialIndoorAirTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.String InteriorHorizontalInsulationMaterialName { get; set; } = "";
        
[Description(@"Distance from the slab bottom to the top of interior horizontal insulation")]
[JsonProperty(@"Distance from the slab bottom to the top of interior horizontal insulation")]
public System.Single InteriorHorizontalInsulationDepth { get; set; } = 0;
        
[Description(@"Extent of insulation as measured from the wall interior")]
[JsonProperty(@"Extent of insulation as measured from the wall interior")]
public System.Single InteriorHorizontalInsulationWidth { get; set; } = ;
        
[JsonProperty(@"")]
public System.String InteriorVerticalInsulationMaterialName { get; set; } = "";
        
[Description(@"Extent of insulation as measured from the wall top to the bottom edge of the interior vertical insulation")]
[JsonProperty(@"Extent of insulation as measured from the wall top to the bottom edge of the interior vertical insulation")]
public System.Single InteriorVerticalInsulationDepth { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ExteriorHorizontalInsulationMaterialName { get; set; } = "";
        
[Description(@"Distance from the exterior grade to the top of exterior horizontal insulation")]
[JsonProperty(@"Distance from the exterior grade to the top of exterior horizontal insulation")]
public System.Single ExteriorHorizontalInsulationDepth { get; set; } = ;
        
[Description(@"Extent of insulation as measured from the wall exterior")]
[JsonProperty(@"Extent of insulation as measured from the wall exterior")]
public System.Single ExteriorHorizontalInsulationWidth { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String ExteriorVerticalInsulationMaterialName { get; set; } = "";
        
[Description(@"Extent of insulation as measured from the wall top to the bottom edge of the exterior vertical insulation")]
[JsonProperty(@"Extent of insulation as measured from the wall top to the bottom edge of the exterior vertical insulation")]
public System.Single ExteriorVerticalInsulationDepth { get; set; } = ;
        
[Description(@"Distance from the exterior grade to the wall top")]
[JsonProperty(@"Distance from the exterior grade to the wall top")]
public System.Single WallHeightAboveGrade { get; set; } = 0.2;
        
[Description(@"Distance from the slab bottom to the bottom of the foundation wall")]
[JsonProperty(@"Distance from the slab bottom to the bottom of the foundation wall")]
public System.Single WallDepthBelowSlab { get; set; } = 0;
        
[Description(@"Defines the below-grade surface construction for slabs. Required if foundation wall is not exposed to the zone.")]
[JsonProperty(@"Defines the below-grade surface construction for slabs. Required if foundation wall is not exposed to the zone.")]
public System.String FootingWallConstructionName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FootingMaterialName { get; set; } = "";
        
[Description(@"Top-to-bottom dimension of the footing (not to be confused with its depth in the ground). The width of the footing is defined by the material's thickness.")]
[JsonProperty(@"Top-to-bottom dimension of the footing (not to be confused with its depth in the ground). The width of the footing is defined by the material's thickness.")]
public System.Single FootingDepth { get; set; } = 0.3;
        
[JsonProperty(@"")]
public System.String Blocks { get; set; } = "";
    }
    
    [Description("Settings applied across all Kiva foundation calculations. Object is not required." +
        " If not defined, defaults will be applied.")]
    [JsonObject("Foundation:Kiva:Settings")]
    public class Foundation_Kiva_Settings
    {
        
[JsonProperty(@"")]
public System.Single SoilConductivity { get; set; } = 1.73;
        
[JsonProperty(@"")]
public System.Single SoilDensity { get; set; } = 1842;
        
[JsonProperty(@"")]
public System.Single SoilSpecificHeat { get; set; } = 419;
        
[JsonProperty(@"")]
public System.Single GroundSolarAbsorptivity { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single GroundThermalAbsorptivity { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single GroundSurfaceRoughness { get; set; } = 0.03;
        
[JsonProperty(@"")]
public System.Single FarFieldWidth { get; set; } = 40;
        
[JsonProperty(@"")]
public YesNoDefault DeepGroundBoundaryCondition { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Autoselect");
        
[JsonProperty(@"")]
public System.String DeepGroundDepth { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.Single MinimumCellDimension { get; set; } = 0.02;
        
[JsonProperty(@"")]
public System.Single MaximumCellGrowthCoefficient { get; set; } = 1.5;
        
[JsonProperty(@"")]
public YesNoDefault SimulationTimestep { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Hourly");
    }
    
    public enum DeepGroundBoundaryConditionType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Autoselect")]
        Autoselect = 1,
        
        [JsonProperty("GroundWater")]
        GroundWater = 2,
        
        [JsonProperty("ZeroFlux")]
        ZeroFlux = 3,
    }
    
    public enum SimulationTimestepType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Hourly")]
        Hourly = 1,
        
        [JsonProperty("Timestep")]
        Timestep = 2,
    }
    
    [Description(@"Defines the perimeter of a foundation floor that is exposed to the exterior environment through the floor. User may either define the total exposed perimeter, fraction of perimeter exposed or individually define which segments of the floor surface perimeter are exposed.")]
    [JsonObject("SurfaceProperty:ExposedFoundationPerimeter")]
    public class SurfaceProperty_ExposedFoundationPerimeter
    {
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[Description(@"Choices: TotalExposedPerimeter => total exposed perimeter in meters ExposedPerimeterFraction => fraction of total perimeter that is exposed. Value * Fraction = Total exposed perimeter BySegment => define whether the segment between each set of consecutive vertices of the floor surface is exposed. SUM(exposed segement lengths) = Total exposed perimeter")]
[JsonProperty(@"Choices: TotalExposedPerimeter => total exposed perimeter in meters ExposedPerimeterFraction => fraction of total perimeter that is exposed. Value * Fraction = Total exposed perimeter BySegment => define whether the segment between each set of consecutive vertices of the floor surface is exposed. SUM(exposed segement lengths) = Total exposed perimeter")]
public YesNoDefault ExposedPerimeterCalculationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single TotalExposedPerimeter { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ExposedPerimeterFraction { get; set; } = 1;
        
[JsonProperty(@"")]
public System.String Surfaces { get; set; } = "";
    }
    
    public enum ExposedPerimeterCalculationMethodType
    {
        
        [JsonProperty("BySegment")]
        BySegment = 0,
        
        [JsonProperty("ExposedPerimeterFraction")]
        ExposedPerimeterFraction = 1,
        
        [JsonProperty("TotalExposedPerimeter")]
        TotalExposedPerimeter = 2,
    }
    
    [Description(@"Options to change the individual convection model equations for dynamic selection when using AdaptiveConvectiongAlgorithm This object is only needed to make changes to the default model selections for any or all of the surface categories. This object is for the inside face, the side of the surface facing a thermal zone.")]
    [JsonObject("SurfaceConvectionAlgorithm:Inside:AdaptiveModelSelections")]
    public class SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections
    {
        
[Description(@"Applies to zone with no HVAC or when HVAC is off This is for vertical walls")]
[JsonProperty(@"Applies to zone with no HVAC or when HVAC is off This is for vertical walls")]
public YesNoDefault SimpleBuoyancyVerticalWallEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FohannoPolidoriVerticalWall");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String SimpleBuoyancyVerticalWallUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with no HVAC or when HVAC is off This is for horizontal surfaces with heat flow directed for stable thermal stratification")]
[JsonProperty(@"Applies to zone with no HVAC or when HVAC is off This is for horizontal surfaces with heat flow directed for stable thermal stratification")]
public YesNoDefault SimpleBuoyancyStableHorizontalEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AlamdariHammondStableHorizontal");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String SimpleBuoyancyStableHorizontalEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with no HVAC or when HVAC is off This is for passive horizontal surfaces with heat flow for unstable thermal stratification")]
[JsonProperty(@"Applies to zone with no HVAC or when HVAC is off This is for passive horizontal surfaces with heat flow for unstable thermal stratification")]
public YesNoDefault SimpleBuoyancyUnstableHorizontalEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AlamdariHammondUnstableHorizontal");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String SimpleBuoyancyUnstableHorizontalEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with no HVAC or when HVAC is off This is for tilted surfaces with heat flow for stable thermal stratification")]
[JsonProperty(@"Applies to zone with no HVAC or when HVAC is off This is for tilted surfaces with heat flow for stable thermal stratification")]
public YesNoDefault SimpleBuoyancyStableTiltedEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaltonStableHorizontalOrTilt");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String SimpleBuoyancyStableTiltedEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with no HVAC or when HVAC is off This is for tilted surfaces with heat flow for unstable thermal stratification")]
[JsonProperty(@"Applies to zone with no HVAC or when HVAC is off This is for tilted surfaces with heat flow for unstable thermal stratification")]
public YesNoDefault SimpleBuoyancyUnstableTiltedEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaltonUnstableHorizontalOrTilt");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String SimpleBuoyancyUnstableTiltedEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with no HVAC or when HVAC is off This is for all window surfaces")]
[JsonProperty(@"Applies to zone with no HVAC or when HVAC is off This is for all window surfaces")]
public YesNoDefault SimpleBuoyancyWindowsEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ISO15099Windows");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String SimpleBuoyancyWindowsEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with in-floor heating and/or in-ceiling cooling This is for vertical walls")]
[JsonProperty(@"Applies to zone with in-floor heating and/or in-ceiling cooling This is for vertical walls")]
public YesNoDefault FloorHeatCeilingCoolVerticalWallEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "KhalifaEq3WallAwayFromHeat");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String FloorHeatCeilingCoolVerticalWallEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with in-floor heating and/or in-ceiling cooling This is for passive horizontal surfaces with heat flow for stable thermal stratification")]
[JsonProperty(@"Applies to zone with in-floor heating and/or in-ceiling cooling This is for passive horizontal surfaces with heat flow for stable thermal stratification")]
public YesNoDefault FloorHeatCeilingCoolStableHorizontalEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AlamdariHammondStableHorizontal");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String FloorHeatCeilingCoolStableHorizontalEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with in-floor heating and/or in-ceiling cooling This is for passive horizontal surfaces with heat flow for unstable thermal stratification")]
[JsonProperty(@"Applies to zone with in-floor heating and/or in-ceiling cooling This is for passive horizontal surfaces with heat flow for unstable thermal stratification")]
public YesNoDefault FloorHeatCeilingCoolUnstableHorizontalEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "KhalifaEq4CeilingAwayFromHeat");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String FloorHeatCeilingCoolUnstableHorizontalEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with in-floor heating and/or in-ceiling cooling This is for a floor with active heating elements")]
[JsonProperty(@"Applies to zone with in-floor heating and/or in-ceiling cooling This is for a floor with active heating elements")]
public YesNoDefault FloorHeatCeilingCoolHeatedFloorEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AwbiHattonHeatedFloor");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String FloorHeatCeilingCoolHeatedFloorEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with in-floor heating and/or in-ceiling cooling This is for a ceiling with active cooling elements")]
[JsonProperty(@"Applies to zone with in-floor heating and/or in-ceiling cooling This is for a ceiling with active cooling elements")]
public YesNoDefault FloorHeatCeilingCoolChilledCeilingEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "KaradagChilledCeiling");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String FloorHeatCeilingCoolChilledCeilingEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with in-floor heating and/or in-ceiling cooling This is for tilted surfaces with heat flow for stable thermal stratification")]
[JsonProperty(@"Applies to zone with in-floor heating and/or in-ceiling cooling This is for tilted surfaces with heat flow for stable thermal stratification")]
public YesNoDefault FloorHeatCeilingCoolStableTiltedEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaltonStableHorizontalOrTilt");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String FloorHeatCeilingCoolStableTiltedEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with in-floor heating and/or in-ceiling cooling This is for tilted surfaces with heat flow for unstable thermal stratification")]
[JsonProperty(@"Applies to zone with in-floor heating and/or in-ceiling cooling This is for tilted surfaces with heat flow for unstable thermal stratification")]
public YesNoDefault FloorHeatCeilingCoolUnstableTiltedEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaltonUnstableHorizontalOrTilt");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String FloorHeatCeilingCoolUnstableTiltedEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with in-floor heating and/or in-ceiling cooling This is for all window surfaces")]
[JsonProperty(@"Applies to zone with in-floor heating and/or in-ceiling cooling This is for all window surfaces")]
public YesNoDefault FloorHeatCeilingCoolWindowEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ISO15099Windows");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String FloorHeatCeilingCoolWindowEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with in-wall panel heating This is for vertical walls that are not actively heated")]
[JsonProperty(@"Applies to zone with in-wall panel heating This is for vertical walls that are not actively heated")]
public YesNoDefault WallPanelHeatingVerticalWallEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "KhalifaEq6NonHeatedWalls");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String WallPanelHeatingVerticalWallEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with in-wall panel heating This is for vertical walls that are being actively heated")]
[JsonProperty(@"Applies to zone with in-wall panel heating This is for vertical walls that are being actively heated")]
public YesNoDefault WallPanelHeatingHeatedWallEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AwbiHattonHeatedWall");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String WallPanelHeatingHeatedWallEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with in-wall panel heating This is for horizontal surfaces with heat flow directed for stable thermal stratification")]
[JsonProperty(@"Applies to zone with in-wall panel heating This is for horizontal surfaces with heat flow directed for stable thermal stratification")]
public YesNoDefault WallPanelHeatingStableHorizontalEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AlamdariHammondStableHorizontal");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String WallPanelHeatingStableHorizontalEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with in-wall panel heating This is for horizontal surfaces with heat flow directed for unstable thermal stratification")]
[JsonProperty(@"Applies to zone with in-wall panel heating This is for horizontal surfaces with heat flow directed for unstable thermal stratification")]
public YesNoDefault WallPanelHeatingUnstableHorizontalEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "KhalifaEq7Ceiling");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String WallPanelHeatingUnstableHorizontalEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with in-wall panel heating This is for tilted surfaces with heat flow for stable thermal stratification")]
[JsonProperty(@"Applies to zone with in-wall panel heating This is for tilted surfaces with heat flow for stable thermal stratification")]
public YesNoDefault WallPanelHeatingStableTiltedEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaltonStableHorizontalOrTilt");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String WallPanelHeatingStableTiltedEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with in-wall panel heating This is for tilted surfaces with heat flow for unstable thermal stratification")]
[JsonProperty(@"Applies to zone with in-wall panel heating This is for tilted surfaces with heat flow for unstable thermal stratification")]
public YesNoDefault WallPanelHeatingUnstableTiltedEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaltonUnstableHorizontalOrTilt");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String WallPanelHeatingUnstableTiltedEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with in-wall panel heating This is for all window surfaces")]
[JsonProperty(@"Applies to zone with in-wall panel heating This is for all window surfaces")]
public YesNoDefault WallPanelHeatingWindowEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ISO15099Windows");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String WallPanelHeatingWindowEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with convective heater This is for vertical walls not directly affected by heater")]
[JsonProperty(@"Applies to zone with convective heater This is for vertical walls not directly affected by heater")]
public YesNoDefault ConvectiveZoneHeaterVerticalWallEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FohannoPolidoriVerticalWall");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String ConvectiveZoneHeaterVerticalWallEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with convective heater This is for vertical walls that are directly affected by heater Walls are considered "near" when listed in field set for Fraction of Radiant Energy to Surface")]
[JsonProperty(@"Applies to zone with convective heater This is for vertical walls that are directly affected by heater Walls are considered "near" when listed in field set for Fraction of Radiant Energy to Surface")]
public YesNoDefault ConvectiveZoneHeaterVerticalWallsNearHeaterEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "KhalifaEq5WallNearHeat");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String ConvectiveZoneHeaterVerticalWallsNearHeaterEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with convective heater This is for horizontal surfaces with heat flow directed for stable thermal stratification")]
[JsonProperty(@"Applies to zone with convective heater This is for horizontal surfaces with heat flow directed for stable thermal stratification")]
public YesNoDefault ConvectiveZoneHeaterStableHorizontalEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AlamdariHammondStableHorizontal");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String ConvectiveZoneHeaterStableHorizontalEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with convective heater This is for horizontal surfaces with heat flow directed for unstable thermal stratification")]
[JsonProperty(@"Applies to zone with convective heater This is for horizontal surfaces with heat flow directed for unstable thermal stratification")]
public YesNoDefault ConvectiveZoneHeaterUnstableHorizontalEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "KhalifaEq7Ceiling");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String ConvectiveZoneHeaterUnstableHorizontalEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with convective heater This is for tilted surfaces with heat flow for stable thermal stratification")]
[JsonProperty(@"Applies to zone with convective heater This is for tilted surfaces with heat flow for stable thermal stratification")]
public YesNoDefault ConvectiveZoneHeaterStableTiltedEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaltonStableHorizontalOrTilt");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String ConvectiveZoneHeaterStableTiltedEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with convective heater This is for tilted surfaces with heat flow for unstable thermal stratification")]
[JsonProperty(@"Applies to zone with convective heater This is for tilted surfaces with heat flow for unstable thermal stratification")]
public YesNoDefault ConvectiveZoneHeaterUnstableTiltedEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaltonUnstableHorizontalOrTilt");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String ConvectiveZoneHeaterUnstableTiltedEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with convective heater This is for all window surfaces")]
[JsonProperty(@"Applies to zone with convective heater This is for all window surfaces")]
public YesNoDefault ConvectiveZoneHeaterWindowsEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ISO15099Windows");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String ConvectiveZoneHeaterWindowsEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with mechanical forced central air with diffusers This is for all wall surfaces")]
[JsonProperty(@"Applies to zone with mechanical forced central air with diffusers This is for all wall surfaces")]
public YesNoDefault CentralAirDiffuserWallEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "GoldsteinNovoselacCeilingDiffuserWalls");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String CentralAirDiffuserWallEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with mechanical forced central air with diffusers This is for all ceiling surfaces")]
[JsonProperty(@"Applies to zone with mechanical forced central air with diffusers This is for all ceiling surfaces")]
public YesNoDefault CentralAirDiffuserCeilingEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FisherPedersenCeilingDiffuserCeiling");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String CentralAirDiffuserCeilingEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with mechanical forced central air with diffusers This is for all floor surfaces")]
[JsonProperty(@"Applies to zone with mechanical forced central air with diffusers This is for all floor surfaces")]
public YesNoDefault CentralAirDiffuserFloorEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "GoldsteinNovoselacCeilingDiffuserFloor");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String CentralAirDiffuserFloorEquationUserCurveName { get; set; } = "";
        
[Description(@"Applies to zone with mechanical forced central air with diffusers This is for all window surfaces")]
[JsonProperty(@"Applies to zone with mechanical forced central air with diffusers This is for all window surfaces")]
public YesNoDefault CentralAirDiffuserWindowEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "GoldsteinNovoselacCeilingDiffuserWindow");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String CentralAirDiffuserWindowEquationUserCurveName { get; set; } = "";
        
[Description(@"reference choice fields")]
[JsonProperty(@"reference choice fields")]
public YesNoDefault MechanicalZoneFanCirculationVerticalWallEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "KhalifaEq3WallAwayFromHeat");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String MechanicalZoneFanCirculationVerticalWallEquationUserCurveName { get; set; } = "";
        
[Description(@"reference choice fields")]
[JsonProperty(@"reference choice fields")]
public YesNoDefault MechanicalZoneFanCirculationStableHorizontalEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AlamdariHammondStableHorizontal");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String MechanicalZoneFanCirculationStableHorizontalEquationUserCurveName { get; set; } = "";
        
[Description(@"reference choice fields")]
[JsonProperty(@"reference choice fields")]
public YesNoDefault MechanicalZoneFanCirculationUnstableHorizontalEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "KhalifaEq4CeilingAwayFromHeat");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String MechanicalZoneFanCirculationUnstableHorizontalEquationUserCurveName { get; set; } = "";
        
[Description(@"reference choice fields")]
[JsonProperty(@"reference choice fields")]
public YesNoDefault MechanicalZoneFanCirculationStableTiltedEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaltonStableHorizontalOrTilt");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String MechanicalZoneFanCirculationStableTiltedEquationUserCurveName { get; set; } = "";
        
[Description(@"reference choice fields")]
[JsonProperty(@"reference choice fields")]
public YesNoDefault MechanicalZoneFanCirculationUnstableTiltedEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaltonUnstableHorizontalOrTilt");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String MechanicalZoneFanCirculationUnstableTiltedEquationUserCurveName { get; set; } = "";
        
[Description(@"reference choice fields")]
[JsonProperty(@"reference choice fields")]
public YesNoDefault MechanicalZoneFanCirculationWindowEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ISO15099Windows");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String MechanicalZoneFanCirculationWindowEquationUserCurveName { get; set; } = "";
        
[Description(@"reference choice fields")]
[JsonProperty(@"reference choice fields")]
public YesNoDefault MixedRegimeBuoyancyAssistingFlowOnWallsEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BeausoleilMorrisonMixedAssistedWall");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String MixedRegimeBuoyancyAssistingFlowOnWallsEquationUserCurveName { get; set; } = "";
        
[Description(@"reference choice fields")]
[JsonProperty(@"reference choice fields")]
public YesNoDefault MixedRegimeBuoyancyOpposingFlowOnWallsEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BeausoleilMorrisonMixedOpposingWall");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String MixedRegimeBuoyancyOpposingFlowOnWallsEquationUserCurveName { get; set; } = "";
        
[Description(@"reference choice fields")]
[JsonProperty(@"reference choice fields")]
public YesNoDefault MixedRegimeStableFloorEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BeausoleilMorrisonMixedStableFloor");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String MixedRegimeStableFloorEquationUserCurveName { get; set; } = "";
        
[Description(@"reference choice fields")]
[JsonProperty(@"reference choice fields")]
public YesNoDefault MixedRegimeUnstableFloorEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BeausoleilMorrisonMixedUnstableFloor");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String MixedRegimeUnstableFloorEquationUserCurveName { get; set; } = "";
        
[Description(@"reference choice fields")]
[JsonProperty(@"reference choice fields")]
public YesNoDefault MixedRegimeStableCeilingEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BeausoleilMorrisonMixedStableCeiling");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String MixedRegimeStableCeilingEquationUserCurveName { get; set; } = "";
        
[Description(@"reference choice fields")]
[JsonProperty(@"reference choice fields")]
public YesNoDefault MixedRegimeUnstableCeilingEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BeausoleilMorrisonMixedUnstableCeiling");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String MixedRegimeUnstableCeilingEquationUserCurveName { get; set; } = "";
        
[Description(@"reference choice fields")]
[JsonProperty(@"reference choice fields")]
public YesNoDefault MixedRegimeWindowEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "GoldsteinNovoselacCeilingDiffuserWindow");
        
[Description(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Inside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String MixedRegimeWindowEquationUserCurveName { get; set; } = "";
    }
    
    public enum SimpleBuoyancyVerticalWallEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 3,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 4,
        
        [JsonProperty("KhalifaEq3WallAwayFromHeat")]
        KhalifaEqWallAwayFromHeat = 5,
        
        [JsonProperty("KhalifaEq6NonHeatedWalls")]
        KhalifaEqNonHeatedWalls = 6,
        
        [JsonProperty("UserCurve")]
        UserCurve = 7,
    }
    
    public enum SimpleBuoyancyStableHorizontalEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 3,
    }
    
    public enum SimpleBuoyancyUnstableHorizontalEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 3,
    }
    
    public enum SimpleBuoyancyStableTiltedEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 3,
    }
    
    public enum SimpleBuoyancyUnstableTiltedEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 3,
    }
    
    public enum SimpleBuoyancyWindowsEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 3,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 4,
        
        [JsonProperty("KaradagChilledCeiling")]
        KaradagChilledCeiling = 5,
        
        [JsonProperty("UserCurve")]
        UserCurve = 6,
    }
    
    public enum FloorHeatCeilingCoolVerticalWallEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 3,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 4,
        
        [JsonProperty("KhalifaEq3WallAwayFromHeat")]
        KhalifaEqWallAwayFromHeat = 5,
        
        [JsonProperty("UserCurve")]
        UserCurve = 6,
    }
    
    public enum FloorHeatCeilingCoolStableHorizontalEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 3,
    }
    
    public enum FloorHeatCeilingCoolUnstableHorizontalEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("KhalifaEq4CeilingAwayFromHeat")]
        KhalifaEqCeilingAwayFromHeat = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 4,
    }
    
    public enum FloorHeatCeilingCoolHeatedFloorEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("AwbiHattonHeatedFloor")]
        AwbiHattonHeatedFloor = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 4,
    }
    
    public enum FloorHeatCeilingCoolChilledCeilingEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("KaradagChilledCeiling")]
        KaradagChilledCeiling = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 4,
    }
    
    public enum FloorHeatCeilingCoolStableTiltedEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 4,
    }
    
    public enum FloorHeatCeilingCoolUnstableTiltedEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 4,
    }
    
    public enum FloorHeatCeilingCoolWindowEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 3,
        
        [JsonProperty("UserCurve")]
        UserCurve = 4,
    }
    
    public enum WallPanelHeatingVerticalWallEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 3,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 4,
        
        [JsonProperty("KhalifaEq6NonHeatedWalls")]
        KhalifaEqNonHeatedWalls = 5,
        
        [JsonProperty("UserCurve")]
        UserCurve = 6,
    }
    
    public enum WallPanelHeatingHeatedWallEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("AwbiHattonHeatedWall")]
        AwbiHattonHeatedWall = 3,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 4,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 5,
        
        [JsonProperty("KhalifaEq5WallNearHeat")]
        KhalifaEqWallNearHeat = 6,
        
        [JsonProperty("UserCurve")]
        UserCurve = 7,
    }
    
    public enum WallPanelHeatingStableHorizontalEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 3,
    }
    
    public enum WallPanelHeatingUnstableHorizontalEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 2,
        
        [JsonProperty("KaradagChilledCeiling")]
        KaradagChilledCeiling = 3,
        
        [JsonProperty("KhalifaEq7Ceiling")]
        KhalifaEqCeiling = 4,
        
        [JsonProperty("UserCurve")]
        UserCurve = 5,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 6,
    }
    
    public enum WallPanelHeatingStableTiltedEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 4,
    }
    
    public enum WallPanelHeatingUnstableTiltedEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 4,
    }
    
    public enum WallPanelHeatingWindowEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 3,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 4,
        
        [JsonProperty("UserCurve")]
        UserCurve = 5,
    }
    
    public enum ConvectiveZoneHeaterVerticalWallEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 3,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 4,
        
        [JsonProperty("KhalifaEq3WallAwayFromHeat")]
        KhalifaEqWallAwayFromHeat = 5,
        
        [JsonProperty("KhalifaEq6NonHeatedWalls")]
        KhalifaEqNonHeatedWalls = 6,
        
        [JsonProperty("UserCurve")]
        UserCurve = 7,
    }
    
    public enum ConvectiveZoneHeaterVerticalWallsNearHeaterEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("AwbiHattonHeatedWall")]
        AwbiHattonHeatedWall = 3,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 4,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 5,
        
        [JsonProperty("KhalifaEq5WallNearHeat")]
        KhalifaEqWallNearHeat = 6,
        
        [JsonProperty("UserCurve")]
        UserCurve = 7,
    }
    
    public enum ConvectiveZoneHeaterStableHorizontalEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 3,
    }
    
    public enum ConvectiveZoneHeaterUnstableHorizontalEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("KhalifaEq4CeilingAwayFromHeat")]
        KhalifaEqCeilingAwayFromHeat = 2,
        
        [JsonProperty("KhalifaEq7Ceiling")]
        KhalifaEqCeiling = 3,
        
        [JsonProperty("UserCurve")]
        UserCurve = 4,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 5,
    }
    
    public enum ConvectiveZoneHeaterStableTiltedEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 3,
    }
    
    public enum ConvectiveZoneHeaterUnstableTiltedEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 3,
    }
    
    public enum ConvectiveZoneHeaterWindowsEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 3,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 4,
        
        [JsonProperty("KhalifaEq3WallAwayFromHeat")]
        KhalifaEqWallAwayFromHeat = 5,
        
        [JsonProperty("UserCurve")]
        UserCurve = 6,
    }
    
    public enum CentralAirDiffuserWallEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("BeausoleilMorrisonMixedAssistedWall")]
        BeausoleilMorrisonMixedAssistedWall = 3,
        
        [JsonProperty("BeausoleilMorrisonMixedOpposingWall")]
        BeausoleilMorrisonMixedOpposingWall = 4,
        
        [JsonProperty("FisherPedersenCeilingDiffuserWalls")]
        FisherPedersenCeilingDiffuserWalls = 5,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 6,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWalls")]
        GoldsteinNovoselacCeilingDiffuserWalls = 7,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 8,
        
        [JsonProperty("UserCurve")]
        UserCurve = 9,
    }
    
    public enum CentralAirDiffuserCeilingEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BeausoleilMorrisonMixedStableCeiling")]
        BeausoleilMorrisonMixedStableCeiling = 1,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableCeiling")]
        BeausoleilMorrisonMixedUnstableCeiling = 2,
        
        [JsonProperty("FisherPedersenCeilingDiffuserCeiling")]
        FisherPedersenCeilingDiffuserCeiling = 3,
        
        [JsonProperty("UserCurve")]
        UserCurve = 4,
    }
    
    public enum CentralAirDiffuserFloorEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BeausoleilMorrisonMixedStableFloor")]
        BeausoleilMorrisonMixedStableFloor = 1,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableFloor")]
        BeausoleilMorrisonMixedUnstableFloor = 2,
        
        [JsonProperty("FisherPedersenCeilingDiffuserFloor")]
        FisherPedersenCeilingDiffuserFloor = 3,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserFloor")]
        GoldsteinNovoselacCeilingDiffuserFloor = 4,
        
        [JsonProperty("UserCurve")]
        UserCurve = 5,
    }
    
    public enum CentralAirDiffuserWindowEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("BeausoleilMorrisonMixedAssistedWall")]
        BeausoleilMorrisonMixedAssistedWall = 3,
        
        [JsonProperty("BeausoleilMorrisonMixedOpposingWall")]
        BeausoleilMorrisonMixedOpposingWall = 4,
        
        [JsonProperty("FisherPedersenCeilingDiffuserWalls")]
        FisherPedersenCeilingDiffuserWalls = 5,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 6,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWindow")]
        GoldsteinNovoselacCeilingDiffuserWindow = 7,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 8,
        
        [JsonProperty("UserCurve")]
        UserCurve = 9,
    }
    
    public enum MechanicalZoneFanCirculationVerticalWallEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("BeausoleilMorrisonMixedAssistedWall")]
        BeausoleilMorrisonMixedAssistedWall = 3,
        
        [JsonProperty("BeausoleilMorrisonMixedOpposingWall")]
        BeausoleilMorrisonMixedOpposingWall = 4,
        
        [JsonProperty("FisherPedersenCeilingDiffuserWalls")]
        FisherPedersenCeilingDiffuserWalls = 5,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 6,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWalls")]
        GoldsteinNovoselacCeilingDiffuserWalls = 7,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 8,
        
        [JsonProperty("KhalifaEq3WallAwayFromHeat")]
        KhalifaEqWallAwayFromHeat = 9,
        
        [JsonProperty("UserCurve")]
        UserCurve = 10,
    }
    
    public enum MechanicalZoneFanCirculationStableHorizontalEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 3,
    }
    
    public enum MechanicalZoneFanCirculationUnstableHorizontalEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("KhalifaEq4CeilingAwayFromHeat")]
        KhalifaEqCeilingAwayFromHeat = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 4,
    }
    
    public enum MechanicalZoneFanCirculationStableTiltedEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("UserCurve")]
        UserCurve = 1,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 2,
    }
    
    public enum MechanicalZoneFanCirculationUnstableTiltedEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("UserCurve")]
        UserCurve = 2,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 3,
    }
    
    public enum MechanicalZoneFanCirculationWindowEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 3,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWindow")]
        GoldsteinNovoselacCeilingDiffuserWindow = 4,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 5,
        
        [JsonProperty("UserCurve")]
        UserCurve = 6,
    }
    
    public enum MixedRegimeBuoyancyAssistingFlowOnWallsEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("BeausoleilMorrisonMixedAssistedWall")]
        BeausoleilMorrisonMixedAssistedWall = 3,
        
        [JsonProperty("FisherPedersenCeilingDiffuserWalls")]
        FisherPedersenCeilingDiffuserWalls = 4,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 5,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWalls")]
        GoldsteinNovoselacCeilingDiffuserWalls = 6,
        
        [JsonProperty("UserCurve")]
        UserCurve = 7,
    }
    
    public enum MixedRegimeBuoyancyOpposingFlowOnWallsEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("BeausoleilMorrisonMixedOpposingWall")]
        BeausoleilMorrisonMixedOpposingWall = 3,
        
        [JsonProperty("FisherPedersenCeilingDiffuserWalls")]
        FisherPedersenCeilingDiffuserWalls = 4,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 5,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWalls")]
        GoldsteinNovoselacCeilingDiffuserWalls = 6,
        
        [JsonProperty("UserCurve")]
        UserCurve = 7,
    }
    
    public enum MixedRegimeStableFloorEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("BeausoleilMorrisonMixedStableFloor")]
        BeausoleilMorrisonMixedStableFloor = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 4,
    }
    
    public enum MixedRegimeUnstableFloorEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableFloor")]
        BeausoleilMorrisonMixedUnstableFloor = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 4,
    }
    
    public enum MixedRegimeStableCeilingEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("BeausoleilMorrisonMixedStableCeiling")]
        BeausoleilMorrisonMixedStableCeiling = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 4,
    }
    
    public enum MixedRegimeUnstableCeilingEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableCeiling")]
        BeausoleilMorrisonMixedUnstableCeiling = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 4,
    }
    
    public enum MixedRegimeWindowEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWindow")]
        GoldsteinNovoselacCeilingDiffuserWindow = 1,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
    }
    
    [Description(@"Options to change the individual convection model equations for dynamic selection when using AdaptiveConvectiongAlgorithm This object is only needed to make changes to the default model selections for any or all of the surface categories. This object is for the outside face, the side of the surface facing away from the thermal zone.")]
    [JsonObject("SurfaceConvectionAlgorithm:Outside:AdaptiveModelSelections")]
    public class SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections
    {
        
[JsonProperty(@"")]
public YesNoDefault WindConvectionWindwardVerticalWallEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "TARPWindward");
        
[Description(@"The SurfaceConvectionAlgorithm:Outside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Outside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String WindConvectionWindwardEquationVerticalWallUserCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault WindConvectionLeewardVerticalWallEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "TARPLeeward");
        
[Description(@"The SurfaceConvectionAlgorithm:Outside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Outside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String WindConvectionLeewardVerticalWallEquationUserCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault WindConvectionHorizontalRoofEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ClearRoof");
        
[Description(@"The SurfaceConvectionAlgorithm:Outside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Outside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String WindConvectionHorizontalRoofUserCurveName { get; set; } = "";
        
[Description(@"This is for vertical walls")]
[JsonProperty(@"This is for vertical walls")]
public YesNoDefault NaturalConvectionVerticalWallEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ASHRAEVerticalWall");
        
[Description(@"The SurfaceConvectionAlgorithm:Outside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Outside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String NaturalConvectionVerticalWallEquationUserCurveName { get; set; } = "";
        
[Description(@"This is for horizontal surfaces with heat flow directed for stable thermal stratification")]
[JsonProperty(@"This is for horizontal surfaces with heat flow directed for stable thermal stratification")]
public YesNoDefault NaturalConvectionStableHorizontalEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaltonStableHorizontalOrTilt");
        
[Description(@"The SurfaceConvectionAlgorithm:Outside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Outside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String NaturalConvectionStableHorizontalEquationUserCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault NaturalConvectionUnstableHorizontalEquationSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaltonUnstableHorizontalOrTilt");
        
[Description(@"The SurfaceConvectionAlgorithm:Outside:UserCurve named in this field is used when the previous field is set to UserCurve")]
[JsonProperty(@"The SurfaceConvectionAlgorithm:Outside:UserCurve named in this field is used when the previous field is set to UserCurve")]
public System.String NaturalConvectionUnstableHorizontalEquationUserCurveName { get; set; } = "";
    }
    
    public enum WindConvectionWindwardVerticalWallEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlockenWindward")]
        BlockenWindward = 1,
        
        [JsonProperty("DOE2Windward")]
        DOEWindward = 2,
        
        [JsonProperty("EmmelVertical")]
        EmmelVertical = 3,
        
        [JsonProperty("McAdams")]
        McAdams = 4,
        
        [JsonProperty("Mitchell")]
        Mitchell = 5,
        
        [JsonProperty("MoWiTTWindward")]
        MoWiTTWindward = 6,
        
        [JsonProperty("NusseltJurges")]
        NusseltJurges = 7,
        
        [JsonProperty("SimpleCombined")]
        SimpleCombined = 8,
        
        [JsonProperty("TARPWindward")]
        TARPWindward = 9,
        
        [JsonProperty("UserCurve")]
        UserCurve = 10,
    }
    
    public enum WindConvectionLeewardVerticalWallEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DOE2Leeward")]
        DOELeeward = 1,
        
        [JsonProperty("EmmelVertical")]
        EmmelVertical = 2,
        
        [JsonProperty("McAdams")]
        McAdams = 3,
        
        [JsonProperty("Mitchell")]
        Mitchell = 4,
        
        [JsonProperty("MoWiTTLeeward")]
        MoWiTTLeeward = 5,
        
        [JsonProperty("NusseltJurges")]
        NusseltJurges = 6,
        
        [JsonProperty("SimpleCombined")]
        SimpleCombined = 7,
        
        [JsonProperty("TARPLeeward")]
        TARPLeeward = 8,
        
        [JsonProperty("UserCurve")]
        UserCurve = 9,
    }
    
    public enum WindConvectionHorizontalRoofEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlockenWindward")]
        BlockenWindward = 1,
        
        [JsonProperty("ClearRoof")]
        ClearRoof = 2,
        
        [JsonProperty("DOE2Windward")]
        DOEWindward = 3,
        
        [JsonProperty("EmmelRoof")]
        EmmelRoof = 4,
        
        [JsonProperty("McAdams")]
        McAdams = 5,
        
        [JsonProperty("Mitchell")]
        Mitchell = 6,
        
        [JsonProperty("MoWiTTWindward")]
        MoWiTTWindward = 7,
        
        [JsonProperty("NusseltJurges")]
        NusseltJurges = 8,
        
        [JsonProperty("SimpleCombined")]
        SimpleCombined = 9,
        
        [JsonProperty("TARPWindward")]
        TARPWindward = 10,
        
        [JsonProperty("UserCurve")]
        UserCurve = 11,
    }
    
    public enum NaturalConvectionVerticalWallEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 1,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 2,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 3,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 4,
        
        [JsonProperty("None")]
        None = 5,
        
        [JsonProperty("UserCurve")]
        UserCurve = 6,
    }
    
    public enum NaturalConvectionStableHorizontalEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 4,
    }
    
    public enum NaturalConvectionUnstableHorizontalEquationSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("UserCurve")]
        UserCurve = 3,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 4,
    }
    
    [Description("Used to describe a custom model equation for surface convection heat transfer coe" +
        "fficient If more than one curve is referenced they are all used and added togeth" +
        "er.")]
    [JsonObject("SurfaceConvectionAlgorithm:Inside:UserCurve")]
    public class SurfaceConvectionAlgorithm_Inside_UserCurve
    {
        
[Description(@"Controls which temperature is differenced from surface temperature when using the Hc value")]
[JsonProperty(@"Controls which temperature is differenced from surface temperature when using the Hc value")]
public YesNoDefault ReferenceTemperatureForConvectionHeatTransfer { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Curve's "x" is absolute value of delta-T (Surface temperature minus reference temperature, (C))")]
[JsonProperty(@"Curve's "x" is absolute value of delta-T (Surface temperature minus reference temperature, (C))")]
public System.String HcFunctionOfTemperatureDifferenceCurveName { get; set; } = "";
        
[Description(@"Curve's "x" is absolute value of delta-T/Height (Surface temp minus Air temp)/(vertical length scale), (C/m) when used for an inside face the vertical length scale is the zone's interior height")]
[JsonProperty(@"Curve's "x" is absolute value of delta-T/Height (Surface temp minus Air temp)/(vertical length scale), (C/m) when used for an inside face the vertical length scale is the zone's interior height")]
public System.String HcFunctionOfTemperatureDifferenceDividedByHeightCurveName { get; set; } = "";
        
[Description(@"Curve's "x" is mechanical ACH (Air Changes per hour from mechanical air system), (1/hr)")]
[JsonProperty(@"Curve's "x" is mechanical ACH (Air Changes per hour from mechanical air system), (1/hr)")]
public System.String HcFunctionOfAirChangeRateCurveName { get; set; } = "";
        
[Description(@"Curve's "x" is mechanical system air flow rate (m3/s) divided by zone's length along exterior walls (m).")]
[JsonProperty(@"Curve's "x" is mechanical system air flow rate (m3/s) divided by zone's length along exterior walls (m).")]
public System.String HcFunctionOfAirSystemVolumeFlowRateDividedByZonePerimeterLengthCurveName { get; set; } = "";
    }
    
    public enum ReferenceTemperatureForConvectionHeatTransferType
    {
        
        [JsonProperty("AdjacentAirTemperature")]
        AdjacentAirTemperature = 0,
        
        [JsonProperty("MeanAirTemperature")]
        MeanAirTemperature = 1,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 2,
    }
    
    [Description("Used to describe a custom model equation for surface convection heat transfer coe" +
        "fficient If more than one curve is referenced they are all used and added togeth" +
        "er.")]
    [JsonObject("SurfaceConvectionAlgorithm:Outside:UserCurve")]
    public class SurfaceConvectionAlgorithm_Outside_UserCurve
    {
        
[JsonProperty(@"")]
public YesNoDefault WindSpeedTypeForCurve { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "HeightAdjust");
        
[Description(@"Curve's "x" is wind speed of the type determined in the previous field (m/s)")]
[JsonProperty(@"Curve's "x" is wind speed of the type determined in the previous field (m/s)")]
public System.String HfFunctionOfWindSpeedCurveName { get; set; } = "";
        
[Description(@"Curve's "x" is absolute value of delta-T (Surface temperature minus air temperature, (C))")]
[JsonProperty(@"Curve's "x" is absolute value of delta-T (Surface temperature minus air temperature, (C))")]
public System.String HnFunctionOfTemperatureDifferenceCurveName { get; set; } = "";
        
[Description(@"Curve's "x" is absolute value of delta-T/Height (Surface temp minus Air temp)/(vertical length scale), (C/m) when used for an outside face the vertical length scale is the exterior facade's overall height")]
[JsonProperty(@"Curve's "x" is absolute value of delta-T/Height (Surface temp minus Air temp)/(vertical length scale), (C/m) when used for an outside face the vertical length scale is the exterior facade's overall height")]
public System.String HnFunctionOfTemperatureDifferenceDividedByHeightCurveName { get; set; } = "";
    }
    
    public enum WindSpeedTypeForCurveType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("HeightAdjust")]
        HeightAdjust = 1,
        
        [JsonProperty("ParallelComponent")]
        ParallelComponent = 2,
        
        [JsonProperty("ParallelComponentHeightAdjust")]
        ParallelComponentHeightAdjust = 3,
        
        [JsonProperty("WeatherFile")]
        WeatherFile = 4,
    }
    
    [Description(@"Allow user settable interior and/or exterior convection coefficients. Note that some other factors may limit the lower bounds for these values, such as for windows, the interior convection coefficient must be >.28, for trombe wall algorithm selection (zone), the interior convection coefficient must be >.1 for TARP interior convection, the lower limit is also .1 Minimum and maximum limits are set in HeatBalanceAlgorithm object. Defaults in HeatBalanceAlgorithm object are [.1,1000].")]
    [JsonObject("SurfaceProperty:ConvectionCoefficients")]
    public class SurfaceProperty_ConvectionCoefficients
    {
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ConvectionCoefficientLocation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault ConvectionCoefficientType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"used if Convection Type=Value, min and max limits are set in HeatBalanceAlgorithm object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
[JsonProperty(@"used if Convection Type=Value, min and max limits are set in HeatBalanceAlgorithm object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
public System.Single ConvectionCoefficient { get; set; } = ;
        
[Description(@"used if Convection Type=Schedule,  min and max limits are set in HeatBalanceAlgorithm object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
[JsonProperty(@"used if Convection Type=Schedule,  min and max limits are set in HeatBalanceAlgorithm object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
public System.String ConvectionCoefficientScheduleName { get; set; } = "";
        
[Description(@"used if Convection Type = UserCurve")]
[JsonProperty(@"used if Convection Type = UserCurve")]
public System.String ConvectionCoefficientUserCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ConvectionCoefficientLocation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault ConvectionCoefficientType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"used if Convection Type=Value, min and max limits are set in HeatBalanceAlgorithm object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
[JsonProperty(@"used if Convection Type=Value, min and max limits are set in HeatBalanceAlgorithm object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
public System.Single ConvectionCoefficient { get; set; } = 0.1;
        
[Description(@"used if Convection Type=Schedule,  min and max limits are set in HeatBalanceAlgorithm object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
[JsonProperty(@"used if Convection Type=Schedule,  min and max limits are set in HeatBalanceAlgorithm object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
public System.String ConvectionCoefficientScheduleName { get; set; } = "";
        
[Description(@"used if Convection Type = UserCurve")]
[JsonProperty(@"used if Convection Type = UserCurve")]
public System.String ConvectionCoefficientUserCurveName { get; set; } = "";
    }
    
    public enum ConvectionCoefficientLocationType
    {
        
        [JsonProperty("Inside")]
        Inside = 0,
        
        [JsonProperty("Outside")]
        Outside = 1,
    }
    
    public enum ConvectionCoefficientTypeType
    {
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 0,
        
        [JsonProperty("ASTMC1340")]
        ASTMC = 1,
        
        [JsonProperty("AdaptiveConvectionAlgorithm")]
        AdaptiveConvectionAlgorithm = 2,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 3,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 4,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 5,
        
        [JsonProperty("AwbiHattonHeatedFloor")]
        AwbiHattonHeatedFloor = 6,
        
        [JsonProperty("AwbiHattonHeatedWall")]
        AwbiHattonHeatedWall = 7,
        
        [JsonProperty("BeausoleilMorrisonMixedAssistedWall")]
        BeausoleilMorrisonMixedAssistedWall = 8,
        
        [JsonProperty("BeausoleilMorrisonMixedOpposingWall")]
        BeausoleilMorrisonMixedOpposingWall = 9,
        
        [JsonProperty("BeausoleilMorrisonMixedStableCeiling")]
        BeausoleilMorrisonMixedStableCeiling = 10,
        
        [JsonProperty("BeausoleilMorrisonMixedStableFloor")]
        BeausoleilMorrisonMixedStableFloor = 11,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableCeiling")]
        BeausoleilMorrisonMixedUnstableCeiling = 12,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableFloor")]
        BeausoleilMorrisonMixedUnstableFloor = 13,
        
        [JsonProperty("ClearRoof")]
        ClearRoof = 14,
        
        [JsonProperty("DOE-2")]
        DOE = 15,
        
        [JsonProperty("EmmelRoof")]
        EmmelRoof = 16,
        
        [JsonProperty("EmmelVertical")]
        EmmelVertical = 17,
        
        [JsonProperty("FisherPedersenCeilingDiffuserCeiling")]
        FisherPedersenCeilingDiffuserCeiling = 18,
        
        [JsonProperty("FisherPedersenCeilingDiffuserFloor")]
        FisherPedersenCeilingDiffuserFloor = 19,
        
        [JsonProperty("FisherPedersenCeilingDiffuserWalls")]
        FisherPedersenCeilingDiffuserWalls = 20,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 21,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserFloor")]
        GoldsteinNovoselacCeilingDiffuserFloor = 22,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWalls")]
        GoldsteinNovoselacCeilingDiffuserWalls = 23,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWindow")]
        GoldsteinNovoselacCeilingDiffuserWindow = 24,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 25,
        
        [JsonProperty("KaradagChilledCeiling")]
        KaradagChilledCeiling = 26,
        
        [JsonProperty("KhalifaEq3WallAwayFromHeat")]
        KhalifaEqWallAwayFromHeat = 27,
        
        [JsonProperty("KhalifaEq4CeilingAwayFromHeat")]
        KhalifaEqCeilingAwayFromHeat = 28,
        
        [JsonProperty("KhalifaEq5WallNearHeat")]
        KhalifaEqWallNearHeat = 29,
        
        [JsonProperty("KhalifaEq6NonHeatedWalls")]
        KhalifaEqNonHeatedWalls = 30,
        
        [JsonProperty("KhalifaEq7Ceiling")]
        KhalifaEqCeiling = 31,
        
        [JsonProperty("McAdams")]
        McAdams = 32,
        
        [JsonProperty("Mitchell")]
        Mitchell = 33,
        
        [JsonProperty("MoWitt")]
        MoWitt = 34,
        
        [JsonProperty("NusseltJurges")]
        NusseltJurges = 35,
        
        [JsonProperty("Schedule")]
        Schedule = 36,
        
        [JsonProperty("Simple")]
        Simple = 37,
        
        [JsonProperty("SimpleCombined")]
        SimpleCombined = 38,
        
        [JsonProperty("TARP")]
        TARP = 39,
        
        [JsonProperty("UserCurve")]
        UserCurve = 40,
        
        [JsonProperty("Value")]
        Value = 41,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 42,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 43,
    }
    
    public enum ConvectionCoefficientLocationType
    {
        
        [JsonProperty("Inside")]
        Inside = 0,
        
        [JsonProperty("Outside")]
        Outside = 1,
    }
    
    public enum ConvectionCoefficientTypeType
    {
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 0,
        
        [JsonProperty("ASTMC1340")]
        ASTMC = 1,
        
        [JsonProperty("AdaptiveConvectionAlgorithm")]
        AdaptiveConvectionAlgorithm = 2,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 3,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 4,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 5,
        
        [JsonProperty("AwbiHattonHeatedFloor")]
        AwbiHattonHeatedFloor = 6,
        
        [JsonProperty("AwbiHattonHeatedWall")]
        AwbiHattonHeatedWall = 7,
        
        [JsonProperty("BeausoleilMorrisonMixedAssistedWall")]
        BeausoleilMorrisonMixedAssistedWall = 8,
        
        [JsonProperty("BeausoleilMorrisonMixedOpposingWall")]
        BeausoleilMorrisonMixedOpposingWall = 9,
        
        [JsonProperty("BeausoleilMorrisonMixedStableCeiling")]
        BeausoleilMorrisonMixedStableCeiling = 10,
        
        [JsonProperty("BeausoleilMorrisonMixedStableFloor")]
        BeausoleilMorrisonMixedStableFloor = 11,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableCeiling")]
        BeausoleilMorrisonMixedUnstableCeiling = 12,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableFloor")]
        BeausoleilMorrisonMixedUnstableFloor = 13,
        
        [JsonProperty("ClearRoof")]
        ClearRoof = 14,
        
        [JsonProperty("DOE-2")]
        DOE = 15,
        
        [JsonProperty("EmmelRoof")]
        EmmelRoof = 16,
        
        [JsonProperty("EmmelVertical")]
        EmmelVertical = 17,
        
        [JsonProperty("FisherPedersenCeilingDiffuserCeiling")]
        FisherPedersenCeilingDiffuserCeiling = 18,
        
        [JsonProperty("FisherPedersenCeilingDiffuserFloor")]
        FisherPedersenCeilingDiffuserFloor = 19,
        
        [JsonProperty("FisherPedersenCeilingDiffuserWalls")]
        FisherPedersenCeilingDiffuserWalls = 20,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 21,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserFloor")]
        GoldsteinNovoselacCeilingDiffuserFloor = 22,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWalls")]
        GoldsteinNovoselacCeilingDiffuserWalls = 23,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWindow")]
        GoldsteinNovoselacCeilingDiffuserWindow = 24,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 25,
        
        [JsonProperty("KaradagChilledCeiling")]
        KaradagChilledCeiling = 26,
        
        [JsonProperty("KhalifaEq3WallAwayFromHeat")]
        KhalifaEqWallAwayFromHeat = 27,
        
        [JsonProperty("KhalifaEq4CeilingAwayFromHeat")]
        KhalifaEqCeilingAwayFromHeat = 28,
        
        [JsonProperty("KhalifaEq5WallNearHeat")]
        KhalifaEqWallNearHeat = 29,
        
        [JsonProperty("KhalifaEq6NonHeatedWalls")]
        KhalifaEqNonHeatedWalls = 30,
        
        [JsonProperty("KhalifaEq7Ceiling")]
        KhalifaEqCeiling = 31,
        
        [JsonProperty("McAdams")]
        McAdams = 32,
        
        [JsonProperty("Mitchell")]
        Mitchell = 33,
        
        [JsonProperty("MoWitt")]
        MoWitt = 34,
        
        [JsonProperty("NusseltJurges")]
        NusseltJurges = 35,
        
        [JsonProperty("Schedule")]
        Schedule = 36,
        
        [JsonProperty("Simple")]
        Simple = 37,
        
        [JsonProperty("SimpleCombined")]
        SimpleCombined = 38,
        
        [JsonProperty("TARP")]
        TARP = 39,
        
        [JsonProperty("UserCurve")]
        UserCurve = 40,
        
        [JsonProperty("Value")]
        Value = 41,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 42,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 43,
    }
    
    [Description(@"Allow user settable interior and/or exterior convection coefficients. Note that some other factors may limit the lower bounds for these values, such as for windows, the interior convection coefficient must be >.28, for trombe wall algorithm selection (zone), the interior convection coefficient must be >.1 for TARP interior convection, the lower limit is also .1 Minimum and maximum limits are set in HeatBalanceAlgorithm object. Defaults in HeatBalanceAlgorithm object are [.1,1000].")]
    [JsonObject("SurfaceProperty:ConvectionCoefficients:MultipleSurface")]
    public class SurfaceProperty_ConvectionCoefficients_MultipleSurface
    {
        
[JsonProperty(@"")]
public YesNoDefault SurfaceType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault ConvectionCoefficientLocation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault ConvectionCoefficientType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"used if Convection Type=Value, min and max limits are set in HeatBalanceAlgorithm object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
[JsonProperty(@"used if Convection Type=Value, min and max limits are set in HeatBalanceAlgorithm object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
public System.Single ConvectionCoefficient { get; set; } = ;
        
[Description(@"used if Convection Type=Schedule,  min and max limits are set in HeatBalanceAlgorithm object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
[JsonProperty(@"used if Convection Type=Schedule,  min and max limits are set in HeatBalanceAlgorithm object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
public System.String ConvectionCoefficientScheduleName { get; set; } = "";
        
[Description(@"used if Convection Type = UserCurve")]
[JsonProperty(@"used if Convection Type = UserCurve")]
public System.String ConvectionCoefficientUserCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ConvectionCoefficientLocation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault ConvectionCoefficientType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"used if Convection Type=Value, min and max limits are set in HeatBalanceAlgorithm object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
[JsonProperty(@"used if Convection Type=Value, min and max limits are set in HeatBalanceAlgorithm object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
public System.Single ConvectionCoefficient { get; set; } = 0.1;
        
[Description(@"used if Convection Type=Schedule,  min and max limits are set in HeatBalanceAlgorithm object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
[JsonProperty(@"used if Convection Type=Schedule,  min and max limits are set in HeatBalanceAlgorithm object. Default limits are Minimum >= 0.1 and Maximum <= 1000")]
public System.String ConvectionCoefficientScheduleName { get; set; } = "";
        
[Description(@"used if Convection Type = UserCurve")]
[JsonProperty(@"used if Convection Type = UserCurve")]
public System.String ConvectionCoefficientUserCurveName { get; set; } = "";
    }
    
    public enum SurfaceTypeType
    {
        
        [JsonProperty("AllExteriorFloors")]
        AllExteriorFloors = 0,
        
        [JsonProperty("AllExteriorRoofs")]
        AllExteriorRoofs = 1,
        
        [JsonProperty("AllExteriorSurfaces")]
        AllExteriorSurfaces = 2,
        
        [JsonProperty("AllExteriorWalls")]
        AllExteriorWalls = 3,
        
        [JsonProperty("AllExteriorWindows")]
        AllExteriorWindows = 4,
        
        [JsonProperty("AllInteriorCeilings")]
        AllInteriorCeilings = 5,
        
        [JsonProperty("AllInteriorFloors")]
        AllInteriorFloors = 6,
        
        [JsonProperty("AllInteriorSurfaces")]
        AllInteriorSurfaces = 7,
        
        [JsonProperty("AllInteriorWalls")]
        AllInteriorWalls = 8,
        
        [JsonProperty("AllInteriorWindows")]
        AllInteriorWindows = 9,
    }
    
    public enum ConvectionCoefficientLocationType
    {
        
        [JsonProperty("Inside")]
        Inside = 0,
        
        [JsonProperty("Outside")]
        Outside = 1,
    }
    
    public enum ConvectionCoefficientTypeType
    {
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 0,
        
        [JsonProperty("ASTMC1340")]
        ASTMC = 1,
        
        [JsonProperty("AdaptiveConvectionAlgorithm")]
        AdaptiveConvectionAlgorithm = 2,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 3,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 4,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 5,
        
        [JsonProperty("AwbiHattonHeatedFloor")]
        AwbiHattonHeatedFloor = 6,
        
        [JsonProperty("AwbiHattonHeatedWall")]
        AwbiHattonHeatedWall = 7,
        
        [JsonProperty("BeausoleilMorrisonMixedAssistedWall")]
        BeausoleilMorrisonMixedAssistedWall = 8,
        
        [JsonProperty("BeausoleilMorrisonMixedOpposingWall")]
        BeausoleilMorrisonMixedOpposingWall = 9,
        
        [JsonProperty("BeausoleilMorrisonMixedStableCeiling")]
        BeausoleilMorrisonMixedStableCeiling = 10,
        
        [JsonProperty("BeausoleilMorrisonMixedStableFloor")]
        BeausoleilMorrisonMixedStableFloor = 11,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableCeiling")]
        BeausoleilMorrisonMixedUnstableCeiling = 12,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableFloor")]
        BeausoleilMorrisonMixedUnstableFloor = 13,
        
        [JsonProperty("BlockenWindard")]
        BlockenWindard = 14,
        
        [JsonProperty("ClearRoof")]
        ClearRoof = 15,
        
        [JsonProperty("DOE-2")]
        DOE = 16,
        
        [JsonProperty("EmmelRoof")]
        EmmelRoof = 17,
        
        [JsonProperty("EmmelVertical")]
        EmmelVertical = 18,
        
        [JsonProperty("FisherPedersenCeilingDiffuserCeiling")]
        FisherPedersenCeilingDiffuserCeiling = 19,
        
        [JsonProperty("FisherPedersenCeilingDiffuserFloor")]
        FisherPedersenCeilingDiffuserFloor = 20,
        
        [JsonProperty("FisherPedersenCeilingDiffuserWalls")]
        FisherPedersenCeilingDiffuserWalls = 21,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 22,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserFloor")]
        GoldsteinNovoselacCeilingDiffuserFloor = 23,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWalls")]
        GoldsteinNovoselacCeilingDiffuserWalls = 24,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWindow")]
        GoldsteinNovoselacCeilingDiffuserWindow = 25,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 26,
        
        [JsonProperty("KaradagChilledCeiling")]
        KaradagChilledCeiling = 27,
        
        [JsonProperty("KhalifaEq3WallAwayFromHeat")]
        KhalifaEqWallAwayFromHeat = 28,
        
        [JsonProperty("KhalifaEq4CeilingAwayFromHeat")]
        KhalifaEqCeilingAwayFromHeat = 29,
        
        [JsonProperty("KhalifaEq5WallNearHeat")]
        KhalifaEqWallNearHeat = 30,
        
        [JsonProperty("KhalifaEq6NonHeatedWalls")]
        KhalifaEqNonHeatedWalls = 31,
        
        [JsonProperty("KhalifaEq7Ceiling")]
        KhalifaEqCeiling = 32,
        
        [JsonProperty("McAdams")]
        McAdams = 33,
        
        [JsonProperty("Mitchell")]
        Mitchell = 34,
        
        [JsonProperty("MoWitt")]
        MoWitt = 35,
        
        [JsonProperty("NusseltJurges")]
        NusseltJurges = 36,
        
        [JsonProperty("Schedule")]
        Schedule = 37,
        
        [JsonProperty("Simple")]
        Simple = 38,
        
        [JsonProperty("SimpleCombined")]
        SimpleCombined = 39,
        
        [JsonProperty("TARP")]
        TARP = 40,
        
        [JsonProperty("UserCurve")]
        UserCurve = 41,
        
        [JsonProperty("Value")]
        Value = 42,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 43,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 44,
    }
    
    public enum ConvectionCoefficientLocationType
    {
        
        [JsonProperty("Inside")]
        Inside = 0,
        
        [JsonProperty("Outside")]
        Outside = 1,
    }
    
    public enum ConvectionCoefficientTypeType
    {
        
        [JsonProperty("ASHRAEVerticalWall")]
        ASHRAEVerticalWall = 0,
        
        [JsonProperty("ASTMC1340")]
        ASTMC = 1,
        
        [JsonProperty("AdaptiveConvectionAlgorithm")]
        AdaptiveConvectionAlgorithm = 2,
        
        [JsonProperty("AlamdariHammondStableHorizontal")]
        AlamdariHammondStableHorizontal = 3,
        
        [JsonProperty("AlamdariHammondUnstableHorizontal")]
        AlamdariHammondUnstableHorizontal = 4,
        
        [JsonProperty("AlamdariHammondVerticalWall")]
        AlamdariHammondVerticalWall = 5,
        
        [JsonProperty("AwbiHattonHeatedFloor")]
        AwbiHattonHeatedFloor = 6,
        
        [JsonProperty("AwbiHattonHeatedWall")]
        AwbiHattonHeatedWall = 7,
        
        [JsonProperty("BeausoleilMorrisonMixedAssistedWall")]
        BeausoleilMorrisonMixedAssistedWall = 8,
        
        [JsonProperty("BeausoleilMorrisonMixedOpposingWall")]
        BeausoleilMorrisonMixedOpposingWall = 9,
        
        [JsonProperty("BeausoleilMorrisonMixedStableCeiling")]
        BeausoleilMorrisonMixedStableCeiling = 10,
        
        [JsonProperty("BeausoleilMorrisonMixedStableFloor")]
        BeausoleilMorrisonMixedStableFloor = 11,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableCeiling")]
        BeausoleilMorrisonMixedUnstableCeiling = 12,
        
        [JsonProperty("BeausoleilMorrisonMixedUnstableFloor")]
        BeausoleilMorrisonMixedUnstableFloor = 13,
        
        [JsonProperty("BlockenWindard")]
        BlockenWindard = 14,
        
        [JsonProperty("ClearRoof")]
        ClearRoof = 15,
        
        [JsonProperty("DOE-2")]
        DOE = 16,
        
        [JsonProperty("EmmelRoof")]
        EmmelRoof = 17,
        
        [JsonProperty("EmmelVertical")]
        EmmelVertical = 18,
        
        [JsonProperty("FisherPedersenCeilingDiffuserCeiling")]
        FisherPedersenCeilingDiffuserCeiling = 19,
        
        [JsonProperty("FisherPedersenCeilingDiffuserFloor")]
        FisherPedersenCeilingDiffuserFloor = 20,
        
        [JsonProperty("FisherPedersenCeilingDiffuserWalls")]
        FisherPedersenCeilingDiffuserWalls = 21,
        
        [JsonProperty("FohannoPolidoriVerticalWall")]
        FohannoPolidoriVerticalWall = 22,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserFloor")]
        GoldsteinNovoselacCeilingDiffuserFloor = 23,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWalls")]
        GoldsteinNovoselacCeilingDiffuserWalls = 24,
        
        [JsonProperty("GoldsteinNovoselacCeilingDiffuserWindow")]
        GoldsteinNovoselacCeilingDiffuserWindow = 25,
        
        [JsonProperty("ISO15099Windows")]
        ISOWindows = 26,
        
        [JsonProperty("KaradagChilledCeiling")]
        KaradagChilledCeiling = 27,
        
        [JsonProperty("KhalifaEq3WallAwayFromHeat")]
        KhalifaEqWallAwayFromHeat = 28,
        
        [JsonProperty("KhalifaEq4CeilingAwayFromHeat")]
        KhalifaEqCeilingAwayFromHeat = 29,
        
        [JsonProperty("KhalifaEq5WallNearHeat")]
        KhalifaEqWallNearHeat = 30,
        
        [JsonProperty("KhalifaEq6NonHeatedWalls")]
        KhalifaEqNonHeatedWalls = 31,
        
        [JsonProperty("KhalifaEq7Ceiling")]
        KhalifaEqCeiling = 32,
        
        [JsonProperty("McAdams")]
        McAdams = 33,
        
        [JsonProperty("Mitchell")]
        Mitchell = 34,
        
        [JsonProperty("MoWitt")]
        MoWitt = 35,
        
        [JsonProperty("NusseltJurges")]
        NusseltJurges = 36,
        
        [JsonProperty("Schedule")]
        Schedule = 37,
        
        [JsonProperty("Simple")]
        Simple = 38,
        
        [JsonProperty("SimpleCombined")]
        SimpleCombined = 39,
        
        [JsonProperty("TARP")]
        TARP = 40,
        
        [JsonProperty("UserCurve")]
        UserCurve = 41,
        
        [JsonProperty("Value")]
        Value = 42,
        
        [JsonProperty("WaltonStableHorizontalOrTilt")]
        WaltonStableHorizontalOrTilt = 43,
        
        [JsonProperty("WaltonUnstableHorizontalOrTilt")]
        WaltonUnstableHorizontalOrTilt = 44,
    }
    
    [Description(@"The interior and external vapor transfer coefficients. Normally these value are calculated using the heat convection coefficient values. Use this object to used fixed constant values. Units are kg/Pa.s.m2 This will only work with the CombinedHeatAndMoistureFiniteElement algorithm for surfaces. Other algorithms will ignore these coefficients")]
    [JsonObject("SurfaceProperties:VaporCoefficients")]
    public class SurfaceProperties_VaporCoefficients
    {
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ConstantExternalVaporTransferCoefficient { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public System.Single ExternalVaporCoefficientValue { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault ConstantInternalVaporTransferCoefficient { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public System.Single InternalVaporCoefficientValue { get; set; } = 0;
    }
    
    [Description("Used to describe the decoupled layer, or baffle, and the characteristics of the c" +
        "avity and openings for naturally ventilated exterior surfaces. This object is al" +
        "so used in conjunction with the OtherSideConditionsModel.")]
    [JsonObject("SurfaceProperty:ExteriorNaturalVentedCavity")]
    public class SurfaceProperty_ExteriorNaturalVentedCavity
    {
        
[Description(@"Enter the name of a SurfaceProperty:OtherSideConditionsModel object")]
[JsonProperty(@"Enter the name of a SurfaceProperty:OtherSideConditionsModel object")]
public System.String BoundaryConditionsModelName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AreaFractionOfOpenings { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalEmissivityOfExteriorBaffleMaterial { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SolarAbsorbtivityOfExteriorBaffle { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single HeightScaleForBuoyancyDrivenVentilation { get; set; } = ;
        
[Description(@"if corrugated, use average depth")]
[JsonProperty(@"if corrugated, use average depth")]
public System.Single EffectiveThicknessOfCavityBehindExteriorBaffle { get; set; } = ;
        
[Description(@"this parameter is used to help account for corrugations in the collector")]
[JsonProperty(@"this parameter is used to help account for corrugations in the collector")]
public System.Single RatioOfActualSurfaceAreaToProjectedSurfaceArea { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault RoughnessOfExteriorSurface { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single EffectivenessForPerforationsWithRespectToWind { get; set; } = 0.25;
        
[JsonProperty(@"")]
public System.Single DischargeCoefficientForOpeningsWithRespectToBuoyancyDrivenFlow { get; set; } = 0.65;
        
[JsonProperty(@"")]
public System.String Surface { get; set; } = "";
    }
    
    public enum RoughnessOfExteriorSurfaceType
    {
        
        [JsonProperty("MediumRough")]
        MediumRough = 0,
        
        [JsonProperty("MediumSmooth")]
        MediumSmooth = 1,
        
        [JsonProperty("Rough")]
        Rough = 2,
        
        [JsonProperty("Smooth")]
        Smooth = 3,
        
        [JsonProperty("VeryRough")]
        VeryRough = 4,
        
        [JsonProperty("VerySmooth")]
        VerySmooth = 5,
    }
    
    [Description("Used to provide incident solar radiation on the inside of the surface. Reference " +
        "surface-construction pair and if that pair is used in a simulation, then program" +
        " will use value provided in schedule instead of calculating it.")]
    [JsonObject("SurfaceProperty:SolarIncidentInside")]
    public class SurfaceProperty_SolarIncidentInside
    {
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Values in schedule are expected to be in W/m2")]
[JsonProperty(@"Values in schedule are expected to be in W/m2")]
public System.String InsideSurfaceIncidentSunSolarRadiationScheduleName { get; set; } = "";
    }
    
    [Description("This object defines the local environment properties of an exterior surface. One " +
        "or more environment properties have to be defined and linked to the exterior sur" +
        "face.")]
    [JsonObject("SurfaceProperty:LocalEnvironment")]
    public class SurfaceProperty_LocalEnvironment
    {
        
[Description(@"Enter the name of an exterior surface object")]
[JsonProperty(@"Enter the name of an exterior surface object")]
public System.String ExteriorSurfaceName { get; set; } = "";
        
[Description(@"Enter the name of a Schedule object")]
[JsonProperty(@"Enter the name of a Schedule object")]
public System.String ExternalShadingFractionScheduleName { get; set; } = "";
        
[Description(@"Enter the name of a SurfaceProperty:SurroundingSurfaces object")]
[JsonProperty(@"Enter the name of a SurfaceProperty:SurroundingSurfaces object")]
public System.String SurroundingSurfacesObjectName { get; set; } = "";
        
[Description(@"Enter the name of an OutdoorAir:Node object")]
[JsonProperty(@"Enter the name of an OutdoorAir:Node object")]
public System.String OutdoorAirNodeName { get; set; } = "";
    }
    
    [Description("This object defines the local environment properties of a zone object. A correspo" +
        "nding outdoor air node should be defined and linked to the zone object.")]
    [JsonObject("ZoneProperty:LocalEnvironment")]
    public class ZoneProperty_LocalEnvironment
    {
        
[Description(@"Enter the name of a zone object")]
[JsonProperty(@"Enter the name of a zone object")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Enter the name of an OutdoorAir:Node object")]
[JsonProperty(@"Enter the name of an OutdoorAir:Node object")]
public System.String OutdoorAirNodeName { get; set; } = "";
    }
    
    [Description("This object defines a list of surrounding surfaces for an exterior surface.")]
    [JsonObject("SurfaceProperty:SurroundingSurfaces")]
    public class SurfaceProperty_SurroundingSurfaces
    {
        
[Description(@"optional")]
[JsonProperty(@"optional")]
public System.Single SkyViewFactor { get; set; } = 0.5;
        
[Description(@"Schedule values are real numbers, -100.0 to 100.0, units C optional")]
[JsonProperty(@"Schedule values are real numbers, -100.0 to 100.0, units C optional")]
public System.String SkyTemperatureScheduleName { get; set; } = "";
        
[Description(@"optional")]
[JsonProperty(@"optional")]
public System.Single GroundViewFactor { get; set; } = 0.5;
        
[Description(@"Schedule values are real numbers, -100.0 to 100.0, units C optional")]
[JsonProperty(@"Schedule values are real numbers, -100.0 to 100.0, units C optional")]
public System.String GroundTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Surfaces { get; set; } = "";
    }
    
    [Description("Used to provide solar radiation absorbed in fenestration layers. References surfa" +
        "ce-construction pair and if that pair is used in a simulation, then program will" +
        " use value provided in schedules instead of calculating it.")]
    [JsonObject("ComplexFenestrationProperty:SolarAbsorbedLayers")]
    public class ComplexFenestrationProperty_SolarAbsorbedLayers
    {
        
[JsonProperty(@"")]
public System.String FenestrationSurface { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Values in schedule are expected to be in W/m2")]
[JsonProperty(@"Values in schedule are expected to be in W/m2")]
public System.String LayerSolarRadiationAbsorbedScheduleName { get; set; } = "";
        
[Description(@"Values in schedule are expected to be in W/m2")]
[JsonProperty(@"Values in schedule are expected to be in W/m2")]
public System.String LayerSolarRadiationAbsorbedScheduleName { get; set; } = "";
        
[Description(@"Values in schedule are expected to be in W/m2")]
[JsonProperty(@"Values in schedule are expected to be in W/m2")]
public System.String LayerSolarRadiationAbsorbedScheduleName { get; set; } = "";
        
[Description(@"Values in schedule are expected to be in W/m2")]
[JsonProperty(@"Values in schedule are expected to be in W/m2")]
public System.String LayerSolarRadiationAbsorbedScheduleName { get; set; } = "";
        
[Description(@"Values in schedule are expected to be in W/m2")]
[JsonProperty(@"Values in schedule are expected to be in W/m2")]
public System.String LayerSolarRadiationAbsorbedScheduleName { get; set; } = "";
    }
    
    [Description("View factors for Surface to Surface in a zone. (Number of Surfaces)**2 are expect" +
        "ed. Any omitted surface pairs will be assumed to have a view factor of zero.")]
    [JsonObject("ZoneProperty:UserViewFactors:BySurfaceName")]
    public class ZoneProperty_UserViewFactors_BySurfaceName
    {
        
[Description(@"View factors may be entered for a single zone or for a group of zones connected by Construction:AirBoundary")]
[JsonProperty(@"View factors may be entered for a single zone or for a group of zones connected by Construction:AirBoundary")]
public System.String ZoneOrZonelistName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ViewFactors { get; set; } = "";
    }
}
namespace EnergyPlus.AirDistribution
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Defines a central forced air system.")]
    [JsonObject("AirLoopHVAC")]
    public class AirLoopHVAC
    {
        
[Description(@"Enter the name of an AirLoopHVAC:ControllerList object.")]
[JsonProperty(@"Enter the name of an AirLoopHVAC:ControllerList object.")]
public System.String ControllerListName { get; set; } = "";
        
[Description(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
public System.String AvailabilityManagerListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DesignSupplyAirFlowRate { get; set; } = (System.String)0;
        
[Description(@"Name of a BranchList containing all the branches in this air loop")]
[JsonProperty(@"Name of a BranchList containing all the branches in this air loop")]
public System.String BranchListName { get; set; } = "";
        
[Description(@"Name of a ConnectorList containing all the splitters and mixers in the loop")]
[JsonProperty(@"Name of a ConnectorList containing all the splitters and mixers in the loop")]
public System.String ConnectorListName { get; set; } = "";
        
[Description(@"Name of inlet node where air enters the supply side of the air loop. If this air loop has a return path, then this node is where return air enters the supply side. If this air loop has no return path, then this node is where outdoor air or other air enters the supply side.")]
[JsonProperty(@"Name of inlet node where air enters the supply side of the air loop. If this air loop has a return path, then this node is where return air enters the supply side. If this air loop has no return path, then this node is where outdoor air or other air enters the supply side.")]
public System.String SupplySideInletNodeName { get; set; } = "";
        
[Description(@"Name of outlet node where return air leaves the demand side and enters the supply side. Required if this air loop has a return path. Leave this field blank if there is no return.")]
[JsonProperty(@"Name of outlet node where return air leaves the demand side and enters the supply side. Required if this air loop has a return path. Leave this field blank if there is no return.")]
public System.String DemandSideOutletNodeName { get; set; } = "";
        
[Description(@"Name of a Node or NodeList containing the inlet node(s) supplying air to zone equipment.")]
[JsonProperty(@"Name of a Node or NodeList containing the inlet node(s) supplying air to zone equipment.")]
public System.String DemandSideInletNodeNames { get; set; } = "";
        
[Description(@"Name of a Node or NodeList containing the outlet node(s) supplying air to the demand side.")]
[JsonProperty(@"Name of a Node or NodeList containing the outlet node(s) supplying air to the demand side.")]
public System.String SupplySideOutletNodeNames { get; set; } = "";
        
[Description(@"The design return air flow rate as a fraction of supply air flow rate with no exhaust. This can be used to model a pressurized system or set to zero to model a DOAS with no return flow. Use ZoneAirMassFlowConservation to balance zone infiltration and mixing flows.")]
[JsonProperty(@"The design return air flow rate as a fraction of supply air flow rate with no exhaust. This can be used to model a pressurized system or set to zero to model a DOAS with no return flow. Use ZoneAirMassFlowConservation to balance zone infiltration and mixing flows.")]
public System.Single DesignReturnAirFlowFractionOfSupplyAirFlow { get; set; } = 1;
    }
    
    [Description("List equipment in simulation order")]
    [JsonObject("AirLoopHVAC:OutdoorAirSystem:EquipmentList")]
    public class AirLoopHVAC_OutdoorAirSystem_EquipmentList
    {
        
[JsonProperty(@"")]
public System.String ComponentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
    }
    
    [Description(@"Outdoor air subsystem for an AirLoopHVAC. Includes an outdoor air mixing box and optional outdoor air conditioning equipment such as heat recovery, preheat, and precool coils. From the perspective of the primary air loop the outdoor air system is treated as a single component.")]
    [JsonObject("AirLoopHVAC:OutdoorAirSystem")]
    public class AirLoopHVAC_OutdoorAirSystem
    {
        
[Description(@"Enter the name of an AirLoopHVAC:ControllerList object or blank if this object is used in AirLoopHVAC:DedicatedOutdoorAirSystem.")]
[JsonProperty(@"Enter the name of an AirLoopHVAC:ControllerList object or blank if this object is used in AirLoopHVAC:DedicatedOutdoorAirSystem.")]
public System.String ControllerListName { get; set; } = "";
        
[Description(@"Enter the name of an AirLoopHVAC:OutdoorAirSystem:EquipmentList object.")]
[JsonProperty(@"Enter the name of an AirLoopHVAC:OutdoorAirSystem:EquipmentList object.")]
public System.String OutdoorAirEquipmentListName { get; set; } = "";
        
[Description(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
public System.String AvailabilityManagerListName { get; set; } = "";
    }
    
    [Description("Outdoor air mixer. Node names cannot be duplicated within a single OutdoorAir:Mix" +
        "er object or across all outdoor air mixers.")]
    [JsonObject("OutdoorAir:Mixer")]
    public class OutdoorAir_Mixer
    {
        
[Description(@"Name of Mixed Air Node")]
[JsonProperty(@"Name of Mixed Air Node")]
public System.String MixedAirNodeName { get; set; } = "";
        
[Description(@"Name of Outdoor Air Stream Node")]
[JsonProperty(@"Name of Outdoor Air Stream Node")]
public System.String OutdoorAirStreamNodeName { get; set; } = "";
        
[Description(@"Name of Relief Air Stream Node")]
[JsonProperty(@"Name of Relief Air Stream Node")]
public System.String ReliefAirStreamNodeName { get; set; } = "";
        
[Description(@"Name of Return Air Stream Node")]
[JsonProperty(@"Name of Return Air Stream Node")]
public System.String ReturnAirStreamNodeName { get; set; } = "";
    }
    
    [Description("Split one air stream into N outlet streams (currently 500 per air loop, but exten" +
        "sible). Node names cannot be duplicated within a single zone splitter (AirLoopHV" +
        "AC:ZoneSplitter) list.")]
    [JsonObject("AirLoopHVAC:ZoneSplitter")]
    public class AirLoopHVAC_ZoneSplitter
    {
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Nodes { get; set; } = "";
    }
    
    [Description("Connects 1 zone inlet air stream, through zone supply plenum, to one or more outl" +
        "ets. Node names cannot be duplicated within a single supply plenum list.")]
    [JsonObject("AirLoopHVAC:SupplyPlenum")]
    public class AirLoopHVAC_SupplyPlenum
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ZoneNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Nodes { get; set; } = "";
    }
    
    [Description("A supply path can only contain AirLoopHVAC:ZoneSplitter and AirLoopHVAC:SupplyPle" +
        "num objects which may be in series or parallel.")]
    [JsonObject("AirLoopHVAC:SupplyPath")]
    public class AirLoopHVAC_SupplyPath
    {
        
[JsonProperty(@"")]
public System.String SupplyAirPathInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Components { get; set; } = "";
    }
    
    [Description("Mix N inlet air streams into one (currently 500 per air loop, but extensible). No" +
        "de names cannot be duplicated within a single zone mixer (AirLoopHVAC:ZoneMixer)" +
        " list.")]
    [JsonObject("AirLoopHVAC:ZoneMixer")]
    public class AirLoopHVAC_ZoneMixer
    {
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Nodes { get; set; } = "";
    }
    
    [Description("Connects N zone inlet air streams, through zone return plenum, to outlet (current" +
        "ly 500 per air loop) Node names cannot be duplicated within a single plenum list" +
        ".")]
    [JsonObject("AirLoopHVAC:ReturnPlenum")]
    public class AirLoopHVAC_ReturnPlenum
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ZoneNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String InducedAirOutletNodeOrNodelistName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Nodes { get; set; } = "";
    }
    
    [Description("A return air path can only contain one AirLoopHVAC:ZoneMixer and one or more AirL" +
        "oopHVAC:ReturnPlenum objects.")]
    [JsonObject("AirLoopHVAC:ReturnPath")]
    public class AirLoopHVAC_ReturnPath
    {
        
[JsonProperty(@"")]
public System.String ReturnAirPathOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Components { get; set; } = "";
    }
    
    [Description("Defines a central forced air system to provide dedicated outdoor air to multiple " +
        "AirLoopHVACs.")]
    [JsonObject("AirLoopHVAC:DedicatedOutdoorAirSystem")]
    public class AirLoopHVAC_DedicatedOutdoorAirSystem
    {
        
[Description(@"Enter the name of an AirLoopHVAC:OutdoorAirSystem object.")]
[JsonProperty(@"Enter the name of an AirLoopHVAC:OutdoorAirSystem object.")]
public System.String AirloophvacOutdoorairsystemName { get; set; } = "";
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Name of AirLoopHVAC:Mixer.")]
[JsonProperty(@"Name of AirLoopHVAC:Mixer.")]
public System.String AirloophvacMixerName { get; set; } = "";
        
[Description(@"Name of AirLoopHVAC:Splitter.")]
[JsonProperty(@"Name of AirLoopHVAC:Splitter.")]
public System.String AirloophvacSplitterName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single PreheatDesignTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PreheatDesignHumidityRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PrecoolDesignTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PrecoolDesignHumidityRatio { get; set; } = ;
        
[Description(@"Enter the number of the AirLoopHAVC served by AirLoopHVAC:DedicatedOutdoorAirSystem")]
[JsonProperty(@"Enter the number of the AirLoopHAVC served by AirLoopHVAC:DedicatedOutdoorAirSystem")]
public System.Single NumberOfAirloophvac { get; set; } = ;
        
[JsonProperty(@"")]
public System.String Airloophvacs { get; set; } = "";
    }
    
    [Description(@"Mix N inlet air streams from Relief Air Stream Node in OutdoorAir:Mixer objects served by AirLoopHVAC objects listed in AirLoopHVAC:DedicatedOutdoorAirSystem into one (currently 10 as default, but extensible). Node names cannot be duplicated within a single mixer list.")]
    [JsonObject("AirLoopHVAC:Mixer")]
    public class AirLoopHVAC_Mixer
    {
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Nodes { get; set; } = "";
    }
    
    [Description(@"Split one air stream from AirLoopHVAC:DedicatedOutdoorAirSystem outlet node into N outlet streams (currently 10 as default, but extensible). Node names should be Outdoor Air Stream Node Name in OutdoorAir:Mixer objects served by AirLoopHVAC objects listed in AirLoopHVAC:DedicatedOutdoorAirSystem.")]
    [JsonObject("AirLoopHVAC:Splitter")]
    public class AirLoopHVAC_Splitter
    {
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Nodes { get; set; } = "";
    }
}
namespace EnergyPlus.AirflowNetwork
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("This object defines the global parameters used in an Airflow Network simulation.")]
    [JsonObject("AirflowNetwork:SimulationControl")]
    public class AirflowNetwork_SimulationControl
    {
        
[Description(@"NoMultizoneOrDistribution: Only perform Simple calculations (objects ZoneInfiltration:*, ZoneVentilation:*, ZoneMixing, ZoneCrossMixing, ZoneRefrigerationDoorMixing, ZoneAirBalance:OutdoorAir, ZoneEarthtube, ZoneThermalChimney, and ZoneCoolTower:Shower); MultizoneWithoutDistribution: Use AirflowNetwork objects to simulate multizone Airflows driven by wind during simulation time, and objects of ZoneInfiltration:*, ZoneVentilation:*, ZoneMixing, ZoneCrossMixing ZoneRefrigerationDoorMixing, ZoneAirBalance:OutdoorAir, ZoneEarthtube, ZoneThermalChimney, and ZoneCoolTower:Shower are ignored; MultizoneWithDistributionOnlyDuringFanOperation: Perform distribution system calculations during system fan on time and Simple calculations during system Fan off time; MultizoneWithDistribution: Perform distribution system calculations during system fan on time and multizone Airflow driven by wind during system fan off time.")]
[JsonProperty(@"NoMultizoneOrDistribution: Only perform Simple calculations (objects ZoneInfiltration:*, ZoneVentilation:*, ZoneMixing, ZoneCrossMixing, ZoneRefrigerationDoorMixing, ZoneAirBalance:OutdoorAir, ZoneEarthtube, ZoneThermalChimney, and ZoneCoolTower:Shower); MultizoneWithoutDistribution: Use AirflowNetwork objects to simulate multizone Airflows driven by wind during simulation time, and objects of ZoneInfiltration:*, ZoneVentilation:*, ZoneMixing, ZoneCrossMixing ZoneRefrigerationDoorMixing, ZoneAirBalance:OutdoorAir, ZoneEarthtube, ZoneThermalChimney, and ZoneCoolTower:Shower are ignored; MultizoneWithDistributionOnlyDuringFanOperation: Perform distribution system calculations during system fan on time and Simple calculations during system Fan off time; MultizoneWithDistribution: Perform distribution system calculations during system fan on time and multizone Airflow driven by wind during system fan off time.")]
public YesNoDefault AirflownetworkControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoMultizoneOrDistribution");
        
[Description(@"Input: User must enter AirflowNetwork:MultiZone:WindPressureCoefficientArray, AirflowNetwork:MultiZone:ExternalNode, and AirflowNetwork:MultiZone:WindPressureCoefficientValues objects. SurfaceAverageCalculation: used only for rectangular buildings. If SurfaceAverageCalculation is selected, AirflowNetwork:MultiZone:WindPressureCoefficientArray, AirflowNetwork:MultiZone:ExternalNode, and AirflowNetwork:MultiZone:WindPressureCoefficientValues objects are not used.")]
[JsonProperty(@"Input: User must enter AirflowNetwork:MultiZone:WindPressureCoefficientArray, AirflowNetwork:MultiZone:ExternalNode, and AirflowNetwork:MultiZone:WindPressureCoefficientValues objects. SurfaceAverageCalculation: used only for rectangular buildings. If SurfaceAverageCalculation is selected, AirflowNetwork:MultiZone:WindPressureCoefficientArray, AirflowNetwork:MultiZone:ExternalNode, and AirflowNetwork:MultiZone:WindPressureCoefficientValues objects are not used.")]
public YesNoDefault WindPressureCoefficientType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SurfaceAverageCalculation");
        
[Description(@"If ExternalNode is selected, the height given in the AirflowNetwork:MultiZone:ExternalNode object will be used. If OpeningHeight is selected, the surface opening height (centroid) will be used to calculate local wind pressure This field is ignored when the choice of the Wind Pressure Coefficient Type field is SurfaceAverageCalculation.")]
[JsonProperty(@"If ExternalNode is selected, the height given in the AirflowNetwork:MultiZone:ExternalNode object will be used. If OpeningHeight is selected, the surface opening height (centroid) will be used to calculate local wind pressure This field is ignored when the choice of the Wind Pressure Coefficient Type field is SurfaceAverageCalculation.")]
public YesNoDefault HeightSelectionForLocalWindPressureCalculation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "OpeningHeight");
        
[Description(@"Used only if Wind Pressure Coefficient Type = SurfaceAverageCalculation, otherwise this field may be left blank.")]
[JsonProperty(@"Used only if Wind Pressure Coefficient Type = SurfaceAverageCalculation, otherwise this field may be left blank.")]
public YesNoDefault BuildingType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "LowRise");
        
[Description(@"Determines the maximum number of iterations used to converge on a solution. If this limit is exceeded, the program terminates.")]
[JsonProperty(@"Determines the maximum number of iterations used to converge on a solution. If this limit is exceeded, the program terminates.")]
public System.Single MaximumNumberOfIterations { get; set; } = 500;
        
[JsonProperty(@"")]
public YesNoDefault InitializationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ZeroNodePressures");
        
[Description(@"This tolerance is defined as the absolute value of the sum of the mass Flow Rates divided by the sum of the absolute value of the mass Flow Rates. The mass Flow Rates described here refer to the mass Flow Rates at all Nodes in the AirflowNetwork model. The solution converges when both this tolerance and the tolerance in the next field (Absolute Airflow Convergence Tolerance) are satisfied.")]
[JsonProperty(@"This tolerance is defined as the absolute value of the sum of the mass Flow Rates divided by the sum of the absolute value of the mass Flow Rates. The mass Flow Rates described here refer to the mass Flow Rates at all Nodes in the AirflowNetwork model. The solution converges when both this tolerance and the tolerance in the next field (Absolute Airflow Convergence Tolerance) are satisfied.")]
public System.Single RelativeAirflowConvergenceTolerance { get; set; } = 0.0001;
        
[Description(@"This tolerance is defined as the absolute value of the sum of the mass flow rates. The mass flow rates described here refer to the mass flow rates at all nodes in the AirflowNetwork model. The solution converges when both this tolerance and the tolerance in the previous field (Relative Airflow Convergence Tolerance) are satisfied.")]
[JsonProperty(@"This tolerance is defined as the absolute value of the sum of the mass flow rates. The mass flow rates described here refer to the mass flow rates at all nodes in the AirflowNetwork model. The solution converges when both this tolerance and the tolerance in the previous field (Relative Airflow Convergence Tolerance) are satisfied.")]
public System.Single AbsoluteAirflowConvergenceTolerance { get; set; } = 1E-06;
        
[Description(@"Used only for AirflowNetwork:SimulationControl")]
[JsonProperty(@"Used only for AirflowNetwork:SimulationControl")]
public System.Single ConvergenceAccelerationLimit { get; set; } = -0.5;
        
[Description(@"Degrees clockwise from true North. Used only if Wind Pressure Coefficient Type = SurfaceAverageCalculation.")]
[JsonProperty(@"Degrees clockwise from true North. Used only if Wind Pressure Coefficient Type = SurfaceAverageCalculation.")]
public System.Single AzimuthAngleOfLongAxisOfBuilding { get; set; } = 0;
        
[Description(@"Used only if Wind Pressure Coefficient Type = SurfaceAverageCalculation.")]
[JsonProperty(@"Used only if Wind Pressure Coefficient Type = SurfaceAverageCalculation.")]
public System.Single RatioOfBuildingWidthAlongShortAxisToWidthAlongLongAxis { get; set; } = 1;
        
[Description(@"If Yes, external node temperature is height dependent. If No, external node temperature is based on zero height.")]
[JsonProperty(@"If Yes, external node temperature is height dependent. If No, external node temperature is based on zero height.")]
public YesNoDefault HeightDependenceOfExternalNodeTemperature { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Select the solver to use for the pressure network solution")]
[JsonProperty(@"Select the solver to use for the pressure network solution")]
public YesNoDefault Solver { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SkylineLU");
        
[Description(@"Set this input to Yes to have zone equipment that are currently unsupported in the AirflowNetwork model allowed in the simulation if present. Setting this field to Yes, allows the following equipments to be modeled along an AirflowNetwork model: ZoneHVAC:Dehumidifier, ZoneHVAC:EnergyRecoveryVentilator, WaterHeater:HeatPump:*.")]
[JsonProperty(@"Set this input to Yes to have zone equipment that are currently unsupported in the AirflowNetwork model allowed in the simulation if present. Setting this field to Yes, allows the following equipments to be modeled along an AirflowNetwork model: ZoneHVAC:Dehumidifier, ZoneHVAC:EnergyRecoveryVentilator, WaterHeater:HeatPump:*.")]
public YesNoDefault AllowUnsupportedZoneEquipment { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
    }
    
    public enum AirflownetworkControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MultizoneWithDistribution")]
        MultizoneWithDistribution = 1,
        
        [JsonProperty("MultizoneWithDistributionOnlyDuringFanOperation")]
        MultizoneWithDistributionOnlyDuringFanOperation = 2,
        
        [JsonProperty("MultizoneWithoutDistribution")]
        MultizoneWithoutDistribution = 3,
        
        [JsonProperty("NoMultizoneOrDistribution")]
        NoMultizoneOrDistribution = 4,
    }
    
    public enum WindPressureCoefficientTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Input")]
        Input = 1,
        
        [JsonProperty("SurfaceAverageCalculation")]
        SurfaceAverageCalculation = 2,
    }
    
    public enum HeightSelectionForLocalWindPressureCalculationType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ExternalNode")]
        ExternalNode = 1,
        
        [JsonProperty("OpeningHeight")]
        OpeningHeight = 2,
    }
    
    public enum BuildingTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("HighRise")]
        HighRise = 1,
        
        [JsonProperty("LowRise")]
        LowRise = 2,
    }
    
    public enum InitializationTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LinearInitializationMethod")]
        LinearInitializationMethod = 1,
        
        [JsonProperty("ZeroNodePressures")]
        ZeroNodePressures = 2,
    }
    
    public enum SolverType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConjugateGradient")]
        ConjugateGradient = 1,
        
        [JsonProperty("SkylineLU")]
        SkylineLU = 2,
    }
    
    [Description("This object is used to simultaneously control a thermal zone\'s window and door op" +
        "enings, both exterior and interior.")]
    [JsonObject("AirflowNetwork:MultiZone:Zone")]
    public class AirflowNetwork_MultiZone_Zone
    {
        
[Description(@"Enter the zone name where ventilation control is required.")]
[JsonProperty(@"Enter the zone name where ventilation control is required.")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"When Ventilation Control Mode = Temperature or Enthalpy, the following fields are used to modulate the Ventilation Open Factor for all window and door openings in the zone according to the zone's indoor-outdoor temperature or enthalpy difference. Constant: controlled by field Venting Schedule Name. NoVent: control will not open window or door during simulation (Ventilation Open Factor = 0).")]
[JsonProperty(@"When Ventilation Control Mode = Temperature or Enthalpy, the following fields are used to modulate the Ventilation Open Factor for all window and door openings in the zone according to the zone's indoor-outdoor temperature or enthalpy difference. Constant: controlled by field Venting Schedule Name. NoVent: control will not open window or door during simulation (Ventilation Open Factor = 0).")]
public YesNoDefault VentilationControlMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoVent");
        
[Description(@"Used only if Ventilation Control Mode = Temperature or Enthalpy.")]
[JsonProperty(@"Used only if Ventilation Control Mode = Temperature or Enthalpy.")]
public System.String VentilationControlZoneTemperatureSetpointScheduleName { get; set; } = "";
        
[Description(@"Used only if Ventilation Control Mode = Temperature or Enthalpy.")]
[JsonProperty(@"Used only if Ventilation Control Mode = Temperature or Enthalpy.")]
public System.Single MinimumVentingOpenFactor { get; set; } = 0;
        
[Description(@"Applicable only if Ventilation Control Mode = Temperature. This value must be less than the corresponding upper value (next field).")]
[JsonProperty(@"Applicable only if Ventilation Control Mode = Temperature. This value must be less than the corresponding upper value (next field).")]
public System.Single IndoorAndOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactor { get; set; } = 0;
        
[Description(@"Applicable only if Ventilation Control Mode = Temperature. This value must be greater than the corresponding lower value (previous field).")]
[JsonProperty(@"Applicable only if Ventilation Control Mode = Temperature. This value must be greater than the corresponding lower value (previous field).")]
public System.Single IndoorAndOutdoorTemperatureDifferenceUpperLimitForMinimumVentingOpenFactor { get; set; } = 100;
        
[Description(@"Applicable only if Ventilation Control Mode = Enthalpy. This value must be less than the corresponding upper value (next field).")]
[JsonProperty(@"Applicable only if Ventilation Control Mode = Enthalpy. This value must be less than the corresponding upper value (next field).")]
public System.Single IndoorAndOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactor { get; set; } = 0;
        
[Description(@"Applicable only if Ventilation Control Mode = Enthalpy. This value must be greater than the corresponding lower value (previous field).")]
[JsonProperty(@"Applicable only if Ventilation Control Mode = Enthalpy. This value must be greater than the corresponding lower value (previous field).")]
public System.Single IndoorAndOutdoorEnthalpyDifferenceUpperLimitForMinimumVentingOpenFactor { get; set; } = 300000;
        
[Description(@"Non-zero Schedule value means venting is allowed if other venting control conditions are satisfied. A zero (or negative) Schedule value means venting is not allowed under any The Schedule values should be greater than or equal to 0 and less than or equal to 1. circumstances. If this Schedule is not specified then venting is allowed if other venting control conditions are satisfied. Not used if Ventilation Control Mode = NoVent.")]
[JsonProperty(@"Non-zero Schedule value means venting is allowed if other venting control conditions are satisfied. A zero (or negative) Schedule value means venting is not allowed under any The Schedule values should be greater than or equal to 0 and less than or equal to 1. circumstances. If this Schedule is not specified then venting is allowed if other venting control conditions are satisfied. Not used if Ventilation Control Mode = NoVent.")]
public System.String VentingAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Selecting Advanced results in EnergyPlus calculating modified Wind Pressure Coefficients to account for wind direction and turbulence effects on single sided ventilation rates. Model is only valid for zones with 2 openings, both of which are on a single facade.")]
[JsonProperty(@"Selecting Advanced results in EnergyPlus calculating modified Wind Pressure Coefficients to account for wind direction and turbulence effects on single sided ventilation rates. Model is only valid for zones with 2 openings, both of which are on a single facade.")]
public YesNoDefault SingleSidedWindPressureCoefficientAlgorithm { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Standard");
        
[Description(@"This is the whole building width along the direction of the facade of this zone.")]
[JsonProperty(@"This is the whole building width along the direction of the facade of this zone.")]
public System.Single FacadeWidth { get; set; } = 10;
        
[Description(@"Enter the name where Occupancy Ventilation Control is required.")]
[JsonProperty(@"Enter the name where Occupancy Ventilation Control is required.")]
public System.String OccupantVentilationControlName { get; set; } = "";
    }
    
    public enum VentilationControlModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAE55Adaptive")]
        ASHRAEAdaptive = 1,
        
        [JsonProperty("CEN15251Adaptive")]
        CENAdaptive = 2,
        
        [JsonProperty("Constant")]
        Constant = 3,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 4,
        
        [JsonProperty("NoVent")]
        NoVent = 5,
        
        [JsonProperty("Temperature")]
        Temperature = 6,
    }
    
    public enum SingleSidedWindPressureCoefficientAlgorithmType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Advanced")]
        Advanced = 1,
        
        [JsonProperty("Standard")]
        Standard = 2,
    }
    
    [Description("This object specifies the properties of a surface linkage through which air flows" +
        ". Airflow Report: Node 1 as an inside face zone; Node 2 as an outside face zone " +
        "or external node.")]
    [JsonObject("AirflowNetwork:MultiZone:Surface")]
    public class AirflowNetwork_MultiZone_Surface
    {
        
[Description(@"Enter the name of a heat transfer surface.")]
[JsonProperty(@"Enter the name of a heat transfer surface.")]
public System.String SurfaceName { get; set; } = "";
        
[Description(@"Enter the name of an Airflow Network leakage component. A leakage component is one of the following AirflowNetwork:Multizone objects: AirflowNetwork:MultiZone:Component:DetailedOpening, AirflowNetwork:MultiZone:Component:SimpleOpening, AirflowNetwork:MultiZone:Surface:Crack, AirflowNetwork:MultiZone:Surface:EffectiveLeakageArea, AirflowNetwork:MultiZone:Component:HorizontalOpening, or AirflowNetwork:MultiZone:Component:ZoneExhaustFan. When the zone exhaust fan name is entered, any surface control fields below A3 are ignored when the zone exhaust fan turns on.")]
[JsonProperty(@"Enter the name of an Airflow Network leakage component. A leakage component is one of the following AirflowNetwork:Multizone objects: AirflowNetwork:MultiZone:Component:DetailedOpening, AirflowNetwork:MultiZone:Component:SimpleOpening, AirflowNetwork:MultiZone:Surface:Crack, AirflowNetwork:MultiZone:Surface:EffectiveLeakageArea, AirflowNetwork:MultiZone:Component:HorizontalOpening, or AirflowNetwork:MultiZone:Component:ZoneExhaustFan. When the zone exhaust fan name is entered, any surface control fields below A3 are ignored when the zone exhaust fan turns on.")]
public System.String LeakageComponentName { get; set; } = "";
        
[Description(@"Used if Wind Pressure Coefficient Type = Input in the AirflowNetwork:SimulationControl object, otherwise this field may be left blank.")]
[JsonProperty(@"Used if Wind Pressure Coefficient Type = Input in the AirflowNetwork:SimulationControl object, otherwise this field may be left blank.")]
public System.String ExternalNodeName { get; set; } = "";
        
[Description(@"This field specifies a multiplier for a crack, window, or door.")]
[JsonProperty(@"This field specifies a multiplier for a crack, window, or door.")]
public System.Single WindowDoorOpeningFactorOrCrackFactor { get; set; } = 1;
        
[Description(@"When Ventilation Control Mode = Temperature or Enthalpy, the following fields are used to modulate the Ventilation Open Factor for a window or door opening according to the parent zone's indoor-outdoor temperature or enthalpy difference. When Ventilation Control Mode = AdjacentTemperature or AdjacentEnthalpy, the following fields are used to modulate the Ventilation Open Factor for an interior window or door opening according to temperature or enthalpy difference between the parent zone and the adjacent zone. Constant: controlled by field Venting Schedule Name. NoVent: control will not open window or door during simulation (Ventilation Open Factor = 0). ZoneLevel: control will be controlled by AirflowNetwork:MultiZone:Zone Mode.")]
[JsonProperty(@"When Ventilation Control Mode = Temperature or Enthalpy, the following fields are used to modulate the Ventilation Open Factor for a window or door opening according to the parent zone's indoor-outdoor temperature or enthalpy difference. When Ventilation Control Mode = AdjacentTemperature or AdjacentEnthalpy, the following fields are used to modulate the Ventilation Open Factor for an interior window or door opening according to temperature or enthalpy difference between the parent zone and the adjacent zone. Constant: controlled by field Venting Schedule Name. NoVent: control will not open window or door during simulation (Ventilation Open Factor = 0). ZoneLevel: control will be controlled by AirflowNetwork:MultiZone:Zone Mode.")]
public YesNoDefault VentilationControlMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ZoneLevel");
        
[Description(@"Used only if Ventilation Control Mode = Temperature or Enthalpy.")]
[JsonProperty(@"Used only if Ventilation Control Mode = Temperature or Enthalpy.")]
public System.String VentilationControlZoneTemperatureSetpointScheduleName { get; set; } = "";
        
[Description(@"Used only if Ventilation Control Mode = Temperature or Enthalpy.")]
[JsonProperty(@"Used only if Ventilation Control Mode = Temperature or Enthalpy.")]
public System.Single MinimumVentingOpenFactor { get; set; } = 0;
        
[Description(@"Applicable only if Ventilation Control Mode = Temperature")]
[JsonProperty(@"Applicable only if Ventilation Control Mode = Temperature")]
public System.Single IndoorAndOutdoorTemperatureDifferenceLowerLimitForMaximumVentingOpenFactor { get; set; } = 0;
        
[Description(@"Applicable only if Ventilation Control Mode = Temperature. This value must be greater than the corresponding lower value (previous field).")]
[JsonProperty(@"Applicable only if Ventilation Control Mode = Temperature. This value must be greater than the corresponding lower value (previous field).")]
public System.Single IndoorAndOutdoorTemperatureDifferenceUpperLimitForMinimumVentingOpenFactor { get; set; } = 100;
        
[Description(@"Applicable only if Ventilation Control Mode = Enthalpy. This value must be less than the corresponding upper value (next field).")]
[JsonProperty(@"Applicable only if Ventilation Control Mode = Enthalpy. This value must be less than the corresponding upper value (next field).")]
public System.Single IndoorAndOutdoorEnthalpyDifferenceLowerLimitForMaximumVentingOpenFactor { get; set; } = 0;
        
[Description(@"Applicable only if Ventilation Control Mode = Enthalpy. This value must be greater than the corresponding lower value (previous field).")]
[JsonProperty(@"Applicable only if Ventilation Control Mode = Enthalpy. This value must be greater than the corresponding lower value (previous field).")]
public System.Single IndoorAndOutdoorEnthalpyDifferenceUpperLimitForMinimumVentingOpenFactor { get; set; } = 300000;
        
[Description(@"Non-zero schedule value means venting is allowed if other venting control conditions are satisfied. A zero (or negative) schedule value means venting is not allowed under any circumstances. The schedule values should be greater than or equal to 0 and less than or equal to 1. If this schedule is not specified then venting is allowed if other venting control conditions are satisfied. Not used if Ventilation Control Mode = NoVent or ZoneLevel.")]
[JsonProperty(@"Non-zero schedule value means venting is allowed if other venting control conditions are satisfied. A zero (or negative) schedule value means venting is not allowed under any circumstances. The schedule values should be greater than or equal to 0 and less than or equal to 1. If this schedule is not specified then venting is allowed if other venting control conditions are satisfied. Not used if Ventilation Control Mode = NoVent or ZoneLevel.")]
public System.String VentingAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Enter the name where Occupancy Ventilation Control is required.")]
[JsonProperty(@"Enter the name where Occupancy Ventilation Control is required.")]
public System.String OccupantVentilationControlName { get; set; } = "";
        
[Description(@"This field is applied to a non-rectangular window or door. The equivalent shape has the same area as a polygonal window or door.")]
[JsonProperty(@"This field is applied to a non-rectangular window or door. The equivalent shape has the same area as a polygonal window or door.")]
public YesNoDefault EquivalentRectangleMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "PolygonHeight");
        
[Description(@"This field is used when UserDefinedAspectRatio is entered in the Equivalent Rectangle Method field.")]
[JsonProperty(@"This field is used when UserDefinedAspectRatio is entered in the Equivalent Rectangle Method field.")]
public System.Single EquivalentRectangleAspectRatio { get; set; } = 1;
    }
    
    public enum VentilationControlModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAE55Adaptive")]
        ASHRAEAdaptive = 1,
        
        [JsonProperty("AdjacentEnthalpy")]
        AdjacentEnthalpy = 2,
        
        [JsonProperty("AdjacentTemperature")]
        AdjacentTemperature = 3,
        
        [JsonProperty("CEN15251Adaptive")]
        CENAdaptive = 4,
        
        [JsonProperty("Constant")]
        Constant = 5,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 6,
        
        [JsonProperty("NoVent")]
        NoVent = 7,
        
        [JsonProperty("Temperature")]
        Temperature = 8,
        
        [JsonProperty("ZoneLevel")]
        ZoneLevel = 9,
    }
    
    public enum EquivalentRectangleMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BaseSurfaceAspectRatio")]
        BaseSurfaceAspectRatio = 1,
        
        [JsonProperty("PolygonHeight")]
        PolygonHeight = 2,
        
        [JsonProperty("UserDefinedAspectRatio")]
        UserDefinedAspectRatio = 3,
    }
    
    [Description("This object specifies the conditions under which the air mass flow coefficient wa" +
        "s measured.")]
    [JsonObject("AirflowNetwork:MultiZone:ReferenceCrackConditions")]
    public class AirflowNetwork_MultiZone_ReferenceCrackConditions
    {
        
[Description(@"Enter the reference temperature under which the surface crack data were obtained.")]
[JsonProperty(@"Enter the reference temperature under which the surface crack data were obtained.")]
public System.Single ReferenceTemperature { get; set; } = 20;
        
[Description(@"Enter the reference barometric pressure under which the surface crack data were obtained.")]
[JsonProperty(@"Enter the reference barometric pressure under which the surface crack data were obtained.")]
public System.Single ReferenceBarometricPressure { get; set; } = 101325;
        
[Description(@"Enter the reference humidity ratio under which the surface crack data were obtained.")]
[JsonProperty(@"Enter the reference humidity ratio under which the surface crack data were obtained.")]
public System.Single ReferenceHumidityRatio { get; set; } = 0;
    }
    
    [Description("This object specifies the properties of airflow through a crack.")]
    [JsonObject("AirflowNetwork:MultiZone:Surface:Crack")]
    public class AirflowNetwork_MultiZone_Surface_Crack
    {
        
[Description(@"Enter the air mass flow coefficient at the conditions defined in the Reference Crack Conditions object. Defined at 1 Pa pressure difference across this crack.")]
[JsonProperty(@"Enter the air mass flow coefficient at the conditions defined in the Reference Crack Conditions object. Defined at 1 Pa pressure difference across this crack.")]
public System.Single AirMassFlowCoefficientAtReferenceConditions { get; set; } = ;
        
[Description(@"Enter the air mass flow exponent for the surface crack.")]
[JsonProperty(@"Enter the air mass flow exponent for the surface crack.")]
public System.Single AirMassFlowExponent { get; set; } = 0.65;
        
[Description(@"Select a AirflowNetwork:MultiZone:ReferenceCrackConditions name associated with the air mass flow coefficient entered above.")]
[JsonProperty(@"Select a AirflowNetwork:MultiZone:ReferenceCrackConditions name associated with the air mass flow coefficient entered above.")]
public System.String ReferenceCrackConditions { get; set; } = "";
    }
    
    [Description("This object is used to define surface air leakage.")]
    [JsonObject("AirflowNetwork:MultiZone:Surface:EffectiveLeakageArea")]
    public class AirflowNetwork_MultiZone_Surface_EffectiveLeakageArea
    {
        
[Description(@"Enter the effective leakage area.")]
[JsonProperty(@"Enter the effective leakage area.")]
public System.Single EffectiveLeakageArea { get; set; } = ;
        
[Description(@"Enter the coefficient used in the air mass flow equation.")]
[JsonProperty(@"Enter the coefficient used in the air mass flow equation.")]
public System.Single DischargeCoefficient { get; set; } = 1;
        
[Description(@"Enter the pressure difference used to define the air mass flow coefficient and exponent.")]
[JsonProperty(@"Enter the pressure difference used to define the air mass flow coefficient and exponent.")]
public System.Single ReferencePressureDifference { get; set; } = 4;
        
[Description(@"Enter the exponent used in the air mass flow equation.")]
[JsonProperty(@"Enter the exponent used in the air mass flow equation.")]
public System.Single AirMassFlowExponent { get; set; } = 0.65;
    }
    
    [Description("This object specifies the properties of airflow through windows and doors (window" +
        ", door and glass door heat transfer subsurfaces) when they are closed or open.")]
    [JsonObject("AirflowNetwork:MultiZone:Component:DetailedOpening")]
    public class AirflowNetwork_MultiZone_Component_DetailedOpening
    {
        
[Description(@"Defined at 1 Pa per meter of crack length. Enter the coefficient used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when opening (window or door) is closed.")]
[JsonProperty(@"Defined at 1 Pa per meter of crack length. Enter the coefficient used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when opening (window or door) is closed.")]
public System.Single AirMassFlowCoefficientWhenOpeningIsClosed { get; set; } = ;
        
[Description(@"Enter the exponent used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when opening (window or door) is closed.")]
[JsonProperty(@"Enter the exponent used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when opening (window or door) is closed.")]
public System.Single AirMassFlowExponentWhenOpeningIsClosed { get; set; } = 0.65;
        
[Description(@"Select the type of vertical opening: Non-pivoted opening or Horizontally pivoted opening.")]
[JsonProperty(@"Select the type of vertical opening: Non-pivoted opening or Horizontally pivoted opening.")]
public YesNoDefault TypeOfRectangularLargeVerticalOpeningLvo { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NonPivoted");
        
[Description(@"Extra crack length is used for LVO Non-pivoted type with multiple openable parts. Height of pivoting axis is used for LVO Horizontally pivoted type. Specifies window or door characteristics that depend on the LVO type. For Non-pivoted Type (rectangular windows and doors), this field is the extra crack length in meters due to multiple openable parts, if present. Extra here means in addition to the length of the cracks on the top, bottom and sides of the window/door. For Horizontally pivoted Type, this field gives the height of the pivoting axis measured from the bottom of the glazed part of the window (m).")]
[JsonProperty(@"Extra crack length is used for LVO Non-pivoted type with multiple openable parts. Height of pivoting axis is used for LVO Horizontally pivoted type. Specifies window or door characteristics that depend on the LVO type. For Non-pivoted Type (rectangular windows and doors), this field is the extra crack length in meters due to multiple openable parts, if present. Extra here means in addition to the length of the cracks on the top, bottom and sides of the window/door. For Horizontally pivoted Type, this field gives the height of the pivoting axis measured from the bottom of the glazed part of the window (m).")]
public System.Single ExtraCrackLengthOrHeightOfPivotingAxis { get; set; } = 0;
        
[Description(@"Enter the number of the following sets of data for opening factor, discharge coefficient, width factor, height factor, and start height factor.")]
[JsonProperty(@"Enter the number of the following sets of data for opening factor, discharge coefficient, width factor, height factor, and start height factor.")]
public System.Single NumberOfSetsOfOpeningFactorData { get; set; } = ;
        
[Description(@"This value must be specified as 0.")]
[JsonProperty(@"This value must be specified as 0.")]
public System.Single OpeningFactor { get; set; } = 0;
        
[Description(@"The Discharge Coefficient indicates the fractional effectiveness for air flow through a window or door at that Opening Factor.")]
[JsonProperty(@"The Discharge Coefficient indicates the fractional effectiveness for air flow through a window or door at that Opening Factor.")]
public System.Single DischargeCoefficientForOpeningFactor { get; set; } = 0.001;
        
[Description(@"The Width Factor is the opening width divided by the window or door width.")]
[JsonProperty(@"The Width Factor is the opening width divided by the window or door width.")]
public System.Single WidthFactorForOpeningFactor { get; set; } = 0;
        
[Description(@"The Height Factor is the opening height divided by the window or door height.")]
[JsonProperty(@"The Height Factor is the opening height divided by the window or door height.")]
public System.Single HeightFactorForOpeningFactor { get; set; } = 0;
        
[Description(@"The Start Height Factor is the Start Height divided by the window or door height. Start Height is the distance between the bottom of the window or door and the bottom of the window or door opening. The sum of the Height Factor and the Start Height Factor must be less than 1.0 in order to have the opening within the window or door dimensions.")]
[JsonProperty(@"The Start Height Factor is the Start Height divided by the window or door height. Start Height is the distance between the bottom of the window or door and the bottom of the window or door opening. The sum of the Height Factor and the Start Height Factor must be less than 1.0 in order to have the opening within the window or door dimensions.")]
public System.Single StartHeightFactorForOpeningFactor { get; set; } = 0;
        
[Description(@"If Number of Sets of Opening Factor Data = 2, this value must be 1.0. If Number of Sets of Opening Factor Data = 3, this value must be less than 1.0. If Number of Sets of Opening Factor Data = 4, this value must be less than the value entered for Opening factor 3 and greater than the value entered for Opening factor 1.")]
[JsonProperty(@"If Number of Sets of Opening Factor Data = 2, this value must be 1.0. If Number of Sets of Opening Factor Data = 3, this value must be less than 1.0. If Number of Sets of Opening Factor Data = 4, this value must be less than the value entered for Opening factor 3 and greater than the value entered for Opening factor 1.")]
public System.Single OpeningFactor { get; set; } = ;
        
[Description(@"The Discharge Coefficient indicates the fractional effectiveness for air flow through a window or door at that Opening Factor.")]
[JsonProperty(@"The Discharge Coefficient indicates the fractional effectiveness for air flow through a window or door at that Opening Factor.")]
public System.Single DischargeCoefficientForOpeningFactor { get; set; } = 1;
        
[Description(@"The Width Factor is the opening width divided by the window or door width.")]
[JsonProperty(@"The Width Factor is the opening width divided by the window or door width.")]
public System.Single WidthFactorForOpeningFactor { get; set; } = 1;
        
[Description(@"The Height Factor is the opening height divided by the window or door height.")]
[JsonProperty(@"The Height Factor is the opening height divided by the window or door height.")]
public System.Single HeightFactorForOpeningFactor { get; set; } = 1;
        
[Description(@"The Start Height Factor is the Start Height divided by the window or door height. Start Height is the distance between the bottom of the window or door and the bottom of the window or door opening. The sum of the Height Factor and the Start Height Factor must be less than 1.0 in order to have the opening within the window or door dimensions.")]
[JsonProperty(@"The Start Height Factor is the Start Height divided by the window or door height. Start Height is the distance between the bottom of the window or door and the bottom of the window or door opening. The sum of the Height Factor and the Start Height Factor must be less than 1.0 in order to have the opening within the window or door dimensions.")]
public System.Single StartHeightFactorForOpeningFactor { get; set; } = 0;
        
[Description(@"If Number of Sets of Opening Factor Data = 3, this value must be 1.0. If Number of Sets of Opening Factor Data = 4, this value must be less than 1.0, and greater than value entered for Opening factor 2.")]
[JsonProperty(@"If Number of Sets of Opening Factor Data = 3, this value must be 1.0. If Number of Sets of Opening Factor Data = 4, this value must be less than 1.0, and greater than value entered for Opening factor 2.")]
public System.Single OpeningFactor { get; set; } = ;
        
[Description(@"The Discharge Coefficient indicates the fractional effectiveness for air flow through a window or door at that Opening Factor.")]
[JsonProperty(@"The Discharge Coefficient indicates the fractional effectiveness for air flow through a window or door at that Opening Factor.")]
public System.Single DischargeCoefficientForOpeningFactor { get; set; } = 0;
        
[Description(@"The Width Factor is the opening width divided by the window or door width.")]
[JsonProperty(@"The Width Factor is the opening width divided by the window or door width.")]
public System.Single WidthFactorForOpeningFactor { get; set; } = 0;
        
[Description(@"The Height Factor is the opening height divided by the window or door height.")]
[JsonProperty(@"The Height Factor is the opening height divided by the window or door height.")]
public System.Single HeightFactorForOpeningFactor { get; set; } = 0;
        
[Description(@"The Start Height Factor is the Start Height divided by the window or door height. Start Height is the distance between the bottom of the window or door and the bottom of the window or door opening. The sum of the Height Factor and the Start Height Factor must be less than 1.0 in order to have the opening within the window or door dimensions.")]
[JsonProperty(@"The Start Height Factor is the Start Height divided by the window or door height. Start Height is the distance between the bottom of the window or door and the bottom of the window or door opening. The sum of the Height Factor and the Start Height Factor must be less than 1.0 in order to have the opening within the window or door dimensions.")]
public System.Single StartHeightFactorForOpeningFactor { get; set; } = 0;
        
[Description(@"If Number of Sets of Opening Factor Data = 4, this value must be 1.0")]
[JsonProperty(@"If Number of Sets of Opening Factor Data = 4, this value must be 1.0")]
public System.Single OpeningFactor { get; set; } = ;
        
[Description(@"The Discharge Coefficient indicates the fractional effectiveness for air flow through a window or door at that Opening Factor.")]
[JsonProperty(@"The Discharge Coefficient indicates the fractional effectiveness for air flow through a window or door at that Opening Factor.")]
public System.Single DischargeCoefficientForOpeningFactor { get; set; } = 0;
        
[Description(@"The Width Factor is the opening width divided by the window or door width.")]
[JsonProperty(@"The Width Factor is the opening width divided by the window or door width.")]
public System.Single WidthFactorForOpeningFactor { get; set; } = 0;
        
[Description(@"The Height Factor is the opening height divided by the window or door height.")]
[JsonProperty(@"The Height Factor is the opening height divided by the window or door height.")]
public System.Single HeightFactorForOpeningFactor { get; set; } = 0;
        
[Description(@"The Start Height Factor is the Start Height divided by the window or door height. Start Height is the distance between the bottom of the window or door and the bottom of the window or door opening. The sum of the Height Factor and the Start Height Factor must be less than 1.0 in order to have the opening within the window or door dimensions.")]
[JsonProperty(@"The Start Height Factor is the Start Height divided by the window or door height. Start Height is the distance between the bottom of the window or door and the bottom of the window or door opening. The sum of the Height Factor and the Start Height Factor must be less than 1.0 in order to have the opening within the window or door dimensions.")]
public System.Single StartHeightFactorForOpeningFactor { get; set; } = 0;
    }
    
    public enum TypeOfRectangularLargeVerticalOpeningLvoType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("HorizontallyPivoted")]
        HorizontallyPivoted = 1,
        
        [JsonProperty("NonPivoted")]
        NonPivoted = 2,
    }
    
    [Description("This object specifies the properties of air flow through windows and doors (windo" +
        "w, door and glass door heat transfer subsurfaces) when they are closed or open.")]
    [JsonObject("AirflowNetwork:MultiZone:Component:SimpleOpening")]
    public class AirflowNetwork_MultiZone_Component_SimpleOpening
    {
        
[Description(@"Defined at 1 Pa pressure difference. Enter the coefficient used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when opening (window or door) is closed.")]
[JsonProperty(@"Defined at 1 Pa pressure difference. Enter the coefficient used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when opening (window or door) is closed.")]
public System.Single AirMassFlowCoefficientWhenOpeningIsClosed { get; set; } = ;
        
[Description(@"Enter the exponent used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when opening (window or door) is closed.")]
[JsonProperty(@"Enter the exponent used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when opening (window or door) is closed.")]
public System.Single AirMassFlowExponentWhenOpeningIsClosed { get; set; } = 0.65;
        
[Description(@"Enter the minimum density difference above which two-way flow may occur due to stack effect.")]
[JsonProperty(@"Enter the minimum density difference above which two-way flow may occur due to stack effect.")]
public System.Single MinimumDensityDifferenceForTwoWayFlow { get; set; } = ;
        
[Description(@"The Discharge Coefficient indicates the fractional effectiveness for air flow through a window or door at that Opening Factor.")]
[JsonProperty(@"The Discharge Coefficient indicates the fractional effectiveness for air flow through a window or door at that Opening Factor.")]
public System.Single DischargeCoefficient { get; set; } = ;
    }
    
    [Description("This object specifies the properties of air flow through a horizontal opening")]
    [JsonObject("AirflowNetwork:MultiZone:Component:HorizontalOpening")]
    public class AirflowNetwork_MultiZone_Component_HorizontalOpening
    {
        
[Description(@"Defined at 1 Pa pressure difference. Enter the coefficient used in the following equation: Mass flow rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when opening is closed.")]
[JsonProperty(@"Defined at 1 Pa pressure difference. Enter the coefficient used in the following equation: Mass flow rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when opening is closed.")]
public System.Single AirMassFlowCoefficientWhenOpeningIsClosed { get; set; } = ;
        
[Description(@"Enter the exponent used in the following equation: Mass flow rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when opening is closed.")]
[JsonProperty(@"Enter the exponent used in the following equation: Mass flow rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when opening is closed.")]
public System.Single AirMassFlowExponentWhenOpeningIsClosed { get; set; } = 0.65;
        
[Description(@"Sloping plane angle = 90 is equivalent to fully open.")]
[JsonProperty(@"Sloping plane angle = 90 is equivalent to fully open.")]
public System.Single SlopingPlaneAngle { get; set; } = 90;
        
[Description(@"The Discharge Coefficient indicates the fractional effectiveness for air flow through the opening at that Opening Factor.")]
[JsonProperty(@"The Discharge Coefficient indicates the fractional effectiveness for air flow through the opening at that Opening Factor.")]
public System.Single DischargeCoefficient { get; set; } = ;
    }
    
    [Description("This object specifies the additional properties for a zone exhaust fan to perform" +
        " multizone airflow calculations.")]
    [JsonObject("AirflowNetwork:MultiZone:Component:ZoneExhaustFan")]
    public class AirflowNetwork_MultiZone_Component_ZoneExhaustFan
    {
        
[Description(@"Enter the air mass flow coefficient at the conditions defined in the Reference Crack Conditions object. Defined at 1 Pa pressure difference. Enter the coefficient used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when the fan is off.")]
[JsonProperty(@"Enter the air mass flow coefficient at the conditions defined in the Reference Crack Conditions object. Defined at 1 Pa pressure difference. Enter the coefficient used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when the fan is off.")]
public System.Single AirMassFlowCoefficientWhenTheZoneExhaustFanIsOffAtReferenceConditions { get; set; } = ;
        
[Description(@"Enter the exponent used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when the fan is off.")]
[JsonProperty(@"Enter the exponent used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when the fan is off.")]
public System.Single AirMassFlowExponentWhenTheZoneExhaustFanIsOff { get; set; } = 0.65;
        
[Description(@"Select a AirflowNetwork:MultiZone:ReferenceCrackConditions name associated with the air mass flow coefficient entered above.")]
[JsonProperty(@"Select a AirflowNetwork:MultiZone:ReferenceCrackConditions name associated with the air mass flow coefficient entered above.")]
public System.String ReferenceCrackConditions { get; set; } = "";
    }
    
    [Description("This object defines outdoor environmental conditions outside of the building.")]
    [JsonObject("AirflowNetwork:MultiZone:ExternalNode")]
    public class AirflowNetwork_MultiZone_ExternalNode
    {
        
[Description(@"Designates the reference height used to calculate relative pressure.")]
[JsonProperty(@"Designates the reference height used to calculate relative pressure.")]
public System.Single ExternalNodeHeight { get; set; } = 0;
        
[Description(@"The name of the AirflowNetwork:MultiZone:WindPressureCoefficientValues, curve, or table object specifying the wind pressure coefficient.")]
[JsonProperty(@"The name of the AirflowNetwork:MultiZone:WindPressureCoefficientValues, curve, or table object specifying the wind pressure coefficient.")]
public System.String WindPressureCoefficientCurveName { get; set; } = "";
        
[Description(@"Specify whether the pressure curve is symmetric or not. Specify Yes for curves that should be evaluated from 0 to 180 degrees Specify No for curves that should be evaluated from 0 to 360 degrees")]
[JsonProperty(@"Specify whether the pressure curve is symmetric or not. Specify Yes for curves that should be evaluated from 0 to 180 degrees Specify No for curves that should be evaluated from 0 to 360 degrees")]
public YesNoDefault SymmetricWindPressureCoefficientCurve { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Specify whether the angle used to compute the wind pressure coefficient is absolute or relative Specify Relative to compute the angle between the wind direction and the surface azimuth Specify Absolute to use the wind direction angle directly")]
[JsonProperty(@"Specify whether the angle used to compute the wind pressure coefficient is absolute or relative Specify Relative to compute the angle between the wind direction and the surface azimuth Specify Absolute to use the wind direction angle directly")]
public YesNoDefault WindAngleType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Absolute");
    }
    
    public enum WindAngleTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Absolute")]
        Absolute = 1,
        
        [JsonProperty("Relative")]
        Relative = 2,
    }
    
    [Description(@"Used only if Wind Pressure Coefficient (WPC) Type = Input in the AirflowNetwork:SimulationControl object. Number of WPC Values in the corresponding AirflowNetwork:MultiZone:WindPressureCoefficientValues object must be the same as the number of wind directions specified for this AirflowNetwork:MultiZone:WindPressureCoefficientArray object.")]
    [JsonObject("AirflowNetwork:MultiZone:WindPressureCoefficientArray")]
    public class AirflowNetwork_MultiZone_WindPressureCoefficientArray
    {
        
[Description(@"Enter the wind direction corresponding to the 1st WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 1st WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 2nd WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 2nd WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 3rd WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 3rd WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 4th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 4th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 5th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 5th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 6th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 6th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 7th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 7th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 8th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 8th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 9th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 9th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 10th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 10th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 11th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 11th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 12th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 12th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 13th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 13th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 14th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 14th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 15th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 15th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 16th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 16th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 17th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 17th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 18th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 18th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 19th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 19th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 20th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 20th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 21st WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 21st WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 22nd WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 22nd WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 23rd WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 23rd WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 24th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 24th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 25th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 25th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 26th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 26th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 27th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 27th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 28th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 28th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 29th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 29th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 30th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 30th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 31st WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 31st WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 32nd WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 32nd WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 33rd WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 33rd WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 34th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 34th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 35th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 35th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Enter the wind direction corresponding to the 36th WPC Array value.")]
[JsonProperty(@"Enter the wind direction corresponding to the 36th WPC Array value.")]
public System.Single WindDirection { get; set; } = ;
    }
    
    [Description(@"Used only if Wind Pressure Coefficient (WPC) Type = INPUT in the AirflowNetwork:SimulationControl object. The number of WPC numeric inputs must correspond to the number of wind direction inputs in the AirflowNetwork:Multizone:WindPressureCoefficientArray object.")]
    [JsonObject("AirflowNetwork:MultiZone:WindPressureCoefficientValues")]
    public class AirflowNetwork_MultiZone_WindPressureCoefficientValues
    {
        
[Description(@"Enter the name of the AirflowNetwork:Multizone:WindPressureCoefficientArray object.")]
[JsonProperty(@"Enter the name of the AirflowNetwork:Multizone:WindPressureCoefficientArray object.")]
public System.String AirflownetworkMultizoneWindpressurecoefficientarrayName { get; set; } = "";
        
[Description(@"Enter the WPC Value corresponding to the 1st wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 1st wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 2nd wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 2nd wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 3rd wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 3rd wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 4th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 4th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 5th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 5th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 6th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 6th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 7th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 7th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 8th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 8th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 9th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 9th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 10th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 10th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 11th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 11th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 12th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 12th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 13th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 13th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 14th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 14th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 15th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 15th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 16th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 16th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 17th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 17th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 18th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 18th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 19th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 19th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 20th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 20th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 21st wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 21st wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 22nd wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 22nd wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 23rd wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 23rd wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 24th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 24th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 25th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 25th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 26th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 26th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 27th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 27th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 28th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 28th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 29th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 29th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 30th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 30th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 31st wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 31st wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 32nd wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 32nd wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 33rd wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 33rd wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 34th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 34th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 35th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 35th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
        
[Description(@"Enter the WPC Value corresponding to the 36th wind direction.")]
[JsonProperty(@"Enter the WPC Value corresponding to the 36th wind direction.")]
public System.Single WindPressureCoefficientValue { get; set; } = ;
    }
    
    [Description("This object is used to control a zone to a specified indoor pressure using the Ai" +
        "rflowNetwork model. The specified pressure setpoint is used to control the zone " +
        "exhaust fan flow rate in a controlled zone or the relief air flow rate in an air" +
        " loop.")]
    [JsonObject("AirflowNetwork:ZoneControl:PressureController")]
    public class AirflowNetwork_ZoneControl_PressureController
    {
        
[JsonProperty(@"")]
public System.String ControlZoneName { get; set; } = "";
        
[Description(@"The current selection is AirflowNetwork:MultiZone:Component:ZoneExhaustFan or AirflowNetwork:Distribution:Component:ReliefAirFlow.")]
[JsonProperty(@"The current selection is AirflowNetwork:MultiZone:Component:ZoneExhaustFan or AirflowNetwork:Distribution:Component:ReliefAirFlow.")]
public YesNoDefault ControlObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Control names are names of individual control objects")]
[JsonProperty(@"Control names are names of individual control objects")]
public System.String ControlObjectName { get; set; } = "";
        
[Description(@"Availability schedule name for pressure controller. Schedule value > 0 means the pressure controller is enabled. If this field is blank, then pressure controller is always enabled.")]
[JsonProperty(@"Availability schedule name for pressure controller. Schedule value > 0 means the pressure controller is enabled. If this field is blank, then pressure controller is always enabled.")]
public System.String PressureControlAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PressureSetpointScheduleName { get; set; } = "";
    }
    
    public enum ControlObjectTypeType
    {
        
        [JsonProperty("AirflowNetwork:Distribution:Component:ReliefAirFlow")]
        AirflowNetworkDistributionComponentReliefAirFlow = 0,
        
        [JsonProperty("AirflowNetwork:MultiZone:Component:ZoneExhaustFan")]
        AirflowNetworkMultiZoneComponentZoneExhaustFan = 1,
    }
    
    [Description("This object represents an air distribution node in the AirflowNetwork model.")]
    [JsonObject("AirflowNetwork:Distribution:Node")]
    public class AirflowNetwork_Distribution_Node
    {
        
[Description(@"Designates node names defined in another object. The node name may occur in air branches. Enter a node name to represent a node already defined in an air loop. Leave this field blank if the Node or Object Type field below is entered as AirLoopHVAC:ZoneMixer, AirLoopHVAC:ZoneSplitter, AirLoopHVAC:OutdoorAirSystem, or Other.")]
[JsonProperty(@"Designates node names defined in another object. The node name may occur in air branches. Enter a node name to represent a node already defined in an air loop. Leave this field blank if the Node or Object Type field below is entered as AirLoopHVAC:ZoneMixer, AirLoopHVAC:ZoneSplitter, AirLoopHVAC:OutdoorAirSystem, or Other.")]
public System.String ComponentNameOrNodeName { get; set; } = "";
        
[Description(@"Designates Node type for the Node or Component Name defined in the field above. AirLoopHVAC:ZoneMixer -- Represents a AirLoopHVAC:ZoneMixer object. AirLoopHVAC:ZoneSplitter -- Represents a AirLoopHVAC:ZoneSplitter object. AirLoopHVAC:OutdoorAirSystem -- Represents an AirLoopHVAC:OutdoorAirSystem object. OAMixerOutdoorAirStreamNode -- Represents an external node used in the OutdoorAir:Mixer OutdoorAir:NodeList -- Represents an external node when a heat exchanger is used before the OutdoorAir:Mixer OutdoorAir:Node -- Represents an external node when a heat exchanger is used before the OutdoorAir:Mixer Other -- none of the above, the Node name already defined in the previous field is part of an air loop.")]
[JsonProperty(@"Designates Node type for the Node or Component Name defined in the field above. AirLoopHVAC:ZoneMixer -- Represents a AirLoopHVAC:ZoneMixer object. AirLoopHVAC:ZoneSplitter -- Represents a AirLoopHVAC:ZoneSplitter object. AirLoopHVAC:OutdoorAirSystem -- Represents an AirLoopHVAC:OutdoorAirSystem object. OAMixerOutdoorAirStreamNode -- Represents an external node used in the OutdoorAir:Mixer OutdoorAir:NodeList -- Represents an external node when a heat exchanger is used before the OutdoorAir:Mixer OutdoorAir:Node -- Represents an external node when a heat exchanger is used before the OutdoorAir:Mixer Other -- none of the above, the Node name already defined in the previous field is part of an air loop.")]
public YesNoDefault ComponentObjectTypeOrNodeType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Other");
        
[Description(@"Enter the reference height used to calculate the relative pressure.")]
[JsonProperty(@"Enter the reference height used to calculate the relative pressure.")]
public System.Single NodeHeight { get; set; } = 0;
    }
    
    public enum ComponentObjectTypeOrNodeTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirLoopHVAC:OutdoorAirSystem")]
        AirLoopHVACOutdoorAirSystem = 1,
        
        [JsonProperty("AirLoopHVAC:ZoneMixer")]
        AirLoopHVACZoneMixer = 2,
        
        [JsonProperty("AirLoopHVAC:ZoneSplitter")]
        AirLoopHVACZoneSplitter = 3,
        
        [JsonProperty("OAMixerOutdoorAirStreamNode")]
        OAMixerOutdoorAirStreamNode = 4,
        
        [JsonProperty("Other")]
        Other = 5,
        
        [JsonProperty("OutdoorAir:Node")]
        OutdoorAirNode = 6,
        
        [JsonProperty("OutdoorAir:NodeList")]
        OutdoorAirNodeList = 7,
    }
    
    [Description("This object defines the characteristics of a supply or return air leak.")]
    [JsonObject("AirflowNetwork:Distribution:Component:Leak")]
    public class AirflowNetwork_Distribution_Component_Leak
    {
        
[Description(@"Defined at 1 Pa pressure difference across this component. Enter the coefficient used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent")]
[JsonProperty(@"Defined at 1 Pa pressure difference across this component. Enter the coefficient used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent")]
public System.Single AirMassFlowCoefficient { get; set; } = ;
        
[Description(@"Enter the exponent used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent")]
[JsonProperty(@"Enter the exponent used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent")]
public System.Single AirMassFlowExponent { get; set; } = 0.65;
    }
    
    [Description("This object is used to define supply and return air leaks with respect to the fan" +
        "\'s maximum air flow rate.")]
    [JsonObject("AirflowNetwork:Distribution:Component:LeakageRatio")]
    public class AirflowNetwork_Distribution_Component_LeakageRatio
    {
        
[Description(@"Defined as a ratio of leak flow rate to the maximum flow rate.")]
[JsonProperty(@"Defined as a ratio of leak flow rate to the maximum flow rate.")]
public System.Single EffectiveLeakageRatio { get; set; } = ;
        
[Description(@"Enter the maximum air flow rate in this air loop.")]
[JsonProperty(@"Enter the maximum air flow rate in this air loop.")]
public System.Single MaximumFlowRate { get; set; } = ;
        
[Description(@"Enter the pressure corresponding to the Effective leakage ratio entered above.")]
[JsonProperty(@"Enter the pressure corresponding to the Effective leakage ratio entered above.")]
public System.Single ReferencePressureDifference { get; set; } = ;
        
[Description(@"Enter the exponent used in the air mass flow equation.")]
[JsonProperty(@"Enter the exponent used in the air mass flow equation.")]
public System.Single AirMassFlowExponent { get; set; } = 0.65;
    }
    
    [Description("This object defines the relationship between pressure and air flow through the du" +
        "ct.")]
    [JsonObject("AirflowNetwork:Distribution:Component:Duct")]
    public class AirflowNetwork_Distribution_Component_Duct
    {
        
[Description(@"Enter the length of the duct.")]
[JsonProperty(@"Enter the length of the duct.")]
public System.Single DuctLength { get; set; } = ;
        
[Description(@"Enter the hydraulic diameter of the duct. Hydraulic diameter is defined as 4 multiplied by cross section area divided by perimeter")]
[JsonProperty(@"Enter the hydraulic diameter of the duct. Hydraulic diameter is defined as 4 multiplied by cross section area divided by perimeter")]
public System.Single HydraulicDiameter { get; set; } = ;
        
[Description(@"Enter the cross section area of the duct.")]
[JsonProperty(@"Enter the cross section area of the duct.")]
public System.Single CrossSectionArea { get; set; } = ;
        
[Description(@"Enter the inside surface roughness of the duct.")]
[JsonProperty(@"Enter the inside surface roughness of the duct.")]
public System.Single SurfaceRoughness { get; set; } = 0.0009;
        
[Description(@"Enter the coefficient used to calculate dynamic losses of fittings (e.g. elbows).")]
[JsonProperty(@"Enter the coefficient used to calculate dynamic losses of fittings (e.g. elbows).")]
public System.Single CoefficientForLocalDynamicLossDueToFitting { get; set; } = 0;
        
[Description(@"conduction only Default value of 0.943 is equivalent to 1.06 m2-K/W (R6) duct insulation.")]
[JsonProperty(@"conduction only Default value of 0.943 is equivalent to 1.06 m2-K/W (R6) duct insulation.")]
public System.Single HeatTransmittanceCoefficientUFactorForDuctWallConstruction { get; set; } = 0.943;
        
[Description(@"Enter the overall moisture transmittance coefficient including moisture film coefficients at both surfaces.")]
[JsonProperty(@"Enter the overall moisture transmittance coefficient including moisture film coefficients at both surfaces.")]
public System.Single OverallMoistureTransmittanceCoefficientFromAirToAir { get; set; } = 0.001;
        
[Description(@"optional. convection coefficient calculated automatically, unless specified")]
[JsonProperty(@"optional. convection coefficient calculated automatically, unless specified")]
public System.Single OutsideConvectionCoefficient { get; set; } = ;
        
[Description(@"optional. convection coefficient calculated automatically, unless specified")]
[JsonProperty(@"optional. convection coefficient calculated automatically, unless specified")]
public System.Single InsideConvectionCoefficient { get; set; } = ;
    }
    
    [Description("This object defines the name of the supply Air Fan used in an Air loop.")]
    [JsonObject("AirflowNetwork:Distribution:Component:Fan")]
    public class AirflowNetwork_Distribution_Component_Fan
    {
        
[Description(@"Enter the name of the fan in the primary air loop.")]
[JsonProperty(@"Enter the name of the fan in the primary air loop.")]
public System.String FanName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault SupplyFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Fan:ConstantVolume");
    }
    
    public enum SupplyFanObjectTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 1,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 2,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 3,
        
        [JsonProperty("Fan:VariableVolume")]
        FanVariableVolume = 4,
    }
    
    [Description("This object defines the name of a coil used in an air loop.")]
    [JsonObject("AirflowNetwork:Distribution:Component:Coil")]
    public class AirflowNetwork_Distribution_Component_Coil
    {
        
[Description(@"Enter the name of a cooling or heating coil in the primary Air loop.")]
[JsonProperty(@"Enter the name of a cooling or heating coil in the primary Air loop.")]
public System.String CoilName { get; set; } = "";
        
[Description(@"Select the type of coil corresponding to the name entered in the field above.")]
[JsonProperty(@"Select the type of coil corresponding to the name entered in the field above.")]
public YesNoDefault CoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the air path length (depth) for the coil.")]
[JsonProperty(@"Enter the air path length (depth) for the coil.")]
public System.Single AirPathLength { get; set; } = ;
        
[Description(@"Enter the hydraulic diameter of this coil. The hydraulic diameter is defined as 4 multiplied by the cross section area divided by perimeter.")]
[JsonProperty(@"Enter the hydraulic diameter of this coil. The hydraulic diameter is defined as 4 multiplied by the cross section area divided by perimeter.")]
public System.Single AirPathHydraulicDiameter { get; set; } = ;
    }
    
    public enum CoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:DX")]
        CoilCoolingDX = 0,
        
        [JsonProperty("Coil:Cooling:DX:MultiSpeed")]
        CoilCoolingDXMultiSpeed = 1,
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 2,
        
        [JsonProperty("Coil:Cooling:DX:TwoSpeed")]
        CoilCoolingDXTwoSpeed = 3,
        
        [JsonProperty("Coil:Cooling:DX:TwoStageWithHumidityControlMode")]
        CoilCoolingDXTwoStageWithHumidityControlMode = 4,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 5,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 6,
        
        [JsonProperty("Coil:Heating:DX:MultiSpeed")]
        CoilHeatingDXMultiSpeed = 7,
        
        [JsonProperty("Coil:Heating:DX:SingleSpeed")]
        CoilHeatingDXSingleSpeed = 8,
        
        [JsonProperty("Coil:Heating:Desuperheater")]
        CoilHeatingDesuperheater = 9,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 10,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 11,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 12,
    }
    
    [Description("This object defines the name of an air-to-air heat exchanger used in an air loop." +
        "")]
    [JsonObject("AirflowNetwork:Distribution:Component:HeatExchanger")]
    public class AirflowNetwork_Distribution_Component_HeatExchanger
    {
        
[Description(@"Enter the name of an air-to-air heat exchanger in the primary Air loop.")]
[JsonProperty(@"Enter the name of an air-to-air heat exchanger in the primary Air loop.")]
public System.String HeatexchangerName { get; set; } = "";
        
[Description(@"Select the type of heat exchanger corresponding to the name entered in the field above.")]
[JsonProperty(@"Select the type of heat exchanger corresponding to the name entered in the field above.")]
public YesNoDefault HeatexchangerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the air path length (depth) for the heat exchanger.")]
[JsonProperty(@"Enter the air path length (depth) for the heat exchanger.")]
public System.Single AirPathLength { get; set; } = ;
        
[Description(@"Enter the hydraulic diameter of this heat exchanger. The hydraulic diameter is defined as 4 multiplied by the cross section area divided by perimeter.")]
[JsonProperty(@"Enter the hydraulic diameter of this heat exchanger. The hydraulic diameter is defined as 4 multiplied by the cross section area divided by perimeter.")]
public System.Single AirPathHydraulicDiameter { get; set; } = ;
    }
    
    public enum HeatexchangerObjectTypeType
    {
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 0,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 1,
        
        [JsonProperty("HeatExchanger:Desiccant:BalancedFlow")]
        HeatExchangerDesiccantBalancedFlow = 2,
    }
    
    [Description("This object defines the name of a terminal unit in an air loop.")]
    [JsonObject("AirflowNetwork:Distribution:Component:TerminalUnit")]
    public class AirflowNetwork_Distribution_Component_TerminalUnit
    {
        
[Description(@"Enter the name of a terminal unit in the AirLoopHVAC.")]
[JsonProperty(@"Enter the name of a terminal unit in the AirLoopHVAC.")]
public System.String TerminalUnitName { get; set; } = "";
        
[Description(@"Select the type of terminal unit corresponding to the name entered in the field above.")]
[JsonProperty(@"Select the type of terminal unit corresponding to the name entered in the field above.")]
public YesNoDefault TerminalUnitObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the air path length (depth) for the terminal unit.")]
[JsonProperty(@"Enter the air path length (depth) for the terminal unit.")]
public System.Single AirPathLength { get; set; } = ;
        
[Description(@"Enter the hydraulic diameter of this terminal unit. The hydraulic diameter is defined as 4 multiplied by the cross section area divided by perimeter.")]
[JsonProperty(@"Enter the hydraulic diameter of this terminal unit. The hydraulic diameter is defined as 4 multiplied by the cross section area divided by perimeter.")]
public System.Single AirPathHydraulicDiameter { get; set; } = ;
    }
    
    public enum TerminalUnitObjectTypeType
    {
        
        [JsonProperty("AirTerminal:SingleDuct:ConstantVolume:Reheat")]
        AirTerminalSingleDuctConstantVolumeReheat = 0,
        
        [JsonProperty("AirTerminal:SingleDuct:VAV:Reheat")]
        AirTerminalSingleDuctVAVReheat = 1,
    }
    
    [Description(@"This object defines the characteristics of a constant pressure drop component (e.g. filter). Each node connected to this object can not be a node of mixer, splitter, a node of air primary loop, or zone equipment loop. It is recommended to connect to a duct component at both ends.")]
    [JsonObject("AirflowNetwork:Distribution:Component:ConstantPressureDrop")]
    public class AirflowNetwork_Distribution_Component_ConstantPressureDrop
    {
        
[Description(@"Enter the pressure drop across this component.")]
[JsonProperty(@"Enter the pressure drop across this component.")]
public System.Single PressureDifferenceAcrossTheComponent { get; set; } = ;
    }
    
    [Description("This object includes the outdoor air flow rate set by the Controller:OutdoorAir o" +
        "bject in the airflow network.")]
    [JsonObject("AirflowNetwork:Distribution:Component:OutdoorAirFlow")]
    public class AirflowNetwork_Distribution_Component_OutdoorAirFlow
    {
        
[JsonProperty(@"")]
public System.String OutdoorAirMixerName { get; set; } = "";
        
[Description(@"Enter the air mass flow coefficient at the conditions defined in the Reference Crack Conditions object. Defined at 1 Pa pressure difference. Enter the coefficient used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when no outdoor air flow rate.")]
[JsonProperty(@"Enter the air mass flow coefficient at the conditions defined in the Reference Crack Conditions object. Defined at 1 Pa pressure difference. Enter the coefficient used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when no outdoor air flow rate.")]
public System.Single AirMassFlowCoefficientWhenNoOutdoorAirFlowAtReferenceConditions { get; set; } = ;
        
[Description(@"Enter the exponent used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when no outdoor air flow rate.")]
[JsonProperty(@"Enter the exponent used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when no outdoor air flow rate.")]
public System.Single AirMassFlowExponentWhenNoOutdoorAirFlow { get; set; } = 0.65;
        
[Description(@"Select a AirflowNetwork:MultiZone:ReferenceCrackConditions name associated with the air mass flow coefficient entered above.")]
[JsonProperty(@"Select a AirflowNetwork:MultiZone:ReferenceCrackConditions name associated with the air mass flow coefficient entered above.")]
public System.String ReferenceCrackConditions { get; set; } = "";
    }
    
    [Description("This object allows variation of air flow rate to perform pressure.")]
    [JsonObject("AirflowNetwork:Distribution:Component:ReliefAirFlow")]
    public class AirflowNetwork_Distribution_Component_ReliefAirFlow
    {
        
[JsonProperty(@"")]
public System.String OutdoorAirMixerName { get; set; } = "";
        
[Description(@"Enter the air mass flow coefficient at the conditions defined in the Reference Crack Conditions object. Defined at 1 Pa pressure difference. Enter the coefficient used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when no outdoor air flow rate.")]
[JsonProperty(@"Enter the air mass flow coefficient at the conditions defined in the Reference Crack Conditions object. Defined at 1 Pa pressure difference. Enter the coefficient used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when no outdoor air flow rate.")]
public System.Single AirMassFlowCoefficientWhenNoOutdoorAirFlowAtReferenceConditions { get; set; } = ;
        
[Description(@"Enter the exponent used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when no outdoor air flow rate.")]
[JsonProperty(@"Enter the exponent used in the following equation: Mass Flow Rate = Air Mass Flow Coefficient * (dP)^Air Mass Flow Exponent. Used only when no outdoor air flow rate.")]
public System.Single AirMassFlowExponentWhenNoOutdoorAirFlow { get; set; } = 0.65;
        
[Description(@"Select a AirflowNetwork:MultiZone:ReferenceCrackConditions name associated with the air mass flow coefficient entered above.")]
[JsonProperty(@"Select a AirflowNetwork:MultiZone:ReferenceCrackConditions name associated with the air mass flow coefficient entered above.")]
public System.String ReferenceCrackConditions { get; set; } = "";
    }
    
    [Description("This object defines the connection between two nodes and a component.")]
    [JsonObject("AirflowNetwork:Distribution:Linkage")]
    public class AirflowNetwork_Distribution_Linkage
    {
        
[Description(@"Enter the name of zone or AirflowNetwork Node.")]
[JsonProperty(@"Enter the name of zone or AirflowNetwork Node.")]
public System.String NodeName { get; set; } = "";
        
[Description(@"Enter the name of zone or AirflowNetwork Node.")]
[JsonProperty(@"Enter the name of zone or AirflowNetwork Node.")]
public System.String NodeName { get; set; } = "";
        
[Description(@"Enter the name of an AirflowNetwork component. A component is one of the following AirflowNetwork:Distribution:Component objects: Leak, LeakageRatio, Duct, ConstantVolumeFan, Coil, TerminalUnit, ConstantPressureDrop, or HeatExchanger.")]
[JsonProperty(@"Enter the name of an AirflowNetwork component. A component is one of the following AirflowNetwork:Distribution:Component objects: Leak, LeakageRatio, Duct, ConstantVolumeFan, Coil, TerminalUnit, ConstantPressureDrop, or HeatExchanger.")]
public System.String ComponentName { get; set; } = "";
        
[Description(@"Only used if component = AirflowNetwork:Distribution:Component:Duct The zone name is where AirflowNetwork:Distribution:Component:Duct is exposed. Leave this field blank if the duct conduction loss is ignored.")]
[JsonProperty(@"Only used if component = AirflowNetwork:Distribution:Component:Duct The zone name is where AirflowNetwork:Distribution:Component:Duct is exposed. Leave this field blank if the duct conduction loss is ignored.")]
public System.String ThermalZoneName { get; set; } = "";
    }
    
    [Description("This object is used to allow user-defined view factors to be used for duct-surfac" +
        "e radiation calculations.")]
    [JsonObject("AirflowNetwork:Distribution:DuctViewFactors")]
    public class AirflowNetwork_Distribution_DuctViewFactors
    {
        
[JsonProperty(@"")]
public System.String LinkageName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DuctSurfaceExposureFraction { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single DuctSurfaceEmittance { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.String Surfaces { get; set; } = "";
    }
    
    [Description("This object is used to provide advanced thermal comfort control of window opening" +
        " and closing for both exterior and interior windows.")]
    [JsonObject("AirflowNetwork:OccupantVentilationControl")]
    public class AirflowNetwork_OccupantVentilationControl
    {
        
[JsonProperty(@"")]
public System.Single MinimumOpeningTime { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single MinimumClosingTime { get; set; } = 0;
        
[Description(@"Enter a curve name that represents thermal comfort temperature as a function of outdoor dry-bulb temperature. Up to two curves are allowed if the performance cannot be represented by a single curve. The following two fields are used if two curves are required.")]
[JsonProperty(@"Enter a curve name that represents thermal comfort temperature as a function of outdoor dry-bulb temperature. Up to two curves are allowed if the performance cannot be represented by a single curve. The following two fields are used if two curves are required.")]
public System.String ThermalComfortLowTemperatureCurveName { get; set; } = "";
        
[Description(@"This point is used to allow separate low and high thermal comfort temperature curves. If a single performance curve is used, leave this field blank.")]
[JsonProperty(@"This point is used to allow separate low and high thermal comfort temperature curves. If a single performance curve is used, leave this field blank.")]
public System.Single ThermalComfortTemperatureBoundaryPoint { get; set; } = 10;
        
[Description(@"Enter a curve name that represents thermal comfort temperature as a function of outdoor dry-bulb temperature. Up to two curves are allowed if the performance cannot be represented by a single curve. If a single performance curve is used, leave this field blank.")]
[JsonProperty(@"Enter a curve name that represents thermal comfort temperature as a function of outdoor dry-bulb temperature. Up to two curves are allowed if the performance cannot be represented by a single curve. If a single performance curve is used, leave this field blank.")]
public System.String ThermalComfortHighTemperatureCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MaximumThresholdForPersonsDissatisfiedPpd { get; set; } = 10;
        
[Description(@"If Yes, occupancy check will be performed as part of the opening probability check.")]
[JsonProperty(@"If Yes, occupancy check will be performed as part of the opening probability check.")]
public YesNoDefault OccupancyCheck { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"If this field is blank, the opening probability check is bypassed and opening is true.")]
[JsonProperty(@"If this field is blank, the opening probability check is bypassed and opening is true.")]
public System.String OpeningProbabilityScheduleName { get; set; } = "";
        
[Description(@"If this field is blank, the closing probability check is bypassed and closing is true.")]
[JsonProperty(@"If this field is blank, the closing probability check is bypassed and closing is true.")]
public System.String ClosingProbabilityScheduleName { get; set; } = "";
    }
    
    [Description("This object represents a node in a zone in the combination of RoomAir and Airflow" +
        "Network model.")]
    [JsonObject("AirflowNetwork:IntraZone:Node")]
    public class AirflowNetwork_IntraZone_Node
    {
        
[Description(@"Enter the name of a RoomAir:Node object defined in a RoomAirSettings:AirflowNetwork object.")]
[JsonProperty(@"Enter the name of a RoomAir:Node object defined in a RoomAirSettings:AirflowNetwork object.")]
public System.String RoomairNodeAirflownetworkName { get; set; } = "";
        
[Description(@"Enter the name of a zone object defined in a AirflowNetwork:MultiZone:Zone object.")]
[JsonProperty(@"Enter the name of a zone object defined in a AirflowNetwork:MultiZone:Zone object.")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Enter the reference height used to calculate the relative pressure")]
[JsonProperty(@"Enter the reference height used to calculate the relative pressure")]
public System.Single NodeHeight { get; set; } = 0;
    }
    
    [Description("This object defines the connection between two nodes and a component used in the " +
        "combination of RoomAir and AirflowNetwork model.")]
    [JsonObject("AirflowNetwork:IntraZone:Linkage")]
    public class AirflowNetwork_IntraZone_Linkage
    {
        
[Description(@"Enter the name of zone or AirflowNetwork Node.")]
[JsonProperty(@"Enter the name of zone or AirflowNetwork Node.")]
public System.String NodeName { get; set; } = "";
        
[Description(@"Enter the name of zone or AirflowNetwork Node.")]
[JsonProperty(@"Enter the name of zone or AirflowNetwork Node.")]
public System.String NodeName { get; set; } = "";
        
[Description(@"Enter the name of an AirflowNetwork component. A component is one of the following AirflowNetwork:Multizone:Component objects: AirflowNetwork:MultiZone:Surface:Crack, AirflowNetwork:MultiZone:Surface:EffectiveLeakageArea, If the next field is specified, this field can be either blank or ignored.")]
[JsonProperty(@"Enter the name of an AirflowNetwork component. A component is one of the following AirflowNetwork:Multizone:Component objects: AirflowNetwork:MultiZone:Surface:Crack, AirflowNetwork:MultiZone:Surface:EffectiveLeakageArea, If the next field is specified, this field can be either blank or ignored.")]
public System.String ComponentName { get; set; } = "";
        
[Description(@"Only used when one of two nodes defined above are not located in the same zone, and the input of the Component Name field in this object is ignored")]
[JsonProperty(@"Only used when one of two nodes defined above are not located in the same zone, and the input of the Component Name field in this object is ignored")]
public System.String AirflownetworkMultizoneSurfaceName { get; set; } = "";
    }
}
namespace EnergyPlus.Coils
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Chilled water cooling coil, NTU-effectiveness model, with inputs for design enter" +
        "ing and leaving conditions.")]
    [JsonObject("Coil:Cooling:Water")]
    public class Coil_Cooling_Water
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DesignWaterFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String DesignAirFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String DesignInletWaterTemperature { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String DesignInletAirTemperature { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String DesignOutletAirTemperature { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String DesignInletAirHumidityRatio { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String DesignOutletAirHumidityRatio { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String WaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault TypeOfAnalysis { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SimpleAnalysis");
        
[JsonProperty(@"")]
public YesNoDefault HeatExchangerConfiguration { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "CounterFlow");
        
[JsonProperty(@"")]
public System.String CondensateCollectionWaterStorageTankName { get; set; } = "";
        
[Description(@"This input field is optional. If specified, it is used for sizing the Design Water Flow Rate. If blank or omitted, the Loop Design Temperature Difference value specified in Sizing:Plant object is used for sizing the Design Water Flow Rate.")]
[JsonProperty(@"This input field is optional. If specified, it is used for sizing the Design Water Flow Rate. If blank or omitted, the Loop Design Temperature Difference value specified in Sizing:Plant object is used for sizing the Design Water Flow Rate.")]
public System.Single DesignWaterTemperatureDifference { get; set; } = ;
    }
    
    public enum TypeOfAnalysisType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DetailedAnalysis")]
        DetailedAnalysis = 1,
        
        [JsonProperty("SimpleAnalysis")]
        SimpleAnalysis = 2,
    }
    
    public enum HeatExchangerConfigurationType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CounterFlow")]
        CounterFlow = 1,
        
        [JsonProperty("CrossFlow")]
        CrossFlow = 2,
    }
    
    [Description("Chilled water cooling coil, detailed flat fin coil model for continuous plate fin" +
        "s, with inputs for detailed coil geometry specifications.")]
    [JsonObject("Coil:Cooling:Water:DetailedGeometry")]
    public class Coil_Cooling_Water_DetailedGeometry
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumWaterFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Tube Primary Surface Area")]
[JsonProperty(@"Tube Primary Surface Area")]
public System.String TubeOutsideSurfaceArea { get; set; } = (System.String)Autosize;
        
[Description(@"Total tube inside surface area")]
[JsonProperty(@"Total tube inside surface area")]
public System.String TotalTubeInsideArea { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String FinSurfaceArea { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String MinimumAirflowArea { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String CoilDepth { get; set; } = (System.String)Autosize;
        
[Description(@"Fin diameter or the coil height")]
[JsonProperty(@"Fin diameter or the coil height")]
public System.String FinDiameter { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single FinThickness { get; set; } = 0.0015;
        
[Description(@"Inner diameter of tubes")]
[JsonProperty(@"Inner diameter of tubes")]
public System.Single TubeInsideDiameter { get; set; } = 0.01445;
        
[Description(@"Outer diameter of tubes")]
[JsonProperty(@"Outer diameter of tubes")]
public System.Single TubeOutsideDiameter { get; set; } = 0.0159;
        
[JsonProperty(@"")]
public System.Single TubeThermalConductivity { get; set; } = 386;
        
[JsonProperty(@"")]
public System.Single FinThermalConductivity { get; set; } = 204;
        
[Description(@"Fin spacing or distance")]
[JsonProperty(@"Fin spacing or distance")]
public System.Single FinSpacing { get; set; } = 0.0018;
        
[JsonProperty(@"")]
public System.Single TubeDepthSpacing { get; set; } = 0.026;
        
[JsonProperty(@"")]
public System.Single NumberOfTubeRows { get; set; } = 4;
        
[JsonProperty(@"")]
public System.String NumberOfTubesPerRow { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String WaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondensateCollectionWaterStorageTankName { get; set; } = "";
        
[Description(@"This input field is optional. If specified, it is used for sizing the Design Water Flow Rate. If blank or omitted, the Loop Design Temperature Difference value specified in Sizing:Plant object is used for sizing the Design Water Flow Rate.")]
[JsonProperty(@"This input field is optional. If specified, it is used for sizing the Design Water Flow Rate. If blank or omitted, the Loop Design Temperature Difference value specified in Sizing:Plant object is used for sizing the Design Water Flow Rate.")]
public System.Single DesignWaterTemperatureDifference { get; set; } = ;
    }
    
    [Description(@"New general DX cooling coil supporting on or more speeds and one or or operating  modes. Includes DX evaporator coil, compressor, and condenser. Object is currently only supported by the AIRLOOPHVAC:UNITARYSYSTEM object. Remaining Coil:Cooling:DX* objects will be deprecated at a future date, after which, this object will replace all other Coil:Cooling:DX* objects.")]
    [JsonObject("Coil:Cooling:DX")]
    public class Coil_Cooling_DX
    {
        
[JsonProperty(@"")]
public System.String EvaporatorInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EvaporatorOutletNodeName { get; set; } = "";
        
[Description(@"Schedule value > 0 means the coil is available. If this field is blank, the coil is always available.")]
[JsonProperty(@"Schedule value > 0 means the coil is available. If this field is blank, the coil is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"This input field is name of a conditioned or unconditioned zone where the secondary coil (condenser) of a DX system or heat pump is to be placed. This is an optional input field specified only when the user desires to reject the condenser heat into a zone. The heat rejected is modeled as internal sensible heat gain of the zone.")]
[JsonProperty(@"This input field is name of a conditioned or unconditioned zone where the secondary coil (condenser) of a DX system or heat pump is to be placed. This is an optional input field specified only when the user desires to reject the condenser heat into a zone. The heat rejected is modeled as internal sensible heat gain of the zone.")]
public System.String CondenserZoneName { get; set; } = "";
        
[Description(@"This is the name of an air node in the simulation. This may be an explicitly defined outdoor air node, or it may be a separate air node.")]
[JsonProperty(@"This is the name of an air node in the simulation. This may be an explicitly defined outdoor air node, or it may be a separate air node.")]
public System.String CondenserInletNodeName { get; set; } = "";
        
[Description(@"This is the name of an air node in the simulation.")]
[JsonProperty(@"This is the name of an air node in the simulation.")]
public System.String CondenserOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PerformanceObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondensateCollectionWaterStorageTankName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EvaporativeCondenserSupplyWaterStorageTankName { get; set; } = "";
    }
    
    [Description("DX cooling coil performance specification referencing one or more operating modes" +
        ". Mode 1 is always the base design operating mode. Additional modes are optional" +
        " states such as subcool reheat for humidity control.")]
    [JsonObject("Coil:Cooling:DX:CurveFit:Performance")]
    public class Coil_Cooling_DX_CurveFit_Performance
    {
        
[JsonProperty(@"")]
public System.Single CrankcaseHeaterCapacity { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single MinimumOutdoorDryBulbTemperatureForCompressorOperation { get; set; } = -25;
        
[JsonProperty(@"")]
public System.Single MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation { get; set; } = 10;
        
[Description(@"Enter pressure drop for the unit containing the coil. This value is only used to calculate Energy Efficiency Ratio (EER), Integrated Energy Efficiency Ratio (IEER), and the Standard Rating (Net) Cooling Capacity. This value is not used for modeling the evaporator fan during simulations.")]
[JsonProperty(@"Enter pressure drop for the unit containing the coil. This value is only used to calculate Energy Efficiency Ratio (EER), Integrated Energy Efficiency Ratio (IEER), and the Standard Rating (Net) Cooling Capacity. This value is not used for modeling the evaporator fan during simulations.")]
public System.Single UnitInternalStaticAirPressure { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault CapacityControlMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Discrete");
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
public System.Single EvaporativeCondenserBasinHeaterCapacity { get; set; } = 0;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
public System.Single EvaporativeCondenserBasinHeaterSetpointTemperature { get; set; } = 2;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
public System.String EvaporativeCondenserBasinHeaterOperatingScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CompressorFuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Electricity");
        
[Description(@"Operating Mode 1 is always used as the base design operating mode.")]
[JsonProperty(@"Operating Mode 1 is always used as the base design operating mode.")]
public System.String BaseOperatingMode { get; set; } = "";
        
[Description(@"The alternative operating mode is used for enhanced dehumidification. If this is blank, the coil will always operate in the base operating mode. If an alternate mode is defined here, the coil will use the enhanced mode if activated by the parent system controls.")]
[JsonProperty(@"The alternative operating mode is used for enhanced dehumidification. If this is blank, the coil will always operate in the base operating mode. If an alternate mode is defined here, the coil will use the enhanced mode if activated by the parent system controls.")]
public System.String AlternativeOperatingMode { get; set; } = "";
        
[Description(@"The alternative operating mode is used for enhanced dehumidification. If this is blank, the coil will always operate in the base operating mode or Alternative Mode 1. If both Alternative Operating Mode 1 and Mode 2 are defined here, the coil will perform both Subcool and Reheat modes for enhanced dehumidification. Alternative Operating Mode 1 is used as Subcool mode, and Alternative Operating Mode 2 is used as Reheat mode.")]
[JsonProperty(@"The alternative operating mode is used for enhanced dehumidification. If this is blank, the coil will always operate in the base operating mode or Alternative Mode 1. If both Alternative Operating Mode 1 and Mode 2 are defined here, the coil will perform both Subcool and Reheat modes for enhanced dehumidification. Alternative Operating Mode 1 is used as Subcool mode, and Alternative Operating Mode 2 is used as Reheat mode.")]
public System.String AlternativeOperatingMode { get; set; } = "";
    }
    
    public enum CapacityControlMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Continuous")]
        Continuous = 1,
        
        [JsonProperty("Discrete")]
        Discrete = 2,
    }
    
    public enum CompressorFuelTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("Electricity")]
        Electricity = 2,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 3,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 4,
        
        [JsonProperty("Gasoline")]
        Gasoline = 5,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 6,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 7,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 8,
        
        [JsonProperty("Propane")]
        Propane = 9,
    }
    
    [Description("DX cooling coil performance for a single operating mode which may have one or mor" +
        "e speeds.")]
    [JsonObject("Coil:Cooling:DX:CurveFit:OperatingMode")]
    public class Coil_Cooling_DX_CurveFit_OperatingMode
    {
        
[Description(@"Total (sensible+latent) cooling capacity not accounting for the effect of supply air fan heat. Rating point: air entering the evaporator coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the condenser coil at 35 C dry-bulb/23.9 C wet-bulb. gross capacity excluding supply air fan heat")]
[JsonProperty(@"Total (sensible+latent) cooling capacity not accounting for the effect of supply air fan heat. Rating point: air entering the evaporator coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the condenser coil at 35 C dry-bulb/23.9 C wet-bulb. gross capacity excluding supply air fan heat")]
public System.String RatedGrossTotalCoolingCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Flow rate corresponding to rated total cooling capacity, Rated SHR and Rated COP. Should be between 0.00004027 m3/s and 0.00006041 m3/s per watt of rated total cooling capacity.")]
[JsonProperty(@"Flow rate corresponding to rated total cooling capacity, Rated SHR and Rated COP. Should be between 0.00004027 m3/s and 0.00006041 m3/s per watt of rated total cooling capacity.")]
public System.String RatedEvaporatorAirFlowRate { get; set; } = "";
        
[Description(@"Used to calculate evaporative condenser water use.")]
[JsonProperty(@"Used to calculate evaporative condenser water use.")]
public System.String RatedCondenserAirFlowRate { get; set; } = "";
        
[Description(@"The maximum on-off cycling Rate for the compressor, which occurs at 50% run time fraction. Suggested value is 3; zero value means latent degradation model is disabled.")]
[JsonProperty(@"The maximum on-off cycling Rate for the compressor, which occurs at 50% run time fraction. Suggested value is 3; zero value means latent degradation model is disabled.")]
public System.Single MaximumCyclingRate { get; set; } = 0;
        
[Description(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
[JsonProperty(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
public System.Single RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity { get; set; } = 0;
        
[Description(@"Time constant for the cooling coil's latent capacity to reach steady state after startup. Suggested value is 45; zero value means latent degradation model is disabled.")]
[JsonProperty(@"Time constant for the cooling coil's latent capacity to reach steady state after startup. Suggested value is 45; zero value means latent degradation model is disabled.")]
public System.Single LatentCapacityTimeConstant { get; set; } = 0;
        
[Description(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
[JsonProperty(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
public System.Single NominalTimeForCondensateRemovalToBegin { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault ApplyLatentDegradationToSpeedsGreaterThan { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AirCooled");
        
[Description(@"Rated power consumed by the evaporative condenser's water pump")]
[JsonProperty(@"Rated power consumed by the evaporative condenser's water pump")]
public System.String NominalEvaporativeCondenserPumpPower { get; set; } = (System.String)0;
        
[Description(@"Must be lower than or equal to the highest speed number. If blank, defaults to the highest speed number used.")]
[JsonProperty(@"Must be lower than or equal to the highest speed number. If blank, defaults to the highest speed number used.")]
public System.Single NominalSpeedNumber { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SpeedName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SpeedName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SpeedName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SpeedName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SpeedName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SpeedName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SpeedName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SpeedName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SpeedName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SpeedName { get; set; } = "";
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
    }
    
    [Description("DX cooling coil performance for a single speed within a single operating mode.")]
    [JsonObject("Coil:Cooling:DX:CurveFit:Speed")]
    public class Coil_Cooling_DX_CurveFit_Speed
    {
        
[Description(@"Ratio of capacity at this speed to the operating mode Rated Gross Total Cooling Capacity")]
[JsonProperty(@"Ratio of capacity at this speed to the operating mode Rated Gross Total Cooling Capacity")]
public System.Single GrossTotalCoolingCapacityFraction { get; set; } = ;
        
[Description(@"Ratio of capacity at this speed to the operating mode Rated Evaporator Air Flow Rate")]
[JsonProperty(@"Ratio of capacity at this speed to the operating mode Rated Evaporator Air Flow Rate")]
public System.Single EvaporatorAirFlowRateFraction { get; set; } = ;
        
[Description(@"Ratio of condenser air flow at this speed to the operating mode Rated Condenser Air Flow Rate")]
[JsonProperty(@"Ratio of condenser air flow at this speed to the operating mode Rated Condenser Air Flow Rate")]
public System.Single CondenserAirFlowRateFraction { get; set; } = ;
        
[Description(@"Rated sensible heat ratio (gross sensible capacity/gross total capacity) sensible and total capacities do not include supply fan heat")]
[JsonProperty(@"Rated sensible heat ratio (gross sensible capacity/gross total capacity) sensible and total capacities do not include supply fan heat")]
public System.String GrossSensibleHeatRatio { get; set; } = (System.String)Autosize;
        
[Description(@"Gross cooling capacity divided by power input to the compressor and condenser fan. Does not include supply fan heat or supply fan electrical energy input.")]
[JsonProperty(@"Gross cooling capacity divided by power input to the compressor and condenser fan. Does not include supply fan heat or supply fan electrical energy input.")]
public System.Single GrossCoolingCop { get; set; } = 3;
        
[Description(@"The fraction of the cooling coil face which is actively cooled at this speed. For non-split-face coils, this should be 1.0.")]
[JsonProperty(@"The fraction of the cooling coil face which is actively cooled at this speed. For non-split-face coils, this should be 1.0.")]
public System.Single ActiveFractionOfCoilFaceArea { get; set; } = 1;
        
[Description(@"Enter the evaporator fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on total cooling capacity. This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file. This value is not used for modeling the evaporator fan during simulations.")]
[JsonProperty(@"Enter the evaporator fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on total cooling capacity. This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file. This value is not used for modeling the evaporator fan during simulations.")]
public System.Single RatedEvaporatorFanPowerPerVolumeFlowRate { get; set; } = 773.3;
        
[Description(@"Ratio of evaporative condenser pump power at this speed to the operating mode Nominal Evaporative Condenser Pump Power")]
[JsonProperty(@"Ratio of evaporative condenser pump power at this speed to the operating mode Nominal Evaporative Condenser Pump Power")]
public System.Single EvaporativeCondenserPumpPowerFraction { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single EvaporativeCondenserEffectiveness { get; set; } = 0.9;
        
[Description(@"biquadratic curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb quadratic curve = a + b*edb + c*edb**2 wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty(@"biquadratic curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb quadratic curve = a + b*edb + c*edb**2 wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
public System.String TotalCoolingCapacityModifierFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load flow")]
public System.String TotalCoolingCapacityModifierFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
public System.String EnergyInputRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load flow")]
public System.String EnergyInputRatioModifierFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (cooling load/steady state capacity)")]
[JsonProperty(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (cooling load/steady state capacity)")]
public System.String PartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"Recoverable waste heat at full load and rated conditions")]
[JsonProperty(@"Recoverable waste heat at full load and rated conditions")]
public System.Single RatedWasteHeatFractionOfPowerInput { get; set; } = 0.2;
        
[Description(@"curve = a + b*cdb + c*cdb**2 + d*edb + e*edb**2 + f*cdb*edb cdb = entering condenser dry-bulb temperature (C) edb = entering coil dry-bulb temperature (C)")]
[JsonProperty(@"curve = a + b*cdb + c*cdb**2 + d*edb + e*edb**2 + f*cdb*edb cdb = entering condenser dry-bulb temperature (C) edb = entering coil dry-bulb temperature (C)")]
public System.String WasteHeatModifierFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the DX cooling coil (C) db = entering dry-bulb temperature seen by the DX cooling coil (C) entering temperature can be outside air or pretreated air. If this curve is used and the Sensible Heat Ratio Modifier Function of Flow Fraction (SHRFFF) Curve Name is blank, the SHRFFF is assumed to be a constant value of 1.0.")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the DX cooling coil (C) db = entering dry-bulb temperature seen by the DX cooling coil (C) entering temperature can be outside air or pretreated air. If this curve is used and the Sensible Heat Ratio Modifier Function of Flow Fraction (SHRFFF) Curve Name is blank, the SHRFFF is assumed to be a constant value of 1.0.")]
public System.String SensibleHeatRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow If this curve is used and the Sensible Heat Ratio Modifier Function of Temperature Curve Name (SHRFT) Curve Name is blank, the SHRFT is assumed to be a constant value of 1.0.")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow If this curve is used and the Sensible Heat Ratio Modifier Function of Temperature Curve Name (SHRFT) Curve Name is blank, the SHRFT is assumed to be a constant value of 1.0.")]
public System.String SensibleHeatRatioModifierFunctionOfFlowFractionCurveName { get; set; } = "";
    }
    
    [Description("Direct expansion (DX) cooling coil and condensing unit (includes electric compres" +
        "sor and condenser fan), single-speed. Optional inputs for moisture evaporation f" +
        "rom wet coil when compressor cycles off with continuous fan operation.")]
    [JsonObject("Coil:Cooling:DX:SingleSpeed")]
    public class Coil_Cooling_DX_SingleSpeed
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
public System.String GrossRatedTotalCoolingCapacity { get; set; } = "";
        
[Description(@"Rated sensible heat ratio (gross sensible capacity/gross total capacity) sensible and total capacities do not include supply fan heat")]
[JsonProperty(@"Rated sensible heat ratio (gross sensible capacity/gross total capacity) sensible and total capacities do not include supply fan heat")]
public System.String GrossRatedSensibleHeatRatio { get; set; } = "";
        
[Description(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
public System.Single GrossRatedCoolingCop { get; set; } = 3;
        
[Description(@"Flow rate corresponding to rated total cooling capacity, Rated SHR and Rated COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity")]
[JsonProperty(@"Flow rate corresponding to rated total cooling capacity, Rated SHR and Rated COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity")]
public System.String RatedAirFlowRate { get; set; } = "";
        
[Description(@"Enter the evaporator fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on total cooling capacity. This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), Energy Efficiency Ratio (EER), Integrated Energy Efficiency Ratio (IEER), and the Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file. This value is not used for modeling the evaporator fan during simulations.")]
[JsonProperty(@"Enter the evaporator fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on total cooling capacity. This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), Energy Efficiency Ratio (EER), Integrated Energy Efficiency Ratio (IEER), and the Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file. This value is not used for modeling the evaporator fan during simulations.")]
public System.Single RatedEvaporatorFanPowerPerVolumeFlowRate { get; set; } = 773.3;
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
public System.String TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load flow")]
public System.String TotalCoolingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
public System.String EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load flow")]
public System.String EnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (cooling load/steady state capacity)")]
[JsonProperty(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (cooling load/steady state capacity)")]
public System.String PartLoadFractionCorrelationCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumOutdoorDryBulbTemperatureForCompressorOperation { get; set; } = -25;
        
[Description(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
[JsonProperty(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
public System.Single NominalTimeForCondensateRemovalToBegin { get; set; } = 0;
        
[Description(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
[JsonProperty(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
public System.Single RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity { get; set; } = 0;
        
[Description(@"The maximum on-off cycling Rate for the compressor, which occurs at 50% run time fraction. Suggested value is 3; zero value means latent degradation model is disabled.")]
[JsonProperty(@"The maximum on-off cycling Rate for the compressor, which occurs at 50% run time fraction. Suggested value is 3; zero value means latent degradation model is disabled.")]
public System.Single MaximumCyclingRate { get; set; } = 0;
        
[Description(@"Time constant for the cooling coil's latent capacity to reach steady state after startup. Suggested value is 45; zero value means latent degradation model is disabled.")]
[JsonProperty(@"Time constant for the cooling coil's latent capacity to reach steady state after startup. Suggested value is 45; zero value means latent degradation model is disabled.")]
public System.Single LatentCapacityTimeConstant { get; set; } = 0;
        
[Description(@"Enter the name of an outdoor air node. This node name is also specified in an OutdoorAir:Node or OutdoorAir:NodeList object.")]
[JsonProperty(@"Enter the name of an outdoor air node. This node name is also specified in an OutdoorAir:Node or OutdoorAir:NodeList object.")]
public System.String CondenserAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AirCooled");
        
[JsonProperty(@"")]
public System.Single EvaporativeCondenserEffectiveness { get; set; } = 0.9;
        
[Description(@"Used to calculate evaporative condenser water use")]
[JsonProperty(@"Used to calculate evaporative condenser water use")]
public System.String EvaporativeCondenserAirFlowRate { get; set; } = "";
        
[Description(@"Rated power consumed by the evaporative condenser's water pump")]
[JsonProperty(@"Rated power consumed by the evaporative condenser's water pump")]
public System.String EvaporativeCondenserPumpRatedPowerConsumption { get; set; } = (System.String)0;
        
[JsonProperty(@"")]
public System.Single CrankcaseHeaterCapacity { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation { get; set; } = 10;
        
[JsonProperty(@"")]
public System.String SupplyWaterStorageTankName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondensateCollectionWaterStorageTankName { get; set; } = "";
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
public System.Single BasinHeaterCapacity { get; set; } = 0;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
public System.Single BasinHeaterSetpointTemperature { get; set; } = 2;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
public System.String BasinHeaterOperatingScheduleName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the DX cooling coil (C) db = entering dry-bulb temperature seen by the DX cooling coil (C) entering temperature can be outside air or pretreated air.")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the DX cooling coil (C) db = entering dry-bulb temperature seen by the DX cooling coil (C) entering temperature can be outside air or pretreated air.")]
public System.String SensibleHeatRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String SensibleHeatRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"when this input field is specified as Yes then the program calculates the net cooling capacity and total electric power input of DX cooling coils per ANSI/ASHRAE 127.")]
[JsonProperty(@"when this input field is specified as Yes then the program calculates the net cooling capacity and total electric power input of DX cooling coils per ANSI/ASHRAE 127.")]
public YesNoDefault ReportAshraeStandardPerformanceRatings { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"This input field is name of a conditioned or unconditioned zone where the secondary coil (condenser) of DX system or a heat pump is to be placed. This is an optional input field specified only when user desires to reject the condenser heat into a zone. The heat rejected is modelled as internal sensible heat gain of the zone.")]
[JsonProperty(@"This input field is name of a conditioned or unconditioned zone where the secondary coil (condenser) of DX system or a heat pump is to be placed. This is an optional input field specified only when user desires to reject the condenser heat into a zone. The heat rejected is modelled as internal sensible heat gain of the zone.")]
public System.String ZoneNameForCondenserPlacement { get; set; } = "";
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
    }
    
    [Description(@"Direct expansion (DX) cooling coil and condensing unit (includes electric compressor and condenser fan), two-speed (or variable-speed). Requires two sets of performance data and will interpolate between speeds. Modeled as a single coil (multi-speed compressor or multiple compressors with row split or intertwined coil).")]
    [JsonObject("Coil:Cooling:DX:TwoSpeed")]
    public class Coil_Cooling_DX_TwoSpeed
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
public System.String HighSpeedGrossRatedTotalCoolingCapacity { get; set; } = "";
        
[Description(@"Rated sensible heat ratio (gross sensible capacity/gross total capacity) sensible and total capacities do not include supply fan heat")]
[JsonProperty(@"Rated sensible heat ratio (gross sensible capacity/gross total capacity) sensible and total capacities do not include supply fan heat")]
public System.String HighSpeedRatedSensibleHeatRatio { get; set; } = "";
        
[Description(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
public System.Single HighSpeedGrossRatedCoolingCop { get; set; } = 3;
        
[Description(@"Flow rate corresponding to rated total cooling capacity, Rated SHR and Rated COP. Should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity.")]
[JsonProperty(@"Flow rate corresponding to rated total cooling capacity, Rated SHR and Rated COP. Should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity.")]
public System.String HighSpeedRatedAirFlowRate { get; set; } = "";
        
[Description(@"Enter pressure drop for the unit containing the coil. This value is only used to calculate Energy Efficiency Ratio (EER), Integrated Energy Efficiency Ratio (IEER), and the Standard Rating (Net) Cooling Capacity. This value is not used for modeling the evaporator fan during simulations.")]
[JsonProperty(@"Enter pressure drop for the unit containing the coil. This value is only used to calculate Energy Efficiency Ratio (EER), Integrated Energy Efficiency Ratio (IEER), and the Standard Rating (Net) Cooling Capacity. This value is not used for modeling the evaporator fan during simulations.")]
public System.Single UnitInternalStaticAirPressure { get; set; } = ;
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
public System.String TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String TotalCoolingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
public System.String EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String EnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (cooling load/steady state capacity)")]
[JsonProperty(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (cooling load/steady state capacity)")]
public System.String PartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
public System.String LowSpeedGrossRatedTotalCoolingCapacity { get; set; } = "";
        
[Description(@"Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity) sensible and total capacities do not include supply fan heat")]
[JsonProperty(@"Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity) sensible and total capacities do not include supply fan heat")]
public System.String LowSpeedGrossRatedSensibleHeatRatio { get; set; } = "";
        
[Description(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
public System.Single LowSpeedGrossRatedCoolingCop { get; set; } = 3;
        
[Description(@"Flow rate corresponding to rated total cooling capacity, Rated SHR and Rated COP. Should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity.")]
[JsonProperty(@"Flow rate corresponding to rated total cooling capacity, Rated SHR and Rated COP. Should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity.")]
public System.String LowSpeedRatedAirFlowRate { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
public System.String LowSpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
public System.String LowSpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Enter the name of an outdoor air node. This node name is also specified in an OutdoorAir:Node or OutdoorAir:NodeList object.")]
[JsonProperty(@"Enter the name of an outdoor air node. This node name is also specified in an OutdoorAir:Node or OutdoorAir:NodeList object.")]
public System.String CondenserAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AirCooled");
        
[JsonProperty(@"")]
public System.Single MinimumOutdoorDryBulbTemperatureForCompressorOperation { get; set; } = -25;
        
[JsonProperty(@"")]
public System.Single HighSpeedEvaporativeCondenserEffectiveness { get; set; } = 0.9;
        
[Description(@"Used to calculate evaporative condenser water use")]
[JsonProperty(@"Used to calculate evaporative condenser water use")]
public System.String HighSpeedEvaporativeCondenserAirFlowRate { get; set; } = "";
        
[Description(@"Rated power consumed by the evaporative condenser's water pump at high speed")]
[JsonProperty(@"Rated power consumed by the evaporative condenser's water pump at high speed")]
public System.String HighSpeedEvaporativeCondenserPumpRatedPowerConsumption { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LowSpeedEvaporativeCondenserEffectiveness { get; set; } = 0.9;
        
[Description(@"Used to calculate evaporative condenser water use")]
[JsonProperty(@"Used to calculate evaporative condenser water use")]
public System.String LowSpeedEvaporativeCondenserAirFlowRate { get; set; } = "";
        
[Description(@"Rated power consumed by the evaporative condenser's water pump at low speed")]
[JsonProperty(@"Rated power consumed by the evaporative condenser's water pump at low speed")]
public System.String LowSpeedEvaporativeCondenserPumpRatedPowerConsumption { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SupplyWaterStorageTankName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondensateCollectionWaterStorageTankName { get; set; } = "";
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
public System.Single BasinHeaterCapacity { get; set; } = 0;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
public System.Single BasinHeaterSetpointTemperature { get; set; } = 2;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
public System.String BasinHeaterOperatingScheduleName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the DX cooling coil (C) db = entering dry-bulb temperature seen by the DX cooling coil (C) entering temperature can be outside air or pretreated air.")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the DX cooling coil (C) db = entering dry-bulb temperature seen by the DX cooling coil (C) entering temperature can be outside air or pretreated air.")]
public System.String SensibleHeatRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String SensibleHeatRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the DX cooling coil (C) db = entering dry-bulb temperature seen by the DX cooling coil (C) entering temperature can be outside air or pretreated air.")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the DX cooling coil (C) db = entering dry-bulb temperature seen by the DX cooling coil (C) entering temperature can be outside air or pretreated air.")]
public System.String LowSpeedSensibleHeatRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String LowSpeedSensibleHeatRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"This input field is name of a conditioned or unconditioned zone where the secondary coil (condenser) of DX system or a heat pump is to be placed. This is an optional input field specified only when user desires to reject the condenser heat into a zone. The heat rejected is modelled as internal sensible heat gain of the zone.")]
[JsonProperty(@"This input field is name of a conditioned or unconditioned zone where the secondary coil (condenser) of DX system or a heat pump is to be placed. This is an optional input field specified only when user desires to reject the condenser heat into a zone. The heat rejected is modelled as internal sensible heat gain of the zone.")]
public System.String ZoneNameForCondenserPlacement { get; set; } = "";
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
    }
    
    [Description(@"Direct expansion (DX) cooling coil and condensing unit (includes electric or engine-driven compressor and condenser fan), multi-speed (or variable-speed). Optional moisture evaporation from wet coil when compressor cycles off with continuous fan operation. Requires two to four sets of performance data and will interpolate between speeds. Modeled as a single coil (multi-speed compressor or multiple compressors with row split or intertwined coil).")]
    [JsonObject("Coil:Cooling:DX:MultiSpeed")]
    public class Coil_Cooling_DX_MultiSpeed
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Enter the name of an outdoor air node. This node name is also specified in an OutdoorAir:Node or OutdoorAir:NodeList object.")]
[JsonProperty(@"Enter the name of an outdoor air node. This node name is also specified in an OutdoorAir:Node or OutdoorAir:NodeList object.")]
public System.String CondenserAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AirCooled");
        
[JsonProperty(@"")]
public System.Single MinimumOutdoorDryBulbTemperatureForCompressorOperation { get; set; } = -25;
        
[JsonProperty(@"")]
public System.String SupplyWaterStorageTankName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondensateCollectionWaterStorageTankName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ApplyPartLoadFractionToSpeedsGreaterThan { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public YesNoDefault ApplyLatentDegradationToSpeedsGreaterThan { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public System.Single CrankcaseHeaterCapacity { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation { get; set; } = 10;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
public System.Single BasinHeaterCapacity { get; set; } = 0;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
public System.Single BasinHeaterSetpointTemperature { get; set; } = 2;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
public System.String BasinHeaterOperatingScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the number of the following sets of data for coil capacity, SHR, COP, flow rate, and associated curves.")]
[JsonProperty(@"Enter the number of the following sets of data for coil capacity, SHR, COP, flow rate, and associated curves.")]
public System.Single NumberOfSpeeds { get; set; } = ;
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat Gross capacity excluding supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb Speed 1 is defined as low speed")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat Gross capacity excluding supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb Speed 1 is defined as low speed")]
public System.String SpeedGrossRatedTotalCoolingCapacity { get; set; } = "";
        
[Description(@"Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity) Sensible and total capacities do not include supply fan heat")]
[JsonProperty(@"Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity) Sensible and total capacities do not include supply fan heat")]
public System.String SpeedGrossRatedSensibleHeatRatio { get; set; } = "";
        
[Description(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
public System.Single SpeedGrossRatedCoolingCop { get; set; } = 3;
        
[Description(@"Flow rate corresponding to rated total cooling capacity, rated SHR and rated COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity")]
[JsonProperty(@"Flow rate corresponding to rated total cooling capacity, rated SHR and rated COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity")]
public System.String SpeedRatedAirFlowRate { get; set; } = "";
        
[Description(@"Enter the evaporator fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on total cooling capacity. This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file. This value is not used for modeling the evaporator fan during simulations.")]
[JsonProperty(@"Enter the evaporator fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on total cooling capacity. This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file. This value is not used for modeling the evaporator fan during simulations.")]
public System.Single SpeedRatedEvaporatorFanPowerPerVolumeFlowRate { get; set; } = 773.3;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load Flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String SpeedEnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (cooling load/steady state capacity)")]
[JsonProperty(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (cooling load/steady state capacity)")]
public System.String SpeedPartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
[JsonProperty(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
public System.Single SpeedNominalTimeForCondensateRemovalToBegin { get; set; } = 0;
        
[Description(@"Ratio of the initial moisture evaporation Rate from the Cooling Coil (when the compressor first turns off) and the Coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
[JsonProperty(@"Ratio of the initial moisture evaporation Rate from the Cooling Coil (when the compressor first turns off) and the Coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
public System.Single SpeedRatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity { get; set; } = 0;
        
[Description(@"The maximum on-off cycling rate for the compressor, which occurs at 50% run time fraction. Suggested value is 3; zero value means latent degradation model is disabled.")]
[JsonProperty(@"The maximum on-off cycling rate for the compressor, which occurs at 50% run time fraction. Suggested value is 3; zero value means latent degradation model is disabled.")]
public System.Single SpeedMaximumCyclingRate { get; set; } = 0;
        
[Description(@"Time constant for the cooling coil's latent capacity to reach steady state after startup. Suggested value is 45; zero value means latent degradation model is disabled.")]
[JsonProperty(@"Time constant for the cooling coil's latent capacity to reach steady state after startup. Suggested value is 45; zero value means latent degradation model is disabled.")]
public System.Single SpeedLatentCapacityTimeConstant { get; set; } = 0;
        
[Description(@"Recoverable waste heat at full load and rated conditions")]
[JsonProperty(@"Recoverable waste heat at full load and rated conditions")]
public System.Single SpeedRatedWasteHeatFractionOfPowerInput { get; set; } = 0.2;
        
[Description(@"curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bulb temperature (C) db = entering coil dry-bulb temperature (C)")]
[JsonProperty(@"curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bulb temperature (C) db = entering coil dry-bulb temperature (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedEvaporativeCondenserEffectiveness { get; set; } = 0.9;
        
[Description(@"Used to calculate evaporative condenser water use")]
[JsonProperty(@"Used to calculate evaporative condenser water use")]
public System.String SpeedEvaporativeCondenserAirFlowRate { get; set; } = "";
        
[Description(@"Rated power consumed by the evaporative condenser's water pump at high speed")]
[JsonProperty(@"Rated power consumed by the evaporative condenser's water pump at high speed")]
public System.String SpeedRatedEvaporativeCondenserPumpPowerConsumption { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat Gross capacity excluding supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat Gross capacity excluding supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
public System.String SpeedGrossRatedTotalCoolingCapacity { get; set; } = "";
        
[Description(@"Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity) Sensible and total capacities do not include supply fan heat")]
[JsonProperty(@"Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity) Sensible and total capacities do not include supply fan heat")]
public System.String SpeedGrossRatedSensibleHeatRatio { get; set; } = "";
        
[Description(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
public System.Single SpeedGrossRatedCoolingCop { get; set; } = 3;
        
[Description(@"Flow rate corresponding to rated total cooling capacity, rated SHR and rated COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity for Speed 2.")]
[JsonProperty(@"Flow rate corresponding to rated total cooling capacity, rated SHR and rated COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity for Speed 2.")]
public System.String SpeedRatedAirFlowRate { get; set; } = "";
        
[Description(@"Enter the evaporator fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on total cooling capacity. This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file. This value is not used for modeling the evaporator fan during simulations.")]
[JsonProperty(@"Enter the evaporator fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on total cooling capacity. This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file. This value is not used for modeling the evaporator fan during simulations.")]
public System.Single SpeedRatedEvaporatorFanPowerPerVolumeFlowRate { get; set; } = 773.3;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load Flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load Flow")]
public System.String SpeedEnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (Cooling load/steady state capacity)")]
[JsonProperty(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (Cooling load/steady state capacity)")]
public System.String SpeedPartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
[JsonProperty(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
public System.Single SpeedNominalTimeForCondensateRemovalToBegin { get; set; } = 0;
        
[Description(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
[JsonProperty(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
public System.Single SpeedRatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity { get; set; } = 0;
        
[Description(@"The maximum on-off cycling rate for the compressor, which occurs at 50% run time fraction. Suggested value is 3; zero value means latent degradation model is disabled.")]
[JsonProperty(@"The maximum on-off cycling rate for the compressor, which occurs at 50% run time fraction. Suggested value is 3; zero value means latent degradation model is disabled.")]
public System.Single SpeedMaximumCyclingRate { get; set; } = 0;
        
[Description(@"Time constant for the cooling coil's latent capacity to reach steady state after startup. Suggested value is 45; zero value means latent degradation model is disabled.")]
[JsonProperty(@"Time constant for the cooling coil's latent capacity to reach steady state after startup. Suggested value is 45; zero value means latent degradation model is disabled.")]
public System.Single SpeedLatentCapacityTimeConstant { get; set; } = 0;
        
[Description(@"Recoverable waste heat at full load and rated conditions")]
[JsonProperty(@"Recoverable waste heat at full load and rated conditions")]
public System.Single SpeedRatedWasteHeatFractionOfPowerInput { get; set; } = 0.2;
        
[Description(@"curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bulb temperature (C) db = entering coil dry-bulb temperature (C)")]
[JsonProperty(@"curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bulb temperature (C) db = entering coil dry-bulb temperature (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedEvaporativeCondenserEffectiveness { get; set; } = 0.9;
        
[Description(@"Used to calculate evaporative condenser water use")]
[JsonProperty(@"Used to calculate evaporative condenser water use")]
public System.String SpeedEvaporativeCondenserAirFlowRate { get; set; } = "";
        
[Description(@"Rated power consumed by the evaporative condenser's water pump at low speed")]
[JsonProperty(@"Rated power consumed by the evaporative condenser's water pump at low speed")]
public System.String SpeedRatedEvaporativeCondenserPumpPowerConsumption { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat Gross capacity excluding supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat Gross capacity excluding supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
public System.String SpeedGrossRatedTotalCoolingCapacity { get; set; } = "";
        
[Description(@"Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity) Sensible and total capacities do not include supply fan heat")]
[JsonProperty(@"Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity) Sensible and total capacities do not include supply fan heat")]
public System.String SpeedGrossRatedSensibleHeatRatio { get; set; } = "";
        
[Description(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
public System.Single SpeedGrossRatedCoolingCop { get; set; } = 3;
        
[Description(@"Flow rate corresponding to rated total cooling capacity, rated SHR and rated COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity for Speed 3.")]
[JsonProperty(@"Flow rate corresponding to rated total cooling capacity, rated SHR and rated COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity for Speed 3.")]
public System.String SpeedRatedAirFlowRate { get; set; } = "";
        
[Description(@"Enter the evaporator fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on total cooling capacity. This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file. This value is not used for modeling the evaporator fan during simulations.")]
[JsonProperty(@"Enter the evaporator fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on total cooling capacity. This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file. This value is not used for modeling the evaporator fan during simulations.")]
public System.Single SpeedRatedEvaporatorFanPowerPerVolumeFlowRate { get; set; } = 773.3;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String SpeedEnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (Cooling load/steady state capacity)")]
[JsonProperty(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (Cooling load/steady state capacity)")]
public System.String SpeedPartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
[JsonProperty(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
public System.Single SpeedNominalTimeForCondensateRemovalToBegin { get; set; } = 0;
        
[Description(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
[JsonProperty(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
public System.Single SpeedRatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity { get; set; } = 0;
        
[Description(@"The maximum on-off cycling rate for the compressor, which occurs at 50% run time fraction. Suggested value is 3; zero value means latent degradation model is disabled.")]
[JsonProperty(@"The maximum on-off cycling rate for the compressor, which occurs at 50% run time fraction. Suggested value is 3; zero value means latent degradation model is disabled.")]
public System.Single SpeedMaximumCyclingRate { get; set; } = 0;
        
[Description(@"Time constant for the cooling coil's latent capacity to reach steady state after startup. Suggested value is 45; zero value means latent degradation model is disabled.")]
[JsonProperty(@"Time constant for the cooling coil's latent capacity to reach steady state after startup. Suggested value is 45; zero value means latent degradation model is disabled.")]
public System.Single SpeedLatentCapacityTimeConstant { get; set; } = 0;
        
[Description(@"Recoverable waste heat at full load and rated conditions")]
[JsonProperty(@"Recoverable waste heat at full load and rated conditions")]
public System.Single SpeedRatedWasteHeatFractionOfPowerInput { get; set; } = 0.2;
        
[Description(@"curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bulb temperature (C) db = entering coil dry-bulb temperature (C)")]
[JsonProperty(@"curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bulb temperature (C) db = entering coil dry-bulb temperature (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedEvaporativeCondenserEffectiveness { get; set; } = 0.9;
        
[Description(@"Used to calculate evaporative condenser water use")]
[JsonProperty(@"Used to calculate evaporative condenser water use")]
public System.String SpeedEvaporativeCondenserAirFlowRate { get; set; } = "";
        
[Description(@"Rated power consumed by the evaporative condenser's water pump at Low speed")]
[JsonProperty(@"Rated power consumed by the evaporative condenser's water pump at Low speed")]
public System.String SpeedRatedEvaporativeCondenserPumpPowerConsumption { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat Gross capacity excluding supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat Gross capacity excluding supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
public System.String SpeedGrossRatedTotalCoolingCapacity { get; set; } = "";
        
[Description(@"Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity) Sensible and total capacities do not include supply fan heat")]
[JsonProperty(@"Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity) Sensible and total capacities do not include supply fan heat")]
public System.String SpeedGrossRatedSensibleHeatRatio { get; set; } = "";
        
[Description(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
public System.Single SpeedGrossRatedCoolingCop { get; set; } = 3;
        
[Description(@"Flow rate corresponding to rated total cooling capacity, rated SHR and rated COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity for Speed 4")]
[JsonProperty(@"Flow rate corresponding to rated total cooling capacity, rated SHR and rated COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity for Speed 4")]
public System.String SpeedRatedAirFlowRate { get; set; } = "";
        
[Description(@"Enter the evaporator fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on total cooling capacity. This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file. This value is not used for modeling the evaporator fan during simulations.")]
[JsonProperty(@"Enter the evaporator fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on total cooling capacity. This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file. This value is not used for modeling the evaporator fan during simulations.")]
public System.Single SpeedRatedEvaporatorFanPowerPerVolumeFlowRate { get; set; } = 773.3;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String SpeedEnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (cooling load/steady state capacity)")]
[JsonProperty(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (cooling load/steady state capacity)")]
public System.String SpeedPartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
[JsonProperty(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
public System.Single SpeedNominalTimeForCondensateRemovalToBegin { get; set; } = 0;
        
[Description(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
[JsonProperty(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
public System.Single SpeedRatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity { get; set; } = 0;
        
[Description(@"The maximum on-off cycling rate for the compressor, which occurs at 50% run time fraction. Suggested value is 3; zero value means latent degradation model is disabled.")]
[JsonProperty(@"The maximum on-off cycling rate for the compressor, which occurs at 50% run time fraction. Suggested value is 3; zero value means latent degradation model is disabled.")]
public System.Single SpeedMaximumCyclingRate { get; set; } = 0;
        
[Description(@"Time constant for the cooling coil's latent capacity to reach steady state after startup. Suggested value is 45; zero value means latent degradation model is disabled.")]
[JsonProperty(@"Time constant for the cooling coil's latent capacity to reach steady state after startup. Suggested value is 45; zero value means latent degradation model is disabled.")]
public System.Single SpeedLatentCapacityTimeConstant { get; set; } = 0;
        
[Description(@"Recoverable waste heat at full load and rated conditions")]
[JsonProperty(@"Recoverable waste heat at full load and rated conditions")]
public System.Single SpeedRatedWasteHeatFractionOfPowerInput { get; set; } = 0.2;
        
[Description(@"curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bulb temperature (C) db = entering coil dry-bulb temperature (C)")]
[JsonProperty(@"curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bulb temperature (C) db = entering coil dry-bulb temperature (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedEvaporativeCondenserEffectiveness { get; set; } = 0.9;
        
[Description(@"Used to calculate evaporative condenser water use")]
[JsonProperty(@"Used to calculate evaporative condenser water use")]
public System.String SpeedEvaporativeCondenserAirFlowRate { get; set; } = "";
        
[Description(@"Rated power consumed by the evaporative condenser's water pump at Speed 4")]
[JsonProperty(@"Rated power consumed by the evaporative condenser's water pump at Speed 4")]
public System.String SpeedRatedEvaporativeCondenserPumpPowerConsumption { get; set; } = "";
        
[Description(@"This input field is name of a conditioned or unconditioned zone where the secondary coil (condenser) of DX system or a heat pump is to be placed. This is an optional input field specified only when user desires to reject the condenser heat into a zone. The heat rejected is modelled as internal sensible heat gain of the zone.")]
[JsonProperty(@"This input field is name of a conditioned or unconditioned zone where the secondary coil (condenser) of DX system or a heat pump is to be placed. This is an optional input field specified only when user desires to reject the condenser heat into a zone. The heat rejected is modelled as internal sensible heat gain of the zone.")]
public System.String ZoneNameForCondenserPlacement { get; set; } = "";
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
    }
    
    public enum FuelTypeType
    {
        
        [JsonProperty("Diesel")]
        Diesel = 0,
        
        [JsonProperty("Electricity")]
        Electricity = 1,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 2,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 3,
        
        [JsonProperty("Gasoline")]
        Gasoline = 4,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 5,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 6,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 7,
        
        [JsonProperty("Propane")]
        Propane = 8,
    }
    
    [Description(@"Direct expansion (DX) cooling coil and condensing unit (includes electric compressor and condenser fan), variable-speed. Optional inputs for moisture evaporation from wet coil when compressor cycles off with continuous fan operation. Requires two to ten sets of performance data and will interpolate between speeds. Modeled as a single coil with variable-speed compressor.")]
    [JsonObject("Coil:Cooling:DX:VariableSpeed")]
    public class Coil_Cooling_DX_VariableSpeed
    {
        
[JsonProperty(@"")]
public System.String IndoorAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String IndoorAirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfSpeeds { get; set; } = 2;
        
[Description(@"must be lower than or equal to the highest speed number")]
[JsonProperty(@"must be lower than or equal to the highest speed number")]
public System.Single NominalSpeedLevel { get; set; } = 2;
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.String GrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String RatedAirFlowRateAtSelectedNominalSpeedLevel { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single NominalTimeForCondensateToBeginLeavingTheCoil { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single InitialMoistureEvaporationRateDividedBySteadyStateAcLatentCapacity { get; set; } = 0;
        
[Description(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (cooling load/steady state capacity)")]
[JsonProperty(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (cooling load/steady state capacity)")]
public System.String EnergyPartLoadFractionCurveName { get; set; } = "";
        
[Description(@"Enter the name of an outdoor air node. This node name is also specified in an OutdoorAir:Node or OutdoorAir:NodeList object.")]
[JsonProperty(@"Enter the name of an outdoor air node. This node name is also specified in an OutdoorAir:Node or OutdoorAir:NodeList object.")]
public System.String CondenserAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AirCooled");
        
[Description(@"Rated power consumed by the evaporative condenser's water pump")]
[JsonProperty(@"Rated power consumed by the evaporative condenser's water pump")]
public System.String EvaporativeCondenserPumpRatedPowerConsumption { get; set; } = (System.String)0;
        
[JsonProperty(@"")]
public System.Single CrankcaseHeaterCapacity { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation { get; set; } = 10;
        
[JsonProperty(@"")]
public System.Single MinimumOutdoorDryBulbTemperatureForCompressorOperation { get; set; } = -25;
        
[JsonProperty(@"")]
public System.String SupplyWaterStorageTankName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondensateCollectionWaterStorageTankName { get; set; } = "";
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
public System.Single BasinHeaterCapacity { get; set; } = 0;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
public System.Single BasinHeaterSetpointTemperature { get; set; } = 2;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
public System.String BasinHeaterOperatingScheduleName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled")]
public System.Single SpeedReferenceUnitRatedCondenserAirFlowRate { get; set; } = ;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled")]
public System.Single SpeedReferenceUnitRatedPadEffectivenessOfEvapPrecooling { get; set; } = ;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedCondenserAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedPadEffectivenessOfEvapPrecooling { get; set; } = ;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedCondenserAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedPadEffectivenessOfEvapPrecooling { get; set; } = ;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedCondenserAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedPadEffectivenessOfEvapPrecooling { get; set; } = ;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedCondenserAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedPadEffectivenessOfEvapPrecooling { get; set; } = ;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitCondenserAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedPadEffectivenessOfEvapPrecooling { get; set; } = ;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitCondenserFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedPadEffectivenessOfEvapPrecooling { get; set; } = ;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitCondenserAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedPadEffectivenessOfEvapPrecooling { get; set; } = ;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[Description(@"optional")]
[JsonProperty(@"optional")]
public System.Single SpeedReferenceUnitCondenserAirFlowRate { get; set; } = ;
        
[Description(@"optional")]
[JsonProperty(@"optional")]
public System.Single SpeedReferenceUnitRatedPadEffectivenessOfEvapPrecooling { get; set; } = ;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[Description(@"optional")]
[JsonProperty(@"optional")]
public System.Single SpeedReferenceUnitCondenserAirFlowRate { get; set; } = ;
        
[Description(@"optional")]
[JsonProperty(@"optional")]
public System.Single SpeedReferenceUnitRatedPadEffectivenessOfEvapPrecooling { get; set; } = ;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb wb = entering wet-bulb temperature (C) odb = air entering temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
    }
    
    [Description(@"Direct expansion (DX) cooling coil and condensing unit (includes electric compressor and condenser fan), two-stage with humidity control mode (e.g. sub-cool or hot gas reheat). Optional inputs for moisture evaporation from wet coil when compressor cycles off with continuous fan operation. Requires two to four sets of performance data, see CoilPerformance:DX:Cooling. Stages are modeled as a face-split coil.")]
    [JsonObject("Coil:Cooling:DX:TwoStageWithHumidityControlMode")]
    public class Coil_Cooling_DX_TwoStageWithHumidityControlMode
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single CrankcaseHeaterCapacity { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation { get; set; } = 10;
        
[JsonProperty(@"")]
public System.Single NumberOfCapacityStages { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single NumberOfEnhancedDehumidificationModes { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault NormalModeStageCoilPerformanceObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String NormalModeStageCoilPerformanceName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault NormalModeStageCoilPerformanceObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String NormalModeStageCoilPerformanceName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault DehumidificationModeStageCoilPerformanceObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String DehumidificationModeStageCoilPerformanceName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault DehumidificationModeStageCoilPerformanceObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String DehumidificationModeStageCoilPerformanceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SupplyWaterStorageTankName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondensateCollectionWaterStorageTankName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumOutdoorDryBulbTemperatureForCompressorOperation { get; set; } = -25;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
public System.Single BasinHeaterCapacity { get; set; } = 0;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
public System.Single BasinHeaterSetpointTemperature { get; set; } = 2;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
public System.String BasinHeaterOperatingScheduleName { get; set; } = "";
    }
    
    public enum NormalModeStageCoilPerformanceObjectTypeType
    {
        
        [JsonProperty("CoilPerformance:DX:Cooling")]
        CoilPerformanceDXCooling = 0,
    }
    
    public enum NormalModeStageCoilPerformanceObjectTypeType
    {
        
        [JsonProperty("CoilPerformance:DX:Cooling")]
        CoilPerformanceDXCooling = 0,
    }
    
    public enum DehumidificationModeStageCoilPerformanceObjectTypeType
    {
        
        [JsonProperty("CoilPerformance:DX:Cooling")]
        CoilPerformanceDXCooling = 0,
    }
    
    public enum DehumidificationModeStageCoilPerformanceObjectTypeType
    {
        
        [JsonProperty("CoilPerformance:DX:Cooling")]
        CoilPerformanceDXCooling = 0,
    }
    
    [Description(@"Used to specify DX cooling coil performance for one mode of operation for a Coil:Cooling:DX:TwoStageWithHumidityControlMode object which may reference one to four CoilPerformance:DX:Cooling objects depending on the specified number of stages and dehumidification modes. In nearly all cases, the Rated Air Flow Rate will be the same for all performance objects associated with a given coil. If bypass is specified, the Rated Air Flow Rate includes both the bypassed flow and the flow through the active part of the coil.")]
    [JsonObject("CoilPerformance:DX:Cooling")]
    public class CoilPerformance_DX_Cooling
    {
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
public System.String GrossRatedTotalCoolingCapacity { get; set; } = "";
        
[Description(@"Rated sensible heat ratio (gross sensible capacity/gross total capacity) sensible and total capacities do not include supply fan heat")]
[JsonProperty(@"Rated sensible heat ratio (gross sensible capacity/gross total capacity) sensible and total capacities do not include supply fan heat")]
public System.String GrossRatedSensibleHeatRatio { get; set; } = "";
        
[Description(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
public System.Single GrossRatedCoolingCop { get; set; } = 3;
        
[Description(@"Flow rate corresponding to Rated total Cooling capacity, Rated SHR and Rated COP")]
[JsonProperty(@"Flow rate corresponding to Rated total Cooling capacity, Rated SHR and Rated COP")]
public System.String RatedAirFlowRate { get; set; } = "";
        
[Description(@"Fraction of Rated Air Flow Rate which bypasses the cooling coil in this performance mode. The remaining portion of the flow should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity. This is used to model face-split coils on multi-stage units or bypass dampers. If total flow rate varies during simulation, the same fraction is bypassed.")]
[JsonProperty(@"Fraction of Rated Air Flow Rate which bypasses the cooling coil in this performance mode. The remaining portion of the flow should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity. This is used to model face-split coils on multi-stage units or bypass dampers. If total flow rate varies during simulation, the same fraction is bypassed.")]
public System.Single FractionOfAirFlowBypassedAroundCoil { get; set; } = 0;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
public System.String TotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String TotalCoolingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb wb = entering wet-bulb temperature (C) edb = dry-bulb temperature seen by the condenser (C)")]
public System.String EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String EnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (cooling load/steady state capacity)")]
[JsonProperty(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (cooling load/steady state capacity)")]
public System.String PartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
[JsonProperty(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
public System.Single NominalTimeForCondensateRemovalToBegin { get; set; } = 0;
        
[Description(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
[JsonProperty(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
public System.Single RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity { get; set; } = 0;
        
[Description(@"The maximum on-off cycling rate for the compressor, which occurs at 50% run time fraction. Suggested value is 3; zero value means latent degradation model is disabled.")]
[JsonProperty(@"The maximum on-off cycling rate for the compressor, which occurs at 50% run time fraction. Suggested value is 3; zero value means latent degradation model is disabled.")]
public System.Single MaximumCyclingRate { get; set; } = 0;
        
[Description(@"Time constant for the cooling coil's latent capacity to reach steady state after startup. Suggested value is 45; zero value means latent degradation model is disabled.")]
[JsonProperty(@"Time constant for the cooling coil's latent capacity to reach steady state after startup. Suggested value is 45; zero value means latent degradation model is disabled.")]
public System.Single LatentCapacityTimeConstant { get; set; } = 0;
        
[Description(@"Enter the name of an outdoor air node. This node name is also specified in an OutdoorAir:Node or OutdoorAir:NodeList object.")]
[JsonProperty(@"Enter the name of an outdoor air node. This node name is also specified in an OutdoorAir:Node or OutdoorAir:NodeList object.")]
public System.String CondenserAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AirCooled");
        
[JsonProperty(@"")]
public System.Single EvaporativeCondenserEffectiveness { get; set; } = 0.9;
        
[Description(@"Used to calculate evaporative condenser water use")]
[JsonProperty(@"Used to calculate evaporative condenser water use")]
public System.String EvaporativeCondenserAirFlowRate { get; set; } = "";
        
[Description(@"Rated power consumed by the evaporative condenser's water pump")]
[JsonProperty(@"Rated power consumed by the evaporative condenser's water pump")]
public System.String EvaporativeCondenserPumpRatedPowerConsumption { get; set; } = (System.String)0;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the DX cooling coil (C) db = entering dry-bulb temperature seen by the DX cooling coil (C) entering temperature can be outside air or pretreated air.")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the DX cooling coil (C) db = entering dry-bulb temperature seen by the DX cooling coil (C) entering temperature can be outside air or pretreated air.")]
public System.String SensibleHeatRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String SensibleHeatRatioFunctionOfFlowFractionCurveName { get; set; } = "";
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
    }
    
    [Description("Variable refrigerant flow (VRF) direct expansion (DX) cooling coil. Used with Zon" +
        "eHVAC:TerminalUnit:VariableRefrigerantFlow. Condensing unit is modeled separatel" +
        "y, see AirConditioner:VariableRefrigerantFlow.")]
    [JsonObject("Coil:Cooling:DX:VariableRefrigerantFlow")]
    public class Coil_Cooling_DX_VariableRefrigerantFlow
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat Cooling capacity excluding supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat Cooling capacity excluding supply air fan heat")]
public System.String GrossRatedTotalCoolingCapacity { get; set; } = "";
        
[Description(@"Sensible heat ratio excluding supply air fan heat")]
[JsonProperty(@"Sensible heat ratio excluding supply air fan heat")]
public System.String GrossRatedSensibleHeatRatio { get; set; } = "";
        
[Description(@"Volume flow rate corresponding to rated total cooling capacity should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity")]
[JsonProperty(@"Volume flow rate corresponding to rated total cooling capacity should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity")]
public System.String RatedAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoolingCapacityRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String CoolingCapacityModifierCurveFunctionOfFlowFractionName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoilAirInletNode { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoilAirOutletNode { get; set; } = "";
        
[JsonProperty(@"")]
public System.String NameOfWaterStorageTankForCondensateCollection { get; set; } = "";
    }
    
    [Description("Variable refrigerant flow (VRF) direct expansion (DX) heating coil (air-to-air he" +
        "at pump). Used with ZoneHVAC:TerminalUnit:VariableRefrigerantFlow. Condensing un" +
        "it is modeled separately, see AirConditioner:VariableRefrigerantFlow.")]
    [JsonObject("Coil:Heating:DX:VariableRefrigerantFlow")]
    public class Coil_Heating_DX_VariableRefrigerantFlow
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilitySchedule { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat capacity excluding supply air fan heat rating point outside dry-bulb temp 8.33 C, outside wet-bulb temp 6.11 C rating point heating coil entering air dry-bulb 21.11 C, coil entering wetbulb 15.55 C")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat capacity excluding supply air fan heat rating point outside dry-bulb temp 8.33 C, outside wet-bulb temp 6.11 C rating point heating coil entering air dry-bulb 21.11 C, coil entering wetbulb 15.55 C")]
public System.String GrossRatedHeatingCapacity { get; set; } = "";
        
[Description(@"volume flow rate corresponding to rated total capacity should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated heating capacity")]
[JsonProperty(@"volume flow rate corresponding to rated total capacity should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated heating capacity")]
public System.String RatedAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoilAirInletNode { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoilAirOutletNode { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatingCapacityRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String HeatingCapacityModifierFunctionOfFlowFractionCurveName { get; set; } = "";
    }
    
    [Description(@"This is a key object in the new physics based VRF model applicable for Fluid Temperature Control. It describes the the indoor unit coil of the system at cooling mode. Used with ZoneHVAC:TerminalUnit:VariableRefrigerantFlow. Outdoor unit is modeled separately, see AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl or AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR")]
    [JsonObject("Coil:Cooling:DX:VariableRefrigerantFlow:FluidTemperatureControl")]
    public class Coil_Cooling_DX_VariableRefrigerantFlow_FluidTemperatureControl
    {
        
[Description(@"Enter the name of a schedule that defines the availability of the coil Schedule values of 0 denote the unit is off. All other values denote the unit is available If this field is left blank, the unit is available the entire simulation")]
[JsonProperty(@"Enter the name of a schedule that defines the availability of the coil Schedule values of 0 denote the unit is off. All other values denote the unit is available If this field is left blank, the unit is available the entire simulation")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"the inlet node to the coil")]
[JsonProperty(@"the inlet node to the coil")]
public System.String CoilAirInletNode { get; set; } = "";
        
[Description(@"the outlet node to the coil")]
[JsonProperty(@"the outlet node to the coil")]
public System.String CoilAirOutletNode { get; set; } = "";
        
[Description(@"Supply air fan heat is not included")]
[JsonProperty(@"Supply air fan heat is not included")]
public System.String RatedTotalCoolingCapacity { get; set; } = "";
        
[Description(@"Supply air fan heat is not included")]
[JsonProperty(@"Supply air fan heat is not included")]
public System.String RatedSensibleHeatRatio { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single IndoorUnitReferenceSuperheating { get; set; } = 5;
        
[JsonProperty(@"")]
public System.String IndoorUnitEvaporatingTemperatureFunctionOfSuperheatingCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String NameOfWaterStorageTankForCondensateCollection { get; set; } = "";
    }
    
    [Description(@"This is a key object in the new physics based VRF model applicable for Fluid Temperature Control. It describes the the indoor unit coil of the system at heating mode. Used with ZoneHVAC:TerminalUnit:VariableRefrigerantFlow. Outdoor unit is modeled separately, see AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl or AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR")]
    [JsonObject("Coil:Heating:DX:VariableRefrigerantFlow:FluidTemperatureControl")]
    public class Coil_Heating_DX_VariableRefrigerantFlow_FluidTemperatureControl
    {
        
[Description(@"Enter the name of a schedule that defines the availability of the coil Schedule values of 0 denote the unit is off. All other values denote the unit is available If this field is left blank, the unit is available the entire simulation")]
[JsonProperty(@"Enter the name of a schedule that defines the availability of the coil Schedule values of 0 denote the unit is off. All other values denote the unit is available If this field is left blank, the unit is available the entire simulation")]
public System.String AvailabilitySchedule { get; set; } = "";
        
[Description(@"the inlet node to the coil")]
[JsonProperty(@"the inlet node to the coil")]
public System.String CoilAirInletNode { get; set; } = "";
        
[Description(@"the outlet node to the coil")]
[JsonProperty(@"the outlet node to the coil")]
public System.String CoilAirOutletNode { get; set; } = "";
        
[Description(@"Supply air fan heat is not included")]
[JsonProperty(@"Supply air fan heat is not included")]
public System.String RatedTotalHeatingCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single IndoorUnitReferenceSubcooling { get; set; } = 5;
        
[JsonProperty(@"")]
public System.String IndoorUnitCondensingTemperatureFunctionOfSubcoolingCurveName { get; set; } = "";
    }
    
    [Description("Hot water heating coil, NTU-effectiveness model, assumes a cross-flow heat exchan" +
        "ger. Two options for capacity inputs: UA and water flow rate or capacity and des" +
        "ign temperatures.")]
    [JsonObject("Coil:Heating:Water")]
    public class Coil_Heating_Water
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"UA value under rating conditions")]
[JsonProperty(@"UA value under rating conditions")]
public System.String UFactorTimesAreaValue { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String MaximumWaterFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String WaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault PerformanceInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "UFactorTimesAreaAndDesignWaterFlowRate");
        
[JsonProperty(@"")]
public System.String RatedCapacity { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single RatedInletWaterTemperature { get; set; } = 82.2;
        
[JsonProperty(@"")]
public System.Single RatedInletAirTemperature { get; set; } = 16.6;
        
[JsonProperty(@"")]
public System.Single RatedOutletWaterTemperature { get; set; } = 71.1;
        
[JsonProperty(@"")]
public System.Single RatedOutletAirTemperature { get; set; } = 32.2;
        
[JsonProperty(@"")]
public System.Single RatedRatioForAirAndWaterConvection { get; set; } = 0.5;
        
[Description(@"This input field is optional. If specified, it is used for sizing the Design Water Flow Rate. If blank or omitted, the Loop Design Temperature Difference value specified in Sizing:Plant object is used for sizing the Design Water Flow Rate.")]
[JsonProperty(@"This input field is optional. If specified, it is used for sizing the Design Water Flow Rate. If blank or omitted, the Loop Design Temperature Difference value specified in Sizing:Plant object is used for sizing the Design Water Flow Rate.")]
public System.Single DesignWaterTemperatureDifference { get; set; } = ;
    }
    
    public enum PerformanceInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("NominalCapacity")]
        NominalCapacity = 1,
        
        [JsonProperty("UFactorTimesAreaAndDesignWaterFlowRate")]
        UFactorTimesAreaAndDesignWaterFlowRate = 2,
    }
    
    [Description("Steam heating coil. Condenses and sub-cools steam at loop pressure and discharges" +
        " condensate through steam traps to low pressure condensate line.")]
    [JsonObject("Coil:Heating:Steam")]
    public class Coil_Heating_Steam
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumSteamFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DegreeOfSubcooling { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DegreeOfLoopSubcooling { get; set; } = 20;
        
[JsonProperty(@"")]
public System.String WaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Use ZoneLoadControl if the coil is contained within another component such as an air terminal unit, zone HVAC equipment, or unitary system. Use TemperatureSetpointControl if the coil is located directly in an air loop branch or outdoor air equipment list.")]
[JsonProperty(@"Use ZoneLoadControl if the coil is contained within another component such as an air terminal unit, zone HVAC equipment, or unitary system. Use TemperatureSetpointControl if the coil is located directly in an air loop branch or outdoor air equipment list.")]
public YesNoDefault CoilControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Required if Coil Control Type is TemperatureSetpointControl")]
[JsonProperty(@"Required if Coil Control Type is TemperatureSetpointControl")]
public System.String TemperatureSetpointNodeName { get; set; } = "";
    }
    
    public enum CoilControlTypeType
    {
        
        [JsonProperty("TemperatureSetpointControl")]
        TemperatureSetpointControl = 0,
        
        [JsonProperty("ZoneLoadControl")]
        ZoneLoadControl = 1,
    }
    
    [Description(@"Electric heating coil. If the coil is located directly in an air loop branch or outdoor air equipment list, then it is controlled on leaving air temperature and the Temperature Setpoint Node Name must be specified. If the coil is contained within another component such as an air terminal unit, zone HVAC equipment, or unitary system, then the coil is controlled by the parent component and the setpoint node name is not entered.")]
    [JsonObject("Coil:Heating:Electric")]
    public class Coil_Heating_Electric
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single Efficiency { get; set; } = 1;
        
[JsonProperty(@"")]
public System.String NominalCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Required if coil is temperature controlled.")]
[JsonProperty(@"Required if coil is temperature controlled.")]
public System.String TemperatureSetpointNodeName { get; set; } = "";
    }
    
    [Description(@"Electric heating coil, multi-stage. If the coil is located directly in an air loop branch or outdoor air equipment list, then it is controlled on leaving air temperature and the Temperature Setpoint Node Name must be specified. If the coil is contained within another component such as an air terminal unit, zone HVAC equipment, or unitary system, then the coil is controlled by the parent component and the setpoint node name is not entered.")]
    [JsonObject("Coil:Heating:Electric:MultiStage")]
    public class Coil_Heating_Electric_MultiStage
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Required if coil is temperature controlled. controlled")]
[JsonProperty(@"Required if coil is temperature controlled. controlled")]
public System.String TemperatureSetpointNodeName { get; set; } = "";
        
[Description(@"Enter the number of the following sets of data for coil capacity and Efficiency.")]
[JsonProperty(@"Enter the number of the following sets of data for coil capacity and Efficiency.")]
public System.Single NumberOfStages { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StageEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.String StageNominalCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single StageEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.String StageNominalCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single StageEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.String StageNominalCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single StageEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.String StageNominalCapacity { get; set; } = "";
    }
    
    [Description(@"Gas or other fuel heating coil. If the coil is located directly in an air loop branch or outdoor air equipment list, then it is controlled on leaving air temperature and the Temperature Setpoint Node Name must be specified. If the coil is contained within another component such as an air terminal unit, zone HVAC equipment, or unitary system, then the coil is controlled by the parent component and the setpoint node name is not entered.")]
    [JsonObject("Coil:Heating:Fuel")]
    public class Coil_Heating_Fuel
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NaturalGas");
        
[JsonProperty(@"")]
public System.Single BurnerEfficiency { get; set; } = 0.8;
        
[JsonProperty(@"")]
public System.String NominalCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"optional, used if coil is temperature control and not load-base controlled")]
[JsonProperty(@"optional, used if coil is temperature control and not load-base controlled")]
public System.String TemperatureSetpointNodeName { get; set; } = "";
        
[Description(@"parasitic electric load associated with the coil operation such as an inducer fan, etc... This will be modified by the part load ratio to reflect the time of operation in a timestep.")]
[JsonProperty(@"parasitic electric load associated with the coil operation such as an inducer fan, etc... This will be modified by the part load ratio to reflect the time of operation in a timestep.")]
public System.Single ParasiticElectricLoad { get; set; } = ;
        
[Description(@"quadratic curve, PLF = a + b*PLR + c*PLR**2 cubic curve, PLF = a + b*PLR + c*PLR**2 + d*PLR**3 PLF = part load fraction PLR = part load ratio (sensible heating load/steady state heating capacity) Coil runtime fraction = Part Load Ratio / PLF This part load degradation is for coil performance & will increase the fuel consumption of the coil due to transient coil operation.")]
[JsonProperty(@"quadratic curve, PLF = a + b*PLR + c*PLR**2 cubic curve, PLF = a + b*PLR + c*PLR**2 + d*PLR**3 PLF = part load fraction PLR = part load ratio (sensible heating load/steady state heating capacity) Coil runtime fraction = Part Load Ratio / PLF This part load degradation is for coil performance & will increase the fuel consumption of the coil due to transient coil operation.")]
public System.String PartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"parasitic fuel load associated with the coil operation (i.e., standing pilot)")]
[JsonProperty(@"parasitic fuel load associated with the coil operation (i.e., standing pilot)")]
public System.Single ParasiticFuelLoad { get; set; } = ;
    }
    
    public enum FuelTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Coal")]
        Coal = 1,
        
        [JsonProperty("Diesel")]
        Diesel = 2,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 3,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 4,
        
        [JsonProperty("Gasoline")]
        Gasoline = 5,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 6,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 7,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 8,
        
        [JsonProperty("Propane")]
        Propane = 9,
    }
    
    [Description(@"Gas heating coil, multi-stage. If the coil is located directly in an air loop branch or outdoor air equipment list, then it is controlled on leaving air temperature and the Temperature Setpoint Node Name must be specified. If the coil is contained within another component such as an air terminal unit, zone HVAC equipment, or unitary system, then the coil is controlled by the parent component and the setpoint node name is not entered.")]
    [JsonObject("Coil:Heating:Gas:MultiStage")]
    public class Coil_Heating_Gas_MultiStage
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"optional, used if coil is temperature control and not load-base controlled.")]
[JsonProperty(@"optional, used if coil is temperature control and not load-base controlled.")]
public System.String TemperatureSetpointNodeName { get; set; } = "";
        
[Description(@"quadratic curve, PLF = a + b*PLR + c*PLR**2 cubic curve, PLF = a + b*PLR + c*PLR**2 + d*PLR**3 PLF = part load fraction PLR = part load ratio (sensible heating load/steady state heating capacity) Coil runtime fraction = Part Load Ratio / PLF This part load degradation is for coil performance & will increase the gas consumption of the coil due to transient coil operation.")]
[JsonProperty(@"quadratic curve, PLF = a + b*PLR + c*PLR**2 cubic curve, PLF = a + b*PLR + c*PLR**2 + d*PLR**3 PLF = part load fraction PLR = part load ratio (sensible heating load/steady state heating capacity) Coil runtime fraction = Part Load Ratio / PLF This part load degradation is for coil performance & will increase the gas consumption of the coil due to transient coil operation.")]
public System.String PartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"parasitic gas load associated with the gas coil operation (i.e., standing pilot)")]
[JsonProperty(@"parasitic gas load associated with the gas coil operation (i.e., standing pilot)")]
public System.Single ParasiticGasLoad { get; set; } = ;
        
[Description(@"Enter the number of the following sets of data for coil capacity and Gas Burner Efficiency.")]
[JsonProperty(@"Enter the number of the following sets of data for coil capacity and Gas Burner Efficiency.")]
public System.Single NumberOfStages { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StageGasBurnerEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.String StageNominalCapacity { get; set; } = "";
        
[Description(@"Stage 1 parasitic electric load associated with the gas coil operation such as an inducer fan, etc. This will be modified by the part load ratio to reflect the time of operation in a timestep.")]
[JsonProperty(@"Stage 1 parasitic electric load associated with the gas coil operation such as an inducer fan, etc. This will be modified by the part load ratio to reflect the time of operation in a timestep.")]
public System.Single StageParasiticElectricLoad { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StageGasBurnerEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.String StageNominalCapacity { get; set; } = "";
        
[Description(@"Stage 2 parasitic electric load associated with the gas coil operation such as an inducer fan, etc. This will be modified by the part load ratio to reflect the time of operation in a timestep.")]
[JsonProperty(@"Stage 2 parasitic electric load associated with the gas coil operation such as an inducer fan, etc. This will be modified by the part load ratio to reflect the time of operation in a timestep.")]
public System.Single StageParasiticElectricLoad { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StageGasBurnerEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.String StageNominalCapacity { get; set; } = "";
        
[Description(@"Stage 3 parasitic electric load associated with the gas coil operation such as an inducer fan, etc. This will be modified by the part load ratio to reflect the time of operation in a timestep.")]
[JsonProperty(@"Stage 3 parasitic electric load associated with the gas coil operation such as an inducer fan, etc. This will be modified by the part load ratio to reflect the time of operation in a timestep.")]
public System.Single StageParasiticElectricLoad { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StageGasBurnerEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.String StageNominalCapacity { get; set; } = "";
        
[Description(@"Stage 4 parasitic electric load associated with the gas coil operation such as an inducer fan, etc. This will be modified by the part load ratio to reflect the time of operation in a timestep.")]
[JsonProperty(@"Stage 4 parasitic electric load associated with the gas coil operation such as an inducer fan, etc. This will be modified by the part load ratio to reflect the time of operation in a timestep.")]
public System.Single StageParasiticElectricLoad { get; set; } = ;
    }
    
    [Description(@"Desuperheater air heating coil. The heating energy provided by this coil is reclaimed from the superheated refrigerant gas leaving a compressor and does not impact the performance of the compressor. If the coil is located directly in an air loop branch or outdoor air equipment list, then it is controlled on leaving air temperature and the Temperature Setpoint Node Name must be specified. If the coil is contained within another component such as a unitary system, then the coil is controlled by the parent component and the setpoint node name is not entered.")]
    [JsonObject("Coil:Heating:Desuperheater")]
    public class Coil_Heating_Desuperheater
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single HeatReclaimRecoveryEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatingSourceObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String HeatingSourceName { get; set; } = "";
        
[Description(@"Required if coil is temperature controlled. Temperature-based control requires the use of a SetpointManager object")]
[JsonProperty(@"Required if coil is temperature controlled. Temperature-based control requires the use of a SetpointManager object")]
public System.String TemperatureSetpointNodeName { get; set; } = "";
        
[Description(@"parasitic electric load associated with the desuperheater coil operation such as solenoid valves, etc.")]
[JsonProperty(@"parasitic electric load associated with the desuperheater coil operation such as solenoid valves, etc.")]
public System.Single ParasiticElectricLoad { get; set; } = ;
    }
    
    public enum HeatingSourceObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:TwoSpeed")]
        CoilCoolingDXTwoSpeed = 1,
        
        [JsonProperty("Coil:Cooling:DX:TwoStageWithHumidityControlMode")]
        CoilCoolingDXTwoStageWithHumidityControlMode = 2,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 3,
        
        [JsonProperty("Refrigeration:CompressorRack")]
        RefrigerationCompressorRack = 4,
        
        [JsonProperty("Refrigeration:Condenser:AirCooled")]
        RefrigerationCondenserAirCooled = 5,
        
        [JsonProperty("Refrigeration:Condenser:EvaporativeCooled")]
        RefrigerationCondenserEvaporativeCooled = 6,
        
        [JsonProperty("Refrigeration:Condenser:WaterCooled")]
        RefrigerationCondenserWaterCooled = 7,
    }
    
    [Description("Direct expansion (DX) heating coil (air-to-air heat pump) and compressor unit (in" +
        "cludes electric compressor and outdoor fan), single-speed, with defrost controls" +
        ".")]
    [JsonObject("Coil:Heating:DX:SingleSpeed")]
    public class Coil_Heating_DX_SingleSpeed
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat capacity excluding supply air fan heat rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat capacity excluding supply air fan heat rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
public System.String GrossRatedHeatingCapacity { get; set; } = "";
        
[Description(@"Rated heating capacity divided by power input to the compressor and outdoor fan, does not include supply air fan heat or supply air fan electrical energy does not include supply air fan heat or supply air fan electrical energy")]
[JsonProperty(@"Rated heating capacity divided by power input to the compressor and outdoor fan, does not include supply air fan heat or supply air fan electrical energy does not include supply air fan heat or supply air fan electrical energy")]
public System.Single GrossRatedHeatingCop { get; set; } = ;
        
[Description(@"Flow rate corresponding to rated total capacity should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated heating capacity")]
[JsonProperty(@"Flow rate corresponding to rated total capacity should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated heating capacity")]
public System.String RatedAirFlowRate { get; set; } = "";
        
[Description(@"Enter the supply fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on heating capacity. This value is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not used for modeling the supply (condenser) fan during simulations.")]
[JsonProperty(@"Enter the supply fan power per air volume flow rate at the rated test conditions. The test conditions vary external static pressure based on heating capacity. This value is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not used for modeling the supply (condenser) fan during simulations.")]
public System.Single RatedSupplyFanPowerPerVolumeFlowRate { get; set; } = 773.3;
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) Biquadratic curve is recommended if sufficient manufacturer data is available for the heating capacity to be sensitive to both iat and oat.")]
[JsonProperty(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) Biquadratic curve is recommended if sufficient manufacturer data is available for the heating capacity to be sensitive to both iat and oat.")]
public System.String HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String HeatingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the energy input ratio to be sensitive to both iat and oat.")]
[JsonProperty(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the energy input ratio to be sensitive to both iat and oat.")]
public System.String EnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String EnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (sensible heating load/steady state heating capacity)")]
[JsonProperty(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (sensible heating load/steady state heating capacity)")]
public System.String PartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"biquadratic curve = a + b*wb + c*wb**2 + d*oat + e*oat**2 + f*wb*oat wb = wet-bulb temperature (C) of air entering the indoor coil oat = outdoor air dry-bulb temperature (C) only required if ReverseCycle defrost strategy is specified")]
[JsonProperty(@"biquadratic curve = a + b*wb + c*wb**2 + d*oat + e*oat**2 + f*wb*oat wb = wet-bulb temperature (C) of air entering the indoor coil oat = outdoor air dry-bulb temperature (C) only required if ReverseCycle defrost strategy is specified")]
public System.String DefrostEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumOutdoorDryBulbTemperatureForCompressorOperation { get; set; } = -8;
        
[Description(@"The outdoor temperature when the compressor is automatically turned back on following an automatic shut off because of low outdoor dry-bulb temperature. This field is only used for the calculation of HSPF. If this field is not provided, then outdoor bin temperature used in the HSPF calculation is always considered to be greater than this temperature and 'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation' field described above. This assumption is based on AHRI standard 210/240 (2008) and can introduce significant error in the final value of HSPF.")]
[JsonProperty(@"The outdoor temperature when the compressor is automatically turned back on following an automatic shut off because of low outdoor dry-bulb temperature. This field is only used for the calculation of HSPF. If this field is not provided, then outdoor bin temperature used in the HSPF calculation is always considered to be greater than this temperature and 'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation' field described above. This assumption is based on AHRI standard 210/240 (2008) and can introduce significant error in the final value of HSPF.")]
public System.Single OutdoorDryBulbTemperatureToTurnOnCompressor { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumOutdoorDryBulbTemperatureForDefrostOperation { get; set; } = 5;
        
[JsonProperty(@"")]
public System.Single CrankcaseHeaterCapacity { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation { get; set; } = 10;
        
[JsonProperty(@"")]
public YesNoDefault DefrostStrategy { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ReverseCycle");
        
[JsonProperty(@"")]
public YesNoDefault DefrostControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Timed");
        
[Description(@"Fraction of time in defrost mode only applicable if timed defrost control is specified")]
[JsonProperty(@"Fraction of time in defrost mode only applicable if timed defrost control is specified")]
public System.Single DefrostTimePeriodFraction { get; set; } = 0.058333;
        
[Description(@"only applicable if resistive defrost strategy is specified")]
[JsonProperty(@"only applicable if resistive defrost strategy is specified")]
public System.String ResistiveDefrostHeaterCapacity { get; set; } = (System.String)0;
        
[Description(@"Standard Region number for which HSPF and other standard ratings are calculated")]
[JsonProperty(@"Standard Region number for which HSPF and other standard ratings are calculated")]
public System.Single RegionNumberForCalculatingHspf { get; set; } = 4;
        
[Description(@"Enter the name of an outdoor air node. This node name is also specified in an OutdoorAir:Node or OutdoorAir:NodeList object.")]
[JsonProperty(@"Enter the name of an outdoor air node. This node name is also specified in an OutdoorAir:Node or OutdoorAir:NodeList object.")]
public System.String EvaporatorAirInletNodeName { get; set; } = "";
        
[Description(@"This input field is name of a conditioned or unconditioned zone where the secondary coil (evaporator) of a heat pump is to be placed. This is an optional input field specified only when user desires to extract heat from the zone. The heat extracted is modelled as internal gain of the zone. If the primary DX system is a heat pump, then the zone name should be the same as the zone name specified for placing the secondary cooling DX coil.")]
[JsonProperty(@"This input field is name of a conditioned or unconditioned zone where the secondary coil (evaporator) of a heat pump is to be placed. This is an optional input field specified only when user desires to extract heat from the zone. The heat extracted is modelled as internal gain of the zone. If the primary DX system is a heat pump, then the zone name should be the same as the zone name specified for placing the secondary cooling DX coil.")]
public System.String ZoneNameForEvaporatorPlacement { get; set; } = "";
        
[Description(@"This input value is the secondary coil (evaporator) air flow rate when the heat pump is working in heating mode or the secondary DX coil (condenser) air flow rate when the heat pump is working in cooling mode.")]
[JsonProperty(@"This input value is the secondary coil (evaporator) air flow rate when the heat pump is working in heating mode or the secondary DX coil (condenser) air flow rate when the heat pump is working in cooling mode.")]
public System.String SecondaryCoilAirFlowRate { get; set; } = "";
        
[Description(@"This input field is scaling factor for autosizing the secondary DX coil fan flow rate. The secondary air flow rate is determined by multiplying the primary DX coil rated air flow rate by the fan flow scaling factor. Default value is 1.25. If the secondary coil fan flow rate is not autosized, then the secondary coil fan flow scaling factor is set to 1.0.")]
[JsonProperty(@"This input field is scaling factor for autosizing the secondary DX coil fan flow rate. The secondary air flow rate is determined by multiplying the primary DX coil rated air flow rate by the fan flow scaling factor. Default value is 1.25. If the secondary coil fan flow rate is not autosized, then the secondary coil fan flow scaling factor is set to 1.0.")]
public System.Single SecondaryCoilFanFlowScalingFactor { get; set; } = 1.25;
        
[Description(@"This input value is the nominal sensible heat ratio used to split the heat extracted by a secondary DX coil (evaporator) of a heat pump into sensible and latent components. This is an optional input field. If this input field is left blank, then pure sensible internal heat gain is assumed, i.e., sensible heat ratio of 1.0.")]
[JsonProperty(@"This input value is the nominal sensible heat ratio used to split the heat extracted by a secondary DX coil (evaporator) of a heat pump into sensible and latent components. This is an optional input field. If this input field is left blank, then pure sensible internal heat gain is assumed, i.e., sensible heat ratio of 1.0.")]
public System.Single NominalSensibleHeatRatioOfSecondaryCoil { get; set; } = ;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the secondary DX coil (C) db = entering dry-bulb temperature seen by the primary DX coil (C) This input field is name of sensible heat ratio modifier biquadratic curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary zone air node wet-bulb temperature and the heating DX coil entering air dry-bulb temperature. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified in the field above will be used.")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the secondary DX coil (C) db = entering dry-bulb temperature seen by the primary DX coil (C) This input field is name of sensible heat ratio modifier biquadratic curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary zone air node wet-bulb temperature and the heating DX coil entering air dry-bulb temperature. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified in the field above will be used.")]
public System.String SensibleHeatRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = secondary air flow fraction of the full load flow This input field is name of sensible heat ratio modifier curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary coil air flow fraction. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified will be used.")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = secondary air flow fraction of the full load flow This input field is name of sensible heat ratio modifier curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary coil air flow fraction. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified will be used.")]
public System.String SensibleHeatRatioModifierFunctionOfFlowFractionCurveName { get; set; } = "";
    }
    
    public enum DefrostStrategyType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Resistive")]
        Resistive = 1,
        
        [JsonProperty("ReverseCycle")]
        ReverseCycle = 2,
    }
    
    public enum DefrostControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("OnDemand")]
        OnDemand = 1,
        
        [JsonProperty("Timed")]
        Timed = 2,
    }
    
    [Description(@"Direct expansion (DX) heating coil (air-to-air heat pump) and compressor unit (includes electric or engine-driven compressor and outdoor fan), multi-speed (or variable-speed), with defrost controls. Requires two to four sets of performance data and will interpolate between speeds.")]
    [JsonObject("Coil:Heating:DX:MultiSpeed")]
    public class Coil_Heating_DX_MultiSpeed
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumOutdoorDryBulbTemperatureForCompressorOperation { get; set; } = -8;
        
[Description(@"The outdoor temperature when the compressor is automatically turned back on following an automatic shut off because of low outdoor dry-bulb temperature. This field is only used for the calculation of HSPF. If this field is not provided, then outdoor bin temperature used in the HSPF calculation is always considered to be greater than this temperature and 'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation' field described above. This assumption is based on AHRI standard 210/240 (2008) and can introduce significant error in the final value of HSPF.")]
[JsonProperty(@"The outdoor temperature when the compressor is automatically turned back on following an automatic shut off because of low outdoor dry-bulb temperature. This field is only used for the calculation of HSPF. If this field is not provided, then outdoor bin temperature used in the HSPF calculation is always considered to be greater than this temperature and 'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation' field described above. This assumption is based on AHRI standard 210/240 (2008) and can introduce significant error in the final value of HSPF.")]
public System.Single OutdoorDryBulbTemperatureToTurnOnCompressor { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrankcaseHeaterCapacity { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation { get; set; } = 10;
        
[Description(@"biquadratic curve = a + b*wb + c*wb**2 + d*oat + e*oat**2 + f*wb*oat wb = wet-bulb temperature (C) of air entering the indoor coil oat = outdoor air dry-bulb temperature (C) only required if ReverseCycle defrost strategy is specified")]
[JsonProperty(@"biquadratic curve = a + b*wb + c*wb**2 + d*oat + e*oat**2 + f*wb*oat wb = wet-bulb temperature (C) of air entering the indoor coil oat = outdoor air dry-bulb temperature (C) only required if ReverseCycle defrost strategy is specified")]
public System.String DefrostEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MaximumOutdoorDryBulbTemperatureForDefrostOperation { get; set; } = 5;
        
[JsonProperty(@"")]
public YesNoDefault DefrostStrategy { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ReverseCycle");
        
[JsonProperty(@"")]
public YesNoDefault DefrostControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Timed");
        
[Description(@"Fraction of time in defrost mode only applicable if timed defrost control is specified")]
[JsonProperty(@"Fraction of time in defrost mode only applicable if timed defrost control is specified")]
public System.Single DefrostTimePeriodFraction { get; set; } = 0.058333;
        
[Description(@"only applicable if resistive defrost strategy is specified")]
[JsonProperty(@"only applicable if resistive defrost strategy is specified")]
public System.String ResistiveDefrostHeaterCapacity { get; set; } = (System.String)0;
        
[JsonProperty(@"")]
public YesNoDefault ApplyPartLoadFractionToSpeedsGreaterThan { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public YesNoDefault FuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Standard Region number for which HSPF and other standard ratings are calculated")]
[JsonProperty(@"Standard Region number for which HSPF and other standard ratings are calculated")]
public System.Single RegionNumberForCalculatingHspf { get; set; } = 4;
        
[Description(@"Enter the number of the following sets of data for coil capacity, COP, flow rate, and associated curves.")]
[JsonProperty(@"Enter the number of the following sets of data for coil capacity, COP, flow rate, and associated curves.")]
public System.Single NumberOfSpeeds { get; set; } = ;
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat capacity excluding supply air fan heat rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat capacity excluding supply air fan heat rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
public System.String SpeedGrossRatedHeatingCapacity { get; set; } = "";
        
[Description(@"Rated heating capacity divided by power input to the compressor and outdoor fan, does not include supply air fan heat or supply air fan electrical energy")]
[JsonProperty(@"Rated heating capacity divided by power input to the compressor and outdoor fan, does not include supply air fan heat or supply air fan electrical energy")]
public System.Single SpeedGrossRatedHeatingCop { get; set; } = ;
        
[Description(@"Flow rate corresponding to rated total capacity should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total heating capacity")]
[JsonProperty(@"Flow rate corresponding to rated total capacity should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total heating capacity")]
public System.String SpeedRatedAirFlowRate { get; set; } = "";
        
[Description(@"Enter the supply air fan power per air volume flow rate at the rated speed 1 test conditions. The test conditions vary external static pressure based on heating capacity. This value is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not used for modeling the supply air fan during simulations.")]
[JsonProperty(@"Enter the supply air fan power per air volume flow rate at the rated speed 1 test conditions. The test conditions vary external static pressure based on heating capacity. This value is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not used for modeling the supply air fan during simulations.")]
public System.Single SpeedRatedSupplyAirFanPowerPerVolumeFlowRate { get; set; } = 773.3;
        
[Description(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the heating capacity to be sensitive to both iat and oat.")]
[JsonProperty(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the heating capacity to be sensitive to both iat and oat.")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String SpeedHeatingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the energy input ratio to be sensitive to both iat and oat.")]
[JsonProperty(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the energy input ratio to be sensitive to both iat and oat.")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String SpeedEnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (sensible heating load/steady state heating capacity)")]
[JsonProperty(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (sensible heating load/steady state heating capacity)")]
public System.String SpeedPartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"recoverable waste heat at full load and rated conditions")]
[JsonProperty(@"recoverable waste heat at full load and rated conditions")]
public System.Single SpeedRatedWasteHeatFractionOfPowerInput { get; set; } = 0.2;
        
[Description(@"curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bulb temperature (C) db = entering coil dry-bulb temperature (C)")]
[JsonProperty(@"curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bulb temperature (C) db = entering coil dry-bulb temperature (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat capacity excluding supply air fan heat rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat capacity excluding supply air fan heat rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
public System.String SpeedGrossRatedHeatingCapacity { get; set; } = "";
        
[Description(@"Rated heating capacity divided by power input to the compressor and outdoor fan, does not include supply air fan heat or supply air fan electrical energy")]
[JsonProperty(@"Rated heating capacity divided by power input to the compressor and outdoor fan, does not include supply air fan heat or supply air fan electrical energy")]
public System.Single SpeedGrossRatedHeatingCop { get; set; } = ;
        
[Description(@"Flow rate corresponding to rated total capacity should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total heating capacity")]
[JsonProperty(@"Flow rate corresponding to rated total capacity should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total heating capacity")]
public System.String SpeedRatedAirFlowRate { get; set; } = "";
        
[Description(@"Enter the supply air fan power per air volume flow rate at the rated speed 2 test conditions. The test conditions vary external static pressure based on heating capacity. This value is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not used for modeling the supply air fan during simulations.")]
[JsonProperty(@"Enter the supply air fan power per air volume flow rate at the rated speed 2 test conditions. The test conditions vary external static pressure based on heating capacity. This value is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not used for modeling the supply air fan during simulations.")]
public System.Single SpeedRatedSupplyAirFanPowerPerVolumeFlowRate { get; set; } = 773.3;
        
[Description(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the heating capacity to be sensitive to both iat and oat.")]
[JsonProperty(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the heating capacity to be sensitive to both iat and oat.")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String SpeedHeatingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the energy input ratio to be sensitive to both iat and oat.")]
[JsonProperty(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the energy input ratio to be sensitive to both iat and oat.")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String SpeedEnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (sensible heating load/steady state heating capacity)")]
[JsonProperty(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (sensible heating load/steady state heating capacity)")]
public System.String SpeedPartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"recoverable waste heat at full load and rated conditions")]
[JsonProperty(@"recoverable waste heat at full load and rated conditions")]
public System.Single SpeedRatedWasteHeatFractionOfPowerInput { get; set; } = 0.2;
        
[Description(@"curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bulb temperature (C) db = entering coil dry-bulb temperature (C)")]
[JsonProperty(@"curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bulb temperature (C) db = entering coil dry-bulb temperature (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat capacity excluding supply air fan heat rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat capacity excluding supply air fan heat rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
public System.String SpeedGrossRatedHeatingCapacity { get; set; } = "";
        
[Description(@"Rated heating capacity divided by power input to the compressor and outdoor fan, does not include supply air fan heat or supply air fan electrical energy")]
[JsonProperty(@"Rated heating capacity divided by power input to the compressor and outdoor fan, does not include supply air fan heat or supply air fan electrical energy")]
public System.Single SpeedGrossRatedHeatingCop { get; set; } = ;
        
[Description(@"Flow rate corresponding to rated total capacity should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total heating capacity")]
[JsonProperty(@"Flow rate corresponding to rated total capacity should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total heating capacity")]
public System.String SpeedRatedAirFlowRate { get; set; } = "";
        
[Description(@"Enter the supply air fan power per air volume flow rate at the rated speed 3 test conditions. The test conditions vary external static pressure based on heating capacity. This value is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not used for modeling the supply air fan during simulations.")]
[JsonProperty(@"Enter the supply air fan power per air volume flow rate at the rated speed 3 test conditions. The test conditions vary external static pressure based on heating capacity. This value is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not used for modeling the supply air fan during simulations.")]
public System.Single SpeedRatedSupplyAirFanPowerPerVolumeFlowRate { get; set; } = 773.3;
        
[Description(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the heating capacity to be sensitive to both iat and oat.")]
[JsonProperty(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the heating capacity to be sensitive to both iat and oat.")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String SpeedHeatingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the energy input ratio to be sensitive to both iat and oat.")]
[JsonProperty(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the energy input ratio to be sensitive to both iat and oat.")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String SpeedEnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (sensible heating load/steady state heating capacity)")]
[JsonProperty(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (sensible heating load/steady state heating capacity)")]
public System.String SpeedPartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"recoverable waste heat at full load and rated conditions")]
[JsonProperty(@"recoverable waste heat at full load and rated conditions")]
public System.Single SpeedRatedWasteHeatFractionOfPowerInput { get; set; } = 0.2;
        
[Description(@"curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bulb temperature (C) db = entering coil dry-bulb temperature (C)")]
[JsonProperty(@"curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bulb temperature (C) db = entering coil dry-bulb temperature (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat capacity excluding supply air fan heat rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat capacity excluding supply air fan heat rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
public System.String SpeedGrossRatedHeatingCapacity { get; set; } = "";
        
[Description(@"Rated heating capacity divided by power input to the compressor and outdoor fan, does not include supply air fan heat or supply air fan electrical energy")]
[JsonProperty(@"Rated heating capacity divided by power input to the compressor and outdoor fan, does not include supply air fan heat or supply air fan electrical energy")]
public System.Single SpeedGrossRatedHeatingCop { get; set; } = ;
        
[Description(@"Flow rate corresponding to rated total capacity should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total heating capacity")]
[JsonProperty(@"Flow rate corresponding to rated total capacity should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total heating capacity")]
public System.String SpeedRatedAirFlowRate { get; set; } = "";
        
[Description(@"Enter the supply air fan power per air volume flow rate at the rated speed 4 test conditions. The test conditions vary external static pressure based on heating capacity. This value is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not used for modeling the supply air fan during simulations.")]
[JsonProperty(@"Enter the supply air fan power per air volume flow rate at the rated speed 4 test conditions. The test conditions vary external static pressure based on heating capacity. This value is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not used for modeling the supply air fan during simulations.")]
public System.Single SpeedRatedSupplyAirFanPowerPerVolumeFlowRate { get; set; } = 773.3;
        
[Description(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the heating capacity to be sensitive to both iat and oat.")]
[JsonProperty(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the heating capacity to be sensitive to both iat and oat.")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String SpeedHeatingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the energy input ratio to be sensitive to both iat and oat.")]
[JsonProperty(@"quadratic curve = a + b*oat + c*oat**2 cubic curve = a + b*oat + c*oat**2 + d*oat**3 biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat oat = outdoor air dry-bulb temperature (C) iat = indoor air dry-bulb temperature (C) biquadratic curve is recommended if sufficient manufacturer data is available for the energy input ratio to be sensitive to both iat and oat.")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = fraction of the full load flow")]
public System.String SpeedEnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (sensible heating load/steady state heating capacity)")]
[JsonProperty(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (sensible heating load/steady state heating capacity)")]
public System.String SpeedPartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"recoverable waste heat at full load and rated conditions")]
[JsonProperty(@"recoverable waste heat at full load and rated conditions")]
public System.Single SpeedRatedWasteHeatFractionOfPowerInput { get; set; } = 0.2;
        
[Description(@"curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bulb temperature (C) db = entering coil dry-bulb temperature (C)")]
[JsonProperty(@"curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db odb = Outdoor air dry-bulb temperature (C) db = entering coil dry-bulb temperature (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"This input field is name of a conditioned or unconditioned zone where the secondary coil (evaporator) of a heat pump is to be placed. This is an optional input field specified only when user desires to extract heat from the zone. The heat extracted is modeled as internal heat gain of the zone. If the primary DX system is a heat pump, then the zone name should be the same as the zone name specified for placing the secondary cooling DX coil.")]
[JsonProperty(@"This input field is name of a conditioned or unconditioned zone where the secondary coil (evaporator) of a heat pump is to be placed. This is an optional input field specified only when user desires to extract heat from the zone. The heat extracted is modeled as internal heat gain of the zone. If the primary DX system is a heat pump, then the zone name should be the same as the zone name specified for placing the secondary cooling DX coil.")]
public System.String ZoneNameForEvaporatorPlacement { get; set; } = "";
        
[Description(@"This input value is the secondary coil (evaporator) air flow rate when the heat pump is working in heating mode or the secondary DX coil (condenser) air flow rate when the heat pump is working in cooling mode.")]
[JsonProperty(@"This input value is the secondary coil (evaporator) air flow rate when the heat pump is working in heating mode or the secondary DX coil (condenser) air flow rate when the heat pump is working in cooling mode.")]
public System.String SpeedSecondaryCoilAirFlowRate { get; set; } = "";
        
[Description(@"This input field is scaling factor for autosizing the secondary DX coil fan flow rate. The secondary air flow rate is determined by multiplying the primary DX coil rated air flow rate by the fan flow scaling factor. Default value is 1.25. If the secondary coil fan flow rate is not autosized, then the secondary coil fan flow scaling factor is set to 1.0.")]
[JsonProperty(@"This input field is scaling factor for autosizing the secondary DX coil fan flow rate. The secondary air flow rate is determined by multiplying the primary DX coil rated air flow rate by the fan flow scaling factor. Default value is 1.25. If the secondary coil fan flow rate is not autosized, then the secondary coil fan flow scaling factor is set to 1.0.")]
public System.Single SpeedSecondaryCoilFanFlowScalingFactor { get; set; } = 1.25;
        
[Description(@"This input value is the nominal sensible heat ratio used to split the heat extracted by a secondary DX coil (evaporator) of a heat pump into sensible and latent components. This is an optional input field. If this input field is left blank, then pure sensible internal heat gain is assumed, i.e., sensible heat ratio of 1.0.")]
[JsonProperty(@"This input value is the nominal sensible heat ratio used to split the heat extracted by a secondary DX coil (evaporator) of a heat pump into sensible and latent components. This is an optional input field. If this input field is left blank, then pure sensible internal heat gain is assumed, i.e., sensible heat ratio of 1.0.")]
public System.Single SpeedNominalSensibleHeatRatioOfSecondaryCoil { get; set; } = ;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the secondary DX coil (C) db = entering dry-bulb temperature seen by the primary DX coil (C) This input field is name of sensible heat ratio modifier biquadratic curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary zone air node wet-bulb temperature and the heating DX coil entering air dry-bulb temperature. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified in the field above will be used.")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the secondary DX coil (C) db = entering dry-bulb temperature seen by the primary DX coil (C) This input field is name of sensible heat ratio modifier biquadratic curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary zone air node wet-bulb temperature and the heating DX coil entering air dry-bulb temperature. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified in the field above will be used.")]
public System.String SpeedSensibleHeatRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = secondary air flow fraction of the full load flow This input field is name of sensible heat ratio modifier curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary coil air flow fraction. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified will be used.")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = secondary air flow fraction of the full load flow This input field is name of sensible heat ratio modifier curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary coil air flow fraction. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified will be used.")]
public System.String SpeedSensibleHeatRatioModifierFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"This input value is the secondary coil (evaporator) air flow rate when the heat pump is working in heating mode or the secondary DX coil (condenser) air flow rate when the heat pump is working in cooling mode.")]
[JsonProperty(@"This input value is the secondary coil (evaporator) air flow rate when the heat pump is working in heating mode or the secondary DX coil (condenser) air flow rate when the heat pump is working in cooling mode.")]
public System.String SpeedSecondaryCoilAirFlowRate { get; set; } = "";
        
[Description(@"This input field is scaling factor for autosizing the secondary DX coil fan flow rate. The secondary air flow rate is determined by multiplying the primary DX coil rated air flow rate by the fan flow scaling factor. Default value is 1.25. If the secondary coil fan flow rate is not autosized, then the secondary coil fan flow scaling factor is set to 1.0.")]
[JsonProperty(@"This input field is scaling factor for autosizing the secondary DX coil fan flow rate. The secondary air flow rate is determined by multiplying the primary DX coil rated air flow rate by the fan flow scaling factor. Default value is 1.25. If the secondary coil fan flow rate is not autosized, then the secondary coil fan flow scaling factor is set to 1.0.")]
public System.Single SpeedSecondaryCoilFanFlowScalingFactor { get; set; } = 1.25;
        
[Description(@"This input value is the nominal sensible heat ratio used to split the heat extracted by a secondary DX coil (evaporator) of a heat pump into sensible and latent components. This is an optional input field. If this input field is left blank, then pure sensible internal heat gain is assumed, i.e., sensible heat ratio of 1.0.")]
[JsonProperty(@"This input value is the nominal sensible heat ratio used to split the heat extracted by a secondary DX coil (evaporator) of a heat pump into sensible and latent components. This is an optional input field. If this input field is left blank, then pure sensible internal heat gain is assumed, i.e., sensible heat ratio of 1.0.")]
public System.Single SpeedNominalSensibleHeatRatioOfSecondaryCoil { get; set; } = ;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the secondary DX coil (C) db = entering dry-bulb temperature seen by the primary DX coil (C) This input field is name of sensible heat ratio modifier biquadratic curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary zone air node wet-bulb temperature and the heating DX coil entering air dry-bulb temperature. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified in the field above will be used.")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the secondary DX coil (C) db = entering dry-bulb temperature seen by the primary DX coil (C) This input field is name of sensible heat ratio modifier biquadratic curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary zone air node wet-bulb temperature and the heating DX coil entering air dry-bulb temperature. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified in the field above will be used.")]
public System.String SpeedSensibleHeatRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = secondary air flow fraction of the full load flow This input field is name of sensible heat ratio modifier curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary coil air flow fraction. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified will be used.")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = secondary air flow fraction of the full load flow This input field is name of sensible heat ratio modifier curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary coil air flow fraction. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified will be used.")]
public System.String SpeedSensibleHeatRatioModifierFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"This input value is the secondary coil (evaporator) air flow rate when the heat pump is working in heating mode or the secondary DX coil (condenser) air flow rate when the heat pump is working in cooling mode.")]
[JsonProperty(@"This input value is the secondary coil (evaporator) air flow rate when the heat pump is working in heating mode or the secondary DX coil (condenser) air flow rate when the heat pump is working in cooling mode.")]
public System.String SpeedSecondaryCoilAirFlowRate { get; set; } = "";
        
[Description(@"This input field is scaling factor for autosizing the secondary DX coil fan flow rate. The secondary air flow rate is determined by multiplying the primary DX coil rated air flow rate by the fan flow scaling factor. Default value is 1.25. If the secondary coil fan flow rate is not autosized, then the secondary coil fan flow scaling factor is set to 1.0.")]
[JsonProperty(@"This input field is scaling factor for autosizing the secondary DX coil fan flow rate. The secondary air flow rate is determined by multiplying the primary DX coil rated air flow rate by the fan flow scaling factor. Default value is 1.25. If the secondary coil fan flow rate is not autosized, then the secondary coil fan flow scaling factor is set to 1.0.")]
public System.Single SpeedSecondaryCoilFanFlowScalingFactor { get; set; } = 1.25;
        
[Description(@"This input value is the nominal sensible heat ratio used to split the heat extracted by a secondary DX coil (evaporator) of a heat pump into sensible and latent components. This is an optional input field. If this input field is left blank, then pure sensible internal heat gain is assumed, i.e., sensible heat ratio of 1.0.")]
[JsonProperty(@"This input value is the nominal sensible heat ratio used to split the heat extracted by a secondary DX coil (evaporator) of a heat pump into sensible and latent components. This is an optional input field. If this input field is left blank, then pure sensible internal heat gain is assumed, i.e., sensible heat ratio of 1.0.")]
public System.Single SpeedNominalSensibleHeatRatioOfSecondaryCoil { get; set; } = ;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the secondary DX coil (C) db = entering dry-bulb temperature seen by the primary DX coil (C) This input field is name of sensible heat ratio modifier biquadratic curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary zone air node wet-bulb temperature and the heating DX coil entering air dry-bulb temperature. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified in the field above will be used.")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the secondary DX coil (C) db = entering dry-bulb temperature seen by the primary DX coil (C) This input field is name of sensible heat ratio modifier biquadratic curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary zone air node wet-bulb temperature and the heating DX coil entering air dry-bulb temperature. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified in the field above will be used.")]
public System.String SpeedSensibleHeatRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = secondary air flow fraction of the full load flow This input field is name of sensible heat ratio modifier curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary coil air flow fraction. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified will be used.")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = secondary air flow fraction of the full load flow This input field is name of sensible heat ratio modifier curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary coil air flow fraction. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified will be used.")]
public System.String SpeedSensibleHeatRatioModifierFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"This input value is the secondary coil (evaporator) air flow rate when the heat pump is working in heating mode or the secondary DX coil (condenser) air flow rate when the heat pump is working in cooling mode.")]
[JsonProperty(@"This input value is the secondary coil (evaporator) air flow rate when the heat pump is working in heating mode or the secondary DX coil (condenser) air flow rate when the heat pump is working in cooling mode.")]
public System.String SpeedSecondaryCoilAirFlowRate { get; set; } = "";
        
[Description(@"This input field is scaling factor for autosizing the secondary DX coil fan flow rate. The secondary air flow rate is determined by multiplying the primary DX coil rated air flow rate by the fan flow scaling factor. Default value is 1.25. If the secondary coil fan flow rate is not autosized, then the secondary coil fan flow scaling factor is set to 1.0.")]
[JsonProperty(@"This input field is scaling factor for autosizing the secondary DX coil fan flow rate. The secondary air flow rate is determined by multiplying the primary DX coil rated air flow rate by the fan flow scaling factor. Default value is 1.25. If the secondary coil fan flow rate is not autosized, then the secondary coil fan flow scaling factor is set to 1.0.")]
public System.Single SpeedSecondaryCoilFanFlowScalingFactor { get; set; } = 1.25;
        
[Description(@"This input value is the nominal sensible heat ratio used to split the heat extracted by a secondary DX coil (evaporator) of a heat pump into sensible and latent components. This is an optional input field. If this input field is left blank, then pure sensible internal heat gain is assumed, i.e., sensible heat ratio of 1.0.")]
[JsonProperty(@"This input value is the nominal sensible heat ratio used to split the heat extracted by a secondary DX coil (evaporator) of a heat pump into sensible and latent components. This is an optional input field. If this input field is left blank, then pure sensible internal heat gain is assumed, i.e., sensible heat ratio of 1.0.")]
public System.Single SpeedNominalSensibleHeatRatioOfSecondaryCoil { get; set; } = ;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the secondary DX coil (C) db = entering dry-bulb temperature seen by the primary DX coil (C) This input field is name of sensible heat ratio modifier biquadratic curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary zone air node wet-bulb temperature and the heating DX coil entering air dry-bulb temperature. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified in the field above will be used.")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db wb = entering wet-bulb temperature seen by the secondary DX coil (C) db = entering dry-bulb temperature seen by the primary DX coil (C) This input field is name of sensible heat ratio modifier biquadratic curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary zone air node wet-bulb temperature and the heating DX coil entering air dry-bulb temperature. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified in the field above will be used.")]
public System.String SpeedSensibleHeatRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = secondary air flow fraction of the full load flow This input field is name of sensible heat ratio modifier curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary coil air flow fraction. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified will be used.")]
[JsonProperty(@"quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = secondary air flow fraction of the full load flow This input field is name of sensible heat ratio modifier curve. The value of this curve modifies the nominal sensible heat ratio for current time step depending on the secondary coil air flow fraction. This is an optional input field. If this input field is left blank, then the nominal sensible heat ratio specified will be used.")]
public System.String SpeedSensibleHeatRatioModifierFunctionOfFlowFractionCurveName { get; set; } = "";
    }
    
    public enum DefrostStrategyType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Resistive")]
        Resistive = 1,
        
        [JsonProperty("ReverseCycle")]
        ReverseCycle = 2,
    }
    
    public enum DefrostControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("OnDemand")]
        OnDemand = 1,
        
        [JsonProperty("Timed")]
        Timed = 2,
    }
    
    public enum FuelTypeType
    {
        
        [JsonProperty("Diesel")]
        Diesel = 0,
        
        [JsonProperty("Electricity")]
        Electricity = 1,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 2,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 3,
        
        [JsonProperty("Gasoline")]
        Gasoline = 4,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 5,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 6,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 7,
        
        [JsonProperty("Propane")]
        Propane = 8,
    }
    
    [Description("Direct expansion (DX) heating coil (air-to-air heat pump) and compressor unit (in" +
        "cludes electric compressor and outdoor fan), variable-speed, with defrost contro" +
        "ls. Requires two to ten sets of performance data and will interpolate between sp" +
        "eeds.")]
    [JsonObject("Coil:Heating:DX:VariableSpeed")]
    public class Coil_Heating_DX_VariableSpeed
    {
        
[JsonProperty(@"")]
public System.String IndoorAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String IndoorAirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfSpeeds { get; set; } = 2;
        
[Description(@"must be lower than or equal to the highest speed number")]
[JsonProperty(@"must be lower than or equal to the highest speed number")]
public System.Single NominalSpeedLevel { get; set; } = 2;
        
[JsonProperty(@"")]
public System.String RatedHeatingCapacityAtSelectedNominalSpeedLevel { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String RatedAirFlowRateAtSelectedNominalSpeedLevel { get; set; } = (System.String)Autosize;
        
[Description(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (heating load/steady state capacity)")]
[JsonProperty(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (heating load/steady state capacity)")]
public System.String EnergyPartLoadFractionCurveName { get; set; } = "";
        
[Description(@"biquadratic curve = a + b*wb + c*wb**2 + d*oat + e*oat**2 + f*wb*oat wb = wet-bulb temperature (C) of air entering the indoor coil oat = outdoor air dry-bulb temperature (C) only required if ReverseCycle defrost strategy is specified")]
[JsonProperty(@"biquadratic curve = a + b*wb + c*wb**2 + d*oat + e*oat**2 + f*wb*oat wb = wet-bulb temperature (C) of air entering the indoor coil oat = outdoor air dry-bulb temperature (C) only required if ReverseCycle defrost strategy is specified")]
public System.String DefrostEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumOutdoorDryBulbTemperatureForCompressorOperation { get; set; } = -8;
        
[Description(@"The outdoor temperature when the compressor is automatically turned back on following an automatic shut off because of low outdoor dry-bulb temperature. This field is only used for the calculation of HSPF. If this field is not provided, then outdoor bin temperature used in the HSPF calculation is always considered to be greater than this temperature and 'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation' field described above. This assumption is based on AHRI standard 210/240 (2008) and can introduce significant error in the final value of HSPF.")]
[JsonProperty(@"The outdoor temperature when the compressor is automatically turned back on following an automatic shut off because of low outdoor dry-bulb temperature. This field is only used for the calculation of HSPF. If this field is not provided, then outdoor bin temperature used in the HSPF calculation is always considered to be greater than this temperature and 'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation' field described above. This assumption is based on AHRI standard 210/240 (2008) and can introduce significant error in the final value of HSPF.")]
public System.Single OutdoorDryBulbTemperatureToTurnOnCompressor { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumOutdoorDryBulbTemperatureForDefrostOperation { get; set; } = 5;
        
[JsonProperty(@"")]
public System.Single CrankcaseHeaterCapacity { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single MaximumOutdoorDryBulbTemperatureForCrankcaseHeaterOperation { get; set; } = 10;
        
[JsonProperty(@"")]
public YesNoDefault DefrostStrategy { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ReverseCycle");
        
[JsonProperty(@"")]
public YesNoDefault DefrostControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Timed");
        
[Description(@"Fraction of time in defrost mode only applicable if timed defrost control is specified")]
[JsonProperty(@"Fraction of time in defrost mode only applicable if timed defrost control is specified")]
public System.Single DefrostTimePeriodFraction { get; set; } = 0.058333;
        
[Description(@"only applicable if resistive defrost strategy is specified")]
[JsonProperty(@"only applicable if resistive defrost strategy is specified")]
public System.String ResistiveDefrostHeaterCapacity { get; set; } = (System.String)0;
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[Description(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[Description(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[Description(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[Description(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[Description(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[Description(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[Description(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[Description(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[Description(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[Description(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat db = entering air dry-bulb temperature (C) oat = air entering temperature seen by the evaporator (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
    }
    
    public enum DefrostStrategyType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Resistive")]
        Resistive = 1,
        
        [JsonProperty("ReverseCycle")]
        ReverseCycle = 2,
    }
    
    public enum DefrostControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("OnDemand")]
        OnDemand = 1,
        
        [JsonProperty("Timed")]
        Timed = 2,
    }
    
    [Description(@"Direct expansion (DX) cooling coil for water-to-air heat pump (includes electric compressor), single-speed, parameter estimation model. Optional inputs for moisture evaporation from wet coil when compressor cycles off with continuous fan operation. Parameter estimation model is a deterministic model that requires a consistent set of parameters to describe the operating conditions of the heat pump components.")]
    [JsonObject("Coil:Cooling:WaterToAirHeatPump:ParameterEstimation")]
    public class Coil_Cooling_WaterToAirHeatPump_ParameterEstimation
    {
        
[Description(@"Parameters 1-5 are as named below. Parameters 6-10 depend on the type of compressor and fluid. Refer to the InputOutputReference on the parameters required")]
[JsonProperty(@"Parameters 1-5 are as named below. Parameters 6-10 depend on the type of compressor and fluid. Refer to the InputOutputReference on the parameters required")]
public YesNoDefault CompressorType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String RefrigerantType { get; set; } = (System.String)R22;
        
[JsonProperty(@"")]
public System.Single DesignSourceSideFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NominalCoolingCoilCapacity { get; set; } = ;
        
[Description(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
[JsonProperty(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow rate and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
public System.Single NominalTimeForCondensateRemovalToBegin { get; set; } = 0;
        
[Description(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
[JsonProperty(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
public System.Single RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single HighPressureCutoff { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LowPressureCutoff { get; set; } = ;
        
[JsonProperty(@"")]
public System.String WaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Previously called Parameter 1")]
[JsonProperty(@"Previously called Parameter 1")]
public System.Single LoadSideTotalHeatTransferCoefficient { get; set; } = ;
        
[Description(@"Previously called Parameter 2")]
[JsonProperty(@"Previously called Parameter 2")]
public System.Single LoadSideOutsideSurfaceHeatTransferCoefficient { get; set; } = ;
        
[Description(@"Previously called Parameter 3")]
[JsonProperty(@"Previously called Parameter 3")]
public System.Single SuperheatTemperatureAtTheEvaporatorOutlet { get; set; } = ;
        
[Description(@"Accounts for the loss of work due to mechanical and electrical losses in the compressor. Previously called Parameter 4")]
[JsonProperty(@"Accounts for the loss of work due to mechanical and electrical losses in the compressor. Previously called Parameter 4")]
public System.Single CompressorPowerLosses { get; set; } = ;
        
[Description(@"Previously called Parameter 5")]
[JsonProperty(@"Previously called Parameter 5")]
public System.Single CompressorEfficiency { get; set; } = ;
        
[Description(@"Use when Compressor Type is Reciprocating or Rotary Leave this field blank for Compressor Type is Scroll. Previously part of Parameter 6")]
[JsonProperty(@"Use when Compressor Type is Reciprocating or Rotary Leave this field blank for Compressor Type is Scroll. Previously part of Parameter 6")]
public System.Single CompressorPistonDisplacement { get; set; } = ;
        
[Description(@"Used when Compressor Type is Rotary or Reciprocating Leave this field blank for Compressor Type is Scroll. Previously part of Parameter 7")]
[JsonProperty(@"Used when Compressor Type is Rotary or Reciprocating Leave this field blank for Compressor Type is Scroll. Previously part of Parameter 7")]
public System.Single CompressorSuctionDischargePressureDrop { get; set; } = ;
        
[Description(@"Used when Compressor Type is Reciprocating. Leave this field blank for Compressor Type is Rotary or Scroll. Previously part of Parameter 8")]
[JsonProperty(@"Used when Compressor Type is Reciprocating. Leave this field blank for Compressor Type is Rotary or Scroll. Previously part of Parameter 8")]
public System.Single CompressorClearanceFactor { get; set; } = ;
        
[Description(@"Use when Compressor Type is Scroll Leave this field blank for Compressor Type is Rotary or Reciprocating. Previously part of Parameter 6")]
[JsonProperty(@"Use when Compressor Type is Scroll Leave this field blank for Compressor Type is Rotary or Reciprocating. Previously part of Parameter 6")]
public System.Single RefrigerantVolumeFlowRate { get; set; } = ;
        
[Description(@"Use when Compressor Type is Scroll. Leave this field blank for Compressor Type is Rotary or Reciprocating. Previously part of Parameter 7")]
[JsonProperty(@"Use when Compressor Type is Scroll. Leave this field blank for Compressor Type is Rotary or Reciprocating. Previously part of Parameter 7")]
public System.Single VolumeRatio { get; set; } = ;
        
[Description(@"Use when Compressor Type is Scroll. Leave this field blank for Compressor Type is Rotary or Reciprocating. Previously part of Parameter 8")]
[JsonProperty(@"Use when Compressor Type is Scroll. Leave this field blank for Compressor Type is Rotary or Reciprocating. Previously part of Parameter 8")]
public System.Single LeakRateCoefficient { get; set; } = ;
        
[Description(@"Use when Source Side Fluid Name is Water Leave this field blank when Source Side Fluid Name is an antifreeze Previously part of Parameter 9")]
[JsonProperty(@"Use when Source Side Fluid Name is Water Leave this field blank when Source Side Fluid Name is an antifreeze Previously part of Parameter 9")]
public System.Single SourceSideHeatTransferCoefficient { get; set; } = ;
        
[Description(@"Use when Source Side Fluid Name is an antifreeze Leave this field blank for Source Side Fluid is Water Previously part of Parameter 9")]
[JsonProperty(@"Use when Source Side Fluid Name is an antifreeze Leave this field blank for Source Side Fluid is Water Previously part of Parameter 9")]
public System.Single SourceSideHeatTransferResistance { get; set; } = ;
        
[Description(@"Use when Source Side Fluid Name is an antifreeze Leave this field blank for Source Side Fluid is Water Previously part of Parameter 10")]
[JsonProperty(@"Use when Source Side Fluid Name is an antifreeze Leave this field blank for Source Side Fluid is Water Previously part of Parameter 10")]
public System.Single SourceSideHeatTransferResistance { get; set; } = ;
    }
    
    public enum CompressorTypeType
    {
        
        [JsonProperty("Reciprocating")]
        Reciprocating = 0,
        
        [JsonProperty("Rotary")]
        Rotary = 1,
        
        [JsonProperty("Scroll")]
        Scroll = 2,
    }
    
    [Description(@"Direct expansion (DX) heating coil for water-to-air heat pump (includes electric compressor), single-speed, parameter estimation model. Parameter estimation model is a deterministic model that requires a consistent set of parameters to describe the operating conditions of the heat pump components.")]
    [JsonObject("Coil:Heating:WaterToAirHeatPump:ParameterEstimation")]
    public class Coil_Heating_WaterToAirHeatPump_ParameterEstimation
    {
        
[Description(@"Parameters 1-4 are as named below. Parameters 5-9 depend on the type of compressor. Refer to the InputOutputReference on the parameters required")]
[JsonProperty(@"Parameters 1-4 are as named below. Parameters 5-9 depend on the type of compressor. Refer to the InputOutputReference on the parameters required")]
public YesNoDefault CompressorType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String RefrigerantType { get; set; } = (System.String)R22;
        
[JsonProperty(@"")]
public System.Single DesignSourceSideFlowRate { get; set; } = ;
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single GrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single HighPressureCutoff { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LowPressureCutoff { get; set; } = ;
        
[JsonProperty(@"")]
public System.String WaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Previously called Parameter 1")]
[JsonProperty(@"Previously called Parameter 1")]
public System.Single LoadSideTotalHeatTransferCoefficient { get; set; } = ;
        
[Description(@"Previously called Parameter 2")]
[JsonProperty(@"Previously called Parameter 2")]
public System.Single SuperheatTemperatureAtTheEvaporatorOutlet { get; set; } = ;
        
[Description(@"Accounts for the loss of work due to mechanical and electrical losses in the compressor. Previously called Parameter 3")]
[JsonProperty(@"Accounts for the loss of work due to mechanical and electrical losses in the compressor. Previously called Parameter 3")]
public System.Single CompressorPowerLosses { get; set; } = ;
        
[Description(@"Previously called Parameter 4")]
[JsonProperty(@"Previously called Parameter 4")]
public System.Single CompressorEfficiency { get; set; } = ;
        
[Description(@"Use when Compressor Type is Reciprocating or Rotary Leave this field blank for Compressor Type is Scroll. Previously part of Parameter 5")]
[JsonProperty(@"Use when Compressor Type is Reciprocating or Rotary Leave this field blank for Compressor Type is Scroll. Previously part of Parameter 5")]
public System.Single CompressorPistonDisplacement { get; set; } = ;
        
[Description(@"Used when Compressor Type is Rotary or Reciprocating Leave this field blank for Compressor Type is Scroll. Previously part of Parameter 6")]
[JsonProperty(@"Used when Compressor Type is Rotary or Reciprocating Leave this field blank for Compressor Type is Scroll. Previously part of Parameter 6")]
public System.Single CompressorSuctionDischargePressureDrop { get; set; } = ;
        
[Description(@"Used when Compressor Type is Reciprocating. Leave this field blank for Compressor Type is Rotary or Scroll. Previously part of Parameter 7")]
[JsonProperty(@"Used when Compressor Type is Reciprocating. Leave this field blank for Compressor Type is Rotary or Scroll. Previously part of Parameter 7")]
public System.Single CompressorClearanceFactor { get; set; } = ;
        
[Description(@"Use when Compressor Type is Scroll Leave this field blank for Compressor Type is Rotary or Reciprocating. Previously part of Parameter 5")]
[JsonProperty(@"Use when Compressor Type is Scroll Leave this field blank for Compressor Type is Rotary or Reciprocating. Previously part of Parameter 5")]
public System.Single RefrigerantVolumeFlowRate { get; set; } = ;
        
[Description(@"Use when Compressor Type is Scroll. Leave this field blank for Compressor Type is Rotary or Reciprocating. Previously part of Parameter 6")]
[JsonProperty(@"Use when Compressor Type is Scroll. Leave this field blank for Compressor Type is Rotary or Reciprocating. Previously part of Parameter 6")]
public System.Single VolumeRatio { get; set; } = ;
        
[Description(@"Use when Compressor Type is Scroll. Leave this field blank for Compressor Type is Rotary or Reciprocating. Previously part of Parameter 7")]
[JsonProperty(@"Use when Compressor Type is Scroll. Leave this field blank for Compressor Type is Rotary or Reciprocating. Previously part of Parameter 7")]
public System.Single LeakRateCoefficient { get; set; } = ;
        
[Description(@"Use when Source Side Fluid Name is Water Leave this field blank when Source Side Fluid is an antifreeze Previously part of Parameter 8")]
[JsonProperty(@"Use when Source Side Fluid Name is Water Leave this field blank when Source Side Fluid is an antifreeze Previously part of Parameter 8")]
public System.Single SourceSideHeatTransferCoefficient { get; set; } = ;
        
[Description(@"Use when Source Side Fluid Name is an antifreeze Leave this field blank for Source Side Fluid is Water Previously part of Parameter 8")]
[JsonProperty(@"Use when Source Side Fluid Name is an antifreeze Leave this field blank for Source Side Fluid is Water Previously part of Parameter 8")]
public System.Single SourceSideHeatTransferResistance { get; set; } = ;
        
[Description(@"Use when Source Side Fluid Name is an antifreeze Leave this field blank for Source Side Fluid is Water Previously part of Parameter 9")]
[JsonProperty(@"Use when Source Side Fluid Name is an antifreeze Leave this field blank for Source Side Fluid is Water Previously part of Parameter 9")]
public System.Single SourceSideHeatTransferResistance { get; set; } = ;
    }
    
    public enum CompressorTypeType
    {
        
        [JsonProperty("Reciprocating")]
        Reciprocating = 0,
        
        [JsonProperty("Rotary")]
        Rotary = 1,
        
        [JsonProperty("Scroll")]
        Scroll = 2,
    }
    
    [Description(@"Direct expansion (DX) cooling coil for water-to-air heat pump (includes electric compressor), single-speed, equation-fit model. Optional inputs for moisture evaporation from wet coil when compressor cycles off with continuous fan operation. Equation-fit model uses normalized curves to describe the heat pump performance.")]
    [JsonObject("Coil:Cooling:WaterToAirHeatPump:EquationFit")]
    public class Coil_Cooling_WaterToAirHeatPump_EquationFit
    {
        
[JsonProperty(@"")]
public System.String WaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String RatedAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String RatedWaterFlowRate { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.String GrossRatedTotalCoolingCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public System.String GrossRatedSensibleCoolingCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single GrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.String TotalCoolingCapacityCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SensibleCoolingCapacityCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoolingPowerConsumptionCurveName { get; set; } = "";
        
[Description(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
[JsonProperty(@"The nominal time for condensate to begin leaving the coil's condensate drain line at the coil's rated air flow and temperature conditions. Nominal time is equal to the ratio of the energy of the coil's maximum condensate holding capacity (J) to the coil's steady state latent capacity (W). Suggested value is 1000; zero value means latent degradation model is disabled.")]
public System.Single NominalTimeForCondensateRemovalToBegin { get; set; } = 0;
        
[Description(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
[JsonProperty(@"Ratio of the initial moisture evaporation rate from the cooling coil (when the compressor first turns off) and the coil's steady state latent capacity at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value means latent degradation model is disabled.")]
public System.Single RatioOfInitialMoistureEvaporationRateAndSteadyStateLatentCapacity { get; set; } = 0;
    }
    
    [Description(@"Direct expansion (DX) cooling coil for water-to-air heat pump (includes electric compressor), variable-speed, equation-fit model. Optional inputs for moisture evaporation from wet coil when compressor cycles off with continuous fan operation. Equation-fit model uses normalized curves to describe the heat pump performance. Requires two to ten sets of performance data and will interpolate between speeds. Modeled as a single coil with variable-speed compressor.")]
    [JsonObject("Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit")]
    public class Coil_Cooling_WaterToAirHeatPump_VariableSpeedEquationFit
    {
        
[JsonProperty(@"")]
public System.String WaterToRefrigerantHxWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterToRefrigerantHxWaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String IndoorAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String IndoorAirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfSpeeds { get; set; } = 2;
        
[Description(@"must be lower than or equal to the highest speed number")]
[JsonProperty(@"must be lower than or equal to the highest speed number")]
public System.Single NominalSpeedLevel { get; set; } = 2;
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.String GrossRatedTotalCoolingCapacityAtSelectedNominalSpeedLevel { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String RatedAirFlowRateAtSelectedNominalSpeedLevel { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String RatedWaterFlowRateAtSelectedNominalSpeedLevel { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single NominalTimeForCondensateToBeginLeavingTheCoil { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single InitialMoistureEvaporationRateDividedBySteadyStateAcLatentCapacity { get; set; } = 0;
        
[Description(@"Flag for using hot gas reheat, 0 - not used, 1 - used")]
[JsonProperty(@"Flag for using hot gas reheat, 0 - not used, 1 - used")]
public System.Single FlagForUsingHotGasReheatOr { get; set; } = 0;
        
[Description(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (cooling load/steady state capacity)")]
[JsonProperty(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (cooling load/steady state capacity)")]
public System.String EnergyPartLoadFractionCurveName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedEnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*wb + c*wb**2 + d*ewet + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*ewet + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedEnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedEnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedEnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedEnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedEnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedEnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedEnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedEnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedTotalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedSensibleHeatRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedCoolingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedTotalCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedTotalCoolingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedEnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"optional curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
    }
    
    [Description("Direct expansion (DX) heating coil for water-to-air heat pump (includes electric " +
        "compressor), single-speed, equation-fit model. Equation-fit model uses normalize" +
        "d curves to describe the heat pump performance.")]
    [JsonObject("Coil:Heating:WaterToAirHeatPump:EquationFit")]
    public class Coil_Heating_WaterToAirHeatPump_EquationFit
    {
        
[JsonProperty(@"")]
public System.String WaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String RatedAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String RatedWaterFlowRate { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.String GrossRatedHeatingCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single GrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.String HeatingCapacityCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatingPowerConsumptionCurveName { get; set; } = "";
    }
    
    [Description(@"Direct expansion (DX) heating coil for water-to-air heat pump (includes electric compressor), variable-speed, equation-fit model. Equation-fit model uses normalized curves to describe the heat pump performance. Requires two to ten sets of performance data and will interpolate between speeds.")]
    [JsonObject("Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit")]
    public class Coil_Heating_WaterToAirHeatPump_VariableSpeedEquationFit
    {
        
[JsonProperty(@"")]
public System.String WaterToRefrigerantHxWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterToRefrigerantHxWaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String IndoorAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String IndoorAirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfSpeeds { get; set; } = 2;
        
[Description(@"must be lower than or equal to the highest speed number")]
[JsonProperty(@"must be lower than or equal to the highest speed number")]
public System.Single NominalSpeedLevel { get; set; } = 2;
        
[JsonProperty(@"")]
public System.String RatedHeatingCapacityAtSelectedNominalSpeedLevel { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String RatedAirFlowRateAtSelectedNominalSpeedLevel { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String RatedWaterFlowRateAtSelectedNominalSpeedLevel { get; set; } = (System.String)Autosize;
        
[Description(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (heating load/steady state capacity)")]
[JsonProperty(@"quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (heating load/steady state capacity)")]
public System.String EnergyPartLoadFractionCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlow { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[Description(@"curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedHeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedEnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[Description(@"curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedHeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedEnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedHeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedEnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedHeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedEnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedHeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedEnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedHeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedEnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedHeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedEnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedHeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedEnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedHeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedEnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Heating capacity not accounting for the effect of supply air fan heat")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitGrossRatedHeatingCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedHeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalHeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedHeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedEnergyInputRatioFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"optional quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedEnergyInputRatioFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWasteHeatFractionOfInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
[JsonProperty(@"optional curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt db = entering air dry-bulb temperature (C) ewt = water entering temperature seen by the evaporator (C)")]
public System.String SpeedWasteHeatFunctionOfTemperatureCurveName { get; set; } = "";
    }
    
    [Description("Heat pump water heater (HPWH) heating coil, air-to-water direct-expansion (DX) sy" +
        "stem which includes a water heating coil, evaporator air coil, evaporator fan, e" +
        "lectric compressor, and water pump. Part of a WaterHeater:HeatPump:PumpedCondens" +
        "er system.")]
    [JsonObject("Coil:WaterHeating:AirToWaterHeatPump:Pumped")]
    public class Coil_WaterHeating_AirToWaterHeatPump_Pumped
    {
        
[Description(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
[JsonProperty(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
public System.Single RatedHeatingCapacity { get; set; } = ;
        
[Description(@"Heating coefficient of performance at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty(@"Heating coefficient of performance at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
public System.Single RatedCop { get; set; } = 3.2;
        
[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
public System.Single RatedSensibleHeatRatio { get; set; } = 0.85;
        
[Description(@"Evaporator inlet air dry-bulb temperature corresponding to rated coil performance (heating capacity, COP and SHR).")]
[JsonProperty(@"Evaporator inlet air dry-bulb temperature corresponding to rated coil performance (heating capacity, COP and SHR).")]
public System.Single RatedEvaporatorInletAirDryBulbTemperature { get; set; } = 19.7;
        
[Description(@"Evaporator inlet air wet-bulb temperature corresponding to rated coil performance (heating capacity, COP and SHR).")]
[JsonProperty(@"Evaporator inlet air wet-bulb temperature corresponding to rated coil performance (heating capacity, COP and SHR).")]
public System.Single RatedEvaporatorInletAirWetBulbTemperature { get; set; } = 13.5;
        
[Description(@"Condenser inlet water temperature corresponding to rated coil performance (heating capacity, COP and SHR).")]
[JsonProperty(@"Condenser inlet water temperature corresponding to rated coil performance (heating capacity, COP and SHR).")]
public System.Single RatedCondenserInletWaterTemperature { get; set; } = 57.5;
        
[Description(@"Evaporator air flow rate corresponding to rated coil performance (heating capacity, COP and SHR). Default is 5.035E-5 m3/s/W (31.25 cfm/MBH) of rated heating capacity when autocalculated.")]
[JsonProperty(@"Evaporator air flow rate corresponding to rated coil performance (heating capacity, COP and SHR). Default is 5.035E-5 m3/s/W (31.25 cfm/MBH) of rated heating capacity when autocalculated.")]
public System.String RatedEvaporatorAirFlowRate { get; set; } = "";
        
[Description(@"Condenser water flow rate corresponding to rated coil performance (heating capacity, COP and SHR). Default is 4.487E-8 m3/s/W (0.208 gpm/MBH) of rated heating capacity when autocalculated. A warning message will be issued if the ratio of Rated Condenser Water Flow Rate to Heating Capacity is less than 1.79405E-8 m3/s/W (0.083 gpm/MBH) or greater than 8.97024E-8 m3/s/W (0.417 gpm/MBH), but the simulation will continue.")]
[JsonProperty(@"Condenser water flow rate corresponding to rated coil performance (heating capacity, COP and SHR). Default is 4.487E-8 m3/s/W (0.208 gpm/MBH) of rated heating capacity when autocalculated. A warning message will be issued if the ratio of Rated Condenser Water Flow Rate to Heating Capacity is less than 1.79405E-8 m3/s/W (0.083 gpm/MBH) or greater than 8.97024E-8 m3/s/W (0.417 gpm/MBH), but the simulation will continue.")]
public System.String RatedCondenserWaterFlowRate { get; set; } = "";
        
[Description(@"Select Yes if the evaporator fan power is included in the rated COP. This choice field impacts the calculation of compressor electric power.")]
[JsonProperty(@"Select Yes if the evaporator fan power is included in the rated COP. This choice field impacts the calculation of compressor electric power.")]
public YesNoDefault EvaporatorFanPowerIncludedInRatedCop { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[Description(@"Select Yes if the condenser pump power is included in the rated COP. This choice field impacts the calculation of compressor electric power.")]
[JsonProperty(@"Select Yes if the condenser pump power is included in the rated COP. This choice field impacts the calculation of compressor electric power.")]
public YesNoDefault CondenserPumpPowerIncludedInRatedCop { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Select Yes if the condenser pump heat is included in the rated heating capacity and rated COP. This choice field impacts the calculation of water heating capacity.")]
[JsonProperty(@"Select Yes if the condenser pump heat is included in the rated heating capacity and rated COP. This choice field impacts the calculation of water heating capacity.")]
public YesNoDefault CondenserPumpHeatIncludedInRatedHeatingCapacityAndRatedCop { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"A warning message will be issued if the ratio of Condenser Water Pump Power to Rated Heating Capacity exceeds 0.1422 W/W (41.67 Watts/MBH), but the simulation will continue.")]
[JsonProperty(@"A warning message will be issued if the ratio of Condenser Water Pump Power to Rated Heating Capacity exceeds 0.1422 W/W (41.67 Watts/MBH), but the simulation will continue.")]
public System.Single CondenserWaterPumpPower { get; set; } = 0;
        
[Description(@"Fraction of pump heat transferred to the condenser water. The pump is assumed to be located downstream of the condenser.")]
[JsonProperty(@"Fraction of pump heat transferred to the condenser water. The pump is assumed to be located downstream of the condenser.")]
public System.Single FractionOfCondenserPumpHeatToWater { get; set; } = 0.2;
        
[Description(@"The node from which the DX coil draws its inlet air.")]
[JsonProperty(@"The node from which the DX coil draws its inlet air.")]
public System.String EvaporatorAirInletNodeName { get; set; } = "";
        
[Description(@"The node to which the DX coil sends its outlet air.")]
[JsonProperty(@"The node to which the DX coil sends its outlet air.")]
public System.String EvaporatorAirOutletNodeName { get; set; } = "";
        
[Description(@"The node from which the DX coil condenser draws its inlet water. This name should match the source side outlet node name in the associated water heater tank object.")]
[JsonProperty(@"The node from which the DX coil condenser draws its inlet water. This name should match the source side outlet node name in the associated water heater tank object.")]
public System.String CondenserWaterInletNodeName { get; set; } = "";
        
[Description(@"The node to which the DX coil condenser sends its outlet water. This name should match the source side inlet node name in the associated water heater tank object.")]
[JsonProperty(@"The node to which the DX coil condenser sends its outlet water. This name should match the source side inlet node name in the associated water heater tank object.")]
public System.String CondenserWaterOutletNodeName { get; set; } = "";
        
[Description(@"The compressor crankcase heater only operates when the dry-bulb temperature of air surrounding the compressor is below the Maximum Ambient Temperature for Crankcase Heater Operation and the DX coil is off. The ambient temperature surrounding the compressor is set by the WaterHeater:HeatPump:PumpedCondenser parent object (field Compressor Location).")]
[JsonProperty(@"The compressor crankcase heater only operates when the dry-bulb temperature of air surrounding the compressor is below the Maximum Ambient Temperature for Crankcase Heater Operation and the DX coil is off. The ambient temperature surrounding the compressor is set by the WaterHeater:HeatPump:PumpedCondenser parent object (field Compressor Location).")]
public System.Single CrankcaseHeaterCapacity { get; set; } = 0;
        
[Description(@"The compressor crankcase heater only operates when the dry-bulb temperature of air surrounding the compressor is below the Maximum Outdoor Temperature for Crankcase Heater Operation and the unit is off. The ambient temperature surrounding the compressor is set by the WaterHeater:HeatPump:PumpedCondenser parent object (field Compressor Location).")]
[JsonProperty(@"The compressor crankcase heater only operates when the dry-bulb temperature of air surrounding the compressor is below the Maximum Outdoor Temperature for Crankcase Heater Operation and the unit is off. The ambient temperature surrounding the compressor is set by the WaterHeater:HeatPump:PumpedCondenser parent object (field Compressor Location).")]
public System.Single MaximumAmbientTemperatureForCrankcaseHeaterOperation { get; set; } = 10;
        
[Description(@"Determines temperature type for heating capacity curves and heating COP curves. This input determines whether the inlet air dry-bulb or wet-bulb temperature is used to evaluate these curves.")]
[JsonProperty(@"Determines temperature type for heating capacity curves and heating COP curves. This input determines whether the inlet air dry-bulb or wet-bulb temperature is used to evaluate these curves.")]
public YesNoDefault EvaporatorAirTemperatureTypeForCurveObjects { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WetBulbTemperature");
        
[Description(@"Heating capacity modifier curve (function of temperature) should be biquadratic or cubic. Biquadratic curve = a + b(ta) + c(ta)^2 + d(tw) + e(tw)^2 + f(ta)(tw). Cubic curve = a + b(ta) + c(ta)^2 + d(ta)^3. ta = evaporator inlet air [dry-bulb or wet-bulb] temperature (C). tw = condenser inlet water temperature (C). The field Evaporator Air Temperature Type for Curve Objects determines if dry-bulb or wet-bulb is used as the evaporator inlet air temperature (ta).")]
[JsonProperty(@"Heating capacity modifier curve (function of temperature) should be biquadratic or cubic. Biquadratic curve = a + b(ta) + c(ta)^2 + d(tw) + e(tw)^2 + f(ta)(tw). Cubic curve = a + b(ta) + c(ta)^2 + d(ta)^3. ta = evaporator inlet air [dry-bulb or wet-bulb] temperature (C). tw = condenser inlet water temperature (C). The field Evaporator Air Temperature Type for Curve Objects determines if dry-bulb or wet-bulb is used as the evaporator inlet air temperature (ta).")]
public System.String HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Heating capacity modifier curve (function of air flow fraction) should be quadratic or cubic. Quadratic curve = a + b(ff) + c(ff)^2. Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3. ff = fraction of the rated evaporator air flow rate. Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in air flow rate fraction.")]
[JsonProperty(@"Heating capacity modifier curve (function of air flow fraction) should be quadratic or cubic. Quadratic curve = a + b(ff) + c(ff)^2. Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3. ff = fraction of the rated evaporator air flow rate. Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in air flow rate fraction.")]
public System.String HeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating capacity modifier curve (function of water flow fraction) should be quadratic or cubic. Quadratic curve = a + b(ff) + c(ff)^2. Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3. ff = fraction of the rated condenser water flow rate. Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in water flow rate fraction.")]
[JsonProperty(@"Heating capacity modifier curve (function of water flow fraction) should be quadratic or cubic. Quadratic curve = a + b(ff) + c(ff)^2. Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3. ff = fraction of the rated condenser water flow rate. Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in water flow rate fraction.")]
public System.String HeatingCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating COP modifier curve (function of temperature) should be biquadratic or cubic. Biquadratic curve = a + b(ta) + c(ta)^2 + d(tw) + e(tw)^2 + f(ta)(tw). Cubic curve = a + b(ta) + c(ta)^2 + d(ta)^3. ta = evaporator inlet air [dry-bulb or wet-bulb] temperature (C). tw = condenser inlet water temperature (C). The field Evaporator Air Temperature Type for Curve Objects determines if dry-bulb or wet-bulb is used as the evaporator inlet air temperature (ta).")]
[JsonProperty(@"Heating COP modifier curve (function of temperature) should be biquadratic or cubic. Biquadratic curve = a + b(ta) + c(ta)^2 + d(tw) + e(tw)^2 + f(ta)(tw). Cubic curve = a + b(ta) + c(ta)^2 + d(ta)^3. ta = evaporator inlet air [dry-bulb or wet-bulb] temperature (C). tw = condenser inlet water temperature (C). The field Evaporator Air Temperature Type for Curve Objects determines if dry-bulb or wet-bulb is used as the evaporator inlet air temperature (ta).")]
public System.String HeatingCopFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Heating COP modifier curve (function of air flow fraction) should be quadratic or cubic. Quadratic curve = a + b(ff) + c(ff)^2. Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3. ff = fraction of the rated evaporator air flow rate. Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in air flow rate fraction.")]
[JsonProperty(@"Heating COP modifier curve (function of air flow fraction) should be quadratic or cubic. Quadratic curve = a + b(ff) + c(ff)^2. Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3. ff = fraction of the rated evaporator air flow rate. Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in air flow rate fraction.")]
public System.String HeatingCopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating COP modifier curve (function of water flow fraction) should be quadratic or cubic. Quadratic curve = a + b(ff) + c(ff)^2. Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3. ff = fraction of the rated condenser water flow rate. Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in water flow rate fraction.")]
[JsonProperty(@"Heating COP modifier curve (function of water flow fraction) should be quadratic or cubic. Quadratic curve = a + b(ff) + c(ff)^2. Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3. ff = fraction of the rated condenser water flow rate. Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in water flow rate fraction.")]
public System.String HeatingCopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Part Load Fraction Correlation (function of part load ratio) should be quadratic or cubic. Quadratic curve = a + b(PLR) + c(PLR)^2. Cubic curve = a + b(PLR) + c(PLR)^2 + d(PLR)^3. PLR = part load ratio (heating delivered/steady state heating capacity). Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in part load ratio.")]
[JsonProperty(@"Part Load Fraction Correlation (function of part load ratio) should be quadratic or cubic. Quadratic curve = a + b(PLR) + c(PLR)^2. Cubic curve = a + b(PLR) + c(PLR)^2 + d(PLR)^3. PLR = part load ratio (heating delivered/steady state heating capacity). Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in part load ratio.")]
public System.String PartLoadFractionCorrelationCurveName { get; set; } = "";
    }
    
    public enum EvaporatorAirTemperatureTypeForCurveObjectsType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DryBulbTemperature")]
        DryBulbTemperature = 1,
        
        [JsonProperty("WetBulbTemperature")]
        WetBulbTemperature = 2,
    }
    
    [Description("Heat pump water heater (HPWH) heating coil, air-to-water direct-expansion (DX) sy" +
        "stem which includes a water heating coil, evaporator air coil, evaporator fan, e" +
        "lectric compressor, and water pump. Part of a WaterHeater:HeatPump:WrappedConden" +
        "ser system.")]
    [JsonObject("Coil:WaterHeating:AirToWaterHeatPump:Wrapped")]
    public class Coil_WaterHeating_AirToWaterHeatPump_Wrapped
    {
        
[Description(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
[JsonProperty(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
public System.Single RatedHeatingCapacity { get; set; } = ;
        
[Description(@"Heating coefficient of performance at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty(@"Heating coefficient of performance at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
public System.Single RatedCop { get; set; } = 3.2;
        
[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
public System.Single RatedSensibleHeatRatio { get; set; } = 0.85;
        
[Description(@"Evaporator inlet air dry-bulb temperature corresponding to rated coil performance (heating capacity, COP and SHR).")]
[JsonProperty(@"Evaporator inlet air dry-bulb temperature corresponding to rated coil performance (heating capacity, COP and SHR).")]
public System.Single RatedEvaporatorInletAirDryBulbTemperature { get; set; } = 19.7;
        
[Description(@"Evaporator inlet air wet-bulb temperature corresponding to rated coil performance (heating capacity, COP and SHR).")]
[JsonProperty(@"Evaporator inlet air wet-bulb temperature corresponding to rated coil performance (heating capacity, COP and SHR).")]
public System.Single RatedEvaporatorInletAirWetBulbTemperature { get; set; } = 13.5;
        
[Description(@"Condenser inlet water temperature corresponding to rated coil performance (heating capacity, COP and SHR).")]
[JsonProperty(@"Condenser inlet water temperature corresponding to rated coil performance (heating capacity, COP and SHR).")]
public System.Single RatedCondenserWaterTemperature { get; set; } = 57.5;
        
[Description(@"Evaporator air flow rate corresponding to rated coil performance (heating capacity, COP and SHR). Default is 5.035E-5 m3/s/W (31.25 cfm/MBH) of rated heating capacity when autocalculated.")]
[JsonProperty(@"Evaporator air flow rate corresponding to rated coil performance (heating capacity, COP and SHR). Default is 5.035E-5 m3/s/W (31.25 cfm/MBH) of rated heating capacity when autocalculated.")]
public System.String RatedEvaporatorAirFlowRate { get; set; } = "";
        
[Description(@"Select Yes if the evaporator fan power is included in the rated COP. This choice field impacts the calculation of compressor electric power.")]
[JsonProperty(@"Select Yes if the evaporator fan power is included in the rated COP. This choice field impacts the calculation of compressor electric power.")]
public YesNoDefault EvaporatorFanPowerIncludedInRatedCop { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[Description(@"The node from which the DX coil draws its inlet air.")]
[JsonProperty(@"The node from which the DX coil draws its inlet air.")]
public System.String EvaporatorAirInletNodeName { get; set; } = "";
        
[Description(@"The node to which the DX coil sends its outlet air.")]
[JsonProperty(@"The node to which the DX coil sends its outlet air.")]
public System.String EvaporatorAirOutletNodeName { get; set; } = "";
        
[Description(@"The compressor crankcase heater only operates when the dry-bulb temperature of air surrounding the compressor is below the Maximum Ambient Temperature for Crankcase Heater Operation and the DX coil is off. The ambient temperature surrounding the compressor is set by the WaterHeater:HeatPump:WrappedCondenser parent object (field Compressor Location).")]
[JsonProperty(@"The compressor crankcase heater only operates when the dry-bulb temperature of air surrounding the compressor is below the Maximum Ambient Temperature for Crankcase Heater Operation and the DX coil is off. The ambient temperature surrounding the compressor is set by the WaterHeater:HeatPump:WrappedCondenser parent object (field Compressor Location).")]
public System.Single CrankcaseHeaterCapacity { get; set; } = 0;
        
[Description(@"The compressor crankcase heater only operates when the dry-bulb temperature of air surrounding the compressor is below the Maximum Outdoor Temperature for Crankcase Heater Operation and the unit is off. The ambient temperature surrounding the compressor is set by the WaterHeater:HeatPump:WrappedCondenser parent object (field Compressor Location).")]
[JsonProperty(@"The compressor crankcase heater only operates when the dry-bulb temperature of air surrounding the compressor is below the Maximum Outdoor Temperature for Crankcase Heater Operation and the unit is off. The ambient temperature surrounding the compressor is set by the WaterHeater:HeatPump:WrappedCondenser parent object (field Compressor Location).")]
public System.Single MaximumAmbientTemperatureForCrankcaseHeaterOperation { get; set; } = 10;
        
[Description(@"Determines temperature type for heating capacity curves and heating COP curves. This input determines whether the inlet air dry-bulb or wet-bulb temperature is used to evaluate these curves.")]
[JsonProperty(@"Determines temperature type for heating capacity curves and heating COP curves. This input determines whether the inlet air dry-bulb or wet-bulb temperature is used to evaluate these curves.")]
public YesNoDefault EvaporatorAirTemperatureTypeForCurveObjects { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WetBulbTemperature");
        
[Description(@"Heating capacity modifier curve (function of temperature) should be biquadratic or cubic. Biquadratic curve = a + b(ta) + c(ta)^2 + d(tw) + e(tw)^2 + f(ta)(tw). Cubic curve = a + b(ta) + c(ta)^2 + d(ta)^3. ta = evaporator inlet air [dry-bulb or wet-bulb] temperature (C). tw = condenser inlet water temperature (C). The field Evaporator Air Temperature Type for Curve Objects determines if dry-bulb or wet-bulb is used as the evaporator inlet air temperature (ta).")]
[JsonProperty(@"Heating capacity modifier curve (function of temperature) should be biquadratic or cubic. Biquadratic curve = a + b(ta) + c(ta)^2 + d(tw) + e(tw)^2 + f(ta)(tw). Cubic curve = a + b(ta) + c(ta)^2 + d(ta)^3. ta = evaporator inlet air [dry-bulb or wet-bulb] temperature (C). tw = condenser inlet water temperature (C). The field Evaporator Air Temperature Type for Curve Objects determines if dry-bulb or wet-bulb is used as the evaporator inlet air temperature (ta).")]
public System.String HeatingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Heating capacity modifier curve (function of air flow fraction) should be quadratic or cubic. Quadratic curve = a + b(ff) + c(ff)^2. Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3. ff = fraction of the rated evaporator air flow rate. Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in air flow rate fraction.")]
[JsonProperty(@"Heating capacity modifier curve (function of air flow fraction) should be quadratic or cubic. Quadratic curve = a + b(ff) + c(ff)^2. Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3. ff = fraction of the rated evaporator air flow rate. Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in air flow rate fraction.")]
public System.String HeatingCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating COP modifier curve (function of temperature) should be biquadratic or cubic. Biquadratic curve = a + b(ta) + c(ta)^2 + d(tw) + e(tw)^2 + f(ta)(tw). Cubic curve = a + b(ta) + c(ta)^2 + d(ta)^3. ta = evaporator inlet air [dry-bulb or wet-bulb] temperature (C). tw = condenser inlet water temperature (C). The field Evaporator Air Temperature Type for Curve Objects determines if dry-bulb or wet-bulb is used as the evaporator inlet air temperature (ta).")]
[JsonProperty(@"Heating COP modifier curve (function of temperature) should be biquadratic or cubic. Biquadratic curve = a + b(ta) + c(ta)^2 + d(tw) + e(tw)^2 + f(ta)(tw). Cubic curve = a + b(ta) + c(ta)^2 + d(ta)^3. ta = evaporator inlet air [dry-bulb or wet-bulb] temperature (C). tw = condenser inlet water temperature (C). The field Evaporator Air Temperature Type for Curve Objects determines if dry-bulb or wet-bulb is used as the evaporator inlet air temperature (ta).")]
public System.String HeatingCopFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Heating COP modifier curve (function of air flow fraction) should be quadratic or cubic. Quadratic curve = a + b(ff) + c(ff)^2. Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3. ff = fraction of the rated evaporator air flow rate. Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in air flow rate fraction.")]
[JsonProperty(@"Heating COP modifier curve (function of air flow fraction) should be quadratic or cubic. Quadratic curve = a + b(ff) + c(ff)^2. Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3. ff = fraction of the rated evaporator air flow rate. Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in air flow rate fraction.")]
public System.String HeatingCopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Part Load Fraction Correlation (function of part load ratio) should be quadratic or cubic. Quadratic curve = a + b(PLR) + c(PLR)^2. Cubic curve = a + b(PLR) + c(PLR)^2 + d(PLR)^3. PLR = part load ratio (heating delivered/steady state heating capacity). Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in part load ratio.")]
[JsonProperty(@"Part Load Fraction Correlation (function of part load ratio) should be quadratic or cubic. Quadratic curve = a + b(PLR) + c(PLR)^2. Cubic curve = a + b(PLR) + c(PLR)^2 + d(PLR)^3. PLR = part load ratio (heating delivered/steady state heating capacity). Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in part load ratio.")]
public System.String PartLoadFractionCorrelationCurveName { get; set; } = "";
    }
    
    public enum EvaporatorAirTemperatureTypeForCurveObjectsType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DryBulbTemperature")]
        DryBulbTemperature = 1,
        
        [JsonProperty("WetBulbTemperature")]
        WetBulbTemperature = 2,
    }
    
    [Description(@"vairlable-speed Heat pump water heater (VSHPWH) heating coil, air-to-water direct-expansion (DX) system which includes a variable-speed water heating coil, evaporator air coil, evaporator fan, electric compressor, and water pump. Part of a WaterHeater:HeatPump system.")]
    [JsonObject("Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed")]
    public class Coil_WaterHeating_AirToWaterHeatPump_VariableSpeed
    {
        
[JsonProperty(@"")]
public System.Single NumberOfSpeeds { get; set; } = 1;
        
[Description(@"must be lower than or equal to the highest speed number")]
[JsonProperty(@"must be lower than or equal to the highest speed number")]
public System.Single NominalSpeedLevel { get; set; } = 1;
        
[Description(@"Water Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
[JsonProperty(@"Water Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
public System.Single RatedWaterHeatingCapacity { get; set; } = ;
        
[Description(@"Evaporator inlet air dry-bulb temperature corresponding to rated coil performance (heating capacity, COP and SHR).")]
[JsonProperty(@"Evaporator inlet air dry-bulb temperature corresponding to rated coil performance (heating capacity, COP and SHR).")]
public System.Single RatedEvaporatorInletAirDryBulbTemperature { get; set; } = 19.7;
        
[Description(@"Evaporator inlet air wet-bulb temperature corresponding to rated coil performance (heating capacity, COP and SHR).")]
[JsonProperty(@"Evaporator inlet air wet-bulb temperature corresponding to rated coil performance (heating capacity, COP and SHR).")]
public System.Single RatedEvaporatorInletAirWetBulbTemperature { get; set; } = 13.5;
        
[Description(@"Condenser inlet water temperature corresponding to rated coil performance (heating capacity, COP and SHR).")]
[JsonProperty(@"Condenser inlet water temperature corresponding to rated coil performance (heating capacity, COP and SHR).")]
public System.Single RatedCondenserInletWaterTemperature { get; set; } = 57.5;
        
[Description(@"Evaporator air flow rate corresponding to rated coil performance (heating capacity, COP and SHR). Default is 5.035E-5 m3/s/W (31.25 cfm/MBH) of rated heating capacity when autocalculated.")]
[JsonProperty(@"Evaporator air flow rate corresponding to rated coil performance (heating capacity, COP and SHR). Default is 5.035E-5 m3/s/W (31.25 cfm/MBH) of rated heating capacity when autocalculated.")]
public System.String RatedEvaporatorAirFlowRate { get; set; } = "";
        
[Description(@"Condenser water flow rate corresponding to rated coil performance (heating capacity, COP and SHR). Default is 4.487E-8 m3/s/W (0.208 gpm/MBH) of rated heating capacity when autocalculated. A warning message will be issued if the ratio of Rated Condenser Water Flow Rate to Heating Capacity is less than 1.79405E-8 m3/s/W (0.083 gpm/MBH) or greater than 8.97024E-8 m3/s/W (0.417 gpm/MBH), but the simulation will continue.")]
[JsonProperty(@"Condenser water flow rate corresponding to rated coil performance (heating capacity, COP and SHR). Default is 4.487E-8 m3/s/W (0.208 gpm/MBH) of rated heating capacity when autocalculated. A warning message will be issued if the ratio of Rated Condenser Water Flow Rate to Heating Capacity is less than 1.79405E-8 m3/s/W (0.083 gpm/MBH) or greater than 8.97024E-8 m3/s/W (0.417 gpm/MBH), but the simulation will continue.")]
public System.String RatedCondenserWaterFlowRate { get; set; } = "";
        
[Description(@"Select Yes if the evaporator fan power is included in the rated COP. This choice field impacts the calculation of compressor electric power.")]
[JsonProperty(@"Select Yes if the evaporator fan power is included in the rated COP. This choice field impacts the calculation of compressor electric power.")]
public YesNoDefault EvaporatorFanPowerIncludedInRatedCop { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[Description(@"Select Yes if the condenser pump power is included in the rated COP. This choice field impacts the calculation of compressor electric power.")]
[JsonProperty(@"Select Yes if the condenser pump power is included in the rated COP. This choice field impacts the calculation of compressor electric power.")]
public YesNoDefault CondenserPumpPowerIncludedInRatedCop { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Select Yes if the condenser pump heat is included in the rated heating capacity and rated COP. This choice field impacts the calculation of water heating capacity.")]
[JsonProperty(@"Select Yes if the condenser pump heat is included in the rated heating capacity and rated COP. This choice field impacts the calculation of water heating capacity.")]
public YesNoDefault CondenserPumpHeatIncludedInRatedHeatingCapacityAndRatedCop { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Fraction of pump heat transferred to the condenser water. The pump is assumed to be located downstream of the condenser.")]
[JsonProperty(@"Fraction of pump heat transferred to the condenser water. The pump is assumed to be located downstream of the condenser.")]
public System.Single FractionOfCondenserPumpHeatToWater { get; set; } = 0.2;
        
[Description(@"The node from which the DX coil draws its inlet air.")]
[JsonProperty(@"The node from which the DX coil draws its inlet air.")]
public System.String EvaporatorAirInletNodeName { get; set; } = "";
        
[Description(@"The node to which the DX coil sends its outlet air.")]
[JsonProperty(@"The node to which the DX coil sends its outlet air.")]
public System.String EvaporatorAirOutletNodeName { get; set; } = "";
        
[Description(@"The node from which the DX coil condenser draws its inlet water. This name should match the source side outlet node name in the associated water heater tank object.")]
[JsonProperty(@"The node from which the DX coil condenser draws its inlet water. This name should match the source side outlet node name in the associated water heater tank object.")]
public System.String CondenserWaterInletNodeName { get; set; } = "";
        
[Description(@"The node to which the DX coil condenser sends its outlet water. This name should match the source side inlet node name in the associated water heater tank object.")]
[JsonProperty(@"The node to which the DX coil condenser sends its outlet water. This name should match the source side inlet node name in the associated water heater tank object.")]
public System.String CondenserWaterOutletNodeName { get; set; } = "";
        
[Description(@"The compressor crankcase heater only operates when the dry-bulb temperature of air surrounding the compressor is below the Maximum Ambient Temperature for Crankcase Heater Operation and the DX coil is off. The ambient temperature surrounding the compressor is set by the WaterHeater:HeatPump parent object (field Compressor Location).")]
[JsonProperty(@"The compressor crankcase heater only operates when the dry-bulb temperature of air surrounding the compressor is below the Maximum Ambient Temperature for Crankcase Heater Operation and the DX coil is off. The ambient temperature surrounding the compressor is set by the WaterHeater:HeatPump parent object (field Compressor Location).")]
public System.Single CrankcaseHeaterCapacity { get; set; } = 0;
        
[Description(@"The compressor crankcase heater only operates when the dry-bulb temperature of air surrounding the compressor is below the Maximum Outdoor Temperature for Crankcase Heater Operation and the unit is off. The ambient temperature surrounding the compressor is set by the WaterHeater:HeatPump parent object (field Compressor Location).")]
[JsonProperty(@"The compressor crankcase heater only operates when the dry-bulb temperature of air surrounding the compressor is below the Maximum Outdoor Temperature for Crankcase Heater Operation and the unit is off. The ambient temperature surrounding the compressor is set by the WaterHeater:HeatPump parent object (field Compressor Location).")]
public System.Single MaximumAmbientTemperatureForCrankcaseHeaterOperation { get; set; } = 10;
        
[Description(@"Determines temperature type for heating capacity curves and heating COP curves. This input determines whether the inlet air dry-bulb or wet-bulb temperature is used to evaluate these curves.")]
[JsonProperty(@"Determines temperature type for heating capacity curves and heating COP curves. This input determines whether the inlet air dry-bulb or wet-bulb temperature is used to evaluate these curves.")]
public YesNoDefault EvaporatorAirTemperatureTypeForCurveObjects { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WetBulbTemperature");
        
[Description(@"Table:Lookup object can also be used Part Load Fraction Correlation (function of part load ratio) should be quadratic or cubic. Quadratic curve = a + b(PLR) + c(PLR)^2. Cubic curve = a + b(PLR) + c(PLR)^2 + d(PLR)^3. PLR = part load ratio (heating delivered/steady state heating capacity). Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in part load ratio.")]
[JsonProperty(@"Table:Lookup object can also be used Part Load Fraction Correlation (function of part load ratio) should be quadratic or cubic. Quadratic curve = a + b(PLR) + c(PLR)^2. Cubic curve = a + b(PLR) + c(PLR)^2 + d(PLR)^3. PLR = part load ratio (heating delivered/steady state heating capacity). Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts due to variations in part load ratio.")]
public System.String PartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
[JsonProperty(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
public System.Single RatedWaterHeatingCapacityAtSpeed { get; set; } = ;
        
[Description(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
public System.Single RatedWaterHeatingCopAtSpeed { get; set; } = 3.2;
        
[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
public System.Single RatedSensibleHeatRatioAtSpeed { get; set; } = 0.85;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWaterPumpInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedTotalWhCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalWhCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedTotalWhCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedCopFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedCopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedCopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
[JsonProperty(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
public System.Single RatedWaterHeatingCapacityAtSpeed { get; set; } = ;
        
[Description(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
public System.Single RatedWaterHeatingCopAtSpeed { get; set; } = 3.2;
        
[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
public System.Single RatedSensibleHeatRatioAtSpeed { get; set; } = 0.85;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWaterPumpInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedTotalWhCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalWhCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedTotalWhCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedCopFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedCopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedCopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
[JsonProperty(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
public System.Single RatedWaterHeatingCapacityAtSpeed { get; set; } = ;
        
[Description(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
public System.Single RatedWaterHeatingCopAtSpeed { get; set; } = 3.2;
        
[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
public System.Single RatedSensibleHeatRatioAtSpeed { get; set; } = 0.85;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWaterPumpInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedTotalWhCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalWhCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedTotalWhCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedCopFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedCopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedCopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
[JsonProperty(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
public System.Single RatedWaterHeatingCapacityAtSpeed { get; set; } = ;
        
[Description(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
public System.Single RatedWaterHeatingCopAtSpeed { get; set; } = 3.2;
        
[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
public System.Single RatedSensibleHeatRatioAtSpeed { get; set; } = 0.85;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWaterPumpInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedTotalWhCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalWhCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedTotalWhCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedCopFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedCopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedCopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
[JsonProperty(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
public System.Single RatedWaterHeatingCapacityAtSpeed { get; set; } = ;
        
[Description(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
public System.Single RatedWaterHeatingCopAtSpeed { get; set; } = 3.2;
        
[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
public System.Single RatedSensibleHeatRatioAtSpeed { get; set; } = 0.85;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWaterPumpInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedTotalWhCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalWhCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedTotalWhCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedCopFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedCopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedCopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
[JsonProperty(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
public System.Single RatedWaterHeatingCapacityAtSpeed { get; set; } = ;
        
[Description(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
public System.Single RatedWaterHeatingCopAtSpeed { get; set; } = 3.2;
        
[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
public System.Single RatedSensibleHeatRatioAtSpeed { get; set; } = 0.85;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWaterPumpInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedTotalWhCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalWhCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedTotalWhCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedCopFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedCopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedCopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
[JsonProperty(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
public System.Single RatedWaterHeatingCapacityAtSpeed { get; set; } = ;
        
[Description(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
public System.Single RatedWaterHeatingCopAtSpeed { get; set; } = 3.2;
        
[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
public System.Single RatedSensibleHeatRatioAtSpeed { get; set; } = 0.85;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWaterPumpInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedTotalWhCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalWhCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedTotalWhCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedCopFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedCopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedCopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
[JsonProperty(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
public System.Single RatedWaterHeatingCapacityAtSpeed { get; set; } = ;
        
[Description(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
public System.Single RatedWaterHeatingCopAtSpeed { get; set; } = 3.2;
        
[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
public System.Single RatedSensibleHeatRatioAtSpeed { get; set; } = 0.85;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWaterPumpInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedTotalWhCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalWhCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedTotalWhCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedCopFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedCopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedCopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
[JsonProperty(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
public System.Single RatedWaterHeatingCapacityAtSpeed { get; set; } = ;
        
[Description(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
public System.Single RatedWaterHeatingCopAtSpeed { get; set; } = 3.2;
        
[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
public System.Single RatedSensibleHeatRatioAtSpeed { get; set; } = 0.85;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWaterPumpInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedTotalWhCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalWhCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedTotalWhCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedCopFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedCopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedCopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
[JsonProperty(@"Heating capacity at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump heat.")]
public System.Single RatedWaterHeatingCapacityAtSpeed { get; set; } = ;
        
[Description(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
[JsonProperty(@"Heating coefficient of performance at the rated inlet air and water temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Can optionally include condenser pump power and evaporator fan power (see fields below).")]
public System.Single RatedWaterHeatingCopAtSpeed { get; set; } = 3.2;
        
[Description(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
[JsonProperty(@"Gross air-side sensible heat ratio at the rated inlet air temperatures, rated condenser inlet water temperature, rated air flow rate, and rated water flow rate. Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling and dehumidification by the coil alone.")]
public System.Single RatedSensibleHeatRatioAtSpeed { get; set; } = 0.85;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitRatedWaterFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpeedReferenceUnitWaterPumpInputPowerAtRatedConditions { get; set; } = ;
        
[Description(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedTotalWhCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedTotalWhCapacityFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedTotalWhCapacityFunctionOfWaterFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
[JsonProperty(@"Table:Lookup object can also be used curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt wb = entering wet-bulb temperature or dry bulb temperature upon selection (C) ewt = water entering temperature seen by the condenser (C)")]
public System.String SpeedCopFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffa + c*ffa**2 cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3 ffa = Fraction of the full load Air Flow")]
public System.String SpeedCopFunctionOfAirFlowFractionCurveName { get; set; } = "";
        
[Description(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
[JsonProperty(@"Table:Lookup object can also be used quadratic curve = a + b*ffw + c*ffw**2 cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3 ffw = Fraction of the full load Water Flow")]
public System.String SpeedCopFunctionOfWaterFlowFractionCurveName { get; set; } = "";
    }
    
    public enum EvaporatorAirTemperatureTypeForCurveObjectsType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DryBulbTemperature")]
        DryBulbTemperature = 1,
        
        [JsonProperty("WetBulbTemperature")]
        WetBulbTemperature = 2,
    }
    
    [Description(@"Desuperheater air heating coil. The heating energy provided by this coil is reclaimed from the superheated refrigerant gas leaving a compressor and does not impact the performance of the compressor. This coil must be used with a water heater tank, see Water Heater:Mixed.")]
    [JsonObject("Coil:WaterHeating:Desuperheater")]
    public class Coil_WaterHeating_Desuperheater
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Schedule values of 0 denote the desuperheater heating coil is off and the parasitic electric energy is also off.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Schedule values of 0 denote the desuperheater heating coil is off and the parasitic electric energy is also off.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Defines the cut-out temperature where the desuperheater water heating coil turns off. The desuperheater heating coil setpoint temperature should always be greater than the water tank's heater (element or burner) setpoint temperature. Temperature schedule values should be in degrees C.")]
[JsonProperty(@"Defines the cut-out temperature where the desuperheater water heating coil turns off. The desuperheater heating coil setpoint temperature should always be greater than the water tank's heater (element or burner) setpoint temperature. Temperature schedule values should be in degrees C.")]
public System.String SetpointTemperatureScheduleName { get; set; } = "";
        
[Description(@"Setpoint temperature minus the dead band temperature difference defines the cut-in temperature where the desuperheater water heating coil turns on. The water tank's heater (element or burner) setpoint temperature should always be less than the desuperheater heating coil cut-in temperature.")]
[JsonProperty(@"Setpoint temperature minus the dead band temperature difference defines the cut-in temperature where the desuperheater water heating coil turns on. The water tank's heater (element or burner) setpoint temperature should always be less than the desuperheater heating coil cut-in temperature.")]
public System.Single DeadBandTemperatureDifference { get; set; } = 5;
        
[Description(@"Enter the fraction of waste heat reclaimed by the desuperheater water heating coil.")]
[JsonProperty(@"Enter the fraction of waste heat reclaimed by the desuperheater water heating coil.")]
public System.Single RatedHeatReclaimRecoveryEfficiency { get; set; } = ;
        
[Description(@"The inlet water temperature corresponding to the rated heat reclaim recovery efficiency.")]
[JsonProperty(@"The inlet water temperature corresponding to the rated heat reclaim recovery efficiency.")]
public System.Single RatedInletWaterTemperature { get; set; } = ;
        
[Description(@"The outdoor air dry-bulb temperature corresponding to the rated heat reclaim recovery efficiency.")]
[JsonProperty(@"The outdoor air dry-bulb temperature corresponding to the rated heat reclaim recovery efficiency.")]
public System.Single RatedOutdoorAirTemperature { get; set; } = ;
        
[Description(@"The desuperheater water heating coil is off when the inlet water temperature is above the maximum inlet water temperature for heat reclaim.")]
[JsonProperty(@"The desuperheater water heating coil is off when the inlet water temperature is above the maximum inlet water temperature for heat reclaim.")]
public System.Single MaximumInletWaterTemperatureForHeatReclaim { get; set; } = ;
        
[Description(@"A biquadratic curve defining the performance of the desuperheater heating coil. Performance can be specified as a function of inlet water temperature, outdoor air dry-bulb temperature, or both. Curve = a + b*Tw + c*Tw**2 + d*odb + e*odb**2 + f*Tw*odb. Tw = desuperheater heating coil entering water temperature (C). Odb = outdoor dry-bulb temperature at DX system condenser (C).")]
[JsonProperty(@"A biquadratic curve defining the performance of the desuperheater heating coil. Performance can be specified as a function of inlet water temperature, outdoor air dry-bulb temperature, or both. Curve = a + b*Tw + c*Tw**2 + d*odb + e*odb**2 + f*Tw*odb. Tw = desuperheater heating coil entering water temperature (C). Odb = outdoor dry-bulb temperature at DX system condenser (C).")]
public System.String HeatReclaimEfficiencyFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"The node from which the desuperheater heating coil draws its inlet water. This name should match the source side outlet node name in the associated water heater tank object.")]
[JsonProperty(@"The node from which the desuperheater heating coil draws its inlet water. This name should match the source side outlet node name in the associated water heater tank object.")]
public System.String WaterInletNodeName { get; set; } = "";
        
[Description(@"The node to which the desuperheater heating coil sends its outlet water. This name should match the source side inlet node name in the associated water heater tank object.")]
[JsonProperty(@"The node to which the desuperheater heating coil sends its outlet water. This name should match the source side inlet node name in the associated water heater tank object.")]
public System.String WaterOutletNodeName { get; set; } = "";
        
[Description(@"Specify the type of water heater tank used by this desuperheater water heating coil.")]
[JsonProperty(@"Specify the type of water heater tank used by this desuperheater water heating coil.")]
public YesNoDefault TankObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaterHeater:Mixed");
        
[Description(@"The name of the water heater tank used by this desuperheater water heating coil. Needs to match the name used in the corresponding water heater object.")]
[JsonProperty(@"The name of the water heater tank used by this desuperheater water heating coil. Needs to match the name used in the corresponding water heater object.")]
public System.String TankName { get; set; } = "";
        
[Description(@"The type of DX system that is providing waste heat for reclaim.")]
[JsonProperty(@"The type of DX system that is providing waste heat for reclaim.")]
public YesNoDefault HeatingSourceObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"The name of the DX system used for heat reclaim.")]
[JsonProperty(@"The name of the DX system used for heat reclaim.")]
public System.String HeatingSourceName { get; set; } = "";
        
[Description(@"The operating water flow rate.")]
[JsonProperty(@"The operating water flow rate.")]
public System.Single WaterFlowRate { get; set; } = ;
        
[Description(@"The water circulation pump electric power.")]
[JsonProperty(@"The water circulation pump electric power.")]
public System.Single WaterPumpPower { get; set; } = 0;
        
[Description(@"The fraction of pump heat transferred to the water. The pump is assumed to be downstream of the desuperheater water heating coil.")]
[JsonProperty(@"The fraction of pump heat transferred to the water. The pump is assumed to be downstream of the desuperheater water heating coil.")]
public System.Single FractionOfPumpHeatToWater { get; set; } = 0.2;
        
[Description(@"Parasitic electric power consumed when the desuperheater water heating coil operates. Parasitic electric load does not contribute to water heating or the zone air heat balance.")]
[JsonProperty(@"Parasitic electric power consumed when the desuperheater water heating coil operates. Parasitic electric load does not contribute to water heating or the zone air heat balance.")]
public System.Single OnCycleParasiticElectricLoad { get; set; } = 0;
        
[Description(@"Parasitic electric load consumed when the desuperheater water heating coil is off. Parasitic electric load does not contribute to water heating or the zone air heat balance. Off-cycle parasitic power is 0 when the availability schedule is 0.")]
[JsonProperty(@"Parasitic electric load consumed when the desuperheater water heating coil is off. Parasitic electric load does not contribute to water heating or the zone air heat balance. Off-cycle parasitic power is 0 when the availability schedule is 0.")]
public System.Single OffCycleParasiticElectricLoad { get; set; } = 0;
    }
    
    public enum TankObjectTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("WaterHeater:Mixed")]
        WaterHeaterMixed = 1,
        
        [JsonProperty("WaterHeater:Stratified")]
        WaterHeaterStratified = 2,
    }
    
    public enum HeatingSourceObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:DX:MultiSpeed")]
        CoilCoolingDXMultiSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 1,
        
        [JsonProperty("Coil:Cooling:DX:TwoSpeed")]
        CoilCoolingDXTwoSpeed = 2,
        
        [JsonProperty("Coil:Cooling:DX:TwoStageWithHumidityControlMode")]
        CoilCoolingDXTwoStageWithHumidityControlMode = 3,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 4,
        
        [JsonProperty("Coil:Cooling:WaterToAirHeatPump:EquationFit")]
        CoilCoolingWaterToAirHeatPumpEquationFit = 5,
        
        [JsonProperty("Refrigeration:CompressorRack")]
        RefrigerationCompressorRack = 6,
        
        [JsonProperty("Refrigeration:Condenser:AirCooled")]
        RefrigerationCondenserAirCooled = 7,
        
        [JsonProperty("Refrigeration:Condenser:EvaporativeCooled")]
        RefrigerationCondenserEvaporativeCooled = 8,
        
        [JsonProperty("Refrigeration:Condenser:WaterCooled")]
        RefrigerationCondenserWaterCooled = 9,
    }
    
    [Description("Virtual container component that consists of a DX cooling coil and its associated" +
        " controls. This control object supports several different types of DX cooling co" +
        "ils and may be placed directly in an air loop branch or outdoor air equipment li" +
        "st.")]
    [JsonObject("CoilSystem:Cooling:DX")]
    public class CoilSystem_Cooling_DX
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DxCoolingCoilSystemInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DxCoolingCoilSystemOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DxCoolingCoilSystemSensorNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String CoolingCoilName { get; set; } = "";
        
[Description(@"None = meet sensible load only Multimode = activate enhanced dehumidification mode as needed and meet sensible load. If no sensible load exists, and Run on Latent Load = Yes, and a latent load exists, the unit will operate to meet the latent load. Valid only with Coil:Cooling:DX:TwoStageWithHumidityControlMode or CoilSystem:Cooling:DX:HeatExchangerAssisted. CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid for all coil types. For all dehumidification controls, the max humidity setpoint on the Sensor Node is used. SetpointManager:SingleZone:Humidity:Maximum, SetpointManager:MultiZone:Humidity:Maximum, or SetpointManager:MultiZone:MaximumHumidity:Average, and SetpointManager:OutdoorAirPretreat (optional) objects.")]
[JsonProperty(@"None = meet sensible load only Multimode = activate enhanced dehumidification mode as needed and meet sensible load. If no sensible load exists, and Run on Latent Load = Yes, and a latent load exists, the unit will operate to meet the latent load. Valid only with Coil:Cooling:DX:TwoStageWithHumidityControlMode or CoilSystem:Cooling:DX:HeatExchangerAssisted. CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid for all coil types. For all dehumidification controls, the max humidity setpoint on the Sensor Node is used. SetpointManager:SingleZone:Humidity:Maximum, SetpointManager:MultiZone:Humidity:Maximum, or SetpointManager:MultiZone:MaximumHumidity:Average, and SetpointManager:OutdoorAirPretreat (optional) objects.")]
public YesNoDefault DehumidificationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If Yes, unit will run if there is a sensible load. If No, unit will not run if there is only a sensible load. Dehumidification controls will be active if specified.")]
[JsonProperty(@"If Yes, unit will run if there is a sensible load. If No, unit will not run if there is only a sensible load. Dehumidification controls will be active if specified.")]
public YesNoDefault RunOnSensibleLoad { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[Description(@"If Yes, unit will run if there is a latent load. even if there is no sensible load. If No, unit will not run only if there is a latent load. Dehumidification controls will be active if specified.")]
[JsonProperty(@"If Yes, unit will run if there is a latent load. even if there is no sensible load. If No, unit will not run only if there is a latent load. Dehumidification controls will be active if specified.")]
public YesNoDefault RunOnLatentLoad { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"This input field is designed for use with DX cooling coils with low air flow to capacity ratio range (100 - 300 cfm/ton). Typical application is 100% dedicated outdoor air system (DOAS). Other air loop or zone HVAC systems with low flow to capacity ratio range may also use this input field. If Yes, the DX cooling coil runs as 100% DOAS DX coil or low flow to capacity ratio range. If No, the DX cooling coil runs as a regular DX coil. If left blank the default is regular DX coil.")]
[JsonProperty(@"This input field is designed for use with DX cooling coils with low air flow to capacity ratio range (100 - 300 cfm/ton). Typical application is 100% dedicated outdoor air system (DOAS). Other air loop or zone HVAC systems with low flow to capacity ratio range may also use this input field. If Yes, the DX cooling coil runs as 100% DOAS DX coil or low flow to capacity ratio range. If No, the DX cooling coil runs as a regular DX coil. If left blank the default is regular DX coil.")]
public YesNoDefault UseOutdoorAirDxCoolingCoil { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"DX cooling coil leaving minimum air temperature defines the minimum DX cooling coil leaving air temperature that should be maintained to avoid frost formation. This input field is optional and only used along with the input field above.")]
[JsonProperty(@"DX cooling coil leaving minimum air temperature defines the minimum DX cooling coil leaving air temperature that should be maintained to avoid frost formation. This input field is optional and only used along with the input field above.")]
public System.Single OutdoorAirDxCoolingCoilLeavingMinimumAirTemperature { get; set; } = 2;
    }
    
    public enum CoolingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed:ThermalStorage")]
        CoilCoolingDXSingleSpeedThermalStorage = 1,
        
        [JsonProperty("Coil:Cooling:DX:TwoSpeed")]
        CoilCoolingDXTwoSpeed = 2,
        
        [JsonProperty("Coil:Cooling:DX:TwoStageWithHumidityControlMode")]
        CoilCoolingDXTwoStageWithHumidityControlMode = 3,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 4,
        
        [JsonProperty("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
        CoilSystemCoolingDXHeatExchangerAssisted = 5,
    }
    
    public enum DehumidificationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("Multimode")]
        Multimode = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    [Description("Virtual container component that consists of a DX heating coil (heat pump) and it" +
        "s associated controls. This control object supports two different types of DX he" +
        "ating coils and may be placed directly in an air loop branch or outdoor air equi" +
        "pment list.")]
    [JsonObject("CoilSystem:Heating:DX")]
    public class CoilSystem_Heating_DX
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String HeatingCoilName { get; set; } = "";
    }
    
    public enum HeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:DX:SingleSpeed")]
        CoilHeatingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Heating:DX:VariableSpeed")]
        CoilHeatingDXVariableSpeed = 1,
    }
    
    [Description(@"Virtual component consisting of a chilled-water cooling coil and an air-to-air heat exchanger. The air-to-air heat exchanger precools the air entering the cooling coil and reuses this energy to reheat the supply air leaving the cooling coil. This heat exchange process improves the latent removal performance of the cooling coil (lower sensible heat ratio).")]
    [JsonObject("CoilSystem:Cooling:Water:HeatExchangerAssisted")]
    public class CoilSystem_Cooling_Water_HeatExchangerAssisted
    {
        
[JsonProperty(@"")]
public YesNoDefault HeatExchangerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String HeatExchangerName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String CoolingCoilName { get; set; } = "";
    }
    
    public enum HeatExchangerObjectTypeType
    {
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 0,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 1,
    }
    
    public enum CoolingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 0,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 1,
    }
    
    [Description(@"Virtual component consisting of a direct expansion (DX) cooling coil and an air-to-air heat exchanger. The air-to-air heat exchanger precools the air entering the cooling coil and reuses this energy to reheat the supply air leaving the cooling coil. This heat exchange process improves the latent removal performance of the cooling coil (lower sensible heat ratio).")]
    [JsonObject("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
    public class CoilSystem_Cooling_DX_HeatExchangerAssisted
    {
        
[JsonProperty(@"")]
public YesNoDefault HeatExchangerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String HeatExchangerName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String CoolingCoilName { get; set; } = "";
    }
    
    public enum HeatExchangerObjectTypeType
    {
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 0,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 1,
        
        [JsonProperty("HeatExchanger:Desiccant:BalancedFlow")]
        HeatExchangerDesiccantBalancedFlow = 2,
    }
    
    public enum CoolingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 1,
    }
    
    [Description("This object is used for air-source integrated heat pump, a collection of its work" +
        "ing modes.")]
    [JsonObject("CoilSystem:IntegratedHeatPump:AirSource")]
    public class CoilSystem_IntegratedHeatPump_AirSource
    {
        
[JsonProperty(@"")]
public System.String SupplyHotWaterFlowSensorNodeName { get; set; } = "";
        
[Description(@"Must match the name used in the corresponding Coil:Cooling:DX:VariableSpeed object.")]
[JsonProperty(@"Must match the name used in the corresponding Coil:Cooling:DX:VariableSpeed object.")]
public System.String SpaceCoolingCoilName { get; set; } = "";
        
[Description(@"Must match the name used in the corresponding Coil:Heating:DX:VariableSpeed object.")]
[JsonProperty(@"Must match the name used in the corresponding Coil:Heating:DX:VariableSpeed object.")]
public System.String SpaceHeatingCoilName { get; set; } = "";
        
[Description(@"Must match the name used in the corresponding Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed object.")]
[JsonProperty(@"Must match the name used in the corresponding Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed object.")]
public System.String DedicatedWaterHeatingCoilName { get; set; } = "";
        
[Description(@"Must match the name used in the corresponding Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed object.")]
[JsonProperty(@"Must match the name used in the corresponding Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed object.")]
public System.String ScwhCoilName { get; set; } = "";
        
[Description(@"Must match the name used in the corresponding Coil:Cooling:DX:VariableSpeed object.")]
[JsonProperty(@"Must match the name used in the corresponding Coil:Cooling:DX:VariableSpeed object.")]
public System.String ScdwhCoolingCoilName { get; set; } = "";
        
[Description(@"Must match the name used in the corresponding Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed object.")]
[JsonProperty(@"Must match the name used in the corresponding Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed object.")]
public System.String ScdwhWaterHeatingCoilName { get; set; } = "";
        
[Description(@"Must match the name used in the corresponding Coil:Heating:DX:VariableSpeed object.")]
[JsonProperty(@"Must match the name used in the corresponding Coil:Heating:DX:VariableSpeed object.")]
public System.String ShdwhHeatingCoilName { get; set; } = "";
        
[Description(@"Must match the name used in the corresponding Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed object.")]
[JsonProperty(@"Must match the name used in the corresponding Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed object.")]
public System.String ShdwhWaterHeatingCoilName { get; set; } = "";
        
[Description(@"Indoor Temperature above which Indoor Overcooling is Allowed during Cooling Operation")]
[JsonProperty(@"Indoor Temperature above which Indoor Overcooling is Allowed during Cooling Operation")]
public System.Single IndoorTemperatureLimitForScwhMode { get; set; } = 20;
        
[Description(@"Ambient Temperature above which Indoor Overcooling is Allowed during Cooling Operation")]
[JsonProperty(@"Ambient Temperature above which Indoor Overcooling is Allowed during Cooling Operation")]
public System.Single AmbientTemperatureLimitForScwhMode { get; set; } = 27;
        
[Description(@"Indoor Temperature above which Water Heating has the higher priority and Space Heating Call Can be ignored.")]
[JsonProperty(@"Indoor Temperature above which Water Heating has the higher priority and Space Heating Call Can be ignored.")]
public System.Single IndoorTemperatureAboveWhichWhHasHigherPriority { get; set; } = 20;
        
[Description(@"Ambient Temperature above which Water Heating has the higher priority and Space Heating Call Can be ignored.")]
[JsonProperty(@"Ambient Temperature above which Water Heating has the higher priority and Space Heating Call Can be ignored.")]
public System.Single AmbientTemperatureAboveWhichWhHasHigherPriority { get; set; } = 20;
        
[Description(@"0: match space cooling load in SCWH mode, 1: match water heating load in SCWH mode")]
[JsonProperty(@"0: match space cooling load in SCWH mode, 1: match water heating load in SCWH mode")]
public System.Single FlagToIndicateLoadControlInScwhMode { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single MinimumSpeedLevelForScwhMode { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single MaximumWaterFlowVolumeBeforeSwitchingFromScdwhToScwhMode { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single MinimumSpeedLevelForScdwhMode { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single MaximumRunningTimeBeforeAllowingElectricResistanceHeatUseDuringShdwhMode { get; set; } = 360;
        
[JsonProperty(@"")]
public System.Single MinimumSpeedLevelForShdwhMode { get; set; } = 1;
    }
    
    [Description("Direct expansion (DX) cooling coil and condensing unit (includes electric compres" +
        "sor and condenser fan), single-speed with packaged integrated thermal storage fo" +
        "r cooling.")]
    [JsonObject("Coil:Cooling:DX:SingleSpeed:ThermalStorage")]
    public class Coil_Cooling_DX_SingleSpeed_ThermalStorage
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault OperatingModeControlMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"This field is used if the control method is set to ScheduledModes Schedule values control operating mode: 0=off, 1=cooling only, 2= cooling and charge, 3= cooling and discharge, 4= charge only, and 5= discharge only")]
[JsonProperty(@"This field is used if the control method is set to ScheduledModes Schedule values control operating mode: 0=off, 1=cooling only, 2= cooling and charge, 3= cooling and discharge, 4= charge only, and 5= discharge only")]
public System.String OperationModeControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault StorageType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"This field is required when Storage Type is UserDefinedFluidType")]
[JsonProperty(@"This field is required when Storage Type is UserDefinedFluidType")]
public System.String UserDefinedFluidType { get; set; } = "";
        
[Description(@"required field if Storage Type is Water or UserDefinedFluidType")]
[JsonProperty(@"required field if Storage Type is Water or UserDefinedFluidType")]
public System.String FluidStorageVolume { get; set; } = "";
        
[Description(@"required field if Storage Type is Ice")]
[JsonProperty(@"required field if Storage Type is Ice")]
public System.String IceStorageCapacity { get; set; } = "";
        
[Description(@"If one of the previous two fields is set to autocalculate, this determines the storage capacity as a function of Cooling Only Mode Rated Total Evaporator Cooling Capacity")]
[JsonProperty(@"If one of the previous two fields is set to autocalculate, this determines the storage capacity as a function of Cooling Only Mode Rated Total Evaporator Cooling Capacity")]
public System.Single StorageCapacitySizingFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String StorageTankAmbientTemperatureNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single StorageTankToAmbientUValueTimesAreaHeatTransferCoefficient { get; set; } = ;
        
[Description(@"required field if Storage Type is Water or UserDefinedFluidType")]
[JsonProperty(@"required field if Storage Type is Water or UserDefinedFluidType")]
public System.Single FluidStorageTankRatingTemperature { get; set; } = ;
        
[Description(@"Flow rate corresponding to rated total cooling capacity, Rated SHR and Rated COP")]
[JsonProperty(@"Flow rate corresponding to rated total cooling capacity, Rated SHR and Rated COP")]
public System.String RatedEvaporatorAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EvaporatorAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EvaporatorAirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CoolingOnlyModeAvailable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"required field if Cooling Only Mode is available or if autocalculating sizes gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty(@"required field if Cooling Only Mode is available or if autocalculating sizes gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
public System.String CoolingOnlyModeRatedTotalEvaporatorCoolingCapacity { get; set; } = "";
        
[Description(@"required field if Cooling Only Mode is available Rated sensible heat ratio (gross sensible capacity/gross total capacity) sensible and total capacities do not include supply fan heat")]
[JsonProperty(@"required field if Cooling Only Mode is available Rated sensible heat ratio (gross sensible capacity/gross total capacity) sensible and total capacities do not include supply fan heat")]
public System.Single CoolingOnlyModeRatedSensibleHeatRatio { get; set; } = 0.7;
        
[Description(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input required field if Cooling Only Mode is available")]
[JsonProperty(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input required field if Cooling Only Mode is available")]
public System.Single CoolingOnlyModeRatedCop { get; set; } = 3;
        
[Description(@"required field if Cooling Only Mode is available Any curve or table with two independent variables can be used biquadratic curve = a + b*ewb + c*ewb**2 + d*db + e*db**2 + f*ewb*db x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty(@"required field if Cooling Only Mode is available Any curve or table with two independent variables can be used biquadratic curve = a + b*ewb + c*ewb**2 + d*db + e*db**2 + f*ewb*db x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C)")]
public System.String CoolingOnlyModeTotalEvaporatorCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"required field if Cooling Only Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow rate")]
[JsonProperty(@"required field if Cooling Only Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow rate")]
public System.String CoolingOnlyModeTotalEvaporatorCoolingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"required field if Cooling Only Mode is available Any curve or table with two independent variables can be used curve = a + b*ewb + c*ewb**2 + d*db + e*db**2 + f*ewb*db x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C)")]
[JsonProperty(@"required field if Cooling Only Mode is available Any curve or table with two independent variables can be used curve = a + b*ewb + c*ewb**2 + d*db + e*db**2 + f*ewb*db x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C)")]
public System.String CoolingOnlyModeEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"required field if Cooling Only Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
[JsonProperty(@"required field if Cooling Only Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
public System.String CoolingOnlyModeEnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"required field if Cooling Only Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x = PLR = part load ratio (evaporator cooling load/steady state capacity)")]
[JsonProperty(@"required field if Cooling Only Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x = PLR = part load ratio (evaporator cooling load/steady state capacity)")]
public System.String CoolingOnlyModePartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"required field if Cooling Only Mode is available Any curve or table with two independent variables can be used curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb x = ewb = evaporator entering wet-bulb temperature seen by the cooling coil (C) y = edb = evaporator entering dry-bulb temperature seen by the cooling coil (C)")]
[JsonProperty(@"required field if Cooling Only Mode is available Any curve or table with two independent variables can be used curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb x = ewb = evaporator entering wet-bulb temperature seen by the cooling coil (C) y = edb = evaporator entering dry-bulb temperature seen by the cooling coil (C)")]
public System.String CoolingOnlyModeSensibleHeatRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"required field if Cooling Only Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
[JsonProperty(@"required field if Cooling Only Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
public System.String CoolingOnlyModeSensibleHeatRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CoolingAndChargeModeAvailable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"required field if Cooling And Charge Mode is available gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb thermal storage tank at Fluid Storage Tank Rating Temperature (water or fluid) or storage faction of 0.5 (ice)")]
[JsonProperty(@"required field if Cooling And Charge Mode is available gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb thermal storage tank at Fluid Storage Tank Rating Temperature (water or fluid) or storage faction of 0.5 (ice)")]
public System.String CoolingAndChargeModeRatedTotalEvaporatorCoolingCapacity { get; set; } = "";
        
[Description(@"If previous field is autocalculate, this determines the evaporator capacity as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity")]
[JsonProperty(@"If previous field is autocalculate, this determines the evaporator capacity as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity")]
public System.Single CoolingAndChargeModeCapacitySizingFactor { get; set; } = 0.5;
        
[Description(@"required field if Cooling And Charge Mode is available net capacity including any internal devices rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb thermal storage tank at Fluid Storage Tank Rating Temperature (water or fluid) or storage faction of 0.5 (ice)")]
[JsonProperty(@"required field if Cooling And Charge Mode is available net capacity including any internal devices rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb thermal storage tank at Fluid Storage Tank Rating Temperature (water or fluid) or storage faction of 0.5 (ice)")]
public System.String CoolingAndChargeModeRatedStorageChargingCapacity { get; set; } = "";
        
[Description(@"If previous field is autocalculate, this determines the storage cooling capacity as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity")]
[JsonProperty(@"If previous field is autocalculate, this determines the storage cooling capacity as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity")]
public System.Single CoolingAndChargeModeStorageCapacitySizingFactor { get; set; } = 0.5;
        
[Description(@"required field if Cooling And Charge Mode is available Rated sensible heat ratio (gross sensible evaporator capacity/gross total evaporator capacity) sensible and total capacities do not include supply fan heat")]
[JsonProperty(@"required field if Cooling And Charge Mode is available Rated sensible heat ratio (gross sensible evaporator capacity/gross total evaporator capacity) sensible and total capacities do not include supply fan heat")]
public System.Single CoolingAndChargeModeRatedSensibleHeatRatio { get; set; } = 0.7;
        
[Description(@"Gross evaporator cooling capacity divided by power input to the compressor (for cooling) and outdoor fan, does not include supply fan heat or supply fan electrical energy input required field if Cooling And Charge Mode is available")]
[JsonProperty(@"Gross evaporator cooling capacity divided by power input to the compressor (for cooling) and outdoor fan, does not include supply fan heat or supply fan electrical energy input required field if Cooling And Charge Mode is available")]
public System.Single CoolingAndChargeModeCoolingRatedCop { get; set; } = 3;
        
[Description(@"net cooling capacity divided by power input to the compressor (for charging) and outdoor fan, includes any internal devices required field if Cooling And Charge Mode is available")]
[JsonProperty(@"net cooling capacity divided by power input to the compressor (for charging) and outdoor fan, includes any internal devices required field if Cooling And Charge Mode is available")]
public System.Single CoolingAndChargeModeChargingRatedCop { get; set; } = 3;
        
[Description(@"required field if Cooling And Charge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty(@"required field if Cooling And Charge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
public System.String CoolingAndChargeModeTotalEvaporatorCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Charge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
[JsonProperty(@"required field if Cooling And Charge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
public System.String CoolingAndChargeModeTotalEvaporatorCoolingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Charge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty(@"required field if Cooling And Charge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
public System.String CoolingAndChargeModeEvaporatorEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Charge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
[JsonProperty(@"required field if Cooling And Charge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
public System.String CoolingAndChargeModeEvaporatorEnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Charge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x = PLR = part load ratio (evaporator cooling load/steady state capacity)")]
[JsonProperty(@"required field if Cooling And Charge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x = PLR = part load ratio (evaporator cooling load/steady state capacity)")]
public System.String CoolingAndChargeModeEvaporatorPartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Charge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty(@"required field if Cooling And Charge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
public System.String CoolingAndChargeModeStorageChargeCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Charge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x = PLR = part load ratio (evaporator cooling load/steady state capacity)")]
[JsonProperty(@"required field if Cooling And Charge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x = PLR = part load ratio (evaporator cooling load/steady state capacity)")]
public System.String CoolingAndChargeModeStorageChargeCapacityFunctionOfTotalEvaporatorPlrCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Charge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty(@"required field if Cooling And Charge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
public System.String CoolingAndChargeModeStorageEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Charge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
[JsonProperty(@"required field if Cooling And Charge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
public System.String CoolingAndChargeModeStorageEnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Charge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x = PLR = part load ratio (evaporator cooling load/steady state capacity)")]
[JsonProperty(@"required field if Cooling And Charge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x = PLR = part load ratio (evaporator cooling load/steady state capacity)")]
public System.String CoolingAndChargeModeStorageEnergyPartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Charge Mode is available Curves or tables with either two or three independent variables can be used. Curve:Biquadratic, Table:Lookup, Curve:Bicubic and Curve:QuadraticLinear allowed curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb x = ewb = entering wet-bulb temperature seen by the cooling coil (C) y = edb = entering dry-bulb temperature seen by the cooling coil (C) Also allows Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = edb, z = stes) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty(@"required field if Cooling And Charge Mode is available Curves or tables with either two or three independent variables can be used. Curve:Biquadratic, Table:Lookup, Curve:Bicubic and Curve:QuadraticLinear allowed curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb x = ewb = entering wet-bulb temperature seen by the cooling coil (C) y = edb = entering dry-bulb temperature seen by the cooling coil (C) Also allows Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = edb, z = stes) z = stes = state of thermal energy storage (C or fraction)")]
public System.String CoolingAndChargeModeSensibleHeatRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Charge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
[JsonProperty(@"required field if Cooling And Charge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
public System.String CoolingAndChargeModeSensibleHeatRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CoolingAndDischargeModeAvailable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"required field if Cooling And Discharge Mode is available gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb thermal storage tank at Fluid Storage Tank Rating Temperature (water or fluid) or storage faction of 0.5 (ice)")]
[JsonProperty(@"required field if Cooling And Discharge Mode is available gross capacity excluding supply air fan heat rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb thermal storage tank at Fluid Storage Tank Rating Temperature (water or fluid) or storage faction of 0.5 (ice)")]
public System.String CoolingAndDischargeModeRatedTotalEvaporatorCoolingCapacity { get; set; } = "";
        
[Description(@"If previous field is autocalculate, this determines the charging capacity as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity")]
[JsonProperty(@"If previous field is autocalculate, this determines the charging capacity as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity")]
public System.Single CoolingAndDischargeModeEvaporatorCapacitySizingFactor { get; set; } = 1;
        
[Description(@"required field if Cooling And Discharge Mode is available net capacity including any internal devices rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb thermal storage tank at 26.7 C (water) or storage faction of 0.5 (ice)")]
[JsonProperty(@"required field if Cooling And Discharge Mode is available net capacity including any internal devices rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb thermal storage tank at 26.7 C (water) or storage faction of 0.5 (ice)")]
public System.String CoolingAndDischargeModeRatedStorageDischargingCapacity { get; set; } = "";
        
[Description(@"If previous field is autocalculate, this determines the charging capacity as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity")]
[JsonProperty(@"If previous field is autocalculate, this determines the charging capacity as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity")]
public System.Single CoolingAndDischargeModeStorageDischargeCapacitySizingFactor { get; set; } = 1;
        
[Description(@"required field if Cooling And Discharge Mode is available Rated sensible heat ratio (gross sensible evaporator capacity/gross total evaporator capacity) sensible and total capacities do not include supply fan heat")]
[JsonProperty(@"required field if Cooling And Discharge Mode is available Rated sensible heat ratio (gross sensible evaporator capacity/gross total evaporator capacity) sensible and total capacities do not include supply fan heat")]
public System.Single CoolingAndDischargeModeRatedSensibleHeatRatio { get; set; } = 0.7;
        
[Description(@"Gross evaporator cooling capacity divided by power input to the compressor (for cooling) and outdoor fan, does not include supply fan heat or supply fan electrical energy input required field if Cooling And Discharge Mode is available")]
[JsonProperty(@"Gross evaporator cooling capacity divided by power input to the compressor (for cooling) and outdoor fan, does not include supply fan heat or supply fan electrical energy input required field if Cooling And Discharge Mode is available")]
public System.Single CoolingAndDischargeModeCoolingRatedCop { get; set; } = 3;
        
[Description(@"gross cooling capacity divided by power input to the compressor (for discharging), includes any internal devices for discharging storage but not supply fan required field if Cooling And Discharge Mode is available")]
[JsonProperty(@"gross cooling capacity divided by power input to the compressor (for discharging), includes any internal devices for discharging storage but not supply fan required field if Cooling And Discharge Mode is available")]
public System.Single CoolingAndDischargeModeDischargingRatedCop { get; set; } = 3;
        
[Description(@"required field if Cooling Only Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty(@"required field if Cooling Only Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
public System.String CoolingAndDischargeModeTotalEvaporatorCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Discharge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
[JsonProperty(@"required field if Cooling And Discharge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
public System.String CoolingAndDischargeModeTotalEvaporatorCoolingCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Discharge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty(@"required field if Cooling And Discharge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
public System.String CoolingAndDischargeModeEvaporatorEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Discharge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load evaporator air flow")]
[JsonProperty(@"required field if Cooling And Discharge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load evaporator air flow")]
public System.String CoolingAndDischargeModeEvaporatorEnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Discharge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x = PLR = part load ratio (evaporator cooling load/steady state capacity)")]
[JsonProperty(@"required field if Cooling And Discharge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x = PLR = part load ratio (evaporator cooling load/steady state capacity)")]
public System.String CoolingAndDischargeModeEvaporatorPartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Discharge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty(@"required field if Cooling And Discharge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
public System.String CoolingAndDischargeModeStorageDischargeCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Discharge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load evaporator air flow")]
[JsonProperty(@"required field if Cooling And Discharge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load evaporator air flow")]
public System.String CoolingAndDischargeModeStorageDischargeCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Discharge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x =PLR = part load ratio (evaporator cooling load/steady state capacity)")]
[JsonProperty(@"required field if Cooling And Discharge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x =PLR = part load ratio (evaporator cooling load/steady state capacity)")]
public System.String CoolingAndDischargeModeStorageDischargeCapacityFunctionOfTotalEvaporatorPlrCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Discharge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty(@"required field if Cooling And Discharge Mode is available Allowed curve or table objects are Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = db, z = stes) x = ewb = evaporator entering wet-bulb temperature (C) y = db = dry-bulb temperature seen by the condenser (C) z = stes = state of thermal energy storage (C or fraction)")]
public System.String CoolingAndDischargeModeStorageEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Discharge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
[JsonProperty(@"required field if Cooling And Discharge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
public System.String CoolingAndDischargeModeStorageEnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Discharge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x = PLR = part load ratio (evaporator cooling load/steady state capacity)")]
[JsonProperty(@"required field if Cooling And Discharge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 x = PLR = part load ratio (evaporator cooling load/steady state capacity)")]
public System.String CoolingAndDischargeModeStorageEnergyPartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Discharge Mode is available Curves or tables with either two or three independent variables can be used. curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb x = ewb = entering wet-bulb temperature seen by the cooling coil (C) y = edb = entering dry-bulb temperature seen by the cooling coil (C) Also allows Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = edb, z = stes) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty(@"required field if Cooling And Discharge Mode is available Curves or tables with either two or three independent variables can be used. curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb x = ewb = entering wet-bulb temperature seen by the cooling coil (C) y = edb = entering dry-bulb temperature seen by the cooling coil (C) Also allows Curve:Triquadratic and Table:Lookup curve or table = func(x = ewb, y = edb, z = stes) z = stes = state of thermal energy storage (C or fraction)")]
public System.String CoolingAndDischargeModeSensibleHeatRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"required field if Cooling And Discharge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
[JsonProperty(@"required field if Cooling And Discharge Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
public System.String CoolingAndDischargeModeSensibleHeatRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ChargeOnlyModeAvailable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"required field if Charge Only  Mode is available net capacity including any internal devices air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb thermal storage tank at 26.7 C (water) or storage faction of 0.5 (ice)")]
[JsonProperty(@"required field if Charge Only  Mode is available net capacity including any internal devices air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb thermal storage tank at 26.7 C (water) or storage faction of 0.5 (ice)")]
public System.String ChargeOnlyModeRatedStorageChargingCapacity { get; set; } = "";
        
[Description(@"If previous field is autocalculate, this determines the charging capacity as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity")]
[JsonProperty(@"If previous field is autocalculate, this determines the charging capacity as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity")]
public System.Single ChargeOnlyModeCapacitySizingFactor { get; set; } = 1;
        
[Description(@"net cooling capacity divided by power input to the compressor (for charging) and outdoor fan, includes any internal devices required field if Charge Only Mode is available")]
[JsonProperty(@"net cooling capacity divided by power input to the compressor (for charging) and outdoor fan, includes any internal devices required field if Charge Only Mode is available")]
public System.Single ChargeOnlyModeChargingRatedCop { get; set; } = 3;
        
[Description(@"required field if Charge Only Mode is available Any curve or table with two independent variables can be used curve = a + b*db + c*db**2 + d*stes + e*stes**2 + f*db*stes x = db = dry-bulb temperature seen by the condenser (C) y = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty(@"required field if Charge Only Mode is available Any curve or table with two independent variables can be used curve = a + b*db + c*db**2 + d*stes + e*stes**2 + f*db*stes x = db = dry-bulb temperature seen by the condenser (C) y = stes = state of thermal energy storage (C or fraction)")]
public System.String ChargeOnlyModeStorageChargeCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"required field if Charge Only Mode is available Any curve or table with two independent variables can be used curve = a + b*db + c*db**2 + d*stes + e*stes**2 + f*db*stes x = db = dry-bulb temperature seen by the condenser (C) y = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty(@"required field if Charge Only Mode is available Any curve or table with two independent variables can be used curve = a + b*db + c*db**2 + d*stes + e*stes**2 + f*db*stes x = db = dry-bulb temperature seen by the condenser (C) y = stes = state of thermal energy storage (C or fraction)")]
public System.String ChargeOnlyModeStorageEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault DischargeOnlyModeAvailable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"required field if Discharge Only Mode is available net capacity including any internal devices rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and thermal storage tank at 26.7 C (water) or storage faction of 0.5 (ice)")]
[JsonProperty(@"required field if Discharge Only Mode is available net capacity including any internal devices rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and thermal storage tank at 26.7 C (water) or storage faction of 0.5 (ice)")]
public System.String DischargeOnlyModeRatedStorageDischargingCapacity { get; set; } = "";
        
[Description(@"If previous field is autocalculate, this determines the discharging capacity as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity")]
[JsonProperty(@"If previous field is autocalculate, this determines the discharging capacity as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity")]
public System.Single DischargeOnlyModeCapacitySizingFactor { get; set; } = 1;
        
[Description(@"required field if Discharge Only Mode is available Rated sensible heat ratio (gross sensible evaporator capacity/gross total evaporator capacity) sensible and total capacities do not include supply fan heat")]
[JsonProperty(@"required field if Discharge Only Mode is available Rated sensible heat ratio (gross sensible evaporator capacity/gross total evaporator capacity) sensible and total capacities do not include supply fan heat")]
public System.Single DischargeOnlyModeRatedSensibleHeatRatio { get; set; } = ;
        
[Description(@"required field if Discharge Only Mode is available gross cooling capacity divided by power input to the compressor (for discharging), includes any internal devices for discharging storage but not supply fan")]
[JsonProperty(@"required field if Discharge Only Mode is available gross cooling capacity divided by power input to the compressor (for discharging), includes any internal devices for discharging storage but not supply fan")]
public System.Single DischargeOnlyModeRatedCop { get; set; } = 3;
        
[Description(@"required field if Discharge Only Mode is available Any curve or table with two independent variables can be used curve = a + b*ewb + c*ewb**2 + d*stes + e*stes**2 + f*ewb*stes x = ewb = evaporator entering wet-bulb temperature (C) y = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty(@"required field if Discharge Only Mode is available Any curve or table with two independent variables can be used curve = a + b*ewb + c*ewb**2 + d*stes + e*stes**2 + f*ewb*stes x = ewb = evaporator entering wet-bulb temperature (C) y = stes = state of thermal energy storage (C or fraction)")]
public System.String DischargeOnlyModeStorageDischargeCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"required field if Discharge Only Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
[JsonProperty(@"required field if Discharge Only Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
public System.String DischargeOnlyModeStorageDischargeCapacityFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"required field if Discharge Only Mode is available Any curve or table with two independent variables can be used curve = a + b*ewb + c*ewb**2 + d*stes + e*stes**2 + f*ewb*stes x = ewb = evaporator entering wet-bulb temperature (C) y = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty(@"required field if Discharge Only Mode is available Any curve or table with two independent variables can be used curve = a + b*ewb + c*ewb**2 + d*stes + e*stes**2 + f*ewb*stes x = ewb = evaporator entering wet-bulb temperature (C) y = stes = state of thermal energy storage (C or fraction)")]
public System.String DischargeOnlyModeEnergyInputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"required field if Discharge Only Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
[JsonProperty(@"required field if Discharge Only Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 x = ff = Fraction of the full load evaporator air flow")]
public System.String DischargeOnlyModeEnergyInputRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"required field if Discharge Only Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3")]
[JsonProperty(@"required field if Discharge Only Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3")]
public System.String DischargeOnlyModePartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"required field if Discharge Only Mode is available Curves or tables with either two or three independent variables can be used. For two independent variables: x = ewb = entering wet-bulb temperature seen by the cooling coil (C) y = edb = entering dry-bulb temperature seen by the cooling coil (C) For three independent variables: curve or table = func(x = ewb, y = edb, z = stes) z = stes = state of thermal energy storage (C or fraction)")]
[JsonProperty(@"required field if Discharge Only Mode is available Curves or tables with either two or three independent variables can be used. For two independent variables: x = ewb = entering wet-bulb temperature seen by the cooling coil (C) y = edb = entering dry-bulb temperature seen by the cooling coil (C) For three independent variables: curve or table = func(x = ewb, y = edb, z = stes) z = stes = state of thermal energy storage (C or fraction)")]
public System.String DischargeOnlyModeSensibleHeatRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"required field if Discharge Only Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load evaporator air flow")]
[JsonProperty(@"required field if Discharge Only Mode is available Any curve or table with one independent variable can be used quadratic curve = a + b*ff + c*ff**2 cubic curve = a + b*ff + c*ff**2 + d*ff**3 ff = Fraction of the full load evaporator air flow")]
public System.String DischargeOnlyModeSensibleHeatRatioFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"controls and miscellaneous standby ancillary electric power draw, when available")]
[JsonProperty(@"controls and miscellaneous standby ancillary electric power draw, when available")]
public System.Single AncillaryElectricPower { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ColdWeatherOperationMinimumOutdoorAirTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ColdWeatherOperationAncillaryPower { get; set; } = ;
        
[Description(@"Enter the name of an outdoor air node. This node name is also specified in an OutdoorAir:Node or OutdoorAir:NodeList object.")]
[JsonProperty(@"Enter the name of an outdoor air node. This node name is also specified in an OutdoorAir:Node or OutdoorAir:NodeList object.")]
public System.String CondenserAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserAirOutletNodeName { get; set; } = "";
        
[Description(@"Used to calculate condenser leaving conditions and water use if evaporatively cooled.")]
[JsonProperty(@"Used to calculate condenser leaving conditions and water use if evaporatively cooled.")]
public System.String CondenserDesignAirFlowRate { get; set; } = "";
        
[Description(@"If previous field is autocalculate, this determines the condenser air flow size as a multiplier on the Rated Evaporator Air Flow Rate.")]
[JsonProperty(@"If previous field is autocalculate, this determines the condenser air flow size as a multiplier on the Rated Evaporator Air Flow Rate.")]
public System.Single CondenserAirFlowSizingFactor { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AirCooled");
        
[Description(@"required field if condenser type is evaporatively cooled")]
[JsonProperty(@"required field if condenser type is evaporatively cooled")]
public System.Single EvaporativeCondenserEffectiveness { get; set; } = 0.7;
        
[Description(@"Rated power consumed by the evaporative condenser's water pump")]
[JsonProperty(@"Rated power consumed by the evaporative condenser's water pump")]
public System.String EvaporativeCondenserPumpRatedPowerConsumption { get; set; } = (System.String)0;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off. If this field is blank, the basin heater is always available.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off. If this field is blank, the basin heater is always available.")]
public System.Single BasinHeaterCapacity { get; set; } = 0;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
public System.Single BasinHeaterSetpointTemperature { get; set; } = 2;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
public System.String BasinHeaterAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SupplyWaterStorageTankName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondensateCollectionWaterStorageTankName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String StorageTankPlantConnectionInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String StorageTankPlantConnectionOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single StorageTankPlantConnectionDesignFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StorageTankPlantConnectionHeatTransferEffectiveness { get; set; } = 0.7;
        
[Description(@"For fluid storage tanks only, minimum limit for storage tank If omitted,then the minimum temperature limit is that used for fluid property data.")]
[JsonProperty(@"For fluid storage tanks only, minimum limit for storage tank If omitted,then the minimum temperature limit is that used for fluid property data.")]
public System.Single StorageTankMinimumOperatingLimitFluidTemperature { get; set; } = ;
        
[Description(@"For fluid storage tanks only, maximum limit for storage tank If omitted,then the maximum temperature limit is that used for fluid property data.")]
[JsonProperty(@"For fluid storage tanks only, maximum limit for storage tank If omitted,then the maximum temperature limit is that used for fluid property data.")]
public System.Single StorageTankMaximumOperatingLimitFluidTemperature { get; set; } = ;
    }
    
    public enum OperatingModeControlMethodType
    {
        
        [JsonProperty("EMSControlled")]
        EMSControlled = 0,
        
        [JsonProperty("ScheduledModes")]
        ScheduledModes = 1,
    }
    
    public enum StorageTypeType
    {
        
        [JsonProperty("Ice")]
        Ice = 0,
        
        [JsonProperty("UserDefinedFluidType")]
        UserDefinedFluidType = 1,
        
        [JsonProperty("Water")]
        Water = 2,
    }
    
    public enum CoolingOnlyModeAvailableType
    {
        
        [JsonProperty("No")]
        No = 0,
        
        [JsonProperty("Yes")]
        Yes = 1,
    }
    
    public enum CoolingAndChargeModeAvailableType
    {
        
        [JsonProperty("No")]
        No = 0,
        
        [JsonProperty("Yes")]
        Yes = 1,
    }
    
    public enum CoolingAndDischargeModeAvailableType
    {
        
        [JsonProperty("No")]
        No = 0,
        
        [JsonProperty("Yes")]
        Yes = 1,
    }
    
    public enum ChargeOnlyModeAvailableType
    {
        
        [JsonProperty("No")]
        No = 0,
        
        [JsonProperty("Yes")]
        Yes = 1,
    }
    
    public enum DischargeOnlyModeAvailableType
    {
        
        [JsonProperty("No")]
        No = 0,
        
        [JsonProperty("Yes")]
        Yes = 1,
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
    }
}
namespace EnergyPlus.ComplianceObjects
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Building level inputs related to compliance to building standards, building codes" +
        ", and beyond energy code programs.")]
    [JsonObject("Compliance:Building")]
    public class Compliance_Building
    {
        
[Description(@"Additional degrees of rotation to be used with the requirement in ASHRAE Standard 90.1 Appendix G that states that the baseline building should be rotated in four directions.")]
[JsonProperty(@"Additional degrees of rotation to be used with the requirement in ASHRAE Standard 90.1 Appendix G that states that the baseline building should be rotated in four directions.")]
public System.Single BuildingRotationForAppendixG { get; set; } = 0;
    }
}
namespace EnergyPlus.CondenserEquipmentandHeatExchangers
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"This tower model is based on Merkel's theory, which is also the basis for the tower model in ASHRAE's HVAC1 Toolkit. The open wet cooling tower is modeled as a counter flow heat exchanger with a single-speed fan drawing air through the tower (induced-draft configuration). Added fluid bypass as an additional capacity control. 8/2008. For a multi-cell tower, the capacity and air/water flow rate inputs are for the entire tower.")]
    [JsonObject("CoolingTower:SingleSpeed")]
    public class CoolingTower_SingleSpeed
    {
        
[Description(@"Name of tower water inlet node")]
[JsonProperty(@"Name of tower water inlet node")]
public System.String WaterInletNodeName { get; set; } = "";
        
[Description(@"Name of tower water outlet node")]
[JsonProperty(@"Name of tower water outlet node")]
public System.String WaterOutletNodeName { get; set; } = "";
        
[Description(@"Leave field blank if tower performance input method is NominalCapacity")]
[JsonProperty(@"Leave field blank if tower performance input method is NominalCapacity")]
public System.String DesignWaterFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DesignAirFlowRate { get; set; } = "";
        
[Description(@"This is the fan motor electric input power")]
[JsonProperty(@"This is the fan motor electric input power")]
public System.String DesignFanPower { get; set; } = "";
        
[Description(@"Leave field blank if tower performance input method is NominalCapacity")]
[JsonProperty(@"Leave field blank if tower performance input method is NominalCapacity")]
public System.String DesignUFactorTimesAreaValue { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FreeConvectionRegimeAirFlowRate { get; set; } = (System.String)0;
        
[Description(@"This field is only used if the previous field is set to autocalculate.")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate.")]
public System.Single FreeConvectionRegimeAirFlowRateSizingFactor { get; set; } = 0.1;
        
[JsonProperty(@"")]
public System.String FreeConvectionRegimeUFactorTimesAreaValue { get; set; } = (System.String)0;
        
[Description(@"This field is only used if the previous field is set to autocalculate and the Performance Input Method is UFactorTimesAreaAndDesignWaterFlowRate")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate and the Performance Input Method is UFactorTimesAreaAndDesignWaterFlowRate")]
public System.Single FreeConvectionUFactorTimesAreaValueSizingFactor { get; set; } = 0.1;
        
[Description(@"User can define tower thermal performance by specifying the tower UA, the Design Air Flow Rate and the Design Water Flow Rate, or by specifying the tower nominal capacity")]
[JsonProperty(@"User can define tower thermal performance by specifying the tower UA, the Design Air Flow Rate and the Design Water Flow Rate, or by specifying the tower nominal capacity")]
public YesNoDefault PerformanceInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "UFactorTimesAreaAndDesignWaterFlowRate");
        
[JsonProperty(@"")]
public System.Single HeatRejectionCapacityAndNominalCapacitySizingRatio { get; set; } = 1.25;
        
[Description(@"Nominal tower capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt (3 gpm/ton). Nominal tower capacity times (1.25) gives the actual tower heat rejection at these operating conditions.")]
[JsonProperty(@"Nominal tower capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt (3 gpm/ton). Nominal tower capacity times (1.25) gives the actual tower heat rejection at these operating conditions.")]
public System.Single NominalCapacity { get; set; } = ;
        
[Description(@"Tower capacity in free convection regime with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt of nominal tower capacity (3 gpm/ton). Tower free convection capacity times (1.25) gives the actual tower heat rejection at these operating conditions.")]
[JsonProperty(@"Tower capacity in free convection regime with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt of nominal tower capacity (3 gpm/ton). Tower free convection capacity times (1.25) gives the actual tower heat rejection at these operating conditions.")]
public System.String FreeConvectionCapacity { get; set; } = "";
        
[Description(@"This field is only used if the previous field is set to autocalculate")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate")]
public System.Single FreeConvectionNominalCapacitySizingFactor { get; set; } = 0.1;
        
[Description(@"Enter the tower's design inlet air dry-bulb temperature")]
[JsonProperty(@"Enter the tower's design inlet air dry-bulb temperature")]
public System.Single DesignInletAirDryBulbTemperature { get; set; } = 35;
        
[Description(@"Enter the tower's design inlet air wet-bulb temperature")]
[JsonProperty(@"Enter the tower's design inlet air wet-bulb temperature")]
public System.Single DesignInletAirWetBulbTemperature { get; set; } = 25.6;
        
[Description(@"Enter the approach temperature corresponding to the design inlet air wet-bulb temperature and design range temperature. Design approach temp = outlet water temperature minus inlet air wet-bulb temperature at design conditions. Autosized to 3.9 deltaC.")]
[JsonProperty(@"Enter the approach temperature corresponding to the design inlet air wet-bulb temperature and design range temperature. Design approach temp = outlet water temperature minus inlet air wet-bulb temperature at design conditions. Autosized to 3.9 deltaC.")]
public System.String DesignApproachTemperature { get; set; } = (System.String)Autosize;
        
[Description(@"Enter the range temperature corresponding to the design inlet air wet-bulb temperature and design approach temperature. Design range = inlet water temperature minus outlet water temperature at design conditions. Autosized to 5.5 deltaC.")]
[JsonProperty(@"Enter the range temperature corresponding to the design inlet air wet-bulb temperature and design approach temperature. Design range = inlet water temperature minus outlet water temperature at design conditions. Autosized to 5.5 deltaC.")]
public System.String DesignRangeTemperature { get; set; } = (System.String)Autosize;
        
[Description(@"This heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when water is not flowing through the tower.")]
[JsonProperty(@"This heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when water is not flowing through the tower.")]
public System.Single BasinHeaterCapacity { get; set; } = 0;
        
[Description(@"Enter the outdoor dry-bulb temperature when the basin heater turns on")]
[JsonProperty(@"Enter the outdoor dry-bulb temperature when the basin heater turns on")]
public System.Single BasinHeaterSetpointTemperature { get; set; } = 2;
        
[Description(@"Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty(@"Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
public System.String BasinHeaterOperatingScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault EvaporationLossMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Rate of water evaporation from the cooling tower and lost to the outdoor air [%/K] Evaporation loss is calculated as percentage of the circulating condenser water rate Value entered here is percent-per-degree K of temperature drop in the condenser water Typical values are from 0.15 to 0.27 [%/K].")]
[JsonProperty(@"Rate of water evaporation from the cooling tower and lost to the outdoor air [%/K] Evaporation loss is calculated as percentage of the circulating condenser water rate Value entered here is percent-per-degree K of temperature drop in the condenser water Typical values are from 0.15 to 0.27 [%/K].")]
public System.Single EvaporationLossFactor { get; set; } = 0.2;
        
[Description(@"Rate of drift loss as a percentage of circulating condenser water flow rate Typical values are between 0.002 and 0.2% The default value is 0.008%")]
[JsonProperty(@"Rate of drift loss as a percentage of circulating condenser water flow rate Typical values are between 0.002 and 0.2% The default value is 0.008%")]
public System.Single DriftLossPercent { get; set; } = 0.008;
        
[JsonProperty(@"")]
public YesNoDefault BlowdownCalculationMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Characterizes the rate of blowdown in the cooling tower. Blowdown is water intentionally drained from the tower in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. Typical values for tower operation are 3 to 5. The default value is 3.")]
[JsonProperty(@"Characterizes the rate of blowdown in the cooling tower. Blowdown is water intentionally drained from the tower in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. Typical values for tower operation are 3 to 5. The default value is 3.")]
public System.Single BlowdownConcentrationRatio { get; set; } = 3;
        
[Description(@"Makeup water usage due to blowdown results from occasionally draining a small amount of water in the tower basin to purge scale or other contaminants to reduce their concentration in order to maintain an acceptable level of water quality. Schedule values should reflect water usage in m3/s.")]
[JsonProperty(@"Makeup water usage due to blowdown results from occasionally draining a small amount of water in the tower basin to purge scale or other contaminants to reduce their concentration in order to maintain an acceptable level of water quality. Schedule values should reflect water usage in m3/s.")]
public System.String BlowdownMakeupWaterUsageScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SupplyWaterStorageTankName { get; set; } = "";
        
[Description(@"Enter the name of an outdoor air node")]
[JsonProperty(@"Enter the name of an outdoor air node")]
public System.String OutdoorAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CapacityControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FanCycling");
        
[JsonProperty(@"")]
public System.Single NumberOfCells { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault CellControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "MinimalCell");
        
[Description(@"The allowable minimal fraction of the nominal flow rate per cell")]
[JsonProperty(@"The allowable minimal fraction of the nominal flow rate per cell")]
public System.Single CellMinimumWaterFlowRateFraction { get; set; } = 0.33;
        
[Description(@"The allowable maximal fraction of the nominal flow rate per cell")]
[JsonProperty(@"The allowable maximal fraction of the nominal flow rate per cell")]
public System.Single CellMaximumWaterFlowRateFraction { get; set; } = 2.5;
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum PerformanceInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("NominalCapacity")]
        NominalCapacity = 1,
        
        [JsonProperty("UFactorTimesAreaAndDesignWaterFlowRate")]
        UFactorTimesAreaAndDesignWaterFlowRate = 2,
    }
    
    public enum EvaporationLossModeType
    {
        
        [JsonProperty("LossFactor")]
        LossFactor = 0,
        
        [JsonProperty("SaturatedExit")]
        SaturatedExit = 1,
    }
    
    public enum BlowdownCalculationModeType
    {
        
        [JsonProperty("ConcentrationRatio")]
        ConcentrationRatio = 0,
        
        [JsonProperty("ScheduledRate")]
        ScheduledRate = 1,
    }
    
    public enum CapacityControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FanCycling")]
        FanCycling = 1,
        
        [JsonProperty("FluidBypass")]
        FluidBypass = 2,
    }
    
    public enum CellControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MaximalCell")]
        MaximalCell = 1,
        
        [JsonProperty("MinimalCell")]
        MinimalCell = 2,
    }
    
    [Description(@"This tower model is based on Merkel's theory, which is also the basis for the tower model in ASHRAE's HVAC1 Toolkit. The open wet cooling tower is modeled as a counter flow heat exchanger with a two-speed fan drawing air through the tower (induced-draft configuration). For a multi-cell tower, the capacity and air/water flow rate inputs are for the entire tower.")]
    [JsonObject("CoolingTower:TwoSpeed")]
    public class CoolingTower_TwoSpeed
    {
        
[Description(@"Name of tower Water Inlet Node")]
[JsonProperty(@"Name of tower Water Inlet Node")]
public System.String WaterInletNodeName { get; set; } = "";
        
[Description(@"Name of tower Water Outlet Node")]
[JsonProperty(@"Name of tower Water Outlet Node")]
public System.String WaterOutletNodeName { get; set; } = "";
        
[Description(@"Leave field blank if Tower Performance Input Method is NominalCapacity")]
[JsonProperty(@"Leave field blank if Tower Performance Input Method is NominalCapacity")]
public System.String DesignWaterFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HighFanSpeedAirFlowRate { get; set; } = "";
        
[Description(@"This is the fan motor electric input power at high speed")]
[JsonProperty(@"This is the fan motor electric input power at high speed")]
public System.String HighFanSpeedFanPower { get; set; } = "";
        
[Description(@"Leave field blank if Tower Performance Input Method is NominalCapacity")]
[JsonProperty(@"Leave field blank if Tower Performance Input Method is NominalCapacity")]
public System.String HighFanSpeedUFactorTimesAreaValue { get; set; } = "";
        
[Description(@"Low speed air flow rate must be less than high speed air flow rate Low speed air flow rate must be greater than free convection air flow rate")]
[JsonProperty(@"Low speed air flow rate must be less than high speed air flow rate Low speed air flow rate must be greater than free convection air flow rate")]
public System.String LowFanSpeedAirFlowRate { get; set; } = "";
        
[Description(@"This field is only used if the previous field is set to autocalculate.")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate.")]
public System.Single LowFanSpeedAirFlowRateSizingFactor { get; set; } = 0.5;
        
[Description(@"This is the fan motor electric input power at low speed")]
[JsonProperty(@"This is the fan motor electric input power at low speed")]
public System.String LowFanSpeedFanPower { get; set; } = "";
        
[Description(@"This field is only used if the previous field is set to autocalculate.")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate.")]
public System.Single LowFanSpeedFanPowerSizingFactor { get; set; } = 0.16;
        
[Description(@"Leave field blank if tower Performance Input Method is NominalCapacity Low speed tower UA must be less than high speed tower UA Low speed tower UA must be greater than free convection tower UA")]
[JsonProperty(@"Leave field blank if tower Performance Input Method is NominalCapacity Low speed tower UA must be less than high speed tower UA Low speed tower UA must be greater than free convection tower UA")]
public System.String LowFanSpeedUFactorTimesAreaValue { get; set; } = "";
        
[Description(@"This field is only used if the previous field is set to autocalculate and the Performance Input Method is UFactorTimesAreaAndDesignWaterFlowRate")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate and the Performance Input Method is UFactorTimesAreaAndDesignWaterFlowRate")]
public System.Single LowFanSpeedUFactorTimesAreaSizingFactor { get; set; } = 0.6;
        
[JsonProperty(@"")]
public System.String FreeConvectionRegimeAirFlowRate { get; set; } = (System.String)0;
        
[Description(@"This field is only used if the previous field is set to autocalculate.")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate.")]
public System.Single FreeConvectionRegimeAirFlowRateSizingFactor { get; set; } = 0.1;
        
[Description(@"Leave field blank if Tower Performance Input Method is NominalCapacity")]
[JsonProperty(@"Leave field blank if Tower Performance Input Method is NominalCapacity")]
public System.String FreeConvectionRegimeUFactorTimesAreaValue { get; set; } = (System.String)0;
        
[Description(@"This field is only used if the previous field is set to autocalculate and the Performance Input Method is UFactorTimesAreaAndDesignWaterFlowRate")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate and the Performance Input Method is UFactorTimesAreaAndDesignWaterFlowRate")]
public System.Single FreeConvectionUFactorTimesAreaValueSizingFactor { get; set; } = 0.1;
        
[Description(@"User can define tower thermal performance by specifying the tower UA, the Design Air Flow Rate and the Design Water Flow Rate, or by specifying the tower nominal capacity")]
[JsonProperty(@"User can define tower thermal performance by specifying the tower UA, the Design Air Flow Rate and the Design Water Flow Rate, or by specifying the tower nominal capacity")]
public YesNoDefault PerformanceInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "UFactorTimesAreaAndDesignWaterFlowRate");
        
[JsonProperty(@"")]
public System.Single HeatRejectionCapacityAndNominalCapacitySizingRatio { get; set; } = 1.25;
        
[Description(@"Nominal tower capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature, with the tower fan operating at high speed. Design water flow rate assumed to be 5.382E-8 m3/s per watt(3 gpm/ton). Nominal tower capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25) gives the actual tower heat rejection at these operating conditions.")]
[JsonProperty(@"Nominal tower capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature, with the tower fan operating at high speed. Design water flow rate assumed to be 5.382E-8 m3/s per watt(3 gpm/ton). Nominal tower capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25) gives the actual tower heat rejection at these operating conditions.")]
public System.Single HighSpeedNominalCapacity { get; set; } = ;
        
[Description(@"Nominal tower capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature, with the tower fan operating at low speed. Design water flow rate assumed to be 5.382E-8 m3/s per watt of tower high-speed nominal capacity (3 gpm/ton). Nominal tower capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25) gives the actual tower heat rejection at these operating conditions.")]
[JsonProperty(@"Nominal tower capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature, with the tower fan operating at low speed. Design water flow rate assumed to be 5.382E-8 m3/s per watt of tower high-speed nominal capacity (3 gpm/ton). Nominal tower capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25) gives the actual tower heat rejection at these operating conditions.")]
public System.String LowSpeedNominalCapacity { get; set; } = "";
        
[Description(@"This field is only used if the previous field is set to autocalculate")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate")]
public System.Single LowSpeedNominalCapacitySizingFactor { get; set; } = 0.5;
        
[Description(@"Tower capacity in free convection regime with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt of tower high-speed nominal capacity (3 gpm/ton). Tower free convection capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25)  gives the actual tower heat rejection at these operating conditions")]
[JsonProperty(@"Tower capacity in free convection regime with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt of tower high-speed nominal capacity (3 gpm/ton). Tower free convection capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25)  gives the actual tower heat rejection at these operating conditions")]
public System.String FreeConvectionNominalCapacity { get; set; } = "";
        
[Description(@"This field is only used if the previous field is set to autocalculate")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate")]
public System.Single FreeConvectionNominalCapacitySizingFactor { get; set; } = 0.1;
        
[Description(@"Enter the tower's design inlet air dry-bulb temperature")]
[JsonProperty(@"Enter the tower's design inlet air dry-bulb temperature")]
public System.Single DesignInletAirDryBulbTemperature { get; set; } = 35;
        
[Description(@"Enter the tower's design inlet air wet-bulb temperature")]
[JsonProperty(@"Enter the tower's design inlet air wet-bulb temperature")]
public System.Single DesignInletAirWetBulbTemperature { get; set; } = 25.6;
        
[Description(@"Enter the approach temperature corresponding to the design inlet air wet-bulb temperature and design range temperature. Design approach temp = outlet water temperature minus inlet air wet-bulb temperature at design conditions. Autosized to 3.9 deltaC.")]
[JsonProperty(@"Enter the approach temperature corresponding to the design inlet air wet-bulb temperature and design range temperature. Design approach temp = outlet water temperature minus inlet air wet-bulb temperature at design conditions. Autosized to 3.9 deltaC.")]
public System.String DesignApproachTemperature { get; set; } = (System.String)Autosize;
        
[Description(@"Enter the range temperature corresponding to the design inlet air wet-bulb temperature and design approach temperature. Design range = inlet water temperature minus outlet water temperature at design conditions. Autosized to 5.5 deltaC.")]
[JsonProperty(@"Enter the range temperature corresponding to the design inlet air wet-bulb temperature and design approach temperature. Design range = inlet water temperature minus outlet water temperature at design conditions. Autosized to 5.5 deltaC.")]
public System.String DesignRangeTemperature { get; set; } = (System.String)Autosize;
        
[Description(@"This heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when water is not flowing through the tower.")]
[JsonProperty(@"This heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when water is not flowing through the tower.")]
public System.Single BasinHeaterCapacity { get; set; } = 0;
        
[Description(@"Enter the outdoor dry-bulb temperature when the basin heater turns on")]
[JsonProperty(@"Enter the outdoor dry-bulb temperature when the basin heater turns on")]
public System.Single BasinHeaterSetpointTemperature { get; set; } = 2;
        
[Description(@"Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty(@"Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
public System.String BasinHeaterOperatingScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault EvaporationLossMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Rate of water evaporated from the cooling tower and lost to the outdoor air [%/K] Evaporation loss is calculated as percentage of the circulating condenser water rate Value entered here is percent-per-degree K of temperature drop in the condenser water Typical values are from 0.15 to 0.27 [%/K].")]
[JsonProperty(@"Rate of water evaporated from the cooling tower and lost to the outdoor air [%/K] Evaporation loss is calculated as percentage of the circulating condenser water rate Value entered here is percent-per-degree K of temperature drop in the condenser water Typical values are from 0.15 to 0.27 [%/K].")]
public System.Single EvaporationLossFactor { get; set; } = 0.2;
        
[Description(@"Rate of drift loss as a percentage of circulating condenser water flow rate Typical values are between 0.002 and 0.2% The default value is 0.008%")]
[JsonProperty(@"Rate of drift loss as a percentage of circulating condenser water flow rate Typical values are between 0.002 and 0.2% The default value is 0.008%")]
public System.Single DriftLossPercent { get; set; } = 0.008;
        
[JsonProperty(@"")]
public YesNoDefault BlowdownCalculationMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Characterizes the rate of blowdown in the cooling tower. Blowdown is water intentionally drained from the tower in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. Typical values for tower operation are 3 to 5. The default value is 3.")]
[JsonProperty(@"Characterizes the rate of blowdown in the cooling tower. Blowdown is water intentionally drained from the tower in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. Typical values for tower operation are 3 to 5. The default value is 3.")]
public System.Single BlowdownConcentrationRatio { get; set; } = 3;
        
[Description(@"Makeup water usage due to blowdown results from occasionally draining some amount of water in the tower basin to purge scale or other contaminants to reduce their concentration in order to maintain an acceptable level of water quality. Schedule values should reflect water usage in m3/s.")]
[JsonProperty(@"Makeup water usage due to blowdown results from occasionally draining some amount of water in the tower basin to purge scale or other contaminants to reduce their concentration in order to maintain an acceptable level of water quality. Schedule values should reflect water usage in m3/s.")]
public System.String BlowdownMakeupWaterUsageScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SupplyWaterStorageTankName { get; set; } = "";
        
[Description(@"Enter the name of an outdoor air node")]
[JsonProperty(@"Enter the name of an outdoor air node")]
public System.String OutdoorAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfCells { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault CellControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "MinimalCell");
        
[Description(@"The allowable minimal fraction of the nominal flow rate per cell")]
[JsonProperty(@"The allowable minimal fraction of the nominal flow rate per cell")]
public System.Single CellMinimumWaterFlowRateFraction { get; set; } = 0.33;
        
[Description(@"The allowable maximal fraction of the nominal flow rate per cell")]
[JsonProperty(@"The allowable maximal fraction of the nominal flow rate per cell")]
public System.Single CellMaximumWaterFlowRateFraction { get; set; } = 2.5;
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum PerformanceInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("NominalCapacity")]
        NominalCapacity = 1,
        
        [JsonProperty("UFactorTimesAreaAndDesignWaterFlowRate")]
        UFactorTimesAreaAndDesignWaterFlowRate = 2,
    }
    
    public enum EvaporationLossModeType
    {
        
        [JsonProperty("LossFactor")]
        LossFactor = 0,
        
        [JsonProperty("SaturatedExit")]
        SaturatedExit = 1,
    }
    
    public enum BlowdownCalculationModeType
    {
        
        [JsonProperty("ConcentrationRatio")]
        ConcentrationRatio = 0,
        
        [JsonProperty("ScheduledRate")]
        ScheduledRate = 1,
    }
    
    public enum CellControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MaximalCell")]
        MaximalCell = 1,
        
        [JsonProperty("MinimalCell")]
        MinimalCell = 2,
    }
    
    [Description(@"This tower model is based on Merkel's theory, which is also the basis for the tower model in ASHRAE's HVAC1 Toolkit. The open wet cooling tower is modeled as a counter flow heat exchanger with a variable-speed fan drawing air through the tower (induced-draft configuration). For a multi-cell tower, the capacity and air/water flow rate inputs are for the entire tower.")]
    [JsonObject("CoolingTower:VariableSpeed:Merkel")]
    public class CoolingTower_VariableSpeed_Merkel
    {
        
[Description(@"Name of tower water inlet node")]
[JsonProperty(@"Name of tower water inlet node")]
public System.String WaterInletNodeName { get; set; } = "";
        
[Description(@"Name of tower water outlet node")]
[JsonProperty(@"Name of tower water outlet node")]
public System.String WaterOutletNodeName { get; set; } = "";
        
[Description(@"User can define tower thermal performance by specifying the tower UA, the Design Air Flow Rate and the Design Water Flow Rate, or by specifying the tower nominal capacity")]
[JsonProperty(@"User can define tower thermal performance by specifying the tower UA, the Design Air Flow Rate and the Design Water Flow Rate, or by specifying the tower nominal capacity")]
public YesNoDefault PerformanceInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NominalCapacity");
        
[JsonProperty(@"")]
public System.Single HeatRejectionCapacityAndNominalCapacitySizingRatio { get; set; } = 1.25;
        
[Description(@"Nominal tower capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature, with the tower fan operating at Design Air Flow Rate (full speed). Design water flow rate is as set in Design Water Flow Rate per Unit of Nominal Capacity. Nominal tower capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25) gives the actual tower heat rejection at these operating conditions.")]
[JsonProperty(@"Nominal tower capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature, with the tower fan operating at Design Air Flow Rate (full speed). Design water flow rate is as set in Design Water Flow Rate per Unit of Nominal Capacity. Nominal tower capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25) gives the actual tower heat rejection at these operating conditions.")]
public System.String NominalCapacity { get; set; } = "";
        
[Description(@"required field when performance method is NominalCapacity Tower capacity in free convection regime with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate is as set in Design Water Flow Rate per Unit of Nominal Capacity. Tower free convection capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25)  gives the actual tower heat rejection at these operating conditions")]
[JsonProperty(@"required field when performance method is NominalCapacity Tower capacity in free convection regime with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate is as set in Design Water Flow Rate per Unit of Nominal Capacity. Tower free convection capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25)  gives the actual tower heat rejection at these operating conditions")]
public System.String FreeConvectionNominalCapacity { get; set; } = "";
        
[Description(@"This field is only used if the previous field is set to autocalculate")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate")]
public System.Single FreeConvectionNominalCapacitySizingFactor { get; set; } = 0.1;
        
[JsonProperty(@"")]
public System.String DesignWaterFlowRate { get; set; } = "";
        
[Description(@"This field is only used if the previous is set to autocalculate and performance input method is NominalCapacity")]
[JsonProperty(@"This field is only used if the previous is set to autocalculate and performance input method is NominalCapacity")]
public System.Single DesignWaterFlowRatePerUnitOfNominalCapacity { get; set; } = 5.382E-08;
        
[Description(@"This is the air flow rate at full fan speed")]
[JsonProperty(@"This is the air flow rate at full fan speed")]
public System.String DesignAirFlowRate { get; set; } = "";
        
[Description(@"This field is only used if the previous is set to autocalculate When field is left blank the default scaling factor is adjusted for elevation to increase volume flow at altitude When field has a value the scaling factor is used without adjusting for elevation")]
[JsonProperty(@"This field is only used if the previous is set to autocalculate When field is left blank the default scaling factor is adjusted for elevation to increase volume flow at altitude When field has a value the scaling factor is used without adjusting for elevation")]
public System.Single DesignAirFlowRatePerUnitOfNominalCapacity { get; set; } = 2.76316E-05;
        
[Description(@"Enter the minimum air flow rate ratio. This is typically determined by the variable speed drive that controls the fan motor speed. Valid entries are from 0.1 to 0.5.")]
[JsonProperty(@"Enter the minimum air flow rate ratio. This is typically determined by the variable speed drive that controls the fan motor speed. Valid entries are from 0.1 to 0.5.")]
public System.Single MinimumAirFlowRateRatio { get; set; } = 0.2;
        
[Description(@"This is the fan motor electric input power at high speed")]
[JsonProperty(@"This is the fan motor electric input power at high speed")]
public System.String DesignFanPower { get; set; } = "";
        
[Description(@"This field is only used if the previous is set to autocalculate [W/W] Watts of fan power per Watt of tower nominal capacity")]
[JsonProperty(@"This field is only used if the previous is set to autocalculate [W/W] Watts of fan power per Watt of tower nominal capacity")]
public System.Single DesignFanPowerPerUnitOfNominalCapacity { get; set; } = 0.0105;
        
[Description(@"Any curve or table with one independent variable can be used cubic curve = a + b*AFR + c*AFR**2 + d*AFR**3 quartic curve = a + b*AFR + c*AFR**2 + d*AFR**3 + e*AFR**4 x = AFR = Ratio of current operating air flow rate to Design Air Flow Rate")]
[JsonProperty(@"Any curve or table with one independent variable can be used cubic curve = a + b*AFR + c*AFR**2 + d*AFR**3 quartic curve = a + b*AFR + c*AFR**2 + d*AFR**3 + e*AFR**4 x = AFR = Ratio of current operating air flow rate to Design Air Flow Rate")]
public System.String FanPowerModifierFunctionOfAirFlowRateRatioCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FreeConvectionRegimeAirFlowRate { get; set; } = (System.String)0;
        
[Description(@"This field is only used if the previous field is set to autocalculate.")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate.")]
public System.Single FreeConvectionRegimeAirFlowRateSizingFactor { get; set; } = 0.1;
        
[Description(@"required field when performance method is UFactorTimesAreaAndDesignWaterFlowRate when performance method is NominalCapacity the program will solve for this UA")]
[JsonProperty(@"required field when performance method is UFactorTimesAreaAndDesignWaterFlowRate when performance method is NominalCapacity the program will solve for this UA")]
public System.String DesignAirFlowRateUFactorTimesAreaValue { get; set; } = "";
        
[Description(@"required field when performance input method is UFactorTimesAreaAndDesignWaterFlowRate Leave field blank if performance input method is NominalCapacity")]
[JsonProperty(@"required field when performance input method is UFactorTimesAreaAndDesignWaterFlowRate Leave field blank if performance input method is NominalCapacity")]
public System.String FreeConvectionRegimeUFactorTimesAreaValue { get; set; } = (System.String)0;
        
[Description(@"required field when performance input method is UFactorTimesAreaAndDesignWaterFlowRate This field is only used if the previous field is set to autocalculate and the performance input method is UFactorTimesAreaAndDesignWaterFlowRate")]
[JsonProperty(@"required field when performance input method is UFactorTimesAreaAndDesignWaterFlowRate This field is only used if the previous field is set to autocalculate and the performance input method is UFactorTimesAreaAndDesignWaterFlowRate")]
public System.Single FreeConvectionUFactorTimesAreaValueSizingFactor { get; set; } = 0.1;
        
[Description(@"This curve describes how tower's design UA changes with variable air flow rate Any curve or table with one independent variable can be used cubic curve = a + b*AFR + c*AFR**2 + d*AFR**3 quartic curve = a + b*AFR + c*AFR**2 + d*AFR**3 + e*AFR**4 x = AFR = Ratio of current operating air flow rate to Design Air Flow Rate")]
[JsonProperty(@"This curve describes how tower's design UA changes with variable air flow rate Any curve or table with one independent variable can be used cubic curve = a + b*AFR + c*AFR**2 + d*AFR**3 quartic curve = a + b*AFR + c*AFR**2 + d*AFR**3 + e*AFR**4 x = AFR = Ratio of current operating air flow rate to Design Air Flow Rate")]
public System.String UFactorTimesAreaModifierFunctionOfAirFlowRatioCurveName { get; set; } = "";
        
[Description(@"curve describes how tower UA changes with outdoor air wet-bulb temperature difference from design wet-bulb Any curve or table with one independent variable can be used cubic curve = a + b*DeltaWB + c*DeltaWB**2 + d*DeltaWB**3 quartic curve = a + b*DeltaWB + c*DeltaWB**2 + d*DeltaWB**3 + e*DeltaWB**4 x = DeltaWB = (design wet-bulb temperature in C - current wet-bulb temperature in C) where design wet-bulb temperature of entering air is 25.56C (78F)")]
[JsonProperty(@"curve describes how tower UA changes with outdoor air wet-bulb temperature difference from design wet-bulb Any curve or table with one independent variable can be used cubic curve = a + b*DeltaWB + c*DeltaWB**2 + d*DeltaWB**3 quartic curve = a + b*DeltaWB + c*DeltaWB**2 + d*DeltaWB**3 + e*DeltaWB**4 x = DeltaWB = (design wet-bulb temperature in C - current wet-bulb temperature in C) where design wet-bulb temperature of entering air is 25.56C (78F)")]
public System.String UFactorTimesAreaModifierFunctionOfWetbulbTemperatureDifferenceCurveName { get; set; } = "";
        
[Description(@"curve describes how tower UA changes with the flow rate of condenser water through the tower Any curve or table with one independent variable can be used cubic curve = a + b*WFR + c*WFR**2 + d*WFR**3 quartic curve = a + b*WFR + c*WFR**2 + d*WFR**3 + e*WFR**4 x = WFR = Ratio of current operating water flow rate to Design Water Flow Rate")]
[JsonProperty(@"curve describes how tower UA changes with the flow rate of condenser water through the tower Any curve or table with one independent variable can be used cubic curve = a + b*WFR + c*WFR**2 + d*WFR**3 quartic curve = a + b*WFR + c*WFR**2 + d*WFR**3 + e*WFR**4 x = WFR = Ratio of current operating water flow rate to Design Water Flow Rate")]
public System.String UFactorTimesAreaModifierFunctionOfWaterFlowRatioCurveName { get; set; } = "";
        
[Description(@"Enter the tower's design inlet air dry-bulb temperature")]
[JsonProperty(@"Enter the tower's design inlet air dry-bulb temperature")]
public System.Single DesignInletAirDryBulbTemperature { get; set; } = 35;
        
[Description(@"Enter the tower's design inlet air wet-bulb temperature")]
[JsonProperty(@"Enter the tower's design inlet air wet-bulb temperature")]
public System.Single DesignInletAirWetBulbTemperature { get; set; } = 25.6;
        
[Description(@"Enter the approach temperature corresponding to the design inlet air wet-bulb temperature and design range temperature. Design approach temp = outlet water temperature minus inlet air wet-bulb temperature at design conditions. Autosized to 3.9 deltaC.")]
[JsonProperty(@"Enter the approach temperature corresponding to the design inlet air wet-bulb temperature and design range temperature. Design approach temp = outlet water temperature minus inlet air wet-bulb temperature at design conditions. Autosized to 3.9 deltaC.")]
public System.String DesignApproachTemperature { get; set; } = (System.String)Autosize;
        
[Description(@"Enter the range temperature corresponding to the design inlet air wet-bulb temperature and design approach temperature. Design range = inlet water temperature minus outlet water temperature at design conditions. Autosized to 5.5 deltaC.")]
[JsonProperty(@"Enter the range temperature corresponding to the design inlet air wet-bulb temperature and design approach temperature. Design range = inlet water temperature minus outlet water temperature at design conditions. Autosized to 5.5 deltaC.")]
public System.String DesignRangeTemperature { get; set; } = (System.String)Autosize;
        
[Description(@"This heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when water is not flowing through the tower.")]
[JsonProperty(@"This heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when water is not flowing through the tower.")]
public System.Single BasinHeaterCapacity { get; set; } = 0;
        
[Description(@"Enter the outdoor dry-bulb temperature when the basin heater turns on")]
[JsonProperty(@"Enter the outdoor dry-bulb temperature when the basin heater turns on")]
public System.Single BasinHeaterSetpointTemperature { get; set; } = 2;
        
[Description(@"Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty(@"Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
public System.String BasinHeaterOperatingScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault EvaporationLossMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Rate of water evaporated from the cooling tower and lost to the outdoor air [%/K] Evaporation loss is calculated as percentage of the circulating condenser water rate Value entered here is percent-per-degree K of temperature drop in the condenser water Typical values are from 0.15 to 0.27 [%/K].")]
[JsonProperty(@"Rate of water evaporated from the cooling tower and lost to the outdoor air [%/K] Evaporation loss is calculated as percentage of the circulating condenser water rate Value entered here is percent-per-degree K of temperature drop in the condenser water Typical values are from 0.15 to 0.27 [%/K].")]
public System.Single EvaporationLossFactor { get; set; } = 0.2;
        
[Description(@"Rate of drift loss as a percentage of circulating condenser water flow rate Typical values are between 0.002 and 0.2% The default value is 0.008%")]
[JsonProperty(@"Rate of drift loss as a percentage of circulating condenser water flow rate Typical values are between 0.002 and 0.2% The default value is 0.008%")]
public System.Single DriftLossPercent { get; set; } = 0.008;
        
[JsonProperty(@"")]
public YesNoDefault BlowdownCalculationMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Characterizes the rate of blowdown in the cooling tower. Blowdown is water intentionally drained from the tower in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. Typical values for tower operation are 3 to 5. The default value is 3.")]
[JsonProperty(@"Characterizes the rate of blowdown in the cooling tower. Blowdown is water intentionally drained from the tower in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. Typical values for tower operation are 3 to 5. The default value is 3.")]
public System.Single BlowdownConcentrationRatio { get; set; } = 3;
        
[Description(@"Makeup water usage due to blowdown results from occasionally draining some amount of water in the tower basin to purge scale or other contaminants to reduce their concentration in order to maintain an acceptable level of water quality. Schedule values should reflect water usage in m3/s.")]
[JsonProperty(@"Makeup water usage due to blowdown results from occasionally draining some amount of water in the tower basin to purge scale or other contaminants to reduce their concentration in order to maintain an acceptable level of water quality. Schedule values should reflect water usage in m3/s.")]
public System.String BlowdownMakeupWaterUsageScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SupplyWaterStorageTankName { get; set; } = "";
        
[Description(@"Enter the name of an outdoor air node")]
[JsonProperty(@"Enter the name of an outdoor air node")]
public System.String OutdoorAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfCells { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault CellControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "MinimalCell");
        
[Description(@"The allowable minimal fraction of the nominal flow rate per cell")]
[JsonProperty(@"The allowable minimal fraction of the nominal flow rate per cell")]
public System.Single CellMinimumWaterFlowRateFraction { get; set; } = 0.33;
        
[Description(@"The allowable maximal fraction of the nominal flow rate per cell")]
[JsonProperty(@"The allowable maximal fraction of the nominal flow rate per cell")]
public System.Single CellMaximumWaterFlowRateFraction { get; set; } = 2.5;
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum PerformanceInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("NominalCapacity")]
        NominalCapacity = 1,
        
        [JsonProperty("UFactorTimesAreaAndDesignWaterFlowRate")]
        UFactorTimesAreaAndDesignWaterFlowRate = 2,
    }
    
    public enum EvaporationLossModeType
    {
        
        [JsonProperty("LossFactor")]
        LossFactor = 0,
        
        [JsonProperty("SaturatedExit")]
        SaturatedExit = 1,
    }
    
    public enum BlowdownCalculationModeType
    {
        
        [JsonProperty("ConcentrationRatio")]
        ConcentrationRatio = 0,
        
        [JsonProperty("ScheduledRate")]
        ScheduledRate = 1,
    }
    
    public enum CellControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MaximalCell")]
        MaximalCell = 1,
        
        [JsonProperty("MinimalCell")]
        MinimalCell = 2,
    }
    
    [Description(@"This open wet tower model is based on purely empirical algorithms derived from manufacturer's performance data or field measurements. The user can select from two existing algorithms (CoolTools or YorkCalc), or they can enter their own correlation for approach temperature by using a variable speed tower model coefficient object. For a multi-cell tower, the capacity and air/water flow rate inputs are for the entire tower.")]
    [JsonObject("CoolingTower:VariableSpeed")]
    public class CoolingTower_VariableSpeed
    {
        
[Description(@"Name of tower water inlet node")]
[JsonProperty(@"Name of tower water inlet node")]
public System.String WaterInletNodeName { get; set; } = "";
        
[Description(@"Name of tower water outlet node")]
[JsonProperty(@"Name of tower water outlet node")]
public System.String WaterOutletNodeName { get; set; } = "";
        
[Description(@"Determines the coefficients and form of the equation for calculating approach temperature")]
[JsonProperty(@"Determines the coefficients and form of the equation for calculating approach temperature")]
public YesNoDefault ModelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "YorkCalc");
        
[Description(@"Name of the tower model coefficient object. Used only when tower Model Type is either CoolToolsUserDefined or YorkCalcUserDefined.")]
[JsonProperty(@"Name of the tower model coefficient object. Used only when tower Model Type is either CoolToolsUserDefined or YorkCalcUserDefined.")]
public System.String ModelCoefficientName { get; set; } = "";
        
[Description(@"Enter the tower's design inlet air wet-bulb temperature")]
[JsonProperty(@"Enter the tower's design inlet air wet-bulb temperature")]
public System.Single DesignInletAirWetBulbTemperature { get; set; } = 25.6;
        
[Description(@"Enter the approach temperature corresponding to the design inlet air wet-bulb temperature and design range temperature. Design approach temp = outlet water temperature minus inlet air wet-bulb temperature at design conditions.")]
[JsonProperty(@"Enter the approach temperature corresponding to the design inlet air wet-bulb temperature and design range temperature. Design approach temp = outlet water temperature minus inlet air wet-bulb temperature at design conditions.")]
public System.Single DesignApproachTemperature { get; set; } = 3.9;
        
[Description(@"Enter the range temperature corresponding to the design inlet air wet-bulb temperature and design approach temperature. Design range = inlet water temperature minus outlet water temperature at design conditions.")]
[JsonProperty(@"Enter the range temperature corresponding to the design inlet air wet-bulb temperature and design approach temperature. Design range = inlet water temperature minus outlet water temperature at design conditions.")]
public System.Single DesignRangeTemperature { get; set; } = 5.6;
        
[Description(@"Water flow rate through the tower at design conditions")]
[JsonProperty(@"Water flow rate through the tower at design conditions")]
public System.String DesignWaterFlowRate { get; set; } = "";
        
[Description(@"Design (maximum) air flow rate through the tower")]
[JsonProperty(@"Design (maximum) air flow rate through the tower")]
public System.String DesignAirFlowRate { get; set; } = "";
        
[Description(@"Enter the fan motor electric input power at design (max) air flow through the tower Standard conversion for horsepower is 1 HP = 745.7 W")]
[JsonProperty(@"Enter the fan motor electric input power at design (max) air flow through the tower Standard conversion for horsepower is 1 HP = 745.7 W")]
public System.String DesignFanPower { get; set; } = "";
        
[Description(@"FPR = a + b*AFR + c*AFR**2 + d*AFR**3 FPR = fraction of the design fan power AFR = fraction of the design air flow rate If left blank, then fan power is assumed to be proportional to (air flow rate ratio)^3")]
[JsonProperty(@"FPR = a + b*AFR + c*AFR**2 + d*AFR**3 FPR = fraction of the design fan power AFR = fraction of the design air flow rate If left blank, then fan power is assumed to be proportional to (air flow rate ratio)^3")]
public System.String FanPowerRatioFunctionOfAirFlowRateRatioCurveName { get; set; } = "";
        
[Description(@"Enter the minimum air flow rate ratio. This is typically determined by the variable speed drive that controls the fan motor speed. Valid entries are from 0.2 to 0.5.")]
[JsonProperty(@"Enter the minimum air flow rate ratio. This is typically determined by the variable speed drive that controls the fan motor speed. Valid entries are from 0.2 to 0.5.")]
public System.Single MinimumAirFlowRateRatio { get; set; } = 0.2;
        
[Description(@"Enter the fraction of tower capacity in the free convection regime. This is the fraction of the tower capacity, at the current inlet air wet-bulb temperature, that is available when the tower fan is off. Manufacturers typically estimate the free convection capacity at approximately 10-15%. Values are entered as a fraction and can range from 0 to 0.2.")]
[JsonProperty(@"Enter the fraction of tower capacity in the free convection regime. This is the fraction of the tower capacity, at the current inlet air wet-bulb temperature, that is available when the tower fan is off. Manufacturers typically estimate the free convection capacity at approximately 10-15%. Values are entered as a fraction and can range from 0 to 0.2.")]
public System.Single FractionOfTowerCapacityInFreeConvectionRegime { get; set; } = 0.125;
        
[Description(@"This heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when water is not flowing through the tower.")]
[JsonProperty(@"This heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when water is not flowing through the tower.")]
public System.Single BasinHeaterCapacity { get; set; } = 0;
        
[Description(@"Enter the outdoor dry-bulb temperature when the basin heater turns on")]
[JsonProperty(@"Enter the outdoor dry-bulb temperature when the basin heater turns on")]
public System.Single BasinHeaterSetpointTemperature { get; set; } = 2;
        
[Description(@"Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty(@"Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
public System.String BasinHeaterOperatingScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault EvaporationLossMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Rate of water evaporated from the cooling tower and lost to the outdoor air [%/K] Evaporation loss is calculated as percentage of the circulating condenser water rate Value entered here is percent-per-degree K of temperature drop in the condenser water Typical values are from 0.15 to 0.27 [percent/K].")]
[JsonProperty(@"Rate of water evaporated from the cooling tower and lost to the outdoor air [%/K] Evaporation loss is calculated as percentage of the circulating condenser water rate Value entered here is percent-per-degree K of temperature drop in the condenser water Typical values are from 0.15 to 0.27 [percent/K].")]
public System.Single EvaporationLossFactor { get; set; } = 0.2;
        
[Description(@"Rate of drift loss as a percentage of circulating condenser water flow rate Typical values are between 0.002 and 0.2% The default value is 0.008%")]
[JsonProperty(@"Rate of drift loss as a percentage of circulating condenser water flow rate Typical values are between 0.002 and 0.2% The default value is 0.008%")]
public System.Single DriftLossPercent { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault BlowdownCalculationMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Characterizes the rate of blowdown in the cooling tower. Blowdown is water intentionally drained from the tower in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. Typical values for tower operation are 3 to 5. The default value is 3.")]
[JsonProperty(@"Characterizes the rate of blowdown in the cooling tower. Blowdown is water intentionally drained from the tower in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. Typical values for tower operation are 3 to 5. The default value is 3.")]
public System.Single BlowdownConcentrationRatio { get; set; } = 3;
        
[Description(@"Makeup water usage due to blowdown results from occasionally draining a small amount of water in the tower basin to purge scale or other contaminants to reduce their concentration in order to maintain an acceptable level of water quality. Schedule values should reflect water usage in m3/s.")]
[JsonProperty(@"Makeup water usage due to blowdown results from occasionally draining a small amount of water in the tower basin to purge scale or other contaminants to reduce their concentration in order to maintain an acceptable level of water quality. Schedule values should reflect water usage in m3/s.")]
public System.String BlowdownMakeupWaterUsageScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SupplyWaterStorageTankName { get; set; } = "";
        
[Description(@"Enter the name of an outdoor air node")]
[JsonProperty(@"Enter the name of an outdoor air node")]
public System.String OutdoorAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfCells { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault CellControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "MinimalCell");
        
[Description(@"The allowable minimal fraction of the nominal flow rate per cell")]
[JsonProperty(@"The allowable minimal fraction of the nominal flow rate per cell")]
public System.Single CellMinimumWaterFlowRateFraction { get; set; } = 0.33;
        
[Description(@"The allowable maximal fraction of the nominal flow rate per cell")]
[JsonProperty(@"The allowable maximal fraction of the nominal flow rate per cell")]
public System.Single CellMaximumWaterFlowRateFraction { get; set; } = 2.5;
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum ModelTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CoolToolsCrossFlow")]
        CoolToolsCrossFlow = 1,
        
        [JsonProperty("CoolToolsUserDefined")]
        CoolToolsUserDefined = 2,
        
        [JsonProperty("YorkCalc")]
        YorkCalc = 3,
        
        [JsonProperty("YorkCalcUserDefined")]
        YorkCalcUserDefined = 4,
    }
    
    public enum EvaporationLossModeType
    {
        
        [JsonProperty("LossFactor")]
        LossFactor = 0,
        
        [JsonProperty("SaturatedExit")]
        SaturatedExit = 1,
    }
    
    public enum BlowdownCalculationModeType
    {
        
        [JsonProperty("ConcentrationRatio")]
        ConcentrationRatio = 0,
        
        [JsonProperty("ScheduledRate")]
        ScheduledRate = 1,
    }
    
    public enum CellControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MaximalCell")]
        MaximalCell = 1,
        
        [JsonProperty("MinimalCell")]
        MinimalCell = 2,
    }
    
    [Description("This object is used to define coefficients for the approach temperature correlati" +
        "on for a variable speed cooling tower when tower Model Type is specified as Cool" +
        "ToolsUserDefined in the object CoolingTower:VariableSpeed.")]
    [JsonObject("CoolingTowerPerformance:CoolTools")]
    public class CoolingTowerPerformance_CoolTools
    {
        
[Description(@"Minimum valid inlet air wet-bulb temperature for this approach temperature correlation.")]
[JsonProperty(@"Minimum valid inlet air wet-bulb temperature for this approach temperature correlation.")]
public System.Single MinimumInletAirWetBulbTemperature { get; set; } = ;
        
[Description(@"Maximum valid inlet air wet-bulb temperature for this approach temperature correlation.")]
[JsonProperty(@"Maximum valid inlet air wet-bulb temperature for this approach temperature correlation.")]
public System.Single MaximumInletAirWetBulbTemperature { get; set; } = ;
        
[Description(@"Minimum valid range temperature for this approach temperature correlation.")]
[JsonProperty(@"Minimum valid range temperature for this approach temperature correlation.")]
public System.Single MinimumRangeTemperature { get; set; } = ;
        
[Description(@"Maximum valid range temperature for this approach temperature correlation.")]
[JsonProperty(@"Maximum valid range temperature for this approach temperature correlation.")]
public System.Single MaximumRangeTemperature { get; set; } = ;
        
[Description(@"Minimum valid approach temperature for this correlation.")]
[JsonProperty(@"Minimum valid approach temperature for this correlation.")]
public System.Single MinimumApproachTemperature { get; set; } = ;
        
[Description(@"Maximum valid approach temperature for this correlation.")]
[JsonProperty(@"Maximum valid approach temperature for this correlation.")]
public System.Single MaximumApproachTemperature { get; set; } = ;
        
[Description(@"Minimum valid water flow rate ratio for this approach temperature correlation.")]
[JsonProperty(@"Minimum valid water flow rate ratio for this approach temperature correlation.")]
public System.Single MinimumWaterFlowRateRatio { get; set; } = ;
        
[Description(@"Maximum valid water flow rate ratio for this approach temperature correlation.")]
[JsonProperty(@"Maximum valid water flow rate ratio for this approach temperature correlation.")]
public System.Single MaximumWaterFlowRateRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
    }
    
    [Description("This object is used to define coefficients for the approach temperature correlati" +
        "on for a variable speed cooling tower when tower Model Type is specified as York" +
        "CalcUserDefined in the object CoolingTower:VariableSpeed.")]
    [JsonObject("CoolingTowerPerformance:YorkCalc")]
    public class CoolingTowerPerformance_YorkCalc
    {
        
[Description(@"Minimum valid inlet air wet-bulb temperature for this approach temperature correlation.")]
[JsonProperty(@"Minimum valid inlet air wet-bulb temperature for this approach temperature correlation.")]
public System.Single MinimumInletAirWetBulbTemperature { get; set; } = ;
        
[Description(@"Maximum valid inlet air wet-bulb temperature for this approach temperature correlation.")]
[JsonProperty(@"Maximum valid inlet air wet-bulb temperature for this approach temperature correlation.")]
public System.Single MaximumInletAirWetBulbTemperature { get; set; } = ;
        
[Description(@"Minimum valid range temperature for this approach temperature correlation.")]
[JsonProperty(@"Minimum valid range temperature for this approach temperature correlation.")]
public System.Single MinimumRangeTemperature { get; set; } = ;
        
[Description(@"Maximum valid range temperature for this approach temperature correlation.")]
[JsonProperty(@"Maximum valid range temperature for this approach temperature correlation.")]
public System.Single MaximumRangeTemperature { get; set; } = ;
        
[Description(@"Minimum valid approach temperature for this correlation.")]
[JsonProperty(@"Minimum valid approach temperature for this correlation.")]
public System.Single MinimumApproachTemperature { get; set; } = ;
        
[Description(@"Maximum valid approach temperature for this correlation.")]
[JsonProperty(@"Maximum valid approach temperature for this correlation.")]
public System.Single MaximumApproachTemperature { get; set; } = ;
        
[Description(@"Minimum valid water flow rate ratio for this approach temperature correlation.")]
[JsonProperty(@"Minimum valid water flow rate ratio for this approach temperature correlation.")]
public System.Single MinimumWaterFlowRateRatio { get; set; } = ;
        
[Description(@"Maximum valid water flow rate ratio for this approach temperature correlation.")]
[JsonProperty(@"Maximum valid water flow rate ratio for this approach temperature correlation.")]
public System.Single MaximumWaterFlowRateRatio { get; set; } = ;
        
[Description(@"Maximum liquid (water) to gas (air) ratio for this approach temperature correlation.")]
[JsonProperty(@"Maximum liquid (water) to gas (air) ratio for this approach temperature correlation.")]
public System.Single MaximumLiquidToGasRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Coefficient { get; set; } = ;
    }
    
    [Description("This model is based on Merkel\'s theory, which is also the basis for the cooling t" +
        "ower model in EnergyPlus. The Evaporative fluid cooler is modeled as a counter f" +
        "low heat exchanger.")]
    [JsonObject("EvaporativeFluidCooler:SingleSpeed")]
    public class EvaporativeFluidCooler_SingleSpeed
    {
        
[Description(@"Name of Fluid Cooler water inlet node")]
[JsonProperty(@"Name of Fluid Cooler water inlet node")]
public System.String WaterInletNodeName { get; set; } = "";
        
[Description(@"Name of Fluid Cooler water outlet node")]
[JsonProperty(@"Name of Fluid Cooler water outlet node")]
public System.String WaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DesignAirFlowRate { get; set; } = "";
        
[Description(@"This is the fan motor electric input power")]
[JsonProperty(@"This is the fan motor electric input power")]
public System.String DesignAirFlowRateFanPower { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DesignSprayWaterFlowRate { get; set; } = ;
        
[Description(@"User can define fluid cooler thermal performance by specifying the fluid cooler UA and the Design Water Flow Rate, or by specifying the fluid cooler Standard Design Capacity or by specifying Design Capacity for Non standard conditions.")]
[JsonProperty(@"User can define fluid cooler thermal performance by specifying the fluid cooler UA and the Design Water Flow Rate, or by specifying the fluid cooler Standard Design Capacity or by specifying Design Capacity for Non standard conditions.")]
public YesNoDefault PerformanceInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of an outdoor air node")]
[JsonProperty(@"Enter the name of an outdoor air node")]
public System.String OutdoorAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single HeatRejectionCapacityAndNominalCapacitySizingRatio { get; set; } = 1.25;
        
[Description(@"Standard design capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt (3 gpm/ton). Standard design capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25) gives the actual fluid cooler heat rejection at these operating conditions. Only used for Performance Input Method = StandardDesignCapacity; for other input methods, this field is ignored. The standard conditions mentioned above for Standard design capacity are already specified in the EnergyPlus. So the input fields such as design entering water temp., design entering air wet-bulb and dry-bulb temp. and design water flow rate, if provided in the input, will be ignored for the StandardDesignCapacity performance input method. Also, the standard conditions are for water as a fluid type so this performance input method can only be used with water as a fluid type (as specified in CondenserLoop object).")]
[JsonProperty(@"Standard design capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt (3 gpm/ton). Standard design capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25) gives the actual fluid cooler heat rejection at these operating conditions. Only used for Performance Input Method = StandardDesignCapacity; for other input methods, this field is ignored. The standard conditions mentioned above for Standard design capacity are already specified in the EnergyPlus. So the input fields such as design entering water temp., design entering air wet-bulb and dry-bulb temp. and design water flow rate, if provided in the input, will be ignored for the StandardDesignCapacity performance input method. Also, the standard conditions are for water as a fluid type so this performance input method can only be used with water as a fluid type (as specified in CondenserLoop object).")]
public System.Single StandardDesignCapacity { get; set; } = ;
        
[Description(@"Only used for Performance Input Method = UFactorTimesAreaAndDesignWaterFlowRate; for other Performance Input Methods, this field is ignored.")]
[JsonProperty(@"Only used for Performance Input Method = UFactorTimesAreaAndDesignWaterFlowRate; for other Performance Input Methods, this field is ignored.")]
public System.String DesignAirFlowRateUFactorTimesAreaValue { get; set; } = "";
        
[Description(@"Input value is ignored if fluid cooler Performance Input Method= StandardDesignCapacity.")]
[JsonProperty(@"Input value is ignored if fluid cooler Performance Input Method= StandardDesignCapacity.")]
public System.String DesignWaterFlowRate { get; set; } = "";
        
[Description(@"Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other Performance Input Methods, this field is ignored.")]
[JsonProperty(@"Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other Performance Input Methods, this field is ignored.")]
public System.Single UserSpecifiedDesignCapacity { get; set; } = ;
        
[Description(@"Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other Performance Input Methods, this field is ignored. Design Entering Water Temperature must be greater than Design Entering Air Temperature.")]
[JsonProperty(@"Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other Performance Input Methods, this field is ignored. Design Entering Water Temperature must be greater than Design Entering Air Temperature.")]
public System.Single DesignEnteringWaterTemperature { get; set; } = ;
        
[Description(@"Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other Performance Input Methods, this field is ignored. Design Entering Air Temperature must be greater than Design Entering Air Wet-bulb Temperature.")]
[JsonProperty(@"Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other Performance Input Methods, this field is ignored. Design Entering Air Temperature must be greater than Design Entering Air Wet-bulb Temperature.")]
public System.Single DesignEnteringAirTemperature { get; set; } = ;
        
[Description(@"Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other Performance Input Methods, this field is ignored. Design Entering Air Wet-bulb Temperature must be less than Design Entering Air Temperature.")]
[JsonProperty(@"Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other Performance Input Methods, this field is ignored. Design Entering Air Wet-bulb Temperature must be less than Design Entering Air Temperature.")]
public System.Single DesignEnteringAirWetBulbTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault CapacityControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FanCycling");
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault EvaporationLossMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SaturatedExit");
        
[Description(@"Rate of water evaporation from the Fluid Cooler and lost to the outdoor air [%/K] Empirical correlation is used to calculate default loss factor if it not explicitly provided.")]
[JsonProperty(@"Rate of water evaporation from the Fluid Cooler and lost to the outdoor air [%/K] Empirical correlation is used to calculate default loss factor if it not explicitly provided.")]
public System.Single EvaporationLossFactor { get; set; } = ;
        
[Description(@"Rate of drift loss as a percentage of circulating spray water flow rate Default value for this field is under investigation. For now Cooling tower's drift loss percent default value is taken here.")]
[JsonProperty(@"Rate of drift loss as a percentage of circulating spray water flow rate Default value for this field is under investigation. For now Cooling tower's drift loss percent default value is taken here.")]
public System.Single DriftLossPercent { get; set; } = 0.008;
        
[JsonProperty(@"")]
public YesNoDefault BlowdownCalculationMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ConcentrationRatio");
        
[Description(@"Characterizes the rate of blowdown in the Evaporative Fluid Cooler. Blowdown is water intentionally drained from the basin in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. Default value for this field is under investigation. For now Cooling tower's Blowdown Concentration Ratio percent default value is taken here.")]
[JsonProperty(@"Characterizes the rate of blowdown in the Evaporative Fluid Cooler. Blowdown is water intentionally drained from the basin in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. Default value for this field is under investigation. For now Cooling tower's Blowdown Concentration Ratio percent default value is taken here.")]
public System.Single BlowdownConcentrationRatio { get; set; } = 3;
        
[Description(@"Makeup water usage due to blowdown results from occasionally draining a small amount of water in the Fluid Cooler basin to purge scale or other contaminants to reduce their concentration in order to maintain an acceptable level of water quality. Schedule values should reflect water usage in m3/s.")]
[JsonProperty(@"Makeup water usage due to blowdown results from occasionally draining a small amount of water in the Fluid Cooler basin to purge scale or other contaminants to reduce their concentration in order to maintain an acceptable level of water quality. Schedule values should reflect water usage in m3/s.")]
public System.String BlowdownMakeupWaterUsageScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SupplyWaterStorageTankName { get; set; } = "";
    }
    
    public enum PerformanceInputMethodType
    {
        
        [JsonProperty("StandardDesignCapacity")]
        StandardDesignCapacity = 0,
        
        [JsonProperty("UFactorTimesAreaAndDesignWaterFlowRate")]
        UFactorTimesAreaAndDesignWaterFlowRate = 1,
        
        [JsonProperty("UserSpecifiedDesignCapacity")]
        UserSpecifiedDesignCapacity = 2,
    }
    
    public enum CapacityControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FanCycling")]
        FanCycling = 1,
        
        [JsonProperty("FluidBypass")]
        FluidBypass = 2,
    }
    
    public enum EvaporationLossModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LossFactor")]
        LossFactor = 1,
        
        [JsonProperty("SaturatedExit")]
        SaturatedExit = 2,
    }
    
    public enum BlowdownCalculationModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConcentrationRatio")]
        ConcentrationRatio = 1,
        
        [JsonProperty("ScheduledRate")]
        ScheduledRate = 2,
    }
    
    [Description("This model is based on Merkel\'s theory, which is also the basis for the cooling t" +
        "ower model in EnergyPlus. The Evaporative fluid cooler is modeled as a counter f" +
        "low heat exchanger.")]
    [JsonObject("EvaporativeFluidCooler:TwoSpeed")]
    public class EvaporativeFluidCooler_TwoSpeed
    {
        
[Description(@"Name of fluid cooler water inlet node")]
[JsonProperty(@"Name of fluid cooler water inlet node")]
public System.String WaterInletNodeName { get; set; } = "";
        
[Description(@"Name of fluid cooler water outlet node")]
[JsonProperty(@"Name of fluid cooler water outlet node")]
public System.String WaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HighFanSpeedAirFlowRate { get; set; } = "";
        
[Description(@"This is the fan motor electric input power at high speed")]
[JsonProperty(@"This is the fan motor electric input power at high speed")]
public System.String HighFanSpeedFanPower { get; set; } = "";
        
[Description(@"Low speed air flow rate must be less than high speed air flow rate")]
[JsonProperty(@"Low speed air flow rate must be less than high speed air flow rate")]
public System.String LowFanSpeedAirFlowRate { get; set; } = "";
        
[Description(@"This field is only used if the previous field is set to autocalculate")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate")]
public System.Single LowFanSpeedAirFlowRateSizingFactor { get; set; } = 0.5;
        
[Description(@"This is the fan motor electric input power at low speed")]
[JsonProperty(@"This is the fan motor electric input power at low speed")]
public System.String LowFanSpeedFanPower { get; set; } = "";
        
[Description(@"This field is only used if the previous field is set to autocalculate.")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate.")]
public System.Single LowFanSpeedFanPowerSizingFactor { get; set; } = 0.16;
        
[JsonProperty(@"")]
public System.Single DesignSprayWaterFlowRate { get; set; } = ;
        
[Description(@"User can define fluid cooler thermal performance by specifying the fluid cooler UA and the Design Water Flow Rate, or by specifying the fluid cooler Standard Design Capacity or by specifying Design Capacity for Non standard conditions.")]
[JsonProperty(@"User can define fluid cooler thermal performance by specifying the fluid cooler UA and the Design Water Flow Rate, or by specifying the fluid cooler Standard Design Capacity or by specifying Design Capacity for Non standard conditions.")]
public YesNoDefault PerformanceInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of an outdoor air node")]
[JsonProperty(@"Enter the name of an outdoor air node")]
public System.String OutdoorAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single HeatRejectionCapacityAndNominalCapacitySizingRatio { get; set; } = 1.25;
        
[Description(@"Standard design capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt (3 gpm/ton). Standard design capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25) gives the actual fluid cooler heat rejection at these operating conditions. Only used for Performance Input Method = StandardDesignCapacity; for other input methods, this field is ignored. The standard conditions mentioned above for Standard design capacity are already specified in the EnergyPlus. So the input fields such as design entering water temp., design entering air wet-bulb and dry-bulb temp. and design water flow rate, if provided in the input, will be ignored for the StandardDesignCapacity performance input method. Also, the standard conditions are for water as a fluid type so this performance input method can only be used with water as a fluid type (as specified in CondenserLoop object).")]
[JsonProperty(@"Standard design capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt (3 gpm/ton). Standard design capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25) gives the actual fluid cooler heat rejection at these operating conditions. Only used for Performance Input Method = StandardDesignCapacity; for other input methods, this field is ignored. The standard conditions mentioned above for Standard design capacity are already specified in the EnergyPlus. So the input fields such as design entering water temp., design entering air wet-bulb and dry-bulb temp. and design water flow rate, if provided in the input, will be ignored for the StandardDesignCapacity performance input method. Also, the standard conditions are for water as a fluid type so this performance input method can only be used with water as a fluid type (as specified in CondenserLoop object).")]
public System.Single HighSpeedStandardDesignCapacity { get; set; } = ;
        
[Description(@"Standard design capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt (3 gpm/ton). Standard design capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25) gives the actual fluid cooler heat rejection at these operating conditions. Only used for Performance Input Method = StandardDesignCapacity; for other input methods, this field is ignored. The standard conditions mentioned above for Standard design capacity are already specified in the EnergyPlus. So the input fields such as design entering water temp., design entering air wet-bulb and dry-bulb temp. and design water flow rate, if provided in the input, will be ignored for the StandardDesignCapacity performance input method. Also, the standard conditions are for water as a fluid type so this performance input method can only be used with water as a fluid type (as specified in CondenserLoop object).")]
[JsonProperty(@"Standard design capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt (3 gpm/ton). Standard design capacity times the Heat Rejection Capacity and Nominal Capacity Sizing Ratio (e.g. 1.25) gives the actual fluid cooler heat rejection at these operating conditions. Only used for Performance Input Method = StandardDesignCapacity; for other input methods, this field is ignored. The standard conditions mentioned above for Standard design capacity are already specified in the EnergyPlus. So the input fields such as design entering water temp., design entering air wet-bulb and dry-bulb temp. and design water flow rate, if provided in the input, will be ignored for the StandardDesignCapacity performance input method. Also, the standard conditions are for water as a fluid type so this performance input method can only be used with water as a fluid type (as specified in CondenserLoop object).")]
public System.String LowSpeedStandardDesignCapacity { get; set; } = "";
        
[Description(@"This field is only used if the previous field is set to autocalculate")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate")]
public System.Single LowSpeedStandardCapacitySizingFactor { get; set; } = 0.5;
        
[Description(@"Only used for Performance Input Method = UFactorTimesAreaAndDesignWaterFlowRate; for other Performance Input Methods, this field is ignored.")]
[JsonProperty(@"Only used for Performance Input Method = UFactorTimesAreaAndDesignWaterFlowRate; for other Performance Input Methods, this field is ignored.")]
public System.String HighFanSpeedUFactorTimesAreaValue { get; set; } = "";
        
[Description(@"Only used for Performance Input Method = UFactorTimesAreaAndDesignWaterFlowRate; for other input methods, this field is ignored. Low speed fluid cooler UA must be less than high speed fluid cooler UA")]
[JsonProperty(@"Only used for Performance Input Method = UFactorTimesAreaAndDesignWaterFlowRate; for other input methods, this field is ignored. Low speed fluid cooler UA must be less than high speed fluid cooler UA")]
public System.String LowFanSpeedUFactorTimesAreaValue { get; set; } = "";
        
[Description(@"This field is only used if the previous field is set to autocalculate and the Performance Input Method is UFactorTimesAreaAndDesignWaterFlowRate")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate and the Performance Input Method is UFactorTimesAreaAndDesignWaterFlowRate")]
public System.Single LowFanSpeedUFactorTimesAreaSizingFactor { get; set; } = 0.6;
        
[Description(@"Input value is ignored if fluid cooler Performance Input Method= StandardDesignCapacity")]
[JsonProperty(@"Input value is ignored if fluid cooler Performance Input Method= StandardDesignCapacity")]
public System.String DesignWaterFlowRate { get; set; } = "";
        
[Description(@"Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other Performance Input Methods, this field is ignored.")]
[JsonProperty(@"Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other Performance Input Methods, this field is ignored.")]
public System.Single HighSpeedUserSpecifiedDesignCapacity { get; set; } = ;
        
[Description(@"Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other Performance Input Methods, this field is ignored.")]
[JsonProperty(@"Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other Performance Input Methods, this field is ignored.")]
public System.String LowSpeedUserSpecifiedDesignCapacity { get; set; } = "";
        
[Description(@"This field is only used if the previous field is set to autocalculate")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate")]
public System.Single LowSpeedUserSpecifiedDesignCapacitySizingFactor { get; set; } = 0.5;
        
[Description(@"Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other Performance Input Methods, this field is ignored. Design Entering Water Temperature must be greater than Design Entering Air Temperature.")]
[JsonProperty(@"Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other Performance Input Methods, this field is ignored. Design Entering Water Temperature must be greater than Design Entering Air Temperature.")]
public System.Single DesignEnteringWaterTemperature { get; set; } = ;
        
[Description(@"Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other Performance Input Methods, this field is ignored. Design Entering Air Temperature must be greater than Design Entering Air Wet-bulb Temperature.")]
[JsonProperty(@"Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other Performance Input Methods, this field is ignored. Design Entering Air Temperature must be greater than Design Entering Air Wet-bulb Temperature.")]
public System.Single DesignEnteringAirTemperature { get; set; } = ;
        
[Description(@"Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other Performance Input Methods, this field is ignored. Design Entering Air Wet-bulb Temperature must be less than Design Entering Air Temperature.")]
[JsonProperty(@"Only used for Performance Input Method = UserSpecifiedDesignCapacity; for other Performance Input Methods, this field is ignored. Design Entering Air Wet-bulb Temperature must be less than Design Entering Air Temperature.")]
public System.Single DesignEnteringAirWetBulbTemperature { get; set; } = ;
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single HighSpeedSizingFactor { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault EvaporationLossMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SaturatedExit");
        
[Description(@"Rate of water evaporation from the Fluid Cooler and lost to the outdoor air [%/K] Empirical correlation is used to calculate default loss factor if it not explicitly provided.")]
[JsonProperty(@"Rate of water evaporation from the Fluid Cooler and lost to the outdoor air [%/K] Empirical correlation is used to calculate default loss factor if it not explicitly provided.")]
public System.Single EvaporationLossFactor { get; set; } = ;
        
[Description(@"Default value is under investigation. For now cooling tower's default value is taken.")]
[JsonProperty(@"Default value is under investigation. For now cooling tower's default value is taken.")]
public System.Single DriftLossPercent { get; set; } = 0.008;
        
[JsonProperty(@"")]
public YesNoDefault BlowdownCalculationMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ConcentrationRatio");
        
[Description(@"Characterizes the rate of blowdown in the Evaporative Fluid Cooler. Blowdown is water intentionally drained from the Evaporative Fluid Cooler in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. Default value is under investigation. For now cooling tower's default value is taken.")]
[JsonProperty(@"Characterizes the rate of blowdown in the Evaporative Fluid Cooler. Blowdown is water intentionally drained from the Evaporative Fluid Cooler in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. Default value is under investigation. For now cooling tower's default value is taken.")]
public System.Single BlowdownConcentrationRatio { get; set; } = 3;
        
[Description(@"Makeup water usage due to blowdown results from occasionally draining some amount of water in the Evaporative Fluid Cooler basin to purge scale or other contaminants to reduce their concentration in order to maintain an acceptable level of water quality. Schedule values should reflect water usage in m3/s.")]
[JsonProperty(@"Makeup water usage due to blowdown results from occasionally draining some amount of water in the Evaporative Fluid Cooler basin to purge scale or other contaminants to reduce their concentration in order to maintain an acceptable level of water quality. Schedule values should reflect water usage in m3/s.")]
public System.String BlowdownMakeupWaterUsageScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SupplyWaterStorageTankName { get; set; } = "";
    }
    
    public enum PerformanceInputMethodType
    {
        
        [JsonProperty("StandardDesignCapacity")]
        StandardDesignCapacity = 0,
        
        [JsonProperty("UFactorTimesAreaAndDesignWaterFlowRate")]
        UFactorTimesAreaAndDesignWaterFlowRate = 1,
        
        [JsonProperty("UserSpecifiedDesignCapacity")]
        UserSpecifiedDesignCapacity = 2,
    }
    
    public enum EvaporationLossModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LossFactor")]
        LossFactor = 1,
        
        [JsonProperty("SaturatedExit")]
        SaturatedExit = 2,
    }
    
    public enum BlowdownCalculationModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConcentrationRatio")]
        ConcentrationRatio = 1,
        
        [JsonProperty("ScheduledRate")]
        ScheduledRate = 2,
    }
    
    [Description("The fluid cooler is modeled as a cross flow heat exchanger (both streams unmixed)" +
        " with single-speed fans (induced draft configuration).")]
    [JsonObject("FluidCooler:SingleSpeed")]
    public class FluidCooler_SingleSpeed
    {
        
[Description(@"Name of fluid cooler water inlet node")]
[JsonProperty(@"Name of fluid cooler water inlet node")]
public System.String WaterInletNodeName { get; set; } = "";
        
[Description(@"Name of fluid cooler water outlet node")]
[JsonProperty(@"Name of fluid cooler water outlet node")]
public System.String WaterOutletNodeName { get; set; } = "";
        
[Description(@"User can define fluid cooler thermal performance by specifying the fluid cooler UA and the Design Water Flow Rate, or by specifying the fluid cooler nominal capacity")]
[JsonProperty(@"User can define fluid cooler thermal performance by specifying the fluid cooler UA and the Design Water Flow Rate, or by specifying the fluid cooler nominal capacity")]
public YesNoDefault PerformanceInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NominalCapacity");
        
[Description(@"Leave field blank if fluid cooler Performance Input Method is NominalCapacity")]
[JsonProperty(@"Leave field blank if fluid cooler Performance Input Method is NominalCapacity")]
public System.String DesignAirFlowRateUFactorTimesAreaValue { get; set; } = "";
        
[Description(@"Nominal fluid cooler capacity")]
[JsonProperty(@"Nominal fluid cooler capacity")]
public System.Single NominalCapacity { get; set; } = ;
        
[Description(@"Design Entering Water Temperature must be specified for both the performance input methods and its value must be greater than Design Entering Air Temperature.")]
[JsonProperty(@"Design Entering Water Temperature must be specified for both the performance input methods and its value must be greater than Design Entering Air Temperature.")]
public System.Single DesignEnteringWaterTemperature { get; set; } = ;
        
[Description(@"Design Entering Air Temperature must be specified for both the performance input methods and its value must be greater than Design Entering Air Wet-bulb Temperature.")]
[JsonProperty(@"Design Entering Air Temperature must be specified for both the performance input methods and its value must be greater than Design Entering Air Wet-bulb Temperature.")]
public System.Single DesignEnteringAirTemperature { get; set; } = ;
        
[Description(@"Design Entering Air Wet-bulb Temperature must be specified for both the performance input methods and its value must be less than Design Entering Air Temperature.")]
[JsonProperty(@"Design Entering Air Wet-bulb Temperature must be specified for both the performance input methods and its value must be less than Design Entering Air Temperature.")]
public System.Single DesignEnteringAirWetbulbTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.String DesignWaterFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DesignAirFlowRate { get; set; } = "";
        
[Description(@"This is the fan motor electric input power")]
[JsonProperty(@"This is the fan motor electric input power")]
public System.String DesignAirFlowRateFanPower { get; set; } = "";
        
[Description(@"Enter the name of an outdoor air node")]
[JsonProperty(@"Enter the name of an outdoor air node")]
public System.String OutdoorAirInletNodeName { get; set; } = "";
    }
    
    public enum PerformanceInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("NominalCapacity")]
        NominalCapacity = 1,
        
        [JsonProperty("UFactorTimesAreaAndDesignWaterFlowRate")]
        UFactorTimesAreaAndDesignWaterFlowRate = 2,
    }
    
    [Description("The fluid cooler is modeled as a cross flow heat exchanger (both streams unmixed)" +
        " with two-speed fans (induced draft configuration).")]
    [JsonObject("FluidCooler:TwoSpeed")]
    public class FluidCooler_TwoSpeed
    {
        
[Description(@"Name of fluid cooler water inlet node")]
[JsonProperty(@"Name of fluid cooler water inlet node")]
public System.String WaterInletNodeName { get; set; } = "";
        
[Description(@"Name of fluid cooler water outlet node")]
[JsonProperty(@"Name of fluid cooler water outlet node")]
public System.String WaterOutletNodeName { get; set; } = "";
        
[Description(@"User can define fluid cooler thermal performance by specifying the fluid cooler UA and the Design Water Flow Rate, or by specifying the fluid cooler nominal capacity")]
[JsonProperty(@"User can define fluid cooler thermal performance by specifying the fluid cooler UA and the Design Water Flow Rate, or by specifying the fluid cooler nominal capacity")]
public YesNoDefault PerformanceInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NominalCapacity");
        
[Description(@"Leave field blank if fluid cooler Performance Input Method is NominalCapacity")]
[JsonProperty(@"Leave field blank if fluid cooler Performance Input Method is NominalCapacity")]
public System.String HighFanSpeedUFactorTimesAreaValue { get; set; } = "";
        
[Description(@"Leave field blank if fluid cooler Performance Input Method is NominalCapacity Low speed fluid cooler UA must be less than high speed fluid cooler UA Low speed fluid cooler UA must be greater than free convection fluid cooler UA")]
[JsonProperty(@"Leave field blank if fluid cooler Performance Input Method is NominalCapacity Low speed fluid cooler UA must be less than high speed fluid cooler UA Low speed fluid cooler UA must be greater than free convection fluid cooler UA")]
public System.String LowFanSpeedUFactorTimesAreaValue { get; set; } = "";
        
[Description(@"This field is only used if the previous field is set to autocalculate and the Performance Input Method is UFactorTimesAreaAndDesignWaterFlowRate")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate and the Performance Input Method is UFactorTimesAreaAndDesignWaterFlowRate")]
public System.Single LowFanSpeedUFactorTimesAreaSizingFactor { get; set; } = 0.6;
        
[Description(@"Nominal fluid cooler capacity at high fan speed")]
[JsonProperty(@"Nominal fluid cooler capacity at high fan speed")]
public System.Single HighSpeedNominalCapacity { get; set; } = ;
        
[Description(@"Nominal fluid cooler capacity at low fan speed")]
[JsonProperty(@"Nominal fluid cooler capacity at low fan speed")]
public System.String LowSpeedNominalCapacity { get; set; } = "";
        
[Description(@"This field is only used if the previous field is set to autocalculate and the Performance Input Method is NominalCapacity")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate and the Performance Input Method is NominalCapacity")]
public System.Single LowSpeedNominalCapacitySizingFactor { get; set; } = 0.5;
        
[Description(@"Design Entering Water Temperature must be specified for both the performance input methods and its value must be greater than Design Entering Air Temperature.")]
[JsonProperty(@"Design Entering Water Temperature must be specified for both the performance input methods and its value must be greater than Design Entering Air Temperature.")]
public System.Single DesignEnteringWaterTemperature { get; set; } = ;
        
[Description(@"Design Entering Air Temperature must be specified for both the performance input methods and its value must be greater than Design Entering Air Wet-bulb Temperature.")]
[JsonProperty(@"Design Entering Air Temperature must be specified for both the performance input methods and its value must be greater than Design Entering Air Wet-bulb Temperature.")]
public System.Single DesignEnteringAirTemperature { get; set; } = ;
        
[Description(@"Design Entering Air Wet-bulb Temperature must be specified for both the performance input methods and its value must be less than Design Entering Air Temperature.")]
[JsonProperty(@"Design Entering Air Wet-bulb Temperature must be specified for both the performance input methods and its value must be less than Design Entering Air Temperature.")]
public System.Single DesignEnteringAirWetBulbTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.String DesignWaterFlowRate { get; set; } = "";
        
[Description(@"Air Flow Rate at High Fan Speed must be greater than Air Flow Rate at Low Fan Speed")]
[JsonProperty(@"Air Flow Rate at High Fan Speed must be greater than Air Flow Rate at Low Fan Speed")]
public System.String HighFanSpeedAirFlowRate { get; set; } = "";
        
[Description(@"This is the fan motor electric input power at high speed")]
[JsonProperty(@"This is the fan motor electric input power at high speed")]
public System.String HighFanSpeedFanPower { get; set; } = "";
        
[Description(@"Air Flow Rate at Low Fan Speed must be less than Air Flow Rate at High Fan Speed")]
[JsonProperty(@"Air Flow Rate at Low Fan Speed must be less than Air Flow Rate at High Fan Speed")]
public System.String LowFanSpeedAirFlowRate { get; set; } = "";
        
[Description(@"This field is only used if the previous field is set to autocalculate.")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate.")]
public System.Single LowFanSpeedAirFlowRateSizingFactor { get; set; } = 0.5;
        
[Description(@"This is the fan motor electric input power at low speed")]
[JsonProperty(@"This is the fan motor electric input power at low speed")]
public System.String LowFanSpeedFanPower { get; set; } = "";
        
[Description(@"This field is only used if the previous field is set to autocalculate.")]
[JsonProperty(@"This field is only used if the previous field is set to autocalculate.")]
public System.Single LowFanSpeedFanPowerSizingFactor { get; set; } = 0.16;
        
[JsonProperty(@"")]
public System.String OutdoorAirInletNodeName { get; set; } = "";
    }
    
    public enum PerformanceInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("NominalCapacity")]
        NominalCapacity = 1,
        
        [JsonProperty("UFactorTimesAreaAndDesignWaterFlowRate")]
        UFactorTimesAreaAndDesignWaterFlowRate = 2,
    }
    
    [Description("Models vertical ground heat exchangers systems using the response factor approach" +
        " developed by Eskilson. Response factors are calculated using a finite line sour" +
        "ce model assuming uniform heat flux at the borehole wall.")]
    [JsonObject("GroundHeatExchanger:System")]
    public class GroundHeatExchanger_System
    {
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DesignFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault UndisturbedGroundTemperatureModelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String UndisturbedGroundTemperatureModelName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single GroundThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single GroundThermalHeatCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.String GheVerticalResponsefactorsObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String GheVerticalArrayObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String VerticalWellLocations { get; set; } = "";
    }
    
    public enum UndisturbedGroundTemperatureModelTypeType
    {
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:FiniteDifference")]
        SiteGroundTemperatureUndisturbedFiniteDifference = 0,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:KusudaAchenbach")]
        SiteGroundTemperatureUndisturbedKusudaAchenbach = 1,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:Xing")]
        SiteGroundTemperatureUndisturbedXing = 2,
    }
    
    [Description("Properties for vertical ground heat exchanger systems")]
    [JsonObject("GroundHeatExchanger:Vertical:Properties")]
    public class GroundHeatExchanger_Vertical_Properties
    {
        
[JsonProperty(@"")]
public System.Single DepthOfTopOfBorehole { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single BoreholeLength { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single BoreholeDiameter { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single GroutThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single GroutThermalHeatCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PipeThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PipeThermalHeatCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PipeOuterDiameter { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PipeThickness { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single UTubeDistance { get; set; } = ;
    }
    
    [Description(null)]
    [JsonObject("GroundHeatExchanger:Vertical:Array")]
    public class GroundHeatExchanger_Vertical_Array
    {
        
[JsonProperty(@"")]
public System.String GheVerticalPropertiesObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfBoreholesInXDirection { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NumberOfBoreholesInYDirection { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single BoreholeSpacing { get; set; } = ;
    }
    
    [Description(null)]
    [JsonObject("GroundHeatExchanger:Vertical:Single")]
    public class GroundHeatExchanger_Vertical_Single
    {
        
[JsonProperty(@"")]
public System.String GheVerticalPropertiesObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single XLocation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single YLocation { get; set; } = ;
    }
    
    [Description("Response factor definitions from third-party tool, commonly referred to a \"g-func" +
        "tions\"")]
    [JsonObject("GroundHeatExchanger:ResponseFactors")]
    public class GroundHeatExchanger_ResponseFactors
    {
        
[JsonProperty(@"")]
public System.String GheVerticalPropertiesObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfBoreholes { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single GFunctionReferenceRatio { get; set; } = 0.0005;
        
[JsonProperty(@"")]
public System.String GFunctions { get; set; } = "";
    }
    
    [Description("A model of a shallow pond with immersed pipe loops. Typically used in hybrid geot" +
        "hermal systems and included in the condenser loop. This component may also be us" +
        "ed as a simple solar collector.")]
    [JsonObject("GroundHeatExchanger:Pond")]
    public class GroundHeatExchanger_Pond
    {
        
[JsonProperty(@"")]
public System.String FluidInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FluidOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single PondDepth { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PondArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single HydronicTubingInsideDiameter { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single HydronicTubingOutsideDiameter { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single HydronicTubingThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single GroundThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NumberOfTubingCircuits { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LengthOfEachTubingCircuit { get; set; } = ;
    }
    
    [Description(@"A hydronic surface/panel consisting of a multi-layer construction with embedded rows of tubes. Typically used in hybrid geothermal systems and included in the condenser loop. This component may also be used as a simple solar collector. The bottom surface may be defined as ground-coupled or exposed to wind (eg. bridge deck).")]
    [JsonObject("GroundHeatExchanger:Surface")]
    public class GroundHeatExchanger_Surface
    {
        
[JsonProperty(@"")]
public System.String ConstructionName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FluidInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FluidOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single HydronicTubingInsideDiameter { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NumberOfTubingCircuits { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single HydronicTubeSpacing { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SurfaceLength { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SurfaceWidth { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault LowerSurfaceEnvironment { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Ground");
    }
    
    public enum LowerSurfaceEnvironmentType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Exposed")]
        Exposed = 1,
        
        [JsonProperty("Ground")]
        Ground = 2,
    }
    
    [Description("This models a horizontal heat exchanger placed in a series of trenches The model " +
        "uses the PipingSystem:Underground underlying algorithms, but provides a more usa" +
        "ble input interface.")]
    [JsonObject("GroundHeatExchanger:HorizontalTrench")]
    public class GroundHeatExchanger_HorizontalTrench
    {
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DesignFlowRate { get; set; } = ;
        
[Description(@"This is the total pipe axial length of the heat exchanger If all pipe trenches are parallel, this is the length of a single trench. If a single, long run of pipe is used with one trench, this is the full length of the pipe run.")]
[JsonProperty(@"This is the total pipe axial length of the heat exchanger If all pipe trenches are parallel, this is the length of a single trench. If a single, long run of pipe is used with one trench, this is the full length of the pipe run.")]
public System.Single TrenchLengthInPipeAxialDirection { get; set; } = 50;
        
[Description(@"This is the number of horizontal legs that will be used in the entire heat exchanger, one pipe per trench")]
[JsonProperty(@"This is the number of horizontal legs that will be used in the entire heat exchanger, one pipe per trench")]
public System.Single NumberOfTrenches { get; set; } = 1;
        
[Description(@"This represents the average horizontal spacing between any two trenches for heat exchangers that have multiple trenches")]
[JsonProperty(@"This represents the average horizontal spacing between any two trenches for heat exchangers that have multiple trenches")]
public System.Single HorizontalSpacingBetweenPipes { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single PipeInnerDiameter { get; set; } = 0.016;
        
[JsonProperty(@"")]
public System.Single PipeOuterDiameter { get; set; } = 0.026;
        
[Description(@"This is the burial depth of the pipes, or the trenches containing the pipes")]
[JsonProperty(@"This is the burial depth of the pipes, or the trenches containing the pipes")]
public System.Single BurialDepth { get; set; } = 1.5;
        
[JsonProperty(@"")]
public System.Single SoilThermalConductivity { get; set; } = 1.08;
        
[JsonProperty(@"")]
public System.Single SoilDensity { get; set; } = 962;
        
[JsonProperty(@"")]
public System.Single SoilSpecificHeat { get; set; } = 2576;
        
[JsonProperty(@"")]
public System.Single PipeThermalConductivity { get; set; } = 0.3895;
        
[JsonProperty(@"")]
public System.Single PipeDensity { get; set; } = 641;
        
[JsonProperty(@"")]
public System.Single PipeSpecificHeat { get; set; } = 2405;
        
[JsonProperty(@"")]
public System.Single SoilMoistureContentPercent { get; set; } = 30;
        
[JsonProperty(@"")]
public System.Single SoilMoistureContentPercentAtSaturation { get; set; } = 50;
        
[JsonProperty(@"")]
public YesNoDefault UndisturbedGroundTemperatureModelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String UndisturbedGroundTemperatureModelName { get; set; } = "";
        
[Description(@"This specifies the ground cover effects during evapotranspiration calculations. The value roughly represents the following cases: = 0   : concrete or other solid, non-permeable ground surface material = 0.5 : short grass, much like a manicured lawn = 1   : standard reference state (12 cm grass) = 1.5 : wild growth")]
[JsonProperty(@"This specifies the ground cover effects during evapotranspiration calculations. The value roughly represents the following cases: = 0   : concrete or other solid, non-permeable ground surface material = 0.5 : short grass, much like a manicured lawn = 1   : standard reference state (12 cm grass) = 1.5 : wild growth")]
public System.Single EvapotranspirationGroundCoverParameter { get; set; } = 0.4;
    }
    
    public enum UndisturbedGroundTemperatureModelTypeType
    {
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:FiniteDifference")]
        SiteGroundTemperatureUndisturbedFiniteDifference = 0,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:KusudaAchenbach")]
        SiteGroundTemperatureUndisturbedKusudaAchenbach = 1,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:Xing")]
        SiteGroundTemperatureUndisturbedXing = 2,
    }
    
    [Description(@"This models a slinky horizontal heat exchanger placed in a series of trenches The model uses the model developed by: Xiong, Z., D.E. Fisher, and J.D. Spitler. 2015. Development and Validation of a Slinky Ground Heat Exchanger Model. Applied Energy 141: 57-69.")]
    [JsonObject("GroundHeatExchanger:Slinky")]
    public class GroundHeatExchanger_Slinky
    {
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DesignFlowRate { get; set; } = 0.002;
        
[JsonProperty(@"")]
public System.Single SoilThermalConductivity { get; set; } = 1.08;
        
[JsonProperty(@"")]
public System.Single SoilDensity { get; set; } = 962;
        
[JsonProperty(@"")]
public System.Single SoilSpecificHeat { get; set; } = 2576;
        
[JsonProperty(@"")]
public System.Single PipeThermalConductivity { get; set; } = 0.4;
        
[JsonProperty(@"")]
public System.Single PipeDensity { get; set; } = 641;
        
[JsonProperty(@"")]
public System.Single PipeSpecificHeat { get; set; } = 2405;
        
[JsonProperty(@"")]
public System.Single PipeOuterDiameter { get; set; } = 0.02667;
        
[JsonProperty(@"")]
public System.Single PipeThickness { get; set; } = 0.002413;
        
[Description(@"This is the orientation of the heat exchanger")]
[JsonProperty(@"This is the orientation of the heat exchanger")]
public YesNoDefault HeatExchangerConfiguration { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"This is the diameter of the heat exchanger coil")]
[JsonProperty(@"This is the diameter of the heat exchanger coil")]
public System.Single CoilDiameter { get; set; } = 1;
        
[Description(@"This is the center-to-center distance between coils")]
[JsonProperty(@"This is the center-to-center distance between coils")]
public System.Single CoilPitch { get; set; } = 0.2;
        
[Description(@"This is the distance from the ground surface to the trench bottom")]
[JsonProperty(@"This is the distance from the ground surface to the trench bottom")]
public System.Single TrenchDepth { get; set; } = 1.8;
        
[Description(@"This is the total length of a single trench This assumes the heat exchanger runs the full length of the trench")]
[JsonProperty(@"This is the total length of a single trench This assumes the heat exchanger runs the full length of the trench")]
public System.Single TrenchLength { get; set; } = 10;
        
[Description(@"This is the number of parallel trenches that has a heat exchanger, one per trench")]
[JsonProperty(@"This is the number of parallel trenches that has a heat exchanger, one per trench")]
public System.Single NumberOfTrenches { get; set; } = 1;
        
[Description(@"This represents the average horizontal spacing between any two trenches for heat exchangers that have multiple trenches")]
[JsonProperty(@"This represents the average horizontal spacing between any two trenches for heat exchangers that have multiple trenches")]
public System.Single HorizontalSpacingBetweenPipes { get; set; } = 2;
        
[JsonProperty(@"")]
public YesNoDefault UndisturbedGroundTemperatureModelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String UndisturbedGroundTemperatureModelName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MaximumLengthOfSimulation { get; set; } = ;
    }
    
    public enum HeatExchangerConfigurationType
    {
        
        [JsonProperty("Horizontal")]
        Horizontal = 0,
        
        [JsonProperty("Vertical")]
        Vertical = 1,
    }
    
    public enum UndisturbedGroundTemperatureModelTypeType
    {
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:FiniteDifference")]
        SiteGroundTemperatureUndisturbedFiniteDifference = 0,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:KusudaAchenbach")]
        SiteGroundTemperatureUndisturbedKusudaAchenbach = 1,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:Xing")]
        SiteGroundTemperatureUndisturbedXing = 2,
    }
    
    [Description("A fluid/fluid heat exchanger designed to couple the supply side of one loop to th" +
        "e demand side of another loop Loops can be either plant or condenser loops but n" +
        "o air side connections are allowed")]
    [JsonObject("HeatExchanger:FluidToFluid")]
    public class HeatExchanger_FluidToFluid
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. default is that heat exchanger is on")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. default is that heat exchanger is on")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"This connection is to the demand side of a loop and is the inlet to the heat exchanger")]
[JsonProperty(@"This connection is to the demand side of a loop and is the inlet to the heat exchanger")]
public System.String LoopDemandSideInletNodeName { get; set; } = "";
        
[Description(@"This connection is to the demand side of a loop")]
[JsonProperty(@"This connection is to the demand side of a loop")]
public System.String LoopDemandSideOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LoopDemandSideDesignFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LoopSupplySideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LoopSupplySideOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LoopSupplySideDesignFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatExchangeModelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Ideal");
        
[JsonProperty(@"")]
public System.String HeatExchangerUFactorTimesAreaValue { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "UncontrolledOn");
        
[Description(@"Setpoint node is needed with any Control Type that is "*Setpoint*"")]
[JsonProperty(@"Setpoint node is needed with any Control Type that is "*Setpoint*"")]
public System.String HeatExchangerSetpointNodeName { get; set; } = "";
        
[Description(@"Tolerance between control temperatures used to determine if heat exchanger should run.")]
[JsonProperty(@"Tolerance between control temperatures used to determine if heat exchanger should run.")]
public System.Single MinimumTemperatureDifferenceToActivateHeatExchanger { get; set; } = 0.01;
        
[Description(@"This field controls end use reporting for heat transfer meters")]
[JsonProperty(@"This field controls end use reporting for heat transfer meters")]
public YesNoDefault HeatTransferMeteringEndUseType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "LoopToLoop");
        
[Description(@"This field is only used if Control Type is set to CoolingSetpointOnOffWithComponentOverride")]
[JsonProperty(@"This field is only used if Control Type is set to CoolingSetpointOnOffWithComponentOverride")]
public System.String ComponentOverrideLoopSupplySideInletNodeName { get; set; } = "";
        
[Description(@"This field is only used if Control Type is set to CoolingSetpointOnOffWithComponentOverride")]
[JsonProperty(@"This field is only used if Control Type is set to CoolingSetpointOnOffWithComponentOverride")]
public System.String ComponentOverrideLoopDemandSideInletNodeName { get; set; } = "";
        
[Description(@"This field is only used if Control Type is set to CoolingSetpointOnOffWithComponentOverride")]
[JsonProperty(@"This field is only used if Control Type is set to CoolingSetpointOnOffWithComponentOverride")]
public YesNoDefault ComponentOverrideCoolingControlTemperatureMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Loop");
        
[Description(@"Multiplies the autosized flow rates for this device")]
[JsonProperty(@"Multiplies the autosized flow rates for this device")]
public System.Single SizingFactor { get; set; } = 1;
        
[Description(@"Lower limit on inlet temperatures, heat exchanger will not operate if either inlet is below this limit")]
[JsonProperty(@"Lower limit on inlet temperatures, heat exchanger will not operate if either inlet is below this limit")]
public System.Single OperationMinimumTemperatureLimit { get; set; } = ;
        
[Description(@"Upper limit on inlet temperatures, heat exchanger will not operate if either inlet is above this limit")]
[JsonProperty(@"Upper limit on inlet temperatures, heat exchanger will not operate if either inlet is above this limit")]
public System.Single OperationMaximumTemperatureLimit { get; set; } = ;
    }
    
    public enum HeatExchangeModelTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CounterFlow")]
        CounterFlow = 1,
        
        [JsonProperty("CrossFlowBothMixed")]
        CrossFlowBothMixed = 2,
        
        [JsonProperty("CrossFlowBothUnMixed")]
        CrossFlowBothUnMixed = 3,
        
        [JsonProperty("CrossFlowSupplyMixedDemandUnMixed")]
        CrossFlowSupplyMixedDemandUnMixed = 4,
        
        [JsonProperty("CrossFlowSupplyUnMixedDemandMixed")]
        CrossFlowSupplyUnMixedDemandMixed = 5,
        
        [JsonProperty("Ideal")]
        Ideal = 6,
        
        [JsonProperty("ParallelFlow")]
        ParallelFlow = 7,
    }
    
    public enum ControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CoolingDifferentialOnOff")]
        CoolingDifferentialOnOff = 1,
        
        [JsonProperty("CoolingSetpointModulated")]
        CoolingSetpointModulated = 2,
        
        [JsonProperty("CoolingSetpointOnOff")]
        CoolingSetpointOnOff = 3,
        
        [JsonProperty("CoolingSetpointOnOffWithComponentOverride")]
        CoolingSetpointOnOffWithComponentOverride = 4,
        
        [JsonProperty("DualDeadbandSetpointModulated")]
        DualDeadbandSetpointModulated = 5,
        
        [JsonProperty("DualDeadbandSetpointOnOff")]
        DualDeadbandSetpointOnOff = 6,
        
        [JsonProperty("HeatingSetpointModulated")]
        HeatingSetpointModulated = 7,
        
        [JsonProperty("HeatingSetpointOnOff")]
        HeatingSetpointOnOff = 8,
        
        [JsonProperty("OperationSchemeModulated")]
        OperationSchemeModulated = 9,
        
        [JsonProperty("OperationSchemeOnOff")]
        OperationSchemeOnOff = 10,
        
        [JsonProperty("UncontrolledOn")]
        UncontrolledOn = 11,
    }
    
    public enum HeatTransferMeteringEndUseTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FreeCooling")]
        FreeCooling = 1,
        
        [JsonProperty("HeatRecovery")]
        HeatRecovery = 2,
        
        [JsonProperty("HeatRecoveryForCooling")]
        HeatRecoveryForCooling = 3,
        
        [JsonProperty("HeatRecoveryForHeating")]
        HeatRecoveryForHeating = 4,
        
        [JsonProperty("HeatRejection")]
        HeatRejection = 5,
        
        [JsonProperty("LoopToLoop")]
        LoopToLoop = 6,
    }
    
    public enum ComponentOverrideCoolingControlTemperatureModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DryBulbTemperature")]
        DryBulbTemperature = 1,
        
        [JsonProperty("Loop")]
        Loop = 2,
        
        [JsonProperty("WetBulbTemperature")]
        WetBulbTemperature = 3,
    }
}
namespace EnergyPlus.Controllers
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Controller for a water coil which is located directly in an air loop branch or outdoor air equipment list. Controls the coil water flow to meet the specified leaving air setpoint(s). Used with Coil:Heating:Water, Coil:Cooling:Water, Coil:Cooling:Water:DetailedGeometry, and CoilSystem:Cooling:Water:HeatexchangerAssisted.")]
    [JsonObject("Controller:WaterCoil")]
    public class Controller_WaterCoil
    {
        
[Description(@"keys HumidityRatio or TemperatureAndHumidityRatio requires a ZoneControl:Humidistat object along with SetpointManager:SingleZone:Humidity:Maximum, SetpointManager:MultiZone:MaximumHumidity:Average, or SetpointManager:Multizone:Humidity:Maximum object")]
[JsonProperty(@"keys HumidityRatio or TemperatureAndHumidityRatio requires a ZoneControl:Humidistat object along with SetpointManager:SingleZone:Humidity:Maximum, SetpointManager:MultiZone:MaximumHumidity:Average, or SetpointManager:Multizone:Humidity:Maximum object")]
public YesNoDefault ControlVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Leave blank to have this automatically selected from coil type. Chilled water coils should be reverse action Hot water coils should be normal action")]
[JsonProperty(@"Leave blank to have this automatically selected from coil type. Chilled water coils should be reverse action Hot water coils should be normal action")]
public YesNoDefault Action { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault ActuatorVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String SensorNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ActuatorNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControllerConvergenceTolerance { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String MaximumActuatedFlow { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single MinimumActuatedFlow { get; set; } = 0;
    }
    
    public enum ControlVariableType
    {
        
        [JsonProperty("HumidityRatio")]
        HumidityRatio = 0,
        
        [JsonProperty("Temperature")]
        Temperature = 1,
        
        [JsonProperty("TemperatureAndHumidityRatio")]
        TemperatureAndHumidityRatio = 2,
    }
    
    public enum ActionType
    {
        
        [JsonProperty("Normal")]
        Normal = 0,
        
        [JsonProperty("Reverse")]
        Reverse = 1,
    }
    
    public enum ActuatorVariableType
    {
        
        [JsonProperty("Flow")]
        Flow = 0,
    }
    
    [Description("Controller to set the outdoor air flow rate for an air loop. Control options incl" +
        "ude fixed, proportional, scheduled, economizer, and demand-controlled ventilatio" +
        "n.")]
    [JsonObject("Controller:OutdoorAir")]
    public class Controller_OutdoorAir
    {
        
[JsonProperty(@"")]
public System.String ReliefAirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ReturnAirNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MixedAirNodeName { get; set; } = "";
        
[Description(@"Outdoor air inlet node entering the first pre-treat component if any")]
[JsonProperty(@"Outdoor air inlet node entering the first pre-treat component if any")]
public System.String ActuatorNodeName { get; set; } = "";
        
[Description(@"If there is a Mechanical Ventilation Controller (Controller:MechanicalVentilation), note that this value times the Minimum Outdoor Air Schedule is a hard minimum that may override DCV or other advanced OA controls.")]
[JsonProperty(@"If there is a Mechanical Ventilation Controller (Controller:MechanicalVentilation), note that this value times the Minimum Outdoor Air Schedule is a hard minimum that may override DCV or other advanced OA controls.")]
public System.String MinimumOutdoorAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumOutdoorAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault EconomizerControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoEconomizer");
        
[JsonProperty(@"")]
public YesNoDefault EconomizerControlActionType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ModulateFlow");
        
[Description(@"Enter the maximum outdoor dry-bulb temperature limit for FixedDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the maximum outdoor dry-bulb temperature limit for FixedDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
public System.Single EconomizerMaximumLimitDryBulbTemperature { get; set; } = ;
        
[Description(@"Enter the maximum outdoor enthalpy limit for FixedEnthalpy economizer control type. No input or blank input means this limit is not operative Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the maximum outdoor enthalpy limit for FixedEnthalpy economizer control type. No input or blank input means this limit is not operative Limit is applied regardless of economizer control type.")]
public System.Single EconomizerMaximumLimitEnthalpy { get; set; } = ;
        
[Description(@"Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
public System.Single EconomizerMaximumLimitDewpointTemperature { get; set; } = ;
        
[Description(@"Enter the name of a quadratic or cubic curve which defines the maximum outdoor humidity ratio (function of outdoor dry-bulb temperature) for ElectronicEnthalpy economizer control type. No input or blank input means this limit is not operative Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the name of a quadratic or cubic curve which defines the maximum outdoor humidity ratio (function of outdoor dry-bulb temperature) for ElectronicEnthalpy economizer control type. No input or blank input means this limit is not operative Limit is applied regardless of economizer control type.")]
public System.String ElectronicEnthalpyLimitCurveName { get; set; } = "";
        
[Description(@"Enter the minimum outdoor dry-bulb temperature limit for economizer control. No input or blank input means this limit is not operative Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the minimum outdoor dry-bulb temperature limit for economizer control. No input or blank input means this limit is not operative Limit is applied regardless of economizer control type.")]
public System.Single EconomizerMinimumLimitDryBulbTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault LockoutType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoLockout");
        
[JsonProperty(@"")]
public YesNoDefault MinimumLimitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ProportionalMinimum");
        
[Description(@"Schedule values multiply the minimum outdoor air flow rate")]
[JsonProperty(@"Schedule values multiply the minimum outdoor air flow rate")]
public System.String MinimumOutdoorAirScheduleName { get; set; } = "";
        
[Description(@"schedule values multiply the design/mixed air flow rate")]
[JsonProperty(@"schedule values multiply the design/mixed air flow rate")]
public System.String MinimumFractionOfOutdoorAirScheduleName { get; set; } = "";
        
[Description(@"schedule values multiply the design/mixed air flow rate")]
[JsonProperty(@"schedule values multiply the design/mixed air flow rate")]
public System.String MaximumFractionOfOutdoorAirScheduleName { get; set; } = "";
        
[Description(@"Enter the name of a Controller:MechanicalVentilation object. Optional field for defining outdoor ventilation air based on flow rate per unit floor area and flow rate per person. Simplified method of demand-controlled ventilation.")]
[JsonProperty(@"Enter the name of a Controller:MechanicalVentilation object. Optional field for defining outdoor ventilation air based on flow rate per unit floor area and flow rate per person. Simplified method of demand-controlled ventilation.")]
public System.String MechanicalVentilationControllerName { get; set; } = "";
        
[Description(@"Optional schedule to simulate "push-button" type economizer control. Schedule values greater than 0 indicate time-of-day economizer control is enabled. Economizer control may be used with or without the high humidity control option. When used together, high humidity control has priority over economizer control. If the field Economizer Control Type = NoEconomizer, then this option is disabled.")]
[JsonProperty(@"Optional schedule to simulate "push-button" type economizer control. Schedule values greater than 0 indicate time-of-day economizer control is enabled. Economizer control may be used with or without the high humidity control option. When used together, high humidity control has priority over economizer control. If the field Economizer Control Type = NoEconomizer, then this option is disabled.")]
public System.String TimeOfDayEconomizerControlScheduleName { get; set; } = "";
        
[Description(@"Optional field to enable modified outdoor air flow rates based on zone relative humidity. Select Yes to modify outdoor air flow rate based on a zone humidistat. Select No to disable this feature. If the field Economizer Control Type = NoEconomizer, then this option is disabled.")]
[JsonProperty(@"Optional field to enable modified outdoor air flow rates based on zone relative humidity. Select Yes to modify outdoor air flow rate based on a zone humidistat. Select No to disable this feature. If the field Economizer Control Type = NoEconomizer, then this option is disabled.")]
public YesNoDefault HighHumidityControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Enter the name of the zone where the humidistat is located. This field is only used when the field High Humidity Control = Yes.")]
[JsonProperty(@"Enter the name of the zone where the humidistat is located. This field is only used when the field High Humidity Control = Yes.")]
public System.String HumidistatControlZoneName { get; set; } = "";
        
[Description(@"Enter the ratio of outdoor air to the maximum outdoor air flow rate when modified air flow rates are active based on high indoor humidity. The minimum value must be greater than 0. This field is only used when the field High Humidity Control = Yes.")]
[JsonProperty(@"Enter the ratio of outdoor air to the maximum outdoor air flow rate when modified air flow rates are active based on high indoor humidity. The minimum value must be greater than 0. This field is only used when the field High Humidity Control = Yes.")]
public System.Single HighHumidityOutdoorAirFlowRatio { get; set; } = 1;
        
[Description(@"If No is selected, the outdoor air flow rate is modified any time indoor relative humidity is above the humidistat setpoint. If Yes is selected, the outdoor air flow rate is modified any time the indoor relative humidity is above the humidistat setpoint and the outdoor humidity ratio is less than the indoor humidity ratio. This field is only used when the field High Humidity Control = Yes.")]
[JsonProperty(@"If No is selected, the outdoor air flow rate is modified any time indoor relative humidity is above the humidistat setpoint. If Yes is selected, the outdoor air flow rate is modified any time the indoor relative humidity is above the humidistat setpoint and the outdoor humidity ratio is less than the indoor humidity ratio. This field is only used when the field High Humidity Control = Yes.")]
public YesNoDefault ControlHighIndoorHumidityBasedOnOutdoorHumidityRatio { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[Description(@"BypassWhenWithinEconomizerLimits specifies that heat recovery is active only when the economizer is off because conditions are outside the economizer control limits BypassWhenOAFlowGreaterThanMinimum specifies enhanced economizer controls to allow heat recovery when economizer is active (within limits) but the outdoor air flow rate is at the minimum.")]
[JsonProperty(@"BypassWhenWithinEconomizerLimits specifies that heat recovery is active only when the economizer is off because conditions are outside the economizer control limits BypassWhenOAFlowGreaterThanMinimum specifies enhanced economizer controls to allow heat recovery when economizer is active (within limits) but the outdoor air flow rate is at the minimum.")]
public YesNoDefault HeatRecoveryBypassControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BypassWhenWithinEconomizerLimits");
    }
    
    public enum EconomizerControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DifferentialDryBulb")]
        DifferentialDryBulb = 1,
        
        [JsonProperty("DifferentialDryBulbAndEnthalpy")]
        DifferentialDryBulbAndEnthalpy = 2,
        
        [JsonProperty("DifferentialEnthalpy")]
        DifferentialEnthalpy = 3,
        
        [JsonProperty("ElectronicEnthalpy")]
        ElectronicEnthalpy = 4,
        
        [JsonProperty("FixedDewPointAndDryBulb")]
        FixedDewPointAndDryBulb = 5,
        
        [JsonProperty("FixedDryBulb")]
        FixedDryBulb = 6,
        
        [JsonProperty("FixedEnthalpy")]
        FixedEnthalpy = 7,
        
        [JsonProperty("NoEconomizer")]
        NoEconomizer = 8,
    }
    
    public enum EconomizerControlActionTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MinimumFlowWithBypass")]
        MinimumFlowWithBypass = 1,
        
        [JsonProperty("ModulateFlow")]
        ModulateFlow = 2,
    }
    
    public enum LockoutTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LockoutWithCompressor")]
        LockoutWithCompressor = 1,
        
        [JsonProperty("LockoutWithHeating")]
        LockoutWithHeating = 2,
        
        [JsonProperty("NoLockout")]
        NoLockout = 3,
    }
    
    public enum MinimumLimitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FixedMinimum")]
        FixedMinimum = 1,
        
        [JsonProperty("ProportionalMinimum")]
        ProportionalMinimum = 2,
    }
    
    public enum HeatRecoveryBypassControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BypassWhenOAFlowGreaterThanMinimum")]
        BypassWhenOAFlowGreaterThanMinimum = 1,
        
        [JsonProperty("BypassWhenWithinEconomizerLimits")]
        BypassWhenWithinEconomizerLimits = 2,
    }
    
    [Description(@"This object is used in conjunction with Controller:OutdoorAir to specify outdoor ventilation air based on outdoor air specified in the DesignSpecification:OutdoorAir object The Controller:OutdoorAir object is associated with a specific air loop, so the outdoor air flow rates specified in Controller:MechanicalVentilation correspond to the zones attached to that specific air loop. Duplicate groups of Zone name, Design Specification Outdoor Air Object Name, and Design Specification Zone Air Distribution Object Name to increase allowable number of entries")]
    [JsonObject("Controller:MechanicalVentilation")]
    public class Controller_MechanicalVentilation
    {
        
[Description(@"If this field is blank, the controller uses the values from the associated Controller:OutdoorAir. Schedule values greater than 0 indicate mechanical ventilation is enabled")]
[JsonProperty(@"If this field is blank, the controller uses the values from the associated Controller:OutdoorAir. Schedule values greater than 0 indicate mechanical ventilation is enabled")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault DemandControlledVentilation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public YesNoDefault SystemOutdoorAirMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "VentilationRateProcedure");
        
[JsonProperty(@"")]
public System.Single ZoneMaximumOutdoorAirFraction { get; set; } = 1;
        
[JsonProperty(@"")]
public System.String ZoneSpecifications { get; set; } = "";
    }
    
    public enum SystemOutdoorAirMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("IndoorAirQualityProcedure")]
        IndoorAirQualityProcedure = 1,
        
        [JsonProperty("IndoorAirQualityProcedureCombined")]
        IndoorAirQualityProcedureCombined = 2,
        
        [JsonProperty("IndoorAirQualityProcedureGenericContaminant")]
        IndoorAirQualityProcedureGenericContaminant = 3,
        
        [JsonProperty("ProportionalControlBasedOnDesignOARate")]
        ProportionalControlBasedOnDesignOARate = 4,
        
        [JsonProperty("ProportionalControlBasedOnDesignOccupancy")]
        ProportionalControlBasedOnDesignOccupancy = 5,
        
        [JsonProperty("ProportionalControlBasedOnOccupancySchedule")]
        ProportionalControlBasedOnOccupancySchedule = 6,
        
        [JsonProperty("VentilationRateProcedure")]
        VentilationRateProcedure = 7,
        
        [JsonProperty("ZoneSum")]
        ZoneSum = 8,
    }
    
    [Description("List controllers in order of control sequence")]
    [JsonObject("AirLoopHVAC:ControllerList")]
    public class AirLoopHVAC_ControllerList
    {
        
[JsonProperty(@"")]
public YesNoDefault ControllerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControllerName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControllerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControllerName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControllerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControllerName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControllerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControllerName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControllerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControllerName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControllerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControllerName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControllerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControllerName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControllerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControllerName { get; set; } = "";
    }
    
    public enum ControllerObjectTypeType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
        
        [JsonProperty("Controller:WaterCoil")]
        ControllerWaterCoil = 1,
    }
    
    public enum ControllerObjectTypeType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
        
        [JsonProperty("Controller:WaterCoil")]
        ControllerWaterCoil = 1,
    }
    
    public enum ControllerObjectTypeType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
        
        [JsonProperty("Controller:WaterCoil")]
        ControllerWaterCoil = 1,
    }
    
    public enum ControllerObjectTypeType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
        
        [JsonProperty("Controller:WaterCoil")]
        ControllerWaterCoil = 1,
    }
    
    public enum ControllerObjectTypeType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
        
        [JsonProperty("Controller:WaterCoil")]
        ControllerWaterCoil = 1,
    }
    
    public enum ControllerObjectTypeType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
        
        [JsonProperty("Controller:WaterCoil")]
        ControllerWaterCoil = 1,
    }
    
    public enum ControllerObjectTypeType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
        
        [JsonProperty("Controller:WaterCoil")]
        ControllerWaterCoil = 1,
    }
    
    public enum ControllerObjectTypeType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
        
        [JsonProperty("Controller:WaterCoil")]
        ControllerWaterCoil = 1,
    }
}
namespace EnergyPlus.Daylighting
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Dimming of overhead electric lighting is determined from each reference point. Gl" +
        "are from daylighting is also calculated.")]
    [JsonObject("Daylighting:Controls")]
    public class Daylighting_Controls
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault DaylightingMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SplitFlux");
        
[JsonProperty(@"")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault LightingControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Continuous");
        
[JsonProperty(@"")]
public System.Single MinimumInputPowerFractionForContinuousOrContinuousoffDimmingControl { get; set; } = 0.3;
        
[JsonProperty(@"")]
public System.Single MinimumLightOutputFractionForContinuousOrContinuousoffDimmingControl { get; set; } = 0.2;
        
[Description(@"The number of steps, excluding off, in a stepped lighting control system. If Lighting Control Type is Stepped, this field must be greater than zero. The steps are assumed to be equally spaced.")]
[JsonProperty(@"The number of steps, excluding off, in a stepped lighting control system. If Lighting Control Type is Stepped, this field must be greater than zero. The steps are assumed to be equally spaced.")]
public System.Single NumberOfSteppedControlSteps { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single ProbabilityLightingWillBeResetWhenNeededInManualSteppedControl { get; set; } = 1;
        
[JsonProperty(@"")]
public System.String GlareCalculationDaylightingReferencePointName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single GlareCalculationAzimuthAngleOfViewDirectionClockwiseFromZoneYAxis { get; set; } = 0;
        
[Description(@"The default is for general office work")]
[JsonProperty(@"The default is for general office work")]
public System.Single MaximumAllowableDiscomfortGlareIndex { get; set; } = 22;
        
[Description(@"Maximum surface area for nodes in gridding all surfaces in the DElight zone. All reflective and transmitting surfaces will be subdivided into approximately square nodes that do not exceed this maximum. Higher resolution subdivisions require greater calculation times, but generally produce more accurate results.")]
[JsonProperty(@"Maximum surface area for nodes in gridding all surfaces in the DElight zone. All reflective and transmitting surfaces will be subdivided into approximately square nodes that do not exceed this maximum. Higher resolution subdivisions require greater calculation times, but generally produce more accurate results.")]
public System.Single DelightGriddingResolution { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ControlData { get; set; } = "";
    }
    
    public enum DaylightingMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DElight")]
        DElight = 1,
        
        [JsonProperty("SplitFlux")]
        SplitFlux = 2,
    }
    
    public enum LightingControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Continuous")]
        Continuous = 1,
        
        [JsonProperty("ContinuousOff")]
        ContinuousOff = 2,
        
        [JsonProperty("Stepped")]
        Stepped = 3,
    }
    
    [Description("Used by Daylighting:Controls to identify the reference point coordinates for each" +
        " sensor. Reference points are given in coordinates specified in the GlobalGeomet" +
        "ryRules object Daylighting Reference Point CoordinateSystem field")]
    [JsonObject("Daylighting:ReferencePoint")]
    public class Daylighting_ReferencePoint
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single XCoordinateOfReferencePoint { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single YCoordinateOfReferencePoint { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ZCoordinateOfReferencePoint { get; set; } = 0.8;
    }
    
    [Description("Used for DElight Complex Fenestration of all types")]
    [JsonObject("Daylighting:DELight:ComplexFenestration")]
    public class Daylighting_DELight_ComplexFenestration
    {
        
[Description(@"Used to select the appropriate Complex Fenestration BTDF data")]
[JsonProperty(@"Used to select the appropriate Complex Fenestration BTDF data")]
public System.String ComplexFenestrationType { get; set; } = "";
        
[Description(@"This is a reference to a valid surface object (such as BuildingSurface:Detailed) hosting this complex fenestration, analogous to the base surface Name field for subsurfaces such as Windows.")]
[JsonProperty(@"This is a reference to a valid surface object (such as BuildingSurface:Detailed) hosting this complex fenestration, analogous to the base surface Name field for subsurfaces such as Windows.")]
public System.String BuildingSurfaceName { get; set; } = "";
        
[Description(@"This is a reference to a valid FenestrationSurface:Detailed window object used to account for the geometry, and the solar and thermal gains/losses, of the Complex Fenestration")]
[JsonProperty(@"This is a reference to a valid FenestrationSurface:Detailed window object used to account for the geometry, and the solar and thermal gains/losses, of the Complex Fenestration")]
public System.String WindowName { get; set; } = "";
        
[Description(@"In-plane counter-clockwise rotation angle of the Complex Fenestration optical reference direction and the base edge of the Complex Fenestration. The Rotation will typically be zero when the host and CFS surfaces are rectangular and height and width edges are aligned.")]
[JsonProperty(@"In-plane counter-clockwise rotation angle of the Complex Fenestration optical reference direction and the base edge of the Complex Fenestration. The Rotation will typically be zero when the host and CFS surfaces are rectangular and height and width edges are aligned.")]
public System.Single FenestrationRotation { get; set; } = 0;
    }
    
    [Description("Defines a tubular daylighting device (TDD) consisting of three components: a dome" +
        ", a pipe, and a diffuser. The dome and diffuser are defined separately using the" +
        " FenestrationSurface:Detailed object.")]
    [JsonObject("DaylightingDevice:Tubular")]
    public class DaylightingDevice_Tubular
    {
        
[Description(@"This must refer to a subsurface object of type TubularDaylightDome")]
[JsonProperty(@"This must refer to a subsurface object of type TubularDaylightDome")]
public System.String DomeName { get; set; } = "";
        
[Description(@"This must refer to a subsurface object of type TubularDaylightDiffuser Delivery zone is specified in the diffuser object")]
[JsonProperty(@"This must refer to a subsurface object of type TubularDaylightDiffuser Delivery zone is specified in the diffuser object")]
public System.String DiffuserName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ConstructionName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single Diameter { get; set; } = ;
        
[Description(@"The exterior exposed length is the difference between total and sum of zone lengths")]
[JsonProperty(@"The exterior exposed length is the difference between total and sum of zone lengths")]
public System.Single TotalLength { get; set; } = ;
        
[Description(@"R value between TubularDaylightDome and TubularDaylightDiffuser")]
[JsonProperty(@"R value between TubularDaylightDome and TubularDaylightDiffuser")]
public System.Single EffectiveThermalResistance { get; set; } = 0.28;
        
[JsonProperty(@"")]
public System.String TransitionLengths { get; set; } = "";
    }
    
    [Description("Defines a daylighting which can have an inside shelf, an outside shelf, or both. " +
        "The inside shelf is defined as a building surface and the outside shelf is defin" +
        "ed as a shading surface.")]
    [JsonObject("DaylightingDevice:Shelf")]
    public class DaylightingDevice_Shelf
    {
        
[JsonProperty(@"")]
public System.String WindowName { get; set; } = "";
        
[Description(@"This must refer to a BuildingSurface:Detailed or equivalent object This surface must be its own Surface for other side boundary conditions.")]
[JsonProperty(@"This must refer to a BuildingSurface:Detailed or equivalent object This surface must be its own Surface for other side boundary conditions.")]
public System.String InsideShelfName { get; set; } = "";
        
[Description(@"This must refer to a Shading:Zone:Detailed object")]
[JsonProperty(@"This must refer to a Shading:Zone:Detailed object")]
public System.String OutsideShelfName { get; set; } = "";
        
[Description(@"Required if outside shelf is specified")]
[JsonProperty(@"Required if outside shelf is specified")]
public System.String OutsideShelfConstructionName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single ViewFactorToOutsideShelf { get; set; } = ;
    }
    
    [Description("Applies only to exterior windows in daylighting-controlled zones or in zones that" +
        " share an interior window with a daylighting-controlled  zone. Generally used wi" +
        "th skylights.")]
    [JsonObject("DaylightingDevice:LightWell")]
    public class DaylightingDevice_LightWell
    {
        
[JsonProperty(@"")]
public System.String ExteriorWindowName { get; set; } = "";
        
[Description(@"Distance from Bottom of Window to Bottom of Well")]
[JsonProperty(@"Distance from Bottom of Window to Bottom of Well")]
public System.Single HeightOfWell { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PerimeterOfBottomOfWell { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single AreaOfBottomOfWell { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single VisibleReflectanceOfWellWalls { get; set; } = ;
    }
    
    [Description("Reports hourly daylight factors for each exterior window for four sky types (clea" +
        "r, turbid clear, intermediate, and overcast).")]
    [JsonObject("Output:DaylightFactors")]
    public class Output_DaylightFactors
    {
        
[JsonProperty(@"")]
public YesNoDefault ReportingDays { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum ReportingDaysType
    {
        
        [JsonProperty("AllShadowCalculationDays")]
        AllShadowCalculationDays = 0,
        
        [JsonProperty("SizingDays")]
        SizingDays = 1,
    }
    
    [Description("reference points are given in coordinates specified in the GlobalGeometryRules ob" +
        "ject Daylighting Reference Point CoordinateSystem field")]
    [JsonObject("Output:IlluminanceMap")]
    public class Output_IlluminanceMap
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single ZHeight { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single XMinimumCoordinate { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single XMaximumCoordinate { get; set; } = 1;
        
[Description(@"Maximum number of total grid points must be <= 2500 (X*Y)")]
[JsonProperty(@"Maximum number of total grid points must be <= 2500 (X*Y)")]
public System.Single NumberOfXGridPoints { get; set; } = 2;
        
[JsonProperty(@"")]
public System.Single YMinimumCoordinate { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single YMaximumCoordinate { get; set; } = 1;
        
[Description(@"Maximum number of total grid points must be <= 2500 (X*Y)")]
[JsonProperty(@"Maximum number of total grid points must be <= 2500 (X*Y)")]
public System.Single NumberOfYGridPoints { get; set; } = 2;
    }
    
    [Description(@"default style for the Daylighting Illuminance Map is comma -- this works well for importing into spreadsheet programs such as Excel(tm) but not so well for word processing programs -- there tab may be a better choice. fixed puts spaces between the ""columns""")]
    [JsonObject("OutputControl:IlluminanceMap:Style")]
    public class OutputControl_IlluminanceMap_Style
    {
        
[JsonProperty(@"")]
public YesNoDefault ColumnSeparator { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Comma");
    }
    
    public enum ColumnSeparatorType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Comma")]
        Comma = 1,
        
        [JsonProperty("Fixed")]
        Fixed = 2,
        
        [JsonProperty("Tab")]
        Tab = 3,
    }
}
namespace EnergyPlus.DemandLimitingControls
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("a list of meters that can be reported are available after a run on the meter dict" +
        "ionary file (.mdd) if the Output:VariableDictionary has been requested.")]
    [JsonObject("DemandManagerAssignmentList")]
    public class DemandManagerAssignmentList
    {
        
[JsonProperty(@"")]
public System.String MeterName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DemandLimitScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DemandLimitSafetyFraction { get; set; } = ;
        
[Description(@"This field should reference the same schedule as the month schedule name field of the UtilityCost:Tariff object, if used. If blank, defaults to regular divisions between months.")]
[JsonProperty(@"This field should reference the same schedule as the month schedule name field of the UtilityCost:Tariff object, if used. If blank, defaults to regular divisions between months.")]
public System.String BillingPeriodScheduleName { get; set; } = "";
        
[Description(@"This field should reference the same schedule as the period schedule name field of the UtilityCost:Tariff object, if used. If blank, defaults to always on peak.")]
[JsonProperty(@"This field should reference the same schedule as the period schedule name field of the UtilityCost:Tariff object, if used. If blank, defaults to always on peak.")]
public System.String PeakPeriodScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DemandWindowLength { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault DemandManagerPriority { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ManagerData { get; set; } = "";
    }
    
    public enum DemandManagerPriorityType
    {
        
        [JsonProperty("All")]
        All = 0,
        
        [JsonProperty("Sequential")]
        Sequential = 1,
    }
    
    [Description("used for demand limiting Exterior:Lights objects.")]
    [JsonObject("DemandManager:ExteriorLights")]
    public class DemandManager_ExteriorLights
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault LimitControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"If blank, duration defaults to the timestep")]
[JsonProperty(@"If blank, duration defaults to the timestep")]
public System.Single MinimumLimitDuration { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumLimitFraction { get; set; } = ;
        
[Description(@"Not yet implemented")]
[JsonProperty(@"Not yet implemented")]
public System.Single LimitStepChange { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault SelectionControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"If blank, duration defaults to the timestep")]
[JsonProperty(@"If blank, duration defaults to the timestep")]
public System.Single RotationDuration { get; set; } = ;
        
[JsonProperty(@"")]
public System.String Lights { get; set; } = "";
    }
    
    public enum LimitControlType
    {
        
        [JsonProperty("Fixed")]
        Fixed = 0,
        
        [JsonProperty("Off")]
        Off = 1,
    }
    
    public enum SelectionControlType
    {
        
        [JsonProperty("All")]
        All = 0,
        
        [JsonProperty("RotateMany")]
        RotateMany = 1,
        
        [JsonProperty("RotateOne")]
        RotateOne = 2,
    }
    
    [Description("used for demand limiting Lights objects.")]
    [JsonObject("DemandManager:Lights")]
    public class DemandManager_Lights
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault LimitControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"If blank, duration defaults to the timestep")]
[JsonProperty(@"If blank, duration defaults to the timestep")]
public System.Single MinimumLimitDuration { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumLimitFraction { get; set; } = ;
        
[Description(@"Not yet implemented")]
[JsonProperty(@"Not yet implemented")]
public System.Single LimitStepChange { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault SelectionControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"If blank, duration defaults to the timestep")]
[JsonProperty(@"If blank, duration defaults to the timestep")]
public System.Single RotationDuration { get; set; } = ;
        
[JsonProperty(@"")]
public System.String Lights { get; set; } = "";
    }
    
    public enum LimitControlType
    {
        
        [JsonProperty("Fixed")]
        Fixed = 0,
        
        [JsonProperty("Off")]
        Off = 1,
    }
    
    public enum SelectionControlType
    {
        
        [JsonProperty("All")]
        All = 0,
        
        [JsonProperty("RotateMany")]
        RotateMany = 1,
        
        [JsonProperty("RotateOne")]
        RotateOne = 2,
    }
    
    [Description("used for demand limiting ElectricEquipment objects.")]
    [JsonObject("DemandManager:ElectricEquipment")]
    public class DemandManager_ElectricEquipment
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault LimitControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"If blank, duration defaults to the timestep")]
[JsonProperty(@"If blank, duration defaults to the timestep")]
public System.Single MinimumLimitDuration { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumLimitFraction { get; set; } = ;
        
[Description(@"Not yet implemented")]
[JsonProperty(@"Not yet implemented")]
public System.Single LimitStepChange { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault SelectionControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"If blank, duration defaults to the timestep")]
[JsonProperty(@"If blank, duration defaults to the timestep")]
public System.Single RotationDuration { get; set; } = ;
        
[JsonProperty(@"")]
public System.String Equipment { get; set; } = "";
    }
    
    public enum LimitControlType
    {
        
        [JsonProperty("Fixed")]
        Fixed = 0,
        
        [JsonProperty("Off")]
        Off = 1,
    }
    
    public enum SelectionControlType
    {
        
        [JsonProperty("All")]
        All = 0,
        
        [JsonProperty("RotateMany")]
        RotateMany = 1,
        
        [JsonProperty("RotateOne")]
        RotateOne = 2,
    }
    
    [Description("used for demand limiting ZoneControl:Thermostat objects.")]
    [JsonObject("DemandManager:Thermostats")]
    public class DemandManager_Thermostats
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ResetControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"If blank, duration defaults to the timestep")]
[JsonProperty(@"If blank, duration defaults to the timestep")]
public System.Single MinimumResetDuration { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumHeatingSetpointReset { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumCoolingSetpointReset { get; set; } = ;
        
[Description(@"Not yet implemented")]
[JsonProperty(@"Not yet implemented")]
public System.Single ResetStepChange { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault SelectionControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"If blank, duration defaults to the timestep")]
[JsonProperty(@"If blank, duration defaults to the timestep")]
public System.Single RotationDuration { get; set; } = ;
        
[JsonProperty(@"")]
public System.String Thermostats { get; set; } = "";
    }
    
    public enum ResetControlType
    {
        
        [JsonProperty("Fixed")]
        Fixed = 0,
        
        [JsonProperty("Off")]
        Off = 1,
    }
    
    public enum SelectionControlType
    {
        
        [JsonProperty("All")]
        All = 0,
        
        [JsonProperty("RotateMany")]
        RotateMany = 1,
        
        [JsonProperty("RotateOne")]
        RotateOne = 2,
    }
    
    [Description("used for demand limiting Controller:OutdoorAir objects.")]
    [JsonObject("DemandManager:Ventilation")]
    public class DemandManager_Ventilation
    {
        
[Description(@"Availability schedule name for this demand manager. Schedule value > 0 means the demand manager is available. If this field is blank, the DR is always available.")]
[JsonProperty(@"Availability schedule name for this demand manager. Schedule value > 0 means the demand manager is available. If this field is blank, the DR is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault LimitControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"If blank, duration defaults to the timestep")]
[JsonProperty(@"If blank, duration defaults to the timestep")]
public System.Single MinimumLimitDuration { get; set; } = ;
        
[Description(@"Used in case when Limit strategy is set to FixedRate")]
[JsonProperty(@"Used in case when Limit strategy is set to FixedRate")]
public System.Single FixedRate { get; set; } = ;
        
[Description(@"Used in case when Limit Control is set to ReductionRatio")]
[JsonProperty(@"Used in case when Limit Control is set to ReductionRatio")]
public System.Single ReductionRatio { get; set; } = ;
        
[Description(@"Not yet implemented")]
[JsonProperty(@"Not yet implemented")]
public System.Single LimitStepChange { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault SelectionControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "All");
        
[Description(@"If blank, duration defaults to the timestep")]
[JsonProperty(@"If blank, duration defaults to the timestep")]
public System.Single RotationDuration { get; set; } = ;
        
[JsonProperty(@"")]
public System.String Controllers { get; set; } = "";
    }
    
    public enum LimitControlType
    {
        
        [JsonProperty("FixedRate")]
        FixedRate = 0,
        
        [JsonProperty("Off")]
        Off = 1,
        
        [JsonProperty("ReductionRatio")]
        ReductionRatio = 2,
    }
    
    public enum SelectionControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("All")]
        All = 1,
        
        [JsonProperty("RotateMany")]
        RotateMany = 2,
        
        [JsonProperty("RotateOne")]
        RotateOne = 3,
    }
}
namespace EnergyPlus.DetailedGroundHeatTransfer
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Object determines if the Slab and Basement preprocessors are going to be executed" +
        ".")]
    [JsonObject("GroundHeatTransfer:Control")]
    public class GroundHeatTransfer_Control
    {
        
[JsonProperty(@"")]
public YesNoDefault RunBasementPreprocessor { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public YesNoDefault RunSlabPreprocessor { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
    }
    
    [Description("Object gives an overall description of the slab ground heat transfer model.")]
    [JsonObject("GroundHeatTransfer:Slab:Materials")]
    public class GroundHeatTransfer_Slab_Materials
    {
        
[Description(@"This field specifies the number of different materials that will be used in the model. Typically only a ground material and a slab material are used. (2 materials)")]
[JsonProperty(@"This field specifies the number of different materials that will be used in the model. Typically only a ground material and a slab material are used. (2 materials)")]
public System.Single NmatNumberOfMaterials { get; set; } = ;
        
[Description(@"Two fields specify the albedo value of the surface: first for no snow coverage days; second for days with snow coverage. The albedo is the solar reflectivity of the surface, and can vary from 0.05 for blacktop to 0.95 for fresh snow. Typical values for North America reported by Bahnfleth range from 0.16 to 0.4.")]
[JsonProperty(@"Two fields specify the albedo value of the surface: first for no snow coverage days; second for days with snow coverage. The albedo is the solar reflectivity of the surface, and can vary from 0.05 for blacktop to 0.95 for fresh snow. Typical values for North America reported by Bahnfleth range from 0.16 to 0.4.")]
public System.Single AlbedoSurfaceAlbedoNoSnow { get; set; } = 0.16;
        
[JsonProperty(@"")]
public System.Single AlbedoSurfaceAlbedoSnow { get; set; } = 0.4;
        
[Description(@"EPSLW (No Snow and Snow) specifies the long wavelength (thermal) emissivity of the ground surface. primarily important for nighttime radiation to sky. typical value .95")]
[JsonProperty(@"EPSLW (No Snow and Snow) specifies the long wavelength (thermal) emissivity of the ground surface. primarily important for nighttime radiation to sky. typical value .95")]
public System.Single EpslwSurfaceEmissivityNoSnow { get; set; } = 0.94;
        
[JsonProperty(@"")]
public System.Single EpslwSurfaceEmissivitySnow { get; set; } = 0.86;
        
[Description(@"fields Z0 (No Snow and Snow) describe the height at which an experimentally velocity profile goes to zero. typical value= .75 cm")]
[JsonProperty(@"fields Z0 (No Snow and Snow) describe the height at which an experimentally velocity profile goes to zero. typical value= .75 cm")]
public System.Single ZSurfaceRoughnessNoSnow { get; set; } = 0.75;
        
[Description(@"typical value= .05 cm")]
[JsonProperty(@"typical value= .05 cm")]
public System.Single ZSurfaceRoughnessSnow { get; set; } = 0.25;
        
[Description(@"These fields specify the combined convective and radiative heat transfer coefficient between the slab top inside surface and the room air for the cases where heat is flowing downward, and upward. The program toggles between the two if the direction of the heat flux changes. Typical values can be found in the ASHRAE Handbook of Fundamentals, but should be about 6 W/(m2-K) for downward heat flow and 9 W/(m2-K) for upward heat flow. typical value= 4-10")]
[JsonProperty(@"These fields specify the combined convective and radiative heat transfer coefficient between the slab top inside surface and the room air for the cases where heat is flowing downward, and upward. The program toggles between the two if the direction of the heat flux changes. Typical values can be found in the ASHRAE Handbook of Fundamentals, but should be about 6 W/(m2-K) for downward heat flow and 9 W/(m2-K) for upward heat flow. typical value= 4-10")]
public System.Single HinIndoorHconvDownwardFlow { get; set; } = 6.13;
        
[Description(@"typical value= 4-10")]
[JsonProperty(@"typical value= 4-10")]
public System.Single HinIndoorHconvUpward { get; set; } = 9.26;
    }
    
    [Description("This object contains the material properties for the materials used in the model." +
        " The fields are mostly self explanatory.")]
    [JsonObject("GroundHeatTransfer:Slab:MatlProps")]
    public class GroundHeatTransfer_Slab_MatlProps
    {
        
[Description(@"Density of Slab Material typical value= 2300.0")]
[JsonProperty(@"Density of Slab Material typical value= 2300.0")]
public System.Single RhoSlabMaterialDensity { get; set; } = 2300;
        
[Description(@"Density of Soil Material typical value= 1200.0")]
[JsonProperty(@"Density of Soil Material typical value= 1200.0")]
public System.Single RhoSoilDensity { get; set; } = 1200;
        
[Description(@"Specific Heat of Slab Material typical value=650.0")]
[JsonProperty(@"Specific Heat of Slab Material typical value=650.0")]
public System.Single CpSlabCp { get; set; } = 650;
        
[Description(@"Specific Heat of Soil Material typical value= 1200.0")]
[JsonProperty(@"Specific Heat of Soil Material typical value= 1200.0")]
public System.Single CpSoilCp { get; set; } = 1200;
        
[Description(@"Conductivity of Slab Material typical value= .9")]
[JsonProperty(@"Conductivity of Slab Material typical value= .9")]
public System.Single TconSlabK { get; set; } = 0.9;
        
[Description(@"Conductivity of Soil Material typical value= 1.0")]
[JsonProperty(@"Conductivity of Soil Material typical value= 1.0")]
public System.Single TconSoilK { get; set; } = 1;
    }
    
    [Description("Supplies some of the boundary conditions used in the ground heat transfer calcula" +
        "tions.")]
    [JsonObject("GroundHeatTransfer:Slab:BoundConds")]
    public class GroundHeatTransfer_Slab_BoundConds
    {
        
[Description(@"This field specifies whether or not to use the evapotransporation model. The inclusion of evapotransporation in the calculation has the greatest effect in warm dry climates, primarily on the ground surface temperature. This field can be used to turn the evapotransporation off and on to check sensitivity to it.")]
[JsonProperty(@"This field specifies whether or not to use the evapotransporation model. The inclusion of evapotransporation in the calculation has the greatest effect in warm dry climates, primarily on the ground surface temperature. This field can be used to turn the evapotransporation off and on to check sensitivity to it.")]
public YesNoDefault EvtrIsSurfaceEvapotranspirationModeled { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"This field permits using a fixed temperature at the lower surface of the model instead of a zero heat flux condition. This change normally has a very small effect on the results. FALSE selects the zero flux lower boundary condition")]
[JsonProperty(@"This field permits using a fixed temperature at the lower surface of the model instead of a zero heat flux condition. This change normally has a very small effect on the results. FALSE selects the zero flux lower boundary condition")]
public YesNoDefault FixbcIsTheLowerBoundaryAtAFixedTemperature { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"User input lower boundary temperature if FIXBC is TRUE Blank for FIXBC FALSE or to use the calculated 1-D deep ground temperature.")]
[JsonProperty(@"User input lower boundary temperature if FIXBC is TRUE Blank for FIXBC FALSE or to use the calculated 1-D deep ground temperature.")]
public System.Single Tdeepin { get; set; } = ;
        
[Description(@"This field flags the use of a user specified heat transfer coefficient on the ground surface. This condition is used primarily for testing. For normal runs (USPHflag is FALSE) and the program calculates the heat transfer coefficient using the weather conditions.")]
[JsonProperty(@"This field flags the use of a user specified heat transfer coefficient on the ground surface. This condition is used primarily for testing. For normal runs (USPHflag is FALSE) and the program calculates the heat transfer coefficient using the weather conditions.")]
public YesNoDefault UsrhflagIsTheGroundSurfaceHSpecifiedByTheUser { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Used only if USRHflag is TRUE and the heat transfer coefficient value is specified in this field.")]
[JsonProperty(@"Used only if USRHflag is TRUE and the heat transfer coefficient value is specified in this field.")]
public System.Single UserhUserSpecifiedGroundSurfaceHeatTransferCoefficient { get; set; } = ;
    }
    
    public enum EvtrIsSurfaceEvapotranspirationModeledType
    {
        
        [JsonProperty("FALSE")]
        FALSE = 0,
        
        [JsonProperty("TRUE")]
        TRUE = 1,
    }
    
    public enum FixbcIsTheLowerBoundaryAtAFixedTemperatureType
    {
        
        [JsonProperty("FALSE")]
        FALSE = 0,
        
        [JsonProperty("TRUE")]
        TRUE = 1,
    }
    
    public enum UsrhflagIsTheGroundSurfaceHSpecifiedByTheUserType
    {
        
        [JsonProperty("FALSE")]
        FALSE = 0,
        
        [JsonProperty("TRUE")]
        TRUE = 1,
    }
    
    [Description(@"Object provides information about the building and its operating conditions Monthly Average Temperature SetPoint fields specify the average indoor building set point temperatures for each month of the year. These fields are useful for simulating a building that is not temperature controlled for some of the year. In such a case, the average indoor set point temperatures can be obtained by first running the model in EnergyPlus with an insulated floor boundary condition, and then using the resulting monthly average zone temperatures in these fields.")]
    [JsonObject("GroundHeatTransfer:Slab:BldgProps")]
    public class GroundHeatTransfer_Slab_BldgProps
    {
        
[Description(@"This field specifies the number of years to iterate. Either the ground heat transfer calculations come to an an annual steady periodic condition by converging to a tolerance (see ConvTol field) or it runs for this number of years. A ten year maximum is usually sufficient.")]
[JsonProperty(@"This field specifies the number of years to iterate. Either the ground heat transfer calculations come to an an annual steady periodic condition by converging to a tolerance (see ConvTol field) or it runs for this number of years. A ten year maximum is usually sufficient.")]
public System.Single IyrsNumberOfYearsToIterate { get; set; } = 10;
        
[Description(@"Use only the value 0 here. Only a rectangular shape is implemented.")]
[JsonProperty(@"Use only the value 0 here. Only a rectangular shape is implemented.")]
public System.Single ShapeSlabShape { get; set; } = ;
        
[Description(@"This field supplies the building height. This is used to calculate the building shadowing on the ground. typical value= 0-20")]
[JsonProperty(@"This field supplies the building height. This is used to calculate the building shadowing on the ground. typical value= 0-20")]
public System.Single HbldgBuildingHeight { get; set; } = ;
        
[Description(@"see memo on object for more information")]
[JsonProperty(@"see memo on object for more information")]
public System.Single TinJanuaryIndoorAverageTemperatureSetpoint { get; set; } = 22;
        
[Description(@"see memo on object for more information")]
[JsonProperty(@"see memo on object for more information")]
public System.Single TinFebruaryIndoorAverageTemperatureSetpoint { get; set; } = 22;
        
[Description(@"see memo on object for more information")]
[JsonProperty(@"see memo on object for more information")]
public System.Single TinMarchIndoorAverageTemperatureSetpoint { get; set; } = 22;
        
[Description(@"see memo on object for more information")]
[JsonProperty(@"see memo on object for more information")]
public System.Single TinAprilIndoorAverageTemperatureSetpoint { get; set; } = 22;
        
[Description(@"see memo on object for more information")]
[JsonProperty(@"see memo on object for more information")]
public System.Single TinMayIndoorAverageTemperatureSetpoint { get; set; } = 22;
        
[Description(@"see memo on object for more information")]
[JsonProperty(@"see memo on object for more information")]
public System.Single TinJuneIndoorAverageTemperatureSetpoint { get; set; } = 22;
        
[Description(@"see memo on object for more information")]
[JsonProperty(@"see memo on object for more information")]
public System.Single TinJulyIndoorAverageTemperatureSetpoint { get; set; } = 22;
        
[Description(@"see memo on object for more information")]
[JsonProperty(@"see memo on object for more information")]
public System.Single TinAugustIndoorAverageTemperatureSetpoint { get; set; } = 22;
        
[Description(@"see memo on object for more information")]
[JsonProperty(@"see memo on object for more information")]
public System.Single TinSeptemberIndoorAverageTemperatureSetpoint { get; set; } = 22;
        
[Description(@"see memo on object for more information")]
[JsonProperty(@"see memo on object for more information")]
public System.Single TinOctoberIndoorAverageTemperatureSetpoint { get; set; } = 22;
        
[Description(@"see memo on object for more information")]
[JsonProperty(@"see memo on object for more information")]
public System.Single TinNovemberIndoorAverageTemperatureSetpoint { get; set; } = 22;
        
[Description(@"see memo on object for more information")]
[JsonProperty(@"see memo on object for more information")]
public System.Single TinDecemberIndoorAverageTemperatureSetpoint { get; set; } = 22;
        
[Description(@"This field permits imposing a daily sinusoidal variation in the indoor setpoint temperature to simulate the effect of a setback profile. The value specified is the amplitude of the sine wave.")]
[JsonProperty(@"This field permits imposing a daily sinusoidal variation in the indoor setpoint temperature to simulate the effect of a setback profile. The value specified is the amplitude of the sine wave.")]
public System.Single TinampDailyIndoorSineWaveVariationAmplitude { get; set; } = 0;
        
[Description(@"This field specifies the convergence tolerance used to control the iteration. When the temperature change of all nodes is less than the convergence value, iteration ceases.")]
[JsonProperty(@"This field specifies the convergence tolerance used to control the iteration. When the temperature change of all nodes is less than the convergence value, iteration ceases.")]
public System.Single ConvtolConvergenceTolerance { get; set; } = 0.1;
    }
    
    [Description("This object supplies the information about insulation used around the slab. There" +
        " are two possible configurations: under the slab or vertical insulation around t" +
        "he slab.")]
    [JsonObject("GroundHeatTransfer:Slab:Insulation")]
    public class GroundHeatTransfer_Slab_Insulation
    {
        
[Description(@"This field provides the thermal resistance value of the under slab insulation. It should be zero if the vertical insulation configuration is selected. typical value= 0-2.0")]
[JsonProperty(@"This field provides the thermal resistance value of the under slab insulation. It should be zero if the vertical insulation configuration is selected. typical value= 0-2.0")]
public System.Single RinsRValueOfUnderSlabInsulation { get; set; } = 0;
        
[Description(@"This specifies the width of the perimeter strip of insulation under the slab. It should be zero if for the vertical insulation configuration is selected. typical value= 0-2.0")]
[JsonProperty(@"This specifies the width of the perimeter strip of insulation under the slab. It should be zero if for the vertical insulation configuration is selected. typical value= 0-2.0")]
public System.Single DinsWidthOfStripOfUnderSlabInsulation { get; set; } = 0;
        
[Description(@"This field specifies the thermal resistance of the vertical insulation. It should be zero if the under slab insulation configuration is selected. typical value= 0-3.0")]
[JsonProperty(@"This field specifies the thermal resistance of the vertical insulation. It should be zero if the under slab insulation configuration is selected. typical value= 0-3.0")]
public System.Single RvinsRValueOfVerticalInsulation { get; set; } = 0;
        
[Description(@"This field specifies the depth of the vertical insulation into the ground in meters. It starts at the slab upper surface and extends into the ground. It should be zero if the under slab insulation configuration is selected. only use values= .2 .4 .6 .8 1.0 1.5 2.0 2.5 3.0")]
[JsonProperty(@"This field specifies the depth of the vertical insulation into the ground in meters. It starts at the slab upper surface and extends into the ground. It should be zero if the under slab insulation configuration is selected. only use values= .2 .4 .6 .8 1.0 1.5 2.0 2.5 3.0")]
public System.Single ZvinsDepthOfVerticalInsulation { get; set; } = 0;
        
[Description(@"Specifies if the vertical insulation configuration is being used. values: 1=yes vertical insulation 0=no under-slab insulation")]
[JsonProperty(@"Specifies if the vertical insulation configuration is being used. values: 1=yes vertical insulation 0=no under-slab insulation")]
public System.String IvinsFlagIsThereVerticalInsulation { get; set; } = (System.String)0;
    }
    
    [Description("Using an equivalent slab allows non-rectangular shapes to be modeled accurately. " +
        "Object uses the area - perimeter (area/perimeter) ratio to determine the size of" +
        " an equivalent rectangular slab. EnergyPlus users normally use this option.")]
    [JsonObject("GroundHeatTransfer:Slab:EquivalentSlab")]
    public class GroundHeatTransfer_Slab_EquivalentSlab
    {
        
[Description(@"Equivalent square slab is simulated,  side is 4*APRatio.")]
[JsonProperty(@"Equivalent square slab is simulated,  side is 4*APRatio.")]
public System.Single ApratioTheAreaToPerimeterRatioForThisSlab { get; set; } = ;
        
[Description(@"This field specifies the thickness of the slab. The slab top surface is level with the ground surface, so this is the depth into the ground. The slab depth has a significant effect on the temperature calculation, and it is also important for the auto-grid process. The finite difference grids are set in such a way that they use the slab thickness to determine the vertical grid spacing. Autogridding will fail if the slab thickness is specified larger than 0.25 meters.")]
[JsonProperty(@"This field specifies the thickness of the slab. The slab top surface is level with the ground surface, so this is the depth into the ground. The slab depth has a significant effect on the temperature calculation, and it is also important for the auto-grid process. The finite difference grids are set in such a way that they use the slab thickness to determine the vertical grid spacing. Autogridding will fail if the slab thickness is specified larger than 0.25 meters.")]
public System.Single SlabdepthThicknessOfSlabOnGrade { get; set; } = 0.1;
        
[Description(@"This field specifies the distance from the slab to the edge of the area that will be modeled with the grid system. It is the basic size dimension that is used to set the horizontal extent of the domain. 15 meters is a reasonable value.")]
[JsonProperty(@"This field specifies the distance from the slab to the edge of the area that will be modeled with the grid system. It is the basic size dimension that is used to set the horizontal extent of the domain. 15 meters is a reasonable value.")]
public System.Single ClearanceDistanceFromEdgeOfSlabToDomainEdge { get; set; } = 15;
        
[Description(@"This field specifies the vertical distance from the slab to the bottom edge of the area that will be modeled with the grid system. 15 meters is a reasonable value.")]
[JsonProperty(@"This field specifies the vertical distance from the slab to the bottom edge of the area that will be modeled with the grid system. 15 meters is a reasonable value.")]
public System.Single ZclearanceDistanceFromBottomOfSlabToDomainBottom { get; set; } = 15;
    }
    
    [Description("AutoGrid only necessary when EquivalentSlab option not chosen. Not normally neede" +
        "d by EnergyPlus users. This object permits user selection of rectangular slab di" +
        "mensions. NO SLAB DIMENSIONS LESS THAN 6 m.")]
    [JsonObject("GroundHeatTransfer:Slab:AutoGrid")]
    public class GroundHeatTransfer_Slab_AutoGrid
    {
        
[Description(@"typical values= 6 to 60.0")]
[JsonProperty(@"typical values= 6 to 60.0")]
public System.Single SlabxXDimensionOfTheBuildingSlab { get; set; } = ;
        
[Description(@"typical values= 6 to 60.0")]
[JsonProperty(@"typical values= 6 to 60.0")]
public System.Single SlabyYDimensionOfTheBuildingSlab { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SlabdepthThicknessOfSlabOnGrade { get; set; } = 0.1;
        
[JsonProperty(@"")]
public System.Single ClearanceDistanceFromEdgeOfSlabToDomainEdge { get; set; } = 15;
        
[JsonProperty(@"")]
public System.Single ZclearanceDistanceFromBottomOfSlabToDomainBottom { get; set; } = 15;
    }
    
    [Description("Manual Grid only necessary when using manual gridding (not recommended) Used only" +
        " in special cases when previous two objects are not used. User must input comple" +
        "te gridding information.")]
    [JsonObject("GroundHeatTransfer:Slab:ManualGrid")]
    public class GroundHeatTransfer_Slab_ManualGrid
    {
        
[JsonProperty(@"")]
public System.Single NxNumberOfCellsInTheXDirection { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NyNumberOfCellsInTheYDirection { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NzNumberOfCellsInTheZDirection { get; set; } = ;
        
[Description(@"typical values= 1-10")]
[JsonProperty(@"typical values= 1-10")]
public System.Single IboxXDirectionCellIndicatorOfSlabEdge { get; set; } = ;
        
[Description(@"typical values= 1-10")]
[JsonProperty(@"typical values= 1-10")]
public System.Single JboxYDirectionCellIndicatorOfSlabEdge { get; set; } = ;
    }
    
    [Description("This is only needed when using manual gridding (not recommended) XFACE: X Directi" +
        "on cell face coordinates: m")]
    [JsonObject("GroundHeatTransfer:Slab:XFACE")]
    public class GroundHeatTransfer_Slab_XFACE
    {
    }
    
    [Description("This is only needed when using manual gridding (not recommended) YFACE: Y Directi" +
        "on cell face coordinates: m,")]
    [JsonObject("GroundHeatTransfer:Slab:YFACE")]
    public class GroundHeatTransfer_Slab_YFACE
    {
    }
    
    [Description("This is only needed when using manual gridding (not recommended) ZFACE: Z Directi" +
        "on cell face coordinates: m")]
    [JsonObject("GroundHeatTransfer:Slab:ZFACE")]
    public class GroundHeatTransfer_Slab_ZFACE
    {
    }
    
    [Description("Specifies certain parameters that control the Basement preprocessor ground heat t" +
        "ransfer simulation.")]
    [JsonObject("GroundHeatTransfer:Basement:SimParameters")]
    public class GroundHeatTransfer_Basement_SimParameters
    {
        
[Description(@"0<F<1.0, typically 0.1 (0.3 for high k soil - saturated sand is about 2.6 w/m-K)")]
[JsonProperty(@"0<F<1.0, typically 0.1 (0.3 for high k soil - saturated sand is about 2.6 w/m-K)")]
public System.Single FMultiplierForTheAdiSolution { get; set; } = ;
        
[Description(@"typically 15-30]")]
[JsonProperty(@"typically 15-30]")]
public System.Single IyrsMaximumNumberOfYearlyIterations { get; set; } = 15;
    }
    
    [Description("Specifies the material properties for the Basement preprocessor ground heat trans" +
        "fer simulation. Only the Foundation Wall, Floor Slab, Soil, and Gravel propertie" +
        "s are currently used.")]
    [JsonObject("GroundHeatTransfer:Basement:MatlProps")]
    public class GroundHeatTransfer_Basement_MatlProps
    {
        
[JsonProperty(@"")]
public System.Single NmatNumberOfMaterialsInThisDomain { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DensityForFoundationWall { get; set; } = 2243;
        
[JsonProperty(@"")]
public System.Single DensityForFloorSlab { get; set; } = 2243;
        
[JsonProperty(@"")]
public System.Single DensityForCeiling { get; set; } = 311;
        
[JsonProperty(@"")]
public System.Single DensityForSoil { get; set; } = 1500;
        
[JsonProperty(@"")]
public System.Single DensityForGravel { get; set; } = 2000;
        
[JsonProperty(@"")]
public System.Single DensityForWood { get; set; } = 449;
        
[JsonProperty(@"")]
public System.Single SpecificHeatForFoundationWall { get; set; } = 880;
        
[JsonProperty(@"")]
public System.Single SpecificHeatForFloorSlab { get; set; } = 880;
        
[JsonProperty(@"")]
public System.Single SpecificHeatForCeiling { get; set; } = 1530;
        
[JsonProperty(@"")]
public System.Single SpecificHeatForSoil { get; set; } = 840;
        
[JsonProperty(@"")]
public System.Single SpecificHeatForGravel { get; set; } = 720;
        
[JsonProperty(@"")]
public System.Single SpecificHeatForWood { get; set; } = 1530;
        
[JsonProperty(@"")]
public System.Single ThermalConductivityForFoundationWall { get; set; } = 1.4;
        
[JsonProperty(@"")]
public System.Single ThermalConductivityForFloorSlab { get; set; } = 1.4;
        
[JsonProperty(@"")]
public System.Single ThermalConductivityForCeiling { get; set; } = 0.09;
        
[JsonProperty(@"")]
public System.Single ThermalConductivityForSoil { get; set; } = 1.1;
        
[JsonProperty(@"")]
public System.Single ThermalConductivityForGravel { get; set; } = 1.9;
        
[JsonProperty(@"")]
public System.Single ThermalConductivityForWood { get; set; } = 0.12;
    }
    
    [Description("Describes the insulation used on an exterior basement wall for the Basement prepr" +
        "ocessor ground heat transfer simulation.")]
    [JsonObject("GroundHeatTransfer:Basement:Insulation")]
    public class GroundHeatTransfer_Basement_Insulation
    {
        
[JsonProperty(@"")]
public System.Single RextRValueOfAnyExteriorInsulation { get; set; } = ;
        
[Description(@"True for full insulation False for insulation half way down side wall from grade line")]
[JsonProperty(@"True for full insulation False for insulation half way down side wall from grade line")]
public YesNoDefault InsfullFlagIsTheWallFullyInsulated { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum InsfullFlagIsTheWallFullyInsulatedType
    {
        
        [JsonProperty("FALSE")]
        FALSE = 0,
        
        [JsonProperty("TRUE")]
        TRUE = 1,
    }
    
    [Description("Specifies the soil surface properties for the Basement preprocessor ground heat t" +
        "ransfer simulation.")]
    [JsonObject("GroundHeatTransfer:Basement:SurfaceProps")]
    public class GroundHeatTransfer_Basement_SurfaceProps
    {
        
[JsonProperty(@"")]
public System.Single AlbedoSurfaceAlbedoForNoSnowConditions { get; set; } = 0.16;
        
[JsonProperty(@"")]
public System.Single AlbedoSurfaceAlbedoForSnowConditions { get; set; } = 0.4;
        
[JsonProperty(@"")]
public System.Single EpslnSurfaceEmissivityNoSnow { get; set; } = 0.94;
        
[JsonProperty(@"")]
public System.Single EpslnSurfaceEmissivityWithSnow { get; set; } = 0.86;
        
[JsonProperty(@"")]
public System.Single VeghtSurfaceRoughnessNoSnowConditions { get; set; } = 6;
        
[JsonProperty(@"")]
public System.Single VeghtSurfaceRoughnessSnowConditions { get; set; } = 0.25;
        
[Description(@"Typically, PET is False")]
[JsonProperty(@"Typically, PET is False")]
public YesNoDefault PetFlagPotentialEvapotranspirationOn { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FALSE");
    }
    
    public enum PetFlagPotentialEvapotranspirationOnType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FALSE")]
        FALSE = 1,
        
        [JsonProperty("TRUE")]
        TRUE = 2,
    }
    
    [Description("Specifies the surface and gravel thicknesses used for the Basement preprocessor g" +
        "round heat transfer simulation.")]
    [JsonObject("GroundHeatTransfer:Basement:BldgData")]
    public class GroundHeatTransfer_Basement_BldgData
    {
        
[JsonProperty(@"")]
public System.Single DwallWallThickness { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single DslabFloorSlabThickness { get; set; } = 0.1;
        
[JsonProperty(@"")]
public System.Single DgravxyWidthOfGravelPitBesideBasementWall { get; set; } = 0.3;
        
[JsonProperty(@"")]
public System.Single DgravznGravelDepthExtendingAboveTheFloorSlab { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single DgravzpGravelDepthBelowTheFloorSlab { get; set; } = 0.1;
    }
    
    [Description("Provides the information needed to simulate the inside boundary conditions for th" +
        "e Basement preprocessor ground heat transfer simulation.")]
    [JsonObject("GroundHeatTransfer:Basement:Interior")]
    public class GroundHeatTransfer_Basement_Interior
    {
        
[Description(@"for EnergyPlus this should be TRUE")]
[JsonProperty(@"for EnergyPlus this should be TRUE")]
public YesNoDefault CondFlagIsTheBasementConditioned { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "TRUE");
        
[JsonProperty(@"")]
public System.Single HinDownwardConvectionOnlyHeatTransferCoefficient { get; set; } = 0.92;
        
[JsonProperty(@"")]
public System.Single HinUpwardConvectionOnlyHeatTransferCoefficient { get; set; } = 4.04;
        
[JsonProperty(@"")]
public System.Single HinHorizontalConvectionOnlyHeatTransferCoefficient { get; set; } = 3.08;
        
[JsonProperty(@"")]
public System.Single HinDownwardCombinedConvectionAndRadiationHeatTransferCoefficient { get; set; } = 6.13;
        
[JsonProperty(@"")]
public System.Single HinUpwardCombinedConvectionAndRadiationHeatTransferCoefficient { get; set; } = 9.26;
        
[JsonProperty(@"")]
public System.Single HinHorizontalCombinedConvectionAndRadiationHeatTransferCoefficient { get; set; } = 8.29;
    }
    
    public enum CondFlagIsTheBasementConditionedType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FALSE")]
        FALSE = 1,
        
        [JsonProperty("TRUE")]
        TRUE = 2,
    }
    
    [Description("ComBldg contains the monthly average temperatures (C) and possibility of daily va" +
        "riation amplitude")]
    [JsonObject("GroundHeatTransfer:Basement:ComBldg")]
    public class GroundHeatTransfer_Basement_ComBldg
    {
        
[JsonProperty(@"")]
public System.Single JanuaryAverageTemperature { get; set; } = 22;
        
[JsonProperty(@"")]
public System.Single FebruaryAverageTemperature { get; set; } = 22;
        
[JsonProperty(@"")]
public System.Single MarchAverageTemperature { get; set; } = 22;
        
[JsonProperty(@"")]
public System.Single AprilAverageTemperature { get; set; } = 22;
        
[JsonProperty(@"")]
public System.Single MayAverageTemperature { get; set; } = 22;
        
[JsonProperty(@"")]
public System.Single JuneAverageTemperature { get; set; } = 22;
        
[JsonProperty(@"")]
public System.Single JulyAverageTemperature { get; set; } = 22;
        
[JsonProperty(@"")]
public System.Single AugustAverageTemperature { get; set; } = 22;
        
[JsonProperty(@"")]
public System.Single SeptemberAverageTemperature { get; set; } = 22;
        
[JsonProperty(@"")]
public System.Single OctoberAverageTemperature { get; set; } = 22;
        
[JsonProperty(@"")]
public System.Single NovemberAverageTemperature { get; set; } = 22;
        
[JsonProperty(@"")]
public System.Single DecemberAverageTemperature { get; set; } = 22;
        
[Description(@"(Normally zero, just for checking)")]
[JsonProperty(@"(Normally zero, just for checking)")]
public System.Single DailyVariationSineWaveAmplitude { get; set; } = 0;
    }
    
    [Description("Using an equivalent slab allows non-rectangular shapes to be modeled accurately. " +
        "The simulation default should be EquivSizing=True")]
    [JsonObject("GroundHeatTransfer:Basement:EquivSlab")]
    public class GroundHeatTransfer_Basement_EquivSlab
    {
        
[JsonProperty(@"")]
public System.Single ApratioTheAreaToPerimeterRatioForThisSlab { get; set; } = ;
        
[Description(@"Will the dimensions of an equivalent slab be calculated (TRUE) or will the dimensions be input directly? (FALSE)] Only advanced special simulations should use FALSE.")]
[JsonProperty(@"Will the dimensions of an equivalent slab be calculated (TRUE) or will the dimensions be input directly? (FALSE)] Only advanced special simulations should use FALSE.")]
public YesNoDefault EquivsizingFlag { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum EquivsizingFlagType
    {
        
        [JsonProperty("FALSE")]
        FALSE = 0,
        
        [JsonProperty("TRUE")]
        TRUE = 1,
    }
    
    [Description("EquivAutoGrid necessary when EquivSizing=TRUE, TRUE is is the normal case.")]
    [JsonObject("GroundHeatTransfer:Basement:EquivAutoGrid")]
    public class GroundHeatTransfer_Basement_EquivAutoGrid
    {
        
[JsonProperty(@"")]
public System.Single ClearanceDistanceFromOutsideOfWallToEdgeOfDGroundDomain { get; set; } = 15;
        
[JsonProperty(@"")]
public System.Single SlabdepthThicknessOfTheFloorSlab { get; set; } = 0.1;
        
[JsonProperty(@"")]
public System.Single BasedepthDepthOfTheBasementWallBelowGrade { get; set; } = 2;
    }
    
    [Description("AutoGrid only necessary when EquivSizing is false If the modeled building is not " +
        "a rectangle or square, Equivalent sizing MUST be used to get accurate results")]
    [JsonObject("GroundHeatTransfer:Basement:AutoGrid")]
    public class GroundHeatTransfer_Basement_AutoGrid
    {
        
[JsonProperty(@"")]
public System.Single ClearanceDistanceFromOutsideOfWallToEdge { get; set; } = 15;
        
[JsonProperty(@"")]
public System.Single SlabxXDimensionOfTheBuildingSlab { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SlabyYDimensionOfTheBuildingSlab { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ConcagheightHeightOfTheFoundationWallAboveGrade { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single SlabdepthThicknessOfTheFloorSlab { get; set; } = 0.1;
        
[JsonProperty(@"")]
public System.Single BasedepthDepthOfTheBasementWallBelowGrade { get; set; } = 2;
    }
    
    [Description("Manual Grid only necessary using manual gridding (not recommended)")]
    [JsonObject("GroundHeatTransfer:Basement:ManualGrid")]
    public class GroundHeatTransfer_Basement_ManualGrid
    {
        
[JsonProperty(@"")]
public System.Single NxNumberOfCellsInTheXDirection { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NyNumberOfCellsInTheYDirection { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NzagNumberOfCellsInTheZDirectionAboveGradeAlways { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NzbgNumberOfCellsInZDirectionBelowGrade { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single IbaseXDirectionCellIndicatorOfSlabEdge { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single JbaseYDirectionCellIndicatorOfSlabEdge { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single KbaseZDirectionCellIndicatorOfTheTopOfTheFloorSlab { get; set; } = ;
    }
    
    [Description("This is only needed when using manual gridding (not recommended) XFACE: X Directi" +
        "on cell face coordinates: m")]
    [JsonObject("GroundHeatTransfer:Basement:XFACE")]
    public class GroundHeatTransfer_Basement_XFACE
    {
    }
    
    [Description("This is only needed when using manual gridding (not recommended) YFACE: Y Directi" +
        "on cell face coordinates: m")]
    [JsonObject("GroundHeatTransfer:Basement:YFACE")]
    public class GroundHeatTransfer_Basement_YFACE
    {
    }
    
    [Description("This is only needed when using manual gridding (not recommended) ZFACE: Z Directi" +
        "on cell face coordinates: m")]
    [JsonObject("GroundHeatTransfer:Basement:ZFACE")]
    public class GroundHeatTransfer_Basement_ZFACE
    {
    }
}
namespace EnergyPlus.Economics
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("If CurrencyType is not specified, it will default to USD and produce $ in the rep" +
        "orts.")]
    [JsonObject("CurrencyType")]
    public class CurrencyType
    {
        
[Description(@"The commonly used three letter currency code for the units of money for the country or region. Based on ISO 4217 currency codes. Common currency codes are USD for $ and EUR for Euros.")]
[JsonProperty(@"The commonly used three letter currency code for the units of money for the country or region. Based on ISO 4217 currency codes. Common currency codes are USD for $ and EUR for Euros.")]
public YesNoDefault MonetaryUnit { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum MonetaryUnitType
    {
        
        [JsonProperty("AFN")]
        AFN = 0,
        
        [JsonProperty("ALL")]
        ALL = 1,
        
        [JsonProperty("ANG")]
        ANG = 2,
        
        [JsonProperty("ARS")]
        ARS = 3,
        
        [JsonProperty("AUD")]
        AUD = 4,
        
        [JsonProperty("AWG")]
        AWG = 5,
        
        [JsonProperty("AZN")]
        AZN = 6,
        
        [JsonProperty("BAM")]
        BAM = 7,
        
        [JsonProperty("BBD")]
        BBD = 8,
        
        [JsonProperty("BGN")]
        BGN = 9,
        
        [JsonProperty("BMD")]
        BMD = 10,
        
        [JsonProperty("BND")]
        BND = 11,
        
        [JsonProperty("BOB")]
        BOB = 12,
        
        [JsonProperty("BRL")]
        BRL = 13,
        
        [JsonProperty("BSD")]
        BSD = 14,
        
        [JsonProperty("BWP")]
        BWP = 15,
        
        [JsonProperty("BYR")]
        BYR = 16,
        
        [JsonProperty("BZD")]
        BZD = 17,
        
        [JsonProperty("CAD")]
        CAD = 18,
        
        [JsonProperty("CHF")]
        CHF = 19,
        
        [JsonProperty("CLP")]
        CLP = 20,
        
        [JsonProperty("CNY")]
        CNY = 21,
        
        [JsonProperty("COP")]
        COP = 22,
        
        [JsonProperty("CRC")]
        CRC = 23,
        
        [JsonProperty("CUP")]
        CUP = 24,
        
        [JsonProperty("CZK")]
        CZK = 25,
        
        [JsonProperty("DKK")]
        DKK = 26,
        
        [JsonProperty("DOP")]
        DOP = 27,
        
        [JsonProperty("EEK")]
        EEK = 28,
        
        [JsonProperty("EGP")]
        EGP = 29,
        
        [JsonProperty("EUR")]
        EUR = 30,
        
        [JsonProperty("FJD")]
        FJD = 31,
        
        [JsonProperty("GBP")]
        GBP = 32,
        
        [JsonProperty("GHC")]
        GHC = 33,
        
        [JsonProperty("GIP")]
        GIP = 34,
        
        [JsonProperty("GTQ")]
        GTQ = 35,
        
        [JsonProperty("GYD")]
        GYD = 36,
        
        [JsonProperty("HKD")]
        HKD = 37,
        
        [JsonProperty("HNL")]
        HNL = 38,
        
        [JsonProperty("HRK")]
        HRK = 39,
        
        [JsonProperty("HUF")]
        HUF = 40,
        
        [JsonProperty("IDR")]
        IDR = 41,
        
        [JsonProperty("ILS")]
        ILS = 42,
        
        [JsonProperty("IMP")]
        IMP = 43,
        
        [JsonProperty("INR")]
        INR = 44,
        
        [JsonProperty("IRR")]
        IRR = 45,
        
        [JsonProperty("ISK")]
        ISK = 46,
        
        [JsonProperty("JEP")]
        JEP = 47,
        
        [JsonProperty("JMD")]
        JMD = 48,
        
        [JsonProperty("JPY")]
        JPY = 49,
        
        [JsonProperty("KGS")]
        KGS = 50,
        
        [JsonProperty("KHR")]
        KHR = 51,
        
        [JsonProperty("KPW")]
        KPW = 52,
        
        [JsonProperty("KRW")]
        KRW = 53,
        
        [JsonProperty("KYD")]
        KYD = 54,
        
        [JsonProperty("KZT")]
        KZT = 55,
        
        [JsonProperty("LAK")]
        LAK = 56,
        
        [JsonProperty("LBP")]
        LBP = 57,
        
        [JsonProperty("LKR")]
        LKR = 58,
        
        [JsonProperty("LRD")]
        LRD = 59,
        
        [JsonProperty("LTL")]
        LTL = 60,
        
        [JsonProperty("LVL")]
        LVL = 61,
        
        [JsonProperty("MKD")]
        MKD = 62,
        
        [JsonProperty("MNT")]
        MNT = 63,
        
        [JsonProperty("MUR")]
        MUR = 64,
        
        [JsonProperty("MXN")]
        MXN = 65,
        
        [JsonProperty("MYR")]
        MYR = 66,
        
        [JsonProperty("MZN")]
        MZN = 67,
        
        [JsonProperty("NAD")]
        NAD = 68,
        
        [JsonProperty("NGN")]
        NGN = 69,
        
        [JsonProperty("NIO")]
        NIO = 70,
        
        [JsonProperty("NOK")]
        NOK = 71,
        
        [JsonProperty("NPR")]
        NPR = 72,
        
        [JsonProperty("NZD")]
        NZD = 73,
        
        [JsonProperty("OMR")]
        OMR = 74,
        
        [JsonProperty("PAB")]
        PAB = 75,
        
        [JsonProperty("PEN")]
        PEN = 76,
        
        [JsonProperty("PHP")]
        PHP = 77,
        
        [JsonProperty("PKR")]
        PKR = 78,
        
        [JsonProperty("PLN")]
        PLN = 79,
        
        [JsonProperty("PYG")]
        PYG = 80,
        
        [JsonProperty("QAR")]
        QAR = 81,
        
        [JsonProperty("RON")]
        RON = 82,
        
        [JsonProperty("RSD")]
        RSD = 83,
        
        [JsonProperty("RUB")]
        RUB = 84,
        
        [JsonProperty("SAR")]
        SAR = 85,
        
        [JsonProperty("SBD")]
        SBD = 86,
        
        [JsonProperty("SCR")]
        SCR = 87,
        
        [JsonProperty("SEK")]
        SEK = 88,
        
        [JsonProperty("SGD")]
        SGD = 89,
        
        [JsonProperty("SHP")]
        SHP = 90,
        
        [JsonProperty("SOS")]
        SOS = 91,
        
        [JsonProperty("SRD")]
        SRD = 92,
        
        [JsonProperty("SVC")]
        SVC = 93,
        
        [JsonProperty("SYP")]
        SYP = 94,
        
        [JsonProperty("THB")]
        THB = 95,
        
        [JsonProperty("TRL")]
        TRL = 96,
        
        [JsonProperty("TRY")]
        TRY = 97,
        
        [JsonProperty("TTD")]
        TTD = 98,
        
        [JsonProperty("TVD")]
        TVD = 99,
        
        [JsonProperty("TWD")]
        TWD = 100,
        
        [JsonProperty("UAH")]
        UAH = 101,
        
        [JsonProperty("USD")]
        USD = 102,
        
        [JsonProperty("UYU")]
        UYU = 103,
        
        [JsonProperty("UZS")]
        UZS = 104,
        
        [JsonProperty("VEF")]
        VEF = 105,
        
        [JsonProperty("VND")]
        VND = 106,
        
        [JsonProperty("XCD")]
        XCD = 107,
        
        [JsonProperty("YER")]
        YER = 108,
        
        [JsonProperty("ZAR")]
        ZAR = 109,
        
        [JsonProperty("ZWD")]
        ZWD = 110,
    }
    
    [Description("Used to perform various modifications to the construction costs to arrive at an e" +
        "stimate for total project costs. This object allows extending the line item mode" +
        "l so that the overall costs of the project will reflect various profit and fees." +
        "")]
    [JsonObject("ComponentCost:Adjustments")]
    public class ComponentCost_Adjustments
    {
        
[Description(@"based on conditioned floor area for cost not accounted for in current line item cost model")]
[JsonProperty(@"based on conditioned floor area for cost not accounted for in current line item cost model")]
public System.Single MiscellaneousCostPerConditionedArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DesignAndEngineeringFees { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ContractorFee { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Contingency { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PermitsBondingAndInsurance { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CommissioningFee { get; set; } = ;
        
[Description(@"for use with average data in line item and Misc cost models")]
[JsonProperty(@"for use with average data in line item and Misc cost models")]
public System.Single RegionalAdjustmentFactor { get; set; } = ;
    }
    
    [Description(@"Used to allow comparing the current cost estimate to the results of a previous estimate for a reference building. This object parallels the ComponentCost:Adjustments object but adds a field for entering the cost line item model result for the reference building. The factors entered in this object are applied to the reference building while the factors listed in the ComponentCost:Adjustments object are applied to the current building model cost estimate.")]
    [JsonObject("ComponentCost:Reference")]
    public class ComponentCost_Reference
    {
        
[Description(@"should be comparable to the components in current line item cost model")]
[JsonProperty(@"should be comparable to the components in current line item cost model")]
public System.Single ReferenceBuildingLineItemCosts { get; set; } = ;
        
[Description(@"based on conditioned floor area for cost not accounted for in reference line item costs")]
[JsonProperty(@"based on conditioned floor area for cost not accounted for in reference line item costs")]
public System.Single ReferenceBuildingMiscellaneousCostPerConditionedArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ReferenceBuildingDesignAndEngineeringFees { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ReferenceBuildingContractorFee { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ReferenceBuildingContingency { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ReferenceBuildingPermitsBondingAndInsurance { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ReferenceBuildingCommissioningFee { get; set; } = ;
        
[Description(@"for use with average data in line item and Misc cost models")]
[JsonProperty(@"for use with average data in line item and Misc cost models")]
public System.Single ReferenceBuildingRegionalAdjustmentFactor { get; set; } = ;
    }
    
    [Description("Each instance of this object creates a cost line item and will contribute to the " +
        "total for a cost estimate.")]
    [JsonObject("ComponentCost:LineItem")]
    public class ComponentCost_LineItem
    {
        
[JsonProperty(@"")]
public System.String Type { get; set; } = "";
        
[Description(@"extend choice-keys as Cases are added to code")]
[JsonProperty(@"extend choice-keys as Cases are added to code")]
public YesNoDefault LineItemType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"wildcard "*" is acceptable for some components")]
[JsonProperty(@"wildcard "*" is acceptable for some components")]
public System.String ItemName { get; set; } = "";
        
[Description(@"not yet used")]
[JsonProperty(@"not yet used")]
public System.String ObjectEndUseKey { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single CostPerEach { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CostPerArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CostPerUnitOfOutputCapacity { get; set; } = ;
        
[Description(@"The value is per change in COP.")]
[JsonProperty(@"The value is per change in COP.")]
public System.Single CostPerUnitOfOutputCapacityPerCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CostPerVolume { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CostPerVolumeRate { get; set; } = ;
        
[Description(@"as in for use with UA sizing of Coils")]
[JsonProperty(@"as in for use with UA sizing of Coils")]
public System.Single CostPerEnergyPerTemperatureDifference { get; set; } = ;
        
[Description(@"optional for use with Cost per Each and "General" object Type")]
[JsonProperty(@"optional for use with Cost per Each and "General" object Type")]
public System.Single Quantity { get; set; } = ;
    }
    
    public enum LineItemTypeType
    {
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 0,
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 1,
        
        [JsonProperty("Coil:DX")]
        CoilDX = 2,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 3,
        
        [JsonProperty("Construction")]
        Construction = 4,
        
        [JsonProperty("Daylighting:Controls")]
        DaylightingControls = 5,
        
        [JsonProperty("General")]
        General = 6,
        
        [JsonProperty("Generator:Photovoltaic")]
        GeneratorPhotovoltaic = 7,
        
        [JsonProperty("Lights")]
        Lights = 8,
        
        [JsonProperty("Shading:Zone:Detailed")]
        ShadingZoneDetailed = 9,
    }
    
    [Description(@"Defines the name of a utility cost tariff, the type of tariff, and other details about the overall tariff. Each other object that is part of the tariff model references the tariff name. See UtilityCost:Charge:Simple, UtilityCost:Charge:Block, UtilityCost:Ratchet, UtilityCost:Qualify, UtilityCost:Variable and UtilityCost:Computation objects.")]
    [JsonObject("UtilityCost:Tariff")]
    public class UtilityCost_Tariff
    {
        
[Description(@"The name of any standard meter or custom meter or but usually set to either Electricity:Facility or Gas:Facility")]
[JsonProperty(@"The name of any standard meter or custom meter or but usually set to either Electricity:Facility or Gas:Facility")]
public System.String OutputMeterName { get; set; } = "";
        
[Description(@"A choice that allows several different predefined conversion factors to be used; otherwise user defined conversion factors are used as defined in the next two fields. If left blank m3 is used for water meters and kWh are used for all other meters.")]
[JsonProperty(@"A choice that allows several different predefined conversion factors to be used; otherwise user defined conversion factors are used as defined in the next two fields. If left blank m3 is used for water meters and kWh are used for all other meters.")]
public YesNoDefault ConversionFactorChoice { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Is a multiplier used to convert energy into the units specified by the utility in their tariff. If left blank it defaults to 1 (no conversion). This field should will be used only if Conversion Factor Choice is set to UserDefined. Within EnergyPlus energy always has units of J (joules). For conversion from J to kWh use the value of 0.0000002778. This is also used for all objects that reference the UtilityCost:Tariff.")]
[JsonProperty(@"Is a multiplier used to convert energy into the units specified by the utility in their tariff. If left blank it defaults to 1 (no conversion). This field should will be used only if Conversion Factor Choice is set to UserDefined. Within EnergyPlus energy always has units of J (joules). For conversion from J to kWh use the value of 0.0000002778. This is also used for all objects that reference the UtilityCost:Tariff.")]
public System.Single EnergyConversionFactor { get; set; } = ;
        
[Description(@"Is a multiplier used to convert demand into the units specified by the utility in their tariff. If left blank it defaults to 1 (no conversion). This field should will be used only if Conversion Factor Choice is set to UserDefined. Within EnergyPlus demand always has units of J/s (joules/sec) which equivalent to W (watts). For conversion from W to kW use the value of 0.001. This is also used for all objects that reference the UtilityCost:Tariff.")]
[JsonProperty(@"Is a multiplier used to convert demand into the units specified by the utility in their tariff. If left blank it defaults to 1 (no conversion). This field should will be used only if Conversion Factor Choice is set to UserDefined. Within EnergyPlus demand always has units of J/s (joules/sec) which equivalent to W (watts). For conversion from W to kW use the value of 0.001. This is also used for all objects that reference the UtilityCost:Tariff.")]
public System.Single DemandConversionFactor { get; set; } = ;
        
[Description(@"The name of the schedule that defines the time-of-use periods that occur each day. The values for the different variables are: 1 for Peak. 2 for Shoulder. 3 for OffPeak. 4 for MidPeak. The following variables are created automatically if these different periods are used in the schedule and include: TotalEnergy, TotalDemand, PeakEnergy, PeakDemand, ShoulderEnergy, ShoulderDemand, OffPeakEnergy, OffPeakDemand, MidPeakEnergy, MidPeakDemand Some special variables are created that include: PeakExceedsOffPeak, OffPeakExceedsPeak, PeakExceedsMidPeak, MidPeakExceedsPeak, PeakExceedsShoulder, ShoulderExceedsPeak, Others include: PeakAndShoulderEnergy, PeakAndShoulderDemand, PeakAndMidPeakEnergy, PeakAndMidPeakDemand, ShoulderAndOffPeakEnergy, ShoulderAndOffPeakDemand, PeakAndOffPeakEnergy, PeakAndOffPeakDemand, RealTimePriceCosts, AboveCustomerBaseCosts, BelowCustomerBaseCosts, AboveCustomerBaseEnergy, BelowCustomerBaseEnergy")]
[JsonProperty(@"The name of the schedule that defines the time-of-use periods that occur each day. The values for the different variables are: 1 for Peak. 2 for Shoulder. 3 for OffPeak. 4 for MidPeak. The following variables are created automatically if these different periods are used in the schedule and include: TotalEnergy, TotalDemand, PeakEnergy, PeakDemand, ShoulderEnergy, ShoulderDemand, OffPeakEnergy, OffPeakDemand, MidPeakEnergy, MidPeakDemand Some special variables are created that include: PeakExceedsOffPeak, OffPeakExceedsPeak, PeakExceedsMidPeak, MidPeakExceedsPeak, PeakExceedsShoulder, ShoulderExceedsPeak, Others include: PeakAndShoulderEnergy, PeakAndShoulderDemand, PeakAndMidPeakEnergy, PeakAndMidPeakDemand, ShoulderAndOffPeakEnergy, ShoulderAndOffPeakDemand, PeakAndOffPeakEnergy, PeakAndOffPeakDemand, RealTimePriceCosts, AboveCustomerBaseCosts, BelowCustomerBaseCosts, AboveCustomerBaseEnergy, BelowCustomerBaseEnergy")]
public System.String TimeOfUsePeriodScheduleName { get; set; } = "";
        
[Description(@"The name of a schedule that defines the seasons. The schedule values are: 1 for Winter. 2 for Spring. 3 for Summer. 4 for Autumn. Variables are automatically created if a season schedule is used. These variables are set to 1 within the season and 0 for the months that are not in the season. The variables are: IsWinter, IsNotWinter, IsSpring, IsNotSpring, IsSummer, IsNotSummer, IsAutumn, IsNotAutumn.")]
[JsonProperty(@"The name of a schedule that defines the seasons. The schedule values are: 1 for Winter. 2 for Spring. 3 for Summer. 4 for Autumn. Variables are automatically created if a season schedule is used. These variables are set to 1 within the season and 0 for the months that are not in the season. The variables are: IsWinter, IsNotWinter, IsSpring, IsNotSpring, IsSummer, IsNotSummer, IsAutumn, IsNotAutumn.")]
public System.String SeasonScheduleName { get; set; } = "";
        
[Description(@"The name of the schedule that defines the billing periods of the year. Normally this entry is allowed to default and a schedule will be internally used that has the breaks between billing periods occurring at the same time as the breaks between months i.e. at midnight prior to the first day of the month. If other billing periods are used such as two month cycles or a single bill for an entire season such as some natural gas companies do in the summer then the month schedule may be used to redefine it. Make sure that the month schedule and season schedule are consistent otherwise an error will be issued.")]
[JsonProperty(@"The name of the schedule that defines the billing periods of the year. Normally this entry is allowed to default and a schedule will be internally used that has the breaks between billing periods occurring at the same time as the breaks between months i.e. at midnight prior to the first day of the month. If other billing periods are used such as two month cycles or a single bill for an entire season such as some natural gas companies do in the summer then the month schedule may be used to redefine it. Make sure that the month schedule and season schedule are consistent otherwise an error will be issued.")]
public System.String MonthScheduleName { get; set; } = "";
        
[Description(@"The determination of demand can vary by utility. Some utilities use the peak instantaneous demand measured but most use a fifteen minute average demand or a one hour average demand. Some gas utilities measure demand as the use during the peak day or peak week.")]
[JsonProperty(@"The determination of demand can vary by utility. Some utilities use the peak instantaneous demand measured but most use a fifteen minute average demand or a one hour average demand. Some gas utilities measure demand as the use during the peak day or peak week.")]
public YesNoDefault DemandWindowLength { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"The fixed monthly service charge that many utilities have. The entry may be numeric and gets added to the ServiceCharges variable or if a variable name is entered here its values for each month are used.")]
[JsonProperty(@"The fixed monthly service charge that many utilities have. The entry may be numeric and gets added to the ServiceCharges variable or if a variable name is entered here its values for each month are used.")]
public System.String MonthlyChargeOrVariableName { get; set; } = "";
        
[Description(@"The minimum total charge for the tariff or if a variable name is entered here its values for each month are used.")]
[JsonProperty(@"The minimum total charge for the tariff or if a variable name is entered here its values for each month are used.")]
public System.String MinimumMonthlyChargeOrVariableName { get; set; } = "";
        
[Description(@"Used with real time pricing rates. The name of a schedule that contains the cost of energy for that particular time period of the year. Real time rates can be modeled using a charge schedule with the actual real time prices entered in the schedule.")]
[JsonProperty(@"Used with real time pricing rates. The name of a schedule that contains the cost of energy for that particular time period of the year. Real time rates can be modeled using a charge schedule with the actual real time prices entered in the schedule.")]
public System.String RealTimePricingChargeScheduleName { get; set; } = "";
        
[Description(@"Used with real time pricing rates. The name of a schedule that contains the baseline energy use for the customer. Many real time rates apply the charges as a credit or debit only to the difference between the baseline use and the actual use.")]
[JsonProperty(@"Used with real time pricing rates. The name of a schedule that contains the baseline energy use for the customer. Many real time rates apply the charges as a credit or debit only to the difference between the baseline use and the actual use.")]
public System.String CustomerBaselineLoadScheduleName { get; set; } = "";
        
[Description(@"The group name of the tariff such as distribution transmission supplier etc. If more than one tariff with the same group name is present and qualifies only the lowest cost tariff is used. Usually the group name field is left blank which results in all tariffs using the same meter variable being compared and the lowest cost one being selected.")]
[JsonProperty(@"The group name of the tariff such as distribution transmission supplier etc. If more than one tariff with the same group name is present and qualifies only the lowest cost tariff is used. Usually the group name field is left blank which results in all tariffs using the same meter variable being compared and the lowest cost one being selected.")]
public System.String GroupName { get; set; } = "";
        
[Description(@"Sets whether the tariff is used for buying selling or both to the utility. This should be allowed to default to buyFromUtility unless a power generation system is included in the building that may generate more power than the building needs during the year")]
[JsonProperty(@"Sets whether the tariff is used for buying selling or both to the utility. This should be allowed to default to buyFromUtility unless a power generation system is included in the building that may generate more power than the building needs during the year")]
public YesNoDefault BuyOrSell { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BuyFromUtility");
    }
    
    public enum ConversionFactorChoiceType
    {
        
        [JsonProperty("CCF")]
        CCF = 0,
        
        [JsonProperty("MCF")]
        MCF = 1,
        
        [JsonProperty("MJ")]
        MJ = 2,
        
        [JsonProperty("MMBtu")]
        MMBtu = 3,
        
        [JsonProperty("Therm")]
        Therm = 4,
        
        [JsonProperty("UserDefined")]
        UserDefined = 5,
        
        [JsonProperty("gal")]
        Gal = 6,
        
        [JsonProperty("kBtu")]
        KBtu = 7,
        
        [JsonProperty("kWh")]
        KWh = 8,
        
        [JsonProperty("kgal")]
        Kgal = 9,
        
        [JsonProperty("m3")]
        M = 10,
    }
    
    public enum DemandWindowLengthType
    {
        
        [JsonProperty("Day")]
        Day = 0,
        
        [JsonProperty("FullHour")]
        FullHour = 1,
        
        [JsonProperty("HalfHour")]
        HalfHour = 2,
        
        [JsonProperty("QuarterHour")]
        QuarterHour = 3,
        
        [JsonProperty("Week")]
        Week = 4,
    }
    
    public enum BuyOrSellType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BuyFromUtility")]
        BuyFromUtility = 1,
        
        [JsonProperty("NetMetering")]
        NetMetering = 2,
        
        [JsonProperty("SellToUtility")]
        SellToUtility = 3,
    }
    
    [Description(@"The qualify object allows only tariffs to be selected based on limits which may apply such as maximum or minimum demand requirements. If the results of the simulation fall outside of the range of qualifications, that tariff is still calculated but the ""Qualified"" entry will say ""No"" and the UtilityCost:Qualify that caused its exclusion is shown. Multiple UtilityCost:Qualify objects can appear for the same tariff and they can be based on any variable.")]
    [JsonObject("UtilityCost:Qualify")]
    public class UtilityCost_Qualify
    {
        
[Description(@"Displayed in the report if the tariff does not qualify")]
[JsonProperty(@"Displayed in the report if the tariff does not qualify")]
public System.String UtilityCostQualifyName { get; set; } = "";
        
[Description(@"The name of the UtilityCost:Tariff that is associated with this UtilityCost:Qualify.")]
[JsonProperty(@"The name of the UtilityCost:Tariff that is associated with this UtilityCost:Qualify.")]
public System.String TariffName { get; set; } = "";
        
[Description(@"The name of the variable used. For energy and demand the automatically created variables totalEnergy and totalDemand should be used respectively.")]
[JsonProperty(@"The name of the variable used. For energy and demand the automatically created variables totalEnergy and totalDemand should be used respectively.")]
public System.String VariableName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault QualifyType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Maximum");
        
[Description(@"The minimum or maximum value for the qualify. If the variable has values that are less than this value when the qualify type is minimum then the tariff may be disqualified. If the variable has values that are greater than this value when the qualify type is maximum then the tariff may be disqualified.")]
[JsonProperty(@"The minimum or maximum value for the qualify. If the variable has values that are less than this value when the qualify type is minimum then the tariff may be disqualified. If the variable has values that are greater than this value when the qualify type is maximum then the tariff may be disqualified.")]
public System.String ThresholdValueOrVariableName { get; set; } = "";
        
[Description(@"If the UtilityCost:Qualify only applies to a season enter the season name. If this field is left blank it defaults to Annual.")]
[JsonProperty(@"If the UtilityCost:Qualify only applies to a season enter the season name. If this field is left blank it defaults to Annual.")]
public YesNoDefault Season { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Uses the number in Number of Months in one of two different ways depending on the Threshold  Test. If the Threshold Test is set to Count then the qualification is based on the count of the total number of months per year. If the Threshold Test is set to consecutive then the qualification is based on a consecutive number of months.")]
[JsonProperty(@"Uses the number in Number of Months in one of two different ways depending on the Threshold  Test. If the Threshold Test is set to Count then the qualification is based on the count of the total number of months per year. If the Threshold Test is set to consecutive then the qualification is based on a consecutive number of months.")]
public YesNoDefault ThresholdTest { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Consecutive");
        
[Description(@"A number from 1 to 12. If no value entered 12 is assumed when the qualify type is minimum and 1 when the qualify type is maximum. This is the number of months that the threshold test applies to determine if the rate qualifies or not. If the season is less than 12 months (if it is not annual) then the value is automatically reduced to the number of months of the season.")]
[JsonProperty(@"A number from 1 to 12. If no value entered 12 is assumed when the qualify type is minimum and 1 when the qualify type is maximum. This is the number of months that the threshold test applies to determine if the rate qualifies or not. If the season is less than 12 months (if it is not annual) then the value is automatically reduced to the number of months of the season.")]
public System.Single NumberOfMonths { get; set; } = ;
    }
    
    public enum QualifyTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Maximum")]
        Maximum = 1,
        
        [JsonProperty("Minimum")]
        Minimum = 2,
    }
    
    public enum SeasonType
    {
        
        [JsonProperty("Annual")]
        Annual = 0,
        
        [JsonProperty("Fall")]
        Fall = 1,
        
        [JsonProperty("Spring")]
        Spring = 2,
        
        [JsonProperty("Summer")]
        Summer = 3,
        
        [JsonProperty("Winter")]
        Winter = 4,
    }
    
    public enum ThresholdTestType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Consecutive")]
        Consecutive = 1,
        
        [JsonProperty("Count")]
        Count = 2,
    }
    
    [Description(@"UtilityCost:Charge:Simple is one of the most often used objects for tariff calculation. It is used to compute energy and demand charges that are very simple. It may also be used for taxes, surcharges and any other charges that occur on a utility bill. Multiple UtilityCost:Charge:Simple objects may be defined for a single tariff and they will be added together.")]
    [JsonObject("UtilityCost:Charge:Simple")]
    public class UtilityCost_Charge_Simple
    {
        
[Description(@"Charge Variable Name This is the name associated with the UtilityCost:Charge:Simple object and will appear in the report. In addition the results of the UtilityCost:Charge:Simple calculation are stored in a variable with the same name. That way the results may be used for further calculation. Spaces are not significant in Charge variable names. They are removed during the utility bill calculation process.")]
[JsonProperty(@"Charge Variable Name This is the name associated with the UtilityCost:Charge:Simple object and will appear in the report. In addition the results of the UtilityCost:Charge:Simple calculation are stored in a variable with the same name. That way the results may be used for further calculation. Spaces are not significant in Charge variable names. They are removed during the utility bill calculation process.")]
public System.String UtilityCostChargeSimpleName { get; set; } = "";
        
[Description(@"The name of the UtilityCost:Tariff that is associated with this UtilityCost:Charge:Simple.")]
[JsonProperty(@"The name of the UtilityCost:Tariff that is associated with this UtilityCost:Charge:Simple.")]
public System.String TariffName { get; set; } = "";
        
[Description(@"The name of the source used by the UtilityCost:Charge:Simple. This is usually the name of the variable holding the energy or demand but may also be the name of any variable including the subtotal or basis if other charges are based on those. Typical values include totalEnergy totalDemand EnergyCharges DemandCharges ServiceCharges Basis Adjustments Surcharges Subtotal Taxes and Total. If it is a time-of-use rate then peakEnergy peakDemand shoulderEnergy shoulderDemand offPeakEnergy offPeakDemand midPeakEnergy and midPeakDemand. In addition see the Tariff Report to see other native variables that may be available. Also you can create additional user defined variables to model complex tariffs.")]
[JsonProperty(@"The name of the source used by the UtilityCost:Charge:Simple. This is usually the name of the variable holding the energy or demand but may also be the name of any variable including the subtotal or basis if other charges are based on those. Typical values include totalEnergy totalDemand EnergyCharges DemandCharges ServiceCharges Basis Adjustments Surcharges Subtotal Taxes and Total. If it is a time-of-use rate then peakEnergy peakDemand shoulderEnergy shoulderDemand offPeakEnergy offPeakDemand midPeakEnergy and midPeakDemand. In addition see the Tariff Report to see other native variables that may be available. Also you can create additional user defined variables to model complex tariffs.")]
public System.String SourceVariable { get; set; } = "";
        
[Description(@"If this is set to annual the calculations are performed for the UtilityCost:Charge:Simple for the entire year (all months) otherwise it is calculated only for those months in the season defined.")]
[JsonProperty(@"If this is set to annual the calculations are performed for the UtilityCost:Charge:Simple for the entire year (all months) otherwise it is calculated only for those months in the season defined.")]
public YesNoDefault Season { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"This field shows where the charge should be added. The reason to enter this field appropriately is so that the charge gets reported in a reasonable category. The charge automatically gets added to the variable that is the category.")]
[JsonProperty(@"This field shows where the charge should be added. The reason to enter this field appropriately is so that the charge gets reported in a reasonable category. The charge automatically gets added to the variable that is the category.")]
public YesNoDefault CategoryVariableName { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"This field contains either a single number or the name of a variable. The number is multiplied with all of the energy or demand or other source that is specified in the source field. If a variable is used then the monthly values of the variable are multiplied against the variable specified in the source field. This field makes it easy to include a simple charge without specifying block sizes. This is a good way to include a tax or cost adjustment.")]
[JsonProperty(@"This field contains either a single number or the name of a variable. The number is multiplied with all of the energy or demand or other source that is specified in the source field. If a variable is used then the monthly values of the variable are multiplied against the variable specified in the source field. This field makes it easy to include a simple charge without specifying block sizes. This is a good way to include a tax or cost adjustment.")]
public System.String CostPerUnitValueOrVariableName { get; set; } = "";
    }
    
    public enum SeasonType
    {
        
        [JsonProperty("Annual")]
        Annual = 0,
        
        [JsonProperty("Fall")]
        Fall = 1,
        
        [JsonProperty("Spring")]
        Spring = 2,
        
        [JsonProperty("Summer")]
        Summer = 3,
        
        [JsonProperty("Winter")]
        Winter = 4,
    }
    
    public enum CategoryVariableNameType
    {
        
        [JsonProperty("Adjustment")]
        Adjustment = 0,
        
        [JsonProperty("Basis")]
        Basis = 1,
        
        [JsonProperty("DemandCharges")]
        DemandCharges = 2,
        
        [JsonProperty("EnergyCharges")]
        EnergyCharges = 3,
        
        [JsonProperty("NotIncluded")]
        NotIncluded = 4,
        
        [JsonProperty("ServiceCharges")]
        ServiceCharges = 5,
        
        [JsonProperty("Subtotal")]
        Subtotal = 6,
        
        [JsonProperty("Surcharge")]
        Surcharge = 7,
        
        [JsonProperty("Taxes")]
        Taxes = 8,
        
        [JsonProperty("Total")]
        Total = 9,
    }
    
    [Description("Used to compute energy and demand charges (or any other charges) that are structu" +
        "red in blocks of charges. Multiple UtilityCost:Charge:Block objects may be defin" +
        "ed for a single tariff and they will be added together.")]
    [JsonObject("UtilityCost:Charge:Block")]
    public class UtilityCost_Charge_Block
    {
        
[Description(@"Charge Variable Name This is the name associated with the UtilityCost:Charge:Block object and will appear in the report. In addition the results of the UtilityCost:Charge:Block are stored in a variable with the same name. That way the results may be used for further calculation.")]
[JsonProperty(@"Charge Variable Name This is the name associated with the UtilityCost:Charge:Block object and will appear in the report. In addition the results of the UtilityCost:Charge:Block are stored in a variable with the same name. That way the results may be used for further calculation.")]
public System.String UtilityCostChargeBlockName { get; set; } = "";
        
[Description(@"The name of the UtilityCost:Tariff that is associated with this UtilityCost:Charge:Block.")]
[JsonProperty(@"The name of the UtilityCost:Tariff that is associated with this UtilityCost:Charge:Block.")]
public System.String TariffName { get; set; } = "";
        
[Description(@"The name of the source used by the UtilityCost:Charge:Block. This is usually the name of the variable holding the energy or demand but may also be the name of any variable including the subtotal or basis if other charges are based on those. Typical values include totalEnergy totalDemand EnergyCharges DemandCharges ServiceCharges Basis Adjustments Surcharges Subtotal Taxes and Total. If it is a time-of-use rate then peakEnergy peakDemand shoulderEnergy shoulderDemand offPeakEnergy offPeakDemand midPeakEnergy and midPeakDemand. In addition see the Tariff Report to see other native variables that may be available. Also you can create additional user defined variables to model complex tariffs.")]
[JsonProperty(@"The name of the source used by the UtilityCost:Charge:Block. This is usually the name of the variable holding the energy or demand but may also be the name of any variable including the subtotal or basis if other charges are based on those. Typical values include totalEnergy totalDemand EnergyCharges DemandCharges ServiceCharges Basis Adjustments Surcharges Subtotal Taxes and Total. If it is a time-of-use rate then peakEnergy peakDemand shoulderEnergy shoulderDemand offPeakEnergy offPeakDemand midPeakEnergy and midPeakDemand. In addition see the Tariff Report to see other native variables that may be available. Also you can create additional user defined variables to model complex tariffs.")]
public System.String SourceVariable { get; set; } = "";
        
[Description(@"If this is set to annual the calculations are performed for the UtilityCost:Charge:Block for the entire year (all months) otherwise it is calculated only for those months in the season defined.")]
[JsonProperty(@"If this is set to annual the calculations are performed for the UtilityCost:Charge:Block for the entire year (all months) otherwise it is calculated only for those months in the season defined.")]
public YesNoDefault Season { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Annual");
        
[Description(@"This field shows where the charge should be added. The reason to enter this field appropriately is so that the charge gets reported in a reasonable category. The charge automatically gets added to the variable that is the category.")]
[JsonProperty(@"This field shows where the charge should be added. The reason to enter this field appropriately is so that the charge gets reported in a reasonable category. The charge automatically gets added to the variable that is the category.")]
public YesNoDefault CategoryVariableName { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"If the blocks do not use all of the energy or demand from the source some energy and demand remains then the remaining amount should be assigned to a variable. If no variable is assigned and some amount of energy or demand is not used in the block structure a warning will be issued.")]
[JsonProperty(@"If the blocks do not use all of the energy or demand from the source some energy and demand remains then the remaining amount should be assigned to a variable. If no variable is assigned and some amount of energy or demand is not used in the block structure a warning will be issued.")]
public System.String RemainingIntoVariable { get; set; } = "";
        
[Description(@"The sizes of the blocks are usually used directly but if a value or a variable is entered here the block sizes entered in the rest of the charge are first multiplied by the entered value prior to being used. This is common for rates that are kWh/kW rates and in that case the variable that holds the monthly total electric demand would be entered. If no value is entered a default value of one is assumed so that the block sizes remain exactly as entered. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
[JsonProperty(@"The sizes of the blocks are usually used directly but if a value or a variable is entered here the block sizes entered in the rest of the charge are first multiplied by the entered value prior to being used. This is common for rates that are kWh/kW rates and in that case the variable that holds the monthly total electric demand would be entered. If no value is entered a default value of one is assumed so that the block sizes remain exactly as entered. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
public System.String BlockSizeMultiplierValueOrVariableName { get; set; } = "";
        
[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
public System.String BlockSizeValueOrVariableName { get; set; } = "";
        
[Description(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
[JsonProperty(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
public System.String BlockCostPerUnitValueOrVariableName { get; set; } = "";
        
[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
public System.String BlockSizeValueOrVariableName { get; set; } = "";
        
[Description(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
[JsonProperty(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
public System.String BlockCostPerUnitValueOrVariableName { get; set; } = "";
        
[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
public System.String BlockSizeValueOrVariableName { get; set; } = "";
        
[Description(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
[JsonProperty(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
public System.String BlockCostPerUnitValueOrVariableName { get; set; } = "";
        
[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
public System.String BlockSizeValueOrVariableName { get; set; } = "";
        
[Description(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
[JsonProperty(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
public System.String BlockCostPerUnitValueOrVariableName { get; set; } = "";
        
[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
public System.String BlockSizeValueOrVariableName { get; set; } = "";
        
[Description(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
[JsonProperty(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
public System.String BlockCostPerUnitValueOrVariableName { get; set; } = "";
        
[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
public System.String BlockSizeValueOrVariableName { get; set; } = "";
        
[Description(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
[JsonProperty(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
public System.String BlockCostPerUnitValueOrVariableName { get; set; } = "";
        
[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
public System.String BlockSizeValueOrVariableName { get; set; } = "";
        
[Description(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
[JsonProperty(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
public System.String BlockCostPerUnitValueOrVariableName { get; set; } = "";
        
[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
public System.String BlockSizeValueOrVariableName { get; set; } = "";
        
[Description(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
[JsonProperty(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
public System.String BlockCostPerUnitValueOrVariableName { get; set; } = "";
        
[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
public System.String BlockSizeValueOrVariableName { get; set; } = "";
        
[Description(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
[JsonProperty(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
public System.String BlockCostPerUnitValueOrVariableName { get; set; } = "";
        
[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
public System.String BlockSizeValueOrVariableName { get; set; } = "";
        
[Description(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
[JsonProperty(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
public System.String BlockCostPerUnitValueOrVariableName { get; set; } = "";
        
[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
public System.String BlockSizeValueOrVariableName { get; set; } = "";
        
[Description(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
[JsonProperty(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
public System.String BlockCostPerUnitValueOrVariableName { get; set; } = "";
        
[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
public System.String BlockSizeValueOrVariableName { get; set; } = "";
        
[Description(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
[JsonProperty(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
public System.String BlockCostPerUnitValueOrVariableName { get; set; } = "";
        
[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
public System.String BlockSizeValueOrVariableName { get; set; } = "";
        
[Description(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
[JsonProperty(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
public System.String BlockCostPerUnitValueOrVariableName { get; set; } = "";
        
[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
public System.String BlockSizeValueOrVariableName { get; set; } = "";
        
[Description(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
[JsonProperty(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
public System.String BlockCostPerUnitValueOrVariableName { get; set; } = "";
        
[Description(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
[JsonProperty(@"The size of the block of the charges is entered here. For most rates that use multiple blocks this will be the value for the block size. Using remaining may be used when the remaining amount should be included in that block. This field is unusual because it can be either a number or a name of a variable.")]
public System.String BlockSizeValueOrVariableName { get; set; } = "";
        
[Description(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
[JsonProperty(@"The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number or a name of a variable.")]
public System.String BlockCostPerUnitValueOrVariableName { get; set; } = "";
    }
    
    public enum SeasonType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Annual")]
        Annual = 1,
        
        [JsonProperty("Fall")]
        Fall = 2,
        
        [JsonProperty("Spring")]
        Spring = 3,
        
        [JsonProperty("Summer")]
        Summer = 4,
        
        [JsonProperty("Winter")]
        Winter = 5,
    }
    
    public enum CategoryVariableNameType
    {
        
        [JsonProperty("Adjustment")]
        Adjustment = 0,
        
        [JsonProperty("Basis")]
        Basis = 1,
        
        [JsonProperty("DemandCharges")]
        DemandCharges = 2,
        
        [JsonProperty("EnergyCharges")]
        EnergyCharges = 3,
        
        [JsonProperty("NotIncluded")]
        NotIncluded = 4,
        
        [JsonProperty("ServiceCharges")]
        ServiceCharges = 5,
        
        [JsonProperty("Subtotal")]
        Subtotal = 6,
        
        [JsonProperty("Surcharge")]
        Surcharge = 7,
        
        [JsonProperty("Taxes")]
        Taxes = 8,
        
        [JsonProperty("Total")]
        Total = 9,
    }
    
    [Description(@"Allows the modeling of tariffs that include some type of seasonal ratcheting. Ratchets are most common when used with electric demand charges. A ratchet is when a utility requires that the demand charge for a month with a low demand may be increased to be more consistent with a month that set a higher demand charge.")]
    [JsonObject("UtilityCost:Ratchet")]
    public class UtilityCost_Ratchet
    {
        
[Description(@"The name of the UtilityCost:Tariff that is associated with this UtilityCost:Ratchet.")]
[JsonProperty(@"The name of the UtilityCost:Tariff that is associated with this UtilityCost:Ratchet.")]
public System.String TariffName { get; set; } = "";
        
[Description(@"When the ratcheted value exceeds the baseline value for a month the ratcheted value is used but when the baseline value is greater then the ratcheted value the baseline value is used. Usually the electric demand charge is used. The baseline source variable can be the results of another ratchet object. This allows utility tariffs that have multiple ratchets to be modeled.")]
[JsonProperty(@"When the ratcheted value exceeds the baseline value for a month the ratcheted value is used but when the baseline value is greater then the ratcheted value the baseline value is used. Usually the electric demand charge is used. The baseline source variable can be the results of another ratchet object. This allows utility tariffs that have multiple ratchets to be modeled.")]
public System.String BaselineSourceVariable { get; set; } = "";
        
[Description(@"The variable that the ratchet is calculated from. It is often but not always the same as the baseline source variable. The ratcheting calculations using offset and multiplier are using the values from the adjustment source variable. If left blank the adjustment source variable is the same as the baseline source variable.")]
[JsonProperty(@"The variable that the ratchet is calculated from. It is often but not always the same as the baseline source variable. The ratcheting calculations using offset and multiplier are using the values from the adjustment source variable. If left blank the adjustment source variable is the same as the baseline source variable.")]
public System.String AdjustmentSourceVariable { get; set; } = "";
        
[Description(@"The name of the season that is being examined. The maximum value for all of the months in the named season is what is used with the multiplier and offset. This is most commonly Summer or Annual. When Monthly is used the adjustment source variable is used directly for all months.")]
[JsonProperty(@"The name of the season that is being examined. The maximum value for all of the months in the named season is what is used with the multiplier and offset. This is most commonly Summer or Annual. When Monthly is used the adjustment source variable is used directly for all months.")]
public YesNoDefault SeasonFrom { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"The name of the season when the ratchet would be calculated. This is most commonly Winter. The ratchet only is applied to the months in the named season. The resulting variable for months not in the Season To selection will contain the values as appear in the baseline source variable.")]
[JsonProperty(@"The name of the season when the ratchet would be calculated. This is most commonly Winter. The ratchet only is applied to the months in the named season. The resulting variable for months not in the Season To selection will contain the values as appear in the baseline source variable.")]
public YesNoDefault SeasonTo { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Often the ratchet has a clause such as "the current month demand or 90% of the summer month demand". For this case a value of 0.9 would be entered here as the multiplier. This value may be left blank if no multiplier is needed and a value of one will be used as a default.")]
[JsonProperty(@"Often the ratchet has a clause such as "the current month demand or 90% of the summer month demand". For this case a value of 0.9 would be entered here as the multiplier. This value may be left blank if no multiplier is needed and a value of one will be used as a default.")]
public System.String MultiplierValueOrVariableName { get; set; } = "";
        
[Description(@"A less common strategy is to say that the ratchet must be all demand greater than a value in this case an offset that is added to the demand may be entered here. If entered it is common for the offset value to be negative representing that the demand be reduced. If no value is entered it is assumed to be zero and not affect the ratchet.")]
[JsonProperty(@"A less common strategy is to say that the ratchet must be all demand greater than a value in this case an offset that is added to the demand may be entered here. If entered it is common for the offset value to be negative representing that the demand be reduced. If no value is entered it is assumed to be zero and not affect the ratchet.")]
public System.String OffsetValueOrVariableName { get; set; } = "";
    }
    
    public enum SeasonFromType
    {
        
        [JsonProperty("Annual")]
        Annual = 0,
        
        [JsonProperty("Fall")]
        Fall = 1,
        
        [JsonProperty("Monthly")]
        Monthly = 2,
        
        [JsonProperty("Spring")]
        Spring = 3,
        
        [JsonProperty("Summer")]
        Summer = 4,
        
        [JsonProperty("Winter")]
        Winter = 5,
    }
    
    public enum SeasonToType
    {
        
        [JsonProperty("Annual")]
        Annual = 0,
        
        [JsonProperty("Fall")]
        Fall = 1,
        
        [JsonProperty("Spring")]
        Spring = 2,
        
        [JsonProperty("Summer")]
        Summer = 3,
        
        [JsonProperty("Winter")]
        Winter = 4,
    }
    
    [Description("Allows for the direct entry of monthly values into a utility tariff variable.")]
    [JsonObject("UtilityCost:Variable")]
    public class UtilityCost_Variable
    {
        
[Description(@"The name of the UtilityCost:Tariff that is associated with this UtilityCost:Variable.")]
[JsonProperty(@"The name of the UtilityCost:Tariff that is associated with this UtilityCost:Variable.")]
public System.String TariffName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault VariableType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public System.Single JanuaryValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FebruaryValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MarchValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single AprilValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MayValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single JuneValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single JulyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single AugustValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SeptemberValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single OctoberValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NovemberValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DecemberValue { get; set; } = ;
    }
    
    public enum VariableTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Currency")]
        Currency = 1,
        
        [JsonProperty("Demand")]
        Demand = 2,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 3,
        
        [JsonProperty("Energy")]
        Energy = 4,
    }
    
    [Description(@"The object lists a series of computations that are used to perform the utility bill calculation. The object is only used for complex tariffs that cannot be modeled any other way. For most utility tariffs, UtilityCost:Computation is unnecessary and should be avoided. If UtilityCost:Computation is used, it must contain references to all objects involved in the rate in the order that they should be computed.")]
    [JsonObject("UtilityCost:Computation")]
    public class UtilityCost_Computation
    {
        
[Description(@"The name of the UtilityCost:Tariff that is associated with this UtilityCost:Variable.")]
[JsonProperty(@"The name of the UtilityCost:Tariff that is associated with this UtilityCost:Variable.")]
public System.String TariffName { get; set; } = "";
        
[Description(@"Contain a simple language that describes the steps used in the computation process similar to a programming language.")]
[JsonProperty(@"Contain a simple language that describes the steps used in the computation process similar to a programming language.")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComputeStep { get; set; } = "";
    }
    
    [Description(@"Provides inputs related to the overall life-cycle analysis. It establishes many of the assumptions used in computing the present value. It is important that when comparing the results of multiple simulations that the fields in the LifeCycleCost:Parameters objects are the same for all the simulations. When this object is present the tabular report file will contain the Life-Cycle Cost Report.")]
    [JsonObject("LifeCycleCost:Parameters")]
    public class LifeCycleCost_Parameters
    {
        
[Description(@"The field specifies if the discounting of future costs should be computed as occurring at the end of each year or the middle of each year or the beginning of each year. The most common discounting convention uses the end of each year.")]
[JsonProperty(@"The field specifies if the discounting of future costs should be computed as occurring at the end of each year or the middle of each year or the beginning of each year. The most common discounting convention uses the end of each year.")]
public YesNoDefault DiscountingConvention { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "EndOfYear");
        
[Description(@"This field is used to determine if the analysis should use constant dollars or current dollars which is related to how inflation is treated. If ConstantDollar is selected then the Real Discount Rate input is used and it excludes the rate of inflation. If CurrentDollar is selected then the Nominal Discount Rate input is used and it includes the rate of inflation.")]
[JsonProperty(@"This field is used to determine if the analysis should use constant dollars or current dollars which is related to how inflation is treated. If ConstantDollar is selected then the Real Discount Rate input is used and it excludes the rate of inflation. If CurrentDollar is selected then the Nominal Discount Rate input is used and it includes the rate of inflation.")]
public YesNoDefault InflationApproach { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ConstantDollar");
        
[Description(@"Enter the real discount rate as a decimal. For a 3% rate enter the value 0.03. This input is used when the Inflation Approach is ConstantDollar. The real discount rate reflects the interest rates needed to make current and future expenditures have comparable equivalent values when general inflation is ignored. When Inflation Approach is set to CurrentDollar this input is ignored.")]
[JsonProperty(@"Enter the real discount rate as a decimal. For a 3% rate enter the value 0.03. This input is used when the Inflation Approach is ConstantDollar. The real discount rate reflects the interest rates needed to make current and future expenditures have comparable equivalent values when general inflation is ignored. When Inflation Approach is set to CurrentDollar this input is ignored.")]
public System.Single RealDiscountRate { get; set; } = ;
        
[Description(@"Enter the nominal discount rate as a decimal. For a 5% rate enter the value 0.05. This input is used when the Inflation Approach is CurrentDollar. The real discount rate reflects the interest rates needed to make current and future expenditures have comparable equivalent values when general inflation is included. When Inflation Approach is set to ConstantDollar this input is ignored.")]
[JsonProperty(@"Enter the nominal discount rate as a decimal. For a 5% rate enter the value 0.05. This input is used when the Inflation Approach is CurrentDollar. The real discount rate reflects the interest rates needed to make current and future expenditures have comparable equivalent values when general inflation is included. When Inflation Approach is set to ConstantDollar this input is ignored.")]
public System.Single NominalDiscountRate { get; set; } = ;
        
[Description(@"Enter the rate of inflation for general goods and services as a decimal. For a 2% rate enter the value 0.02.")]
[JsonProperty(@"Enter the rate of inflation for general goods and services as a decimal. For a 2% rate enter the value 0.02.")]
public System.Single Inflation { get; set; } = ;
        
[Description(@"Enter the month that is the beginning of study period also known as the beginning of the base period.")]
[JsonProperty(@"Enter the month that is the beginning of study period also known as the beginning of the base period.")]
public YesNoDefault BaseDateMonth { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "January");
        
[Description(@"Enter the four digit year that is the beginning of study period such as 2010. The study period is also known as the base period.")]
[JsonProperty(@"Enter the four digit year that is the beginning of study period such as 2010. The study period is also known as the base period.")]
public System.Single BaseDateYear { get; set; } = ;
        
[Description(@"Enter the month that is the beginning of building occupancy. Energy costs computed by EnergyPlus are assumed to occur during the year following the service date. The service date must be the same or later than the Base Date. This field could also be referred to as part of beneficial occupancy date.")]
[JsonProperty(@"Enter the month that is the beginning of building occupancy. Energy costs computed by EnergyPlus are assumed to occur during the year following the service date. The service date must be the same or later than the Base Date. This field could also be referred to as part of beneficial occupancy date.")]
public YesNoDefault ServiceDateMonth { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "January");
        
[Description(@"Enter the four digit year that is the beginning of occupancy such as 2010.")]
[JsonProperty(@"Enter the four digit year that is the beginning of occupancy such as 2010.")]
public System.Single ServiceDateYear { get; set; } = ;
        
[Description(@"Enter the number of years of the study period. It is the number of years that the study continues based on the start at the base date. The default value is 25 years. Only integers may be used indicating whole years.")]
[JsonProperty(@"Enter the number of years of the study period. It is the number of years that the study continues based on the start at the base date. The default value is 25 years. Only integers may be used indicating whole years.")]
public System.Single LengthOfStudyPeriodInYears { get; set; } = ;
        
[Description(@"Enter the overall marginal tax rate for the project costs. This does not include energy or water taxes. The tax rate entered should be based on the marginal tax rate for the entity and not the average tax rate. Enter the tax rate results in present value calculations after taxes. Most analyses do not factor in the impact of taxes and assume that all options under consideration have roughly the same tax impact. Due to this many times the tax rate can be left to default to zero and the present value results before taxes are used to make decisions. The value should be entered as a decimal value. For 15% enter 0.15. For an analysis that does not include tax impacts enter 0.0.")]
[JsonProperty(@"Enter the overall marginal tax rate for the project costs. This does not include energy or water taxes. The tax rate entered should be based on the marginal tax rate for the entity and not the average tax rate. Enter the tax rate results in present value calculations after taxes. Most analyses do not factor in the impact of taxes and assume that all options under consideration have roughly the same tax impact. Due to this many times the tax rate can be left to default to zero and the present value results before taxes are used to make decisions. The value should be entered as a decimal value. For 15% enter 0.15. For an analysis that does not include tax impacts enter 0.0.")]
public System.Single TaxRate { get; set; } = ;
        
[Description(@"For an analysis that includes income tax impacts this entry describes how capital costs are depreciated. Only one depreciation method may be used for an analysis and is applied to all capital expenditures.")]
[JsonProperty(@"For an analysis that includes income tax impacts this entry describes how capital costs are depreciated. Only one depreciation method may be used for an analysis and is applied to all capital expenditures.")]
public YesNoDefault DepreciationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
    }
    
    public enum DiscountingConventionType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BeginningOfYear")]
        BeginningOfYear = 1,
        
        [JsonProperty("EndOfYear")]
        EndOfYear = 2,
        
        [JsonProperty("MidYear")]
        MidYear = 3,
    }
    
    public enum InflationApproachType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantDollar")]
        ConstantDollar = 1,
        
        [JsonProperty("CurrentDollar")]
        CurrentDollar = 2,
    }
    
    public enum BaseDateMonthType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("April")]
        April = 1,
        
        [JsonProperty("August")]
        August = 2,
        
        [JsonProperty("December")]
        December = 3,
        
        [JsonProperty("February")]
        February = 4,
        
        [JsonProperty("January")]
        January = 5,
        
        [JsonProperty("July")]
        July = 6,
        
        [JsonProperty("June")]
        June = 7,
        
        [JsonProperty("March")]
        March = 8,
        
        [JsonProperty("May")]
        May = 9,
        
        [JsonProperty("November")]
        November = 10,
        
        [JsonProperty("October")]
        October = 11,
        
        [JsonProperty("September")]
        September = 12,
    }
    
    public enum ServiceDateMonthType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("April")]
        April = 1,
        
        [JsonProperty("August")]
        August = 2,
        
        [JsonProperty("December")]
        December = 3,
        
        [JsonProperty("February")]
        February = 4,
        
        [JsonProperty("January")]
        January = 5,
        
        [JsonProperty("July")]
        July = 6,
        
        [JsonProperty("June")]
        June = 7,
        
        [JsonProperty("March")]
        March = 8,
        
        [JsonProperty("May")]
        May = 9,
        
        [JsonProperty("November")]
        November = 10,
        
        [JsonProperty("October")]
        October = 11,
        
        [JsonProperty("September")]
        September = 12,
    }
    
    public enum DepreciationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ModifiedAcceleratedCostRecoverySystem-10year")]
        ModifiedAcceleratedCostRecoverySystemyear = 1,
        
        [JsonProperty("ModifiedAcceleratedCostRecoverySystem-15year")]
        ModifiedAcceleratedCostRecoverySystemyear = 2,
        
        [JsonProperty("ModifiedAcceleratedCostRecoverySystem-20year")]
        ModifiedAcceleratedCostRecoverySystemyear = 3,
        
        [JsonProperty("ModifiedAcceleratedCostRecoverySystem-3year")]
        ModifiedAcceleratedCostRecoverySystemyear = 4,
        
        [JsonProperty("ModifiedAcceleratedCostRecoverySystem-5year")]
        ModifiedAcceleratedCostRecoverySystemyear = 5,
        
        [JsonProperty("ModifiedAcceleratedCostRecoverySystem-7year")]
        ModifiedAcceleratedCostRecoverySystemyear = 6,
        
        [JsonProperty("None")]
        None = 7,
        
        [JsonProperty("StraightLine-27year")]
        StraightLineyear = 8,
        
        [JsonProperty("StraightLine-31year")]
        StraightLineyear = 9,
        
        [JsonProperty("StraightLine-39year")]
        StraightLineyear = 10,
        
        [JsonProperty("StraightLine-40year")]
        StraightLineyear = 11,
    }
    
    [Description("Recurring costs are costs that repeat over time on a regular schedule during the " +
        "study period. If costs associated with equipment do repeat but not on a regular " +
        "schedule, use LifeCycleCost:NonrecurringCost objects instead.")]
    [JsonObject("LifeCycleCost:RecurringCosts")]
    public class LifeCycleCost_RecurringCosts
    {
        
[JsonProperty(@"")]
public YesNoDefault Category { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Maintenance");
        
[Description(@"Enter the cost in dollars (or the appropriate monetary unit) for the recurring costs. Enter the cost for each time it occurs. For example if the annual maintenance cost is 500 dollars enter 500 here.")]
[JsonProperty(@"Enter the cost in dollars (or the appropriate monetary unit) for the recurring costs. Enter the cost for each time it occurs. For example if the annual maintenance cost is 500 dollars enter 500 here.")]
public System.Single Cost { get; set; } = ;
        
[Description(@"Enter when the costs start. The First Year of Cost is based on the number of years past the Start of Costs. For most maintenance costs the Start of Costs should be Service Period.")]
[JsonProperty(@"Enter when the costs start. The First Year of Cost is based on the number of years past the Start of Costs. For most maintenance costs the Start of Costs should be Service Period.")]
public YesNoDefault StartOfCosts { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ServicePeriod");
        
[Description(@"This field and the Months From Start field together represent the time from either the start of the Service Period on the service month and year or start of the Base Period on the base month and year (depending on the Start of Costs field) that the costs start to occur. Only integers should be entered representing whole years.")]
[JsonProperty(@"This field and the Months From Start field together represent the time from either the start of the Service Period on the service month and year or start of the Base Period on the base month and year (depending on the Start of Costs field) that the costs start to occur. Only integers should be entered representing whole years.")]
public System.Single YearsFromStart { get; set; } = ;
        
[Description(@"This field and the Years From Start field together represent the time from either the start of the Service Period on the service month and year or start of the Base Period on the base month and year (depending on the Start of Costs field) that the costs start to occur. Only integers should be entered representing whole months. The Years From Start (times 12) and Months From Start are added together.")]
[JsonProperty(@"This field and the Years From Start field together represent the time from either the start of the Service Period on the service month and year or start of the Base Period on the base month and year (depending on the Start of Costs field) that the costs start to occur. Only integers should be entered representing whole months. The Years From Start (times 12) and Months From Start are added together.")]
public System.Single MonthsFromStart { get; set; } = ;
        
[Description(@"This field and the Repeat Period Months field indicate how much time elapses between re-occurrences of the cost. For costs that occur every year such the Repeat Period Years should be 1 and Repeat Period Months should be 0. Only integers should be entered representing whole years.")]
[JsonProperty(@"This field and the Repeat Period Months field indicate how much time elapses between re-occurrences of the cost. For costs that occur every year such the Repeat Period Years should be 1 and Repeat Period Months should be 0. Only integers should be entered representing whole years.")]
public System.Single RepeatPeriodYears { get; set; } = 1;
        
[Description(@"This field and the Repeat Period Years field indicate how much time elapses between re-occurrences of the cost. Only integers should be entered representing whole years. The Repeat Period Years (times 12) and Repeat Period Months are added together.")]
[JsonProperty(@"This field and the Repeat Period Years field indicate how much time elapses between re-occurrences of the cost. Only integers should be entered representing whole years. The Repeat Period Years (times 12) and Repeat Period Months are added together.")]
public System.Single RepeatPeriodMonths { get; set; } = 0;
        
[Description(@"Enter the annual escalation rate as a decimal. For a 1% rate enter the value 0.01. This input is used when the Inflation Approach is CurrentDollar. When Inflation Approach is set to ConstantDollar this input is ignored.")]
[JsonProperty(@"Enter the annual escalation rate as a decimal. For a 1% rate enter the value 0.01. This input is used when the Inflation Approach is CurrentDollar. When Inflation Approach is set to ConstantDollar this input is ignored.")]
public System.Single AnnualEscalationRate { get; set; } = ;
    }
    
    public enum CategoryType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Maintenance")]
        Maintenance = 1,
        
        [JsonProperty("MajorOverhaul")]
        MajorOverhaul = 2,
        
        [JsonProperty("MinorOverhaul")]
        MinorOverhaul = 3,
        
        [JsonProperty("Operation")]
        Operation = 4,
        
        [JsonProperty("OtherOperational")]
        OtherOperational = 5,
        
        [JsonProperty("Repair")]
        Repair = 6,
        
        [JsonProperty("Replacement")]
        Replacement = 7,
    }
    
    public enum StartOfCostsType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BasePeriod")]
        BasePeriod = 1,
        
        [JsonProperty("ServicePeriod")]
        ServicePeriod = 2,
    }
    
    [Description("A non-recurring cost happens only once during the study period. For costs that oc" +
        "cur more than once during the study period on a regular schedule, use the LifeCy" +
        "cleCost:RecurringCost object.")]
    [JsonObject("LifeCycleCost:NonrecurringCost")]
    public class LifeCycleCost_NonrecurringCost
    {
        
[JsonProperty(@"")]
public YesNoDefault Category { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Construction");
        
[Description(@"Enter the non-recurring cost value. For construction and other capital costs the value entered is typically a positive value. For salvage costs the value entered is typically a negative value which represents the money paid to the investor for the equipment at the end of the study period.")]
[JsonProperty(@"Enter the non-recurring cost value. For construction and other capital costs the value entered is typically a positive value. For salvage costs the value entered is typically a negative value which represents the money paid to the investor for the equipment at the end of the study period.")]
public System.Single Cost { get; set; } = ;
        
[Description(@"Enter when the costs start. The First Year of Cost is based on the number of years past the Start of Costs. For most non-recurring costs the Start of Costs should be Base Period which begins at the base month and year.")]
[JsonProperty(@"Enter when the costs start. The First Year of Cost is based on the number of years past the Start of Costs. For most non-recurring costs the Start of Costs should be Base Period which begins at the base month and year.")]
public YesNoDefault StartOfCosts { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ServicePeriod");
        
[Description(@"This field and the Months From Start field together represent the time from either the start of the Service Period on the service month and year or start of the Base Period on the base month and year (depending on the Start of Cost field) that the costs start to occur. Only integers should be entered representing whole years.")]
[JsonProperty(@"This field and the Months From Start field together represent the time from either the start of the Service Period on the service month and year or start of the Base Period on the base month and year (depending on the Start of Cost field) that the costs start to occur. Only integers should be entered representing whole years.")]
public System.Single YearsFromStart { get; set; } = ;
        
[Description(@"This field and the Years From Start field together represent the time from either the start of the Service Period on the service month and year or start of the Base Period on the base month and year (depending on the Start of Cost field) that the costs start to occur. Only integers should be entered representing whole months. The Years From Start (times 12) and Months From Start are added together.")]
[JsonProperty(@"This field and the Years From Start field together represent the time from either the start of the Service Period on the service month and year or start of the Base Period on the base month and year (depending on the Start of Cost field) that the costs start to occur. Only integers should be entered representing whole months. The Years From Start (times 12) and Months From Start are added together.")]
public System.Single MonthsFromStart { get; set; } = ;
    }
    
    public enum CategoryType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Construction")]
        Construction = 1,
        
        [JsonProperty("OtherCapital")]
        OtherCapital = 2,
        
        [JsonProperty("Salvage")]
        Salvage = 3,
    }
    
    public enum StartOfCostsType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BasePeriod")]
        BasePeriod = 1,
        
        [JsonProperty("ServicePeriod")]
        ServicePeriod = 2,
    }
    
    [Description("Life cycle cost escalation factors. The values for this object may be found in th" +
        "e annual supplement to NIST Handbook 135 in Tables Ca-1 to Ca-5 and are included" +
        " in an EnergyPlus dataset file.")]
    [JsonObject("LifeCycleCost:UsePriceEscalation")]
    public class LifeCycleCost_UsePriceEscalation
    {
        
[Description(@"The identifier used for the object. The name usually identifies the location (such as the state or region or country or census area) that the escalations apply to. In addition the name should identify the building class such as residential or commercial or industrial and the use type such as electricity or natural gas or water.")]
[JsonProperty(@"The identifier used for the object. The name usually identifies the location (such as the state or region or country or census area) that the escalations apply to. In addition the name should identify the building class such as residential or commercial or industrial and the use type such as electricity or natural gas or water.")]
public System.String LccPriceEscalationName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault Resource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"This field and the Escalation Start Month define the time that corresponds to Year 1 Escalation such as 2010 when the escalation rates are applied. This field and the Escalation Start Month define the time that escalation begins.")]
[JsonProperty(@"This field and the Escalation Start Month define the time that corresponds to Year 1 Escalation such as 2010 when the escalation rates are applied. This field and the Escalation Start Month define the time that escalation begins.")]
public System.Single EscalationStartYear { get; set; } = ;
        
[Description(@"This field and the Escalation Start Year define the time that corresponds to Year 1 Escalation such as 2010 when the escalation rates are applied. This field and the Escalation Start Year define the time that escalation begins.")]
[JsonProperty(@"This field and the Escalation Start Year define the time that corresponds to Year 1 Escalation such as 2010 when the escalation rates are applied. This field and the Escalation Start Year define the time that escalation begins.")]
public YesNoDefault EscalationStartMonth { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "January");
        
[JsonProperty(@"")]
public System.String Escalations { get; set; } = "";
    }
    
    public enum ResourceType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("Electricity")]
        Electricity = 2,
        
        [JsonProperty("ElectricityNet")]
        ElectricityNet = 3,
        
        [JsonProperty("ElectricityProduced")]
        ElectricityProduced = 4,
        
        [JsonProperty("ElectricityPurchased")]
        ElectricityPurchased = 5,
        
        [JsonProperty("ElectricitySurplusSold")]
        ElectricitySurplusSold = 6,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 7,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 8,
        
        [JsonProperty("Gasoline")]
        Gasoline = 9,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 10,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 11,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 12,
        
        [JsonProperty("Propane")]
        Propane = 13,
        
        [JsonProperty("Steam")]
        Steam = 14,
        
        [JsonProperty("Water")]
        Water = 15,
    }
    
    public enum EscalationStartMonthType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("April")]
        April = 1,
        
        [JsonProperty("August")]
        August = 2,
        
        [JsonProperty("December")]
        December = 3,
        
        [JsonProperty("February")]
        February = 4,
        
        [JsonProperty("January")]
        January = 5,
        
        [JsonProperty("July")]
        July = 6,
        
        [JsonProperty("June")]
        June = 7,
        
        [JsonProperty("March")]
        March = 8,
        
        [JsonProperty("May")]
        May = 9,
        
        [JsonProperty("November")]
        November = 10,
        
        [JsonProperty("October")]
        October = 11,
        
        [JsonProperty("September")]
        September = 12,
    }
    
    [Description(@"Used by advanced users to adjust the energy or water use costs for future years. This should not be used for compensating for inflation but should only be used to increase the costs of energy or water based on assumed changes to the actual usage, such as anticipated changes in the future function of the building. The adjustments begin at the start of the service period.")]
    [JsonObject("LifeCycleCost:UseAdjustment")]
    public class LifeCycleCost_UseAdjustment
    {
        
[JsonProperty(@"")]
public YesNoDefault Resource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String Multipliers { get; set; } = "";
    }
    
    public enum ResourceType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("Electricity")]
        Electricity = 2,
        
        [JsonProperty("ElectricityNet")]
        ElectricityNet = 3,
        
        [JsonProperty("ElectricityProduced")]
        ElectricityProduced = 4,
        
        [JsonProperty("ElectricityPurchased")]
        ElectricityPurchased = 5,
        
        [JsonProperty("ElectricitySurplusSold")]
        ElectricitySurplusSold = 6,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 7,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 8,
        
        [JsonProperty("Gasoline")]
        Gasoline = 9,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 10,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 11,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 12,
        
        [JsonProperty("Propane")]
        Propane = 13,
        
        [JsonProperty("Steam")]
        Steam = 14,
        
        [JsonProperty("Water")]
        Water = 15,
    }
}
namespace EnergyPlus.ElectricLoadCenterGeneratorSpecifications
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("This generator model is the empirical model from the Building Loads and System Th" +
        "ermodynamics (BLAST) program. Engine performance curves are generated by fitting" +
        " catalog data to second order polynomial equations. Three sets of coefficients a" +
        "re required.")]
    [JsonObject("Generator:InternalCombustionEngine")]
    public class Generator_InternalCombustionEngine
    {
        
[JsonProperty(@"")]
public System.Single RatedPowerOutput { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ElectricCircuitNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single OptimumPartLoadRatio { get; set; } = ;
        
[Description(@"curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty(@"curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
public System.String ShaftPowerCurveName { get; set; } = "";
        
[Description(@"curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty(@"curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
public System.String JacketHeatRecoveryCurveName { get; set; } = "";
        
[Description(@"curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty(@"curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
public System.String LubeHeatRecoveryCurveName { get; set; } = "";
        
[Description(@"curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty(@"curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
public System.String TotalExhaustEnergyCurveName { get; set; } = "";
        
[Description(@"curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty(@"curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
public System.String ExhaustTemperatureCurveName { get; set; } = "";
        
[Description(@"curve = C1 * Generator Rated Power Output**C2")]
[JsonProperty(@"curve = C1 * Generator Rated Power Output**C2")]
public System.Single CoefficientOfUFactorTimesAreaCurve { get; set; } = ;
        
[Description(@"curve = C1 * Generator Rated Power Output**C2 typical value .9")]
[JsonProperty(@"curve = C1 * Generator Rated Power Output**C2 typical value .9")]
public System.Single CoefficientOfUFactorTimesAreaCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumExhaustFlowPerUnitOfPowerOutput { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DesignMinimumExhaustTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FuelHigherHeatingValue { get; set; } = ;
        
[Description(@"if non-zero, then inlet, outlet nodes must be entered.")]
[JsonProperty(@"if non-zero, then inlet, outlet nodes must be entered.")]
public System.Single DesignHeatRecoveryWaterFlowRate { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String HeatRecoveryInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatRecoveryOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Diesel");
        
[JsonProperty(@"")]
public System.Single HeatRecoveryMaximumTemperature { get; set; } = 80;
    }
    
    public enum FuelTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 2,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 3,
        
        [JsonProperty("Gasoline")]
        Gasoline = 4,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 5,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 6,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 7,
        
        [JsonProperty("Propane")]
        Propane = 8,
    }
    
    [Description(@"This generator model is the empirical model from the Building Loads and System Thermodynamics (BLAST) program. Generator performance curves are generated by fitting catalog data to second order polynomial equations. Three sets of coefficients are required.")]
    [JsonObject("Generator:CombustionTurbine")]
    public class Generator_CombustionTurbine
    {
        
[JsonProperty(@"")]
public System.Single RatedPowerOutput { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ElectricCircuitNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single OptimumPartLoadRatio { get; set; } = ;
        
[Description(@"curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output this curve is multiplied to the Temperature Based Fuel Input Curve to determine Fuel Energy In")]
[JsonProperty(@"curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output this curve is multiplied to the Temperature Based Fuel Input Curve to determine Fuel Energy In")]
public System.String PartLoadBasedFuelInputCurveName { get; set; } = "";
        
[Description(@"curve = a + b*AT + c*AT**2 AT = Ambient Delta T this curve is multiplied to the Part Load Based Fuel Input Curve to determine Fuel Energy In")]
[JsonProperty(@"curve = a + b*AT + c*AT**2 AT = Ambient Delta T this curve is multiplied to the Part Load Based Fuel Input Curve to determine Fuel Energy In")]
public System.String TemperatureBasedFuelInputCurveName { get; set; } = "";
        
[Description(@"curve = a + b*AT + c*AT**2 AT = Ambient Delta T")]
[JsonProperty(@"curve = a + b*AT + c*AT**2 AT = Ambient Delta T")]
public System.String ExhaustFlowCurveName { get; set; } = "";
        
[Description(@"curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output this curve is multiplied to the Temperature Based Exhaust Temperature Curve to determine Exhaust Temperature")]
[JsonProperty(@"curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output this curve is multiplied to the Temperature Based Exhaust Temperature Curve to determine Exhaust Temperature")]
public System.String PartLoadBasedExhaustTemperatureCurveName { get; set; } = "";
        
[Description(@"curve = a + b*AT + c*AT**2 AT = Ambient Delta T this curve is multiplied to the Part Load Based Exhaust Temperature Curve to determine Exhaust Temperature")]
[JsonProperty(@"curve = a + b*AT + c*AT**2 AT = Ambient Delta T this curve is multiplied to the Part Load Based Exhaust Temperature Curve to determine Exhaust Temperature")]
public System.String TemperatureBasedExhaustTemperatureCurveName { get; set; } = "";
        
[Description(@"curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty(@"curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
public System.String HeatRecoveryLubeEnergyCurveName { get; set; } = "";
        
[Description(@"curve = C1 * Rated Power Output**C2")]
[JsonProperty(@"curve = C1 * Rated Power Output**C2")]
public System.Single CoefficientOfUFactorTimesAreaCurve { get; set; } = ;
        
[Description(@"curve = C1 * Rated Power Output**C2 typical value .9")]
[JsonProperty(@"curve = C1 * Rated Power Output**C2 typical value .9")]
public System.Single CoefficientOfUFactorTimesAreaCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumExhaustFlowPerUnitOfPowerOutput { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DesignMinimumExhaustTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DesignAirInletTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FuelHigherHeatingValue { get; set; } = ;
        
[Description(@"if non-zero, then inlet, outlet nodes must be entered.")]
[JsonProperty(@"if non-zero, then inlet, outlet nodes must be entered.")]
public System.Single DesignHeatRecoveryWaterFlowRate { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String HeatRecoveryInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatRecoveryOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NaturalGas");
        
[JsonProperty(@"")]
public System.Single HeatRecoveryMaximumTemperature { get; set; } = 80;
        
[Description(@"Enter the name of an outdoor air node")]
[JsonProperty(@"Enter the name of an outdoor air node")]
public System.String OutdoorAirInletNodeName { get; set; } = "";
    }
    
    public enum FuelTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Coal")]
        Coal = 1,
        
        [JsonProperty("Diesel")]
        Diesel = 2,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 3,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 4,
        
        [JsonProperty("Gasoline")]
        Gasoline = 5,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 6,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 7,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 8,
        
        [JsonProperty("Propane")]
        Propane = 9,
    }
    
    [Description("MicroTurbine generators are small combustion turbines (e.g., 25kW to 500kW). The " +
        "model calculates electrical power output, fuel use, standby and ancillary power." +
        " Energy recovery from exhaust air can be used to heat water.")]
    [JsonObject("Generator:MicroTurbine")]
    public class Generator_MicroTurbine
    {
        
[JsonProperty(@"")]
public System.Single ReferenceElectricalPowerOutput { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumFullLoadElectricalPowerOutput { get; set; } = 0;
        
[Description(@"If left blank, Maximum Full Load Electrical Power Output will be set equal to the Reference Electrical Power Output.")]
[JsonProperty(@"If left blank, Maximum Full Load Electrical Power Output will be set equal to the Reference Electrical Power Output.")]
public System.Single MaximumFullLoadElectricalPowerOutput { get; set; } = ;
        
[Description(@"Electric power output divided by fuel energy input (LHV basis) at reference conditions.")]
[JsonProperty(@"Electric power output divided by fuel energy input (LHV basis) at reference conditions.")]
public System.Single ReferenceElectricalEfficiencyUsingLowerHeatingValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ReferenceCombustionAirInletTemperature { get; set; } = 15;
        
[JsonProperty(@"")]
public System.Single ReferenceCombustionAirInletHumidityRatio { get; set; } = 0.00638;
        
[JsonProperty(@"")]
public System.Single ReferenceElevation { get; set; } = 0;
        
[Description(@"curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev T = combustion air inlet temperature (C) Elev = elevation (m)")]
[JsonProperty(@"curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev T = combustion air inlet temperature (C) Elev = elevation (m)")]
public System.String ElectricalPowerFunctionOfTemperatureAndElevationCurveName { get; set; } = "";
        
[Description(@"Quadratic curve = a + b*T + c*T**2 Cubic curve = a + b*T + c*T**2 + d*T**3 T = combustion air inlet temperature (C)")]
[JsonProperty(@"Quadratic curve = a + b*T + c*T**2 Cubic curve = a + b*T + c*T**2 + d*T**3 T = combustion air inlet temperature (C)")]
public System.String ElectricalEfficiencyFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Quadratic curve = a + b*PLR + c*PLR**2 Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = ratio of Generator Load to steady state Electrical Power Output at current operating conditions")]
[JsonProperty(@"Quadratic curve = a + b*PLR + c*PLR**2 Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = ratio of Generator Load to steady state Electrical Power Output at current operating conditions")]
public System.String ElectricalEfficiencyFunctionOfPartLoadRatioCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NaturalGas");
        
[JsonProperty(@"")]
public System.Single FuelHigherHeatingValue { get; set; } = 50000;
        
[JsonProperty(@"")]
public System.Single FuelLowerHeatingValue { get; set; } = 45450;
        
[Description(@"Electric power consumed when the generator is available but not being called by the Electric Load Center.")]
[JsonProperty(@"Electric power consumed when the generator is available but not being called by the Electric Load Center.")]
public System.Single StandbyPower { get; set; } = 0;
        
[Description(@"Electric power consumed by ancillary equipment (e.g., external fuel pressurization pump). Set to zero if Reference Electrical Power Output is the 'net' value (ancillary power already deducted). Input value is positive, but indicates negative electric generation.")]
[JsonProperty(@"Electric power consumed by ancillary equipment (e.g., external fuel pressurization pump). Set to zero if Reference Electrical Power Output is the 'net' value (ancillary power already deducted). Input value is positive, but indicates negative electric generation.")]
public System.Single AncillaryPower { get; set; } = 0;
        
[Description(@"Quadratic curve = a + b*mdot + c*mdot**2 mdot = fuel mass flow rate (kg/s) If left blank, model assumes ancillary power defined in previous field is constant whenever the generator is operating.")]
[JsonProperty(@"Quadratic curve = a + b*mdot + c*mdot**2 mdot = fuel mass flow rate (kg/s) If left blank, model assumes ancillary power defined in previous field is constant whenever the generator is operating.")]
public System.String AncillaryPowerFunctionOfFuelInputCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatRecoveryWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatRecoveryWaterOutletNodeName { get; set; } = "";
        
[Description(@"Reference thermal efficiency (heat recovery to water) based on the Lower Heating Value (LHV) of the fuel.")]
[JsonProperty(@"Reference thermal efficiency (heat recovery to water) based on the Lower Heating Value (LHV) of the fuel.")]
public System.Single ReferenceThermalEfficiencyUsingLowerHeatValue { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single ReferenceInletWaterTemperature { get; set; } = ;
        
[Description(@"PlantControl means the heat recovery water flow rate is determined by the plant, but the user needs to supply a heat recovery water flow rate. InternalControl means the heat recovery water flow rate is controlled by this generator. If 'InternalControl' is selected, then the user needs to supply a reference heat recovery water flow rate and optionally the name of a heat recovery flow rate modifier curve.")]
[JsonProperty(@"PlantControl means the heat recovery water flow rate is determined by the plant, but the user needs to supply a heat recovery water flow rate. InternalControl means the heat recovery water flow rate is controlled by this generator. If 'InternalControl' is selected, then the user needs to supply a reference heat recovery water flow rate and optionally the name of a heat recovery flow rate modifier curve.")]
public YesNoDefault HeatRecoveryWaterFlowOperatingMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "PlantControl");
        
[JsonProperty(@"")]
public System.Single ReferenceHeatRecoveryWaterFlowRate { get; set; } = ;
        
[Description(@"curve = a + b*T + c*T**2 + d*Pnet + e*Pnet + f*T*Pnet T = heat recovery inlet water temperature Pnet = net power output = electric power output - ancillary power If left blank, model assumes the heat recovery water flow rate is constant whenever the generator is operating, at the Reference HR Water Flow Rate defined in the previous field.")]
[JsonProperty(@"curve = a + b*T + c*T**2 + d*Pnet + e*Pnet + f*T*Pnet T = heat recovery inlet water temperature Pnet = net power output = electric power output - ancillary power If left blank, model assumes the heat recovery water flow rate is constant whenever the generator is operating, at the Reference HR Water Flow Rate defined in the previous field.")]
public System.String HeatRecoveryWaterFlowRateFunctionOfTemperatureAndPowerCurveName { get; set; } = "";
        
[Description(@"Bicubic curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev + g*T**3 + h*Elev**3 + i*T**2*Elev + j*T*Elev**2 Biquadratic curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev T = combustion air inlet temperature (C) Elev = elevation (m) If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
[JsonProperty(@"Bicubic curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev + g*T**3 + h*Elev**3 + i*T**2*Elev + j*T*Elev**2 Biquadratic curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev T = combustion air inlet temperature (C) Elev = elevation (m) If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
public System.String ThermalEfficiencyFunctionOfTemperatureAndElevationCurveName { get; set; } = "";
        
[Description(@"Quadratic curve = a + b*PLR + c*PLR**2 Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = ratio of Generator Load to steady state Electrical Power Output at current operating conditions If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
[JsonProperty(@"Quadratic curve = a + b*PLR + c*PLR**2 Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = ratio of Generator Load to steady state Electrical Power Output at current operating conditions If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
public System.String HeatRecoveryRateFunctionOfPartLoadRatioCurveName { get; set; } = "";
        
[Description(@"Quadratic curve = a + b*T + c*T**2 T = inlet water temperature (C) If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
[JsonProperty(@"Quadratic curve = a + b*T + c*T**2 T = inlet water temperature (C) If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
public System.String HeatRecoveryRateFunctionOfInletWaterTemperatureCurveName { get; set; } = "";
        
[Description(@"Quadratic curve = a + b*Flow + c*Flow**2 Flow = flow rate of water through the heat exchanger (m3/s) If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
[JsonProperty(@"Quadratic curve = a + b*Flow + c*Flow**2 Flow = flow rate of water through the heat exchanger (m3/s) If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
public System.String HeatRecoveryRateFunctionOfWaterFlowRateCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumHeatRecoveryWaterFlowRate { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single MaximumHeatRecoveryWaterFlowRate { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single MaximumHeatRecoveryWaterTemperature { get; set; } = ;
        
[Description(@"Must be an outdoor air node.")]
[JsonProperty(@"Must be an outdoor air node.")]
public System.String CombustionAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CombustionAirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single ReferenceExhaustAirMassFlowRate { get; set; } = ;
        
[Description(@"Quadratic curve = a + b*T + c*T**2 Cubic curve = a + b*T + c*T**2 + d*T**3 T = combustion air inlet temperature (C) If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
[JsonProperty(@"Quadratic curve = a + b*T + c*T**2 Cubic curve = a + b*T + c*T**2 + d*T**3 T = combustion air inlet temperature (C) If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
public System.String ExhaustAirFlowRateFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Quadratic curve = a + b*PLR + c*PLR**2 Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = ratio of Generator Load to steady state Electrical Power Output at current operating conditions. If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
[JsonProperty(@"Quadratic curve = a + b*PLR + c*PLR**2 Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = ratio of Generator Load to steady state Electrical Power Output at current operating conditions. If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
public System.String ExhaustAirFlowRateFunctionOfPartLoadRatioCurveName { get; set; } = "";
        
[Description(@"Exhaust air outlet temperature at reference conditions.")]
[JsonProperty(@"Exhaust air outlet temperature at reference conditions.")]
public System.Single NominalExhaustAirOutletTemperature { get; set; } = ;
        
[Description(@"Quadratic curve = a + b*T + c*T**2 Cubic curve = a + b*T + c*T**2 + d*T**3 T = combustion air inlet temperature (C) If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
[JsonProperty(@"Quadratic curve = a + b*T + c*T**2 Cubic curve = a + b*T + c*T**2 + d*T**3 T = combustion air inlet temperature (C) If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
public System.String ExhaustAirTemperatureFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Quadratic curve = a + b*PLR + c*PLR**2 Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = ratio of Generator Load to steady state Electrical Power Output at current operating conditions. If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
[JsonProperty(@"Quadratic curve = a + b*PLR + c*PLR**2 Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = ratio of Generator Load to steady state Electrical Power Output at current operating conditions. If field is left blank, model assumes this modifier equals 1 for entire simulation.")]
public System.String ExhaustAirTemperatureFunctionOfPartLoadRatioCurveName { get; set; } = "";
    }
    
    public enum FuelTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Coal")]
        Coal = 1,
        
        [JsonProperty("Diesel")]
        Diesel = 2,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 3,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 4,
        
        [JsonProperty("Gasoline")]
        Gasoline = 5,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 6,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 7,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 8,
        
        [JsonProperty("Propane")]
        Propane = 9,
    }
    
    public enum HeatRecoveryWaterFlowOperatingModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("InternalControl")]
        InternalControl = 1,
        
        [JsonProperty("PlantControl")]
        PlantControl = 2,
    }
    
    [Description(@"Describes an array of photovoltaic (PV) modules. A series of different PV arrays can be connected to a single electric load center (and inverter) by listing them all in an ElectricLoadCenter:Generator object. PV performance is taken from the referenced PhotovoltaicPerformance:* object. Array tilt, azimuth, and gross area are taken from the referenced building surface or shading surface. The array surface participates normally in all shading calculations.")]
    [JsonObject("Generator:Photovoltaic")]
    public class Generator_Photovoltaic
    {
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault PhotovoltaicPerformanceObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"PV array modeling details")]
[JsonProperty(@"PV array modeling details")]
public System.String ModulePerformanceName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatTransferIntegrationMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Decoupled");
        
[Description(@"number of series-wired strings of PV modules that are in parallel")]
[JsonProperty(@"number of series-wired strings of PV modules that are in parallel")]
public System.Single NumberOfSeriesStringsInParallel { get; set; } = 1;
        
[Description(@"Number of PV modules wired in series for each string.")]
[JsonProperty(@"Number of PV modules wired in series for each string.")]
public System.Single NumberOfModulesInSeries { get; set; } = 1;
    }
    
    public enum PhotovoltaicPerformanceObjectTypeType
    {
        
        [JsonProperty("PhotovoltaicPerformance:EquivalentOne-Diode")]
        PhotovoltaicPerformanceEquivalentOneDiode = 0,
        
        [JsonProperty("PhotovoltaicPerformance:Sandia")]
        PhotovoltaicPerformanceSandia = 1,
        
        [JsonProperty("PhotovoltaicPerformance:Simple")]
        PhotovoltaicPerformanceSimple = 2,
    }
    
    public enum HeatTransferIntegrationModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Decoupled")]
        Decoupled = 1,
        
        [JsonProperty("DecoupledUllebergDynamic")]
        DecoupledUllebergDynamic = 2,
        
        [JsonProperty("IntegratedExteriorVentedCavity")]
        IntegratedExteriorVentedCavity = 3,
        
        [JsonProperty("IntegratedSurfaceOutsideFace")]
        IntegratedSurfaceOutsideFace = 4,
        
        [JsonProperty("IntegratedTranspiredCollector")]
        IntegratedTranspiredCollector = 5,
        
        [JsonProperty("PhotovoltaicThermalSolarCollector")]
        PhotovoltaicThermalSolarCollector = 6,
    }
    
    [Description(@"Describes a simple model of photovoltaics that may be useful for early phase design analysis. In this model the user has direct access to the efficiency with which surfaces convert incident solar radiation to electricity and need not specify arrays of specific modules.")]
    [JsonObject("PhotovoltaicPerformance:Simple")]
    public class PhotovoltaicPerformance_Simple
    {
        
[JsonProperty(@"")]
public System.Single FractionOfSurfaceAreaWithActiveSolarCells { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault ConversionEfficiencyInputMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Efficiency = (power generated [W])/(incident solar[W])")]
[JsonProperty(@"Efficiency = (power generated [W])/(incident solar[W])")]
public System.Single ValueForCellEfficiencyIfFixed { get; set; } = ;
        
[JsonProperty(@"")]
public System.String EfficiencyScheduleName { get; set; } = "";
    }
    
    public enum ConversionEfficiencyInputModeType
    {
        
        [JsonProperty("Fixed")]
        Fixed = 0,
        
        [JsonProperty("Scheduled")]
        Scheduled = 1,
    }
    
    [Description("Describes the performance characteristics of Photovoltaic (PV) modules to be mode" +
        "led using an equivalent one-diode circuit. This model is also known as the 4- or" +
        " 5-parameter TRNSYS model for photovoltaics.")]
    [JsonObject("PhotovoltaicPerformance:EquivalentOne-Diode")]
    public class PhotovoltaicPerformance_EquivalentOneDiode
    {
        
[JsonProperty(@"")]
public YesNoDefault CellType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single NumberOfCellsInSeries { get; set; } = 36;
        
[Description(@"The total power output of the array is determined by the number of modules (see above). The Active Area is only used to calculate the PV Array Efficiency output variable.")]
[JsonProperty(@"The total power output of the array is determined by the number of modules (see above). The Active Area is only used to calculate the PV Array Efficiency output variable.")]
public System.Single ActiveArea { get; set; } = 0.89;
        
[JsonProperty(@"")]
public System.Single TransmittanceAbsorptanceProduct { get; set; } = 0.95;
        
[JsonProperty(@"")]
public System.Single SemiconductorBandgap { get; set; } = 1.12;
        
[JsonProperty(@"")]
public System.Single ShuntResistance { get; set; } = 1000000;
        
[JsonProperty(@"")]
public System.Single ShortCircuitCurrent { get; set; } = 6.5;
        
[JsonProperty(@"")]
public System.Single OpenCircuitVoltage { get; set; } = 21.6;
        
[JsonProperty(@"")]
public System.Single ReferenceTemperature { get; set; } = 25;
        
[JsonProperty(@"")]
public System.Single ReferenceInsolation { get; set; } = 1000;
        
[Description(@"Single module current at the maximum power point and reference conditions. Module Current, Module Voltage, Number of Modules in Parallel and Number of Modules in Series determine the maximum power output of the array.")]
[JsonProperty(@"Single module current at the maximum power point and reference conditions. Module Current, Module Voltage, Number of Modules in Parallel and Number of Modules in Series determine the maximum power output of the array.")]
public System.Single ModuleCurrentAtMaximumPower { get; set; } = 5.9;
        
[Description(@"Single module voltage at the maximum power point and reference conditions. Module Current, Module Voltage, Number of Modules in Parallel and Number of Modules in Series determine the maximum power output of the array.")]
[JsonProperty(@"Single module voltage at the maximum power point and reference conditions. Module Current, Module Voltage, Number of Modules in Parallel and Number of Modules in Series determine the maximum power output of the array.")]
public System.Single ModuleVoltageAtMaximumPower { get; set; } = 17;
        
[JsonProperty(@"")]
public System.Single TemperatureCoefficientOfShortCircuitCurrent { get; set; } = 0.02;
        
[JsonProperty(@"")]
public System.Single TemperatureCoefficientOfOpenCircuitVoltage { get; set; } = -0.079;
        
[JsonProperty(@"")]
public System.Single NominalOperatingCellTemperatureTestAmbientTemperature { get; set; } = 20;
        
[JsonProperty(@"")]
public System.Single NominalOperatingCellTemperatureTestCellTemperature { get; set; } = 40;
        
[JsonProperty(@"")]
public System.Single NominalOperatingCellTemperatureTestInsolation { get; set; } = 800;
        
[JsonProperty(@"")]
public System.Single ModuleHeatLossCoefficient { get; set; } = 30;
        
[JsonProperty(@"")]
public System.Single TotalHeatCapacity { get; set; } = 50000;
    }
    
    public enum CellTypeType
    {
        
        [JsonProperty("AmorphousSilicon")]
        AmorphousSilicon = 0,
        
        [JsonProperty("CrystallineSilicon")]
        CrystallineSilicon = 1,
    }
    
    [Description("Describes performance input data needed for specific makes and models of producti" +
        "on PV panels using the empirical coefficients assembled by Sandia National Labor" +
        "atory.")]
    [JsonObject("PhotovoltaicPerformance:Sandia")]
    public class PhotovoltaicPerformance_Sandia
    {
        
[Description(@"(m2, single module)")]
[JsonProperty(@"(m2, single module)")]
public System.Single ActiveArea { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single NumberOfCellsInSeries { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single NumberOfCellsInParallel { get; set; } = 1;
        
[Description(@"(Amps)")]
[JsonProperty(@"(Amps)")]
public System.Single ShortCircuitCurrent { get; set; } = ;
        
[Description(@"(Volts)")]
[JsonProperty(@"(Volts)")]
public System.Single OpenCircuitVoltage { get; set; } = ;
        
[Description(@"(Amps)")]
[JsonProperty(@"(Amps)")]
public System.Single CurrentAtMaximumPowerPoint { get; set; } = ;
        
[Description(@"(Volts)")]
[JsonProperty(@"(Volts)")]
public System.Single VoltageAtMaximumPowerPoint { get; set; } = ;
        
[Description(@"(1/degC)")]
[JsonProperty(@"(1/degC)")]
public System.Single SandiaDatabaseParameterAisc { get; set; } = ;
        
[Description(@"(1/degC)")]
[JsonProperty(@"(1/degC)")]
public System.Single SandiaDatabaseParameterAimp { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterC { get; set; } = ;
        
[Description(@"(Volts/degC)")]
[JsonProperty(@"(Volts/degC)")]
public System.Single SandiaDatabaseParameterBvoc { get; set; } = ;
        
[Description(@"(Volts/degC)")]
[JsonProperty(@"(Volts/degC)")]
public System.Single SandiaDatabaseParameterMbvoc { get; set; } = ;
        
[Description(@"(Volts/degC)")]
[JsonProperty(@"(Volts/degC)")]
public System.Single SandiaDatabaseParameterBvmp { get; set; } = ;
        
[Description(@"(Volts/degC)")]
[JsonProperty(@"(Volts/degC)")]
public System.Single SandiaDatabaseParameterMbvmp { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DiodeFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterA { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterA { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterA { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterA { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterA { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterB { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterB { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterB { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterB { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterB { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterB { get; set; } = ;
        
[Description(@"(deg C)")]
[JsonProperty(@"(deg C)")]
public System.Single SandiaDatabaseParameterDeltaTc { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterFd { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterA { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterB { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterC { get; set; } = ;
        
[Description(@"(Amps)")]
[JsonProperty(@"(Amps)")]
public System.Single SandiaDatabaseParameterIx { get; set; } = ;
        
[Description(@"(Amps)")]
[JsonProperty(@"(Amps)")]
public System.Single SandiaDatabaseParameterIxx { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SandiaDatabaseParameterC { get; set; } = ;
        
[Description(@"(non-dimensional)")]
[JsonProperty(@"(non-dimensional)")]
public System.Single SandiaDatabaseParameterC { get; set; } = ;
    }
    
    [Description(@"Describes a simple set of inputs for an array of photovoltaic (PV) modules as described in the PVWatts software. A series of different PVWatts arrays can be connected to a single electric load center (preferably through an ElectricLoadCenter:Inverter:PVWatts). Array tilt and azimuth can be either specified on this object or taken from a referenced building surface or shading surface. If a surface is specified, the array participates normally in all shading calculations.")]
    [JsonObject("Generator:PVWatts")]
    public class Generator_PVWatts
    {
        
[JsonProperty(@"")]
public YesNoDefault PvwattsVersion { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Nameplate rated DC system capacity in watts")]
[JsonProperty(@"Nameplate rated DC system capacity in watts")]
public System.Single DcSystemCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault ModuleType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault ArrayType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single SystemLosses { get; set; } = 0.14;
        
[Description(@"TiltAzimuth - The tilt and azimuth angles are specified in the next two fields. An unshaded array is assumed. Surface - The array geometry (tilt and azimuth) as well as shading is determined from surface referenced.")]
[JsonProperty(@"TiltAzimuth - The tilt and azimuth angles are specified in the next two fields. An unshaded array is assumed. Surface - The array geometry (tilt and azimuth) as well as shading is determined from surface referenced.")]
public YesNoDefault ArrayGeometryType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "TiltAzimuth");
        
[Description(@"The tilt angle is the angle from horizontal of the photovoltaic modules in the array.")]
[JsonProperty(@"The tilt angle is the angle from horizontal of the photovoltaic modules in the array.")]
public System.Single TiltAngle { get; set; } = 20;
        
[Description(@"For a fixed array, the azimuth angle is the angle clockwise from true north describing the direction that the array faces. For an array with one-axis tracking, the azimuth angle is the angle clockwise from true north of the axis of rotation.")]
[JsonProperty(@"For a fixed array, the azimuth angle is the angle clockwise from true north describing the direction that the array faces. For an array with one-axis tracking, the azimuth angle is the angle clockwise from true north of the axis of rotation.")]
public System.Single AzimuthAngle { get; set; } = 180;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[Description(@"Applies only to arrays with one-axis tracking and is the ratio of module surface area to area of the ground or roof occupied by the array.")]
[JsonProperty(@"Applies only to arrays with one-axis tracking and is the ratio of module surface area to area of the ground or roof occupied by the array.")]
public System.Single GroundCoverageRatio { get; set; } = 0.4;
    }
    
    public enum PvwattsVersionType
    {
        
        [JsonProperty("5")]
        Default = 0,
    }
    
    public enum ModuleTypeType
    {
        
        [JsonProperty("Premium")]
        Premium = 0,
        
        [JsonProperty("Standard")]
        Standard = 1,
        
        [JsonProperty("ThinFilm")]
        ThinFilm = 2,
    }
    
    public enum ArrayTypeType
    {
        
        [JsonProperty("FixedOpenRack")]
        FixedOpenRack = 0,
        
        [JsonProperty("FixedRoofMounted")]
        FixedRoofMounted = 1,
        
        [JsonProperty("OneAxis")]
        OneAxis = 2,
        
        [JsonProperty("OneAxisBacktracking")]
        OneAxisBacktracking = 3,
        
        [JsonProperty("TwoAxis")]
        TwoAxis = 4,
    }
    
    public enum ArrayGeometryTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Surface")]
        Surface = 1,
        
        [JsonProperty("TiltAzimuth")]
        TiltAzimuth = 2,
    }
    
    [Description("Electric power inverter to convert from direct current (DC) to alternating curren" +
        "t (AC) in an electric load center that contains Generator:PVWatts objects. It im" +
        "plements the PVWatts inverter performance curves.")]
    [JsonObject("ElectricLoadCenter:Inverter:PVWatts")]
    public class ElectricLoadCenter_Inverter_PVWatts
    {
        
[JsonProperty(@"")]
public System.Single DcToAcSizeRatio { get; set; } = 1.1;
        
[JsonProperty(@"")]
public System.Single InverterEfficiency { get; set; } = 0.96;
    }
    
    [Description("This generator model is the FC model from IEA Annex 42")]
    [JsonObject("Generator:FuelCell")]
    public class Generator_FuelCell
    {
        
[Description(@"Enter the name of a Generator:FuelCell:PowerModule object.")]
[JsonProperty(@"Enter the name of a Generator:FuelCell:PowerModule object.")]
public System.String PowerModuleName { get; set; } = "";
        
[Description(@"Enter the name of a Generator:FuelCell:AirSupply object.")]
[JsonProperty(@"Enter the name of a Generator:FuelCell:AirSupply object.")]
public System.String AirSupplyName { get; set; } = "";
        
[Description(@"Enter the name of a Generator:FuelSupply object.")]
[JsonProperty(@"Enter the name of a Generator:FuelSupply object.")]
public System.String FuelSupplyName { get; set; } = "";
        
[Description(@"Enter the name of a Generator:FuelCell:WaterSupply object.")]
[JsonProperty(@"Enter the name of a Generator:FuelCell:WaterSupply object.")]
public System.String WaterSupplyName { get; set; } = "";
        
[Description(@"Enter the name of a Generator:FuelCell:AuxiliaryHeater object.")]
[JsonProperty(@"Enter the name of a Generator:FuelCell:AuxiliaryHeater object.")]
public System.String AuxiliaryHeaterName { get; set; } = "";
        
[Description(@"Enter the name of a Generator:FuelCell:ExhaustGasToWaterHeatExchanger object.")]
[JsonProperty(@"Enter the name of a Generator:FuelCell:ExhaustGasToWaterHeatExchanger object.")]
public System.String HeatExchangerName { get; set; } = "";
        
[Description(@"Enter the name of a Generator:FuelCell:ElectricalStorage object.")]
[JsonProperty(@"Enter the name of a Generator:FuelCell:ElectricalStorage object.")]
public System.String ElectricalStorageName { get; set; } = "";
        
[Description(@"Enter the name of a Generator:FuelCell:Inverter object.")]
[JsonProperty(@"Enter the name of a Generator:FuelCell:Inverter object.")]
public System.String InverterName { get; set; } = "";
        
[Description(@"Enter the name of a Generator:FuelCell:StackCooler object. optional, used for PEMFC")]
[JsonProperty(@"Enter the name of a Generator:FuelCell:StackCooler object. optional, used for PEMFC")]
public System.String StackCoolerName { get; set; } = "";
    }
    
    [Description(@"Describe the core power module subsystem of a fuel cell power generator. This includes the fuel cell stack, fuel reformer, and whatever ancillary devices are included inside. If the model has multiple FC generators that are of the exact same type, then only one of these objects is needed and all the Generator:FuelCell objects can reference it.")]
    [JsonObject("Generator:FuelCell:PowerModule")]
    public class Generator_FuelCell_PowerModule
    {
        
[JsonProperty(@"")]
public YesNoDefault EfficiencyCurveMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String EfficiencyCurveName { get; set; } = "";
        
[Description(@"This field is not used.")]
[JsonProperty(@"This field is not used.")]
public System.Single NominalEfficiency { get; set; } = ;
        
[Description(@"This field is not used")]
[JsonProperty(@"This field is not used")]
public System.Single NominalElectricalPower { get; set; } = ;
        
[Description(@"this is Nstops in SOFC model specification")]
[JsonProperty(@"this is Nstops in SOFC model specification")]
public System.Single NumberOfStopsAtStartOfSimulation { get; set; } = ;
        
[Description(@"this is D in SOFC model specification")]
[JsonProperty(@"this is D in SOFC model specification")]
public System.Single CyclingPerformanceDegradationCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NumberOfRunHoursAtBeginningOfSimulation { get; set; } = ;
        
[Description(@"this is L in SOFC model specification")]
[JsonProperty(@"this is L in SOFC model specification")]
public System.Single AccumulatedRunTimeDegradationCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RunTimeDegradationInitiationTimeThreshold { get; set; } = ;
        
[Description(@"Maximum rate of change in electrical output [power increasing]")]
[JsonProperty(@"Maximum rate of change in electrical output [power increasing]")]
public System.Single PowerUpTransientLimit { get; set; } = ;
        
[Description(@"Maximum rate of change in electrical output [power decreasing] Enter positive value for rate of change")]
[JsonProperty(@"Maximum rate of change in electrical output [power decreasing] Enter positive value for rate of change")]
public System.Single PowerDownTransientLimit { get; set; } = ;
        
[Description(@"Time from start up to normal operation")]
[JsonProperty(@"Time from start up to normal operation")]
public System.Single StartUpTime { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartUpFuel { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartUpElectricityConsumption { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartUpElectricityProduced { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ShutDownTime { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ShutDownFuel { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ShutDownElectricityConsumption { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single AncillaryElectricityConstantTerm { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single AncillaryElectricityLinearTerm { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault SkinLossCalculationMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SkinLossRadiativeFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ConstantSkinLossRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SkinLossUFactorTimesAreaTerm { get; set; } = ;
        
[Description(@"curve is function of fuel use rate")]
[JsonProperty(@"curve is function of fuel use rate")]
public System.String SkinLossQuadraticCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DilutionAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StackHeatLossToDilutionAir { get; set; } = ;
        
[JsonProperty(@"")]
public System.String DilutionInletAirNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DilutionOutletAirNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumOperatingPoint { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumOperatingPoint { get; set; } = ;
    }
    
    public enum EfficiencyCurveModeType
    {
        
        [JsonProperty("Annex42")]
        Annex = 0,
        
        [JsonProperty("Normalized")]
        Normalized = 1,
    }
    
    public enum SkinLossCalculationModeType
    {
        
        [JsonProperty("ConstantRate")]
        ConstantRate = 0,
        
        [JsonProperty("QuadraticFunctionOfFuelRate")]
        QuadraticFunctionOfFuelRate = 1,
        
        [JsonProperty("UAForProcessGasTemperature")]
        UAForProcessGasTemperature = 2,
    }
    
    [Description("Used to define details of the air supply subsystem for a fuel cell power generato" +
        "r.")]
    [JsonObject("Generator:FuelCell:AirSupply")]
    public class Generator_FuelCell_AirSupply
    {
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String BlowerPowerCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single BlowerHeatLossFactor { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault AirSupplyRateCalculationMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"This is the excess air "stoics" the value entered is incremented by 1 in the model.")]
[JsonProperty(@"This is the excess air "stoics" the value entered is incremented by 1 in the model.")]
public System.Single StoichiometricRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.String AirRateFunctionOfElectricPowerCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AirRateAirTemperatureCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.String AirRateFunctionOfFuelRateCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault AirIntakeHeatRecoveryMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault AirSupplyConstituentMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single NumberOfUserdefinedConstituents { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ConstituentFractions { get; set; } = "";
    }
    
    public enum AirSupplyRateCalculationModeType
    {
        
        [JsonProperty("AirRatiobyStoics")]
        AirRatiobyStoics = 0,
        
        [JsonProperty("QuadraticFunctionofElectricPower")]
        QuadraticFunctionofElectricPower = 1,
        
        [JsonProperty("QuadraticFunctionofFuelRate")]
        QuadraticFunctionofFuelRate = 2,
    }
    
    public enum AirIntakeHeatRecoveryModeType
    {
        
        [JsonProperty("NoRecovery")]
        NoRecovery = 0,
        
        [JsonProperty("RecoverAuxiliaryBurner")]
        RecoverAuxiliaryBurner = 1,
        
        [JsonProperty("RecoverBurnerInverterStorage")]
        RecoverBurnerInverterStorage = 2,
        
        [JsonProperty("RecoverElectricalStorage")]
        RecoverElectricalStorage = 3,
        
        [JsonProperty("RecoverInverter")]
        RecoverInverter = 4,
        
        [JsonProperty("RecoverInverterandStorage")]
        RecoverInverterandStorage = 5,
    }
    
    public enum AirSupplyConstituentModeType
    {
        
        [JsonProperty("AmbientAir")]
        AmbientAir = 0,
        
        [JsonProperty("UserDefinedConstituents")]
        UserDefinedConstituents = 1,
    }
    
    [Description("Used to provide details of the water supply subsystem for a fuel cell power gener" +
        "ator. This water is used for steam reforming of the fuel and is not the same as " +
        "the water used for thermal heat recovery.")]
    [JsonObject("Generator:FuelCell:WaterSupply")]
    public class Generator_FuelCell_WaterSupply
    {
        
[JsonProperty(@"")]
public System.String ReformerWaterFlowRateFunctionOfFuelRateCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ReformerWaterPumpPowerFunctionOfFuelRateCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single PumpHeatLossFactor { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault WaterTemperatureModelingMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String WaterTemperatureReferenceNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterTemperatureScheduleName { get; set; } = "";
    }
    
    public enum WaterTemperatureModelingModeType
    {
        
        [JsonProperty("MainsWaterTemperature")]
        MainsWaterTemperature = 0,
        
        [JsonProperty("TemperatureFromAirNode")]
        TemperatureFromAirNode = 1,
        
        [JsonProperty("TemperatureFromSchedule")]
        TemperatureFromSchedule = 2,
        
        [JsonProperty("TemperatureFromWaterNode")]
        TemperatureFromWaterNode = 3,
    }
    
    [Description(@"Intended for modeling an auxiliary heater for a fuel cell power generator, however this portion of the model is not yet available. The program still requires one of these objects be included even though the data are not yet used (so that internal data structures can be allocated).")]
    [JsonObject("Generator:FuelCell:AuxiliaryHeater")]
    public class Generator_FuelCell_AuxiliaryHeater
    {
        
[JsonProperty(@"")]
public System.Single ExcessAirRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single AncillaryPowerConstantTerm { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single AncillaryPowerLinearTerm { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SkinLossUFactorTimesAreaValue { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault SkinLossDestination { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ZoneNameToReceiveSkinLosses { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatingCapacityUnits { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single MaximumHeatingCapacityInWatts { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumHeatingCapacityInWatts { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumHeatingCapacityInKmolPerSecond { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumHeatingCapacityInKmolPerSecond { get; set; } = ;
    }
    
    public enum SkinLossDestinationType
    {
        
        [JsonProperty("AirInletForFuelCell")]
        AirInletForFuelCell = 0,
        
        [JsonProperty("SurroundingZone")]
        SurroundingZone = 1,
    }
    
    public enum HeatingCapacityUnitsType
    {
        
        [JsonProperty("Watts")]
        Watts = 0,
        
        [JsonProperty("kmol/s")]
        Kmols = 1,
    }
    
    [Description("Describes the exhaust gas heat exchanger subsystem of a fuel cell power generator" +
        " used to recovery thermal energy")]
    [JsonObject("Generator:FuelCell:ExhaustGasToWaterHeatExchanger")]
    public class Generator_FuelCell_ExhaustGasToWaterHeatExchanger
    {
        
[JsonProperty(@"")]
public System.String HeatRecoveryWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatRecoveryWaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single HeatRecoveryWaterMaximumFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ExhaustOutletAirNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatExchangerCalculationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single MethodHeatExchangerEffectiveness { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MethodParameterHxs { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MethodParameterHxs { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MethodParameterHxs { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MethodParameterHxs { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MethodParameterHxs { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MethodHgasCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MethodNdotgasrefCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MethodNCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MethodGasArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MethodHWaterCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MethodNDotWaterRefCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MethodMCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MethodWaterArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MethodFAdjustmentFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MethodHxlCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MethodHxlCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MethodCondensationThreshold { get; set; } = ;
    }
    
    public enum HeatExchangerCalculationMethodType
    {
        
        [JsonProperty("Condensing")]
        Condensing = 0,
        
        [JsonProperty("EmpiricalUAeff")]
        EmpiricalUAeff = 1,
        
        [JsonProperty("FixedEffectiveness")]
        FixedEffectiveness = 2,
        
        [JsonProperty("FundementalUAeff")]
        FundementalUAeff = 3,
    }
    
    [Description("Used to describe the electrical storage subsystem for a fuel cell power generator" +
        ". The electrical storage model is a very simple \"constrained bucket\" model. Note" +
        " that this electrical storage is embedded within the FC device.")]
    [JsonObject("Generator:FuelCell:ElectricalStorage")]
    public class Generator_FuelCell_ElectricalStorage
    {
        
[JsonProperty(@"")]
public YesNoDefault ChoiceOfModel { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single NominalChargingEnergeticEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NominalDischargingEnergeticEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SimpleMaximumCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SimpleMaximumPowerDraw { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SimpleMaximumPowerStore { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single InitialChargeState { get; set; } = ;
    }
    
    public enum ChoiceOfModelType
    {
        
        [JsonProperty("SimpleEfficiencyWithConstraints")]
        SimpleEfficiencyWithConstraints = 0,
    }
    
    [Description("Used to describe the power condition unit subsystem of a fuel cell power generato" +
        "r. This object models an inverter system contained within a fuel cell system tha" +
        "t converts from direct current (DC) to alternating current (AC).")]
    [JsonObject("Generator:FuelCell:Inverter")]
    public class Generator_FuelCell_Inverter
    {
        
[JsonProperty(@"")]
public YesNoDefault InverterEfficiencyCalculationMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single InverterEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.String EfficiencyFunctionOfDcPowerCurveName { get; set; } = "";
    }
    
    public enum InverterEfficiencyCalculationModeType
    {
        
        [JsonProperty("Constant")]
        Constant = 0,
        
        [JsonProperty("Quadratic")]
        Quadratic = 1,
    }
    
    [Description("This object is optional and is used to define details needed to model the stack c" +
        "ooler on PEMFC.")]
    [JsonObject("Generator:FuelCell:StackCooler")]
    public class Generator_FuelCell_StackCooler
    {
        
[JsonProperty(@"")]
public System.String HeatRecoveryWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatRecoveryWaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NominalStackTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ActualStackTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientR { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientR { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientR { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientR { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StackCoolantFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StackCoolerUFactorTimesAreaValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FsCogenAdjustmentFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StackCogenerationExchangerArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StackCogenerationExchangerNominalFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StackCogenerationExchangerNominalHeatTransferCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StackCogenerationExchangerNominalHeatTransferCoefficientExponent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StackCoolerPumpPower { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StackCoolerPumpHeatLossFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StackAirCoolerFanCoefficientF { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StackAirCoolerFanCoefficientF { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StackAirCoolerFanCoefficientF { get; set; } = ;
    }
    
    [Description(@"Small-scale combined heat and power (micro CHP) electric generator using the model developed by IEA/ECBCS Annex 42 see www.cogen-sim.net. The model was developed for both internal combustion and Stirling cycle engines, but might be used for other types of residential CHP devices.")]
    [JsonObject("Generator:MicroCHP")]
    public class Generator_MicroCHP
    {
        
[Description(@"Enter the name of a Generator:MicroCHP:NonNormalizedParameters object.")]
[JsonProperty(@"Enter the name of a Generator:MicroCHP:NonNormalizedParameters object.")]
public System.String PerformanceParametersName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoolingWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoolingWaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Enter the name of a Generator:FuelSupply object.")]
[JsonProperty(@"Enter the name of a Generator:FuelSupply object.")]
public System.String GeneratorFuelSupplyName { get; set; } = "";
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
    }
    
    [Description("This object is referenced by a Generator:MicroCHP object and provides the non-nor" +
        "malized parameters for the MicroCHP generator model.")]
    [JsonObject("Generator:MicroCHP:NonNormalizedParameters")]
    public class Generator_MicroCHP_NonNormalizedParameters
    {
        
[JsonProperty(@"")]
public System.Single MaximumElectricPower { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumElectricPower { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumCoolingWaterFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumCoolingWaterTemperature { get; set; } = ;
        
[Description(@"TriQuadratic")]
[JsonProperty(@"TriQuadratic")]
public System.String ElectricalEfficiencyCurveName { get; set; } = "";
        
[Description(@"TriQuadratic")]
[JsonProperty(@"TriQuadratic")]
public System.String ThermalEfficiencyCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CoolingWaterFlowRateMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String CoolingWaterFlowRateCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirFlowRateCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MaximumNetElectricalPowerRateOfChange { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumFuelFlowRateOfChange { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single HeatExchangerUFactorTimesAreaValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SkinLossUFactorTimesAreaValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SkinLossRadiativeFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single AggregatedThermalMassOfEnergyConversionPortionOfGenerator { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single AggregatedThermalMassOfHeatRecoveryPortionOfGenerator { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StandbyPower { get; set; } = ;
        
[Description(@"Stirling engines use Nominal Engine Temperature Internal combustion engines use Time Delay")]
[JsonProperty(@"Stirling engines use Nominal Engine Temperature Internal combustion engines use Time Delay")]
public YesNoDefault WarmUpMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single WarmUpFuelFlowRateCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NominalEngineOperatingTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WarmUpPowerCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WarmUpFuelFlowRateLimitRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WarmUpDelayTime { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoolDownPower { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoolDownDelayTime { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault RestartMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum CoolingWaterFlowRateModeType
    {
        
        [JsonProperty("InternalControl")]
        InternalControl = 0,
        
        [JsonProperty("PlantControl")]
        PlantControl = 1,
    }
    
    public enum WarmUpModeType
    {
        
        [JsonProperty("NominalEngineTemperature")]
        NominalEngineTemperature = 0,
        
        [JsonProperty("TimeDelay")]
        TimeDelay = 1,
    }
    
    public enum RestartModeType
    {
        
        [JsonProperty("MandatoryCoolDown")]
        MandatoryCoolDown = 0,
        
        [JsonProperty("OptionalCoolDown")]
        OptionalCoolDown = 1,
    }
    
    [Description("Used only with Generator:FuelCell and Generator:MicroCHP")]
    [JsonObject("Generator:FuelSupply")]
    public class Generator_FuelSupply
    {
        
[JsonProperty(@"")]
public YesNoDefault FuelTemperatureModelingMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String FuelTemperatureReferenceNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FuelTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CompressorPowerMultiplierFunctionOfFuelRateCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single CompressorHeatLossFactor { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault FuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single LiquidGenericFuelLowerHeatingValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidGenericFuelHigherHeatingValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidGenericFuelMolecularWeight { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidGenericFuelCoEmissionFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NumberOfConstituentsInGaseousConstituentFuelSupply { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault ConstituentName { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single ConstituentMolarFraction { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault ConstituentName { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single ConstituentMolarFraction { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault ConstituentName { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single ConstituentMolarFraction { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault ConstituentName { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single ConstituentMolarFraction { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault ConstituentName { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single ConstituentMolarFraction { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault ConstituentName { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single ConstituentMolarFraction { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault ConstituentName { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single ConstituentMolarFraction { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault ConstituentName { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single ConstituentMolarFraction { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault ConstituentName { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single ConstituentMolarFraction { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault ConstituentName { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single ConstituentMolarFraction { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault ConstituentName { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single ConstituentMolarFraction { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault ConstituentName { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single ConstituentMolarFraction { get; set; } = ;
    }
    
    public enum FuelTemperatureModelingModeType
    {
        
        [JsonProperty("Scheduled")]
        Scheduled = 0,
        
        [JsonProperty("TemperatureFromAirNode")]
        TemperatureFromAirNode = 1,
    }
    
    public enum FuelTypeType
    {
        
        [JsonProperty("GaseousConstituents")]
        GaseousConstituents = 0,
        
        [JsonProperty("LiquidGeneric")]
        LiquidGeneric = 1,
    }
    
    public enum ConstituentNameType
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    public enum ConstituentNameType
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    public enum ConstituentNameType
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    public enum ConstituentNameType
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    public enum ConstituentNameType
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    public enum ConstituentNameType
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    public enum ConstituentNameType
    {
        
        [JsonProperty("Butane")]
        Butane = 0,
        
        [JsonProperty("Ethane")]
        Ethane = 1,
        
        [JsonProperty("Ethanol")]
        Ethanol = 2,
        
        [JsonProperty("Hexane")]
        Hexane = 3,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 4,
        
        [JsonProperty("Methane")]
        Methane = 5,
        
        [JsonProperty("Methanol")]
        Methanol = 6,
        
        [JsonProperty("Pentane")]
        Pentane = 7,
        
        [JsonProperty("Propane")]
        Propane = 8,
    }
    
    public enum ConstituentNameType
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    public enum ConstituentNameType
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    public enum ConstituentNameType
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    public enum ConstituentNameType
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    public enum ConstituentNameType
    {
        
        [JsonProperty("Argon")]
        Argon = 0,
        
        [JsonProperty("Butane")]
        Butane = 1,
        
        [JsonProperty("CarbonDioxide")]
        CarbonDioxide = 2,
        
        [JsonProperty("Ethane")]
        Ethane = 3,
        
        [JsonProperty("Ethanol")]
        Ethanol = 4,
        
        [JsonProperty("Hexane")]
        Hexane = 5,
        
        [JsonProperty("Hydrogen")]
        Hydrogen = 6,
        
        [JsonProperty("Methane")]
        Methane = 7,
        
        [JsonProperty("Methanol")]
        Methanol = 8,
        
        [JsonProperty("Nitrogen")]
        Nitrogen = 9,
        
        [JsonProperty("Oxygen")]
        Oxygen = 10,
        
        [JsonProperty("Pentane")]
        Pentane = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    [Description("Wind turbine generator.")]
    [JsonObject("Generator:WindTurbine")]
    public class Generator_WindTurbine
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"allowed values are: Horizontal Axis Wind Turbine or Vertical Axis Wind Turbine")]
[JsonProperty(@"allowed values are: Horizontal Axis Wind Turbine or Vertical Axis Wind Turbine")]
public YesNoDefault RotorType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "HorizontalAxisWindTurbine");
        
[Description(@"Constant power output is obtained in the last three control types when the wind speed exceeds the rated wind speed. allowed values are: Fixed Speed Fixed Pitch, Fixed Speed Variable Pitch, Variable Speed Fixed Pitch or Variable Speed Variable Pitch")]
[JsonProperty(@"Constant power output is obtained in the last three control types when the wind speed exceeds the rated wind speed. allowed values are: Fixed Speed Fixed Pitch, Fixed Speed Variable Pitch, Variable Speed Fixed Pitch or Variable Speed Variable Pitch")]
public YesNoDefault PowerControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "VariableSpeedVariablePitch");
        
[JsonProperty(@"")]
public System.Single RatedRotorSpeed { get; set; } = ;
        
[Description(@"This field is the diameter of the perpendicular circle of the Vertical Axis Wind Turbine system from the upright pole on the ground.")]
[JsonProperty(@"This field is the diameter of the perpendicular circle of the Vertical Axis Wind Turbine system from the upright pole on the ground.")]
public System.Single RotorDiameter { get; set; } = ;
        
[Description(@"This field is the height of the hub for the Horizontal Axis Wind Turbines and of the pole for the Vertical Axis Wind Turbines.")]
[JsonProperty(@"This field is the height of the hub for the Horizontal Axis Wind Turbines and of the pole for the Vertical Axis Wind Turbines.")]
public System.Single OverallHeight { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NumberOfBlades { get; set; } = 3;
        
[Description(@"This field is the nominal power at the rated wind speed. Users should input maximum power in case of Fixed Speed Fixed Pitch control type.")]
[JsonProperty(@"This field is the nominal power at the rated wind speed. Users should input maximum power in case of Fixed Speed Fixed Pitch control type.")]
public System.Single RatedPower { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RatedWindSpeed { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CutInWindSpeed { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CutOutWindSpeed { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FractionSystemEfficiency { get; set; } = 0.835;
        
[JsonProperty(@"")]
public System.Single MaximumTipSpeedRatio { get; set; } = 5;
        
[Description(@"This field should be input if the rotor type is Horizontal Axis Wind Turbine")]
[JsonProperty(@"This field should be input if the rotor type is Horizontal Axis Wind Turbine")]
public System.Single MaximumPowerCoefficient { get; set; } = 0.25;
        
[JsonProperty(@"")]
public System.Single AnnualLocalAverageWindSpeed { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single HeightForLocalAverageWindSpeed { get; set; } = 50;
        
[JsonProperty(@"")]
public System.Single BladeChordArea { get; set; } = ;
        
[Description(@"This field is only for Vertical Axis Wind Turbine.. The user must input this field if the rotor type is Vertical Axis Wind Turbine.")]
[JsonProperty(@"This field is only for Vertical Axis Wind Turbine.. The user must input this field if the rotor type is Vertical Axis Wind Turbine.")]
public System.Single BladeDragCoefficient { get; set; } = 0.9;
        
[Description(@"This field is only for Vertical Axis Wind Turbine.. The user must input this field if the rotor type is Vertical Axis Wind Turbine.")]
[JsonProperty(@"This field is only for Vertical Axis Wind Turbine.. The user must input this field if the rotor type is Vertical Axis Wind Turbine.")]
public System.Single BladeLiftCoefficient { get; set; } = 0.05;
        
[Description(@"This field is only available for Horizontal Axis Wind Turbine. The user should input all six parameters so that the analytic approximation is assumed. The simple approximation will be assumed, if any field C1 through C6 is not input. Leave this field blank, if the manufacturer's data is unavailable so that the simple approximation will be assumed.")]
[JsonProperty(@"This field is only available for Horizontal Axis Wind Turbine. The user should input all six parameters so that the analytic approximation is assumed. The simple approximation will be assumed, if any field C1 through C6 is not input. Leave this field blank, if the manufacturer's data is unavailable so that the simple approximation will be assumed.")]
public System.Single PowerCoefficientC { get; set; } = 0.5176;
        
[JsonProperty(@"")]
public System.Single PowerCoefficientC { get; set; } = 116;
        
[JsonProperty(@"")]
public System.Single PowerCoefficientC { get; set; } = 0.4;
        
[JsonProperty(@"")]
public System.Single PowerCoefficientC { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single PowerCoefficientC { get; set; } = 5;
        
[JsonProperty(@"")]
public System.Single PowerCoefficientC { get; set; } = 21;
    }
    
    public enum RotorTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("HorizontalAxisWindTurbine")]
        HorizontalAxisWindTurbine = 1,
        
        [JsonProperty("VerticalAxisWindTurbine")]
        VerticalAxisWindTurbine = 2,
    }
    
    public enum PowerControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FixedSpeedFixedPitch")]
        FixedSpeedFixedPitch = 1,
        
        [JsonProperty("FixedSpeedVariablePitch")]
        FixedSpeedVariablePitch = 2,
        
        [JsonProperty("VariableSpeedFixedPitch")]
        VariableSpeedFixedPitch = 3,
        
        [JsonProperty("VariableSpeedVariablePitch")]
        VariableSpeedVariablePitch = 4,
    }
    
    [Description("List of electric power generators to include in the simulation including the name" +
        " and type of each generators along with availability schedule, rated power outpu" +
        "t, and thermal-to-electrical power ratio.")]
    [JsonObject("ElectricLoadCenter:Generators")]
    public class ElectricLoadCenter_Generators
    {
        
[JsonProperty(@"")]
public System.String GeneratorOutputs { get; set; } = "";
    }
    
    [Description("Electric power inverter to convert from direct current (DC) to alternating curren" +
        "t (AC) in an electric load center that contains photovoltaic modules. This input" +
        " object is for the simplest inverter model and uses a fixed efficiency.")]
    [JsonObject("ElectricLoadCenter:Inverter:Simple")]
    public class ElectricLoadCenter_Inverter_Simple
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"enter name of zone to receive inverter losses as heat if blank then inverter is assumed to be outdoors")]
[JsonProperty(@"enter name of zone to receive inverter losses as heat if blank then inverter is assumed to be outdoors")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RadiativeFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single InverterEfficiency { get; set; } = ;
    }
    
    [Description("Electric power inverter to convert from direct current (DC) to alternating curren" +
        "t (AC) in an electric load center that contains photovoltaic modules. This input" +
        " object is for an inverter model where efficiency is a function of normalized po" +
        "wer.")]
    [JsonObject("ElectricLoadCenter:Inverter:FunctionOfPower")]
    public class ElectricLoadCenter_Inverter_FunctionOfPower
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Enter name of zone to receive inverter losses as heat if blank then inverter is assumed to be outdoors")]
[JsonProperty(@"Enter name of zone to receive inverter losses as heat if blank then inverter is assumed to be outdoors")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RadiativeFraction { get; set; } = ;
        
[Description(@"curve describes efficiency as a function of power curve is normalized relative to rated power in next field")]
[JsonProperty(@"curve describes efficiency as a function of power curve is normalized relative to rated power in next field")]
public System.String EfficiencyFunctionOfPowerCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RatedMaximumContinuousInputPower { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumPowerOutput { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumPowerOutput { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single AncillaryPowerConsumedInStandby { get; set; } = ;
    }
    
    [Description("California Energy Commission tests and publishes data on inverters This inverter " +
        "model interpolates using CEC test data Input data are at http://www.gosolarcalif" +
        "ornia.org/equipment/inverter_tests/summaries")]
    [JsonObject("ElectricLoadCenter:Inverter:LookUpTable")]
    public class ElectricLoadCenter_Inverter_LookUpTable
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Enter name of zone to receive inverter losses as heat if blank then inverter is assumed to be outdoors")]
[JsonProperty(@"Enter name of zone to receive inverter losses as heat if blank then inverter is assumed to be outdoors")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RadiativeFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RatedMaximumContinuousOutputPower { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NightTareLossPower { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NominalVoltageInput { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single EfficiencyAtPowerAndNominalVoltage { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single EfficiencyAtPowerAndNominalVoltage { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single EfficiencyAtPowerAndNominalVoltage { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single EfficiencyAtPowerAndNominalVoltage { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single EfficiencyAtPowerAndNominalVoltage { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single EfficiencyAtPowerAndNominalVoltage { get; set; } = ;
    }
    
    [Description(@"Used to model storage of electricity in an electric load center. This is a simple model that does not attempt to represent any of the characteristics of a real storage device such as a battery. The type of power, AC or DC, depends on the configuration chosen as the Electrical Buss Type in the ElectricLoadCenter:Distribution object.")]
    [JsonObject("ElectricLoadCenter:Storage:Simple")]
    public class ElectricLoadCenter_Storage_Simple
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Enter name of zone to receive storage losses as heat if blank then storage is assumed to be outdoors")]
[JsonProperty(@"Enter name of zone to receive storage losses as heat if blank then storage is assumed to be outdoors")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RadiativeFractionForZoneHeatGains { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NominalEnergeticEfficiencyForCharging { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NominalDischargingEnergeticEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumStorageCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumPowerForDischarging { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumPowerForCharging { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single InitialStateOfCharge { get; set; } = ;
    }
    
    [Description(@"Uses the kinetic battery model (KiBaM) to simulate rechargeable battery banks in an electrical load center. The battery bank is a collection of one or more individual battery modules. Given the surplus or deficit power from the electrical system and the state of charge from the previous time step, this object can model the voltage, current, and energy losses with charging and discharging during each time step. The cumulative battery damage can be also modeled and reported at the end of each simulation run.")]
    [JsonObject("ElectricLoadCenter:Storage:Battery")]
    public class ElectricLoadCenter_Storage_Battery
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Enter name of zone to receive electrical storage losses as heat if blank then electrical storage losses are dissipated to outdoors")]
[JsonProperty(@"Enter name of zone to receive electrical storage losses as heat if blank then electrical storage losses are dissipated to outdoors")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RadiativeFraction { get; set; } = 0;
        
[Description(@"A module usually consists of several cells. The total number of modules in the battery bank is equal to number of modules in parallel times number of modules in series.")]
[JsonProperty(@"A module usually consists of several cells. The total number of modules in the battery bank is equal to number of modules in parallel times number of modules in series.")]
public System.Single NumberOfBatteryModulesInParallel { get; set; } = 1;
        
[Description(@"A module usually consists of several cells. The total number of modules in the battery bank is equal to number of modules in parallel times number of modules in series.")]
[JsonProperty(@"A module usually consists of several cells. The total number of modules in the battery bank is equal to number of modules in parallel times number of modules in series.")]
public System.Single NumberOfBatteryModulesInSeries { get; set; } = 1;
        
[Description(@"The capacity is for each module. A model parameter from manufacturer's data or test data.")]
[JsonProperty(@"The capacity is for each module. A model parameter from manufacturer's data or test data.")]
public System.Single MaximumModuleCapacity { get; set; } = ;
        
[Description(@"The state of charge is evaluated based on the maximum capacity defined in the next field.")]
[JsonProperty(@"The state of charge is evaluated based on the maximum capacity defined in the next field.")]
public System.Single InitialFractionalStateOfCharge { get; set; } = 1;
        
[Description(@"A model parameter usually derived from test data by curve fitting.")]
[JsonProperty(@"A model parameter usually derived from test data by curve fitting.")]
public System.Single FractionOfAvailableChargeCapacity { get; set; } = ;
        
[Description(@"A model parameter usually derived from test data by curve fitting.")]
[JsonProperty(@"A model parameter usually derived from test data by curve fitting.")]
public System.Single ChangeRateFromBoundChargeToAvailableCharge { get; set; } = ;
        
[Description(@"The voltage is for each battery module.")]
[JsonProperty(@"The voltage is for each battery module.")]
public System.Single FullyChargedModuleOpenCircuitVoltage { get; set; } = ;
        
[Description(@"The voltage is for each battery module.")]
[JsonProperty(@"The voltage is for each battery module.")]
public System.Single FullyDischargedModuleOpenCircuitVoltage { get; set; } = ;
        
[Description(@"Determines how the open circuit voltage change with state of charge relative to the fully discharged state.")]
[JsonProperty(@"Determines how the open circuit voltage change with state of charge relative to the fully discharged state.")]
public System.String VoltageChangeCurveNameForCharging { get; set; } = "";
        
[Description(@"Determines how the open circuit voltage change with state of charge relative to the fully charged state.")]
[JsonProperty(@"Determines how the open circuit voltage change with state of charge relative to the fully charged state.")]
public System.String VoltageChangeCurveNameForDischarging { get; set; } = "";
        
[Description(@"A model parameter from manufacture or derived from test data. Internal resistance is assumed to be constant. The internal resistance is for each battery module.")]
[JsonProperty(@"A model parameter from manufacture or derived from test data. Internal resistance is assumed to be constant. The internal resistance is for each battery module.")]
public System.Single ModuleInternalElectricalResistance { get; set; } = ;
        
[Description(@"The constraint on discharging current is for each battery module.")]
[JsonProperty(@"The constraint on discharging current is for each battery module.")]
public System.Single MaximumModuleDischargingCurrent { get; set; } = ;
        
[Description(@"The voltage constraint is for each battery module.")]
[JsonProperty(@"The voltage constraint is for each battery module.")]
public System.Single ModuleCutOffVoltage { get; set; } = ;
        
[Description(@"units 1/hr Charge rate limit is the division between charging current the remaining capacity. The constraint on charging current is for each module.")]
[JsonProperty(@"units 1/hr Charge rate limit is the division between charging current the remaining capacity. The constraint on charging current is for each module.")]
public System.Single ModuleChargeRateLimit { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault BatteryLifeCalculation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Only required when battery life calculation is activated")]
[JsonProperty(@"Only required when battery life calculation is activated")]
public System.Single NumberOfCycleBins { get; set; } = 10;
        
[Description(@"Determines the number of cycles to failure in relation to cycle range. Only required when battery life calculation is activated.")]
[JsonProperty(@"Determines the number of cycles to failure in relation to cycle range. Only required when battery life calculation is activated.")]
public System.String BatteryLifeCurveName { get; set; } = "";
    }
    
    [Description(@"Uses Lithium Ion NMC model to simulate rechargeable battery banks in an electrical load center. The battery bank is a collection of one or more individual battery modules. Given the surplus or deficit power from the electrical system and the state of charge from the previous time step, this object can model the voltage, current, and energy losses with charging and discharging during each time step. The cumulative battery damage can be also modeled and reported at the end of each simulation run.")]
    [JsonObject("ElectricLoadCenter:Storage:LiIonNMCBattery")]
    public class ElectricLoadCenter_Storage_LiIonNMCBattery
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Enter name of zone to receive electrical storage losses as heat if blank then electrical storage losses are dissipated to outdoors")]
[JsonProperty(@"Enter name of zone to receive electrical storage losses as heat if blank then electrical storage losses are dissipated to outdoors")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RadiativeFraction { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault LifetimeModel { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "KandlerSmith");
        
[Description(@"Battery voltage is calculated by multiplying this field by the nominal cell voltage (N13, default 3.342V)")]
[JsonProperty(@"Battery voltage is calculated by multiplying this field by the nominal cell voltage (N13, default 3.342V)")]
public System.Single NumberOfCellsInSeries { get; set; } = ;
        
[Description(@"Capacity (Ah) is determined by multiplying this field by the cell capacity (N14, default 3.2 Ah)")]
[JsonProperty(@"Capacity (Ah) is determined by multiplying this field by the cell capacity (N14, default 3.2 Ah)")]
public System.Single NumberOfStringsInParallel { get; set; } = ;
        
[Description(@"The state of charge is evaluated based on the maximum capacity defined in the next field.")]
[JsonProperty(@"The state of charge is evaluated based on the maximum capacity defined in the next field.")]
public System.Single InitialFractionalStateOfCharge { get; set; } = 0.5;
        
[JsonProperty(@"")]
public System.Single DcToDcChargingEfficiency { get; set; } = 0.95;
        
[JsonProperty(@"")]
public System.Single BatteryMass { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single BatterySurfaceArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single BatterySpecificHeatCapacity { get; set; } = 1500;
        
[JsonProperty(@"")]
public System.Single HeatTransferCoefficientBetweenBatteryAndAmbient { get; set; } = 7.5;
        
[Description(@"Most users should not need to change this value.")]
[JsonProperty(@"Most users should not need to change this value.")]
public System.Single FullyChargedCellVoltage { get; set; } = 4.2;
        
[Description(@"Most users should not need to change this value.")]
[JsonProperty(@"Most users should not need to change this value.")]
public System.Single CellVoltageAtEndOfExponentialZone { get; set; } = 3.53;
        
[Description(@"Most users should not need to change this value.")]
[JsonProperty(@"Most users should not need to change this value.")]
public System.Single CellVoltageAtEndOfNominalZone { get; set; } = 3.342;
        
[Description(@"Most users should not need to change this value.")]
[JsonProperty(@"Most users should not need to change this value.")]
public System.Single DefaultNominalCellVoltage { get; set; } = 3.342;
        
[Description(@"Most users should not need to change this value.")]
[JsonProperty(@"Most users should not need to change this value.")]
public System.Single FullyChargedCellCapacity { get; set; } = 3.2;
        
[Description(@"Most users should not need to change this value.")]
[JsonProperty(@"Most users should not need to change this value.")]
public System.Single FractionOfCellCapacityRemovedAtTheEndOfExponentialZone { get; set; } = 0.8075;
        
[Description(@"Most users should not need to change this value.")]
[JsonProperty(@"Most users should not need to change this value.")]
public System.Single FractionOfCellCapacityRemovedAtTheEndOfNominalZone { get; set; } = 0.976875;
        
[Description(@"Most users should not need to change this value.")]
[JsonProperty(@"Most users should not need to change this value.")]
public System.Single ChargeRateAtWhichVoltageVsCapacityCurveWasGenerated { get; set; } = 1;
        
[Description(@"for a single cell Most users should not need to change this value.")]
[JsonProperty(@"for a single cell Most users should not need to change this value.")]
public System.Single BatteryCellInternalElectricalResistance { get; set; } = 0.09;
    }
    
    public enum LifetimeModelType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("KandlerSmith")]
        KandlerSmith = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    [Description("a list of meters that can be reported are available after a run on the meter dict" +
        "ionary file (.mdd) if the Output:VariableDictionary has been requested.")]
    [JsonObject("ElectricLoadCenter:Transformer")]
    public class ElectricLoadCenter_Transformer
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"A transformer can be used to transfer electric energy from utility grid to building (PowerInFromGrid)or from building on-site generation to the grid (PowerOutToGrid) or within a load center to match generation to the facility service main panel (LoadCenterPowerConditioning)")]
[JsonProperty(@"A transformer can be used to transfer electric energy from utility grid to building (PowerInFromGrid)or from building on-site generation to the grid (PowerOutToGrid) or within a load center to match generation to the facility service main panel (LoadCenterPowerConditioning)")]
public YesNoDefault TransformerUsage { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "PowerInFromGrid");
        
[Description(@"Enter name of zone to receive transformer losses as heat if blank then transformer losses are dissipated to outdoors")]
[JsonProperty(@"Enter name of zone to receive transformer losses as heat if blank then transformer losses are dissipated to outdoors")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RadiativeFraction { get; set; } = 0;
        
[Description(@"the unit is VA, instead of kVA as usually shown on transformer nameplates.")]
[JsonProperty(@"the unit is VA, instead of kVA as usually shown on transformer nameplates.")]
public System.Single RatedCapacity { get; set; } = ;
        
[Description(@"Must be single or three phase transformer. NOT used in the current model.")]
[JsonProperty(@"Must be single or three phase transformer. NOT used in the current model.")]
public System.String Phase { get; set; } = (System.String)3;
        
[Description(@"Winding material used by the transformer.")]
[JsonProperty(@"Winding material used by the transformer.")]
public YesNoDefault ConductorMaterial { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Aluminum");
        
[JsonProperty(@"")]
public System.Single FullLoadTemperatureRise { get; set; } = 150;
        
[JsonProperty(@"")]
public System.Single FractionOfEddyCurrentLosses { get; set; } = 0.1;
        
[Description(@"User can define transformer performance by specifying load and no load losses at rated conditions or nameplate efficiency and maximum efficiency")]
[JsonProperty(@"User can define transformer performance by specifying load and no load losses at rated conditions or nameplate efficiency and maximum efficiency")]
public YesNoDefault PerformanceInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "RatedLosses");
        
[Description(@"Only required when RatedLosses is the performance input method")]
[JsonProperty(@"Only required when RatedLosses is the performance input method")]
public System.Single RatedNoLoadLoss { get; set; } = ;
        
[Description(@"Only required when RatedLosses is the performance input method")]
[JsonProperty(@"Only required when RatedLosses is the performance input method")]
public System.Single RatedLoadLoss { get; set; } = ;
        
[Description(@"Only required when NominalEfficiency is the performance input method")]
[JsonProperty(@"Only required when NominalEfficiency is the performance input method")]
public System.Single NameplateEfficiency { get; set; } = 0.98;
        
[Description(@"Percentage of the rated capacity at which the nameplate efficiency is defined Only required when NominalEfficiency is the performance input method")]
[JsonProperty(@"Percentage of the rated capacity at which the nameplate efficiency is defined Only required when NominalEfficiency is the performance input method")]
public System.Single PerUnitLoadForNameplateEfficiency { get; set; } = 0.35;
        
[Description(@"Conductor operating temperature at which the nameplate efficiency is defined Only required when NominalEfficiency is the performance input method")]
[JsonProperty(@"Conductor operating temperature at which the nameplate efficiency is defined Only required when NominalEfficiency is the performance input method")]
public System.Single ReferenceTemperatureForNameplateEfficiency { get; set; } = 75;
        
[Description(@"Percentage of the rate capacity at which the maximum efficiency is obtained Only required when NominalEfficiency is the performance input method")]
[JsonProperty(@"Percentage of the rate capacity at which the maximum efficiency is obtained Only required when NominalEfficiency is the performance input method")]
public System.Single PerUnitLoadForMaximumEfficiency { get; set; } = ;
        
[Description(@"Only required when the transformer is used for power in from the utility grid")]
[JsonProperty(@"Only required when the transformer is used for power in from the utility grid")]
public YesNoDefault ConsiderTransformerLossForUtilityCost { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public System.String Meters { get; set; } = "";
    }
    
    public enum TransformerUsageType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LoadCenterPowerConditioning")]
        LoadCenterPowerConditioning = 1,
        
        [JsonProperty("PowerInFromGrid")]
        PowerInFromGrid = 2,
        
        [JsonProperty("PowerOutToGrid")]
        PowerOutToGrid = 3,
    }
    
    public enum ConductorMaterialType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Aluminum")]
        Aluminum = 1,
        
        [JsonProperty("Copper")]
        Copper = 2,
    }
    
    public enum PerformanceInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("NominalEfficiency")]
        NominalEfficiency = 1,
        
        [JsonProperty("RatedLosses")]
        RatedLosses = 2,
    }
    
    [Description("Describes a subpanel a list of meters that can be reported are available after a " +
        "run on the meter dictionary file (.mdd) if the Output:VariableDictionary has bee" +
        "n requested.")]
    [JsonObject("ElectricLoadCenter:Distribution")]
    public class ElectricLoadCenter_Distribution
    {
        
[Description(@"Name of an ElectricLoadCenter:Generators object")]
[JsonProperty(@"Name of an ElectricLoadCenter:Generators object")]
public System.String GeneratorListName { get; set; } = "";
        
[Description(@"Determines how generators are to be controlled Required if Generator List is entered.")]
[JsonProperty(@"Determines how generators are to be controlled Required if Generator List is entered.")]
public YesNoDefault GeneratorOperationSchemeType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single GeneratorDemandLimitSchemePurchasedElectricDemandLimit { get; set; } = ;
        
[Description(@"required when Generator Operation Scheme Type=TrackSchedule schedule values in Watts")]
[JsonProperty(@"required when Generator Operation Scheme Type=TrackSchedule schedule values in Watts")]
public System.String GeneratorTrackScheduleNameSchemeScheduleName { get; set; } = "";
        
[Description(@"required when Generator Operation Scheme Type=TrackMeter")]
[JsonProperty(@"required when Generator Operation Scheme Type=TrackMeter")]
public System.String GeneratorTrackMeterSchemeMeterName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ElectricalBussType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AlternatingCurrent");
        
[Description(@"required when Electrical Buss Type=DirectCurrentWithInverter, DirectCurrentWithInverterDCStorage, or DirectCurrentWithInverterACStorage")]
[JsonProperty(@"required when Electrical Buss Type=DirectCurrentWithInverter, DirectCurrentWithInverterDCStorage, or DirectCurrentWithInverterACStorage")]
public System.String InverterName { get; set; } = "";
        
[Description(@"required when Electrical Buss Type=AlternatingCurrentWithStorage, DirectCurrentWithInverterDCStorage, or DirectCurrentWithInverterACStorage")]
[JsonProperty(@"required when Electrical Buss Type=AlternatingCurrentWithStorage, DirectCurrentWithInverterDCStorage, or DirectCurrentWithInverterACStorage")]
public System.String ElectricalStorageObjectName { get; set; } = "";
        
[Description(@"required when power needs to be output from on-site generation or storage to the grid via transformer")]
[JsonProperty(@"required when power needs to be output from on-site generation or storage to the grid via transformer")]
public System.String TransformerObjectName { get; set; } = "";
        
[Description(@"Select method to govern how storage charge and discharge is controlled TrackFacilityElectricDemandStoreExcessOnSite indicates that storage control will follow the facility power demand while accounting for any on-site generation. Only excess on site generation  gets stored (legacy behavior). TrackMeterDemandStoreExcessOnSite indicates that storage discharge control will follow an electric meter named in the field called Storage Control Track Meter Name. This scheme is similiar to TrackFacilityElectricDemandStoreExcessOnSite except that instead of the main facility electric meter, the control is based off of a user-selected meter. TrackChargeDischargeSchedules indicates that control will follow the charging and discharging power and schedules defined in the fields called Maximum Storage Charge Grid Supply Power, Storage Charge Grid Supply Power Fraction Schedule Name, Design Storage Discharge Grid Export Power, and Storage Discharge Grid Export Fraction Schedule Name. FacilityDemandLeveling indicates that storage control will attempt to control the facility's power demand drawn from the utility service to a prescribed level. The target utility demand is entered in the fields called Storage Control Utility Demand Limit and Storage Control Utility Demand Limit Fraction Schedule Name This scheme first accounts for any on-site generation and during times of high use will discharge storage to reduce facility grid demand to meet the target level and during times of low use will charge storage from the grid to increase facility grid demand to meet the target level.")]
[JsonProperty(@"Select method to govern how storage charge and discharge is controlled TrackFacilityElectricDemandStoreExcessOnSite indicates that storage control will follow the facility power demand while accounting for any on-site generation. Only excess on site generation  gets stored (legacy behavior). TrackMeterDemandStoreExcessOnSite indicates that storage discharge control will follow an electric meter named in the field called Storage Control Track Meter Name. This scheme is similiar to TrackFacilityElectricDemandStoreExcessOnSite except that instead of the main facility electric meter, the control is based off of a user-selected meter. TrackChargeDischargeSchedules indicates that control will follow the charging and discharging power and schedules defined in the fields called Maximum Storage Charge Grid Supply Power, Storage Charge Grid Supply Power Fraction Schedule Name, Design Storage Discharge Grid Export Power, and Storage Discharge Grid Export Fraction Schedule Name. FacilityDemandLeveling indicates that storage control will attempt to control the facility's power demand drawn from the utility service to a prescribed level. The target utility demand is entered in the fields called Storage Control Utility Demand Limit and Storage Control Utility Demand Limit Fraction Schedule Name This scheme first accounts for any on-site generation and during times of high use will discharge storage to reduce facility grid demand to meet the target level and during times of low use will charge storage from the grid to increase facility grid demand to meet the target level.")]
public YesNoDefault StorageOperationScheme { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "TrackFacilityElectricDemandStoreExcessOnSite");
        
[Description(@"required when Storage Operation Scheme is set to TrackMeterDemandStoreExcessOnSite.")]
[JsonProperty(@"required when Storage Operation Scheme is set to TrackMeterDemandStoreExcessOnSite.")]
public System.String StorageControlTrackMeterName { get; set; } = "";
        
[Description(@"Name of an ElectricLoadCenter:Storage:Converter used to convert AC to DC when charging DC storage from grid supply. A converter is expected when using Storage Operation Schemes FacilityDemandLeveling or TrackChargeDischargeSchedules A single bidirectional device will reference both an inverter object (DC to AC) and a converter object (AC to DC).")]
[JsonProperty(@"Name of an ElectricLoadCenter:Storage:Converter used to convert AC to DC when charging DC storage from grid supply. A converter is expected when using Storage Operation Schemes FacilityDemandLeveling or TrackChargeDischargeSchedules A single bidirectional device will reference both an inverter object (DC to AC) and a converter object (AC to DC).")]
public System.String StorageConverterObjectName { get; set; } = "";
        
[Description(@"Fraction of storage capacity used as upper limit for controlling charging, for all storage operation schemes.")]
[JsonProperty(@"Fraction of storage capacity used as upper limit for controlling charging, for all storage operation schemes.")]
public System.Single MaximumStorageStateOfChargeFraction { get; set; } = 1;
        
[Description(@"Fraction of storage capacity used as lower limit for controlling discharging, for all storage operation schemes.")]
[JsonProperty(@"Fraction of storage capacity used as lower limit for controlling discharging, for all storage operation schemes.")]
public System.Single MinimumStorageStateOfChargeFraction { get; set; } = 0;
        
[Description(@"Maximum rate that electric power can be charged into storage. Storage charging adjusted downward for conversion losses. Rate is modified by fractional values in the schedule named in the next field. Required field when using Storage Operation Schemes FacilityDemandLeveling or TrackChargeDischargeSchedules.")]
[JsonProperty(@"Maximum rate that electric power can be charged into storage. Storage charging adjusted downward for conversion losses. Rate is modified by fractional values in the schedule named in the next field. Required field when using Storage Operation Schemes FacilityDemandLeveling or TrackChargeDischargeSchedules.")]
public System.Single DesignStorageControlChargePower { get; set; } = ;
        
[Description(@"Controls timing and magnitude of charging storage. Required field if Storage Operation Scheme is set to TrackChargeDischargeSchedules. Schedule values should be fractions from 0.0 to 1.0, inclusive.")]
[JsonProperty(@"Controls timing and magnitude of charging storage. Required field if Storage Operation Scheme is set to TrackChargeDischargeSchedules. Schedule values should be fractions from 0.0 to 1.0, inclusive.")]
public System.String StorageChargePowerFractionScheduleName { get; set; } = "";
        
[Description(@"Maximum rate that electric power can be discharged from storage. Rate is modified by fractional values in the schedule named in the next field. Required field when using Storage Operation Schemes FacilityDemandLeveling or TrackChargeDischargeSchedules.")]
[JsonProperty(@"Maximum rate that electric power can be discharged from storage. Rate is modified by fractional values in the schedule named in the next field. Required field when using Storage Operation Schemes FacilityDemandLeveling or TrackChargeDischargeSchedules.")]
public System.Single DesignStorageControlDischargePower { get; set; } = ;
        
[Description(@"Controls timing and magnitude of discharging storage Required field if Storage Operation Scheme is set to TrackChargeDischargeSchedules. Schedule values should be fractions from 0.0 to 1.0, inclusive.")]
[JsonProperty(@"Controls timing and magnitude of discharging storage Required field if Storage Operation Scheme is set to TrackChargeDischargeSchedules. Schedule values should be fractions from 0.0 to 1.0, inclusive.")]
public System.String StorageDischargePowerFractionScheduleName { get; set; } = "";
        
[Description(@"Target utility service demand power for discharge control. Storage draws are adjusted upwards for conversion losses. Required field for FacilityDemandLeveling storage operation scheme")]
[JsonProperty(@"Target utility service demand power for discharge control. Storage draws are adjusted upwards for conversion losses. Required field for FacilityDemandLeveling storage operation scheme")]
public System.Single StorageControlUtilityDemandTarget { get; set; } = ;
        
[Description(@"Modifies the target utility service demand power over time. Schedule values should be fractions from -1.0 to 1.0, inclusive. if omitted a schedule value of 1.0 is used. Negative values indicate export to grid Schedule is used if Storage Operation Scheme is set to FacilityDemandLeveling.")]
[JsonProperty(@"Modifies the target utility service demand power over time. Schedule values should be fractions from -1.0 to 1.0, inclusive. if omitted a schedule value of 1.0 is used. Negative values indicate export to grid Schedule is used if Storage Operation Scheme is set to FacilityDemandLeveling.")]
public System.String StorageControlUtilityDemandTargetFractionScheduleName { get; set; } = "";
    }
    
    public enum GeneratorOperationSchemeTypeType
    {
        
        [JsonProperty("Baseload")]
        Baseload = 0,
        
        [JsonProperty("DemandLimit")]
        DemandLimit = 1,
        
        [JsonProperty("FollowThermal")]
        FollowThermal = 2,
        
        [JsonProperty("FollowThermalLimitElectrical")]
        FollowThermalLimitElectrical = 3,
        
        [JsonProperty("TrackElectrical")]
        TrackElectrical = 4,
        
        [JsonProperty("TrackMeter")]
        TrackMeter = 5,
        
        [JsonProperty("TrackSchedule")]
        TrackSchedule = 6,
    }
    
    public enum ElectricalBussTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlternatingCurrent")]
        AlternatingCurrent = 1,
        
        [JsonProperty("AlternatingCurrentWithStorage")]
        AlternatingCurrentWithStorage = 2,
        
        [JsonProperty("DirectCurrentWithInverter")]
        DirectCurrentWithInverter = 3,
        
        [JsonProperty("DirectCurrentWithInverterACStorage")]
        DirectCurrentWithInverterACStorage = 4,
        
        [JsonProperty("DirectCurrentWithInverterDCStorage")]
        DirectCurrentWithInverterDCStorage = 5,
    }
    
    public enum StorageOperationSchemeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FacilityDemandLeveling")]
        FacilityDemandLeveling = 1,
        
        [JsonProperty("TrackChargeDischargeSchedules")]
        TrackChargeDischargeSchedules = 2,
        
        [JsonProperty("TrackFacilityElectricDemandStoreExcessOnSite")]
        TrackFacilityElectricDemandStoreExcessOnSite = 3,
        
        [JsonProperty("TrackMeterDemandStoreExcessOnSite")]
        TrackMeterDemandStoreExcessOnSite = 4,
    }
    
    [Description("This model is for converting AC to DC for grid-supplied charging of DC storage")]
    [JsonObject("ElectricLoadCenter:Storage:Converter")]
    public class ElectricLoadCenter_Storage_Converter
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the converter is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the converter is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"SimpleFixed indicates power conversion losses are based on Simple Fixed Efficiency FunctionOfPower indicates power conversion losses are a function of normalized power using a curve or table.")]
[JsonProperty(@"SimpleFixed indicates power conversion losses are based on Simple Fixed Efficiency FunctionOfPower indicates power conversion losses are a function of normalized power using a curve or table.")]
public YesNoDefault PowerConversionEfficiencyMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SimpleFixed");
        
[Description(@"Constant efficiency for conversion of AC to DC at all power levels. Field is only used when Power Conversion Efficiency Method is set to SimpleFixed.")]
[JsonProperty(@"Constant efficiency for conversion of AC to DC at all power levels. Field is only used when Power Conversion Efficiency Method is set to SimpleFixed.")]
public System.Single SimpleFixedEfficiency { get; set; } = 0.95;
        
[Description(@"Required field when Power Conversion Efficiency Method is set to FunctionOfPower.")]
[JsonProperty(@"Required field when Power Conversion Efficiency Method is set to FunctionOfPower.")]
public System.Single DesignMaximumContinuousInputPower { get; set; } = ;
        
[Description(@"Curve or table with a single independent variable that describes efficiency as a function of normalized power. The "x" input for curve or table is the ratio of current input power divided by design power in the previous field Required field when Power Conversion Efficiency Method is set to FunctionOfPower.")]
[JsonProperty(@"Curve or table with a single independent variable that describes efficiency as a function of normalized power. The "x" input for curve or table is the ratio of current input power divided by design power in the previous field Required field when Power Conversion Efficiency Method is set to FunctionOfPower.")]
public System.String EfficiencyFunctionOfPowerCurveName { get; set; } = "";
        
[Description(@"Optional standby power consumed when converter is available but no power is being conditioned.")]
[JsonProperty(@"Optional standby power consumed when converter is available but no power is being conditioned.")]
public System.Single AncillaryPowerConsumedInStandby { get; set; } = ;
        
[Description(@"enter name of zone to receive converter losses as heat if blank then converter is assumed to be outdoors")]
[JsonProperty(@"enter name of zone to receive converter losses as heat if blank then converter is assumed to be outdoors")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"fraction of zone heat gains treated as thermal radiation")]
[JsonProperty(@"fraction of zone heat gains treated as thermal radiation")]
public System.Single RadiativeFraction { get; set; } = ;
    }
    
    public enum PowerConversionEfficiencyMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FunctionOfPower")]
        FunctionOfPower = 1,
        
        [JsonProperty("SimpleFixed")]
        SimpleFixed = 2,
    }
}
namespace EnergyPlus.EnergyManagementSystemEMS
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Declares EMS variable as a sensor a list of output variables and meters that can " +
        "be reported are available after a run on the report (.rdd) or meter dictionary f" +
        "ile (.mdd) if the Output:VariableDictionary has been requested.")]
    [JsonObject("EnergyManagementSystem:Sensor")]
    public class EnergyManagementSystem_Sensor
    {
        
[JsonProperty(@"")]
public System.String OutputVariableOrOutputMeterIndexKeyName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutputVariableOrOutputMeterName { get; set; } = "";
    }
    
    [Description("Hardware portion of EMS used to set up actuators in the model")]
    [JsonObject("EnergyManagementSystem:Actuator")]
    public class EnergyManagementSystem_Actuator
    {
        
[JsonProperty(@"")]
public System.String ActuatedComponentUniqueName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ActuatedComponentType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ActuatedComponentControlType { get; set; } = "";
    }
    
    [Description("Input EMS program. a program needs a name a description of when it should be call" +
        "ed and then lines of program code for EMS Runtime language")]
    [JsonObject("EnergyManagementSystem:ProgramCallingManager")]
    public class EnergyManagementSystem_ProgramCallingManager
    {
        
[JsonProperty(@"")]
public YesNoDefault EnergyplusModelCallingPoint { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String Programs { get; set; } = "";
    }
    
    public enum EnergyplusModelCallingPointType
    {
        
        [JsonProperty("AfterComponentInputReadIn")]
        AfterComponentInputReadIn = 0,
        
        [JsonProperty("AfterNewEnvironmentWarmUpIsComplete")]
        AfterNewEnvironmentWarmUpIsComplete = 1,
        
        [JsonProperty("AfterPredictorAfterHVACManagers")]
        AfterPredictorAfterHVACManagers = 2,
        
        [JsonProperty("AfterPredictorBeforeHVACManagers")]
        AfterPredictorBeforeHVACManagers = 3,
        
        [JsonProperty("BeginNewEnvironment")]
        BeginNewEnvironment = 4,
        
        [JsonProperty("BeginTimestepBeforePredictor")]
        BeginTimestepBeforePredictor = 5,
        
        [JsonProperty("BeginZoneTimestepAfterInitHeatBalance")]
        BeginZoneTimestepAfterInitHeatBalance = 6,
        
        [JsonProperty("BeginZoneTimestepBeforeInitHeatBalance")]
        BeginZoneTimestepBeforeInitHeatBalance = 7,
        
        [JsonProperty("BeginZoneTimestepBeforeSetCurrentWeather")]
        BeginZoneTimestepBeforeSetCurrentWeather = 8,
        
        [JsonProperty("EndOfSystemSizing")]
        EndOfSystemSizing = 9,
        
        [JsonProperty("EndOfSystemTimestepAfterHVACReporting")]
        EndOfSystemTimestepAfterHVACReporting = 10,
        
        [JsonProperty("EndOfSystemTimestepBeforeHVACReporting")]
        EndOfSystemTimestepBeforeHVACReporting = 11,
        
        [JsonProperty("EndOfZoneSizing")]
        EndOfZoneSizing = 12,
        
        [JsonProperty("EndOfZoneTimestepAfterZoneReporting")]
        EndOfZoneTimestepAfterZoneReporting = 13,
        
        [JsonProperty("EndOfZoneTimestepBeforeZoneReporting")]
        EndOfZoneTimestepBeforeZoneReporting = 14,
        
        [JsonProperty("InsideHVACSystemIterationLoop")]
        InsideHVACSystemIterationLoop = 15,
        
        [JsonProperty("UnitarySystemSizing")]
        UnitarySystemSizing = 16,
        
        [JsonProperty("UserDefinedComponentModel")]
        UserDefinedComponentModel = 17,
    }
    
    [Description("This input defines an Erl program Each field after the name is a line of EMS Runt" +
        "ime Language")]
    [JsonObject("EnergyManagementSystem:Program")]
    public class EnergyManagementSystem_Program
    {
        
[JsonProperty(@"")]
public System.String Lines { get; set; } = "";
    }
    
    [Description("This input defines an Erl program subroutine Each field after the name is a line " +
        "of EMS Runtime Language")]
    [JsonObject("EnergyManagementSystem:Subroutine")]
    public class EnergyManagementSystem_Subroutine
    {
        
[JsonProperty(@"")]
public System.String Lines { get; set; } = "";
    }
    
    [Description("Declares Erl variable as having global scope No spaces allowed in names used for " +
        "Erl variables")]
    [JsonObject("EnergyManagementSystem:GlobalVariable")]
    public class EnergyManagementSystem_GlobalVariable
    {
        
[JsonProperty(@"")]
public System.String Variables { get; set; } = "";
    }
    
    [Description("This object sets up an EnergyPlus output variable from an Erl variable")]
    [JsonObject("EnergyManagementSystem:OutputVariable")]
    public class EnergyManagementSystem_OutputVariable
    {
        
[Description(@"must be an acceptable EMS variable")]
[JsonProperty(@"must be an acceptable EMS variable")]
public System.String EmsVariableName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault TypeOfDataInVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault UpdateFrequency { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"optional for global scope variables, required for local scope variables")]
[JsonProperty(@"optional for global scope variables, required for local scope variables")]
public System.String EmsProgramOrSubroutineName { get; set; } = "";
        
[Description(@"optional but will result in dimensionless units for blank EnergyPlus units are standard SI units")]
[JsonProperty(@"optional but will result in dimensionless units for blank EnergyPlus units are standard SI units")]
public System.String Units { get; set; } = "";
    }
    
    public enum TypeOfDataInVariableType
    {
        
        [JsonProperty("Averaged")]
        Averaged = 0,
        
        [JsonProperty("Summed")]
        Summed = 1,
    }
    
    public enum UpdateFrequencyType
    {
        
        [JsonProperty("SystemTimestep")]
        SystemTimestep = 0,
        
        [JsonProperty("ZoneTimestep")]
        ZoneTimestep = 1,
    }
    
    [Description("This object sets up an EnergyPlus output variable from an Erl variable")]
    [JsonObject("EnergyManagementSystem:MeteredOutputVariable")]
    public class EnergyManagementSystem_MeteredOutputVariable
    {
        
[Description(@"must be an acceptable EMS variable, no spaces")]
[JsonProperty(@"must be an acceptable EMS variable, no spaces")]
public System.String EmsVariableName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault UpdateFrequency { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"optional for global scope variables, required for local scope variables")]
[JsonProperty(@"optional for global scope variables, required for local scope variables")]
public System.String EmsProgramOrSubroutineName { get; set; } = "";
        
[Description(@"choose the type of fuel, water, electricity, pollution or heat rate that should be metered.")]
[JsonProperty(@"choose the type of fuel, water, electricity, pollution or heat rate that should be metered.")]
public YesNoDefault ResourceType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"choose a general classification, building (internal services), HVAC (air systems), or plant (hydronic systems), or system")]
[JsonProperty(@"choose a general classification, building (internal services), HVAC (air systems), or plant (hydronic systems), or system")]
public YesNoDefault GroupType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"choose how the metered output should be classified for end-use category")]
[JsonProperty(@"choose how the metered output should be classified for end-use category")]
public YesNoDefault EndUseCategory { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table. enter a user-defined subcategory for this metered output")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table. enter a user-defined subcategory for this metered output")]
public System.String EndUseSubcategory { get; set; } = "";
        
[Description(@"optional but will result in dimensionless units for blank EnergyPlus units are standard SI units")]
[JsonProperty(@"optional but will result in dimensionless units for blank EnergyPlus units are standard SI units")]
public System.String Units { get; set; } = "";
    }
    
    public enum UpdateFrequencyType
    {
        
        [JsonProperty("SystemTimestep")]
        SystemTimestep = 0,
        
        [JsonProperty("ZoneTimestep")]
        ZoneTimestep = 1,
    }
    
    public enum ResourceTypeType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("CondensateWaterCollected")]
        CondensateWaterCollected = 1,
        
        [JsonProperty("Diesel")]
        Diesel = 2,
        
        [JsonProperty("DistrictCooling")]
        DistrictCooling = 3,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 4,
        
        [JsonProperty("Electricity")]
        Electricity = 5,
        
        [JsonProperty("ElectricityProducedOnSite")]
        ElectricityProducedOnSite = 6,
        
        [JsonProperty("EnergyTransfer")]
        EnergyTransfer = 7,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 8,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 9,
        
        [JsonProperty("Gasoline")]
        Gasoline = 10,
        
        [JsonProperty("MainsWaterSupply")]
        MainsWaterSupply = 11,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 12,
        
        [JsonProperty("OnSiteWaterProduced")]
        OnSiteWaterProduced = 13,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 14,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 15,
        
        [JsonProperty("Propane")]
        Propane = 16,
        
        [JsonProperty("RainWaterCollected")]
        RainWaterCollected = 17,
        
        [JsonProperty("SolarAirHeating")]
        SolarAirHeating = 18,
        
        [JsonProperty("SolarWaterHeating")]
        SolarWaterHeating = 19,
        
        [JsonProperty("Steam")]
        Steam = 20,
        
        [JsonProperty("WaterUse")]
        WaterUse = 21,
        
        [JsonProperty("WellWaterDrawn")]
        WellWaterDrawn = 22,
    }
    
    public enum GroupTypeType
    {
        
        [JsonProperty("Building")]
        Building = 0,
        
        [JsonProperty("HVAC")]
        HVAC = 1,
        
        [JsonProperty("Plant")]
        Plant = 2,
        
        [JsonProperty("System")]
        System = 3,
    }
    
    public enum EndUseCategoryType
    {
        
        [JsonProperty("Baseboard")]
        Baseboard = 0,
        
        [JsonProperty("Boilers")]
        Boilers = 1,
        
        [JsonProperty("Chillers")]
        Chillers = 2,
        
        [JsonProperty("Cooling")]
        Cooling = 3,
        
        [JsonProperty("CoolingCoils")]
        CoolingCoils = 4,
        
        [JsonProperty("ExteriorEquipment")]
        ExteriorEquipment = 5,
        
        [JsonProperty("ExteriorLights")]
        ExteriorLights = 6,
        
        [JsonProperty("Fans")]
        Fans = 7,
        
        [JsonProperty("HeatRecovery")]
        HeatRecovery = 8,
        
        [JsonProperty("HeatRecoveryForCooling")]
        HeatRecoveryForCooling = 9,
        
        [JsonProperty("HeatRecoveryForHeating")]
        HeatRecoveryForHeating = 10,
        
        [JsonProperty("HeatRejection")]
        HeatRejection = 11,
        
        [JsonProperty("Heating")]
        Heating = 12,
        
        [JsonProperty("HeatingCoils")]
        HeatingCoils = 13,
        
        [JsonProperty("Humidifier")]
        Humidifier = 14,
        
        [JsonProperty("InteriorEquipment")]
        InteriorEquipment = 15,
        
        [JsonProperty("InteriorLights")]
        InteriorLights = 16,
        
        [JsonProperty("OnSiteGeneration")]
        OnSiteGeneration = 17,
        
        [JsonProperty("Pumps")]
        Pumps = 18,
        
        [JsonProperty("Refrigeration")]
        Refrigeration = 19,
        
        [JsonProperty("WaterSystems")]
        WaterSystems = 20,
    }
    
    [Description("This object sets up an EMS trend variable from an Erl variable A trend variable l" +
        "ogs values across timesteps")]
    [JsonObject("EnergyManagementSystem:TrendVariable")]
    public class EnergyManagementSystem_TrendVariable
    {
        
[Description(@"must be a global scope EMS variable")]
[JsonProperty(@"must be a global scope EMS variable")]
public System.String EmsVariableName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfTimestepsToBeLogged { get; set; } = ;
    }
    
    [Description("Declares EMS variable as an internal data variable")]
    [JsonObject("EnergyManagementSystem:InternalVariable")]
    public class EnergyManagementSystem_InternalVariable
    {
        
[JsonProperty(@"")]
public System.String InternalDataIndexKeyName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String InternalDataType { get; set; } = "";
    }
    
    [Description("Declares EMS variable that identifies a curve or table")]
    [JsonObject("EnergyManagementSystem:CurveOrTableIndexVariable")]
    public class EnergyManagementSystem_CurveOrTableIndexVariable
    {
        
[JsonProperty(@"")]
public System.String CurveOrTableObjectName { get; set; } = "";
    }
    
    [Description("Declares EMS variable that identifies a construction")]
    [JsonObject("EnergyManagementSystem:ConstructionIndexVariable")]
    public class EnergyManagementSystem_ConstructionIndexVariable
    {
        
[JsonProperty(@"")]
public System.String ConstructionObjectName { get; set; } = "";
    }
}
namespace EnergyPlus.EvaporativeCoolers
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Direct evaporative cooler with rigid media evaporative pad and recirculating wate" +
        "r pump. This model has no controls other than its availability schedule.")]
    [JsonObject("EvaporativeCooler:Direct:CelDekPad")]
    public class EvaporativeCooler_Direct_CelDekPad
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DirectPadArea { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String DirectPadDepth { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single RecirculatingWaterPumpPowerConsumption { get; set; } = ;
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"This field is not currently used and can be left blank")]
[JsonProperty(@"This field is not currently used and can be left blank")]
public System.String ControlType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterSupplyStorageTankName { get; set; } = "";
    }
    
    [Description("Indirect evaporative cooler with rigid media evaporative pad, recirculating water" +
        " pump, and secondary air fan. This model has no controls other than its availabi" +
        "lity schedule.")]
    [JsonObject("EvaporativeCooler:Indirect:CelDekPad")]
    public class EvaporativeCooler_Indirect_CelDekPad
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DirectPadArea { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String DirectPadDepth { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single RecirculatingWaterPumpPowerConsumption { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SecondaryAirFanFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SecondaryAirFanTotalEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SecondaryAirFanDeltaPressure { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single IndirectHeatExchangerEffectiveness { get; set; } = ;
        
[JsonProperty(@"")]
public System.String PrimaryAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PrimaryAirOutletNodeName { get; set; } = "";
        
[Description(@"This field is not currently used and can be left blank")]
[JsonProperty(@"This field is not currently used and can be left blank")]
public System.String ControlType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterSupplyStorageTankName { get; set; } = "";
        
[Description(@"Enter the name of an outdoor air node")]
[JsonProperty(@"Enter the name of an outdoor air node")]
public System.String SecondaryAirInletNodeName { get; set; } = "";
    }
    
    [Description("Indirect evaporative cooler with wetted coil, recirculating water pump, and secon" +
        "dary air fan. This model has no controls other than its availability schedule.")]
    [JsonObject("EvaporativeCooler:Indirect:WetCoil")]
    public class EvaporativeCooler_Indirect_WetCoil
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single CoilMaximumEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoilFlowRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RecirculatingWaterPumpPowerConsumption { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SecondaryAirFanFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SecondaryAirFanTotalEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SecondaryAirFanDeltaPressure { get; set; } = ;
        
[JsonProperty(@"")]
public System.String PrimaryAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PrimaryAirOutletNodeName { get; set; } = "";
        
[Description(@"This field is not currently used and can be left blank")]
[JsonProperty(@"This field is not currently used and can be left blank")]
public System.String ControlType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterSupplyStorageTankName { get; set; } = "";
        
[Description(@"Enter the name of an outdoor air node")]
[JsonProperty(@"Enter the name of an outdoor air node")]
public System.String SecondaryAirInletNodeName { get; set; } = "";
    }
    
    [Description("Indirect evaporative cooler with user-specified effectiveness (can represent rigi" +
        "d pad or wetted coil), recirculating water pump, and secondary air fan. This mod" +
        "el is controlled to meet the primary air outlet temperature setpoint.")]
    [JsonObject("EvaporativeCooler:Indirect:ResearchSpecial")]
    public class EvaporativeCooler_Indirect_ResearchSpecial
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"wet operation effectiveness with respect to wetbulb depression this is the nominal design wetbulb effectiveness at design air flow rates and water rate")]
[JsonProperty(@"wet operation effectiveness with respect to wetbulb depression this is the nominal design wetbulb effectiveness at design air flow rates and water rate")]
public System.Single CoolerWetbulbDesignEffectiveness { get; set; } = ;
        
[Description(@"this curve modifies the wetbulb effectiveness in the previous field (eff_wb_design) by multiplying the value by the result of this curve, eff_wb = eff_wb_design * func(HXFlowRatio) x = HXFlowRatio = sum of the primary and secondary flow rates divided by the sum of the design flow rates. If this input field is left blank, constant cooler wetbulb effectiveness is assumed. This input field is required in order to use operating range control based on the following three input fields: Evaporative Operation Minimum Limit Secondary Air Drybulb Temperature, Evaporative Operation Maximum Limit Outdoor Wetbulb Temperature, and Dry Operation Maximum Limit Outdoor Drybulb Temperature")]
[JsonProperty(@"this curve modifies the wetbulb effectiveness in the previous field (eff_wb_design) by multiplying the value by the result of this curve, eff_wb = eff_wb_design * func(HXFlowRatio) x = HXFlowRatio = sum of the primary and secondary flow rates divided by the sum of the design flow rates. If this input field is left blank, constant cooler wetbulb effectiveness is assumed. This input field is required in order to use operating range control based on the following three input fields: Evaporative Operation Minimum Limit Secondary Air Drybulb Temperature, Evaporative Operation Maximum Limit Outdoor Wetbulb Temperature, and Dry Operation Maximum Limit Outdoor Drybulb Temperature")]
public System.String WetbulbEffectivenessFlowRatioModifierCurveName { get; set; } = "";
        
[Description(@"dry operation effectiveness with respect to drybulb temperature difference this is the nominal design dryblub effectiveness at design air flow rates, no evaporation water active")]
[JsonProperty(@"dry operation effectiveness with respect to drybulb temperature difference this is the nominal design dryblub effectiveness at design air flow rates, no evaporation water active")]
public System.Single CoolerDrybulbDesignEffectiveness { get; set; } = ;
        
[Description(@"this curve modifies the drybulb effectiveness in the previous field (eff_db_design) by multiplying the value by the result of this curve, eff_db = eff_db_design * f(HXFlowRatio) x = HXFlowRatio = sum of the primary and secondary flow rates divided by the sum of the design flow rates. If this input field is left blank, constant cooler drybulb effectiveness is assumed. This input field is required in order to use operating range control based on the following three input fields: Evaporative Operation Minimum Limit Secondary Air Drybulb Temperature, Evaporative Operation Maximum Limit Outdoor Wetbulb Temperature, and Dry Operation Maximum Limit Outdoor Drybulb Temperature")]
[JsonProperty(@"this curve modifies the drybulb effectiveness in the previous field (eff_db_design) by multiplying the value by the result of this curve, eff_db = eff_db_design * f(HXFlowRatio) x = HXFlowRatio = sum of the primary and secondary flow rates divided by the sum of the design flow rates. If this input field is left blank, constant cooler drybulb effectiveness is assumed. This input field is required in order to use operating range control based on the following three input fields: Evaporative Operation Minimum Limit Secondary Air Drybulb Temperature, Evaporative Operation Maximum Limit Outdoor Wetbulb Temperature, and Dry Operation Maximum Limit Outdoor Drybulb Temperature")]
public System.String DrybulbEffectivenessFlowRatioModifierCurveName { get; set; } = "";
        
[Description(@"This is the nominal design pump power of water recirculation and spray for evaporation at design air flow rates and cooler design effectiveness")]
[JsonProperty(@"This is the nominal design pump power of water recirculation and spray for evaporation at design air flow rates and cooler design effectiveness")]
public System.String RecirculatingWaterPumpDesignPower { get; set; } = (System.String)Autosize;
        
[Description(@"This field is used when the previous field is set to autosize. The pump power is scaled with Secondary Air Design Air Flow Rate. This value was backed out from inputs in energy plus example files. Average Pump Power sizing factor was estimated from pump power and secondary air design flow rates inputs from energyplus example files is about 90.0 [W/(m3/s)] (=90.0 ~ Pump Power / Secondary Air Design Flow Rate). The factor ranges from 55.0 to 150.0 [W/(m3/s)] were noted. The pump power can be sized to zero by setting this factor to zero.")]
[JsonProperty(@"This field is used when the previous field is set to autosize. The pump power is scaled with Secondary Air Design Air Flow Rate. This value was backed out from inputs in energy plus example files. Average Pump Power sizing factor was estimated from pump power and secondary air design flow rates inputs from energyplus example files is about 90.0 [W/(m3/s)] (=90.0 ~ Pump Power / Secondary Air Design Flow Rate). The factor ranges from 55.0 to 150.0 [W/(m3/s)] were noted. The pump power can be sized to zero by setting this factor to zero.")]
public System.Single WaterPumpPowerSizingFactor { get; set; } = 90;
        
[Description(@"this curve modifies the pump power in the previous field by multiplying the design power by the result of this curve. x = ff = flow fraction on the secondary side, secondary air flow rate during operation divided by Secondary Air Design Air Flow Rate. If this input field is left blank, pump power is assumed to be proportional to part load ratio.")]
[JsonProperty(@"this curve modifies the pump power in the previous field by multiplying the design power by the result of this curve. x = ff = flow fraction on the secondary side, secondary air flow rate during operation divided by Secondary Air Design Air Flow Rate. If this input field is left blank, pump power is assumed to be proportional to part load ratio.")]
public System.String WaterPumpPowerModifierCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SecondaryAirDesignFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"This field is used when the previous field is set to autoize. The Primary Design Air Flow Rate is scaled using this factor to calculate the secondary design air flow rate.")]
[JsonProperty(@"This field is used when the previous field is set to autoize. The Primary Design Air Flow Rate is scaled using this factor to calculate the secondary design air flow rate.")]
public System.Single SecondaryAirFlowScalingFactor { get; set; } = 1;
        
[Description(@"This is the fan design power at Secondary Design Air Flow Rate. This is the nominal design power at full speed.")]
[JsonProperty(@"This is the fan design power at Secondary Design Air Flow Rate. This is the nominal design power at full speed.")]
public System.String SecondaryAirFanDesignPower { get; set; } = (System.String)Autosize;
        
[Description(@"This field is used when the previous field is set to autosize. The fan power is scaled with Secondary Air Design Flow Rate. The default value is estimated from 125 Pa fan total pressure and fan total efficiency of 50.0% (250.0 = 125/0.5).")]
[JsonProperty(@"This field is used when the previous field is set to autosize. The fan power is scaled with Secondary Air Design Flow Rate. The default value is estimated from 125 Pa fan total pressure and fan total efficiency of 50.0% (250.0 = 125/0.5).")]
public System.Single SecondaryAirFanSizingSpecificPower { get; set; } = 250;
        
[Description(@"this curve modifies the design fan power in the previous field by multiplying the value by the result of this curve. It should have a value of 1.0 at a x = 1.0. x = ff = flow fraction on the secondary side, secondary air flow rate during operation divided by Secondary Air Design Air Flow Rate. If this input field is left blank, the secondary fan power is assumed to be proportional to part load ratio.")]
[JsonProperty(@"this curve modifies the design fan power in the previous field by multiplying the value by the result of this curve. It should have a value of 1.0 at a x = 1.0. x = ff = flow fraction on the secondary side, secondary air flow rate during operation divided by Secondary Air Design Air Flow Rate. If this input field is left blank, the secondary fan power is assumed to be proportional to part load ratio.")]
public System.String SecondaryAirFanPowerModifierCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PrimaryAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PrimaryAirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PrimaryAirDesignFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single DewpointEffectivenessFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SecondaryAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SecondaryAirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SensorNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ReliefAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterSupplyStorageTankName { get; set; } = "";
        
[Description(@"Rate of drift loss as a fraction of evaporated water flow rate. If this input field is left blank, then zero drift loss is assumed.")]
[JsonProperty(@"Rate of drift loss as a fraction of evaporated water flow rate. If this input field is left blank, then zero drift loss is assumed.")]
public System.Single DriftLossFraction { get; set; } = 0;
        
[Description(@"Characterizes the rate of blowdown in the evaporative cooler. Blowdown is water intentionally drained from the cooler in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. A typical value is 3. If left blank then there is no blowdown.")]
[JsonProperty(@"Characterizes the rate of blowdown in the evaporative cooler. Blowdown is water intentionally drained from the cooler in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. A typical value is 3. If left blank then there is no blowdown.")]
public System.Single BlowdownConcentrationRatio { get; set; } = ;
        
[Description(@"This input field value defines the secondary air inlet node drybulb temperature limits in degreeCelsius. When the secondary side entering air dry bulb temperature drops below this limit, then the evaporative cooler operation mode changes to dry heat exchanger. Users specify their own limits. If this field is left blank, then there is no drybulb temperature lower limit for evaporative cooler operation. If operating range control is desired then this input field and the next two input fields should be specified or all the three should be left blank or left out. If no minimum drybulb temperature limit is desired while there are maximum drybulb and wetbulb temperature limits then specify very low minimum temperature limit value (e.g. -99.0C).")]
[JsonProperty(@"This input field value defines the secondary air inlet node drybulb temperature limits in degreeCelsius. When the secondary side entering air dry bulb temperature drops below this limit, then the evaporative cooler operation mode changes to dry heat exchanger. Users specify their own limits. If this field is left blank, then there is no drybulb temperature lower limit for evaporative cooler operation. If operating range control is desired then this input field and the next two input fields should be specified or all the three should be left blank or left out. If no minimum drybulb temperature limit is desired while there are maximum drybulb and wetbulb temperature limits then specify very low minimum temperature limit value (e.g. -99.0C).")]
public System.Single EvaporativeOperationMinimumLimitSecondaryAirDrybulbTemperature { get; set; } = ;
        
[Description(@"This input field value defines the secondary air inlet node wetbulb temperature limits in degree Celsius. When the secondary side entering air wet bulb temperature exceeds this limit, then the evaporative cooler urns off and does not attempt to do any cooling. If this field is left blank, then there is no wetbulb temperature upper limit for evaporative cooler wet operation mode. If this input field is left blank then, the previous and the next input fields should also be left blank. If no maximum wetbulb temperature limits is desired while there are minimum drybulb and maximum drybulb upper temperature limits then specify very high maximum wetbulb temperature limit value (e.g. 99.0 C).")]
[JsonProperty(@"This input field value defines the secondary air inlet node wetbulb temperature limits in degree Celsius. When the secondary side entering air wet bulb temperature exceeds this limit, then the evaporative cooler urns off and does not attempt to do any cooling. If this field is left blank, then there is no wetbulb temperature upper limit for evaporative cooler wet operation mode. If this input field is left blank then, the previous and the next input fields should also be left blank. If no maximum wetbulb temperature limits is desired while there are minimum drybulb and maximum drybulb upper temperature limits then specify very high maximum wetbulb temperature limit value (e.g. 99.0 C).")]
public System.Single EvaporativeOperationMaximumLimitOutdoorWetbulbTemperature { get; set; } = ;
        
[Description(@"This input field value defines the secondary air inlet node drybulb temperature limits in degree Celsius. When the secondary side entering air drybulb temperature exceeds this limit, then the evaporative cooler will not run in dry operation mode or may be turned off depending on its wetbulb temperature. If this field is left blank, then there is no drybulb temperature maximum limit for evaporative cooler operation. If this input field is left blank then, the previous and the next input fields should also be left blank. If no maximum drybulb temperature limit is desired while there are minimum drybulb and maximum wetbulb upper temperature limits then specify very high maximum drybulb temperature limit value (e.g. 99.0 C).")]
[JsonProperty(@"This input field value defines the secondary air inlet node drybulb temperature limits in degree Celsius. When the secondary side entering air drybulb temperature exceeds this limit, then the evaporative cooler will not run in dry operation mode or may be turned off depending on its wetbulb temperature. If this field is left blank, then there is no drybulb temperature maximum limit for evaporative cooler operation. If this input field is left blank then, the previous and the next input fields should also be left blank. If no maximum drybulb temperature limit is desired while there are minimum drybulb and maximum wetbulb upper temperature limits then specify very high maximum drybulb temperature limit value (e.g. 99.0 C).")]
public System.Single DryOperationMaximumLimitOutdoorDrybulbTemperature { get; set; } = ;
    }
    
    [Description("Direct evaporative cooler with user-specified effectiveness (can represent rigid " +
        "pad or similar media), and recirculating water pump, and secondary air fan. This" +
        " model is controlled to meet the primary air outlet temperature setpoint.")]
    [JsonObject("EvaporativeCooler:Direct:ResearchSpecial")]
    public class EvaporativeCooler_Direct_ResearchSpecial
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"effectiveness with respect to wet-bulb depression")]
[JsonProperty(@"effectiveness with respect to wet-bulb depression")]
public System.Single CoolerDesignEffectiveness { get; set; } = ;
        
[Description(@"this curve modifies the design effectiveness in the previous field by multiplying the value by the result of this curve. The effectiveness flow modifier curve is a function of flow fraction. Flow fraction is the ratio of current primary air flow rate to the primary air design flow rate. If this input field is left blank then, the effectiveness is assumed to be constant.")]
[JsonProperty(@"this curve modifies the design effectiveness in the previous field by multiplying the value by the result of this curve. The effectiveness flow modifier curve is a function of flow fraction. Flow fraction is the ratio of current primary air flow rate to the primary air design flow rate. If this input field is left blank then, the effectiveness is assumed to be constant.")]
public System.String EffectivenessFlowRatioModifierCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PrimaryAirDesignFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"This is the design water pump or spray for evaporation at the primary air design air flow rates and cooler design effectiveness")]
[JsonProperty(@"This is the design water pump or spray for evaporation at the primary air design air flow rates and cooler design effectiveness")]
public System.String RecirculatingWaterPumpDesignPower { get; set; } = (System.String)Autosize;
        
[Description(@"This field is used when the previous field is set to autosize. The pump power is scaled with Primary Air Design Air Flow Rate. This value was backed out from inputs in energy plus example files. Average Pump Power sizing factor was estimated from pump power and primary air design flow rates inputs from energyplus example files is about 90.0 [W/(m3/s)] (=90.0 ~ Pump Power / Primary Air Design Flow Rate). The factor ranges from 55.0 to 150.0 [W/(m3/s)]. The pump power can be sized to zero by setting this factor to zero.")]
[JsonProperty(@"This field is used when the previous field is set to autosize. The pump power is scaled with Primary Air Design Air Flow Rate. This value was backed out from inputs in energy plus example files. Average Pump Power sizing factor was estimated from pump power and primary air design flow rates inputs from energyplus example files is about 90.0 [W/(m3/s)] (=90.0 ~ Pump Power / Primary Air Design Flow Rate). The factor ranges from 55.0 to 150.0 [W/(m3/s)]. The pump power can be sized to zero by setting this factor to zero.")]
public System.Single WaterPumpPowerSizingFactor { get; set; } = 90;
        
[Description(@"this curve modifies the pump power in the previous field by multiplying the design power by the result of this curve. x = ff = flow fraction on the primary air. The flow fraction is the primary air flow rate during current operation divided by Primary Air Design Flow Rate")]
[JsonProperty(@"this curve modifies the pump power in the previous field by multiplying the design power by the result of this curve. x = ff = flow fraction on the primary air. The flow fraction is the primary air flow rate during current operation divided by Primary Air Design Flow Rate")]
public System.String WaterPumpPowerModifierCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SensorNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterSupplyStorageTankName { get; set; } = "";
        
[Description(@"Rate of drift loss as a fraction of evaporated water flow rate")]
[JsonProperty(@"Rate of drift loss as a fraction of evaporated water flow rate")]
public System.Single DriftLossFraction { get; set; } = ;
        
[Description(@"Characterizes the rate of blowdown in the evaporative cooler. Blowdown is water intentionally drained from the cooler in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. A typical value is 3. If left blank then there is no blowdown.")]
[JsonProperty(@"Characterizes the rate of blowdown in the evaporative cooler. Blowdown is water intentionally drained from the cooler in order to offset the build up of solids in the water that would otherwise occur because of evaporation. Ratio of solids in the blowdown water to solids in the make up water. A typical value is 3. If left blank then there is no blowdown.")]
public System.Single BlowdownConcentrationRatio { get; set; } = ;
        
[Description(@"This numeric field defines the evaporative cooler air inlet node drybulb temperature minimum limit in degrees Celsius. The evaporative cooler will be turned off when the evaporator cooler air inlet node dry-bulb temperature falls below this limit. The typical minimum value is 16degC. Users are allowed to specify their own limits. If this field is left blank, then there is no drybulb lower temperature limit for evaporative cooler operation.")]
[JsonProperty(@"This numeric field defines the evaporative cooler air inlet node drybulb temperature minimum limit in degrees Celsius. The evaporative cooler will be turned off when the evaporator cooler air inlet node dry-bulb temperature falls below this limit. The typical minimum value is 16degC. Users are allowed to specify their own limits. If this field is left blank, then there is no drybulb lower temperature limit for evaporative cooler operation.")]
public System.Single EvaporativeOperationMinimumDrybulbTemperature { get; set; } = ;
        
[Description(@"when outdoor wetbulb temperature rises above this limit the cooler shuts down. This numeric field defines the evaporative cooler air inlet node wet-bulb temperature maximum limit in degrees Celsius. The evaporative cooler will be turned off when the evaporative cooler air inlet node wet-bulb temperature exceeds this limit. The typical maximum value is 24degC. Users are allowed to specify their own limits. If this field is left blank, then there is no upper wetbulb temperature limit for evaporative cooler operation.")]
[JsonProperty(@"when outdoor wetbulb temperature rises above this limit the cooler shuts down. This numeric field defines the evaporative cooler air inlet node wet-bulb temperature maximum limit in degrees Celsius. The evaporative cooler will be turned off when the evaporative cooler air inlet node wet-bulb temperature exceeds this limit. The typical maximum value is 24degC. Users are allowed to specify their own limits. If this field is left blank, then there is no upper wetbulb temperature limit for evaporative cooler operation.")]
public System.Single EvaporativeOperationMaximumLimitWetbulbTemperature { get; set; } = ;
        
[Description(@"This numeric field defines the evaporative cooler air inlet node dry-bulb temperature maximum limit in degrees Celsius. The evaporative cooler will be turned off when its air inlet node drybulb temperature exceeds this limit. The typical maximum value is 26degC. Users are allowed to specify their own limits. If this field is left blank, then there is no upper temperature limit for evaporative cooler operation.")]
[JsonProperty(@"This numeric field defines the evaporative cooler air inlet node dry-bulb temperature maximum limit in degrees Celsius. The evaporative cooler will be turned off when its air inlet node drybulb temperature exceeds this limit. The typical maximum value is 26degC. Users are allowed to specify their own limits. If this field is left blank, then there is no upper temperature limit for evaporative cooler operation.")]
public System.Single EvaporativeOperationMaximumLimitDrybulbTemperature { get; set; } = ;
    }
}
namespace EnergyPlus.ExteriorEquipment
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("only used for Meter type reporting, does not affect building loads")]
    [JsonObject("Exterior:Lights")]
    public class Exterior_Lights
    {
        
[Description(@"units in schedule should be fraction applied to capacity of the exterior lights equipment, generally (0.0 - 1.0)")]
[JsonProperty(@"units in schedule should be fraction applied to capacity of the exterior lights equipment, generally (0.0 - 1.0)")]
public System.String ScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DesignLevel { get; set; } = ;
        
[Description(@"Astronomical Clock option overrides schedule to turn lights off when sun is up")]
[JsonProperty(@"Astronomical Clock option overrides schedule to turn lights off when sun is up")]
public YesNoDefault ControlOption { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum ControlOptionType
    {
        
        [JsonProperty("AstronomicalClock")]
        AstronomicalClock = 0,
        
        [JsonProperty("ScheduleNameOnly")]
        ScheduleNameOnly = 1,
    }
    
    [Description("only used for Meter type reporting, does not affect building loads")]
    [JsonObject("Exterior:FuelEquipment")]
    public class Exterior_FuelEquipment
    {
        
[JsonProperty(@"")]
public YesNoDefault FuelUseType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"units in schedule should be fraction applied to capacity of the exterior fuel equipment, generally (0.0 - 1.0)")]
[JsonProperty(@"units in schedule should be fraction applied to capacity of the exterior fuel equipment, generally (0.0 - 1.0)")]
public System.String ScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DesignLevel { get; set; } = ;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum FuelUseTypeType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("DistrictCooling")]
        DistrictCooling = 2,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 3,
        
        [JsonProperty("Electricity")]
        Electricity = 4,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 5,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 6,
        
        [JsonProperty("Gasoline")]
        Gasoline = 7,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 8,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 9,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 10,
        
        [JsonProperty("Propane")]
        Propane = 11,
        
        [JsonProperty("Steam")]
        Steam = 12,
        
        [JsonProperty("Water")]
        Water = 13,
    }
    
    [Description("only used for Meter type reporting, does not affect building loads")]
    [JsonObject("Exterior:WaterEquipment")]
    public class Exterior_WaterEquipment
    {
        
[JsonProperty(@"")]
public YesNoDefault FuelUseType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Water");
        
[Description(@"units in Schedule should be fraction applied to capacity of the exterior water equipment, generally (0.0 - 1.0)")]
[JsonProperty(@"units in Schedule should be fraction applied to capacity of the exterior water equipment, generally (0.0 - 1.0)")]
public System.String ScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DesignLevel { get; set; } = ;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum FuelUseTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Water")]
        Water = 1,
    }
}
namespace EnergyPlus.ExternalInterface
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"This object activates the external interface of EnergyPlus. If the object ExternalInterface is present, then all ExtnernalInterface:* objects will receive their values from the BCVTB interface or from FMUs at each zone time step. If this object is not present, then the values of these objects will be fixed at the value declared in the ""initial value"" field of the corresponding object, and a warning will be written to the EnergyPlus error file.")]
    [JsonObject("ExternalInterface")]
    public class ExternalInterface
    {
        
[Description(@"Name of External Interface Currently, the only valid entries are PtolemyServer, FunctionalMockupUnitImport, and FunctionalMockupUnitExport.")]
[JsonProperty(@"Name of External Interface Currently, the only valid entries are PtolemyServer, FunctionalMockupUnitImport, and FunctionalMockupUnitExport.")]
public YesNoDefault NameOfExternalInterface { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum NameOfExternalInterfaceType
    {
        
        [JsonProperty("FunctionalMockupUnitExport")]
        FunctionalMockupUnitExport = 0,
        
        [JsonProperty("FunctionalMockupUnitImport")]
        FunctionalMockupUnitImport = 1,
        
        [JsonProperty("PtolemyServer")]
        PtolemyServer = 2,
    }
    
    [Description("A ExternalInterface:Schedule contains only one value, which is used during the wa" +
        "rm-up period and the system sizing.")]
    [JsonObject("ExternalInterface:Schedule")]
    public class ExternalInterface_Schedule
    {
        
[JsonProperty(@"")]
public System.String ScheduleTypeLimitsName { get; set; } = "";
        
[Description(@"Used during warm-up and system sizing.")]
[JsonProperty(@"Used during warm-up and system sizing.")]
public System.Single InitialValue { get; set; } = ;
    }
    
    [Description(@"This input object is similar to EnergyManagementSystem:GlobalVariable. However, at the beginning of each zone time step, its value is set to the value received from the external interface. During the warm-up period and the system sizing, its value is set to the value specified by the field ""initial value."" This object can be used to move data into Erl subroutines.")]
    [JsonObject("ExternalInterface:Variable")]
    public class ExternalInterface_Variable
    {
        
[Description(@"Used during warm-up and system sizing.")]
[JsonProperty(@"Used during warm-up and system sizing.")]
public System.Single InitialValue { get; set; } = ;
    }
    
    [Description("Hardware portion of EMS used to set up actuators in the model")]
    [JsonObject("ExternalInterface:Actuator")]
    public class ExternalInterface_Actuator
    {
        
[JsonProperty(@"")]
public System.String ActuatedComponentUniqueName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ActuatedComponentType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ActuatedComponentControlType { get; set; } = "";
        
[Description(@"If specified, it is used during warm-up and system sizing. If not specified, then the actuator only overwrites the actuated component after the warm-up and system sizing.")]
[JsonProperty(@"If specified, it is used during warm-up and system sizing. If not specified, then the actuator only overwrites the actuated component after the warm-up and system sizing.")]
public System.Single OptionalInitialValue { get; set; } = ;
    }
    
    [Description("This object declares an FMU")]
    [JsonObject("ExternalInterface:FunctionalMockupUnitImport")]
    public class ExternalInterface_FunctionalMockupUnitImport
    {
        
[JsonProperty(@"")]
public System.String FmuFileName { get; set; } = "";
        
[Description(@"in milli-seconds")]
[JsonProperty(@"in milli-seconds")]
public System.Single FmuTimeout { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single FmuLoggingon { get; set; } = 0;
    }
    
    [Description("This object declares an FMU input variable")]
    [JsonObject("ExternalInterface:FunctionalMockupUnitImport:From:Variable")]
    public class ExternalInterface_FunctionalMockupUnitImport_From_Variable
    {
        
[JsonProperty(@"")]
public System.String OutputVariableIndexKeyName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutputVariableName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FmuFileName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FmuInstanceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FmuVariableName { get; set; } = "";
    }
    
    [Description("This objects contains only one value, which is used during the first call of Ener" +
        "gyPlus")]
    [JsonObject("ExternalInterface:FunctionalMockupUnitImport:To:Schedule")]
    public class ExternalInterface_FunctionalMockupUnitImport_To_Schedule
    {
        
[JsonProperty(@"")]
public System.String ScheduleTypeLimitsNames { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FmuFileName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FmuInstanceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FmuVariableName { get; set; } = "";
        
[Description(@"Used during the first call of EnergyPlus.")]
[JsonProperty(@"Used during the first call of EnergyPlus.")]
public System.Single InitialValue { get; set; } = ;
    }
    
    [Description("Hardware portion of EMS used to set up actuators in the model that are dynamicall" +
        "y updated from the FMU.")]
    [JsonObject("ExternalInterface:FunctionalMockupUnitImport:To:Actuator")]
    public class ExternalInterface_FunctionalMockupUnitImport_To_Actuator
    {
        
[JsonProperty(@"")]
public System.String ActuatedComponentUniqueName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ActuatedComponentType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ActuatedComponentControlType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FmuFileName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FmuInstanceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FmuVariableName { get; set; } = "";
        
[Description(@"Used during the first call of EnergyPlus.")]
[JsonProperty(@"Used during the first call of EnergyPlus.")]
public System.Single InitialValue { get; set; } = ;
    }
    
    [Description("Declares Erl variable as having global scope No spaces allowed in names used for " +
        "Erl variables")]
    [JsonObject("ExternalInterface:FunctionalMockupUnitImport:To:Variable")]
    public class ExternalInterface_FunctionalMockupUnitImport_To_Variable
    {
        
[JsonProperty(@"")]
public System.String FmuFileName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FmuInstanceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FmuVariableName { get; set; } = "";
        
[Description(@"Used during the first call of EnergyPlus.")]
[JsonProperty(@"Used during the first call of EnergyPlus.")]
public System.Single InitialValue { get; set; } = ;
    }
    
    [Description("This object declares an FMU input variable")]
    [JsonObject("ExternalInterface:FunctionalMockupUnitExport:From:Variable")]
    public class ExternalInterface_FunctionalMockupUnitExport_From_Variable
    {
        
[JsonProperty(@"")]
public System.String OutputVariableIndexKeyName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutputVariableName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FmuVariableName { get; set; } = "";
    }
    
    [Description("This objects contains only one value, which is used during the first call of Ener" +
        "gyPlus")]
    [JsonObject("ExternalInterface:FunctionalMockupUnitExport:To:Schedule")]
    public class ExternalInterface_FunctionalMockupUnitExport_To_Schedule
    {
        
[JsonProperty(@"")]
public System.String ScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ScheduleTypeLimitsNames { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FmuVariableName { get; set; } = "";
        
[Description(@"Used during the first call of EnergyPlus.")]
[JsonProperty(@"Used during the first call of EnergyPlus.")]
public System.Single InitialValue { get; set; } = ;
    }
    
    [Description("Hardware portion of EMS used to set up actuators in the model that are dynamicall" +
        "y updated from the FMU.")]
    [JsonObject("ExternalInterface:FunctionalMockupUnitExport:To:Actuator")]
    public class ExternalInterface_FunctionalMockupUnitExport_To_Actuator
    {
        
[JsonProperty(@"")]
public System.String ActuatedComponentUniqueName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ActuatedComponentType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ActuatedComponentControlType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FmuVariableName { get; set; } = "";
        
[Description(@"Used during the first call of EnergyPlus.")]
[JsonProperty(@"Used during the first call of EnergyPlus.")]
public System.Single InitialValue { get; set; } = ;
    }
    
    [Description("Declares Erl variable as having global scope No spaces allowed in names used for " +
        "Erl variables")]
    [JsonObject("ExternalInterface:FunctionalMockupUnitExport:To:Variable")]
    public class ExternalInterface_FunctionalMockupUnitExport_To_Variable
    {
        
[JsonProperty(@"")]
public System.String FmuVariableName { get; set; } = "";
        
[Description(@"Used during the first call of EnergyPlus.")]
[JsonProperty(@"Used during the first call of EnergyPlus.")]
public System.Single InitialValue { get; set; } = ;
    }
}
namespace EnergyPlus.Fans
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Versatile simple fan that can be used in variable air volume, constant volume, on-off cycling, two-speed or multi-speed applications. Performance at different flow rates, or speed levels, is determined using separate performance curve or table or prescribed power fractions at discrete speed levels for two-speed or multi-speed fans.")]
    [JsonObject("Fan:SystemModel")]
    public class Fan_SystemModel
    {
        
[Description(@"Availability schedule name for this fan. Schedule value > 0 means the fan is available. If this field is blank, the fan is always available.")]
[JsonProperty(@"Availability schedule name for this fan. Schedule value > 0 means the fan is available. If this field is blank, the fan is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DesignMaximumAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault SpeedControlMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Discrete");
        
[JsonProperty(@"")]
public System.Single ElectricPowerMinimumFlowRateFraction { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single DesignPressureRise { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MotorEfficiency { get; set; } = 0.9;
        
[Description(@"0.0 means fan motor outside of air stream, 1.0 means motor inside of air stream")]
[JsonProperty(@"0.0 means fan motor outside of air stream, 1.0 means motor inside of air stream")]
public System.Single MotorInAirStreamFraction { get; set; } = 1;
        
[Description(@"Fan power consumption at maximum air flow rate. If autosized the method used to scale power is chosen in the following field")]
[JsonProperty(@"Fan power consumption at maximum air flow rate. If autosized the method used to scale power is chosen in the following field")]
public System.String DesignElectricPowerConsumption { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public YesNoDefault DesignPowerSizingMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "PowerPerFlowPerPressure");
        
[JsonProperty(@"")]
public System.Single ElectricPowerPerUnitFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ElectricPowerPerUnitFlowRatePerUnitPressure { get; set; } = 1.66667;
        
[JsonProperty(@"")]
public System.Single FanTotalEfficiency { get; set; } = 0.7;
        
[Description(@"independent variable is normalized flow rate, current flow divided by Design Maximum Air Flow Rate. dependent variable is modification factor multiplied by Design Power Consumption. This field is required if Speed Control Method is set to Continuous or if the Number of Speeds is greater than 1 and Speed Electric Power Fraction fields are not used.")]
[JsonProperty(@"independent variable is normalized flow rate, current flow divided by Design Maximum Air Flow Rate. dependent variable is modification factor multiplied by Design Power Consumption. This field is required if Speed Control Method is set to Continuous or if the Number of Speeds is greater than 1 and Speed Electric Power Fraction fields are not used.")]
public System.String ElectricPowerFunctionOfFlowFractionCurveName { get; set; } = "";
        
[Description(@"Total system fan pressure rise at the fan when in night mode using AvailabilityManager:NightVentilation")]
[JsonProperty(@"Total system fan pressure rise at the fan when in night mode using AvailabilityManager:NightVentilation")]
public System.Single NightVentilationModePressureRise { get; set; } = ;
        
[Description(@"Fraction of Design Maximum Air Flow Rate to use when in night mode using AvailabilityManager:NightVentilation")]
[JsonProperty(@"Fraction of Design Maximum Air Flow Rate to use when in night mode using AvailabilityManager:NightVentilation")]
public System.Single NightVentilationModeFlowFraction { get; set; } = ;
        
[Description(@"optional, if used fan motor heat losses that not added to air stream are transferred to zone as internal gains")]
[JsonProperty(@"optional, if used fan motor heat losses that not added to air stream are transferred to zone as internal gains")]
public System.String MotorLossZoneName { get; set; } = "";
        
[Description(@"optional. If zone identified in previous field then this determines the split between convection and radiation for the fan motor's skin losses")]
[JsonProperty(@"optional. If zone identified in previous field then this determines the split between convection and radiation for the fan motor's skin losses")]
public System.Single MotorLossRadiativeFraction { get; set; } = ;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
        
[Description(@"number of different speed levels available when Speed Control Method is set to Discrete Speed need to be arranged in increasing order in remaining field sets. If set to 1, or omitted, and Speed Control Method is Discrete then constant fan speed is the design maximum.")]
[JsonProperty(@"number of different speed levels available when Speed Control Method is set to Discrete Speed need to be arranged in increasing order in remaining field sets. If set to 1, or omitted, and Speed Control Method is Discrete then constant fan speed is the design maximum.")]
public System.Single NumberOfSpeeds { get; set; } = 1;
        
[JsonProperty(@"")]
public System.String SpeedFractions { get; set; } = "";
    }
    
    public enum SpeedControlMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Continuous")]
        Continuous = 1,
        
        [JsonProperty("Discrete")]
        Discrete = 2,
    }
    
    public enum DesignPowerSizingMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("PowerPerFlow")]
        PowerPerFlow = 1,
        
        [JsonProperty("PowerPerFlowPerPressure")]
        PowerPerFlowPerPressure = 2,
        
        [JsonProperty("TotalEfficiencyAndPressure")]
        TotalEfficiencyAndPressure = 3,
    }
    
    [Description("Constant volume fan that is intended to operate continuously based on a time sche" +
        "dule. This fan will not cycle on and off based on cooling/heating load or other " +
        "control signals.")]
    [JsonObject("Fan:ConstantVolume")]
    public class Fan_ConstantVolume
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single FanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single PressureRise { get; set; } = ;
        
[JsonProperty(@"")]
public System.String MaximumFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MotorEfficiency { get; set; } = 0.9;
        
[Description(@"0.0 means fan motor outside of air stream, 1.0 means motor inside of air stream")]
[JsonProperty(@"0.0 means fan motor outside of air stream, 1.0 means motor inside of air stream")]
public System.Single MotorInAirstreamFraction { get; set; } = 1;
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    [Description("Variable air volume fan where the electric power input varies according to a perf" +
        "ormance curve as a function of flow fraction.")]
    [JsonObject("Fan:VariableVolume")]
    public class Fan_VariableVolume
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single FanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single PressureRise { get; set; } = ;
        
[JsonProperty(@"")]
public System.String MaximumFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FanPowerMinimumFlowRateInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Fraction");
        
[JsonProperty(@"")]
public System.Single FanPowerMinimumFlowFraction { get; set; } = 0.25;
        
[JsonProperty(@"")]
public System.Single FanPowerMinimumAirFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MotorEfficiency { get; set; } = 0.9;
        
[Description(@"0.0 means fan motor outside of air stream, 1.0 means motor inside of air stream")]
[JsonProperty(@"0.0 means fan motor outside of air stream, 1.0 means motor inside of air stream")]
public System.Single MotorInAirstreamFraction { get; set; } = 1;
        
[Description(@"all Fan Power Coefficients should not be 0.0 or no fan power will be consumed. Fan Power Coefficents are specified as function of full flow rate/power Equation:")]
[JsonProperty(@"all Fan Power Coefficients should not be 0.0 or no fan power will be consumed. Fan Power Coefficents are specified as function of full flow rate/power Equation:")]
public System.Single FanPowerCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FanPowerCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FanPowerCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FanPowerCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FanPowerCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum FanPowerMinimumFlowRateInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FixedFlowRate")]
        FixedFlowRate = 1,
        
        [JsonProperty("Fraction")]
        Fraction = 2,
    }
    
    [Description("Constant volume fan that is intended to cycle on and off based on cooling/heating" +
        " load or other control signals. This fan can also operate continuously like Fan:" +
        "ConstantVolume.")]
    [JsonObject("Fan:OnOff")]
    public class Fan_OnOff
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single FanTotalEfficiency { get; set; } = 0.6;
        
[JsonProperty(@"")]
public System.Single PressureRise { get; set; } = ;
        
[JsonProperty(@"")]
public System.String MaximumFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MotorEfficiency { get; set; } = 0.8;
        
[Description(@"0.0 means fan motor outside of air stream, 1.0 means motor inside of air stream")]
[JsonProperty(@"0.0 means fan motor outside of air stream, 1.0 means motor inside of air stream")]
public System.Single MotorInAirstreamFraction { get; set; } = 1;
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FanPowerRatioFunctionOfSpeedRatioCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FanEfficiencyRatioFunctionOfSpeedRatioCurveName { get; set; } = "";
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    [Description("Models a fan that exhausts air from a zone.")]
    [JsonObject("Fan:ZoneExhaust")]
    public class Fan_ZoneExhaust
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single FanTotalEfficiency { get; set; } = 0.6;
        
[JsonProperty(@"")]
public System.Single PressureRise { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
        
[Description(@"If field is used, then when fan runs the exhausted air flow rate is controlled to be the scheduled fraction times the Maximum Flow Rate")]
[JsonProperty(@"If field is used, then when fan runs the exhausted air flow rate is controlled to be the scheduled fraction times the Maximum Flow Rate")]
public System.String FlowFractionScheduleName { get; set; } = "";
        
[Description(@"Control if fan is to be interlocked with HVAC system Availability Managers or not.")]
[JsonProperty(@"Control if fan is to be interlocked with HVAC system Availability Managers or not.")]
public YesNoDefault SystemAvailabilityManagerCouplingMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Coupled");
        
[Description(@"If field is used, the exhaust fan will not run if the zone temperature is lower than this limit")]
[JsonProperty(@"If field is used, the exhaust fan will not run if the zone temperature is lower than this limit")]
public System.String MinimumZoneTemperatureLimitScheduleName { get; set; } = "";
        
[Description(@"Used to control fan's impact on flow at the return air node. Enter the portion of the exhaust that is balanced by simple airflows.")]
[JsonProperty(@"Used to control fan's impact on flow at the return air node. Enter the portion of the exhaust that is balanced by simple airflows.")]
public System.String BalancedExhaustFractionScheduleName { get; set; } = "";
    }
    
    public enum SystemAvailabilityManagerCouplingModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Coupled")]
        Coupled = 1,
        
        [JsonProperty("Decoupled")]
        Decoupled = 2,
    }
    
    [Description(@"Specifies an alternate set of performance parameters for a fan. These alternate parameters are used when a system manager (such as AvailabilityManager:NightVentilation) sets a specified flow rate. May be used with Fan:ConstantVolume, Fan:VariableVolume and Fan:ComponentModel. If the fan model senses that a fixed flow rate has been set, it will use these alternate performance parameters. It is assumed that the fan will run at a fixed speed in the alternate mode.")]
    [JsonObject("FanPerformance:NightVentilation")]
    public class FanPerformance_NightVentilation
    {
        
[JsonProperty(@"")]
public System.String FanName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single FanTotalEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PressureRise { get; set; } = ;
        
[JsonProperty(@"")]
public System.String MaximumFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MotorEfficiency { get; set; } = ;
        
[Description(@"0.0 means fan motor outside of airstream 1.0 means fan motor inside of airstream")]
[JsonProperty(@"0.0 means fan motor outside of airstream 1.0 means fan motor inside of airstream")]
public System.Single MotorInAirstreamFraction { get; set; } = 1;
    }
    
    [Description("A detailed fan type for constant-air-volume (CAV) and variable-air-volume (VAV) s" +
        "ystems. It includes inputs that describe the air-distribution system as well as " +
        "the fan, drive belt (if used), motor, and variable-frequency-drive (if used).")]
    [JsonObject("Fan:ComponentModel")]
    public class Fan_ComponentModel
    {
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MinimumFlowRate { get; set; } = "";
        
[Description(@"Applied to specified or autosized max fan airflow")]
[JsonProperty(@"Applied to specified or autosized max fan airflow")]
public System.Single FanSizingFactor { get; set; } = 1;
        
[Description(@"Diameter of wheel outer circumference")]
[JsonProperty(@"Diameter of wheel outer circumference")]
public System.Single FanWheelDiameter { get; set; } = ;
        
[Description(@"Area at fan outlet plane for determining discharge velocity pressure")]
[JsonProperty(@"Area at fan outlet plane for determining discharge velocity pressure")]
public System.Single FanOutletArea { get; set; } = ;
        
[Description(@"Maximum ratio between power delivered to air and fan shaft input power Determined from fan performance data")]
[JsonProperty(@"Maximum ratio between power delivered to air and fan shaft input power Determined from fan performance data")]
public System.Single MaximumFanStaticEfficiency { get; set; } = ;
        
[Description(@"Euler number (Eu) determined from fan performance data")]
[JsonProperty(@"Euler number (Eu) determined from fan performance data")]
public System.Single EulerNumberAtMaximumFanStaticEfficiency { get; set; } = ;
        
[Description(@"Corresponds to maximum ratio between fan airflow and fan shaft rotational speed for specified fan wheel diameter Determined from fan performance data")]
[JsonProperty(@"Corresponds to maximum ratio between fan airflow and fan shaft rotational speed for specified fan wheel diameter Determined from fan performance data")]
public System.Single MaximumDimensionlessFanAirflow { get; set; } = ;
        
[Description(@"Ratio of motor pulley diameter to fan pulley diameter")]
[JsonProperty(@"Ratio of motor pulley diameter to fan pulley diameter")]
public System.String MotorFanPulleyRatio { get; set; } = (System.String)1;
        
[Description(@"Maximum torque transmitted by belt")]
[JsonProperty(@"Maximum torque transmitted by belt")]
public System.String BeltMaximumTorque { get; set; } = "";
        
[Description(@"Applied to specified or autosized max torque transmitted by belt")]
[JsonProperty(@"Applied to specified or autosized max torque transmitted by belt")]
public System.Single BeltSizingFactor { get; set; } = 1;
        
[Description(@"Region 1 to 2 curve transition for belt normalized efficiency")]
[JsonProperty(@"Region 1 to 2 curve transition for belt normalized efficiency")]
public System.Single BeltFractionalTorqueTransition { get; set; } = 0.167;
        
[Description(@"Maximum rotational speed of fan motor shaft")]
[JsonProperty(@"Maximum rotational speed of fan motor shaft")]
public System.Single MotorMaximumSpeed { get; set; } = ;
        
[Description(@"Maximum power input to drive belt by motor")]
[JsonProperty(@"Maximum power input to drive belt by motor")]
public System.String MaximumMotorOutputPower { get; set; } = "";
        
[Description(@"Applied to specified or autosized motor output power")]
[JsonProperty(@"Applied to specified or autosized motor output power")]
public System.Single MotorSizingFactor { get; set; } = 1;
        
[Description(@"0.0 means motor outside air stream 1.0 means motor inside air stream")]
[JsonProperty(@"0.0 means motor outside air stream 1.0 means motor inside air stream")]
public System.Single MotorInAirstreamFraction { get; set; } = 1;
        
[Description(@"Efficiency depends on fraction of full-load motor speed Efficiency depends on  fraction of full-load motor input power If field blank, then assumes constant VFD efficiency (0.97)")]
[JsonProperty(@"Efficiency depends on fraction of full-load motor speed Efficiency depends on  fraction of full-load motor input power If field blank, then assumes constant VFD efficiency (0.97)")]
public YesNoDefault VfdEfficiencyType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Maximum power input to motor by VFD")]
[JsonProperty(@"Maximum power input to motor by VFD")]
public System.String MaximumVfdOutputPower { get; set; } = "";
        
[Description(@"Applied to specified or autosized VFD output power")]
[JsonProperty(@"Applied to specified or autosized VFD output power")]
public System.Single VfdSizingFactor { get; set; } = 1;
        
[Description(@"Pressure rise depends on volumetric flow, system resistances, system leakage, and duct static pressure set point")]
[JsonProperty(@"Pressure rise depends on volumetric flow, system resistances, system leakage, and duct static pressure set point")]
public System.String FanPressureRiseCurveName { get; set; } = "";
        
[Description(@"Function of fan volumetric flow Minimum and maximum fan airflows correspond respectively to minimum and maximum duct static pressure set points")]
[JsonProperty(@"Function of fan volumetric flow Minimum and maximum fan airflows correspond respectively to minimum and maximum duct static pressure set points")]
public System.String DuctStaticPressureResetCurveName { get; set; } = "";
        
[Description(@"xfan <= 0 Curve should have maximum of 1.0")]
[JsonProperty(@"xfan <= 0 Curve should have maximum of 1.0")]
public System.String NormalizedFanStaticEfficiencyCurveNameNonStallRegion { get; set; } = "";
        
[Description(@"xfan > 0 Curve should have maximum of 1.0")]
[JsonProperty(@"xfan > 0 Curve should have maximum of 1.0")]
public System.String NormalizedFanStaticEfficiencyCurveNameStallRegion { get; set; } = "";
        
[Description(@"xspd <= 0 Curve should have maximum of 1.0")]
[JsonProperty(@"xspd <= 0 Curve should have maximum of 1.0")]
public System.String NormalizedDimensionlessAirflowCurveNameNonStallRegion { get; set; } = "";
        
[Description(@"xspd > 0 Curve should have maximum of 1.0")]
[JsonProperty(@"xspd > 0 Curve should have maximum of 1.0")]
public System.String NormalizedDimensionlessAirflowCurveNameStallRegion { get; set; } = "";
        
[Description(@"Determines maximum fan drive belt efficiency in log space as function of xbelt,max Curve should have minimum of -4.6 and maximum of 0.0 If field blank, assumes output of curve is always 1.0")]
[JsonProperty(@"Determines maximum fan drive belt efficiency in log space as function of xbelt,max Curve should have minimum of -4.6 and maximum of 0.0 If field blank, assumes output of curve is always 1.0")]
public System.String MaximumBeltEfficiencyCurveName { get; set; } = "";
        
[Description(@"Region 1 (0 <= xbelt < xbelt,trans) Curve should have minimum > 0.0 and maximum of 1.0 If field blank, assumes output of curve is always 1.0 in Region 1")]
[JsonProperty(@"Region 1 (0 <= xbelt < xbelt,trans) Curve should have minimum > 0.0 and maximum of 1.0 If field blank, assumes output of curve is always 1.0 in Region 1")]
public System.String NormalizedBeltEfficiencyCurveNameRegion { get; set; } = "";
        
[Description(@"Region 2 (xbelt,trans <= xbelt <= 1) Curve should have minimum > 0.0 and maximum of 1.0 If field blank, assumes output of curve is always 1.0 in Region 2")]
[JsonProperty(@"Region 2 (xbelt,trans <= xbelt <= 1) Curve should have minimum > 0.0 and maximum of 1.0 If field blank, assumes output of curve is always 1.0 in Region 2")]
public System.String NormalizedBeltEfficiencyCurveNameRegion { get; set; } = "";
        
[Description(@"Determines normalized drive belt efficiency Region 3 (xbelt > 1) Curve should have minimum > 0.0 and maximum of 1.0 If field blank, assumes output of curve is always 1.0 in Region 3")]
[JsonProperty(@"Determines normalized drive belt efficiency Region 3 (xbelt > 1) Curve should have minimum > 0.0 and maximum of 1.0 If field blank, assumes output of curve is always 1.0 in Region 3")]
public System.String NormalizedBeltEfficiencyCurveNameRegion { get; set; } = "";
        
[Description(@"Curve should have minimum > 0.0 and maximum of 1.0 If field blank, assumes output of curve is always 1.0")]
[JsonProperty(@"Curve should have minimum > 0.0 and maximum of 1.0 If field blank, assumes output of curve is always 1.0")]
public System.String MaximumMotorEfficiencyCurveName { get; set; } = "";
        
[Description(@"Curve should have minimum > 0.0 and maximum of 1.0 If field blank, assumes output of curve is always 1.0")]
[JsonProperty(@"Curve should have minimum > 0.0 and maximum of 1.0 If field blank, assumes output of curve is always 1.0")]
public System.String NormalizedMotorEfficiencyCurveName { get; set; } = "";
        
[Description(@"Determines VFD efficiency as function of motor load or speed fraction Curve should have minimum > 0.0 and maximum of 1.0 If field blank, assumes constant VFD efficiency (0.97)")]
[JsonProperty(@"Determines VFD efficiency as function of motor load or speed fraction Curve should have minimum > 0.0 and maximum of 1.0 If field blank, assumes constant VFD efficiency (0.97)")]
public System.String VfdEfficiencyCurveName { get; set; } = "";
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum VfdEfficiencyTypeType
    {
        
        [JsonProperty("Power")]
        Power = 0,
        
        [JsonProperty("Speed")]
        Speed = 1,
    }
}
namespace EnergyPlus.FluidProperties
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("potential fluid name/type in the input file repeat this object for each fluid")]
    [JsonObject("FluidProperties:Name")]
    public class FluidProperties_Name
    {
        
[JsonProperty(@"")]
public System.String FluidName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FluidType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum FluidTypeType
    {
        
        [JsonProperty("Glycol")]
        Glycol = 0,
        
        [JsonProperty("Refrigerant")]
        Refrigerant = 1,
    }
    
    [Description("glycol and what concentration it is")]
    [JsonObject("FluidProperties:GlycolConcentration")]
    public class FluidProperties_GlycolConcentration
    {
        
[Description(@"or UserDefined Fluid (must show up as a glycol in FluidProperties:Name object)")]
[JsonProperty(@"or UserDefined Fluid (must show up as a glycol in FluidProperties:Name object)")]
public YesNoDefault GlycolType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String UserDefinedGlycolName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single GlycolConcentration { get; set; } = ;
    }
    
    public enum GlycolTypeType
    {
        
        [JsonProperty("EthyleneGlycol")]
        EthyleneGlycol = 0,
        
        [JsonProperty("PropyleneGlycol")]
        PropyleneGlycol = 1,
        
        [JsonProperty("UserDefinedGlycolType")]
        UserDefinedGlycolType = 2,
    }
    
    [Description(@"property values for fluid properties list of up to 250 temperatures, note that number of property values must match the number of properties in other words, there must be a one-to-one correspondence between the property values in this list and the actual properties list in other syntax degrees C (for all temperature inputs)")]
    [JsonObject("FluidProperties:Temperatures")]
    public class FluidProperties_Temperatures
    {
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
    }
    
    [Description("fluid properties for the saturated region")]
    [JsonObject("FluidProperties:Saturated")]
    public class FluidProperties_Saturated
    {
        
[JsonProperty(@"")]
public System.String FluidName { get; set; } = "";
        
[Description(@"Enthalpy Units are J/kg Density Units are kg/m3 SpecificHeat Units are J/kg-K Pressure Units are Pa")]
[JsonProperty(@"Enthalpy Units are J/kg Density Units are kg/m3 SpecificHeat Units are J/kg-K Pressure Units are Pa")]
public YesNoDefault FluidPropertyType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Fluid=saturated fluid FluidGas=saturated vapor")]
[JsonProperty(@"Fluid=saturated fluid FluidGas=saturated vapor")]
public YesNoDefault FluidPhase { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of a FluidProperties:Temperatures object.")]
[JsonProperty(@"Enter the name of a FluidProperties:Temperatures object.")]
public System.String TemperatureValuesName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
    }
    
    public enum FluidPropertyTypeType
    {
        
        [JsonProperty("Density")]
        Density = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("Pressure")]
        Pressure = 2,
        
        [JsonProperty("SpecificHeat")]
        SpecificHeat = 3,
    }
    
    public enum FluidPhaseType
    {
        
        [JsonProperty("Fluid")]
        Fluid = 0,
        
        [JsonProperty("FluidGas")]
        FluidGas = 1,
    }
    
    [Description("fluid properties for the superheated region")]
    [JsonObject("FluidProperties:Superheated")]
    public class FluidProperties_Superheated
    {
        
[JsonProperty(@"")]
public System.String FluidName { get; set; } = "";
        
[Description(@"Enthalpy Units are J/kg Density Units are kg/m3")]
[JsonProperty(@"Enthalpy Units are J/kg Density Units are kg/m3")]
public YesNoDefault FluidPropertyType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of a FluidProperties:Temperatures object.")]
[JsonProperty(@"Enter the name of a FluidProperties:Temperatures object.")]
public System.String TemperatureValuesName { get; set; } = "";
        
[Description(@"pressure for this list of properties")]
[JsonProperty(@"pressure for this list of properties")]
public System.Single Pressure { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
    }
    
    public enum FluidPropertyTypeType
    {
        
        [JsonProperty("Density")]
        Density = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
    }
    
    [Description("fluid properties for water/other fluid mixtures")]
    [JsonObject("FluidProperties:Concentration")]
    public class FluidProperties_Concentration
    {
        
[Description(@"should not be any of the defaults (Water, EthyleneGlycol, or PropyleneGlycol)")]
[JsonProperty(@"should not be any of the defaults (Water, EthyleneGlycol, or PropyleneGlycol)")]
public System.String FluidName { get; set; } = "";
        
[Description(@"Density Units are kg/m3 SpecificHeat Units are J/kg-K Conductivity Units are W/m-K Viscosity Units are N-s/m2")]
[JsonProperty(@"Density Units are kg/m3 SpecificHeat Units are J/kg-K Conductivity Units are W/m-K Viscosity Units are N-s/m2")]
public YesNoDefault FluidPropertyType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of a FluidProperties:Temperatures object.")]
[JsonProperty(@"Enter the name of a FluidProperties:Temperatures object.")]
public System.String TemperatureValuesName { get; set; } = "";
        
[Description(@"Glycol concentration for this list of properties entered as a fraction")]
[JsonProperty(@"Glycol concentration for this list of properties entered as a fraction")]
public System.Single Concentration { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PropertyValue { get; set; } = ;
    }
    
    public enum FluidPropertyTypeType
    {
        
        [JsonProperty("Conductivity")]
        Conductivity = 0,
        
        [JsonProperty("Density")]
        Density = 1,
        
        [JsonProperty("SpecificHeat")]
        SpecificHeat = 2,
        
        [JsonProperty("Viscosity")]
        Viscosity = 3,
    }
}
namespace EnergyPlus.GeneralDataEntry
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("matrix data in row-major order list each row keeping the columns in order number " +
        "of values must equal N1 x N2")]
    [JsonObject("Matrix:TwoDimension")]
    public class Matrix_TwoDimension
    {
        
[JsonProperty(@"")]
public System.Single NumberOfRows { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NumberOfColumns { get; set; } = ;
        
[JsonProperty(@"")]
public System.String Values { get; set; } = "";
    }
}
namespace EnergyPlus.HeatRecovery
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Flat plate air-to-air heat exchanger, typically used for exhaust or relief air he" +
        "at recovery.")]
    [JsonObject("HeatExchanger:AirToAir:FlatPlate")]
    public class HeatExchanger_AirToAir_FlatPlate
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FlowArrangementType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Yes means that the heat exchanger will be locked out (off) when the economizer is operating or high humidity control is active")]
[JsonProperty(@"Yes means that the heat exchanger will be locked out (off) when the economizer is operating or high humidity control is active")]
public YesNoDefault EconomizerLockout { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[Description(@"Ratio of h*A for supply side to h*A for exhaust side")]
[JsonProperty(@"Ratio of h*A for supply side to h*A for exhaust side")]
public System.Single RatioOfSupplyToSecondaryHaValues { get; set; } = ;
        
[JsonProperty(@"")]
public System.String NominalSupplyAirFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single NominalSupplyAirInletTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NominalSupplyAirOutletTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.String NominalSecondaryAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NominalSecondaryAirInletTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NominalElectricPower { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SupplyAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SupplyAirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SecondaryAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SecondaryAirOutletNodeName { get; set; } = "";
    }
    
    public enum FlowArrangementTypeType
    {
        
        [JsonProperty("CounterFlow")]
        CounterFlow = 0,
        
        [JsonProperty("CrossFlowBothUnmixed")]
        CrossFlowBothUnmixed = 1,
        
        [JsonProperty("ParallelFlow")]
        ParallelFlow = 2,
    }
    
    [Description("This object models an air-to-air heat exchanger using effectiveness relationships" +
        ". The heat exchanger can transfer sensible energy, latent energy, or both betwee" +
        "n the supply (primary) and exhaust (secondary) air streams.")]
    [JsonObject("HeatExchanger:AirToAir:SensibleAndLatent")]
    public class HeatExchanger_AirToAir_SensibleAndLatent
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String NominalSupplyAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SensibleEffectivenessAtHeatingAirFlow { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single LatentEffectivenessAtHeatingAirFlow { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single SensibleEffectivenessAtHeatingAirFlow { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single LatentEffectivenessAtHeatingAirFlow { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single SensibleEffectivenessAtCoolingAirFlow { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single LatentEffectivenessAtCoolingAirFlow { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single SensibleEffectivenessAtCoolingAirFlow { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single LatentEffectivenessAtCoolingAirFlow { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String SupplyAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SupplyAirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ExhaustAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ExhaustAirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NominalElectricPower { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault SupplyAirOutletTemperatureControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public YesNoDefault HeatExchangerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Plate");
        
[JsonProperty(@"")]
public YesNoDefault FrostControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Supply (outdoor) air inlet temp threshold for exhaust air recirculation and exhaust only frost control types. Exhaust air outlet threshold Temperature for minimum exhaust temperature frost control type.")]
[JsonProperty(@"Supply (outdoor) air inlet temp threshold for exhaust air recirculation and exhaust only frost control types. Exhaust air outlet threshold Temperature for minimum exhaust temperature frost control type.")]
public System.Single ThresholdTemperature { get; set; } = 1.7;
        
[Description(@"Fraction of the time when frost control will be invoked at the threshold temperature. This field only used for exhaust air recirc and exhaust-only frost control types.")]
[JsonProperty(@"Fraction of the time when frost control will be invoked at the threshold temperature. This field only used for exhaust air recirc and exhaust-only frost control types.")]
public System.Single InitialDefrostTimeFraction { get; set; } = 0.083;
        
[Description(@"Rate of increase in defrost time fraction as actual temp falls below threshold temperature. This field only used for exhaust air recirc and exhaust-only frost control types.")]
[JsonProperty(@"Rate of increase in defrost time fraction as actual temp falls below threshold temperature. This field only used for exhaust air recirc and exhaust-only frost control types.")]
public System.Single RateOfDefrostTimeFractionIncrease { get; set; } = 0.012;
        
[Description(@"Yes means that the heat exchanger will be locked out (off) when the economizer is operating or high humidity control is active")]
[JsonProperty(@"Yes means that the heat exchanger will be locked out (off) when the economizer is operating or high humidity control is active")]
public YesNoDefault EconomizerLockout { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
    }
    
    public enum HeatExchangerTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Plate")]
        Plate = 1,
        
        [JsonProperty("Rotary")]
        Rotary = 2,
    }
    
    public enum FrostControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ExhaustAirRecirculation")]
        ExhaustAirRecirculation = 1,
        
        [JsonProperty("ExhaustOnly")]
        ExhaustOnly = 2,
        
        [JsonProperty("MinimumExhaustTemperature")]
        MinimumExhaustTemperature = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    [Description(@"This object models a balanced desiccant heat exchanger. The heat exchanger transfers both sensible and latent energy between the process and regeneration air streams. The air flow rate and face velocity are assumed to be the same on both the process and regeneration sides of the heat exchanger.")]
    [JsonObject("HeatExchanger:Desiccant:BalancedFlow")]
    public class HeatExchanger_Desiccant_BalancedFlow
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String RegenerationAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String RegenerationAirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ProcessAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ProcessAirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatExchangerPerformanceObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "HeatExchanger:Desiccant:BalancedFlow:PerformanceDataType1");
        
[JsonProperty(@"")]
public System.String HeatExchangerPerformanceName { get; set; } = "";
        
[Description(@"Yes means that the heat exchanger will be locked out (off) when the economizer is operating or high humidity control is active")]
[JsonProperty(@"Yes means that the heat exchanger will be locked out (off) when the economizer is operating or high humidity control is active")]
public YesNoDefault EconomizerLockout { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
    }
    
    public enum HeatExchangerPerformanceObjectTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("HeatExchanger:Desiccant:BalancedFlow:PerformanceDataType1")]
        HeatExchangerDesiccantBalancedFlowPerformanceDataType = 1,
    }
    
    [Description(@"RTO = B1 + B2*RWI + B3*RTI + B4*(RWI/RTI) + B5*PWI + B6*PTI + B7*(PWI/PTI) + B8*RFV RWO = C1 + C2*RWI + C3*RTI + C4*(RWI/RTI) + C5*PWI + C6*PTI + C7*(PWI/PTI) + C8*RFV where, RTO = Dry-bulb temperature of the regeneration outlet air (C) RWO = Humidity ratio of the regeneration outlet air (kgWater/kgDryAir) RWI = Humidity ratio of the regeneration inlet air (kgWater/kgDryAir) RTI = Dry-bulb temperature of the regeneration inlet air (C) PWI = Humidity ratio of the process inlet air (kgWater/kgDryAir) PTI = Dry-bulb temperature of the process inlet air (C) RFV = Regeneration Face Velocity (m/s)")]
    [JsonObject("HeatExchanger:Desiccant:BalancedFlow:PerformanceDataType1")]
    public class HeatExchanger_Desiccant_BalancedFlow_PerformanceDataType
    {
        
[Description(@"Air flow rate at nominal conditions (assumed to be the same for both sides of the heat exchanger).")]
[JsonProperty(@"Air flow rate at nominal conditions (assumed to be the same for both sides of the heat exchanger).")]
public System.String NominalAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String NominalAirFaceVelocity { get; set; } = "";
        
[Description(@"Parasitic electric power (e.g., desiccant wheel motor)")]
[JsonProperty(@"Parasitic electric power (e.g., desiccant wheel motor)")]
public System.Single NominalElectricPower { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single TemperatureEquationCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single TemperatureEquationCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single TemperatureEquationCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single TemperatureEquationCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single TemperatureEquationCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single TemperatureEquationCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single TemperatureEquationCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single TemperatureEquationCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumRegenerationInletAirHumidityRatioForTemperatureEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumRegenerationInletAirHumidityRatioForTemperatureEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumRegenerationInletAirTemperatureForTemperatureEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumRegenerationInletAirTemperatureForTemperatureEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumProcessInletAirHumidityRatioForTemperatureEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumProcessInletAirHumidityRatioForTemperatureEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumProcessInletAirTemperatureForTemperatureEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumProcessInletAirTemperatureForTemperatureEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumRegenerationAirVelocityForTemperatureEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumRegenerationAirVelocityForTemperatureEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumRegenerationOutletAirTemperatureForTemperatureEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumRegenerationOutletAirTemperatureForTemperatureEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumRegenerationInletAirRelativeHumidityForTemperatureEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumRegenerationInletAirRelativeHumidityForTemperatureEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumProcessInletAirRelativeHumidityForTemperatureEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumProcessInletAirRelativeHumidityForTemperatureEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single HumidityRatioEquationCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single HumidityRatioEquationCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single HumidityRatioEquationCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single HumidityRatioEquationCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single HumidityRatioEquationCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single HumidityRatioEquationCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single HumidityRatioEquationCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single HumidityRatioEquationCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumRegenerationInletAirHumidityRatioForHumidityRatioEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumRegenerationInletAirHumidityRatioForHumidityRatioEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumRegenerationInletAirTemperatureForHumidityRatioEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumRegenerationInletAirTemperatureForHumidityRatioEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumProcessInletAirHumidityRatioForHumidityRatioEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumProcessInletAirHumidityRatioForHumidityRatioEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumProcessInletAirTemperatureForHumidityRatioEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumProcessInletAirTemperatureForHumidityRatioEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumRegenerationAirVelocityForHumidityRatioEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumRegenerationAirVelocityForHumidityRatioEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumRegenerationOutletAirHumidityRatioForHumidityRatioEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumRegenerationOutletAirHumidityRatioForHumidityRatioEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumRegenerationInletAirRelativeHumidityForHumidityRatioEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumRegenerationInletAirRelativeHumidityForHumidityRatioEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumProcessInletAirRelativeHumidityForHumidityRatioEquation { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumProcessInletAirRelativeHumidityForHumidityRatioEquation { get; set; } = ;
    }
}
namespace EnergyPlus.HumidifiersandDehumidifiers
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Electrically heated steam humidifier with fan.")]
    [JsonObject("Humidifier:Steam:Electric")]
    public class Humidifier_Steam_Electric
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Capacity is m3/s of water at 5.05 C")]
[JsonProperty(@"Capacity is m3/s of water at 5.05 C")]
public System.String RatedCapacity { get; set; } = "";
        
[Description(@"if autosized the rated power is calculated from the rated capacity and enthalpy rise of water from 20.0C to 100.0C steam and assumes electric to thermal energy conversion efficiency of 100.0%")]
[JsonProperty(@"if autosized the rated power is calculated from the rated capacity and enthalpy rise of water from 20.0C to 100.0C steam and assumes electric to thermal energy conversion efficiency of 100.0%")]
public System.String RatedPower { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RatedFanPower { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StandbyPower { get; set; } = ;
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterStorageTankName { get; set; } = "";
    }
    
    [Description("Natural gas fired steam humidifier with optional blower fan.")]
    [JsonObject("Humidifier:Steam:Gas")]
    public class Humidifier_Steam_Gas
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Capacity is m3/s of water at 5.05 C The nominal full capacity water addition rate in m3/s of water at 5.05 C")]
[JsonProperty(@"Capacity is m3/s of water at 5.05 C The nominal full capacity water addition rate in m3/s of water at 5.05 C")]
public System.String RatedCapacity { get; set; } = "";
        
[Description(@"if auto-sized, the rated gas use rate is calculated from the rated capacity and enthalpy rise of water from 20.0C to 100.0C steam and user input thermal efficiency value specified in the next input field. If this input field is hard-sized and Inlet Water Temperature Option input field is selected as FixedInletWaterTemperature, then the thermal efficiency input field will not be used or else if the Inlet Water Temperature Option input field is selected as VariableInletWaterTemperature, then the thermal efficiency input value is overridden by a value calculated from the capacity, rated gas use rate and design condition.")]
[JsonProperty(@"if auto-sized, the rated gas use rate is calculated from the rated capacity and enthalpy rise of water from 20.0C to 100.0C steam and user input thermal efficiency value specified in the next input field. If this input field is hard-sized and Inlet Water Temperature Option input field is selected as FixedInletWaterTemperature, then the thermal efficiency input field will not be used or else if the Inlet Water Temperature Option input field is selected as VariableInletWaterTemperature, then the thermal efficiency input value is overridden by a value calculated from the capacity, rated gas use rate and design condition.")]
public System.String RatedGasUseRate { get; set; } = "";
        
[Description(@"Based on the higher heating value of fuel. If "Rated Gas Use Rate" in the field above is not auto-sized and the Inlet Water Temperature Option input field is specified as FixedInletWaterTemperature, then the thermal efficiency specified will not be used in the calculation, or else if the Inlet Water Temperature Option input field is selected as VariableInletWaterTemperature, then the thermal efficiency value is overridden by a value calculated from the capacity, rated gas use rate and design condition.")]
[JsonProperty(@"Based on the higher heating value of fuel. If "Rated Gas Use Rate" in the field above is not auto-sized and the Inlet Water Temperature Option input field is specified as FixedInletWaterTemperature, then the thermal efficiency specified will not be used in the calculation, or else if the Inlet Water Temperature Option input field is selected as VariableInletWaterTemperature, then the thermal efficiency value is overridden by a value calculated from the capacity, rated gas use rate and design condition.")]
public System.Single ThermalEfficiency { get; set; } = 0.8;
        
[Description(@"Linear, Quadratic and Cubic efficiency curves are solely a function of PLR. Linear = C1 + C2*PLR Quadratic = C1 + C2*PLR + C3*PLR^2 Cubic = C1 + C2*PLR + C3*PLR^2 + C4*PLR^3 This is thermal efficiency modifier curve name of gas fired steam humidifier. This curve is normalized, i.e., curve output value at rated condition is 1.0.")]
[JsonProperty(@"Linear, Quadratic and Cubic efficiency curves are solely a function of PLR. Linear = C1 + C2*PLR Quadratic = C1 + C2*PLR + C3*PLR^2 Cubic = C1 + C2*PLR + C3*PLR^2 + C4*PLR^3 This is thermal efficiency modifier curve name of gas fired steam humidifier. This curve is normalized, i.e., curve output value at rated condition is 1.0.")]
public System.String ThermalEfficiencyModifierCurveName { get; set; } = "";
        
[Description(@"The nominal full capacity electric power input to the blower fan in Watts. If no blower fan is required to inject the dry steam to the supply air stream, then this input field is set to zero.")]
[JsonProperty(@"The nominal full capacity electric power input to the blower fan in Watts. If no blower fan is required to inject the dry steam to the supply air stream, then this input field is set to zero.")]
public System.Single RatedFanPower { get; set; } = ;
        
[Description(@"The auxiliary electric power input in watts. This amount of power will be consumed whenever the unit is available (as defined by the availability schedule). This electric power is used for control purpose only.")]
[JsonProperty(@"The auxiliary electric power input in watts. This amount of power will be consumed whenever the unit is available (as defined by the availability schedule). This electric power is used for control purpose only.")]
public System.Single AuxiliaryElectricPower { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterStorageTankName { get; set; } = "";
        
[Description(@"The inlet water temperature can be fixed at 20C as it is done for electric steam humidifier or it can be allowed to vary with temperature of the water source. Currently allowed water sources are main water or water storage tank in water use objects. if FixedInletWaterTemperature is specified, then a fixed 20C water temperature will be used, or else if VariableInletWaterTemperature is specified, then inlet water will vary depending the source water temperature. If this input field is left blank, then fixed inlet water temperature of 20C will be assumed.")]
[JsonProperty(@"The inlet water temperature can be fixed at 20C as it is done for electric steam humidifier or it can be allowed to vary with temperature of the water source. Currently allowed water sources are main water or water storage tank in water use objects. if FixedInletWaterTemperature is specified, then a fixed 20C water temperature will be used, or else if VariableInletWaterTemperature is specified, then inlet water will vary depending the source water temperature. If this input field is left blank, then fixed inlet water temperature of 20C will be assumed.")]
public YesNoDefault InletWaterTemperatureOption { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FixedInletWaterTemperature");
    }
    
    public enum InletWaterTemperatureOptionType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FixedInletWaterTemperature")]
        FixedInletWaterTemperature = 1,
        
        [JsonProperty("VariableInletWaterTemperature")]
        VariableInletWaterTemperature = 2,
    }
    
    [Description(@"This object models a solid desiccant dehumidifier. The process air stream is the air which is dehumidified. The regeneration air stream is the air which is heated to regenerate the desiccant. This object determines the process air outlet conditions, the load on the regeneration heating coil, the electric power consumption for the wheel rotor motor, and the regeneration air fan mass flow rate. All other heat exchangers are modeled as separate objects connected to the inlet and outlet nodes of the dehumidifier. The solid desiccant dehumidifier is typically used in an AirLoopHVAC:OutdoorAirSystem, but can also be specified in any AirLoopHVAC.")]
    [JsonObject("Dehumidifier:Desiccant:NoFans")]
    public class Dehumidifier_Desiccant_NoFans
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"This is the node entering the process side of the desiccant wheel.")]
[JsonProperty(@"This is the node entering the process side of the desiccant wheel.")]
public System.String ProcessAirInletNodeName { get; set; } = "";
        
[Description(@"This is the node leaving the process side of the desiccant wheel.")]
[JsonProperty(@"This is the node leaving the process side of the desiccant wheel.")]
public System.String ProcessAirOutletNodeName { get; set; } = "";
        
[Description(@"This is the node entering the regeneration side of the desiccant wheel after the regeneration coil.")]
[JsonProperty(@"This is the node entering the regeneration side of the desiccant wheel after the regeneration coil.")]
public System.String RegenerationAirInletNodeName { get; set; } = "";
        
[Description(@"Node for air entering the regeneration fan, mass flow is set by the desiccant dehumidifier module.")]
[JsonProperty(@"Node for air entering the regeneration fan, mass flow is set by the desiccant dehumidifier module.")]
public System.String RegenerationFanInletNodeName { get; set; } = "";
        
[Description(@"Type of setpoint control: LeavingMaximumHumidityRatioSetpoint means that the unit is controlled to deliver air at the Leaving Max Humidity Ratio Setpoint (see below), SystemNodeMaximumHumidityRatioSetpoint means that the leaving humidity ratio setpoint is the System Node Humidity Ratio Max property of the Process Air Outlet Node. A Setpoint object must be used to control this setpoint. Both control types use bypass dampers to prevent over drying.")]
[JsonProperty(@"Type of setpoint control: LeavingMaximumHumidityRatioSetpoint means that the unit is controlled to deliver air at the Leaving Max Humidity Ratio Setpoint (see below), SystemNodeMaximumHumidityRatioSetpoint means that the leaving humidity ratio setpoint is the System Node Humidity Ratio Max property of the Process Air Outlet Node. A Setpoint object must be used to control this setpoint. Both control types use bypass dampers to prevent over drying.")]
public YesNoDefault ControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Fixed setpoint for maximum process air leaving humidity ratio Applicable only when Control Type = LeavingMaximumHumidityRatioSetpoint.")]
[JsonProperty(@"Fixed setpoint for maximum process air leaving humidity ratio Applicable only when Control Type = LeavingMaximumHumidityRatioSetpoint.")]
public System.Single LeavingMaximumHumidityRatioSetpoint { get; set; } = ;
        
[Description(@"Process air flow rate at nominal conditions")]
[JsonProperty(@"Process air flow rate at nominal conditions")]
public System.Single NominalProcessAirFlowRate { get; set; } = ;
        
[Description(@"Process air velocity at nominal flow When using Performance Model Type of Default, must be 2.032 to 4.064 m/s (400 to 800 fpm)")]
[JsonProperty(@"Process air velocity at nominal flow When using Performance Model Type of Default, must be 2.032 to 4.064 m/s (400 to 800 fpm)")]
public System.Single NominalProcessAirVelocity { get; set; } = ;
        
[Description(@"Power input to wheel rotor motor")]
[JsonProperty(@"Power input to wheel rotor motor")]
public System.Single RotorPower { get; set; } = ;
        
[Description(@"heating coil type works with gas, electric, hot water and steam heating coils")]
[JsonProperty(@"heating coil type works with gas, electric, hot water and steam heating coils")]
public YesNoDefault RegenerationCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Name of heating coil object for regeneration air")]
[JsonProperty(@"Name of heating coil object for regeneration air")]
public System.String RegenerationCoilName { get; set; } = "";
        
[Description(@"Type of fan object for regeneration air. When using the Default Performance Model Type (see below), only Fan:VariableVolume or Fan:SystemModel are valid.")]
[JsonProperty(@"Type of fan object for regeneration air. When using the Default Performance Model Type (see below), only Fan:VariableVolume or Fan:SystemModel are valid.")]
public YesNoDefault RegenerationFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Name of fan object for regeneration air")]
[JsonProperty(@"Name of fan object for regeneration air")]
public System.String RegenerationFanName { get; set; } = "";
        
[Description(@"Specifies whether the default performance model or user-specified curves should be used to model the performance. The default model is a generic solid desiccant wheel using performance curves of the form: curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*vel + C7*vel**2 + C8*edb*ew + C9*edb**2*ew**2 + C10*edb*vel + C11*edb**2*vel**2 + C12*ew*vel + C13*ew**2*vel**2 + C14*ALOG(edb) + C15*ALOG(ew) + C16*ALOG(vel) edb = process entering dry-bulb temperature [C] ew  = process entering humidity ratio [kgWater/kgDryAir] vel = process air velocity [m/s] If UserCurves are specified, then performance is calculated as follows: Leaving Dry-Bulb = (Leaving Dry-Bulb fTW Curve) * (Leaving Dry-Bulb fV Curve) Leaving Humidity Ratio = (Leaving Humidity Ratio fTW Curve) * (Leaving Humidity Ratio fV Curve) Regen Energy = (Regen Energy fTW Curve) * (Regen Energy fV Curve) Regen Velocity = (Regen Velocity fTW Curve) * (Regen Velocity fV Curve)")]
[JsonProperty(@"Specifies whether the default performance model or user-specified curves should be used to model the performance. The default model is a generic solid desiccant wheel using performance curves of the form: curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*vel + C7*vel**2 + C8*edb*ew + C9*edb**2*ew**2 + C10*edb*vel + C11*edb**2*vel**2 + C12*ew*vel + C13*ew**2*vel**2 + C14*ALOG(edb) + C15*ALOG(ew) + C16*ALOG(vel) edb = process entering dry-bulb temperature [C] ew  = process entering humidity ratio [kgWater/kgDryAir] vel = process air velocity [m/s] If UserCurves are specified, then performance is calculated as follows: Leaving Dry-Bulb = (Leaving Dry-Bulb fTW Curve) * (Leaving Dry-Bulb fV Curve) Leaving Humidity Ratio = (Leaving Humidity Ratio fTW Curve) * (Leaving Humidity Ratio fV Curve) Regen Energy = (Regen Energy fTW Curve) * (Regen Energy fV Curve) Regen Velocity = (Regen Velocity fTW Curve) * (Regen Velocity fV Curve)")]
public YesNoDefault PerformanceModelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Leaving dry-bulb of process air as a function of entering dry-bulb and entering humidity ratio, biquadratic curve curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*edb*ew edb = process entering dry-bulb temperature [C] ew  = process entering humidity ratio [kgWater/kgDryAir]")]
[JsonProperty(@"Leaving dry-bulb of process air as a function of entering dry-bulb and entering humidity ratio, biquadratic curve curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*edb*ew edb = process entering dry-bulb temperature [C] ew  = process entering humidity ratio [kgWater/kgDryAir]")]
public System.String LeavingDryBulbFunctionOfEnteringDryBulbAndHumidityRatioCurveName { get; set; } = "";
        
[Description(@"Leaving dry-bulb of process air as a function of air velocity, quadratic curve. curve = C1 + C2*v + C3*v**2 v = process air velocity [m/s]")]
[JsonProperty(@"Leaving dry-bulb of process air as a function of air velocity, quadratic curve. curve = C1 + C2*v + C3*v**2 v = process air velocity [m/s]")]
public System.String LeavingDryBulbFunctionOfAirVelocityCurveName { get; set; } = "";
        
[Description(@"Leaving humidity ratio of process air as a function of entering dry-bulb and entering humidity ratio, biquadratic curve curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*edb*ew edb = process entering dry-bulb temperature [C] ew  = process entering humidity ratio [kgWater/kgDryAir]")]
[JsonProperty(@"Leaving humidity ratio of process air as a function of entering dry-bulb and entering humidity ratio, biquadratic curve curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*edb*ew edb = process entering dry-bulb temperature [C] ew  = process entering humidity ratio [kgWater/kgDryAir]")]
public System.String LeavingHumidityRatioFunctionOfEnteringDryBulbAndHumidityRatioCurveName { get; set; } = "";
        
[Description(@"Leaving humidity ratio of process air as a function of process air velocity, quadratic curve. curve = C1 + C2*v + C3*v**2 v = process air velocity [m/s]")]
[JsonProperty(@"Leaving humidity ratio of process air as a function of process air velocity, quadratic curve. curve = C1 + C2*v + C3*v**2 v = process air velocity [m/s]")]
public System.String LeavingHumidityRatioFunctionOfAirVelocityCurveName { get; set; } = "";
        
[Description(@"Regeneration energy [J/kg of water removed] as a function of entering dry-bulb and entering humidity ratio, biquadratic curve curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*edb*ew edb = process entering dry-bulb temperature [C] ew  = process entering humidity ratio [kgWater/kgDryAir]")]
[JsonProperty(@"Regeneration energy [J/kg of water removed] as a function of entering dry-bulb and entering humidity ratio, biquadratic curve curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*edb*ew edb = process entering dry-bulb temperature [C] ew  = process entering humidity ratio [kgWater/kgDryAir]")]
public System.String RegenerationEnergyFunctionOfEnteringDryBulbAndHumidityRatioCurveName { get; set; } = "";
        
[Description(@"Regeneration energy [J/kg of water removed] as a function of process air velocity, quadratic curve. curve = C1 + C2*v + C3*v**2 v = process air velocity [m/s]")]
[JsonProperty(@"Regeneration energy [J/kg of water removed] as a function of process air velocity, quadratic curve. curve = C1 + C2*v + C3*v**2 v = process air velocity [m/s]")]
public System.String RegenerationEnergyFunctionOfAirVelocityCurveName { get; set; } = "";
        
[Description(@"Regeneration velocity [m/s] as a function of entering dry-bulb and entering humidity ratio, biquadratic curve curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*edb*ew edb = process entering dry-bulb temperature [C] ew  = process entering humidity ratio [kgWater/kgDryAir]")]
[JsonProperty(@"Regeneration velocity [m/s] as a function of entering dry-bulb and entering humidity ratio, biquadratic curve curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*edb*ew edb = process entering dry-bulb temperature [C] ew  = process entering humidity ratio [kgWater/kgDryAir]")]
public System.String RegenerationVelocityFunctionOfEnteringDryBulbAndHumidityRatioCurveName { get; set; } = "";
        
[Description(@"Regeneration velocity [m/s] as a function of process air velocity, quadratic curve. curve = C1 + C2*v + C3*v**2 v = process air velocity [m/s]")]
[JsonProperty(@"Regeneration velocity [m/s] as a function of process air velocity, quadratic curve. curve = C1 + C2*v + C3*v**2 v = process air velocity [m/s]")]
public System.String RegenerationVelocityFunctionOfAirVelocityCurveName { get; set; } = "";
        
[Description(@"Nominal regen temperature upon which the regen energy modifier curve is based. Not used if Default if chosen for the field Performance Mode Type. 121 C is a commonly used value.")]
[JsonProperty(@"Nominal regen temperature upon which the regen energy modifier curve is based. Not used if Default if chosen for the field Performance Mode Type. 121 C is a commonly used value.")]
public System.Single NominalRegenerationTemperature { get; set; } = ;
    }
    
    public enum ControlTypeType
    {
        
        [JsonProperty("LeavingMaximumHumidityRatioSetpoint")]
        LeavingMaximumHumidityRatioSetpoint = 0,
        
        [JsonProperty("SystemNodeMaximumHumidityRatioSetpoint")]
        SystemNodeMaximumHumidityRatioSetpoint = 1,
    }
    
    public enum RegenerationCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum RegenerationFanObjectTypeType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 1,
        
        [JsonProperty("Fan:VariableVolume")]
        FanVariableVolume = 2,
    }
    
    public enum PerformanceModelTypeType
    {
        
        [JsonProperty("Default")]
        Default = 0,
        
        [JsonProperty("UserCurves")]
        UserCurves = 1,
    }
    
    [Description(@"This compound object models a desiccant heat exchanger, an optional heater, and associated fans. The process air stream is the air which is dehumidified. The regeneration air stream is the air which is heated to regenerate the desiccant. The desiccant heat exchanger transfers both sensible and latent energy between the process and regeneration air streams. The desiccant dehumidifier is typically used in an AirLoopHVAC:OutdoorAirSystem, but can also be specified in any AirLoopHVAC.")]
    [JsonObject("Dehumidifier:Desiccant:System")]
    public class Dehumidifier_Desiccant_System
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault DesiccantHeatExchangerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String DesiccantHeatExchangerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SensorNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault RegenerationAirFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String RegenerationAirFanName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault RegenerationAirFanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DrawThrough");
        
[Description(@"works with gas, electric, hot water and steam heating coils. For autosizing the regeneration air heating coil the Design Coil Inlet Air Condition used is the outdoor air condition if the desiccant system is on the primary air loop, or else if the desiccant system is on outdoor air system then it is the return air condition. The Design Coil Outlet Air Temperature is the Regeneration Inlet Air Setpoint Temperature specified in the input field below.")]
[JsonProperty(@"works with gas, electric, hot water and steam heating coils. For autosizing the regeneration air heating coil the Design Coil Inlet Air Condition used is the outdoor air condition if the desiccant system is on the primary air loop, or else if the desiccant system is on outdoor air system then it is the return air condition. The Design Coil Outlet Air Temperature is the Regeneration Inlet Air Setpoint Temperature specified in the input field below.")]
public YesNoDefault RegenerationAirHeaterObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String RegenerationAirHeaterName { get; set; } = "";
        
[Description(@"This value is also used as regeneration air heater design coil air outlet temperature for autosizing calculation of the heater.")]
[JsonProperty(@"This value is also used as regeneration air heater design coil air outlet temperature for autosizing calculation of the heater.")]
public System.Single RegenerationInletAirSetpointTemperature { get; set; } = 46;
        
[JsonProperty(@"")]
public YesNoDefault CompanionCoolingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String CompanionCoolingCoilName { get; set; } = "";
        
[Description(@"Select Yes if the companion cooling coil is located directly upstream of the desiccant heat exchanger's process air inlet node.")]
[JsonProperty(@"Select Yes if the companion cooling coil is located directly upstream of the desiccant heat exchanger's process air inlet node.")]
public YesNoDefault CompanionCoolingCoilUpstreamOfDehumidifierProcessInlet { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public YesNoDefault CompanionCoilRegenerationAirHeating { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public System.Single ExhaustFanMaximumFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ExhaustFanMaximumPower { get; set; } = ;
        
[Description(@"Curve object type must be Curve:Quadratic or Curve:Cubic")]
[JsonProperty(@"Curve object type must be Curve:Quadratic or Curve:Cubic")]
public System.String ExhaustFanPowerCurveName { get; set; } = "";
    }
    
    public enum DesiccantHeatExchangerObjectTypeType
    {
        
        [JsonProperty("HeatExchanger:Desiccant:BalancedFlow")]
        HeatExchangerDesiccantBalancedFlow = 0,
    }
    
    public enum RegenerationAirFanObjectTypeType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 2,
    }
    
    public enum RegenerationAirFanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum RegenerationAirHeaterObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum CompanionCoolingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:TwoStageWithHumidityControlMode")]
        CoilCoolingDXTwoStageWithHumidityControlMode = 1,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 2,
    }
}
namespace EnergyPlus.HVACDesignObjects
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("This object is used to describe general outdoor air requirements which are refere" +
        "nced by other objects.")]
    [JsonObject("DesignSpecification:OutdoorAir")]
    public class DesignSpecification_OutdoorAir
    {
        
[Description(@"Flow/Person => Outdoor Air Flow per Person * Occupancy = Design Flow Rate, Flow/Area => Outdoor Air Flow per Zone Floor Area * Zone Floor Area = Design Flow Rate, Flow/Zone => Outdoor Air Flow per Zone = Design Flow Rate, AirChanges/Hour => Outdoor Air Flow Air Changes per Hour * Zone Volume adjusted for m3/s = Design Flow Rate")]
[JsonProperty(@"Flow/Person => Outdoor Air Flow per Person * Occupancy = Design Flow Rate, Flow/Area => Outdoor Air Flow per Zone Floor Area * Zone Floor Area = Design Flow Rate, Flow/Zone => Outdoor Air Flow per Zone = Design Flow Rate, AirChanges/Hour => Outdoor Air Flow Air Changes per Hour * Zone Volume adjusted for m3/s = Design Flow Rate")]
public YesNoDefault OutdoorAirMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Flow/Person");
        
[Description(@"0.00944 m3/s is equivalent to 20 cfm per person This input is only used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum For sizing, the design number of occupants is used. For outdoor air flow control, the use of design occupants or current occupants depends on the component and DCV options. AirTerminal:SingleDuct:VAV:NoReheat, AirTerminal:SingleDuct:VAV:Reheat use the DCV flag specified in Controller:MechanicalVentilation AirTerminal:DualDuct:VAV:OutdoorAir and ZoneHVAC:IdealLoadsAirSystem have their own DCV control input. ZoneHVAC:FourPipeFanCoil always uses current occupants.")]
[JsonProperty(@"0.00944 m3/s is equivalent to 20 cfm per person This input is only used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum For sizing, the design number of occupants is used. For outdoor air flow control, the use of design occupants or current occupants depends on the component and DCV options. AirTerminal:SingleDuct:VAV:NoReheat, AirTerminal:SingleDuct:VAV:Reheat use the DCV flag specified in Controller:MechanicalVentilation AirTerminal:DualDuct:VAV:OutdoorAir and ZoneHVAC:IdealLoadsAirSystem have their own DCV control input. ZoneHVAC:FourPipeFanCoil always uses current occupants.")]
public System.Single OutdoorAirFlowPerPerson { get; set; } = 0.00944;
        
[Description(@"This input is only used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty(@"This input is only used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
public System.Single OutdoorAirFlowPerZoneFloorArea { get; set; } = 0;
        
[Description(@"This input is only used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty(@"This input is only used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
public System.Single OutdoorAirFlowPerZone { get; set; } = 0;
        
[Description(@"This input is only used if the field Outdoor Air Method is AirChanges/Hour, Sum, or Maximum")]
[JsonProperty(@"This input is only used if the field Outdoor Air Method is AirChanges/Hour, Sum, or Maximum")]
public System.Single OutdoorAirFlowAirChangesPerHour { get; set; } = 0;
        
[Description(@"Schedule values are multiplied by the Outdoor Air Flow rate calculated using the previous four inputs. Schedule values are limited to 0 to 1. If left blank, the schedule defaults to 1.0. This schedule is ignored during sizing. All other components which reference this design specification use the current schedule value to calculate the current outdoor air requirement. This includes AirTerminal:SingleDuct:VAV:NoReheat, AirTerminal:SingleDuct:VAV:Reheat, AirTerminal:DualDuct:VAV:OutdoorAir, ZoneHVAC:FourPipeFanCoil, and ZoneHVAC:IdealLoadsAirSystem. This schedule will also be applied by Controller:MechanicalVentilation for all System Outdoor Air Methods.")]
[JsonProperty(@"Schedule values are multiplied by the Outdoor Air Flow rate calculated using the previous four inputs. Schedule values are limited to 0 to 1. If left blank, the schedule defaults to 1.0. This schedule is ignored during sizing. All other components which reference this design specification use the current schedule value to calculate the current outdoor air requirement. This includes AirTerminal:SingleDuct:VAV:NoReheat, AirTerminal:SingleDuct:VAV:Reheat, AirTerminal:DualDuct:VAV:OutdoorAir, ZoneHVAC:FourPipeFanCoil, and ZoneHVAC:IdealLoadsAirSystem. This schedule will also be applied by Controller:MechanicalVentilation for all System Outdoor Air Methods.")]
public System.String OutdoorAirScheduleName { get; set; } = "";
        
[Description(@"This input is only used to calculate the minimum outdoor air flow rate when the field System Outdoor Air Method = ProportionalControlBasedOnDesignOARate in Controller:MechanicalVentilation.")]
[JsonProperty(@"This input is only used to calculate the minimum outdoor air flow rate when the field System Outdoor Air Method = ProportionalControlBasedOnDesignOARate in Controller:MechanicalVentilation.")]
public System.String ProportionalControlMinimumOutdoorAirFlowRateScheduleName { get; set; } = "";
    }
    
    public enum OutdoorAirMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirChanges/Hour")]
        AirChangesHour = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("IndoorAirQualityProcedure")]
        IndoorAirQualityProcedure = 5,
        
        [JsonProperty("Maximum")]
        Maximum = 6,
        
        [JsonProperty("ProportionalControlBasedOnDesignOccupancy")]
        ProportionalControlBasedOnDesignOccupancy = 7,
        
        [JsonProperty("ProportionalControlBasedOnOccupancySchedule")]
        ProportionalControlBasedOnOccupancySchedule = 8,
        
        [JsonProperty("Sum")]
        Sum = 9,
    }
    
    [Description("This object is used to describe zone air distribution in terms of air distributio" +
        "n effectiveness and secondary recirculation fraction. It is referenced by Sizing" +
        ":Zone and Controller:MechanicalVentilation objects")]
    [JsonObject("DesignSpecification:ZoneAirDistribution")]
    public class DesignSpecification_ZoneAirDistribution
    {
        
[JsonProperty(@"")]
public System.Single ZoneAirDistributionEffectivenessInCoolingMode { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single ZoneAirDistributionEffectivenessInHeatingMode { get; set; } = 1;
        
[Description(@"optionally used to replace Zone Air Distribution Effectiveness in Cooling and Heating Mode")]
[JsonProperty(@"optionally used to replace Zone Air Distribution Effectiveness in Cooling and Heating Mode")]
public System.String ZoneAirDistributionEffectivenessScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single ZoneSecondaryRecirculationFraction { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single MinimumZoneVentilationEfficiency { get; set; } = 0;
    }
    
    [Description(@"Specifies global heating and cooling sizing factors/ratios. These ratios are applied at the zone level to all of the zone heating and cooling loads and air flow rates. Then these new loads and air flow rates are used to calculate the system level flow rates and capacities and are used in all component sizing calculations. Specifies the width (in load timesteps) of a moving average window which is used to smooth the peak load across more than one timestep.")]
    [JsonObject("Sizing:Parameters")]
    public class Sizing_Parameters
    {
        
[JsonProperty(@"")]
public System.Single HeatingSizingFactor { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single CoolingSizingFactor { get; set; } = 1;
        
[Description(@"blank => set the timesteps in averaging window to Number of Timesteps per Hour resulting in a 1 hour averaging window default is number of timesteps for 1 hour averaging window")]
[JsonProperty(@"blank => set the timesteps in averaging window to Number of Timesteps per Hour resulting in a 1 hour averaging window default is number of timesteps for 1 hour averaging window")]
public System.Single TimestepsInAveragingWindow { get; set; } = ;
    }
    
    [Description(@"Specifies the data needed to perform a zone design air flow calculation. The calculation is done for every sizing period included in the input. The maximum cooling and heating load and cooling, heating, and ventilation air flows are then saved for system level and zone component design calculations.")]
    [JsonObject("Sizing:Zone")]
    public class Sizing_Zone
    {
        
[JsonProperty(@"")]
public System.String ZoneOrZonelistName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SupplyAirTemperature");
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneCoolingDesignSupplyAirTemperature { get; set; } = ;
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
public System.Single ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SupplyAirTemperature");
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneHeatingDesignSupplyAirTemperature { get; set; } = ;
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
public System.Single ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ZoneCoolingDesignSupplyAirHumidityRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ZoneHeatingDesignSupplyAirHumidityRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.String DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        
[Description(@"if blank or zero, global heating sizing factor from Sizing:Parameters is used.")]
[JsonProperty(@"if blank or zero, global heating sizing factor from Sizing:Parameters is used.")]
public System.Single ZoneHeatingSizingFactor { get; set; } = ;
        
[Description(@"if blank or zero, global cooling sizing factor from Sizing:Parameters is used.")]
[JsonProperty(@"if blank or zero, global cooling sizing factor from Sizing:Parameters is used.")]
public System.Single ZoneCoolingSizingFactor { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault CoolingDesignAirFlowMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DesignDay");
        
[Description(@"This input is used if Cooling Design Air Flow Method is Flow/Zone This value will be multiplied by the global or zone sizing factor and by zone multipliers.")]
[JsonProperty(@"This input is used if Cooling Design Air Flow Method is Flow/Zone This value will be multiplied by the global or zone sizing factor and by zone multipliers.")]
public System.Single CoolingDesignAirFlowRate { get; set; } = 0;
        
[Description(@"default is .15 cfm/ft2 This input is used if Cooling Design Air Flow Method is DesignDayWithLimit")]
[JsonProperty(@"default is .15 cfm/ft2 This input is used if Cooling Design Air Flow Method is DesignDayWithLimit")]
public System.Single CoolingMinimumAirFlowPerZoneFloorArea { get; set; } = 0.000762;
        
[Description(@"This input is used if Cooling Design Air Flow Method is DesignDayWithLimit")]
[JsonProperty(@"This input is used if Cooling Design Air Flow Method is DesignDayWithLimit")]
public System.Single CoolingMinimumAirFlow { get; set; } = 0;
        
[Description(@"fraction of the Cooling design Air Flow Rate This input is currently used in sizing the VAV air terminal unit and fan minimum flow rate It does not currently affect other component autosizing.")]
[JsonProperty(@"fraction of the Cooling design Air Flow Rate This input is currently used in sizing the VAV air terminal unit and fan minimum flow rate It does not currently affect other component autosizing.")]
public System.Single CoolingMinimumAirFlowFraction { get; set; } = 0.2;
        
[JsonProperty(@"")]
public YesNoDefault HeatingDesignAirFlowMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DesignDay");
        
[Description(@"This input is used if Heating Design Air Flow Method is Flow/Zone. This value will be multiplied by the global or zone sizing factor and by zone multipliers.")]
[JsonProperty(@"This input is used if Heating Design Air Flow Method is Flow/Zone. This value will be multiplied by the global or zone sizing factor and by zone multipliers.")]
public System.Single HeatingDesignAirFlowRate { get; set; } = 0;
        
[Description(@"default is .40 cfm/ft2 This field is used to size the heating design flow rate when Heating Design Air Flow Method = Flow/Zone. This input is used for autosizing components when Heating Design Air Flow Method = DesignDayWithLimit.")]
[JsonProperty(@"default is .40 cfm/ft2 This field is used to size the heating design flow rate when Heating Design Air Flow Method = Flow/Zone. This input is used for autosizing components when Heating Design Air Flow Method = DesignDayWithLimit.")]
public System.Single HeatingMaximumAirFlowPerZoneFloorArea { get; set; } = 0.002032;
        
[Description(@"default is 300 cfm This input is used for autosizing components when Heating Design Air Flow Method = DesignDayWithLimit.")]
[JsonProperty(@"default is 300 cfm This input is used for autosizing components when Heating Design Air Flow Method = DesignDayWithLimit.")]
public System.Single HeatingMaximumAirFlow { get; set; } = 0.1415762;
        
[Description(@"fraction of the Heating Design Air Flow Rate This input is used for autosizing components when Heating Design Air Flow Method = DesignDayWithLimit.")]
[JsonProperty(@"fraction of the Heating Design Air Flow Rate This input is used for autosizing components when Heating Design Air Flow Method = DesignDayWithLimit.")]
public System.Single HeatingMaximumAirFlowFraction { get; set; } = 0.3;
        
[JsonProperty(@"")]
public System.String DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
        
[Description(@"account for effect of dedicated outdoor air system supplying air directly to the zone")]
[JsonProperty(@"account for effect of dedicated outdoor air system supplying air directly to the zone")]
public YesNoDefault AccountForDedicatedOutdoorAirSystem { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"1)supply neutral ventilation air; 2)supply neutral dehumidified and reheated ventilation air; 3)supply cold ventilation air")]
[JsonProperty(@"1)supply neutral ventilation air; 2)supply neutral dehumidified and reheated ventilation air; 3)supply cold ventilation air")]
public YesNoDefault DedicatedOutdoorAirSystemControlStrategy { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NeutralSupplyAir");
        
[JsonProperty(@"")]
public System.String DedicatedOutdoorAirLowSetpointTemperatureForDesign { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String DedicatedOutdoorAirHighSetpointTemperatureForDesign { get; set; } = (System.String)Autosize;
    }
    
    public enum ZoneCoolingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum ZoneHeatingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum CoolingDesignAirFlowMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DesignDay")]
        DesignDay = 1,
        
        [JsonProperty("DesignDayWithLimit")]
        DesignDayWithLimit = 2,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 3,
    }
    
    public enum HeatingDesignAirFlowMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DesignDay")]
        DesignDay = 1,
        
        [JsonProperty("DesignDayWithLimit")]
        DesignDayWithLimit = 2,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 3,
    }
    
    public enum DedicatedOutdoorAirSystemControlStrategyType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ColdSupplyAir")]
        ColdSupplyAir = 1,
        
        [JsonProperty("NeutralDehumidifiedSupplyAir")]
        NeutralDehumidifiedSupplyAir = 2,
        
        [JsonProperty("NeutralSupplyAir")]
        NeutralSupplyAir = 3,
    }
    
    [Description("This object is used to describe general scalable zone HVAC equipment sizing which" +
        " are referenced by other objects.")]
    [JsonObject("DesignSpecification:ZoneHVAC:Sizing")]
    public class DesignSpecification_ZoneHVAC_Sizing
    {
        
[Description(@"Enter the method used to determine the cooling supply air volume flow rate. None is used when a cooling coil is not included in the Zone HVAC Equip or this field may be blank. SupplyAirFlowRate => selected when the magnitude of the supply air volume flow rate is specified. FlowPerFloorArea => selected when the supply air volume flow rate is determined from total floor area served by the Zone HVAC unit and Flow Per Floor Area value specified. FractionOfAutosizedCoolingAirflow => is selected when the supply air volume is determined from a user specified fraction and the autosized cooling supply air flow rate value determined by the simulation. FlowPerCoolingCapacity => is selected when the supply air volume is determined from user specified flow per Cooling Capacity and Cooling Capacity determined by the simulation.")]
[JsonProperty(@"Enter the method used to determine the cooling supply air volume flow rate. None is used when a cooling coil is not included in the Zone HVAC Equip or this field may be blank. SupplyAirFlowRate => selected when the magnitude of the supply air volume flow rate is specified. FlowPerFloorArea => selected when the supply air volume flow rate is determined from total floor area served by the Zone HVAC unit and Flow Per Floor Area value specified. FractionOfAutosizedCoolingAirflow => is selected when the supply air volume is determined from a user specified fraction and the autosized cooling supply air flow rate value determined by the simulation. FlowPerCoolingCapacity => is selected when the supply air volume is determined from user specified flow per Cooling Capacity and Cooling Capacity determined by the simulation.")]
public YesNoDefault CoolingSupplyAirFlowRateMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SupplyAirFlowRate");
        
[Description(@"Enter the magnitude of supply air volume flow rate during cooling operation. Required field when Cooling Supply Air Flow Rate Method is SupplyAirFlowRate. This field may be blank if a cooling coil is not included in the Zone HVAC equipment.")]
[JsonProperty(@"Enter the magnitude of supply air volume flow rate during cooling operation. Required field when Cooling Supply Air Flow Rate Method is SupplyAirFlowRate. This field may be blank if a cooling coil is not included in the Zone HVAC equipment.")]
public System.String CoolingSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Enter the cooling supply air volume flow rate per total conditioned floor area. Required field when Cooling Supply Air Flow Rate Method is FlowPerFloorArea. This field may be blank if a cooling coil is not included in the Zone HVAC equipment.")]
[JsonProperty(@"Enter the cooling supply air volume flow rate per total conditioned floor area. Required field when Cooling Supply Air Flow Rate Method is FlowPerFloorArea. This field may be blank if a cooling coil is not included in the Zone HVAC equipment.")]
public System.Single CoolingSupplyAirFlowRatePerFloorArea { get; set; } = ;
        
[Description(@"Enter the supply air volume flow rate as a fraction of the cooling supply air flow rate. Required field when Cooling Supply Air Flow Rate Method is FractionOfAutosizedCoolingAirflow. This field may be blank if a cooling coil is not included in the Zone HVAC equipment.")]
[JsonProperty(@"Enter the supply air volume flow rate as a fraction of the cooling supply air flow rate. Required field when Cooling Supply Air Flow Rate Method is FractionOfAutosizedCoolingAirflow. This field may be blank if a cooling coil is not included in the Zone HVAC equipment.")]
public System.Single CoolingFractionOfAutosizedCoolingSupplyAirFlowRate { get; set; } = ;
        
[Description(@"Enter the cooling supply air volume flow rate unit cooling capacity. Required field when Cooling Supply Air Flow Rate Method is FlowPerCoolingCapacity. This field may be blank if a cooling coil is not included in the Zone HVAC equipment.")]
[JsonProperty(@"Enter the cooling supply air volume flow rate unit cooling capacity. Required field when Cooling Supply Air Flow Rate Method is FlowPerCoolingCapacity. This field may be blank if a cooling coil is not included in the Zone HVAC equipment.")]
public System.Single CoolingSupplyAirFlowRatePerUnitCoolingCapacity { get; set; } = ;
        
[Description(@"Enter the method used to determine the supply air volume flow rate When No Cooling or Heating is Required. None is used when a cooling or heating coil is not included in the Zone HVAC Equipment or this field may be blank. SupplyAirFlowRate => selected when the magnitude of the supply air volume flow rate is specified. FlowPerFloorArea => selected when the supply air volume flow rate is determined from total floor area served by the Zone HVAC unit and Flow Per Floor Area is specified. FractionOfAutosizedCoolingAirflow => is selected when the supply air volume is determined from a user specified fraction and the Autosized cooling supply air flow rate value determined by the simulation. FractionOfAutosizedHeatingAirflow => is selected when the supply air volume is determined from a user specified fraction and the Autosized heating supply air flow rate value determined by the simulation.")]
[JsonProperty(@"Enter the method used to determine the supply air volume flow rate When No Cooling or Heating is Required. None is used when a cooling or heating coil is not included in the Zone HVAC Equipment or this field may be blank. SupplyAirFlowRate => selected when the magnitude of the supply air volume flow rate is specified. FlowPerFloorArea => selected when the supply air volume flow rate is determined from total floor area served by the Zone HVAC unit and Flow Per Floor Area is specified. FractionOfAutosizedCoolingAirflow => is selected when the supply air volume is determined from a user specified fraction and the Autosized cooling supply air flow rate value determined by the simulation. FractionOfAutosizedHeatingAirflow => is selected when the supply air volume is determined from a user specified fraction and the Autosized heating supply air flow rate value determined by the simulation.")]
public YesNoDefault NoLoadSupplyAirFlowRateMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SupplyAirFlowRate");
        
[Description(@"Enter the magnitude of the supply air volume flow rate during when no cooling or heating is required. Required field when No Load Supply Air Flow Rate Method is SupplyAirFlowRate.")]
[JsonProperty(@"Enter the magnitude of the supply air volume flow rate during when no cooling or heating is required. Required field when No Load Supply Air Flow Rate Method is SupplyAirFlowRate.")]
public System.String NoLoadSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Enter the supply air volume flow rate per total floor area. Required field when No Load Supply Air Flow Rate Method is FlowPerFloorArea.")]
[JsonProperty(@"Enter the supply air volume flow rate per total floor area. Required field when No Load Supply Air Flow Rate Method is FlowPerFloorArea.")]
public System.Single NoLoadSupplyAirFlowRatePerFloorArea { get; set; } = ;
        
[Description(@"Enter the supply air volume flow rate as a fraction of the cooling supply air flow rate. Required field when No Load Supply Air Flow Rate Method is FractionOfAutosizedCoolingAirflow.")]
[JsonProperty(@"Enter the supply air volume flow rate as a fraction of the cooling supply air flow rate. Required field when No Load Supply Air Flow Rate Method is FractionOfAutosizedCoolingAirflow.")]
public System.Single NoLoadFractionOfCoolingSupplyAirFlowRate { get; set; } = ;
        
[Description(@"Enter the supply air volume flow rate as a fraction of the heating supply air flow rate. Required field when No Load Supply Air Flow Rate Method is FractionOfAutosizedHeatingAirflow.")]
[JsonProperty(@"Enter the supply air volume flow rate as a fraction of the heating supply air flow rate. Required field when No Load Supply Air Flow Rate Method is FractionOfAutosizedHeatingAirflow.")]
public System.Single NoLoadFractionOfHeatingSupplyAirFlowRate { get; set; } = ;
        
[Description(@"Enter the method used to determine the heating supply air volume flow rate. None is used when a heating coil is not included in the Zone HVAC Equipment or this field may be blank. SupplyAirFlowRate => selected when the magnitude of the heating supply air volume flow rate is specified. FlowPerFloorArea => selected when the supply air volume flow rate is determined from total floor area served by a Zone HVAC unit and user specified value of Flow Per Floor Area. FractionOfAutosizedHeatingAirflow => is selected when the supply air volume is determined from a user specified fraction and the Autosized heating supply air flow rate value determined by the simulation. FlowPerHeatingCapacity => is selected when the supply air volume is determined from user specified flow per Heating Capacity and Heating Capacity determined by the simulation.")]
[JsonProperty(@"Enter the method used to determine the heating supply air volume flow rate. None is used when a heating coil is not included in the Zone HVAC Equipment or this field may be blank. SupplyAirFlowRate => selected when the magnitude of the heating supply air volume flow rate is specified. FlowPerFloorArea => selected when the supply air volume flow rate is determined from total floor area served by a Zone HVAC unit and user specified value of Flow Per Floor Area. FractionOfAutosizedHeatingAirflow => is selected when the supply air volume is determined from a user specified fraction and the Autosized heating supply air flow rate value determined by the simulation. FlowPerHeatingCapacity => is selected when the supply air volume is determined from user specified flow per Heating Capacity and Heating Capacity determined by the simulation.")]
public YesNoDefault HeatingSupplyAirFlowRateMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SupplyAirFlowRate");
        
[Description(@"Enter the magnitude of the supply air volume flow rate during heating operation. Required field when Heating Supply Air Flow Rate Method is SupplyAirFlowRate. This field may be blank if a heating coil is not included in the Zone HVAC equipment.")]
[JsonProperty(@"Enter the magnitude of the supply air volume flow rate during heating operation. Required field when Heating Supply Air Flow Rate Method is SupplyAirFlowRate. This field may be blank if a heating coil is not included in the Zone HVAC equipment.")]
public System.String HeatingSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Enter the heating supply air volume flow rate per total conditioned floor area. Required field when Heating Supply Air Flow Rate Method is FlowPerFloorArea. This field may be blank if a heating coil is not included in the Zone HVAC equipment.")]
[JsonProperty(@"Enter the heating supply air volume flow rate per total conditioned floor area. Required field when Heating Supply Air Flow Rate Method is FlowPerFloorArea. This field may be blank if a heating coil is not included in the Zone HVAC equipment.")]
public System.Single HeatingSupplyAirFlowRatePerFloorArea { get; set; } = ;
        
[Description(@"Enter the supply air volume flow rate as a fraction of the heating supply air flow rate. Required field when Heating Supply Air Flow Rate Method is FractionOfAutosizedHeatingAirflow. This field may be blank if a heating coil is not included in the Zone HVAC equipment.")]
[JsonProperty(@"Enter the supply air volume flow rate as a fraction of the heating supply air flow rate. Required field when Heating Supply Air Flow Rate Method is FractionOfAutosizedHeatingAirflow. This field may be blank if a heating coil is not included in the Zone HVAC equipment.")]
public System.Single HeatingFractionOfHeatingSupplyAirFlowRate { get; set; } = ;
        
[Description(@"Enter the supply air volume flow rate per unit heating capacity. Required field when Heating Supply Air Flow Rate Method is FlowPerHeatingCapacity. This field may be blank if a heating coil is not included in the Zone HVAC equipment.")]
[JsonProperty(@"Enter the supply air volume flow rate per unit heating capacity. Required field when Heating Supply Air Flow Rate Method is FlowPerHeatingCapacity. This field may be blank if a heating coil is not included in the Zone HVAC equipment.")]
public System.Single HeatingSupplyAirFlowRatePerUnitHeatingCapacity { get; set; } = ;
        
[Description(@"Enter the method used to determine the cooling design capacity for scalable sizing. None is used when a cooling coils is not included in the Zone HVAC Equipment or this field may be blank. If this input field is left blank, then the design cooling capacity is set to zero. CoolingDesignCapacity => selected when the design cooling capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determine from user specified cooling capacity per floor area and zone floor area. FractionOfAutosizedCoolingCapacity => is selected when the design cooling capacity is determined from a user specified fraction and the auto-sized design cooling capacity.")]
[JsonProperty(@"Enter the method used to determine the cooling design capacity for scalable sizing. None is used when a cooling coils is not included in the Zone HVAC Equipment or this field may be blank. If this input field is left blank, then the design cooling capacity is set to zero. CoolingDesignCapacity => selected when the design cooling capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determine from user specified cooling capacity per floor area and zone floor area. FractionOfAutosizedCoolingCapacity => is selected when the design cooling capacity is determined from a user specified fraction and the auto-sized design cooling capacity.")]
public YesNoDefault CoolingDesignCapacityMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Enter the design cooling capacity. Required field when the cooling design capacity method CoolingDesignCapacity.")]
[JsonProperty(@"Enter the design cooling capacity. Required field when the cooling design capacity method CoolingDesignCapacity.")]
public System.String CoolingDesignCapacity { get; set; } = "";
        
[Description(@"Enter the cooling design capacity per zone floor area. Required field when the cooling design capacity method field is CapacityPerFloorArea.")]
[JsonProperty(@"Enter the cooling design capacity per zone floor area. Required field when the cooling design capacity method field is CapacityPerFloorArea.")]
public System.Single CoolingDesignCapacityPerFloorArea { get; set; } = ;
        
[Description(@"Enter the fraction of auto-sized cooling design capacity. Required field when the cooling design capacity method field is FractionOfAutosizedCoolingCapacity.")]
[JsonProperty(@"Enter the fraction of auto-sized cooling design capacity. Required field when the cooling design capacity method field is FractionOfAutosizedCoolingCapacity.")]
public System.Single FractionOfAutosizedCoolingDesignCapacity { get; set; } = ;
        
[Description(@"Enter the method used to determine the heating design capacity for scalable sizing. None is used when a heating coil is not included in the Zone HVAC Equipment or this field may be blank. If this input field is left blank, then the design heating capacity is set to zero. HeatingDesignCapacity => selected when the design heating capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determine from user specified heating capacity per flow area and zone floor area. FractionOfAutosizedHeatingCapacity => is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity")]
[JsonProperty(@"Enter the method used to determine the heating design capacity for scalable sizing. None is used when a heating coil is not included in the Zone HVAC Equipment or this field may be blank. If this input field is left blank, then the design heating capacity is set to zero. HeatingDesignCapacity => selected when the design heating capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determine from user specified heating capacity per flow area and zone floor area. FractionOfAutosizedHeatingCapacity => is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity")]
public YesNoDefault HeatingDesignCapacityMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Enter the design heating capacity. Required field when the heating design capacity method HeatingDesignCapacity.")]
[JsonProperty(@"Enter the design heating capacity. Required field when the heating design capacity method HeatingDesignCapacity.")]
public System.String HeatingDesignCapacity { get; set; } = "";
        
[Description(@"Enter the heating design capacity per zone floor area. Required field when the heating design capacity method field is CapacityPerFloorArea.")]
[JsonProperty(@"Enter the heating design capacity per zone floor area. Required field when the heating design capacity method field is CapacityPerFloorArea.")]
public System.Single HeatingDesignCapacityPerFloorArea { get; set; } = ;
        
[Description(@"Enter the fraction of auto-sized heating design capacity. Required field when capacity the heating design capacity method field is FractionOfAutosizedHeatingCapacity.")]
[JsonProperty(@"Enter the fraction of auto-sized heating design capacity. Required field when capacity the heating design capacity method field is FractionOfAutosizedHeatingCapacity.")]
public System.Single FractionOfAutosizedHeatingDesignCapacity { get; set; } = ;
    }
    
    public enum CoolingSupplyAirFlowRateMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FlowPerCoolingCapacity")]
        FlowPerCoolingCapacity = 1,
        
        [JsonProperty("FlowPerFloorArea")]
        FlowPerFloorArea = 2,
        
        [JsonProperty("FractionOfAutosizedCoolingAirflow")]
        FractionOfAutosizedCoolingAirflow = 3,
        
        [JsonProperty("None")]
        None = 4,
        
        [JsonProperty("SupplyAirFlowRate")]
        SupplyAirFlowRate = 5,
    }
    
    public enum NoLoadSupplyAirFlowRateMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FlowPerFloorArea")]
        FlowPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedCoolingAirflow")]
        FractionOfAutosizedCoolingAirflow = 2,
        
        [JsonProperty("FractionOfAutosizedHeatingAirflow")]
        FractionOfAutosizedHeatingAirflow = 3,
        
        [JsonProperty("None")]
        None = 4,
        
        [JsonProperty("SupplyAirFlowRate")]
        SupplyAirFlowRate = 5,
    }
    
    public enum HeatingSupplyAirFlowRateMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FlowPerFloorArea")]
        FlowPerFloorArea = 1,
        
        [JsonProperty("FlowPerHeatingCapacity")]
        FlowPerHeatingCapacity = 2,
        
        [JsonProperty("FractionOfAutosizedHeatingAirflow")]
        FractionOfAutosizedHeatingAirflow = 3,
        
        [JsonProperty("None")]
        None = 4,
        
        [JsonProperty("SupplyAirFlowRate")]
        SupplyAirFlowRate = 5,
    }
    
    public enum CoolingDesignCapacityMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("CoolingDesignCapacity")]
        CoolingDesignCapacity = 2,
        
        [JsonProperty("FractionOfAutosizedCoolingCapacity")]
        FractionOfAutosizedCoolingCapacity = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HeatingDesignCapacityMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingCapacity")]
        FractionOfAutosizedHeatingCapacity = 2,
        
        [JsonProperty("HeatingDesignCapacity")]
        HeatingDesignCapacity = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    [Description("This object is used to scale the sizing of air terminal units.")]
    [JsonObject("DesignSpecification:AirTerminal:Sizing")]
    public class DesignSpecification_AirTerminal_Sizing
    {
        
[Description(@"The fraction of the design sensible cooling load to be met by this terminal unit. This fraction is applied after the Zone Cooling Sizing Factor (see Sizing:Zone).")]
[JsonProperty(@"The fraction of the design sensible cooling load to be met by this terminal unit. This fraction is applied after the Zone Cooling Sizing Factor (see Sizing:Zone).")]
public System.Single FractionOfDesignCoolingLoad { get; set; } = 1;
        
[Description(@"This ratio adjusts the supply air temperature difference used to calculate the cooling design supply air flow rate for this terminal unit.")]
[JsonProperty(@"This ratio adjusts the supply air temperature difference used to calculate the cooling design supply air flow rate for this terminal unit.")]
public System.Single CoolingDesignSupplyAirTemperatureDifferenceRatio { get; set; } = 1;
        
[Description(@"The fraction of the design sensible heating load to be met by this terminal unit. This fraction is applied after the Zone Heating Sizing Factor (see Sizing:Zone).")]
[JsonProperty(@"The fraction of the design sensible heating load to be met by this terminal unit. This fraction is applied after the Zone Heating Sizing Factor (see Sizing:Zone).")]
public System.Single FractionOfDesignHeatingLoad { get; set; } = 1;
        
[Description(@"This ratio adjusts the supply air temperature difference used to calculate the heating design supply air flow rate for this terminal unit.")]
[JsonProperty(@"This ratio adjusts the supply air temperature difference used to calculate the heating design supply air flow rate for this terminal unit.")]
public System.Single HeatingDesignSupplyAirTemperatureDifferenceRatio { get; set; } = 1;
        
[Description(@"The fraction of the zone minimum outdoor air requirement to be met by this terminal unit.")]
[JsonProperty(@"The fraction of the zone minimum outdoor air requirement to be met by this terminal unit.")]
public System.Single FractionOfMinimumOutdoorAirFlow { get; set; } = 1;
    }
    
    [Description("Specifies the input needed to perform sizing calculations for a central forced ai" +
        "r system. System design air flow, heating capacity, and cooling capacity will be" +
        " calculated using this input data.")]
    [JsonObject("Sizing:System")]
    public class Sizing_System
    {
        
[JsonProperty(@"")]
public System.String AirloopName { get; set; } = "";
        
[Description(@"Specifies the basis for sizing the system supply air flow rate Sensible and Total use the zone design air flow rates to size the system supply air flow rate The cooling coil will then be sized at either the peak Sensible or Total flow rate and conditions The heating coil is always sized at the peak sensible heating load. VentilationRequirement uses the system ventilation requirement")]
[JsonProperty(@"Specifies the basis for sizing the system supply air flow rate Sensible and Total use the zone design air flow rates to size the system supply air flow rate The cooling coil will then be sized at either the peak Sensible or Total flow rate and conditions The heating coil is always sized at the peak sensible heating load. VentilationRequirement uses the system ventilation requirement")]
public YesNoDefault TypeOfLoadToSizeOn { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Sensible");
        
[JsonProperty(@"")]
public System.String DesignOutdoorAirFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String CentralHeatingMaximumSystemAirFlowRatio { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single PreheatDesignTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PreheatDesignHumidityRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PrecoolDesignTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PrecoolDesignHumidityRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CentralCoolingDesignSupplyAirTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CentralHeatingDesignSupplyAirTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault TypeOfZoneSumToUse { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NonCoincident");
        
[JsonProperty(@"")]
public YesNoDefault OutdoorAirInCooling { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public YesNoDefault OutdoorAirInHeating { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public System.Single CentralCoolingDesignSupplyAirHumidityRatio { get; set; } = 0.008;
        
[JsonProperty(@"")]
public System.Single CentralHeatingDesignSupplyAirHumidityRatio { get; set; } = 0.008;
        
[JsonProperty(@"")]
public YesNoDefault CoolingSupplyAirFlowRateMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DesignDay");
        
[Description(@"This input is used if Cooling Supply Air Flow Rate Method is Flow/System This value will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers, this value must be large enough to serve the multiplied zones.")]
[JsonProperty(@"This input is used if Cooling Supply Air Flow Rate Method is Flow/System This value will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers, this value must be large enough to serve the multiplied zones.")]
public System.Single CoolingSupplyAirFlowRate { get; set; } = 0;
        
[Description(@"Enter the cooling supply air volume flow rate per total conditioned floor area. Required field when Cooling Supply Air Flow Rate Method is FlowPerFloorArea.")]
[JsonProperty(@"Enter the cooling supply air volume flow rate per total conditioned floor area. Required field when Cooling Supply Air Flow Rate Method is FlowPerFloorArea.")]
public System.Single CoolingSupplyAirFlowRatePerFloorArea { get; set; } = ;
        
[Description(@"Enter the supply air volume flow rate as a fraction of the cooling supply air flow rate. Required field when Cooling Supply Air Flow Rate Method is FractionOfAutosizedCoolingAirflow.")]
[JsonProperty(@"Enter the supply air volume flow rate as a fraction of the cooling supply air flow rate. Required field when Cooling Supply Air Flow Rate Method is FractionOfAutosizedCoolingAirflow.")]
public System.Single CoolingFractionOfAutosizedCoolingSupplyAirFlowRate { get; set; } = ;
        
[Description(@"Enter the supply air volume flow rate per unit cooling capacity. Required field when Cooling Supply Air Flow Rate Method is FlowPerCoolingCapacity.")]
[JsonProperty(@"Enter the supply air volume flow rate per unit cooling capacity. Required field when Cooling Supply Air Flow Rate Method is FlowPerCoolingCapacity.")]
public System.Single CoolingSupplyAirFlowRatePerUnitCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault HeatingSupplyAirFlowRateMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DesignDay");
        
[Description(@"Required field when Heating Supply Air Flow Rate Method is Flow/System This value will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers, this value must be large enough to serve the multiplied zones.")]
[JsonProperty(@"Required field when Heating Supply Air Flow Rate Method is Flow/System This value will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers, this value must be large enough to serve the multiplied zones.")]
public System.Single HeatingSupplyAirFlowRate { get; set; } = 0;
        
[Description(@"Enter the heating supply air volume flow rate per total conditioned floor area. Required field when Heating Supply Air Flow Rate Method is FlowPerFloorArea.")]
[JsonProperty(@"Enter the heating supply air volume flow rate per total conditioned floor area. Required field when Heating Supply Air Flow Rate Method is FlowPerFloorArea.")]
public System.Single HeatingSupplyAirFlowRatePerFloorArea { get; set; } = ;
        
[Description(@"Enter the supply air volume flow rate as a fraction of the heating supply air flow rate. Required field when Heating Supply Air Flow Rate Method is FractionOfAutosizedHeatingAirflow.")]
[JsonProperty(@"Enter the supply air volume flow rate as a fraction of the heating supply air flow rate. Required field when Heating Supply Air Flow Rate Method is FractionOfAutosizedHeatingAirflow.")]
public System.Single HeatingFractionOfAutosizedHeatingSupplyAirFlowRate { get; set; } = ;
        
[Description(@"Enter the supply air volume flow rate as a fraction of the cooling supply air flow rate. Required field when Heating Supply Air Flow Rate Method is FractionOfAutosizedCoolingAirflow.")]
[JsonProperty(@"Enter the supply air volume flow rate as a fraction of the cooling supply air flow rate. Required field when Heating Supply Air Flow Rate Method is FractionOfAutosizedCoolingAirflow.")]
public System.Single HeatingFractionOfAutosizedCoolingSupplyAirFlowRate { get; set; } = ;
        
[Description(@"Enter the heating supply air volume flow rate per unit heating capacity. Required field when Heating Supply Air Flow Rate Method is FlowPerHeatingCapacity.")]
[JsonProperty(@"Enter the heating supply air volume flow rate per unit heating capacity. Required field when Heating Supply Air Flow Rate Method is FlowPerHeatingCapacity.")]
public System.Single HeatingSupplyAirFlowRatePerUnitHeatingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault SystemOutdoorAirMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ZoneSum");
        
[JsonProperty(@"")]
public System.Single ZoneMaximumOutdoorAirFraction { get; set; } = 1;
        
[Description(@"Enter the method used to determine the system cooling design capacity for scalable sizing. None is used when a cooling coils is not included in an airloop or this field may be blank. If this input field is left blank, then the design cooling capacity is set to zero. CoolingDesignCapacity => selected when the design cooling capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determined from user specified cooling capacity per floor area and total floor area of cooled zones served by an airloop. FractionOfAutosizedCoolingCapacity => is selected when the design cooling capacity is determined from a user specified fraction and the auto-sized design cooling capacity of the system.")]
[JsonProperty(@"Enter the method used to determine the system cooling design capacity for scalable sizing. None is used when a cooling coils is not included in an airloop or this field may be blank. If this input field is left blank, then the design cooling capacity is set to zero. CoolingDesignCapacity => selected when the design cooling capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determined from user specified cooling capacity per floor area and total floor area of cooled zones served by an airloop. FractionOfAutosizedCoolingCapacity => is selected when the design cooling capacity is determined from a user specified fraction and the auto-sized design cooling capacity of the system.")]
public YesNoDefault CoolingDesignCapacityMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "CoolingDesignCapacity");
        
[Description(@"Enter the design cooling capacity.")]
[JsonProperty(@"Enter the design cooling capacity.")]
public System.String CoolingDesignCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Enter the cooling design capacity per total floor area of cooled zones served by an airloop. Required field when the cooling design capacity method field is CapacityPerFloorArea.")]
[JsonProperty(@"Enter the cooling design capacity per total floor area of cooled zones served by an airloop. Required field when the cooling design capacity method field is CapacityPerFloorArea.")]
public System.Single CoolingDesignCapacityPerFloorArea { get; set; } = ;
        
[Description(@"Enter the fraction of auto-sized cooling design capacity. Required field when the cooling design capacity method field is FractionOfAutosizedCoolingCapacity.")]
[JsonProperty(@"Enter the fraction of auto-sized cooling design capacity. Required field when the cooling design capacity method field is FractionOfAutosizedCoolingCapacity.")]
public System.Single FractionOfAutosizedCoolingDesignCapacity { get; set; } = ;
        
[Description(@"Enter the method used to determine the heating design capacity for scalable sizing. None is used when a heating coil not included in an airloop or this field may be blank. If this input field is left blank, then the design heating capacity is set to zero. HeatingDesignCapacity => selected when the design heating capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design heating capacity is determined from user specified heating capacity per flow area and total floor area of heated zones served by an airloop. FractionOfAutosizedHeatingCapacity => is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity of the system.")]
[JsonProperty(@"Enter the method used to determine the heating design capacity for scalable sizing. None is used when a heating coil not included in an airloop or this field may be blank. If this input field is left blank, then the design heating capacity is set to zero. HeatingDesignCapacity => selected when the design heating capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design heating capacity is determined from user specified heating capacity per flow area and total floor area of heated zones served by an airloop. FractionOfAutosizedHeatingCapacity => is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity of the system.")]
public YesNoDefault HeatingDesignCapacityMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "HeatingDesignCapacity");
        
[Description(@"Enter the design heating capacity.")]
[JsonProperty(@"Enter the design heating capacity.")]
public System.String HeatingDesignCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Enter the heating design capacity per zone floor area. Required field when the heating design capacity method field is CapacityPerFloorArea.")]
[JsonProperty(@"Enter the heating design capacity per zone floor area. Required field when the heating design capacity method field is CapacityPerFloorArea.")]
public System.Single HeatingDesignCapacityPerFloorArea { get; set; } = ;
        
[Description(@"Enter the fraction of auto-sized heating design capacity. Required field when capacity the heating design capacity method field is FractionOfAutosizedHeatingCapacity.")]
[JsonProperty(@"Enter the fraction of auto-sized heating design capacity. Required field when capacity the heating design capacity method field is FractionOfAutosizedHeatingCapacity.")]
public System.Single FractionOfAutosizedHeatingDesignCapacity { get; set; } = ;
        
[Description(@"Method used to control the coil's output")]
[JsonProperty(@"Method used to control the coil's output")]
public YesNoDefault CentralCoolingCapacityControlMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "OnOff");
    }
    
    public enum TypeOfLoadToSizeOnType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Sensible")]
        Sensible = 1,
        
        [JsonProperty("Total")]
        Total = 2,
        
        [JsonProperty("VentilationRequirement")]
        VentilationRequirement = 3,
    }
    
    public enum TypeOfZoneSumToUseType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Coincident")]
        Coincident = 1,
        
        [JsonProperty("NonCoincident")]
        NonCoincident = 2,
    }
    
    public enum CoolingSupplyAirFlowRateMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DesignDay")]
        DesignDay = 1,
        
        [JsonProperty("Flow/System")]
        FlowSystem = 2,
        
        [JsonProperty("FlowPerCoolingCapacity")]
        FlowPerCoolingCapacity = 3,
        
        [JsonProperty("FlowPerFloorArea")]
        FlowPerFloorArea = 4,
        
        [JsonProperty("FractionOfAutosizedCoolingAirflow")]
        FractionOfAutosizedCoolingAirflow = 5,
    }
    
    public enum HeatingSupplyAirFlowRateMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DesignDay")]
        DesignDay = 1,
        
        [JsonProperty("Flow/System")]
        FlowSystem = 2,
        
        [JsonProperty("FlowPerFloorArea")]
        FlowPerFloorArea = 3,
        
        [JsonProperty("FlowPerHeatingCapacity")]
        FlowPerHeatingCapacity = 4,
        
        [JsonProperty("FractionOfAutosizedCoolingAirflow")]
        FractionOfAutosizedCoolingAirflow = 5,
        
        [JsonProperty("FractionOfAutosizedHeatingAirflow")]
        FractionOfAutosizedHeatingAirflow = 6,
    }
    
    public enum SystemOutdoorAirMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("VentilationRateProcedure")]
        VentilationRateProcedure = 1,
        
        [JsonProperty("ZoneSum")]
        ZoneSum = 2,
    }
    
    public enum CoolingDesignCapacityMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("CoolingDesignCapacity")]
        CoolingDesignCapacity = 2,
        
        [JsonProperty("FractionOfAutosizedCoolingCapacity")]
        FractionOfAutosizedCoolingCapacity = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HeatingDesignCapacityMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingCapacity")]
        FractionOfAutosizedHeatingCapacity = 2,
        
        [JsonProperty("HeatingDesignCapacity")]
        HeatingDesignCapacity = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum CentralCoolingCapacityControlMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Bypass")]
        Bypass = 1,
        
        [JsonProperty("OnOff")]
        OnOff = 2,
        
        [JsonProperty("VAV")]
        VAV = 3,
        
        [JsonProperty("VT")]
        VT = 4,
    }
    
    [Description(@"Specifies the input needed to autosize plant loop flow rates and equipment capacities. This information is initially used by components that use water for heating or cooling such as hot or chilled water coils to calculate their maximum water flow rates. These flow rates are then summed for use in calculating the Plant Loop flow rates.")]
    [JsonObject("Sizing:Plant")]
    public class Sizing_Plant
    {
        
[Description(@"Enter the name of a PlantLoop or a CondenserLoop object")]
[JsonProperty(@"Enter the name of a PlantLoop or a CondenserLoop object")]
public System.String PlantOrCondenserLoopName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault LoopType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single DesignLoopExitTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoopDesignTemperatureDifference { get; set; } = ;
        
[Description(@"if Coincident is chosen, then sizing is based on HVAC Sizing Simulations and the input field called Do HVAC Sizing Simulation for Sizing Periods in SimulationControl must be set to Yes")]
[JsonProperty(@"if Coincident is chosen, then sizing is based on HVAC Sizing Simulations and the input field called Do HVAC Sizing Simulation for Sizing Periods in SimulationControl must be set to Yes")]
public YesNoDefault SizingOption { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NonCoincident");
        
[Description(@"this is used in the coincident sizing algorithm to apply a running average to peak flow rates that occur during HVAC Sizing Simulations")]
[JsonProperty(@"this is used in the coincident sizing algorithm to apply a running average to peak flow rates that occur during HVAC Sizing Simulations")]
public System.Single ZoneTimestepsInAveragingWindow { get; set; } = 1;
        
[Description(@"this is used to adjust the result for coincident sizing by applying a sizing factor")]
[JsonProperty(@"this is used to adjust the result for coincident sizing by applying a sizing factor")]
public YesNoDefault CoincidentSizingFactorMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum LoopTypeType
    {
        
        [JsonProperty("Condenser")]
        Condenser = 0,
        
        [JsonProperty("Cooling")]
        Cooling = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
        
        [JsonProperty("Steam")]
        Steam = 3,
    }
    
    public enum SizingOptionType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Coincident")]
        Coincident = 1,
        
        [JsonProperty("NonCoincident")]
        NonCoincident = 2,
    }
    
    public enum CoincidentSizingFactorModeType
    {
        
        [JsonProperty("GlobalCoolingSizingFactor")]
        GlobalCoolingSizingFactor = 0,
        
        [JsonProperty("GlobalHeatingSizingFactor")]
        GlobalHeatingSizingFactor = 1,
        
        [JsonProperty("LoopComponentSizingFactor")]
        LoopComponentSizingFactor = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    [Description("Default style for the Sizing output files is comma -- this works well for importi" +
        "ng into spreadsheet programs such as Excel(tm) but not so well for word processi" +
        "ng programs -- there tab may be a better choice. Fixed puts spaces between the \"" +
        "columns\"")]
    [JsonObject("OutputControl:Sizing:Style")]
    public class OutputControl_Sizing_Style
    {
        
[JsonProperty(@"")]
public YesNoDefault ColumnSeparator { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum ColumnSeparatorType
    {
        
        [JsonProperty("Comma")]
        Comma = 0,
        
        [JsonProperty("Fixed")]
        Fixed = 1,
        
        [JsonProperty("Tab")]
        Tab = 2,
    }
}
namespace EnergyPlus.HVACTemplates
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Zone thermostat control. Referenced schedules must be defined elsewhere in the idf. Thermostat control type is dual setpoint with deadband. It is not necessary to create a thermostat object for every zone, only for each unique set of setpoint schedules. For example, an office building may have two thermostat objects, one for ""Office"" and one for ""Storage"".")]
    [JsonObject("HVACTemplate:Thermostat")]
    public class HVACTemplate_Thermostat
    {
        
[Description(@"Leave blank if constant setpoint specified below, must enter schedule or constant setpoint")]
[JsonProperty(@"Leave blank if constant setpoint specified below, must enter schedule or constant setpoint")]
public System.String HeatingSetpointScheduleName { get; set; } = "";
        
[Description(@"Ignored if schedule specified above, must enter schedule or constant setpoint")]
[JsonProperty(@"Ignored if schedule specified above, must enter schedule or constant setpoint")]
public System.Single ConstantHeatingSetpoint { get; set; } = ;
        
[Description(@"Leave blank if constant setpoint specified below, must enter schedule or constant setpoint")]
[JsonProperty(@"Leave blank if constant setpoint specified below, must enter schedule or constant setpoint")]
public System.String CoolingSetpointScheduleName { get; set; } = "";
        
[Description(@"Ignored if schedule specified above, must enter schedule or constant setpoint")]
[JsonProperty(@"Ignored if schedule specified above, must enter schedule or constant setpoint")]
public System.Single ConstantCoolingSetpoint { get; set; } = ;
    }
    
    [Description("Zone with ideal air system that meets heating or cooling loads")]
    [JsonObject("HVACTemplate:Zone:IdealLoadsAirSystem")]
    public class HVACTemplate_Zone_IdealLoadsAirSystem
    {
        
[Description(@"Zone name must match a building zone name")]
[JsonProperty(@"Zone name must match a building zone name")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
[JsonProperty(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
public System.String TemplateThermostatName { get; set; } = "";
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String SystemAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MaximumHeatingSupplyAirTemperature { get; set; } = 50;
        
[JsonProperty(@"")]
public System.Single MinimumCoolingSupplyAirTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single MaximumHeatingSupplyAirHumidityRatio { get; set; } = 0.0156;
        
[JsonProperty(@"")]
public System.Single MinimumCoolingSupplyAirHumidityRatio { get; set; } = 0.0077;
        
[JsonProperty(@"")]
public YesNoDefault HeatingLimit { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoLimit");
        
[Description(@"This field is ignored if Heating Limit = NoLimit If this field is blank, there is no limit.")]
[JsonProperty(@"This field is ignored if Heating Limit = NoLimit If this field is blank, there is no limit.")]
public System.String MaximumHeatingAirFlowRate { get; set; } = "";
        
[Description(@"This field is ignored if Heating Limit = NoLimit If this field is blank, there is no limit.")]
[JsonProperty(@"This field is ignored if Heating Limit = NoLimit If this field is blank, there is no limit.")]
public System.String MaximumSensibleHeatingCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CoolingLimit { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoLimit");
        
[Description(@"This field is ignored if Cooling Limit = NoLimit This field is required if Outdoor Air Economizer Type is anything other than NoEconomizer.")]
[JsonProperty(@"This field is ignored if Cooling Limit = NoLimit This field is required if Outdoor Air Economizer Type is anything other than NoEconomizer.")]
public System.String MaximumCoolingAirFlowRate { get; set; } = "";
        
[Description(@"This field is ignored if Cooling Limit = NoLimit")]
[JsonProperty(@"This field is ignored if Cooling Limit = NoLimit")]
public System.String MaximumTotalCoolingCapacity { get; set; } = "";
        
[Description(@"If blank, heating is always available.")]
[JsonProperty(@"If blank, heating is always available.")]
public System.String HeatingAvailabilityScheduleName { get; set; } = "";
        
[Description(@"If blank, cooling is always available.")]
[JsonProperty(@"If blank, cooling is always available.")]
public System.String CoolingAvailabilityScheduleName { get; set; } = "";
        
[Description(@"ConstantSensibleHeatRatio means that the ideal loads system will be controlled to meet the sensible cooling load, and the latent cooling rate will be computed using a constant sensible heat ratio (SHR) Humidistat means that there is a ZoneControl:Humidistat for this zone and the ideal loads system will attempt to satisfy the humidistat. None means that there is no dehumidification. ConstantSupplyHumidityRatio means that during cooling the supply air will always be at the Minimum Cooling Supply Humidity Ratio.")]
[JsonProperty(@"ConstantSensibleHeatRatio means that the ideal loads system will be controlled to meet the sensible cooling load, and the latent cooling rate will be computed using a constant sensible heat ratio (SHR) Humidistat means that there is a ZoneControl:Humidistat for this zone and the ideal loads system will attempt to satisfy the humidistat. None means that there is no dehumidification. ConstantSupplyHumidityRatio means that during cooling the supply air will always be at the Minimum Cooling Supply Humidity Ratio.")]
public YesNoDefault DehumidificationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ConstantSensibleHeatRatio");
        
[Description(@"This field is applicable only when Dehumidification Control Type is ConstantSensibleHeatRatio")]
[JsonProperty(@"This field is applicable only when Dehumidification Control Type is ConstantSensibleHeatRatio")]
public System.Single CoolingSensibleHeatRatio { get; set; } = 0.7;
        
[Description(@"Zone relative humidity setpoint in percent (0 to 100)")]
[JsonProperty(@"Zone relative humidity setpoint in percent (0 to 100)")]
public System.Single DehumidificationSetpoint { get; set; } = 60;
        
[Description(@"None means that there is no humidification. Humidistat means that there is a ZoneControl:Humidistat for this zone and the ideal loads system will attempt to satisfy the humidistat. ConstantSupplyHumidityRatio means that during heating the supply air will always be at the Maximum Heating Supply Humidity Ratio.")]
[JsonProperty(@"None means that there is no humidification. Humidistat means that there is a ZoneControl:Humidistat for this zone and the ideal loads system will attempt to satisfy the humidistat. ConstantSupplyHumidityRatio means that during heating the supply air will always be at the Maximum Heating Supply Humidity Ratio.")]
public YesNoDefault HumidificationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Zone relative humidity setpoint in percent (0 to 100)")]
[JsonProperty(@"Zone relative humidity setpoint in percent (0 to 100)")]
public System.Single HumidificationSetpoint { get; set; } = 30;
        
[Description(@"None means there is no outdoor air and all related fields will be ignored Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty(@"None means there is no outdoor air and all related fields will be ignored Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
public YesNoDefault OutdoorAirMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
[JsonProperty(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerPerson { get; set; } = 0.00944;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZoneFloorArea { get; set; } = 0;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZone { get; set; } = 0;
        
[Description(@"When the name of a DesignSpecification:OutdoorAir object is entered, the minimum outdoor air flow rate will be computed using these specifications. The outdoor air flow rate will also be affected by the next two fields. If this field is blank, there will be no outdoor air and the remaining fields will be ignored.")]
[JsonProperty(@"When the name of a DesignSpecification:OutdoorAir object is entered, the minimum outdoor air flow rate will be computed using these specifications. The outdoor air flow rate will also be affected by the next two fields. If this field is blank, there will be no outdoor air and the remaining fields will be ignored.")]
public System.String DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        
[Description(@"This field controls how the minimum outdoor air flow rate is calculated. None means that design occupancy will be used to compute the minimum outdoor air flow rate OccupancySchedule means that current occupancy level will be used. CO2Setpoint means that the design occupancy will be used to compute the minimum outdoor air flow rate and the outdoor air flow rate may be increased if necessary to maintain the indoor air carbon dioxide setpoint defined in a ZoneControl:ContaminantController object.")]
[JsonProperty(@"This field controls how the minimum outdoor air flow rate is calculated. None means that design occupancy will be used to compute the minimum outdoor air flow rate OccupancySchedule means that current occupancy level will be used. CO2Setpoint means that the design occupancy will be used to compute the minimum outdoor air flow rate and the outdoor air flow rate may be increased if necessary to maintain the indoor air carbon dioxide setpoint defined in a ZoneControl:ContaminantController object.")]
public YesNoDefault DemandControlledVentilationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"DifferentialDryBulb and DifferentialEnthalpy will increase the outdoor air flow rate when there is a cooling load and the outdoor air temperature or enthalpy is below the zone exhaust air temperature or enthalpy.")]
[JsonProperty(@"DifferentialDryBulb and DifferentialEnthalpy will increase the outdoor air flow rate when there is a cooling load and the outdoor air temperature or enthalpy is below the zone exhaust air temperature or enthalpy.")]
public YesNoDefault OutdoorAirEconomizerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoEconomizer");
        
[JsonProperty(@"")]
public YesNoDefault HeatRecoveryType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[JsonProperty(@"")]
public System.Single SensibleHeatRecoveryEffectiveness { get; set; } = 0.7;
        
[Description(@"Applicable only if Heat Recovery Type is Enthalpy.")]
[JsonProperty(@"Applicable only if Heat Recovery Type is Enthalpy.")]
public System.Single LatentHeatRecoveryEffectiveness { get; set; } = 0.65;
    }
    
    public enum HeatingLimitType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LimitCapacity")]
        LimitCapacity = 1,
        
        [JsonProperty("LimitFlowRate")]
        LimitFlowRate = 2,
        
        [JsonProperty("LimitFlowRateAndCapacity")]
        LimitFlowRateAndCapacity = 3,
        
        [JsonProperty("NoLimit")]
        NoLimit = 4,
    }
    
    public enum CoolingLimitType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LimitCapacity")]
        LimitCapacity = 1,
        
        [JsonProperty("LimitFlowRate")]
        LimitFlowRate = 2,
        
        [JsonProperty("LimitFlowRateAndCapacity")]
        LimitFlowRateAndCapacity = 3,
        
        [JsonProperty("NoLimit")]
        NoLimit = 4,
    }
    
    public enum DehumidificationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantSensibleHeatRatio")]
        ConstantSensibleHeatRatio = 1,
        
        [JsonProperty("ConstantSupplyHumidityRatio")]
        ConstantSupplyHumidityRatio = 2,
        
        [JsonProperty("Humidistat")]
        Humidistat = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HumidificationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantSupplyHumidityRatio")]
        ConstantSupplyHumidityRatio = 1,
        
        [JsonProperty("Humidistat")]
        Humidistat = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum OutdoorAirMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("None")]
        None = 6,
        
        [JsonProperty("Sum")]
        Sum = 7,
    }
    
    public enum DemandControlledVentilationTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CO2Setpoint")]
        COSetpoint = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("OccupancySchedule")]
        OccupancySchedule = 3,
    }
    
    public enum OutdoorAirEconomizerTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DifferentialDryBulb")]
        DifferentialDryBulb = 1,
        
        [JsonProperty("DifferentialEnthalpy")]
        DifferentialEnthalpy = 2,
        
        [JsonProperty("NoEconomizer")]
        NoEconomizer = 3,
    }
    
    public enum HeatRecoveryTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Sensible")]
        Sensible = 3,
    }
    
    [Description("Zone baseboard heating system.")]
    [JsonObject("HVACTemplate:Zone:BaseboardHeat")]
    public class HVACTemplate_Zone_BaseboardHeat
    {
        
[Description(@"Zone name must match a building zone name")]
[JsonProperty(@"Zone name must match a building zone name")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
[JsonProperty(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
public System.String TemplateThermostatName { get; set; } = "";
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneHeatingSizingFactor { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault BaseboardHeatingType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "HotWater");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String BaseboardHeatingCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this zone is served by a separate dedicated outdoor air system (DOAS). Leave field blank if no DOAS serves this zone.")]
[JsonProperty(@"Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this zone is served by a separate dedicated outdoor air system (DOAS). Leave field blank if no DOAS serves this zone.")]
public System.String DedicatedOutdoorAirSystemName { get; set; } = "";
        
[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
public YesNoDefault OutdoorAirMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Flow/Person");
        
[Description(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
[JsonProperty(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerPerson { get; set; } = 0.00944;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZoneFloorArea { get; set; } = 0;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZone { get; set; } = 0;
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
public System.String DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
public System.String DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
    }
    
    public enum BaseboardHeatingTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
    }
    
    public enum OutdoorAirMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    [Description("4 pipe fan coil unit with optional outdoor air.")]
    [JsonObject("HVACTemplate:Zone:FanCoil")]
    public class HVACTemplate_Zone_FanCoil
    {
        
[Description(@"Zone name must match a building zone name")]
[JsonProperty(@"Zone name must match a building zone name")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
[JsonProperty(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
public System.String TemplateThermostatName { get; set; } = "";
        
[Description(@"This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty(@"This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
public System.String SupplyAirMaximumFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneHeatingSizingFactor { get; set; } = ;
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneCoolingSizingFactor { get; set; } = ;
        
[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
public YesNoDefault OutdoorAirMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Flow/Person");
        
[Description(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
[JsonProperty(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerPerson { get; set; } = 0.00944;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZoneFloorArea { get; set; } = 0;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZone { get; set; } = 0;
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String SystemAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SupplyFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single SupplyFanDeltaPressure { get; set; } = 75;
        
[JsonProperty(@"")]
public System.Single SupplyFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single SupplyFanMotorInAirStreamFraction { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ChilledWater");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String CoolingCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Used for sizing when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Used for sizing when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single CoolingCoilDesignSetpoint { get; set; } = 14;
        
[JsonProperty(@"")]
public YesNoDefault HeatingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "HotWater");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String HeatingCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Used for sizing when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Used for sizing when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single HeatingCoilDesignSetpoint { get; set; } = 50;
        
[Description(@"Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this zone is served by a separate dedicated outdoor air system (DOAS). Leave field blank if no DOAS serves this zone.")]
[JsonProperty(@"Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this zone is served by a separate dedicated outdoor air system (DOAS). Leave field blank if no DOAS serves this zone.")]
public System.String DedicatedOutdoorAirSystemName { get; set; } = "";
        
[Description(@"SupplyAirTemperature = use the value from Cooling Coil Design Setpoint (above) TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference")]
[JsonProperty(@"SupplyAirTemperature = use the value from Cooling Coil Design Setpoint (above) TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference")]
public YesNoDefault ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SupplyAirTemperature");
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
public System.Single ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = 11.11;
        
[Description(@"SupplyAirTemperature = use the value from Heating Coil Design Setpoint (above) TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference")]
[JsonProperty(@"SupplyAirTemperature = use the value from Heating Coil Design Setpoint (above) TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference")]
public YesNoDefault ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SupplyAirTemperature");
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
public System.Single ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = 30;
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
public System.String DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
public System.String DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
        
[Description(@"If this field is left blank, it will default to CyclingFan if a Dedicated Outdoor Air System is specified (see above), otherwise it will default to ConstantFanVariableFlow.")]
[JsonProperty(@"If this field is left blank, it will default to CyclingFan if a Dedicated Outdoor Air System is specified (see above), otherwise it will default to ConstantFanVariableFlow.")]
public YesNoDefault CapacityControlMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single LowSpeedSupplyAirFlowRatio { get; set; } = 0.33;
        
[Description(@"Medium Speed Supply Air Flow Ratio should be greater than Low Speed Supply Air Flow Ratio")]
[JsonProperty(@"Medium Speed Supply Air Flow Ratio should be greater than Low Speed Supply Air Flow Ratio")]
public System.Single MediumSpeedSupplyAirFlowRatio { get; set; } = 0.66;
        
[Description(@"Value of schedule multiplies maximum outdoor air flow rate This schedule is ignored if this zone is served by an HVACTemplate dedicated outdoor air system.")]
[JsonProperty(@"Value of schedule multiplies maximum outdoor air flow rate This schedule is ignored if this zone is served by an HVACTemplate dedicated outdoor air system.")]
public System.String OutdoorAirScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault BaseboardHeatingType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String BaseboardHeatingCapacity { get; set; } = (System.String)Autosize;
    }
    
    public enum OutdoorAirMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum CoolingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ChilledWater")]
        ChilledWater = 1,
        
        [JsonProperty("ChilledWaterDetailedFlatModel")]
        ChilledWaterDetailedFlatModel = 2,
        
        [JsonProperty("HeatExchangerAssistedChilledWater")]
        HeatExchangerAssistedChilledWater = 3,
    }
    
    public enum HeatingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
    }
    
    public enum ZoneCoolingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum ZoneHeatingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum CapacityControlMethodType
    {
        
        [JsonProperty("ASHRAE90VariableFan")]
        ASHRAEVariableFan = 0,
        
        [JsonProperty("ConstantFanVariableFlow")]
        ConstantFanVariableFlow = 1,
        
        [JsonProperty("CyclingFan")]
        CyclingFan = 2,
        
        [JsonProperty("MultiSpeedFan")]
        MultiSpeedFan = 3,
        
        [JsonProperty("VariableFanConstantFlow")]
        VariableFanConstantFlow = 4,
        
        [JsonProperty("VariableFanVariableFlow")]
        VariableFanVariableFlow = 5,
    }
    
    public enum BaseboardHeatingTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    [Description("Packaged Terminal Air Conditioner")]
    [JsonObject("HVACTemplate:Zone:PTAC")]
    public class HVACTemplate_Zone_PTAC
    {
        
[Description(@"Zone name must match a building zone name")]
[JsonProperty(@"Zone name must match a building zone name")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
[JsonProperty(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
public System.String TemplateThermostatName { get; set; } = "";
        
[Description(@"Supply air flow rate during cooling operation This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty(@"Supply air flow rate during cooling operation This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
public System.String CoolingSupplyAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Supply air flow rate during heating operation This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty(@"Supply air flow rate during heating operation This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
public System.String HeatingSupplyAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Supply air flow rate when no cooling or heating is needed Only used when heat pump fan operating mode is continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used. A value entered in this field will *not* be multiplied by the sizing factor or by zone multipliers. It is best to autosize or leave blank when using zone multipliers.")]
[JsonProperty(@"Supply air flow rate when no cooling or heating is needed Only used when heat pump fan operating mode is continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used. A value entered in this field will *not* be multiplied by the sizing factor or by zone multipliers. It is best to autosize or leave blank when using zone multipliers.")]
public System.String NoLoadSupplyAirFlowRate { get; set; } = "";
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneHeatingSizingFactor { get; set; } = ;
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneCoolingSizingFactor { get; set; } = ;
        
[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
public YesNoDefault OutdoorAirMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Flow/Person");
        
[Description(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
[JsonProperty(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerPerson { get; set; } = 0.00944;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZoneFloorArea { get; set; } = 0;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZone { get; set; } = 0;
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String SystemAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Refers to a schedule to specify unitary supply fan operating mode. Schedule Name values of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous fan (on) If this field is left blank, a schedule of always zero (cycling fan) will be used.")]
[JsonProperty(@"Refers to a schedule to specify unitary supply fan operating mode. Schedule Name values of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous fan (on) If this field is left blank, a schedule of always zero (cycling fan) will be used.")]
public System.String SupplyFanOperatingModeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault SupplyFanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DrawThrough");
        
[JsonProperty(@"")]
public System.Single SupplyFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single SupplyFanDeltaPressure { get; set; } = 75;
        
[JsonProperty(@"")]
public System.Single SupplyFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SingleSpeedDX");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String CoolingCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
public System.String CoolingCoilGrossRatedTotalCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Rated sensible heat ratio (gross sensible capacity/gross total capacity) Sensible and total capacities do not include effect of supply fan heat")]
[JsonProperty(@"Rated sensible heat ratio (gross sensible capacity/gross total capacity) Sensible and total capacities do not include effect of supply fan heat")]
public System.String CoolingCoilGrossRatedSensibleHeatRatio { get; set; } = (System.String)Autosize;
        
[Description(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
public System.Single CoolingCoilGrossRatedCoolingCop { get; set; } = 3;
        
[JsonProperty(@"")]
public YesNoDefault HeatingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Electric");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String HeatingCoilAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatingCoilCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Applies only if Heating Coil Type is Gas")]
[JsonProperty(@"Applies only if Heating Coil Type is Gas")]
public System.Single GasHeatingCoilEfficiency { get; set; } = 0.8;
        
[Description(@"Applies only if Heating Coil Type is Gas")]
[JsonProperty(@"Applies only if Heating Coil Type is Gas")]
public System.Single GasHeatingCoilParasiticElectricLoad { get; set; } = 0;
        
[Description(@"Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this zone is served by a separate dedicated outdoor air system (DOAS). Leave field blank if no DOAS serves this zone.")]
[JsonProperty(@"Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this zone is served by a separate dedicated outdoor air system (DOAS). Leave field blank if no DOAS serves this zone.")]
public System.String DedicatedOutdoorAirSystemName { get; set; } = "";
        
[Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference")]
[JsonProperty(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference")]
public YesNoDefault ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SupplyAirTemperature");
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneCoolingDesignSupplyAirTemperature { get; set; } = 14;
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
public System.Single ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = 11.11;
        
[Description(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference")]
[JsonProperty(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference")]
public YesNoDefault ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SupplyAirTemperature");
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneHeatingDesignSupplyAirTemperature { get; set; } = 50;
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
public System.Single ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = 30;
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
public System.String DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
public System.String DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault BaseboardHeatingType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String BaseboardHeatingCapacity { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public YesNoDefault CapacityControlMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
    }
    
    public enum OutdoorAirMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum SupplyFanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum CoolingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SingleSpeedDX")]
        SingleSpeedDX = 1,
    }
    
    public enum HeatingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
    }
    
    public enum ZoneCoolingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum ZoneHeatingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum BaseboardHeatingTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum CapacityControlMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("SingleZoneVAV")]
        SingleZoneVAV = 2,
    }
    
    [Description("Packaged Terminal Heat Pump")]
    [JsonObject("HVACTemplate:Zone:PTHP")]
    public class HVACTemplate_Zone_PTHP
    {
        
[Description(@"Zone name must match a building zone name")]
[JsonProperty(@"Zone name must match a building zone name")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
[JsonProperty(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
public System.String TemplateThermostatName { get; set; } = "";
        
[Description(@"Supply air flow rate during cooling operation This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty(@"Supply air flow rate during cooling operation This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
public System.String CoolingSupplyAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Supply air flow rate during heating operation This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty(@"Supply air flow rate during heating operation This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
public System.String HeatingSupplyAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Supply air flow rate when no cooling or heating is needed Only used when heat pump fan operating mode is continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used. A value entered in this field will *not* be multiplied by the sizing factor or by zone multipliers. It is best to autosize or leave blank when using zone multipliers.")]
[JsonProperty(@"Supply air flow rate when no cooling or heating is needed Only used when heat pump fan operating mode is continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used. A value entered in this field will *not* be multiplied by the sizing factor or by zone multipliers. It is best to autosize or leave blank when using zone multipliers.")]
public System.String NoLoadSupplyAirFlowRate { get; set; } = "";
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneHeatingSizingFactor { get; set; } = ;
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneCoolingSizingFactor { get; set; } = ;
        
[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
public YesNoDefault OutdoorAirMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Flow/Person");
        
[Description(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
[JsonProperty(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerPerson { get; set; } = 0.00944;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZoneFloorArea { get; set; } = 0;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZone { get; set; } = 0;
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String SystemAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Refers to a schedule to specify unitary supply fan operating mode. Schedule values of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous fan (on) If this field is left blank, a schedule of always zero (cycling fan) will be used.")]
[JsonProperty(@"Refers to a schedule to specify unitary supply fan operating mode. Schedule values of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous fan (on) If this field is left blank, a schedule of always zero (cycling fan) will be used.")]
public System.String SupplyFanOperatingModeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault SupplyFanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DrawThrough");
        
[JsonProperty(@"")]
public System.Single SupplyFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single SupplyFanDeltaPressure { get; set; } = 75;
        
[JsonProperty(@"")]
public System.Single SupplyFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SingleSpeedDX");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String CoolingCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
public System.String CoolingCoilGrossRatedTotalCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Rated sensible heat ratio (gross sensible capacity/gross total capacity) Sensible and total capacities do not include effect of supply fan heat")]
[JsonProperty(@"Rated sensible heat ratio (gross sensible capacity/gross total capacity) Sensible and total capacities do not include effect of supply fan heat")]
public System.String CoolingCoilGrossRatedSensibleHeatRatio { get; set; } = (System.String)Autosize;
        
[Description(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
public System.Single CoolingCoilGrossRatedCop { get; set; } = 3;
        
[JsonProperty(@"")]
public YesNoDefault HeatPumpHeatingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SingleSpeedDXHeatPump");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String HeatPumpHeatingCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Capacity excluding supply air fan heat Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty(@"Capacity excluding supply air fan heat Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
public System.String HeatPumpHeatingCoilGrossRatedCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Heat Pump Heating Coil Rated Capacity divided by power input to the compressor and outdoor fan, Does not include supply air fan heat or supply air fan electrical energy Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty(@"Heat Pump Heating Coil Rated Capacity divided by power input to the compressor and outdoor fan, Does not include supply air fan heat or supply air fan electrical energy Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
public System.Single HeatPumpHeatingCoilGrossRatedCop { get; set; } = 2.75;
        
[JsonProperty(@"")]
public System.Single HeatPumpHeatingMinimumOutdoorDryBulbTemperature { get; set; } = -8;
        
[JsonProperty(@"")]
public System.Single HeatPumpDefrostMaximumOutdoorDryBulbTemperature { get; set; } = 5;
        
[JsonProperty(@"")]
public YesNoDefault HeatPumpDefrostStrategy { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ReverseCycle");
        
[JsonProperty(@"")]
public YesNoDefault HeatPumpDefrostControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Timed");
        
[Description(@"Fraction of time in defrost mode only applicable if Timed defrost control is specified")]
[JsonProperty(@"Fraction of time in defrost mode only applicable if Timed defrost control is specified")]
public System.Single HeatPumpDefrostTimePeriodFraction { get; set; } = 0.058333;
        
[JsonProperty(@"")]
public YesNoDefault SupplementalHeatingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Electric");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String SupplementalHeatingCoilAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SupplementalHeatingCoilCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Supplemental heater will not operate when outdoor temperature exceeds this value.")]
[JsonProperty(@"Supplemental heater will not operate when outdoor temperature exceeds this value.")]
public System.Single SupplementalHeatingCoilMaximumOutdoorDryBulbTemperature { get; set; } = 21;
        
[Description(@"Applies only if Supplemental Heating Coil Type is Gas")]
[JsonProperty(@"Applies only if Supplemental Heating Coil Type is Gas")]
public System.Single SupplementalGasHeatingCoilEfficiency { get; set; } = 0.8;
        
[Description(@"Applies only if Supplemental Heating Coil Type is Gas")]
[JsonProperty(@"Applies only if Supplemental Heating Coil Type is Gas")]
public System.Single SupplementalGasHeatingCoilParasiticElectricLoad { get; set; } = 0;
        
[Description(@"Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this zone is served by a separate dedicated outdoor air system (DOAS). Leave field blank if no DOAS serves this zone.")]
[JsonProperty(@"Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this zone is served by a separate dedicated outdoor air system (DOAS). Leave field blank if no DOAS serves this zone.")]
public System.String DedicatedOutdoorAirSystemName { get; set; } = "";
        
[Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference")]
[JsonProperty(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference")]
public YesNoDefault ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SupplyAirTemperature");
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneCoolingDesignSupplyAirTemperature { get; set; } = 14;
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
public System.Single ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = 11.11;
        
[Description(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference")]
[JsonProperty(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference")]
public YesNoDefault ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SupplyAirTemperature");
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneHeatingDesignSupplyAirTemperature { get; set; } = 50;
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
public System.Single ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = 30;
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
public System.String DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
public System.String DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault BaseboardHeatingType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String BaseboardHeatingCapacity { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public YesNoDefault CapacityControlMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
    }
    
    public enum OutdoorAirMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum SupplyFanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum CoolingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SingleSpeedDX")]
        SingleSpeedDX = 1,
    }
    
    public enum HeatPumpHeatingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SingleSpeedDXHeatPump")]
        SingleSpeedDXHeatPump = 1,
    }
    
    public enum HeatPumpDefrostStrategyType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Resistive")]
        Resistive = 1,
        
        [JsonProperty("ReverseCycle")]
        ReverseCycle = 2,
    }
    
    public enum HeatPumpDefrostControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("OnDemand")]
        OnDemand = 1,
        
        [JsonProperty("Timed")]
        Timed = 2,
    }
    
    public enum SupplementalHeatingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
    }
    
    public enum ZoneCoolingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum ZoneHeatingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum BaseboardHeatingTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum CapacityControlMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("SingleZoneVAV")]
        SingleZoneVAV = 2,
    }
    
    [Description("Water to Air Heat Pump to be used with HVACTemplate:Plant:MixedWaterLoop")]
    [JsonObject("HVACTemplate:Zone:WaterToAirHeatPump")]
    public class HVACTemplate_Zone_WaterToAirHeatPump
    {
        
[Description(@"Zone name must match a building zone name")]
[JsonProperty(@"Zone name must match a building zone name")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
[JsonProperty(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
public System.String TemplateThermostatName { get; set; } = "";
        
[Description(@"Supply air flow rate during cooling operation This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty(@"Supply air flow rate during cooling operation This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
public System.String CoolingSupplyAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Supply air flow rate during heating operation This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty(@"Supply air flow rate during heating operation This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
public System.String HeatingSupplyAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Supply air flow rate when no cooling or heating is needed Only used when heat pump fan operating mode is continuous. This air flow rate is used when no heating or cooling is required. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used. A value entered in this field will *not* be multiplied by the sizing factor or by zone multipliers. It is best to autosize or leave blank when using zone multipliers.")]
[JsonProperty(@"Supply air flow rate when no cooling or heating is needed Only used when heat pump fan operating mode is continuous. This air flow rate is used when no heating or cooling is required. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used. A value entered in this field will *not* be multiplied by the sizing factor or by zone multipliers. It is best to autosize or leave blank when using zone multipliers.")]
public System.String NoLoadSupplyAirFlowRate { get; set; } = "";
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneHeatingSizingFactor { get; set; } = ;
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneCoolingSizingFactor { get; set; } = ;
        
[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
public YesNoDefault OutdoorAirMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Flow/Person");
        
[Description(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
[JsonProperty(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerPerson { get; set; } = 0.00944;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZoneFloorArea { get; set; } = 0;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZone { get; set; } = 0;
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String SystemAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Refers to a schedule to specify unitary supply fan operating mode. Schedule values of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous fan (on) If this field is left blank, a schedule of always zero (cycling fan) will be used.")]
[JsonProperty(@"Refers to a schedule to specify unitary supply fan operating mode. Schedule values of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous fan (on) If this field is left blank, a schedule of always zero (cycling fan) will be used.")]
public System.String SupplyFanOperatingModeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault SupplyFanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DrawThrough");
        
[JsonProperty(@"")]
public System.Single SupplyFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single SupplyFanDeltaPressure { get; set; } = 75;
        
[JsonProperty(@"")]
public System.Single SupplyFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Coil:Cooling:WaterToAirHeatPump:EquationFit");
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.String CoolingCoilGrossRatedTotalCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Rated sensible heat ratio (gross sensible capacity/gross total capacity) Sensible and total capacities do not include effect of supply fan heat")]
[JsonProperty(@"Rated sensible heat ratio (gross sensible capacity/gross total capacity) Sensible and total capacities do not include effect of supply fan heat")]
public System.String CoolingCoilGrossRatedSensibleHeatRatio { get; set; } = (System.String)Autosize;
        
[Description(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electric power input")]
[JsonProperty(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electric power input")]
public System.Single CoolingCoilGrossRatedCop { get; set; } = 3.5;
        
[JsonProperty(@"")]
public YesNoDefault HeatPumpHeatingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Coil:Heating:WaterToAirHeatPump:EquationFit");
        
[Description(@"Capacity excluding supply air fan heat")]
[JsonProperty(@"Capacity excluding supply air fan heat")]
public System.String HeatPumpHeatingCoilGrossRatedCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Heat Pump Heating Coil Rated Capacity divided by power input to the compressor and outdoor fan, does not include supply air fan heat or supply air fan electric power input")]
[JsonProperty(@"Heat Pump Heating Coil Rated Capacity divided by power input to the compressor and outdoor fan, does not include supply air fan heat or supply air fan electric power input")]
public System.Single HeatPumpHeatingCoilGrossRatedCop { get; set; } = 4.2;
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String SupplementalHeatingCoilAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SupplementalHeatingCoilCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"The maximum on-off cycling rate for the compressor Suggested value is 2.5 for a typical heat pump")]
[JsonProperty(@"The maximum on-off cycling rate for the compressor Suggested value is 2.5 for a typical heat pump")]
public System.Single MaximumCyclingRate { get; set; } = 2.5;
        
[Description(@"Time constant for the cooling coil's capacity to reach steady state after startup Suggested value is 60 for a typical heat pump")]
[JsonProperty(@"Time constant for the cooling coil's capacity to reach steady state after startup Suggested value is 60 for a typical heat pump")]
public System.Single HeatPumpTimeConstant { get; set; } = 60;
        
[Description(@"The fraction of on-cycle power use to adjust the part load fraction based on the off-cycle power consumption due to crankcase heaters, controls, fans, and etc. Suggested value is 0.01 for a typical heat pump")]
[JsonProperty(@"The fraction of on-cycle power use to adjust the part load fraction based on the off-cycle power consumption due to crankcase heaters, controls, fans, and etc. Suggested value is 0.01 for a typical heat pump")]
public System.Single FractionOfOnCyclePowerUse { get; set; } = 0.01;
        
[Description(@"Programmed time delay for heat pump fan to shut off after compressor cycle off. Only required when fan operating mode is cycling Enter 0 when fan operating mode is continuous")]
[JsonProperty(@"Programmed time delay for heat pump fan to shut off after compressor cycle off. Only required when fan operating mode is cycling Enter 0 when fan operating mode is continuous")]
public System.Single HeatPumpFanDelayTime { get; set; } = 60;
        
[Description(@"Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this zone is served by a separate dedicated outdoor air system (DOAS). Leave field blank if no DOAS serves this zone.")]
[JsonProperty(@"Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this zone is served by a separate dedicated outdoor air system (DOAS). Leave field blank if no DOAS serves this zone.")]
public System.String DedicatedOutdoorAirSystemName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault SupplementalHeatingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Electric");
        
[Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference")]
[JsonProperty(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference")]
public YesNoDefault ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SupplyAirTemperature");
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneCoolingDesignSupplyAirTemperature { get; set; } = 14;
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
public System.Single ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = 11.11;
        
[Description(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference")]
[JsonProperty(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference")]
public YesNoDefault ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SupplyAirTemperature");
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneHeatingDesignSupplyAirTemperature { get; set; } = 50;
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
public System.Single ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = 30;
        
[Description(@"used only when the heat pump coils are of the type WaterToAirHeatPump:EquationFit Constant results in 100% water flow regardless of compressor PLR Cycling results in water flow that matches compressor PLR ConstantOnDemand results in 100% water flow whenever the coil is on, but is 0% whenever the coil has no load")]
[JsonProperty(@"used only when the heat pump coils are of the type WaterToAirHeatPump:EquationFit Constant results in 100% water flow regardless of compressor PLR Cycling results in water flow that matches compressor PLR ConstantOnDemand results in 100% water flow whenever the coil is on, but is 0% whenever the coil has no load")]
public YesNoDefault HeatPumpCoilWaterFlowMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Cycling");
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
public System.String DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
public System.String DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault BaseboardHeatingType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String BaseboardHeatingCapacity { get; set; } = (System.String)Autosize;
    }
    
    public enum OutdoorAirMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum SupplyFanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum CoolingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Coil:Cooling:WaterToAirHeatPump:EquationFit")]
        CoilCoolingWaterToAirHeatPumpEquationFit = 1,
    }
    
    public enum HeatPumpHeatingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Coil:Heating:WaterToAirHeatPump:EquationFit")]
        CoilHeatingWaterToAirHeatPumpEquationFit = 1,
    }
    
    public enum SupplementalHeatingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
    }
    
    public enum ZoneCoolingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum ZoneHeatingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum HeatPumpCoilWaterFlowModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Constant")]
        Constant = 1,
        
        [JsonProperty("ConstantOnDemand")]
        ConstantOnDemand = 2,
        
        [JsonProperty("Cycling")]
        Cycling = 3,
    }
    
    public enum BaseboardHeatingTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    [Description("Zone terminal unit with variable refrigerant flow (VRF) DX cooling and heating co" +
        "ils (air-to-air or water-to-air heat pump). The VRF terminal units are served by" +
        " an HVACTemplate:System:VRF system.")]
    [JsonObject("HVACTemplate:Zone:VRF")]
    public class HVACTemplate_Zone_VRF
    {
        
[Description(@"Zone name must match a building zone name")]
[JsonProperty(@"Zone name must match a building zone name")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Name of a HVACTemplate:System:VRF object serving this zone")]
[JsonProperty(@"Name of a HVACTemplate:System:VRF object serving this zone")]
public System.String TemplateVrfSystemName { get; set; } = "";
        
[Description(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
[JsonProperty(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
public System.String TemplateThermostatName { get; set; } = "";
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneHeatingSizingFactor { get; set; } = ;
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneCoolingSizingFactor { get; set; } = ;
        
[Description(@"If this terminal unit's heating coil is autosized, the heating capacity is sized to be equal to the cooling capacity multiplied by this sizing ratio. This input applies to the terminal unit heating coil and overrides the sizing ratio entered in the HVACTemplate:System:VRF object.")]
[JsonProperty(@"If this terminal unit's heating coil is autosized, the heating capacity is sized to be equal to the cooling capacity multiplied by this sizing ratio. This input applies to the terminal unit heating coil and overrides the sizing ratio entered in the HVACTemplate:System:VRF object.")]
public System.Single RatedTotalHeatingCapacitySizingRatio { get; set; } = 1;
        
[Description(@"This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty(@"This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
public System.String CoolingSupplyAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"This flow rate is used when the terminal is not cooling and the previous mode was cooling. This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty(@"This flow rate is used when the terminal is not cooling and the previous mode was cooling. This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
public System.String NoCoolingSupplyAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty(@"This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
public System.String HeatingSupplyAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"This flow rate is used when the terminal is not heating and the previous mode was heating. This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty(@"This flow rate is used when the terminal is not heating and the previous mode was heating. This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
public System.String NoHeatingSupplyAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"If this field is set to autosize it will be sized based on the outdoor air inputs below, unless a dedicated outdoor air system is specified for this zone and then it will be set to zero.")]
[JsonProperty(@"If this field is set to autosize it will be sized based on the outdoor air inputs below, unless a dedicated outdoor air system is specified for this zone and then it will be set to zero.")]
public System.String CoolingOutdoorAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"If this field is set to autosize it will be sized based on the outdoor air inputs below, unless a dedicated outdoor air system is specified for this zone and then it will be set to zero.")]
[JsonProperty(@"If this field is set to autosize it will be sized based on the outdoor air inputs below, unless a dedicated outdoor air system is specified for this zone and then it will be set to zero.")]
public System.String HeatingOutdoorAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"If this field is set to autosize it will be sized based on the outdoor air inputs below, unless a dedicated outdoor air system is specified for this zone and then it will be set to zero.")]
[JsonProperty(@"If this field is set to autosize it will be sized based on the outdoor air inputs below, unless a dedicated outdoor air system is specified for this zone and then it will be set to zero.")]
public System.String NoLoadOutdoorAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
public YesNoDefault OutdoorAirMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Flow/Person");
        
[Description(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
[JsonProperty(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerPerson { get; set; } = 0.00944;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZoneFloorArea { get; set; } = 0;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZone { get; set; } = 0;
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
public System.String DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
public System.String DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String SystemAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Refers to a schedule to specify unitary supply fan operating mode. Schedule values of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous fan (on) If this field is left blank, a schedule of always zero (cycling fan) will be used.")]
[JsonProperty(@"Refers to a schedule to specify unitary supply fan operating mode. Schedule values of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous fan (on) If this field is left blank, a schedule of always zero (cycling fan) will be used.")]
public System.String SupplyFanOperatingModeScheduleName { get; set; } = "";
        
[Description(@"Select fan placement as either blow through or draw through.")]
[JsonProperty(@"Select fan placement as either blow through or draw through.")]
public YesNoDefault SupplyAirFanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BlowThrough");
        
[JsonProperty(@"")]
public System.Single SupplyFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single SupplyFanDeltaPressure { get; set; } = 75;
        
[JsonProperty(@"")]
public System.Single SupplyFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "VariableRefrigerantFlowDX");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String CoolingCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
public System.String CoolingCoilGrossRatedTotalCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Rated sensible heat ratio (gross sensible capacity/gross total capacity) Sensible and total capacities do not include effect of supply fan heat")]
[JsonProperty(@"Rated sensible heat ratio (gross sensible capacity/gross total capacity) Sensible and total capacities do not include effect of supply fan heat")]
public System.String CoolingCoilGrossRatedSensibleHeatRatio { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public YesNoDefault HeatPumpHeatingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "VariableRefrigerantFlowDX");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String HeatPumpHeatingCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Capacity excluding supply air fan heat Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty(@"Capacity excluding supply air fan heat Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
public System.String HeatPumpHeatingCoilGrossRatedCapacity { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single ZoneTerminalUnitOnParasiticElectricEnergyUse { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single ZoneTerminalUnitOffParasiticElectricEnergyUse { get; set; } = 0;
        
[Description(@"Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this zone is served by a separate dedicated outdoor air system (DOAS). Leave field blank if no DOAS serves this zone.")]
[JsonProperty(@"Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this zone is served by a separate dedicated outdoor air system (DOAS). Leave field blank if no DOAS serves this zone.")]
public System.String DedicatedOutdoorAirSystemName { get; set; } = "";
        
[Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference")]
[JsonProperty(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference")]
public YesNoDefault ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SupplyAirTemperature");
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneCoolingDesignSupplyAirTemperature { get; set; } = 14;
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
public System.Single ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = 11.11;
        
[Description(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference")]
[JsonProperty(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference")]
public YesNoDefault ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SupplyAirTemperature");
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneHeatingDesignSupplyAirTemperature { get; set; } = 50;
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
public System.Single ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = 30;
        
[JsonProperty(@"")]
public YesNoDefault BaseboardHeatingType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String BaseboardHeatingCapacity { get; set; } = (System.String)Autosize;
    }
    
    public enum OutdoorAirMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum SupplyAirFanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum CoolingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("VariableRefrigerantFlowDX")]
        VariableRefrigerantFlowDX = 2,
    }
    
    public enum HeatPumpHeatingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("VariableRefrigerantFlowDX")]
        VariableRefrigerantFlowDX = 2,
    }
    
    public enum ZoneCoolingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum ZoneHeatingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    public enum BaseboardHeatingTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    [Description("Zone terminal unit, constant volume, no controls.")]
    [JsonObject("HVACTemplate:Zone:Unitary")]
    public class HVACTemplate_Zone_Unitary
    {
        
[Description(@"Zone name must match a building zone name")]
[JsonProperty(@"Zone name must match a building zone name")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Enter the name of an HVACTemplate:System:Unitary, HVACTemplate:System:UnitaryHeatPump:AirTtoAir, or HVACTemplate:System:UnitarySystem object serving this zone.")]
[JsonProperty(@"Enter the name of an HVACTemplate:System:Unitary, HVACTemplate:System:UnitaryHeatPump:AirTtoAir, or HVACTemplate:System:UnitarySystem object serving this zone.")]
public System.String TemplateUnitarySystemName { get; set; } = "";
        
[Description(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
[JsonProperty(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
public System.String TemplateThermostatName { get; set; } = "";
        
[Description(@"This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty(@"This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
public System.String SupplyAirMaximumFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneHeatingSizingFactor { get; set; } = ;
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneCoolingSizingFactor { get; set; } = ;
        
[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
public YesNoDefault OutdoorAirMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Flow/Person");
        
[Description(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
[JsonProperty(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerPerson { get; set; } = 0.00944;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZoneFloorArea { get; set; } = 0;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZone { get; set; } = 0;
        
[Description(@"Plenum zone name. Supply plenum runs through only this zone. Blank if none.")]
[JsonProperty(@"Plenum zone name. Supply plenum runs through only this zone. Blank if none.")]
public System.String SupplyPlenumName { get; set; } = "";
        
[Description(@"Plenum zone name. Return plenum runs through only this zone. Blank if none.")]
[JsonProperty(@"Plenum zone name. Return plenum runs through only this zone. Blank if none.")]
public System.String ReturnPlenumName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault BaseboardHeatingType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String BaseboardHeatingCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:Unitary or HVACTemplate:System:UnitaryHeatPump:AirToAir Cooling Design Supply Air Temperature")]
[JsonProperty(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:Unitary or HVACTemplate:System:UnitaryHeatPump:AirToAir Cooling Design Supply Air Temperature")]
public YesNoDefault ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SystemSupplyAirTemperature");
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneCoolingDesignSupplyAirTemperature { get; set; } = 12.8;
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
public System.Single ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = 11.11;
        
[Description(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:Unitary or HVACTemplate:System:UnitaryHeatPump:AirToAir Heating Design Supply Air Temperature")]
[JsonProperty(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:Unitary or HVACTemplate:System:UnitaryHeatPump:AirToAir Heating Design Supply Air Temperature")]
public YesNoDefault ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SystemSupplyAirTemperature");
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneHeatingDesignSupplyAirTemperature { get; set; } = 50;
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
public System.Single ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = 30;
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
public System.String DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
public System.String DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
    }
    
    public enum OutdoorAirMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum BaseboardHeatingTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum ZoneCoolingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("SystemSupplyAirTemperature")]
        SystemSupplyAirTemperature = 2,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 3,
    }
    
    public enum ZoneHeatingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("SystemSupplyAirTemperature")]
        SystemSupplyAirTemperature = 2,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 3,
    }
    
    [Description("Zone terminal unit, variable volume, reheat optional. For heating, this unit acti" +
        "vates reheat coil first, then increases airflow (if reverse action specified).")]
    [JsonObject("HVACTemplate:Zone:VAV")]
    public class HVACTemplate_Zone_VAV
    {
        
[Description(@"Zone name must match a building zone name")]
[JsonProperty(@"Zone name must match a building zone name")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Name of a HVACTemplate:System:VAV or HVACTemplate:System:PackagedVAV object serving this zone")]
[JsonProperty(@"Name of a HVACTemplate:System:VAV or HVACTemplate:System:PackagedVAV object serving this zone")]
public System.String TemplateVavSystemName { get; set; } = "";
        
[Description(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
[JsonProperty(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
public System.String TemplateThermostatName { get; set; } = "";
        
[Description(@"This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty(@"This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
public System.String SupplyAirMaximumFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneHeatingSizingFactor { get; set; } = ;
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneCoolingSizingFactor { get; set; } = ;
        
[Description(@"Constant = Constant Minimum Air Flow Fraction (a fraction of Maximum Air Flow Rate) FixedFlowRate = Fixed Minimum Air Flow Rate (a fixed minimum air volume flow rate) Scheduled = Scheduled Minimum Air Flow Fraction (a fraction of Maximum Air Flow")]
[JsonProperty(@"Constant = Constant Minimum Air Flow Fraction (a fraction of Maximum Air Flow Rate) FixedFlowRate = Fixed Minimum Air Flow Rate (a fixed minimum air volume flow rate) Scheduled = Scheduled Minimum Air Flow Fraction (a fraction of Maximum Air Flow")]
public YesNoDefault ZoneMinimumAirFlowInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Constant");
        
[Description(@"This field is used if the field Zone Minimum Air Flow Input Method is Constant If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional. If a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the following field are entered, the larger result is used.")]
[JsonProperty(@"This field is used if the field Zone Minimum Air Flow Input Method is Constant If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional. If a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the following field are entered, the larger result is used.")]
public System.Single ConstantMinimumAirFlowFraction { get; set; } = 0.2;
        
[Description(@"This field is used if the field Zone Minimum Air Flow Input Method is FixedFlowRate. If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional. If a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the previous field are entered, the larger result is used.")]
[JsonProperty(@"This field is used if the field Zone Minimum Air Flow Input Method is FixedFlowRate. If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional. If a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the previous field are entered, the larger result is used.")]
public System.Single FixedMinimumAirFlowRate { get; set; } = ;
        
[Description(@"This field is used if the field Zone Minimum Air Flow Input Method is Scheduled Schedule values are fractions, 0.0 to 1.0. If the field Constant Minimum Air Flow Fraction is blank, then the average of the minimum and maximum schedule values is used for sizing normal-action reheat coils.")]
[JsonProperty(@"This field is used if the field Zone Minimum Air Flow Input Method is Scheduled Schedule values are fractions, 0.0 to 1.0. If the field Constant Minimum Air Flow Fraction is blank, then the average of the minimum and maximum schedule values is used for sizing normal-action reheat coils.")]
public System.String MinimumAirFlowFractionScheduleName { get; set; } = "";
        
[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
public YesNoDefault OutdoorAirMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Flow/Person");
        
[Description(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
[JsonProperty(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerPerson { get; set; } = 0.00944;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZoneFloorArea { get; set; } = 0;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZone { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault ReheatCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String ReheatCoilAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault DamperHeatingAction { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Reverse");
        
[Description(@"Used only when Reheat Coil Object Type = Coil:Heating:Water and Damper Heating Action = Reverse When autocalculating, the maximum flow per zone is set to 0.002032 m3/s-m2 (0.4 cfm/sqft) This optional field limits the maximum flow allowed in reheat mode. If this field and the following field are left blank, the maximum flow will not be limited. At no time will the maximum flow rate calculated here exceed the value of Maximum Air Flow Rate.")]
[JsonProperty(@"Used only when Reheat Coil Object Type = Coil:Heating:Water and Damper Heating Action = Reverse When autocalculating, the maximum flow per zone is set to 0.002032 m3/s-m2 (0.4 cfm/sqft) This optional field limits the maximum flow allowed in reheat mode. If this field and the following field are left blank, the maximum flow will not be limited. At no time will the maximum flow rate calculated here exceed the value of Maximum Air Flow Rate.")]
public System.String MaximumFlowPerZoneFloorAreaDuringReheat { get; set; } = "";
        
[Description(@"Used only when Reheat Coil Object Type = Coil:Heating:Water and Damper Heating Action = Reverse When autocalculating, the maximum flow fraction is set to the ratio of 0.002032 m3/s-m2 (0.4 cfm/sqft) multiplied by the zone floor area and the Maximum Air Flow Rate. This optional field limits the maximum flow allowed in reheat mode. If this field and the previous field are left blank, the maximum flow will not be limited. At no time will the maximum flow rate calculated here exceed the value of Maximum Air Flow Rate.")]
[JsonProperty(@"Used only when Reheat Coil Object Type = Coil:Heating:Water and Damper Heating Action = Reverse When autocalculating, the maximum flow fraction is set to the ratio of 0.002032 m3/s-m2 (0.4 cfm/sqft) multiplied by the zone floor area and the Maximum Air Flow Rate. This optional field limits the maximum flow allowed in reheat mode. If this field and the previous field are left blank, the maximum flow will not be limited. At no time will the maximum flow rate calculated here exceed the value of Maximum Air Flow Rate.")]
public System.String MaximumFlowFractionDuringReheat { get; set; } = "";
        
[Description(@"Specifies the maximum allowable supply air temperature leaving the reheat coil. If left blank, there is no limit and no default. If unknown, 35C (95F) is recommended.")]
[JsonProperty(@"Specifies the maximum allowable supply air temperature leaving the reheat coil. If left blank, there is no limit and no default. If unknown, 35C (95F) is recommended.")]
public System.Single MaximumReheatAirTemperature { get; set; } = ;
        
[Description(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will increase flow as needed to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on the current number of occupants in the zone. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate. If this field is blank, then the terminal unit will not be controlled for outdoor air flow. Note that this field is used only for specifying the design outdoor air flow rate used for control. The field Design Specification Outdoor Air Object Name for Sizing (see below) is used to specify the design outdoor air flow rate.")]
[JsonProperty(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will increase flow as needed to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on the current number of occupants in the zone. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate. If this field is blank, then the terminal unit will not be controlled for outdoor air flow. Note that this field is used only for specifying the design outdoor air flow rate used for control. The field Design Specification Outdoor Air Object Name for Sizing (see below) is used to specify the design outdoor air flow rate.")]
public System.String DesignSpecificationOutdoorAirObjectNameForControl { get; set; } = "";
        
[Description(@"Plenum zone name. Supply plenum runs through only this zone. Blank if none.")]
[JsonProperty(@"Plenum zone name. Supply plenum runs through only this zone. Blank if none.")]
public System.String SupplyPlenumName { get; set; } = "";
        
[Description(@"Plenum zone name. Return plenum runs through only this zone. Blank if none.")]
[JsonProperty(@"Plenum zone name. Return plenum runs through only this zone. Blank if none.")]
public System.String ReturnPlenumName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault BaseboardHeatingType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String BaseboardHeatingCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint")]
[JsonProperty(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint")]
public YesNoDefault ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SystemSupplyAirTemperature");
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneCoolingDesignSupplyAirTemperature { get; set; } = 12.8;
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
public System.Single ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = 11.11;
        
[Description(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference")]
[JsonProperty(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference")]
public YesNoDefault ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SupplyAirTemperature");
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneHeatingDesignSupplyAirTemperature { get; set; } = 50;
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
public System.Single ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = 30;
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification. Note that this field is used only for specifying the design outdoor air flow rate used for sizing. The field Design Specification Outdoor Air Object Name for Control (see above) is used to actively control the VAV terminal air flow rate.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification. Note that this field is used only for specifying the design outdoor air flow rate used for sizing. The field Design Specification Outdoor Air Object Name for Control (see above) is used to actively control the VAV terminal air flow rate.")]
public System.String DesignSpecificationOutdoorAirObjectNameForSizing { get; set; } = "";
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
public System.String DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
    }
    
    public enum ZoneMinimumAirFlowInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Constant")]
        Constant = 1,
        
        [JsonProperty("FixedFlowRate")]
        FixedFlowRate = 2,
        
        [JsonProperty("Scheduled")]
        Scheduled = 3,
    }
    
    public enum OutdoorAirMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum ReheatCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum DamperHeatingActionType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Normal")]
        Normal = 1,
        
        [JsonProperty("Reverse")]
        Reverse = 2,
    }
    
    public enum BaseboardHeatingTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum ZoneCoolingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("SystemSupplyAirTemperature")]
        SystemSupplyAirTemperature = 2,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 3,
    }
    
    public enum ZoneHeatingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    [Description("Zone terminal unit, fan powered variable volume, reheat optional. Referenced sche" +
        "dules must be defined elsewhere in the idf.")]
    [JsonObject("HVACTemplate:Zone:VAV:FanPowered")]
    public class HVACTemplate_Zone_VAV_FanPowered
    {
        
[Description(@"Zone Name must match a building zone name")]
[JsonProperty(@"Zone Name must match a building zone name")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Enter the name of a HVACTemplate:System:VAV or HVACTemplate:System:PackagedVAV object serving this zone.")]
[JsonProperty(@"Enter the name of a HVACTemplate:System:VAV or HVACTemplate:System:PackagedVAV object serving this zone.")]
public System.String TemplateVavSystemName { get; set; } = "";
        
[Description(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
[JsonProperty(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
public System.String TemplateThermostatName { get; set; } = "";
        
[Description(@"This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty(@"This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
public System.String PrimarySupplyAirMaximumFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneHeatingSizingFactor { get; set; } = ;
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneCoolingSizingFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String PrimarySupplyAirMinimumFlowFraction { get; set; } = (System.String)Autosize;
        
[Description(@"This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty(@"This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
public System.String SecondarySupplyAirMaximumFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public YesNoDefault FlowType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Parallel");
        
[Description(@"The fraction of the primary air flow at which fan turns on Applicable only to Parallel Flow Type")]
[JsonProperty(@"The fraction of the primary air flow at which fan turns on Applicable only to Parallel Flow Type")]
public System.String ParallelFanOnFlowFraction { get; set; } = (System.String)Autosize;
        
[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
public YesNoDefault OutdoorAirMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Flow/Person");
        
[Description(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
[JsonProperty(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerPerson { get; set; } = 0.00944;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/area, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/area, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZoneFloorArea { get; set; } = 0;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZone { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault ReheatCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Electric");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String ReheatCoilAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single FanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single FanDeltaPressure { get; set; } = 1000;
        
[JsonProperty(@"")]
public System.Single FanMotorEfficiency { get; set; } = 0.9;
        
[Description(@"Plenum zone name. Supply plenum runs through only this zone. Blank if none.")]
[JsonProperty(@"Plenum zone name. Supply plenum runs through only this zone. Blank if none.")]
public System.String SupplyPlenumName { get; set; } = "";
        
[Description(@"Plenum zone name. Return plenum runs through only this zone. Blank if none.")]
[JsonProperty(@"Plenum zone name. Return plenum runs through only this zone. Blank if none.")]
public System.String ReturnPlenumName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault BaseboardHeatingType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String BaseboardHeatingCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint")]
[JsonProperty(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint")]
public YesNoDefault ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SystemSupplyAirTemperature");
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneCoolingDesignSupplyAirTemperature { get; set; } = 12.8;
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
public System.Single ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = 11.11;
        
[Description(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference")]
[JsonProperty(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference")]
public YesNoDefault ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SupplyAirTemperature");
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneHeatingDesignSupplyAirTemperature { get; set; } = 50;
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
public System.Single ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = 30;
        
[Description(@"This is the operating schedule for the zone PIU fan. For a parallel PIU, the fan operates only when the primary air flow is below the Parallel Fan On Flow Fraction and the Zone PIU Fan Schedule is on, or it is activated by an availability manager. For a series PIU, the zone fan operates whenever the Zone PIU Fan Schedule is on, or it is activated by an availability manager. If this field is left blank, the System Availability Schedule for the HVACTemplate:System serving this zone will be used.")]
[JsonProperty(@"This is the operating schedule for the zone PIU fan. For a parallel PIU, the fan operates only when the primary air flow is below the Parallel Fan On Flow Fraction and the Zone PIU Fan Schedule is on, or it is activated by an availability manager. For a series PIU, the zone fan operates whenever the Zone PIU Fan Schedule is on, or it is activated by an availability manager. If this field is left blank, the System Availability Schedule for the HVACTemplate:System serving this zone will be used.")]
public System.String ZonePiuFanScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
    }
    
    public enum FlowTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Parallel")]
        Parallel = 1,
        
        [JsonProperty("ParallelFromPlenum")]
        ParallelFromPlenum = 2,
        
        [JsonProperty("Series")]
        Series = 3,
        
        [JsonProperty("SeriesFromPlenum")]
        SeriesFromPlenum = 4,
    }
    
    public enum OutdoorAirMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum ReheatCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
    }
    
    public enum BaseboardHeatingTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum ZoneCoolingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("SystemSupplyAirTemperature")]
        SystemSupplyAirTemperature = 2,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 3,
    }
    
    public enum ZoneHeatingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    [Description("VAV system with VAV for both heating and cooling and optional reheat coil. For he" +
        "ating, this unit increases airflow first, then activates reheat coil.")]
    [JsonObject("HVACTemplate:Zone:VAV:HeatAndCool")]
    public class HVACTemplate_Zone_VAV_HeatAndCool
    {
        
[Description(@"Zone name must match a building zone name")]
[JsonProperty(@"Zone name must match a building zone name")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Name of a HVACTemplate:System:VAV or HVACTemplate:System:PackagedVAV object serving this zone")]
[JsonProperty(@"Name of a HVACTemplate:System:VAV or HVACTemplate:System:PackagedVAV object serving this zone")]
public System.String TemplateVavSystemName { get; set; } = "";
        
[Description(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
[JsonProperty(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
public System.String TemplateThermostatName { get; set; } = "";
        
[Description(@"This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty(@"This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
public System.String SupplyAirMaximumFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneHeatingSizingFactor { get; set; } = ;
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneCoolingSizingFactor { get; set; } = ;
        
[Description(@"This field is used if the field Zone Minimum Air Flow Input Method is Constant If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional. If a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the following field are entered, the larger result is used.")]
[JsonProperty(@"This field is used if the field Zone Minimum Air Flow Input Method is Constant If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional. If a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the following field are entered, the larger result is used.")]
public System.Single ConstantMinimumAirFlowFraction { get; set; } = 0.2;
        
[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
public YesNoDefault OutdoorAirMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Flow/Person");
        
[Description(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
[JsonProperty(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerPerson { get; set; } = 0.00944;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZoneFloorArea { get; set; } = 0;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZone { get; set; } = 0;
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification. Note that this field is used only for specifying the design outdoor air flow rate used for sizing. The field Design Specification Outdoor Air Object Name for Control (see above) is used to actively control the VAV terminal air flow rate.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification. Note that this field is used only for specifying the design outdoor air flow rate used for sizing. The field Design Specification Outdoor Air Object Name for Control (see above) is used to actively control the VAV terminal air flow rate.")]
public System.String DesignSpecificationOutdoorAirObjectNameForSizing { get; set; } = "";
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
public System.String DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ReheatCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String ReheatCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Specifies the maximum allowable supply air temperature leaving the reheat coil. If left blank, there is no limit and no default. If unknown, 35C (95F) is recommended.")]
[JsonProperty(@"Specifies the maximum allowable supply air temperature leaving the reheat coil. If left blank, there is no limit and no default. If unknown, 35C (95F) is recommended.")]
public System.Single MaximumReheatAirTemperature { get; set; } = ;
        
[Description(@"Plenum zone name. Supply plenum runs through only this zone. Blank if none.")]
[JsonProperty(@"Plenum zone name. Supply plenum runs through only this zone. Blank if none.")]
public System.String SupplyPlenumName { get; set; } = "";
        
[Description(@"Plenum zone name. Return plenum runs through only this zone. Blank if none.")]
[JsonProperty(@"Plenum zone name. Return plenum runs through only this zone. Blank if none.")]
public System.String ReturnPlenumName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault BaseboardHeatingType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String BaseboardHeatingCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint")]
[JsonProperty(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint")]
public YesNoDefault ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SystemSupplyAirTemperature");
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneCoolingDesignSupplyAirTemperature { get; set; } = 12.8;
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
public System.Single ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = 11.11;
        
[Description(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Heating Coil Design Setpoint TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference")]
[JsonProperty(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Heating Coil Design Setpoint TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference")]
public YesNoDefault ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SupplyAirTemperature");
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneHeatingDesignSupplyAirTemperature { get; set; } = 50;
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
public System.Single ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = 30;
    }
    
    public enum OutdoorAirMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum ReheatCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum BaseboardHeatingTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum ZoneCoolingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("SystemSupplyAirTemperature")]
        SystemSupplyAirTemperature = 2,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 3,
    }
    
    public enum ZoneHeatingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    [Description("Zone terminal unit, constant volume, reheat optional. Referenced schedules must b" +
        "e defined elsewhere in the idf.")]
    [JsonObject("HVACTemplate:Zone:ConstantVolume")]
    public class HVACTemplate_Zone_ConstantVolume
    {
        
[Description(@"Zone name must match a building zone name")]
[JsonProperty(@"Zone name must match a building zone name")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Name of a HVACTemplate:System:ConstantVolume object serving this zone")]
[JsonProperty(@"Name of a HVACTemplate:System:ConstantVolume object serving this zone")]
public System.String TemplateConstantVolumeSystemName { get; set; } = "";
        
[Description(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
[JsonProperty(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
public System.String TemplateThermostatName { get; set; } = "";
        
[Description(@"This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty(@"This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
public System.String SupplyAirMaximumFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneHeatingSizingFactor { get; set; } = ;
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneCoolingSizingFactor { get; set; } = ;
        
[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
public YesNoDefault OutdoorAirMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Flow/Person");
        
[Description(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
[JsonProperty(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerPerson { get; set; } = 0.00944;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZoneFloorArea { get; set; } = 0;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZone { get; set; } = 0;
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
public System.String DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
public System.String DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ReheatCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String ReheatCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Specifies the maximum allowable supply air temperature leaving the reheat coil. If left blank, there is no limit and no default. If unknown, 35C (95F) is recommended.")]
[JsonProperty(@"Specifies the maximum allowable supply air temperature leaving the reheat coil. If left blank, there is no limit and no default. If unknown, 35C (95F) is recommended.")]
public System.Single MaximumReheatAirTemperature { get; set; } = ;
        
[Description(@"Plenum zone name. Supply plenum runs through only this zone. Blank if none.")]
[JsonProperty(@"Plenum zone name. Supply plenum runs through only this zone. Blank if none.")]
public System.String SupplyPlenumName { get; set; } = "";
        
[Description(@"Plenum zone name. Return plenum runs through only this zone. Blank if none.")]
[JsonProperty(@"Plenum zone name. Return plenum runs through only this zone. Blank if none.")]
public System.String ReturnPlenumName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault BaseboardHeatingType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String BaseboardHeatingCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint")]
[JsonProperty(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint")]
public YesNoDefault ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SystemSupplyAirTemperature");
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneCoolingDesignSupplyAirTemperature { get; set; } = 12.8;
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
public System.Single ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = 11.11;
        
[Description(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference")]
[JsonProperty(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference")]
public YesNoDefault ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SupplyAirTemperature");
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneHeatingDesignSupplyAirTemperature { get; set; } = 50;
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature")]
public System.Single ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = 30;
    }
    
    public enum OutdoorAirMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum ReheatCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum BaseboardHeatingTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum ZoneCoolingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("SystemSupplyAirTemperature")]
        SystemSupplyAirTemperature = 2,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 3,
    }
    
    public enum ZoneHeatingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 2,
    }
    
    [Description("Zone terminal unit, dual-duct, constant or variable volume.")]
    [JsonObject("HVACTemplate:Zone:DualDuct")]
    public class HVACTemplate_Zone_DualDuct
    {
        
[Description(@"Zone name must match a building zone name")]
[JsonProperty(@"Zone name must match a building zone name")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Name of a HVACTemplate:System:DualDuct object serving this zone")]
[JsonProperty(@"Name of a HVACTemplate:System:DualDuct object serving this zone")]
public System.String TemplateDualDuctSystemName { get; set; } = "";
        
[Description(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
[JsonProperty(@"Enter the name of a HVACTemplate:Thermostat object. If blank, then it is assumed that standard thermostat objects have been defined for this zone.")]
public System.String TemplateThermostatName { get; set; } = "";
        
[Description(@"This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
[JsonProperty(@"This field may be set to "autosize". If a value is entered, it will be multiplied by the Supply Air Sizing Factor and by zone multipliers.")]
public System.String SupplyAirMaximumFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneHeatingSizingFactor { get; set; } = ;
        
[Description(@"If blank, value from Sizing:Parameters will be used.")]
[JsonProperty(@"If blank, value from Sizing:Parameters will be used.")]
public System.Single ZoneCoolingSizingFactor { get; set; } = ;
        
[Description(@"This field is the Zone Minimum Air Flow Fraction specified as a fraction of the maximum air flow rate. This field is ignored if the system serving this zone is constant volume.")]
[JsonProperty(@"This field is the Zone Minimum Air Flow Fraction specified as a fraction of the maximum air flow rate. This field is ignored if the system serving this zone is constant volume.")]
public System.Single ZoneMinimumAirFlowFraction { get; set; } = 0.2;
        
[Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
[JsonProperty(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
public YesNoDefault OutdoorAirMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Flow/Person");
        
[Description(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
[JsonProperty(@"Default 0.00944 is 20 cfm per person This input is used if the field Outdoor Air Method is Flow/Person, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerPerson { get; set; } = 0.00944;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Area, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZoneFloorArea { get; set; } = 0;
        
[Description(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
[JsonProperty(@"This input is used if the field Outdoor Air Method is Flow/Zone, Sum, or Maximum")]
public System.Single OutdoorAirFlowRatePerZone { get; set; } = 0;
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification. Note that this field is used only for specifying the design outdoor air flow rate used for sizing. The field Design Specification Outdoor Air Object Name for Control (see above) is used to actively control the VAV terminal air flow rate.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification. Note that this field is used only for specifying the design outdoor air flow rate used for sizing. The field Design Specification Outdoor Air Object Name for Control (see above) is used to actively control the VAV terminal air flow rate.")]
public System.String DesignSpecificationOutdoorAirObjectNameForSizing { get; set; } = "";
        
[Description(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
[JsonProperty(@"This field is used only when Outdoor Air Method=DetailedSpecification.")]
public System.String DesignSpecificationZoneAirDistributionObjectName { get; set; } = "";
        
[Description(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will increase flow as needed to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on the current number of occupants in the zone. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate. If this field is blank, then the terminal unit will not be controlled for outdoor air flow. Note that this field is used only for specifying the design outdoor air flow rate used for control. The field Design Specification Outdoor Air Object Name for Sizing (see below) is used to specify the design outdoor air flow rate.")]
[JsonProperty(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will increase flow as needed to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on the current number of occupants in the zone. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate. If this field is blank, then the terminal unit will not be controlled for outdoor air flow. Note that this field is used only for specifying the design outdoor air flow rate used for control. The field Design Specification Outdoor Air Object Name for Sizing (see below) is used to specify the design outdoor air flow rate.")]
public System.String DesignSpecificationOutdoorAirObjectNameForControl { get; set; } = "";
        
[Description(@"Plenum zone name. Cold supply plenum that serves only this zone. Blank if none.")]
[JsonProperty(@"Plenum zone name. Cold supply plenum that serves only this zone. Blank if none.")]
public System.String ColdSupplyPlenumName { get; set; } = "";
        
[Description(@"Plenum zone name. Hot supply plenum that serves only this zone. Blank if none.")]
[JsonProperty(@"Plenum zone name. Hot supply plenum that serves only this zone. Blank if none.")]
public System.String HotSupplyPlenumName { get; set; } = "";
        
[Description(@"Plenum zone name. Return plenum that serves only this zone. Blank if none.")]
[JsonProperty(@"Plenum zone name. Return plenum that serves only this zone. Blank if none.")]
public System.String ReturnPlenumName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault BaseboardHeatingType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String BaseboardHeatingAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String BaseboardHeatingCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:DualDuct Cooling Coil Design Setpoint")]
[JsonProperty(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:DualDuct Cooling Coil Design Setpoint")]
public YesNoDefault ZoneCoolingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SystemSupplyAirTemperature");
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneCoolingDesignSupplyAirTemperature { get; set; } = 12.8;
        
[Description(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
[JsonProperty(@"Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be subtracted from the zone temperature at peak load to calculate the Zone Cooling Design Supply Air Temperature.")]
public System.Single ZoneCoolingDesignSupplyAirTemperatureDifference { get; set; } = 11.11;
        
[Description(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:DualDuct Heating Coil Design Setpoint")]
[JsonProperty(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:DualDuct Heating Coil Design Setpoint")]
public YesNoDefault ZoneHeatingDesignSupplyAirTemperatureInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SystemSupplyAirTemperature");
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = SupplyAirTemperature")]
public System.Single ZoneHeatingDesignSupplyAirTemperature { get; set; } = 50;
        
[Description(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
[JsonProperty(@"Zone Heating Design Supply Air Temperature is only used when Zone Heating Design Supply Air Temperature Input Method = TemperatureDifference The absolute value of this field will be added to the zone temperature at peak load to calculate the Zone Heating Design Supply Air Temperature.")]
public System.Single ZoneHeatingDesignSupplyAirTemperatureDifference { get; set; } = 30;
    }
    
    public enum OutdoorAirMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DetailedSpecification")]
        DetailedSpecification = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
        
        [JsonProperty("Maximum")]
        Maximum = 5,
        
        [JsonProperty("Sum")]
        Sum = 6,
    }
    
    public enum BaseboardHeatingTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum ZoneCoolingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("SystemSupplyAirTemperature")]
        SystemSupplyAirTemperature = 2,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 3,
    }
    
    public enum ZoneHeatingDesignSupplyAirTemperatureInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SupplyAirTemperature")]
        SupplyAirTemperature = 1,
        
        [JsonProperty("SystemSupplyAirTemperature")]
        SystemSupplyAirTemperature = 2,
        
        [JsonProperty("TemperatureDifference")]
        TemperatureDifference = 3,
    }
    
    [Description("Variable refrigerant flow (VRF) heat pump condensing unit. Serves one or more VRF" +
        " zone terminal units (HVACTemplate:Zone:VRF).")]
    [JsonObject("HVACTemplate:System:VRF")]
    public class HVACTemplate_System_VRF
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String SystemAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Enter the total cooling capacity in watts at rated conditions or set to autosize. Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Enter the total cooling capacity in watts at rated conditions or set to autosize. Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.String GrossRatedTotalCoolingCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Enter the coefficient of performance at rated conditions or leave blank to use default. COP includes compressor and condenser fan electrical energy input COP does not include supply fan heat or supply fan electric power input")]
[JsonProperty(@"Enter the coefficient of performance at rated conditions or leave blank to use default. COP includes compressor and condenser fan electrical energy input COP does not include supply fan heat or supply fan electric power input")]
public System.Single GrossRatedCoolingCop { get; set; } = 3.3;
        
[Description(@"Enter the minimum outdoor temperature allowed for cooling operation. Cooling is disabled below this temperature.")]
[JsonProperty(@"Enter the minimum outdoor temperature allowed for cooling operation. Cooling is disabled below this temperature.")]
public System.Single MinimumOutdoorTemperatureInCoolingMode { get; set; } = -6;
        
[Description(@"Enter the maximum outdoor temperature allowed for cooling operation. Cooling is disabled above this temperature.")]
[JsonProperty(@"Enter the maximum outdoor temperature allowed for cooling operation. Cooling is disabled above this temperature.")]
public System.Single MaximumOutdoorTemperatureInCoolingMode { get; set; } = 43;
        
[Description(@"Enter the heating capacity in watts at rated conditions or set to autosize. Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Enter the heating capacity in watts at rated conditions or set to autosize. Heating capacity not accounting for the effect of supply air fan heat")]
public System.String GrossRatedHeatingCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"If the Gross Rated Heating Capacity is autosized, the heating capacity is sized to be equal to the cooling capacity multiplied by this sizing ratio. The zone terminal unit heating coils are also sized using this ratio unless the sizing ratio input in the ZoneHVAC:TerminalUnit:VariableRefrigerantFlow object is entered.")]
[JsonProperty(@"If the Gross Rated Heating Capacity is autosized, the heating capacity is sized to be equal to the cooling capacity multiplied by this sizing ratio. The zone terminal unit heating coils are also sized using this ratio unless the sizing ratio input in the ZoneHVAC:TerminalUnit:VariableRefrigerantFlow object is entered.")]
public System.Single RatedHeatingCapacitySizingRatio { get; set; } = 1;
        
[Description(@"COP includes compressor and condenser fan electrical energy input COP does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty(@"COP includes compressor and condenser fan electrical energy input COP does not include supply fan heat or supply fan electrical energy input")]
public System.Single GrossRatedHeatingCop { get; set; } = 3.4;
        
[Description(@"Enter the minimum outdoor temperature allowed for heating operation.")]
[JsonProperty(@"Enter the minimum outdoor temperature allowed for heating operation.")]
public System.Single MinimumOutdoorTemperatureInHeatingMode { get; set; } = -20;
        
[Description(@"Enter the maximum outdoor temperature allowed for heating operation.")]
[JsonProperty(@"Enter the maximum outdoor temperature allowed for heating operation.")]
public System.Single MaximumOutdoorTemperatureInHeatingMode { get; set; } = 16;
        
[Description(@"Enter the minimum heat pump part-load ratio (PLR). When the cooling or heating PLR is below this value, the heat pump compressor will cycle to meet the cooling or heating demand.")]
[JsonProperty(@"Enter the minimum heat pump part-load ratio (PLR). When the cooling or heating PLR is below this value, the heat pump compressor will cycle to meet the cooling or heating demand.")]
public System.Single MinimumHeatPumpPartLoadRatio { get; set; } = 0.15;
        
[Description(@"Enter the name of the zone where the master thermostat is located.")]
[JsonProperty(@"Enter the name of the zone where the master thermostat is located.")]
public System.String ZoneNameForMasterThermostatLocation { get; set; } = "";
        
[Description(@"Choose a thermostat control logic scheme. If these control types fail to control zone temperature within a reasonable limit, consider using multiple VRF systems")]
[JsonProperty(@"Choose a thermostat control logic scheme. If these control types fail to control zone temperature within a reasonable limit, consider using multiple VRF systems")]
public YesNoDefault MasterThermostatPriorityControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "MasterThermostatPriority");
        
[Description(@"this field is required if Master Thermostat Priority Control Type is Scheduled. Schedule values of 0 denote cooling, 1 for heating, and all other values disable the system.")]
[JsonProperty(@"this field is required if Master Thermostat Priority Control Type is Scheduled. Schedule values of 0 denote cooling, 1 for heating, and all other values disable the system.")]
public System.String ThermostatPriorityScheduleName { get; set; } = "";
        
[Description(@"This field is reserved for future use. The only valid choice is No.")]
[JsonProperty(@"This field is reserved for future use. The only valid choice is No.")]
public YesNoDefault HeatPumpWasteHeatRecovery { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Enter the equivalent length of the farthest terminal unit from the condenser")]
[JsonProperty(@"Enter the equivalent length of the farthest terminal unit from the condenser")]
public System.Single EquivalentPipingLengthUsedForPipingCorrectionFactorInCoolingMode { get; set; } = 30;
        
[Description(@"Enter the height difference between the highest and lowest terminal unit")]
[JsonProperty(@"Enter the height difference between the highest and lowest terminal unit")]
public System.Single VerticalHeightUsedForPipingCorrectionFactor { get; set; } = 10;
        
[Description(@"Enter the equivalent length of the farthest terminal unit from the condenser")]
[JsonProperty(@"Enter the equivalent length of the farthest terminal unit from the condenser")]
public System.Single EquivalentPipingLengthUsedForPipingCorrectionFactorInHeatingMode { get; set; } = 30;
        
[Description(@"Enter the value of the resistive heater located in the compressor(s). This heater is used to warm the refrigerant and oil when the compressor is off.")]
[JsonProperty(@"Enter the value of the resistive heater located in the compressor(s). This heater is used to warm the refrigerant and oil when the compressor is off.")]
public System.Single CrankcaseHeaterPowerPerCompressor { get; set; } = 33;
        
[Description(@"Enter the total number of compressor. This input is used only for crankcase heater calculations.")]
[JsonProperty(@"Enter the total number of compressor. This input is used only for crankcase heater calculations.")]
public System.Single NumberOfCompressors { get; set; } = 2;
        
[Description(@"Enter the ratio of the first stage compressor to total compressor capacity. All other compressors are assumed to be equally sized. This inputs is used only for crankcase heater calculations.")]
[JsonProperty(@"Enter the ratio of the first stage compressor to total compressor capacity. All other compressors are assumed to be equally sized. This inputs is used only for crankcase heater calculations.")]
public System.Single RatioOfCompressorSizeToTotalCompressorCapacity { get; set; } = 0.5;
        
[Description(@"Enter the maximum outdoor temperature above which the crankcase heaters are disabled.")]
[JsonProperty(@"Enter the maximum outdoor temperature above which the crankcase heaters are disabled.")]
public System.Single MaximumOutdoorDryBulbTemperatureForCrankcaseHeater { get; set; } = 5;
        
[Description(@"Select a defrost strategy. Reverse cycle reverses the operating mode from heating to cooling to melt frost formation on the condenser coil. The resistive strategy uses a resistive heater to melt the frost.")]
[JsonProperty(@"Select a defrost strategy. Reverse cycle reverses the operating mode from heating to cooling to melt frost formation on the condenser coil. The resistive strategy uses a resistive heater to melt the frost.")]
public YesNoDefault DefrostStrategy { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Resistive");
        
[Description(@"Choose a defrost control type. Either use a fixed Timed defrost period or select OnDemand to defrost only when necessary.")]
[JsonProperty(@"Choose a defrost control type. Either use a fixed Timed defrost period or select OnDemand to defrost only when necessary.")]
public YesNoDefault DefrostControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Timed");
        
[Description(@"Fraction of time in defrost mode. Only applicable if timed defrost control is specified.")]
[JsonProperty(@"Fraction of time in defrost mode. Only applicable if timed defrost control is specified.")]
public System.Single DefrostTimePeriodFraction { get; set; } = 0.058333;
        
[Description(@"Enter the size of the resistive defrost heating element. Only applicable if resistive defrost strategy is specified")]
[JsonProperty(@"Enter the size of the resistive defrost heating element. Only applicable if resistive defrost strategy is specified")]
public System.String ResistiveDefrostHeaterCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Enter the maximum outdoor temperature above which defrost operation is disabled.")]
[JsonProperty(@"Enter the maximum outdoor temperature above which defrost operation is disabled.")]
public System.Single MaximumOutdoorDryBulbTemperatureForDefrostOperation { get; set; } = 5;
        
[Description(@"Select either an air cooled or evaporatively cooled condenser.")]
[JsonProperty(@"Select either an air cooled or evaporatively cooled condenser.")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AirCooled");
        
[Description(@"Only used when Condenser Type = WaterCooled.")]
[JsonProperty(@"Only used when Condenser Type = WaterCooled.")]
public System.String WaterCondenserVolumeFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Enter the effectiveness of the evaporatively cooled condenser. This field is only used when the Condenser Type = EvaporativelyCooled.")]
[JsonProperty(@"Enter the effectiveness of the evaporatively cooled condenser. This field is only used when the Condenser Type = EvaporativelyCooled.")]
public System.Single EvaporativeCondenserEffectiveness { get; set; } = 0.9;
        
[Description(@"Used to calculate evaporative condenser water use. This field is only used when the Condenser Type = EvaporativelyCooled.")]
[JsonProperty(@"Used to calculate evaporative condenser water use. This field is only used when the Condenser Type = EvaporativelyCooled.")]
public System.String EvaporativeCondenserAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Rated power consumed by the evaporative condenser's water pump. This field is only used when the Condenser Type = EvaporativelyCooled.")]
[JsonProperty(@"Rated power consumed by the evaporative condenser's water pump. This field is only used when the Condenser Type = EvaporativelyCooled.")]
public System.String EvaporativeCondenserPumpRatedPowerConsumption { get; set; } = (System.String)0;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
public System.Single BasinHeaterCapacity { get; set; } = 0;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
public System.Single BasinHeaterSetpointTemperature { get; set; } = 2;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
public System.String BasinHeaterOperatingScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Electricity");
        
[Description(@"The minimum outdoor temperature below which heat recovery mode will not operate.")]
[JsonProperty(@"The minimum outdoor temperature below which heat recovery mode will not operate.")]
public System.Single MinimumOutdoorTemperatureInHeatRecoveryMode { get; set; } = -15;
        
[Description(@"The maximum outdoor temperature above which heat recovery mode will not operate.")]
[JsonProperty(@"The maximum outdoor temperature above which heat recovery mode will not operate.")]
public System.Single MaximumOutdoorTemperatureInHeatRecoveryMode { get; set; } = 45;
    }
    
    public enum MasterThermostatPriorityControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LoadPriority")]
        LoadPriority = 1,
        
        [JsonProperty("MasterThermostatPriority")]
        MasterThermostatPriority = 2,
        
        [JsonProperty("Scheduled")]
        Scheduled = 3,
        
        [JsonProperty("ThermostatOffsetPriority")]
        ThermostatOffsetPriority = 4,
        
        [JsonProperty("ZonePriority")]
        ZonePriority = 5,
    }
    
    public enum DefrostStrategyType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Resistive")]
        Resistive = 1,
        
        [JsonProperty("ReverseCycle")]
        ReverseCycle = 2,
    }
    
    public enum DefrostControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("OnDemand")]
        OnDemand = 1,
        
        [JsonProperty("Timed")]
        Timed = 2,
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 3,
    }
    
    public enum FuelTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("Electricity")]
        Electricity = 2,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 3,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 4,
        
        [JsonProperty("Gasoline")]
        Gasoline = 5,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 6,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 7,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 8,
        
        [JsonProperty("Propane")]
        Propane = 9,
    }
    
    [Description("Unitary furnace with air conditioner")]
    [JsonObject("HVACTemplate:System:Unitary")]
    public class HVACTemplate_System_Unitary
    {
        
[Description(@"If blank, always on; Unitary System always on. Schedule is used in availability manager and fan scheduling. Also see "Night Cycle Control" field.")]
[JsonProperty(@"If blank, always on; Unitary System always on. Schedule is used in availability manager and fan scheduling. Also see "Night Cycle Control" field.")]
public System.String SystemAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControlZoneOrThermostatLocationName { get; set; } = "";
        
[Description(@"This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty(@"This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
public System.String SupplyFanMaximumFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Refers to a schedule to specify unitary supply fan operating mode. Schedule values of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous fan (on) If this field is left blank, a schedule of always zero (cycling fan) will be used.")]
[JsonProperty(@"Refers to a schedule to specify unitary supply fan operating mode. Schedule values of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous fan (on) If this field is left blank, a schedule of always zero (cycling fan) will be used.")]
public System.String SupplyFanOperatingModeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SupplyFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single SupplyFanDeltaPressure { get; set; } = 600;
        
[JsonProperty(@"")]
public System.Single SupplyFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single SupplyFanMotorInAirStreamFraction { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SingleSpeedDX");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String CoolingCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Used for sizing.")]
[JsonProperty(@"Used for sizing.")]
public System.Single CoolingDesignSupplyAirTemperature { get; set; } = 12.8;
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.String CoolingCoilGrossRatedTotalCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Gross SHR")]
[JsonProperty(@"Gross SHR")]
public System.String CoolingCoilGrossRatedSensibleHeatRatio { get; set; } = (System.String)Autosize;
        
[Description(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply air fan heat or supply air fan electric power")]
[JsonProperty(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply air fan heat or supply air fan electric power")]
public System.Single CoolingCoilGrossRatedCop { get; set; } = 3;
        
[JsonProperty(@"")]
public YesNoDefault HeatingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String HeatingCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Used for sizing.")]
[JsonProperty(@"Used for sizing.")]
public System.Single HeatingDesignSupplyAirTemperature { get; set; } = 50;
        
[JsonProperty(@"")]
public System.String HeatingCoilCapacity { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single GasHeatingCoilEfficiency { get; set; } = 0.8;
        
[JsonProperty(@"")]
public System.Single GasHeatingCoilParasiticElectricLoad { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String MaximumOutdoorAirFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String MinimumOutdoorAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Schedule values multiply the minimum outdoor air flow rate If blank, always one")]
[JsonProperty(@"Schedule values multiply the minimum outdoor air flow rate If blank, always one")]
public System.String MinimumOutdoorAirScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault EconomizerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoEconomizer");
        
[JsonProperty(@"")]
public YesNoDefault EconomizerLockout { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoLockout");
        
[Description(@"Outdoor temperature above which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
[JsonProperty(@"Outdoor temperature above which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
public System.Single EconomizerUpperTemperatureLimit { get; set; } = ;
        
[Description(@"Outdoor temperature below which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
[JsonProperty(@"Outdoor temperature below which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
public System.Single EconomizerLowerTemperatureLimit { get; set; } = ;
        
[Description(@"Outdoor enthalpy above which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
[JsonProperty(@"Outdoor enthalpy above which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
public System.Single EconomizerUpperEnthalpyLimit { get; set; } = ;
        
[Description(@"Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
public System.Single EconomizerMaximumLimitDewpointTemperature { get; set; } = ;
        
[Description(@"Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
[JsonProperty(@"Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
public System.String SupplyPlenumName { get; set; } = "";
        
[Description(@"Plenum zone name. Return plenum serves all zones on this system. Blank if none.")]
[JsonProperty(@"Plenum zone name. Return plenum serves all zones on this system. Blank if none.")]
public System.String ReturnPlenumName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault SupplyFanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BlowThrough");
        
[JsonProperty(@"")]
public YesNoDefault NightCycleControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "StayOff");
        
[Description(@"Applicable only if Night Cycle Control is Cycle On Control Zone.")]
[JsonProperty(@"Applicable only if Night Cycle Control is Cycle On Control Zone.")]
public System.String NightCycleControlZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatRecoveryType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[JsonProperty(@"")]
public System.Single SensibleHeatRecoveryEffectiveness { get; set; } = 0.7;
        
[Description(@"Applicable only if Heat Recovery Type is Enthalpy.")]
[JsonProperty(@"Applicable only if Heat Recovery Type is Enthalpy.")]
public System.Single LatentHeatRecoveryEffectiveness { get; set; } = 0.65;
        
[Description(@"None = meet sensible cooling load only CoolReheatHeatingCoil = cool beyond the dry-bulb setpoint as required to meet the humidity setpoint, reheat with main heating coil. CoolReheatDesuperheater = cool beyond the dry-bulb setpoint as required to meet the humidity setpoint, reheat with desuperheater coil.")]
[JsonProperty(@"None = meet sensible cooling load only CoolReheatHeatingCoil = cool beyond the dry-bulb setpoint as required to meet the humidity setpoint, reheat with main heating coil. CoolReheatDesuperheater = cool beyond the dry-bulb setpoint as required to meet the humidity setpoint, reheat with desuperheater coil.")]
public YesNoDefault DehumidificationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Zone relative humidity setpoint in percent (0 to 100)")]
[JsonProperty(@"Zone relative humidity setpoint in percent (0 to 100)")]
public System.Single DehumidificationSetpoint { get; set; } = 60;
        
[JsonProperty(@"")]
public YesNoDefault HumidifierType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always available")]
[JsonProperty(@"If blank, always available")]
public System.String HumidifierAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Moisture output rate at full rated power input. The humidifier does not currently autosize, so the default is very large to allow for adequate capacity.")]
[JsonProperty(@"Moisture output rate at full rated power input. The humidifier does not currently autosize, so the default is very large to allow for adequate capacity.")]
public System.Single HumidifierRatedCapacity { get; set; } = 1E-06;
        
[Description(@"Electric power input at rated capacity moisture output. Power consumption is proportional to moisture output with no part-load penalty.")]
[JsonProperty(@"Electric power input at rated capacity moisture output. Power consumption is proportional to moisture output with no part-load penalty.")]
public System.String HumidifierRatedElectricPower { get; set; } = (System.String)Autosize;
        
[Description(@"Zone name where humidistat is located")]
[JsonProperty(@"Zone name where humidistat is located")]
public System.String HumidifierControlZoneName { get; set; } = "";
        
[Description(@"Zone relative humidity setpoint in percent (0 to 100)")]
[JsonProperty(@"Zone relative humidity setpoint in percent (0 to 100)")]
public System.Single HumidifierSetpoint { get; set; } = 30;
        
[Description(@"Specifies if the system has a return fan.")]
[JsonProperty(@"Specifies if the system has a return fan.")]
public YesNoDefault ReturnFan { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public System.Single ReturnFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single ReturnFanDeltaPressure { get; set; } = 500;
        
[JsonProperty(@"")]
public System.Single ReturnFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single ReturnFanMotorInAirStreamFraction { get; set; } = 1;
    }
    
    public enum CoolingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("SingleSpeedDX")]
        SingleSpeedDX = 2,
    }
    
    public enum HeatingCoilTypeType
    {
        
        [JsonProperty("Electric")]
        Electric = 0,
        
        [JsonProperty("Gas")]
        Gas = 1,
        
        [JsonProperty("HotWater")]
        HotWater = 2,
    }
    
    public enum EconomizerTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DifferentialDryBulb")]
        DifferentialDryBulb = 1,
        
        [JsonProperty("DifferentialDryBulbAndEnthalpy")]
        DifferentialDryBulbAndEnthalpy = 2,
        
        [JsonProperty("DifferentialEnthalpy")]
        DifferentialEnthalpy = 3,
        
        [JsonProperty("ElectronicEnthalpy")]
        ElectronicEnthalpy = 4,
        
        [JsonProperty("FixedDewPointAndDryBulb")]
        FixedDewPointAndDryBulb = 5,
        
        [JsonProperty("FixedDryBulb")]
        FixedDryBulb = 6,
        
        [JsonProperty("FixedEnthalpy")]
        FixedEnthalpy = 7,
        
        [JsonProperty("NoEconomizer")]
        NoEconomizer = 8,
    }
    
    public enum EconomizerLockoutType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LockoutWithCompressor")]
        LockoutWithCompressor = 1,
        
        [JsonProperty("LockoutWithHeating")]
        LockoutWithHeating = 2,
        
        [JsonProperty("NoLockout")]
        NoLockout = 3,
    }
    
    public enum SupplyFanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum NightCycleControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CycleOnAny")]
        CycleOnAny = 1,
        
        [JsonProperty("CycleOnControlZone")]
        CycleOnControlZone = 2,
        
        [JsonProperty("StayOff")]
        StayOff = 3,
    }
    
    public enum HeatRecoveryTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Sensible")]
        Sensible = 3,
    }
    
    public enum DehumidificationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CoolReheatDesuperheater")]
        CoolReheatDesuperheater = 1,
        
        [JsonProperty("CoolReheatHeatingCoil")]
        CoolReheatHeatingCoil = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum HumidifierTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ElectricSteam")]
        ElectricSteam = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    [Description("Unitary furnace with electric air-to-air heat pump")]
    [JsonObject("HVACTemplate:System:UnitaryHeatPump:AirToAir")]
    public class HVACTemplate_System_UnitaryHeatPump_AirToAir
    {
        
[Description(@"If blank, always on; Unitary System always on. Schedule is used in availability manager and fan scheduling. Also see "Night Cycle Control" field.")]
[JsonProperty(@"If blank, always on; Unitary System always on. Schedule is used in availability manager and fan scheduling. Also see "Night Cycle Control" field.")]
public System.String SystemAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControlZoneOrThermostatLocationName { get; set; } = "";
        
[Description(@"Supply air flow rate during cooling operation This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty(@"Supply air flow rate during cooling operation This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
public System.String CoolingSupplyAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Supply air flow rate during heating operation This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty(@"Supply air flow rate during heating operation This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
public System.String HeatingSupplyAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Supply air flow rate when no cooling or heating is needed Only used when heat pump fan operating mode is Continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used. This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty(@"Supply air flow rate when no cooling or heating is needed Only used when heat pump fan operating mode is Continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used. This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
public System.String NoLoadSupplyAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Refers to a schedule to specify unitary supply fan operating mode. Schedule values of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous fan (on) If this field is left blank, a schedule of always zero (cycling fan) will be used.")]
[JsonProperty(@"Refers to a schedule to specify unitary supply fan operating mode. Schedule values of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous fan (on) If this field is left blank, a schedule of always zero (cycling fan) will be used.")]
public System.String SupplyFanOperatingModeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault SupplyFanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BlowThrough");
        
[JsonProperty(@"")]
public System.Single SupplyFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single SupplyFanDeltaPressure { get; set; } = 600;
        
[JsonProperty(@"")]
public System.Single SupplyFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single SupplyFanMotorInAirStreamFraction { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SingleSpeedDX");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String CoolingCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Used for sizing.")]
[JsonProperty(@"Used for sizing.")]
public System.Single CoolingDesignSupplyAirTemperature { get; set; } = 12.8;
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
public System.String CoolingCoilGrossRatedTotalCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Rated sensible heat ratio (gross sensible capacity/gross total capacity) Sensible and total capacities do not include effect of supply fan heat")]
[JsonProperty(@"Rated sensible heat ratio (gross sensible capacity/gross total capacity) Sensible and total capacities do not include effect of supply fan heat")]
public System.String CoolingCoilGrossRatedSensibleHeatRatio { get; set; } = (System.String)Autosize;
        
[Description(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electric power input")]
[JsonProperty(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electric power input")]
public System.Single CoolingCoilGrossRatedCop { get; set; } = 3;
        
[JsonProperty(@"")]
public YesNoDefault HeatPumpHeatingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SingleSpeedDXHeatPump");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String HeatPumpHeatingCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Used for sizing.")]
[JsonProperty(@"Used for sizing.")]
public System.Single HeatingDesignSupplyAirTemperature { get; set; } = 50;
        
[Description(@"Rated heating capacity excluding the effect of supply air fan heat Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty(@"Rated heating capacity excluding the effect of supply air fan heat Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
public System.String HeatPumpHeatingCoilGrossRatedCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Heat Pump Heating Coil Rated Capacity divided by power input to the compressor and outdoor fan, does not include supply air fan heat or supply air fan electrical energy. Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty(@"Heat Pump Heating Coil Rated Capacity divided by power input to the compressor and outdoor fan, does not include supply air fan heat or supply air fan electrical energy. Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
public System.Single HeatPumpHeatingCoilRatedCop { get; set; } = 2.75;
        
[JsonProperty(@"")]
public System.Single HeatPumpHeatingMinimumOutdoorDryBulbTemperature { get; set; } = -8;
        
[JsonProperty(@"")]
public System.Single HeatPumpDefrostMaximumOutdoorDryBulbTemperature { get; set; } = 5;
        
[JsonProperty(@"")]
public YesNoDefault HeatPumpDefrostStrategy { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ReverseCycle");
        
[JsonProperty(@"")]
public YesNoDefault HeatPumpDefrostControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Timed");
        
[Description(@"Fraction of time in defrost mode only applicable if Timed defrost control is specified")]
[JsonProperty(@"Fraction of time in defrost mode only applicable if Timed defrost control is specified")]
public System.Single HeatPumpDefrostTimePeriodFraction { get; set; } = 0.058333;
        
[JsonProperty(@"")]
public YesNoDefault SupplementalHeatingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Electric");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String SupplementalHeatingCoilAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SupplementalHeatingCoilCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Supplemental heater will not operate when outdoor temperature exceeds this value.")]
[JsonProperty(@"Supplemental heater will not operate when outdoor temperature exceeds this value.")]
public System.Single SupplementalHeatingCoilMaximumOutdoorDryBulbTemperature { get; set; } = 21;
        
[Description(@"Applies only if Supplemental Heating Coil Type is Gas")]
[JsonProperty(@"Applies only if Supplemental Heating Coil Type is Gas")]
public System.Single SupplementalGasHeatingCoilEfficiency { get; set; } = 0.8;
        
[Description(@"Applies only if Supplemental Heating Coil Type is Gas")]
[JsonProperty(@"Applies only if Supplemental Heating Coil Type is Gas")]
public System.Single SupplementalGasHeatingCoilParasiticElectricLoad { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String MaximumOutdoorAirFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String MinimumOutdoorAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Schedule values multiply the minimum outdoor air flow rate If blank, multiplier is always one")]
[JsonProperty(@"Schedule values multiply the minimum outdoor air flow rate If blank, multiplier is always one")]
public System.String MinimumOutdoorAirScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault EconomizerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoEconomizer");
        
[JsonProperty(@"")]
public YesNoDefault EconomizerLockout { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoLockout");
        
[Description(@"Enter the maximum outdoor dry-bulb temperature limit for FixedDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the maximum outdoor dry-bulb temperature limit for FixedDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
public System.Single EconomizerMaximumLimitDryBulbTemperature { get; set; } = ;
        
[Description(@"Enter the maximum outdoor enthalpy limit for FixedEnthalpy economizer control type. No input or blank input means this limit is not operative Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the maximum outdoor enthalpy limit for FixedEnthalpy economizer control type. No input or blank input means this limit is not operative Limit is applied regardless of economizer control type.")]
public System.Single EconomizerMaximumLimitEnthalpy { get; set; } = ;
        
[Description(@"Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
public System.Single EconomizerMaximumLimitDewpointTemperature { get; set; } = ;
        
[Description(@"Enter the minimum outdoor dry-bulb temperature limit for economizer control. No input or blank input means this limit is not operative Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the minimum outdoor dry-bulb temperature limit for economizer control. No input or blank input means this limit is not operative Limit is applied regardless of economizer control type.")]
public System.Single EconomizerMinimumLimitDryBulbTemperature { get; set; } = ;
        
[Description(@"Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
[JsonProperty(@"Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
public System.String SupplyPlenumName { get; set; } = "";
        
[Description(@"Plenum zone name. Return plenum serves all zones on this system. Blank if none.")]
[JsonProperty(@"Plenum zone name. Return plenum serves all zones on this system. Blank if none.")]
public System.String ReturnPlenumName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault NightCycleControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "StayOff");
        
[Description(@"Applicable only if Night Cycle Control is Cycle On Control Zone.")]
[JsonProperty(@"Applicable only if Night Cycle Control is Cycle On Control Zone.")]
public System.String NightCycleControlZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatRecoveryType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[JsonProperty(@"")]
public System.Single SensibleHeatRecoveryEffectiveness { get; set; } = 0.7;
        
[Description(@"Applicable only if Heat Recovery Type is Enthalpy.")]
[JsonProperty(@"Applicable only if Heat Recovery Type is Enthalpy.")]
public System.Single LatentHeatRecoveryEffectiveness { get; set; } = 0.65;
        
[JsonProperty(@"")]
public YesNoDefault HumidifierType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always available")]
[JsonProperty(@"If blank, always available")]
public System.String HumidifierAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Moisture output rate at full rated power input. The humidifier does not currently autosize, so the default is very large to allow for adequate capacity.")]
[JsonProperty(@"Moisture output rate at full rated power input. The humidifier does not currently autosize, so the default is very large to allow for adequate capacity.")]
public System.Single HumidifierRatedCapacity { get; set; } = 1E-06;
        
[Description(@"Electric power input at rated capacity moisture output. Power consumption is proportional to moisture output with no part-load penalty.")]
[JsonProperty(@"Electric power input at rated capacity moisture output. Power consumption is proportional to moisture output with no part-load penalty.")]
public System.String HumidifierRatedElectricPower { get; set; } = (System.String)Autosize;
        
[Description(@"Zone name where humidistat is located")]
[JsonProperty(@"Zone name where humidistat is located")]
public System.String HumidifierControlZoneName { get; set; } = "";
        
[Description(@"Zone relative humidity setpoint in percent (0 to 100)")]
[JsonProperty(@"Zone relative humidity setpoint in percent (0 to 100)")]
public System.Single HumidifierSetpoint { get; set; } = 30;
        
[Description(@"Specifies if the system has a return fan.")]
[JsonProperty(@"Specifies if the system has a return fan.")]
public YesNoDefault ReturnFan { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public System.Single ReturnFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single ReturnFanDeltaPressure { get; set; } = 500;
        
[JsonProperty(@"")]
public System.Single ReturnFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single ReturnFanMotorInAirStreamFraction { get; set; } = 1;
    }
    
    public enum SupplyFanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum CoolingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SingleSpeedDX")]
        SingleSpeedDX = 1,
    }
    
    public enum HeatPumpHeatingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SingleSpeedDXHeatPump")]
        SingleSpeedDXHeatPump = 1,
    }
    
    public enum HeatPumpDefrostStrategyType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Resistive")]
        Resistive = 1,
        
        [JsonProperty("ReverseCycle")]
        ReverseCycle = 2,
    }
    
    public enum HeatPumpDefrostControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("OnDemand")]
        OnDemand = 1,
        
        [JsonProperty("Timed")]
        Timed = 2,
    }
    
    public enum SupplementalHeatingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
    }
    
    public enum EconomizerTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DifferentialDryBulb")]
        DifferentialDryBulb = 1,
        
        [JsonProperty("DifferentialDryBulbAndEnthalpy")]
        DifferentialDryBulbAndEnthalpy = 2,
        
        [JsonProperty("DifferentialEnthalpy")]
        DifferentialEnthalpy = 3,
        
        [JsonProperty("ElectronicEnthalpy")]
        ElectronicEnthalpy = 4,
        
        [JsonProperty("FixedDewPointAndDryBulb")]
        FixedDewPointAndDryBulb = 5,
        
        [JsonProperty("FixedDryBulb")]
        FixedDryBulb = 6,
        
        [JsonProperty("FixedEnthalpy")]
        FixedEnthalpy = 7,
        
        [JsonProperty("NoEconomizer")]
        NoEconomizer = 8,
    }
    
    public enum EconomizerLockoutType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LockoutWithCompressor")]
        LockoutWithCompressor = 1,
        
        [JsonProperty("LockoutWithHeating")]
        LockoutWithHeating = 2,
        
        [JsonProperty("NoLockout")]
        NoLockout = 3,
    }
    
    public enum NightCycleControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CycleOnAny")]
        CycleOnAny = 1,
        
        [JsonProperty("CycleOnControlZone")]
        CycleOnControlZone = 2,
        
        [JsonProperty("StayOff")]
        StayOff = 3,
    }
    
    public enum HeatRecoveryTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Sensible")]
        Sensible = 3,
    }
    
    public enum HumidifierTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ElectricSteam")]
        ElectricSteam = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    [Description("Unitary HVAC system with optional cooling and heating. Supports DX and chilled wa" +
        "ter, cooling, gas, electric, and hot water heating, air-to-air and water-to-air " +
        "heat pumps.")]
    [JsonObject("HVACTemplate:System:UnitarySystem")]
    public class HVACTemplate_System_UnitarySystem
    {
        
[Description(@"If blank, always available. Also see Supply Fan Operating Mode Schedule Name field.")]
[JsonProperty(@"If blank, always available. Also see Supply Fan Operating Mode Schedule Name field.")]
public System.String SystemAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Load control requires a Controlling Zone name. SetPoint control requires set points at coil outlet nodes. The user must add appropriate SetpointManager objects to the idf file.")]
[JsonProperty(@"Load control requires a Controlling Zone name. SetPoint control requires set points at coil outlet nodes. The user must add appropriate SetpointManager objects to the idf file.")]
public YesNoDefault ControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Load");
        
[Description(@"This field is required if Control Type is Load.")]
[JsonProperty(@"This field is required if Control Type is Load.")]
public System.String ControlZoneOrThermostatLocationName { get; set; } = "";
        
[Description(@"Supply air flow rate during cooling operation This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty(@"Supply air flow rate during cooling operation This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
public System.String CoolingSupplyAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Supply air flow rate during heating operation This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty(@"Supply air flow rate during heating operation This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
public System.String HeatingSupplyAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Supply air flow rate when no cooling or heating is needed Only used when heat pump fan operating mode is Continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used. This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty(@"Supply air flow rate when no cooling or heating is needed Only used when heat pump fan operating mode is Continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used. This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
public System.String NoLoadSupplyAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Refers to a schedule to specify unitary supply fan operating mode. Schedule values of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous fan (on) If this field is left blank, a schedule of always zero (cycling fan) will be used.")]
[JsonProperty(@"Refers to a schedule to specify unitary supply fan operating mode. Schedule values of 0 indicate cycling fan (auto) Schedule values of 1 indicate continuous fan (on) If this field is left blank, a schedule of always zero (cycling fan) will be used.")]
public System.String SupplyFanOperatingModeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault SupplyFanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BlowThrough");
        
[JsonProperty(@"")]
public System.Single SupplyFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single SupplyFanDeltaPressure { get; set; } = 600;
        
[JsonProperty(@"")]
public System.Single SupplyFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single SupplyFanMotorInAirStreamFraction { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SingleSpeedDX");
        
[Description(@"Used only for Cooling Coil Type = MultiSpeedDX.")]
[JsonProperty(@"Used only for Cooling Coil Type = MultiSpeedDX.")]
public System.Single NumberOfSpeedsForCooling { get; set; } = 1;
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String CoolingCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Used for sizing.")]
[JsonProperty(@"Used for sizing.")]
public System.Single CoolingDesignSupplyAirTemperature { get; set; } = 12.8;
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb")]
public System.String DxCoolingCoilGrossRatedTotalCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Rated sensible heat ratio (gross sensible capacity/gross total capacity) Sensible and total capacities do not include effect of supply fan heat")]
[JsonProperty(@"Rated sensible heat ratio (gross sensible capacity/gross total capacity) Sensible and total capacities do not include effect of supply fan heat")]
public System.String DxCoolingCoilGrossRatedSensibleHeatRatio { get; set; } = (System.String)Autosize;
        
[Description(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electric power input")]
[JsonProperty(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electric power input")]
public System.Single DxCoolingCoilGrossRatedCop { get; set; } = 3;
        
[JsonProperty(@"")]
public YesNoDefault HeatingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Gas");
        
[Description(@"Used only for Heating Coil Type = MultiSpeedDXHeatPumpAirSource), MultiStageElectric, or MultiStageGas.")]
[JsonProperty(@"Used only for Heating Coil Type = MultiSpeedDXHeatPumpAirSource), MultiStageElectric, or MultiStageGas.")]
public System.Single NumberOfSpeedsOrStagesForHeating { get; set; } = 1;
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String HeatingCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Used for sizing.")]
[JsonProperty(@"Used for sizing.")]
public System.Single HeatingDesignSupplyAirTemperature { get; set; } = 50;
        
[Description(@"Rated heating capacity excluding the effect of supply air fan heat Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
[JsonProperty(@"Rated heating capacity excluding the effect of supply air fan heat Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C")]
public System.String HeatingCoilGrossRatedCapacity { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single GasHeatingCoilEfficiency { get; set; } = 0.8;
        
[JsonProperty(@"")]
public System.Single GasHeatingCoilParasiticElectricLoad { get; set; } = 0;
        
[Description(@"Heating Coil Rated Capacity divided by power input to the compressor and outdoor fan, does not include supply air fan heat or supply air fan electrical energy. Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C Applies only to DX coils")]
[JsonProperty(@"Heating Coil Rated Capacity divided by power input to the compressor and outdoor fan, does not include supply air fan heat or supply air fan electrical energy. Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C Applies only to DX coils")]
public System.Single HeatPumpHeatingCoilGrossRatedCop { get; set; } = 2.75;
        
[JsonProperty(@"")]
public System.Single HeatPumpHeatingMinimumOutdoorDryBulbTemperature { get; set; } = -8;
        
[JsonProperty(@"")]
public System.Single HeatPumpDefrostMaximumOutdoorDryBulbTemperature { get; set; } = 5;
        
[JsonProperty(@"")]
public YesNoDefault HeatPumpDefrostStrategy { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ReverseCycle");
        
[JsonProperty(@"")]
public YesNoDefault HeatPumpDefrostControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Timed");
        
[Description(@"Fraction of time in defrost mode only applicable if Timed defrost control is specified")]
[JsonProperty(@"Fraction of time in defrost mode only applicable if Timed defrost control is specified")]
public System.Single HeatPumpDefrostTimePeriodFraction { get; set; } = 0.058333;
        
[JsonProperty(@"")]
public YesNoDefault SupplementalHeatingOrReheatCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String SupplementalHeatingOrReheatCoilAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SupplementalHeatingOrReheatCoilCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Supplemental heater will not operate when outdoor temperature exceeds this value.")]
[JsonProperty(@"Supplemental heater will not operate when outdoor temperature exceeds this value.")]
public System.Single SupplementalHeatingOrReheatCoilMaximumOutdoorDryBulbTemperature { get; set; } = 21;
        
[Description(@"Applies only if Supplemental Heating Coil Type is Gas")]
[JsonProperty(@"Applies only if Supplemental Heating Coil Type is Gas")]
public System.Single SupplementalGasHeatingOrReheatCoilEfficiency { get; set; } = 0.8;
        
[Description(@"Applies only if Supplemental Heating Coil Type is Gas")]
[JsonProperty(@"Applies only if Supplemental Heating Coil Type is Gas")]
public System.Single SupplementalGasHeatingOrReheatCoilParasiticElectricLoad { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String MaximumOutdoorAirFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String MinimumOutdoorAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Schedule values multiply the minimum outdoor air flow rate If blank, multiplier is always one")]
[JsonProperty(@"Schedule values multiply the minimum outdoor air flow rate If blank, multiplier is always one")]
public System.String MinimumOutdoorAirScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault EconomizerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoEconomizer");
        
[JsonProperty(@"")]
public YesNoDefault EconomizerLockout { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoLockout");
        
[Description(@"Enter the maximum outdoor dry-bulb temperature limit for FixedDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the maximum outdoor dry-bulb temperature limit for FixedDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
public System.Single EconomizerMaximumLimitDryBulbTemperature { get; set; } = ;
        
[Description(@"Enter the maximum outdoor enthalpy limit for FixedEnthalpy economizer control type. No input or blank input means this limit is not operative Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the maximum outdoor enthalpy limit for FixedEnthalpy economizer control type. No input or blank input means this limit is not operative Limit is applied regardless of economizer control type.")]
public System.Single EconomizerMaximumLimitEnthalpy { get; set; } = ;
        
[Description(@"Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
public System.Single EconomizerMaximumLimitDewpointTemperature { get; set; } = ;
        
[Description(@"Enter the minimum outdoor dry-bulb temperature limit for economizer control. No input or blank input means this limit is not operative Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the minimum outdoor dry-bulb temperature limit for economizer control. No input or blank input means this limit is not operative Limit is applied regardless of economizer control type.")]
public System.Single EconomizerMinimumLimitDryBulbTemperature { get; set; } = ;
        
[Description(@"Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
[JsonProperty(@"Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
public System.String SupplyPlenumName { get; set; } = "";
        
[Description(@"Plenum zone name. Return plenum serves all zones on this system. Blank if none.")]
[JsonProperty(@"Plenum zone name. Return plenum serves all zones on this system. Blank if none.")]
public System.String ReturnPlenumName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatRecoveryType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[JsonProperty(@"")]
public System.Single SensibleHeatRecoveryEffectiveness { get; set; } = 0.7;
        
[Description(@"Applicable only if Heat Recovery Type is Enthalpy.")]
[JsonProperty(@"Applicable only if Heat Recovery Type is Enthalpy.")]
public System.Single LatentHeatRecoveryEffectiveness { get; set; } = 0.65;
        
[JsonProperty(@"")]
public YesNoDefault HeatRecoveryHeatExchangerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Plate");
        
[JsonProperty(@"")]
public YesNoDefault HeatRecoveryFrostControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint, reheat with reheat coil If no reheat coil specified, cold supply temps may occur. Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only for Cooling Coil Type = TwoStageHumidityControlDX or HeatExchangerAssistedDX")]
[JsonProperty(@"None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint, reheat with reheat coil If no reheat coil specified, cold supply temps may occur. Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only for Cooling Coil Type = TwoStageHumidityControlDX or HeatExchangerAssistedDX")]
public YesNoDefault DehumidificationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Zone relative humidity setpoint in percent (0 to 100) Ignored if Dehumidification Relative Humidity Setpoint Schedule specified below")]
[JsonProperty(@"Zone relative humidity setpoint in percent (0 to 100) Ignored if Dehumidification Relative Humidity Setpoint Schedule specified below")]
public System.Single DehumidificationRelativeHumiditySetpoint { get; set; } = 60;
        
[Description(@"Leave blank to use constant setpoint specified in Dehumidification Relative Humidity Setpoint above. Schedule values must be in percent relative humidity (0 to 100).")]
[JsonProperty(@"Leave blank to use constant setpoint specified in Dehumidification Relative Humidity Setpoint above. Schedule values must be in percent relative humidity (0 to 100).")]
public System.String DehumidificationRelativeHumiditySetpointScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HumidifierType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always available")]
[JsonProperty(@"If blank, always available")]
public System.String HumidifierAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Moisture output rate at full rated power input. The humidifier does not currently autosize, so the default is very large to allow for adequate capacity.")]
[JsonProperty(@"Moisture output rate at full rated power input. The humidifier does not currently autosize, so the default is very large to allow for adequate capacity.")]
public System.Single HumidifierRatedCapacity { get; set; } = 1E-06;
        
[Description(@"Electric power input at rated capacity moisture output. Power consumption is proportional to moisture output with no part-load penalty.")]
[JsonProperty(@"Electric power input at rated capacity moisture output. Power consumption is proportional to moisture output with no part-load penalty.")]
public System.String HumidifierRatedElectricPower { get; set; } = (System.String)Autosize;
        
[Description(@"Zone name where humidistat is located")]
[JsonProperty(@"Zone name where humidistat is located")]
public System.String HumidifierControlZoneName { get; set; } = "";
        
[Description(@"Zone relative humidity setpoint in percent (0 to 100). Ignored if Humidifier Relative Humidity Setpoint Schedule specified below")]
[JsonProperty(@"Zone relative humidity setpoint in percent (0 to 100). Ignored if Humidifier Relative Humidity Setpoint Schedule specified below")]
public System.Single HumidifierRelativeHumiditySetpoint { get; set; } = 30;
        
[Description(@"Leave blank to use constant setpoint specified in Humidifier Relative Humidity Setpoint above. Schedule values must be in percent relative humidity (0 to 100).")]
[JsonProperty(@"Leave blank to use constant setpoint specified in Humidifier Relative Humidity Setpoint above. Schedule values must be in percent relative humidity (0 to 100).")]
public System.String HumidifierRelativeHumiditySetpointScheduleName { get; set; } = "";
        
[Description(@"Select whether autosized system supply flow rate is the sum of Coincident or NonCoincident zone air flow rates.")]
[JsonProperty(@"Select whether autosized system supply flow rate is the sum of Coincident or NonCoincident zone air flow rates.")]
public YesNoDefault SizingOption { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NonCoincident");
        
[Description(@"Specifies if the system has a return fan.")]
[JsonProperty(@"Specifies if the system has a return fan.")]
public YesNoDefault ReturnFan { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public System.Single ReturnFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single ReturnFanDeltaPressure { get; set; } = 300;
        
[JsonProperty(@"")]
public System.Single ReturnFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single ReturnFanMotorInAirStreamFraction { get; set; } = 1;
    }
    
    public enum ControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Load")]
        Load = 1,
        
        [JsonProperty("SetPoint")]
        SetPoint = 2,
    }
    
    public enum SupplyFanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum CoolingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ChilledWater")]
        ChilledWater = 1,
        
        [JsonProperty("ChilledWaterDetailedFlatModel")]
        ChilledWaterDetailedFlatModel = 2,
        
        [JsonProperty("HeatExchangerAssistedChilledWater")]
        HeatExchangerAssistedChilledWater = 3,
        
        [JsonProperty("HeatExchangerAssistedDX")]
        HeatExchangerAssistedDX = 4,
        
        [JsonProperty("MultiSpeedDX")]
        MultiSpeedDX = 5,
        
        [JsonProperty("None")]
        None = 6,
        
        [JsonProperty("SingleSpeedDX")]
        SingleSpeedDX = 7,
        
        [JsonProperty("SingleSpeedDXWaterCooled")]
        SingleSpeedDXWaterCooled = 8,
        
        [JsonProperty("TwoSpeedDX")]
        TwoSpeedDX = 9,
        
        [JsonProperty("TwoStageDX")]
        TwoStageDX = 10,
        
        [JsonProperty("TwoStageHumidityControlDX")]
        TwoStageHumidityControlDX = 11,
    }
    
    public enum HeatingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("MultiSpeedDXHeatPumpAirSource")]
        MultiSpeedDXHeatPumpAirSource = 4,
        
        [JsonProperty("MultiStageElectric")]
        MultiStageElectric = 5,
        
        [JsonProperty("MultiStageGas")]
        MultiStageGas = 6,
        
        [JsonProperty("None")]
        None = 7,
        
        [JsonProperty("SingleSpeedDXHeatPumpAirSource")]
        SingleSpeedDXHeatPumpAirSource = 8,
        
        [JsonProperty("SingleSpeedDXHeatPumpWaterSource")]
        SingleSpeedDXHeatPumpWaterSource = 9,
    }
    
    public enum HeatPumpDefrostStrategyType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Resistive")]
        Resistive = 1,
        
        [JsonProperty("ReverseCycle")]
        ReverseCycle = 2,
    }
    
    public enum HeatPumpDefrostControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("OnDemand")]
        OnDemand = 1,
        
        [JsonProperty("Timed")]
        Timed = 2,
    }
    
    public enum SupplementalHeatingOrReheatCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DesuperHeater")]
        DesuperHeater = 1,
        
        [JsonProperty("Electric")]
        Electric = 2,
        
        [JsonProperty("Gas")]
        Gas = 3,
        
        [JsonProperty("HotWater")]
        HotWater = 4,
        
        [JsonProperty("None")]
        None = 5,
    }
    
    public enum EconomizerTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DifferentialDryBulb")]
        DifferentialDryBulb = 1,
        
        [JsonProperty("DifferentialDryBulbAndEnthalpy")]
        DifferentialDryBulbAndEnthalpy = 2,
        
        [JsonProperty("DifferentialEnthalpy")]
        DifferentialEnthalpy = 3,
        
        [JsonProperty("ElectronicEnthalpy")]
        ElectronicEnthalpy = 4,
        
        [JsonProperty("FixedDewPointAndDryBulb")]
        FixedDewPointAndDryBulb = 5,
        
        [JsonProperty("FixedDryBulb")]
        FixedDryBulb = 6,
        
        [JsonProperty("FixedEnthalpy")]
        FixedEnthalpy = 7,
        
        [JsonProperty("NoEconomizer")]
        NoEconomizer = 8,
    }
    
    public enum EconomizerLockoutType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LockoutWithCompressor")]
        LockoutWithCompressor = 1,
        
        [JsonProperty("LockoutWithHeating")]
        LockoutWithHeating = 2,
        
        [JsonProperty("NoLockout")]
        NoLockout = 3,
    }
    
    public enum HeatRecoveryTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Sensible")]
        Sensible = 3,
    }
    
    public enum HeatRecoveryHeatExchangerTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Plate")]
        Plate = 1,
        
        [JsonProperty("Rotary")]
        Rotary = 2,
    }
    
    public enum HeatRecoveryFrostControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ExhaustAirRecirculation")]
        ExhaustAirRecirculation = 1,
        
        [JsonProperty("ExhaustOnly")]
        ExhaustOnly = 2,
        
        [JsonProperty("MinimumExhaustTemperature")]
        MinimumExhaustTemperature = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum DehumidificationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("Multimode")]
        Multimode = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum HumidifierTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ElectricSteam")]
        ElectricSteam = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    public enum SizingOptionType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Coincident")]
        Coincident = 1,
        
        [JsonProperty("NonCoincident")]
        NonCoincident = 2,
    }
    
    [Description("Variable Air Volume (VAV) air loop with optional heating coil and optional prehea" +
        "t.")]
    [JsonObject("HVACTemplate:System:VAV")]
    public class HVACTemplate_System_VAV
    {
        
[Description(@"If blank, always on; VAV System always on. Schedule is used in availability manager and fan scheduling. Also see "Night Cycle Control" field.")]
[JsonProperty(@"If blank, always on; VAV System always on. Schedule is used in availability manager and fan scheduling. Also see "Night Cycle Control" field.")]
public System.String SystemAvailabilityScheduleName { get; set; } = "";
        
[Description(@"This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty(@"This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
public System.String SupplyFanMaximumFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"This field is only used to set a minimum part load on the VAV fan power curve. Autosize or zero is recommended.")]
[JsonProperty(@"This field is only used to set a minimum part load on the VAV fan power curve. Autosize or zero is recommended.")]
public System.String SupplyFanMinimumFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single SupplyFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single SupplyFanDeltaPressure { get; set; } = 1000;
        
[JsonProperty(@"")]
public System.Single SupplyFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single SupplyFanMotorInAirStreamFraction { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ChilledWater");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String CoolingCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Leave blank if constant setpoint")]
[JsonProperty(@"Leave blank if constant setpoint")]
public System.String CoolingCoilSetpointScheduleName { get; set; } = "";
        
[Description(@"Used for sizing and as constant setpoint if no Cooling Coil Setpoint Schedule Name is specified.")]
[JsonProperty(@"Used for sizing and as constant setpoint if no Cooling Coil Setpoint Schedule Name is specified.")]
public System.Single CoolingCoilDesignSetpoint { get; set; } = 12.8;
        
[JsonProperty(@"")]
public YesNoDefault HeatingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String HeatingCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Leave blank if constant setpoint")]
[JsonProperty(@"Leave blank if constant setpoint")]
public System.String HeatingCoilSetpointScheduleName { get; set; } = "";
        
[Description(@"Used for sizing and as constant setpoint if no Heating Coil Setpoint Schedule Name is specified.")]
[JsonProperty(@"Used for sizing and as constant setpoint if no Heating Coil Setpoint Schedule Name is specified.")]
public System.Single HeatingCoilDesignSetpoint { get; set; } = 10;
        
[JsonProperty(@"")]
public System.Single GasHeatingCoilEfficiency { get; set; } = 0.8;
        
[JsonProperty(@"")]
public System.Single GasHeatingCoilParasiticElectricLoad { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault PreheatCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String PreheatCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Leave blank if constant setpoint")]
[JsonProperty(@"Leave blank if constant setpoint")]
public System.String PreheatCoilSetpointScheduleName { get; set; } = "";
        
[Description(@"Used for sizing and as constant setpoint if no Preheat Coil Setpoint Schedule Name specified.")]
[JsonProperty(@"Used for sizing and as constant setpoint if no Preheat Coil Setpoint Schedule Name specified.")]
public System.Single PreheatCoilDesignSetpoint { get; set; } = 7.2;
        
[JsonProperty(@"")]
public System.Single GasPreheatCoilEfficiency { get; set; } = 0.8;
        
[JsonProperty(@"")]
public System.Single GasPreheatCoilParasiticElectricLoad { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String MaximumOutdoorAirFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String MinimumOutdoorAirFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public YesNoDefault MinimumOutdoorAirControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ProportionalMinimum");
        
[Description(@"Schedule values multiply the Minimum Outdoor Air Flow Rate If blank, multiplier is always one")]
[JsonProperty(@"Schedule values multiply the Minimum Outdoor Air Flow Rate If blank, multiplier is always one")]
public System.String MinimumOutdoorAirScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault EconomizerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoEconomizer");
        
[JsonProperty(@"")]
public YesNoDefault EconomizerLockout { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoLockout");
        
[Description(@"Outdoor temperature above which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
[JsonProperty(@"Outdoor temperature above which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
public System.Single EconomizerUpperTemperatureLimit { get; set; } = ;
        
[Description(@"Outdoor temperature below which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
[JsonProperty(@"Outdoor temperature below which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
public System.Single EconomizerLowerTemperatureLimit { get; set; } = ;
        
[Description(@"Outdoor enthalpy above which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
[JsonProperty(@"Outdoor enthalpy above which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
public System.Single EconomizerUpperEnthalpyLimit { get; set; } = ;
        
[Description(@"Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
public System.Single EconomizerMaximumLimitDewpointTemperature { get; set; } = ;
        
[Description(@"Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
[JsonProperty(@"Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
public System.String SupplyPlenumName { get; set; } = "";
        
[Description(@"Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
[JsonProperty(@"Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
public System.String ReturnPlenumName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault SupplyFanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DrawThrough");
        
[Description(@"This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Values table.")]
[JsonProperty(@"This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Values table.")]
public YesNoDefault SupplyFanPartLoadPowerCoefficients { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "InletVaneDampers");
        
[JsonProperty(@"")]
public YesNoDefault NightCycleControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "StayOff");
        
[Description(@"Applicable only if Night Cycle Control is Cycle On Control Zone.")]
[JsonProperty(@"Applicable only if Night Cycle Control is Cycle On Control Zone.")]
public System.String NightCycleControlZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatRecoveryType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[JsonProperty(@"")]
public System.Single SensibleHeatRecoveryEffectiveness { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single LatentHeatRecoveryEffectiveness { get; set; } = 0.65;
        
[Description(@"Overrides Cooling Coil Setpoint Schedule Name None = no reset, control to Cooling Coil Design Setpoint Temperature or Schedule Warmest = reset as warm as possible yet meet all zone cooling loads at max supply air flow rate OutdoorAirTemperatureReset = reset based on outdoor air temperature (18.0C at 15.6C ODB, to the Cooling Design Setpoint at 26.7C) WarmestTemperatureFirst = reset as warm as possible yet meet all zone cooling loads at min supply air flow rate")]
[JsonProperty(@"Overrides Cooling Coil Setpoint Schedule Name None = no reset, control to Cooling Coil Design Setpoint Temperature or Schedule Warmest = reset as warm as possible yet meet all zone cooling loads at max supply air flow rate OutdoorAirTemperatureReset = reset based on outdoor air temperature (18.0C at 15.6C ODB, to the Cooling Design Setpoint at 26.7C) WarmestTemperatureFirst = reset as warm as possible yet meet all zone cooling loads at min supply air flow rate")]
public YesNoDefault CoolingCoilSetpointResetType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Overrides Heating Coil Setpoint Schedule Name None = no reset, control to Heating Coil Design Setpoint Temperature or Schedule OutdoorAirTemperatureReset = reset based on outdoor air temperature (Heating Design Setpoint at -6.7C ODB to Heating Design Setpoint minus 5.2C at 10C ODB) min supply air flow rate")]
[JsonProperty(@"Overrides Heating Coil Setpoint Schedule Name None = no reset, control to Heating Coil Design Setpoint Temperature or Schedule OutdoorAirTemperatureReset = reset based on outdoor air temperature (Heating Design Setpoint at -6.7C ODB to Heating Design Setpoint minus 5.2C at 10C ODB) min supply air flow rate")]
public YesNoDefault HeatingCoilSetpointResetType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint as required to meet the humidity setpoint.")]
[JsonProperty(@"None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint as required to meet the humidity setpoint.")]
public YesNoDefault DehumidificationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Zone name where humidistat is located")]
[JsonProperty(@"Zone name where humidistat is located")]
public System.String DehumidificationControlZoneName { get; set; } = "";
        
[Description(@"Zone relative humidity setpoint in percent (0 to 100)")]
[JsonProperty(@"Zone relative humidity setpoint in percent (0 to 100)")]
public System.Single DehumidificationSetpoint { get; set; } = 60;
        
[JsonProperty(@"")]
public YesNoDefault HumidifierType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always available")]
[JsonProperty(@"If blank, always available")]
public System.String HumidifierAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Moisture output rate at full rated power input. The humidifier does not currently autosize, so the default is very large to allow for adequate capacity.")]
[JsonProperty(@"Moisture output rate at full rated power input. The humidifier does not currently autosize, so the default is very large to allow for adequate capacity.")]
public System.Single HumidifierRatedCapacity { get; set; } = 1E-06;
        
[Description(@"Electric power input at rated capacity moisture output. Power consumption is proportional to moisture output with no part-load penalty.")]
[JsonProperty(@"Electric power input at rated capacity moisture output. Power consumption is proportional to moisture output with no part-load penalty.")]
public System.String HumidifierRatedElectricPower { get; set; } = (System.String)Autosize;
        
[Description(@"Zone name where humidistat is located")]
[JsonProperty(@"Zone name where humidistat is located")]
public System.String HumidifierControlZoneName { get; set; } = "";
        
[Description(@"Zone relative humidity setpoint in percent (0 to 100)")]
[JsonProperty(@"Zone relative humidity setpoint in percent (0 to 100)")]
public System.Single HumidifierSetpoint { get; set; } = 30;
        
[Description(@"Select whether autosized system supply flow rate is the sum of Coincident or NonCoincident zone air flow rates.")]
[JsonProperty(@"Select whether autosized system supply flow rate is the sum of Coincident or NonCoincident zone air flow rates.")]
public YesNoDefault SizingOption { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NonCoincident");
        
[Description(@"Specifies if the system has a return fan.")]
[JsonProperty(@"Specifies if the system has a return fan.")]
public YesNoDefault ReturnFan { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public System.Single ReturnFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single ReturnFanDeltaPressure { get; set; } = 500;
        
[JsonProperty(@"")]
public System.Single ReturnFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single ReturnFanMotorInAirStreamFraction { get; set; } = 1;
        
[Description(@"This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Values table.")]
[JsonProperty(@"This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Values table.")]
public YesNoDefault ReturnFanPartLoadPowerCoefficients { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "InletVaneDampers");
    }
    
    public enum CoolingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ChilledWater")]
        ChilledWater = 1,
        
        [JsonProperty("ChilledWaterDetailedFlatModel")]
        ChilledWaterDetailedFlatModel = 2,
    }
    
    public enum HeatingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum PreheatCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum MinimumOutdoorAirControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FixedMinimum")]
        FixedMinimum = 1,
        
        [JsonProperty("ProportionalMinimum")]
        ProportionalMinimum = 2,
    }
    
    public enum EconomizerTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DifferentialDryBulb")]
        DifferentialDryBulb = 1,
        
        [JsonProperty("DifferentialDryBulbAndEnthalpy")]
        DifferentialDryBulbAndEnthalpy = 2,
        
        [JsonProperty("DifferentialEnthalpy")]
        DifferentialEnthalpy = 3,
        
        [JsonProperty("ElectronicEnthalpy")]
        ElectronicEnthalpy = 4,
        
        [JsonProperty("FixedDewPointAndDryBulb")]
        FixedDewPointAndDryBulb = 5,
        
        [JsonProperty("FixedDryBulb")]
        FixedDryBulb = 6,
        
        [JsonProperty("FixedEnthalpy")]
        FixedEnthalpy = 7,
        
        [JsonProperty("NoEconomizer")]
        NoEconomizer = 8,
    }
    
    public enum EconomizerLockoutType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("NoLockout")]
        NoLockout = 1,
    }
    
    public enum SupplyFanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum SupplyFanPartLoadPowerCoefficientsType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAE90.1-2004AppendixG")]
        ASHRAEAppendixG = 1,
        
        [JsonProperty("InletVaneDampers")]
        InletVaneDampers = 2,
        
        [JsonProperty("OutletDampers")]
        OutletDampers = 3,
        
        [JsonProperty("VariableSpeedMotor")]
        VariableSpeedMotor = 4,
        
        [JsonProperty("VariableSpeedMotorPressureReset")]
        VariableSpeedMotorPressureReset = 5,
    }
    
    public enum NightCycleControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CycleOnAny")]
        CycleOnAny = 1,
        
        [JsonProperty("CycleOnAnyZoneFansOnly")]
        CycleOnAnyZoneFansOnly = 2,
        
        [JsonProperty("CycleOnControlZone")]
        CycleOnControlZone = 3,
        
        [JsonProperty("StayOff")]
        StayOff = 4,
    }
    
    public enum HeatRecoveryTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Sensible")]
        Sensible = 3,
    }
    
    public enum CoolingCoilSetpointResetTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 2,
        
        [JsonProperty("Warmest")]
        Warmest = 3,
        
        [JsonProperty("WarmestTemperatureFirst")]
        WarmestTemperatureFirst = 4,
    }
    
    public enum HeatingCoilSetpointResetTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 2,
    }
    
    public enum DehumidificationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    public enum HumidifierTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ElectricSteam")]
        ElectricSteam = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    public enum SizingOptionType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Coincident")]
        Coincident = 1,
        
        [JsonProperty("NonCoincident")]
        NonCoincident = 2,
    }
    
    public enum ReturnFanPartLoadPowerCoefficientsType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAE90.1-2004AppendixG")]
        ASHRAEAppendixG = 1,
        
        [JsonProperty("InletVaneDampers")]
        InletVaneDampers = 2,
        
        [JsonProperty("OutletDampers")]
        OutletDampers = 3,
        
        [JsonProperty("VariableSpeedMotor")]
        VariableSpeedMotor = 4,
        
        [JsonProperty("VariableSpeedMotorPressureReset")]
        VariableSpeedMotorPressureReset = 5,
    }
    
    [Description("Packaged Variable Air Volume (PVAV) air loop with optional heating coil and optio" +
        "nal preheat.")]
    [JsonObject("HVACTemplate:System:PackagedVAV")]
    public class HVACTemplate_System_PackagedVAV
    {
        
[Description(@"If blank, always on; PVAV System always on. Schedule is used in availability manager and fan scheduling. Also see "Night Cycle Control" field.")]
[JsonProperty(@"If blank, always on; PVAV System always on. Schedule is used in availability manager and fan scheduling. Also see "Night Cycle Control" field.")]
public System.String SystemAvailabilityScheduleName { get; set; } = "";
        
[Description(@"This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty(@"This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
public System.String SupplyFanMaximumFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"This field is only used to set a minimum part load on the VAV fan power curve. Autosize or zero is recommended.")]
[JsonProperty(@"This field is only used to set a minimum part load on the VAV fan power curve. Autosize or zero is recommended.")]
public System.String SupplyFanMinimumFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public YesNoDefault SupplyFanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DrawThrough");
        
[JsonProperty(@"")]
public System.Single SupplyFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single SupplyFanDeltaPressure { get; set; } = 1000;
        
[JsonProperty(@"")]
public System.Single SupplyFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single SupplyFanMotorInAirStreamFraction { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "TwoSpeedDX");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String CoolingCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Leave blank if constant setpoint")]
[JsonProperty(@"Leave blank if constant setpoint")]
public System.String CoolingCoilSetpointScheduleName { get; set; } = "";
        
[Description(@"Used for sizing and as constant setpoint if no Cooling Coil Setpoint Schedule Name is specified.")]
[JsonProperty(@"Used for sizing and as constant setpoint if no Cooling Coil Setpoint Schedule Name is specified.")]
public System.Single CoolingCoilDesignSetpoint { get; set; } = 12.8;
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.String CoolingCoilGrossRatedTotalCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Gross SHR")]
[JsonProperty(@"Gross SHR")]
public System.String CoolingCoilGrossRatedSensibleHeatRatio { get; set; } = (System.String)Autosize;
        
[Description(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electric power input")]
[JsonProperty(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electric power input")]
public System.Single CoolingCoilGrossRatedCop { get; set; } = 3;
        
[JsonProperty(@"")]
public YesNoDefault HeatingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String HeatingCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Leave blank if constant setpoint")]
[JsonProperty(@"Leave blank if constant setpoint")]
public System.String HeatingCoilSetpointScheduleName { get; set; } = "";
        
[Description(@"Used for sizing and as constant setpoint if no Heating Coil Setpoint Schedule Name is specified.")]
[JsonProperty(@"Used for sizing and as constant setpoint if no Heating Coil Setpoint Schedule Name is specified.")]
public System.Single HeatingCoilDesignSetpoint { get; set; } = 10;
        
[JsonProperty(@"")]
public System.String HeatingCoilCapacity { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single GasHeatingCoilEfficiency { get; set; } = 0.8;
        
[JsonProperty(@"")]
public System.Single GasHeatingCoilParasiticElectricLoad { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String MaximumOutdoorAirFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String MinimumOutdoorAirFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public YesNoDefault MinimumOutdoorAirControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ProportionalMinimum");
        
[Description(@"Schedule values multiply the Minimum Outdoor Air Flow Rate If blank, multiplier is always one")]
[JsonProperty(@"Schedule values multiply the Minimum Outdoor Air Flow Rate If blank, multiplier is always one")]
public System.String MinimumOutdoorAirScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault EconomizerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoEconomizer");
        
[JsonProperty(@"")]
public YesNoDefault EconomizerLockout { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoLockout");
        
[Description(@"Enter the maximum outdoor dry-bulb temperature limit for FixedDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the maximum outdoor dry-bulb temperature limit for FixedDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
public System.Single EconomizerMaximumLimitDryBulbTemperature { get; set; } = ;
        
[Description(@"Enter the maximum outdoor enthalpy limit for FixedEnthalpy economizer control type. No input or blank input means this limit is not operative Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the maximum outdoor enthalpy limit for FixedEnthalpy economizer control type. No input or blank input means this limit is not operative Limit is applied regardless of economizer control type.")]
public System.Single EconomizerMaximumLimitEnthalpy { get; set; } = ;
        
[Description(@"Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
public System.Single EconomizerMaximumLimitDewpointTemperature { get; set; } = ;
        
[Description(@"Enter the minimum outdoor dry-bulb temperature limit for economizer control. No input or blank input means this limit is not operative Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the minimum outdoor dry-bulb temperature limit for economizer control. No input or blank input means this limit is not operative Limit is applied regardless of economizer control type.")]
public System.Single EconomizerMinimumLimitDryBulbTemperature { get; set; } = ;
        
[Description(@"Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
[JsonProperty(@"Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
public System.String SupplyPlenumName { get; set; } = "";
        
[Description(@"Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
[JsonProperty(@"Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
public System.String ReturnPlenumName { get; set; } = "";
        
[Description(@"This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Values table.")]
[JsonProperty(@"This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Values table.")]
public YesNoDefault SupplyFanPartLoadPowerCoefficients { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "InletVaneDampers");
        
[JsonProperty(@"")]
public YesNoDefault NightCycleControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "StayOff");
        
[Description(@"Applicable only if Night Cycle Control is Cycle On Control Zone.")]
[JsonProperty(@"Applicable only if Night Cycle Control is Cycle On Control Zone.")]
public System.String NightCycleControlZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatRecoveryType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[JsonProperty(@"")]
public System.Single SensibleHeatRecoveryEffectiveness { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single LatentHeatRecoveryEffectiveness { get; set; } = 0.65;
        
[Description(@"Overrides Cooling Coil Setpoint Schedule Name None = no reset, control to Cooling Coil Design Setpoint Temperature or Schedule Warmest = reset as warm as possible yet meet all zone cooling loads at max supply air flow rate OutdoorAirTemperatureReset = reset based on outdoor air temperature (18.0C at 15.6C ODB, to the Cooling Design Setpoint at 26.7C) WarmestTemperatureFirst = reset as warm as possible yet meet all zone cooling loads at min supply air flow rate")]
[JsonProperty(@"Overrides Cooling Coil Setpoint Schedule Name None = no reset, control to Cooling Coil Design Setpoint Temperature or Schedule Warmest = reset as warm as possible yet meet all zone cooling loads at max supply air flow rate OutdoorAirTemperatureReset = reset based on outdoor air temperature (18.0C at 15.6C ODB, to the Cooling Design Setpoint at 26.7C) WarmestTemperatureFirst = reset as warm as possible yet meet all zone cooling loads at min supply air flow rate")]
public YesNoDefault CoolingCoilSetpointResetType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Overrides Heating Coil Setpoint Schedule Name None = no reset, control to Heating Coil Design Setpoint Temperature or Schedule OutdoorAirTemperatureReset = reset based on outdoor air temperature (Heating Design Setpoint at -6.7C ODB to Heating Design Setpoint minus 5.2C at 10C ODB) min supply air flow rate")]
[JsonProperty(@"Overrides Heating Coil Setpoint Schedule Name None = no reset, control to Heating Coil Design Setpoint Temperature or Schedule OutdoorAirTemperatureReset = reset based on outdoor air temperature (Heating Design Setpoint at -6.7C ODB to Heating Design Setpoint minus 5.2C at 10C ODB) min supply air flow rate")]
public YesNoDefault HeatingCoilSetpointResetType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint as required to meet the humidity setpoint.")]
[JsonProperty(@"None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint as required to meet the humidity setpoint.")]
public YesNoDefault DehumidificationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Zone name where humidistat is located")]
[JsonProperty(@"Zone name where humidistat is located")]
public System.String DehumidificationControlZoneName { get; set; } = "";
        
[Description(@"Zone relative humidity setpoint in percent (0 to 100)")]
[JsonProperty(@"Zone relative humidity setpoint in percent (0 to 100)")]
public System.Single DehumidificationSetpoint { get; set; } = 60;
        
[JsonProperty(@"")]
public YesNoDefault HumidifierType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always available")]
[JsonProperty(@"If blank, always available")]
public System.String HumidifierAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Moisture output rate at full rated power input. The humidifier does not currently autosize, so the default is very large to allow for adequate capacity.")]
[JsonProperty(@"Moisture output rate at full rated power input. The humidifier does not currently autosize, so the default is very large to allow for adequate capacity.")]
public System.Single HumidifierRatedCapacity { get; set; } = 1E-06;
        
[Description(@"Electric power input at rated capacity moisture output. Power consumption is proportional to moisture output with no part-load penalty.")]
[JsonProperty(@"Electric power input at rated capacity moisture output. Power consumption is proportional to moisture output with no part-load penalty.")]
public System.String HumidifierRatedElectricPower { get; set; } = (System.String)Autosize;
        
[Description(@"Zone name where humidistat is located")]
[JsonProperty(@"Zone name where humidistat is located")]
public System.String HumidifierControlZoneName { get; set; } = "";
        
[Description(@"Zone relative humidity setpoint in percent (0 to 100)")]
[JsonProperty(@"Zone relative humidity setpoint in percent (0 to 100)")]
public System.Single HumidifierSetpoint { get; set; } = 30;
        
[Description(@"Select whether autosized system supply flow rate is the sum of Coincident or NonCoincident zone air flow rates.")]
[JsonProperty(@"Select whether autosized system supply flow rate is the sum of Coincident or NonCoincident zone air flow rates.")]
public YesNoDefault SizingOption { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NonCoincident");
        
[Description(@"Specifies if the system has a return fan.")]
[JsonProperty(@"Specifies if the system has a return fan.")]
public YesNoDefault ReturnFan { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public System.Single ReturnFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single ReturnFanDeltaPressure { get; set; } = 500;
        
[JsonProperty(@"")]
public System.Single ReturnFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single ReturnFanMotorInAirStreamFraction { get; set; } = 1;
        
[Description(@"This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Values table.")]
[JsonProperty(@"This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Values table.")]
public YesNoDefault ReturnFanPartLoadPowerCoefficients { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "InletVaneDampers");
    }
    
    public enum SupplyFanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum CoolingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("TwoSpeedDX")]
        TwoSpeedDX = 1,
        
        [JsonProperty("TwoSpeedHumidControlDX")]
        TwoSpeedHumidControlDX = 2,
    }
    
    public enum HeatingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum MinimumOutdoorAirControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FixedMinimum")]
        FixedMinimum = 1,
        
        [JsonProperty("ProportionalMinimum")]
        ProportionalMinimum = 2,
    }
    
    public enum EconomizerTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DifferentialDryBulb")]
        DifferentialDryBulb = 1,
        
        [JsonProperty("DifferentialDryBulbAndEnthalpy")]
        DifferentialDryBulbAndEnthalpy = 2,
        
        [JsonProperty("DifferentialEnthalpy")]
        DifferentialEnthalpy = 3,
        
        [JsonProperty("ElectronicEnthalpy")]
        ElectronicEnthalpy = 4,
        
        [JsonProperty("FixedDewPointAndDryBulb")]
        FixedDewPointAndDryBulb = 5,
        
        [JsonProperty("FixedDryBulb")]
        FixedDryBulb = 6,
        
        [JsonProperty("FixedEnthalpy")]
        FixedEnthalpy = 7,
        
        [JsonProperty("NoEconomizer")]
        NoEconomizer = 8,
    }
    
    public enum EconomizerLockoutType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LockoutWithCompressor")]
        LockoutWithCompressor = 1,
        
        [JsonProperty("LockoutWithHeating")]
        LockoutWithHeating = 2,
        
        [JsonProperty("NoLockout")]
        NoLockout = 3,
    }
    
    public enum SupplyFanPartLoadPowerCoefficientsType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAE90.1-2004AppendixG")]
        ASHRAEAppendixG = 1,
        
        [JsonProperty("InletVaneDampers")]
        InletVaneDampers = 2,
        
        [JsonProperty("OutletDampers")]
        OutletDampers = 3,
        
        [JsonProperty("VariableSpeedMotor")]
        VariableSpeedMotor = 4,
        
        [JsonProperty("VariableSpeedMotorPressureReset")]
        VariableSpeedMotorPressureReset = 5,
    }
    
    public enum NightCycleControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CycleOnAny")]
        CycleOnAny = 1,
        
        [JsonProperty("CycleOnAnyZoneFansOnly")]
        CycleOnAnyZoneFansOnly = 2,
        
        [JsonProperty("CycleOnControlZone")]
        CycleOnControlZone = 3,
        
        [JsonProperty("StayOff")]
        StayOff = 4,
    }
    
    public enum HeatRecoveryTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Sensible")]
        Sensible = 3,
    }
    
    public enum CoolingCoilSetpointResetTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 2,
        
        [JsonProperty("Warmest")]
        Warmest = 3,
        
        [JsonProperty("WarmestTemperatureFirst")]
        WarmestTemperatureFirst = 4,
    }
    
    public enum HeatingCoilSetpointResetTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 2,
    }
    
    public enum DehumidificationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    public enum HumidifierTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ElectricSteam")]
        ElectricSteam = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    public enum SizingOptionType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Coincident")]
        Coincident = 1,
        
        [JsonProperty("NonCoincident")]
        NonCoincident = 2,
    }
    
    public enum ReturnFanPartLoadPowerCoefficientsType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAE90.1-2004AppendixG")]
        ASHRAEAppendixG = 1,
        
        [JsonProperty("InletVaneDampers")]
        InletVaneDampers = 2,
        
        [JsonProperty("OutletDampers")]
        OutletDampers = 3,
        
        [JsonProperty("VariableSpeedMotor")]
        VariableSpeedMotor = 4,
        
        [JsonProperty("VariableSpeedMotorPressureReset")]
        VariableSpeedMotorPressureReset = 5,
    }
    
    [Description("Constant Air Volume air loop with optional chilled water cooling coil, optional h" +
        "eating coil and optional preheat.")]
    [JsonObject("HVACTemplate:System:ConstantVolume")]
    public class HVACTemplate_System_ConstantVolume
    {
        
[Description(@"If blank, always on;  Schedule is used in availability manager and fan scheduling. Also see "Night Cycle Control" field.")]
[JsonProperty(@"If blank, always on;  Schedule is used in availability manager and fan scheduling. Also see "Night Cycle Control" field.")]
public System.String SystemAvailabilityScheduleName { get; set; } = "";
        
[Description(@"This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty(@"This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
public System.String SupplyFanMaximumFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single SupplyFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single SupplyFanDeltaPressure { get; set; } = 600;
        
[JsonProperty(@"")]
public System.Single SupplyFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single SupplyFanMotorInAirStreamFraction { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault SupplyFanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DrawThrough");
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ChilledWater");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String CoolingCoilAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilSetpointControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FixedSetpoint");
        
[Description(@"name of the HVACTemplate:ZoneConstantVolume object that contains the cooling thermostat when Cooling Coil Setpoint Control Type = ControlZone")]
[JsonProperty(@"name of the HVACTemplate:ZoneConstantVolume object that contains the cooling thermostat when Cooling Coil Setpoint Control Type = ControlZone")]
public System.String CoolingCoilControlZoneName { get; set; } = "";
        
[Description(@"Used for sizing and as constant setpoint if no Cooling Coil Setpoint Schedule Name is specified.")]
[JsonProperty(@"Used for sizing and as constant setpoint if no Cooling Coil Setpoint Schedule Name is specified.")]
public System.Single CoolingCoilDesignSetpointTemperature { get; set; } = 12.8;
        
[Description(@"Leave blank if constant setpoint")]
[JsonProperty(@"Leave blank if constant setpoint")]
public System.String CoolingCoilSetpointScheduleName { get; set; } = "";
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single CoolingCoilSetpointAtOutdoorDryBulbLow { get; set; } = 15.6;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control. Defaults are 15.6C (60F) at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control. Defaults are 15.6C (60F) at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)")]
public System.Single CoolingCoilResetOutdoorDryBulbLow { get; set; } = 15.6;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single CoolingCoilSetpointAtOutdoorDryBulbHigh { get; set; } = 12.8;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single CoolingCoilResetOutdoorDryBulbHigh { get; set; } = 23.3;
        
[JsonProperty(@"")]
public YesNoDefault HeatingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "HotWater");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String HeatingCoilAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatingCoilSetpointControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FixedSetpoint");
        
[Description(@"name of the HVACTemplate:ZoneConstantVolume object that contains the heating thermostat")]
[JsonProperty(@"name of the HVACTemplate:ZoneConstantVolume object that contains the heating thermostat")]
public System.String HeatingCoilControlZoneName { get; set; } = "";
        
[Description(@"Used for sizing and as constant setpoint if no Heating Coil Setpoint Schedule Name is specified.")]
[JsonProperty(@"Used for sizing and as constant setpoint if no Heating Coil Setpoint Schedule Name is specified.")]
public System.Single HeatingCoilDesignSetpoint { get; set; } = 10;
        
[Description(@"Leave blank if constant setpoint")]
[JsonProperty(@"Leave blank if constant setpoint")]
public System.String HeatingCoilSetpointScheduleName { get; set; } = "";
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single HeatingCoilSetpointAtOutdoorDryBulbLow { get; set; } = 15;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control. Defaults are 15.6C (60F) at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control. Defaults are 15.6C (60F) at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)")]
public System.Single HeatingCoilResetOutdoorDryBulbLow { get; set; } = 7.8;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single HeatingCoilSetpointAtOutdoorDryBulbHigh { get; set; } = 12.2;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single HeatingCoilResetOutdoorDryBulbHigh { get; set; } = 12.2;
        
[JsonProperty(@"")]
public System.String HeatingCoilCapacity { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single GasHeatingCoilEfficiency { get; set; } = 0.8;
        
[JsonProperty(@"")]
public System.Single GasHeatingCoilParasiticElectricLoad { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault PreheatCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String PreheatCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Used for sizing and as constant setpoint if no Preheat Coil Setpoint Schedule Name specified.")]
[JsonProperty(@"Used for sizing and as constant setpoint if no Preheat Coil Setpoint Schedule Name specified.")]
public System.Single PreheatCoilDesignSetpoint { get; set; } = 7.2;
        
[Description(@"Leave blank if constant setpoint")]
[JsonProperty(@"Leave blank if constant setpoint")]
public System.String PreheatCoilSetpointScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single GasPreheatCoilEfficiency { get; set; } = 0.8;
        
[JsonProperty(@"")]
public System.Single GasPreheatCoilParasiticElectricLoad { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String MaximumOutdoorAirFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String MinimumOutdoorAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Schedule values multiply the Minimum Outdoor Air Flow Rate If blank, multiplier is always one")]
[JsonProperty(@"Schedule values multiply the Minimum Outdoor Air Flow Rate If blank, multiplier is always one")]
public System.String MinimumOutdoorAirScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault EconomizerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoEconomizer");
        
[Description(@"Outdoor temperature above which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
[JsonProperty(@"Outdoor temperature above which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
public System.Single EconomizerUpperTemperatureLimit { get; set; } = ;
        
[Description(@"Outdoor temperature below which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
[JsonProperty(@"Outdoor temperature below which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
public System.Single EconomizerLowerTemperatureLimit { get; set; } = ;
        
[Description(@"Outdoor enthalpy above which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
[JsonProperty(@"Outdoor enthalpy above which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
public System.Single EconomizerUpperEnthalpyLimit { get; set; } = ;
        
[Description(@"Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
public System.Single EconomizerMaximumLimitDewpointTemperature { get; set; } = ;
        
[Description(@"Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
[JsonProperty(@"Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
public System.String SupplyPlenumName { get; set; } = "";
        
[Description(@"Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
[JsonProperty(@"Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
public System.String ReturnPlenumName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault NightCycleControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "StayOff");
        
[Description(@"Applicable only if Night Cycle Control is Cycle On Control Zone.")]
[JsonProperty(@"Applicable only if Night Cycle Control is Cycle On Control Zone.")]
public System.String NightCycleControlZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatRecoveryType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[JsonProperty(@"")]
public System.Single SensibleHeatRecoveryEffectiveness { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single LatentHeatRecoveryEffectiveness { get; set; } = 0.65;
        
[JsonProperty(@"")]
public YesNoDefault HeatRecoveryHeatExchangerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Plate");
        
[JsonProperty(@"")]
public YesNoDefault HeatRecoveryFrostControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint as required to meet the humidity setpoint.")]
[JsonProperty(@"None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint as required to meet the humidity setpoint.")]
public YesNoDefault DehumidificationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Zone name where humidistat is located")]
[JsonProperty(@"Zone name where humidistat is located")]
public System.String DehumidificationControlZoneName { get; set; } = "";
        
[Description(@"Zone relative humidity setpoint in percent (0 to 100) Ignored if Dehumidification Relative Humidity Setpoint Schedule specified below")]
[JsonProperty(@"Zone relative humidity setpoint in percent (0 to 100) Ignored if Dehumidification Relative Humidity Setpoint Schedule specified below")]
public System.Single DehumidificationRelativeHumiditySetpoint { get; set; } = 60;
        
[Description(@"Leave blank to use constant setpoint specified in Dehumidification Relative Humidity Setpoint above. Schedule values must be in percent relative humidity (0 to 100).")]
[JsonProperty(@"Leave blank to use constant setpoint specified in Dehumidification Relative Humidity Setpoint above. Schedule values must be in percent relative humidity (0 to 100).")]
public System.String DehumidificationRelativeHumiditySetpointScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HumidifierType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always available")]
[JsonProperty(@"If blank, always available")]
public System.String HumidifierAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Moisture output rate at full rated power input. The humidifier does not currently autosize, so the default is very large to allow for adequate capacity.")]
[JsonProperty(@"Moisture output rate at full rated power input. The humidifier does not currently autosize, so the default is very large to allow for adequate capacity.")]
public System.Single HumidifierRatedCapacity { get; set; } = 1E-06;
        
[Description(@"Electric power input at rated capacity moisture output. Power consumption is proportional to moisture output with no part-load penalty.")]
[JsonProperty(@"Electric power input at rated capacity moisture output. Power consumption is proportional to moisture output with no part-load penalty.")]
public System.String HumidifierRatedElectricPower { get; set; } = (System.String)Autosize;
        
[Description(@"Zone name where humidistat is located")]
[JsonProperty(@"Zone name where humidistat is located")]
public System.String HumidifierControlZoneName { get; set; } = "";
        
[Description(@"Zone relative humidity setpoint in percent (0 to 100). Ignored if Humidifier Relative Humidity Setpoint Schedule specified below")]
[JsonProperty(@"Zone relative humidity setpoint in percent (0 to 100). Ignored if Humidifier Relative Humidity Setpoint Schedule specified below")]
public System.Single HumidifierRelativeHumiditySetpoint { get; set; } = 30;
        
[Description(@"Leave blank to use constant setpoint specified in Humidifier Relative Humidity Setpoint above. Schedule values must be in percent relative humidity (0 to 100).")]
[JsonProperty(@"Leave blank to use constant setpoint specified in Humidifier Relative Humidity Setpoint above. Schedule values must be in percent relative humidity (0 to 100).")]
public System.String HumidifierRelativeHumiditySetpointScheduleName { get; set; } = "";
        
[Description(@"Specifies if the system has a return fan.")]
[JsonProperty(@"Specifies if the system has a return fan.")]
public YesNoDefault ReturnFan { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public System.Single ReturnFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single ReturnFanDeltaPressure { get; set; } = 300;
        
[JsonProperty(@"")]
public System.Single ReturnFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single ReturnFanMotorInAirStreamFraction { get; set; } = 1;
    }
    
    public enum SupplyFanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum CoolingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ChilledWater")]
        ChilledWater = 1,
        
        [JsonProperty("ChilledWaterDetailedFlatModel")]
        ChilledWaterDetailedFlatModel = 2,
        
        [JsonProperty("HeatExchangerAssistedChilledWater")]
        HeatExchangerAssistedChilledWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum CoolingCoilSetpointControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ControlZone")]
        ControlZone = 1,
        
        [JsonProperty("FixedSetpoint")]
        FixedSetpoint = 2,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 3,
        
        [JsonProperty("Scheduled")]
        Scheduled = 4,
        
        [JsonProperty("Warmest")]
        Warmest = 5,
    }
    
    public enum HeatingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HeatingCoilSetpointControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ControlZone")]
        ControlZone = 1,
        
        [JsonProperty("FixedSetpoint")]
        FixedSetpoint = 2,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 3,
        
        [JsonProperty("Scheduled")]
        Scheduled = 4,
    }
    
    public enum PreheatCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum EconomizerTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DifferentialDryBulb")]
        DifferentialDryBulb = 1,
        
        [JsonProperty("DifferentialDryBulbAndEnthalpy")]
        DifferentialDryBulbAndEnthalpy = 2,
        
        [JsonProperty("DifferentialEnthalpy")]
        DifferentialEnthalpy = 3,
        
        [JsonProperty("ElectronicEnthalpy")]
        ElectronicEnthalpy = 4,
        
        [JsonProperty("FixedDewPointAndDryBulb")]
        FixedDewPointAndDryBulb = 5,
        
        [JsonProperty("FixedDryBulb")]
        FixedDryBulb = 6,
        
        [JsonProperty("FixedEnthalpy")]
        FixedEnthalpy = 7,
        
        [JsonProperty("NoEconomizer")]
        NoEconomizer = 8,
    }
    
    public enum NightCycleControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CycleOnAny")]
        CycleOnAny = 1,
        
        [JsonProperty("CycleOnAnyZoneFansOnly")]
        CycleOnAnyZoneFansOnly = 2,
        
        [JsonProperty("CycleOnControlZone")]
        CycleOnControlZone = 3,
        
        [JsonProperty("StayOff")]
        StayOff = 4,
    }
    
    public enum HeatRecoveryTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Sensible")]
        Sensible = 3,
    }
    
    public enum HeatRecoveryHeatExchangerTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Plate")]
        Plate = 1,
        
        [JsonProperty("Rotary")]
        Rotary = 2,
    }
    
    public enum HeatRecoveryFrostControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ExhaustAirRecirculation")]
        ExhaustAirRecirculation = 1,
        
        [JsonProperty("ExhaustOnly")]
        ExhaustOnly = 2,
        
        [JsonProperty("MinimumExhaustTemperature")]
        MinimumExhaustTemperature = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum DehumidificationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    public enum HumidifierTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ElectricSteam")]
        ElectricSteam = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    [Description("Dual-duct constant volume or variable volume air loop")]
    [JsonObject("HVACTemplate:System:DualDuct")]
    public class HVACTemplate_System_DualDuct
    {
        
[Description(@"If blank, always on;  Schedule is used in availability manager and fan scheduling. Also see "Night Cycle Control" field.")]
[JsonProperty(@"If blank, always on;  Schedule is used in availability manager and fan scheduling. Also see "Night Cycle Control" field.")]
public System.String SystemAvailabilityScheduleName { get; set; } = "";
        
[Description(@"SingleFan - a single supply fan before the split to dual ducts DualFan - two supply fans, one each for the cold and hot ducts ConstantVolume - constant volume VariableVolume - variable volume")]
[JsonProperty(@"SingleFan - a single supply fan before the split to dual ducts DualFan - two supply fans, one each for the cold and hot ducts ConstantVolume - constant volume VariableVolume - variable volume")]
public YesNoDefault SystemConfigurationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SingleFanConstantVolume");
        
[Description(@"This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty(@"This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
public System.String MainSupplyFanMaximumFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single MainSupplyFanMinimumFlowFraction { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single MainSupplyFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single MainSupplyFanDeltaPressure { get; set; } = 1000;
        
[JsonProperty(@"")]
public System.Single MainSupplyFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single MainSupplyFanMotorInAirStreamFraction { get; set; } = 1;
        
[Description(@"This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Values table.")]
[JsonProperty(@"This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Values table.")]
public YesNoDefault MainSupplyFanPartLoadPowerCoefficients { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "InletVaneDampers");
        
[Description(@"This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty(@"This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
public System.String ColdDuctSupplyFanMaximumFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single ColdDuctSupplyFanMinimumFlowFraction { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single ColdDuctSupplyFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single ColdDuctSupplyFanDeltaPressure { get; set; } = 1000;
        
[JsonProperty(@"")]
public System.Single ColdDuctSupplyFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single ColdDuctSupplyFanMotorInAirStreamFraction { get; set; } = 1;
        
[Description(@"This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Values table.")]
[JsonProperty(@"This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Values table.")]
public YesNoDefault ColdDuctSupplyFanPartLoadPowerCoefficients { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "InletVaneDampers");
        
[JsonProperty(@"")]
public YesNoDefault ColdDuctSupplyFanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DrawThrough");
        
[Description(@"This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
[JsonProperty(@"This field may be set to "autosize". If a value is entered, it will *not* be multiplied by any sizing factor or by zone multipliers. If using zone multipliers a value entered here must be large enough to serve the multiplied zones.")]
public System.String HotDuctSupplyFanMaximumFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single HotDuctSupplyFanMinimumFlowFraction { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single HotDuctSupplyFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single HotDuctSupplyFanDeltaPressure { get; set; } = 1000;
        
[JsonProperty(@"")]
public System.Single HotDuctSupplyFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single HotDuctSupplyFanMotorInAirStreamFraction { get; set; } = 1;
        
[Description(@"This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Values table.")]
[JsonProperty(@"This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Values table.")]
public YesNoDefault HotDuctSupplyFanPartLoadPowerCoefficients { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "InletVaneDampers");
        
[JsonProperty(@"")]
public YesNoDefault HotDuctSupplyFanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DrawThrough");
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ChilledWater");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String CoolingCoilAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilSetpointControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FixedSetpoint");
        
[Description(@"Used for sizing and as constant setpoint if no Cooling Coil Setpoint Schedule Name is specified.")]
[JsonProperty(@"Used for sizing and as constant setpoint if no Cooling Coil Setpoint Schedule Name is specified.")]
public System.Single CoolingCoilDesignSetpointTemperature { get; set; } = 12.8;
        
[Description(@"Leave blank if constant setpoint")]
[JsonProperty(@"Leave blank if constant setpoint")]
public System.String CoolingCoilSetpointScheduleName { get; set; } = "";
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single CoolingCoilSetpointAtOutdoorDryBulbLow { get; set; } = 15.6;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control. Defaults are 15.6C (60F) at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control. Defaults are 15.6C (60F) at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)")]
public System.Single CoolingCoilResetOutdoorDryBulbLow { get; set; } = 15.6;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single CoolingCoilSetpointAtOutdoorDryBulbHigh { get; set; } = 12.8;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single CoolingCoilResetOutdoorDryBulbHigh { get; set; } = 23.3;
        
[JsonProperty(@"")]
public YesNoDefault HeatingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "HotWater");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String HeatingCoilAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatingCoilSetpointControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FixedSetpoint");
        
[Description(@"Used for sizing and as constant setpoint if no Heating Coil Setpoint Schedule Name is specified.")]
[JsonProperty(@"Used for sizing and as constant setpoint if no Heating Coil Setpoint Schedule Name is specified.")]
public System.Single HeatingCoilDesignSetpoint { get; set; } = 50;
        
[Description(@"Leave blank if constant setpoint")]
[JsonProperty(@"Leave blank if constant setpoint")]
public System.String HeatingCoilSetpointScheduleName { get; set; } = "";
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single HeatingCoilSetpointAtOutdoorDryBulbLow { get; set; } = 50;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control. Defaults are 15.6C (60F) at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control. Defaults are 15.6C (60F) at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)")]
public System.Single HeatingCoilResetOutdoorDryBulbLow { get; set; } = 7.8;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single HeatingCoilSetpointAtOutdoorDryBulbHigh { get; set; } = 20;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single HeatingCoilResetOutdoorDryBulbHigh { get; set; } = 12.2;
        
[JsonProperty(@"")]
public System.String HeatingCoilCapacity { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single GasHeatingCoilEfficiency { get; set; } = 0.8;
        
[JsonProperty(@"")]
public System.Single GasHeatingCoilParasiticElectricLoad { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault PreheatCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String PreheatCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Used for sizing and as constant setpoint if no Preheat Coil Setpoint Schedule Name specified.")]
[JsonProperty(@"Used for sizing and as constant setpoint if no Preheat Coil Setpoint Schedule Name specified.")]
public System.Single PreheatCoilDesignSetpoint { get; set; } = 7.2;
        
[Description(@"Leave blank if constant setpoint")]
[JsonProperty(@"Leave blank if constant setpoint")]
public System.String PreheatCoilSetpointScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single GasPreheatCoilEfficiency { get; set; } = 0.8;
        
[JsonProperty(@"")]
public System.Single GasPreheatCoilParasiticElectricLoad { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String MaximumOutdoorAirFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String MinimumOutdoorAirFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public YesNoDefault MinimumOutdoorAirControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ProportionalMinimum");
        
[Description(@"Schedule values multiply the Minimum Outdoor Air Flow Rate If blank, multiplier is always one")]
[JsonProperty(@"Schedule values multiply the Minimum Outdoor Air Flow Rate If blank, multiplier is always one")]
public System.String MinimumOutdoorAirScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault EconomizerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoEconomizer");
        
[JsonProperty(@"")]
public YesNoDefault EconomizerLockout { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoLockout");
        
[Description(@"Outdoor temperature above which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
[JsonProperty(@"Outdoor temperature above which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
public System.Single EconomizerUpperTemperatureLimit { get; set; } = ;
        
[Description(@"Outdoor temperature below which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
[JsonProperty(@"Outdoor temperature below which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
public System.Single EconomizerLowerTemperatureLimit { get; set; } = ;
        
[Description(@"Outdoor enthalpy above which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
[JsonProperty(@"Outdoor enthalpy above which economizer is disabled and heat recovery is enabled (if available). Blank means no limit.")]
public System.Single EconomizerUpperEnthalpyLimit { get; set; } = ;
        
[Description(@"Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
[JsonProperty(@"Enter the maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb economizer control type. No input or blank input means this limit is not operative. Limit is applied regardless of economizer control type.")]
public System.Single EconomizerMaximumLimitDewpointTemperature { get; set; } = ;
        
[Description(@"Plenum zone name. Supply plenum serves the cold inlets of all zones on this system. Blank if none.")]
[JsonProperty(@"Plenum zone name. Supply plenum serves the cold inlets of all zones on this system. Blank if none.")]
public System.String ColdSupplyPlenumName { get; set; } = "";
        
[Description(@"Plenum zone name. Supply plenum serves the hot inlets of all zones on this system. Blank if none.")]
[JsonProperty(@"Plenum zone name. Supply plenum serves the hot inlets of all zones on this system. Blank if none.")]
public System.String HotSupplyPlenumName { get; set; } = "";
        
[Description(@"Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
[JsonProperty(@"Plenum zone name. Supply plenum serves all zones on this system. Blank if none.")]
public System.String ReturnPlenumName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault NightCycleControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "StayOff");
        
[Description(@"Applicable only if Night Cycle Control is Cycle On Control Zone.")]
[JsonProperty(@"Applicable only if Night Cycle Control is Cycle On Control Zone.")]
public System.String NightCycleControlZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatRecoveryType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[JsonProperty(@"")]
public System.Single SensibleHeatRecoveryEffectiveness { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single LatentHeatRecoveryEffectiveness { get; set; } = 0.65;
        
[JsonProperty(@"")]
public YesNoDefault HeatRecoveryHeatExchangerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Plate");
        
[JsonProperty(@"")]
public YesNoDefault HeatRecoveryFrostControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint as required to meet the humidity setpoint.")]
[JsonProperty(@"None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint as required to meet the humidity setpoint.")]
public YesNoDefault DehumidificationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Zone name where humidistat is located")]
[JsonProperty(@"Zone name where humidistat is located")]
public System.String DehumidificationControlZoneName { get; set; } = "";
        
[Description(@"Zone relative humidity setpoint in percent (0 to 100) Ignored if Dehumidification Relative Humidity Setpoint Schedule specified below")]
[JsonProperty(@"Zone relative humidity setpoint in percent (0 to 100) Ignored if Dehumidification Relative Humidity Setpoint Schedule specified below")]
public System.Single DehumidificationRelativeHumiditySetpoint { get; set; } = 60;
        
[Description(@"Leave blank to use constant setpoint specified in Dehumidification Relative Humidity Setpoint above. Schedule values must be in percent relative humidity (0 to 100).")]
[JsonProperty(@"Leave blank to use constant setpoint specified in Dehumidification Relative Humidity Setpoint above. Schedule values must be in percent relative humidity (0 to 100).")]
public System.String DehumidificationRelativeHumiditySetpointScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HumidifierType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always available")]
[JsonProperty(@"If blank, always available")]
public System.String HumidifierAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Moisture output rate at full rated power input. The humidifier does not currently autosize, so the default is very large to allow for adequate capacity.")]
[JsonProperty(@"Moisture output rate at full rated power input. The humidifier does not currently autosize, so the default is very large to allow for adequate capacity.")]
public System.Single HumidifierRatedCapacity { get; set; } = 1E-06;
        
[Description(@"Electric power input at rated capacity moisture output. Power consumption is proportional to moisture output with no part-load penalty.")]
[JsonProperty(@"Electric power input at rated capacity moisture output. Power consumption is proportional to moisture output with no part-load penalty.")]
public System.String HumidifierRatedElectricPower { get; set; } = (System.String)Autosize;
        
[Description(@"Zone name where humidistat is located")]
[JsonProperty(@"Zone name where humidistat is located")]
public System.String HumidifierControlZoneName { get; set; } = "";
        
[Description(@"Zone relative humidity setpoint in percent (0 to 100). Ignored if Humidifier Relative Humidity Setpoint Schedule specified below")]
[JsonProperty(@"Zone relative humidity setpoint in percent (0 to 100). Ignored if Humidifier Relative Humidity Setpoint Schedule specified below")]
public System.Single HumidifierRelativeHumiditySetpoint { get; set; } = 30;
        
[Description(@"Leave blank to use constant setpoint specified in Humidifier Relative Humidity Setpoint above. Schedule values must be in percent relative humidity (0 to 100).")]
[JsonProperty(@"Leave blank to use constant setpoint specified in Humidifier Relative Humidity Setpoint above. Schedule values must be in percent relative humidity (0 to 100).")]
public System.String HumidifierRelativeHumiditySetpointScheduleName { get; set; } = "";
        
[Description(@"Select whether autosized system supply flow rate is the sum of Coincident or NonCoincident zone air flow rates.")]
[JsonProperty(@"Select whether autosized system supply flow rate is the sum of Coincident or NonCoincident zone air flow rates.")]
public YesNoDefault SizingOption { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NonCoincident");
        
[Description(@"Specifies if the system has a return fan.")]
[JsonProperty(@"Specifies if the system has a return fan.")]
public YesNoDefault ReturnFan { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public System.Single ReturnFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single ReturnFanDeltaPressure { get; set; } = 500;
        
[JsonProperty(@"")]
public System.Single ReturnFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single ReturnFanMotorInAirStreamFraction { get; set; } = 1;
        
[Description(@"This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Values table.")]
[JsonProperty(@"This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Values table.")]
public YesNoDefault ReturnFanPartLoadPowerCoefficients { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "InletVaneDampers");
    }
    
    public enum SystemConfigurationTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DualFanConstantVolume")]
        DualFanConstantVolume = 1,
        
        [JsonProperty("DualFanVariableVolume")]
        DualFanVariableVolume = 2,
        
        [JsonProperty("SingleFanConstantVolume")]
        SingleFanConstantVolume = 3,
        
        [JsonProperty("SingleFanVariableVolume")]
        SingleFanVariableVolume = 4,
    }
    
    public enum MainSupplyFanPartLoadPowerCoefficientsType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAE90.1-2004AppendixG")]
        ASHRAEAppendixG = 1,
        
        [JsonProperty("InletVaneDampers")]
        InletVaneDampers = 2,
        
        [JsonProperty("OutletDampers")]
        OutletDampers = 3,
        
        [JsonProperty("VariableSpeedMotor")]
        VariableSpeedMotor = 4,
        
        [JsonProperty("VariableSpeedMotorPressureReset")]
        VariableSpeedMotorPressureReset = 5,
    }
    
    public enum ColdDuctSupplyFanPartLoadPowerCoefficientsType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAE90.1-2004AppendixG")]
        ASHRAEAppendixG = 1,
        
        [JsonProperty("InletVaneDampers")]
        InletVaneDampers = 2,
        
        [JsonProperty("OutletDampers")]
        OutletDampers = 3,
        
        [JsonProperty("VariableSpeedMotor")]
        VariableSpeedMotor = 4,
        
        [JsonProperty("VariableSpeedMotorPressureReset")]
        VariableSpeedMotorPressureReset = 5,
    }
    
    public enum ColdDuctSupplyFanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum HotDuctSupplyFanPartLoadPowerCoefficientsType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAE90.1-2004AppendixG")]
        ASHRAEAppendixG = 1,
        
        [JsonProperty("InletVaneDampers")]
        InletVaneDampers = 2,
        
        [JsonProperty("OutletDampers")]
        OutletDampers = 3,
        
        [JsonProperty("VariableSpeedMotor")]
        VariableSpeedMotor = 4,
        
        [JsonProperty("VariableSpeedMotorPressureReset")]
        VariableSpeedMotorPressureReset = 5,
    }
    
    public enum HotDuctSupplyFanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum CoolingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ChilledWater")]
        ChilledWater = 1,
        
        [JsonProperty("ChilledWaterDetailedFlatModel")]
        ChilledWaterDetailedFlatModel = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum CoolingCoilSetpointControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FixedSetpoint")]
        FixedSetpoint = 1,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 2,
        
        [JsonProperty("Scheduled")]
        Scheduled = 3,
        
        [JsonProperty("Warmest")]
        Warmest = 4,
    }
    
    public enum HeatingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HeatingCoilSetpointControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Coldest")]
        Coldest = 1,
        
        [JsonProperty("FixedSetpoint")]
        FixedSetpoint = 2,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 3,
        
        [JsonProperty("Scheduled")]
        Scheduled = 4,
    }
    
    public enum PreheatCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum MinimumOutdoorAirControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FixedMinimum")]
        FixedMinimum = 1,
        
        [JsonProperty("ProportionalMinimum")]
        ProportionalMinimum = 2,
    }
    
    public enum EconomizerTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DifferentialDryBulb")]
        DifferentialDryBulb = 1,
        
        [JsonProperty("DifferentialDryBulbAndEnthalpy")]
        DifferentialDryBulbAndEnthalpy = 2,
        
        [JsonProperty("DifferentialEnthalpy")]
        DifferentialEnthalpy = 3,
        
        [JsonProperty("ElectronicEnthalpy")]
        ElectronicEnthalpy = 4,
        
        [JsonProperty("FixedDewPointAndDryBulb")]
        FixedDewPointAndDryBulb = 5,
        
        [JsonProperty("FixedDryBulb")]
        FixedDryBulb = 6,
        
        [JsonProperty("FixedEnthalpy")]
        FixedEnthalpy = 7,
        
        [JsonProperty("NoEconomizer")]
        NoEconomizer = 8,
    }
    
    public enum EconomizerLockoutType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("NoLockout")]
        NoLockout = 1,
    }
    
    public enum NightCycleControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CycleOnAny")]
        CycleOnAny = 1,
        
        [JsonProperty("CycleOnControlZone")]
        CycleOnControlZone = 2,
        
        [JsonProperty("StayOff")]
        StayOff = 3,
    }
    
    public enum HeatRecoveryTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Sensible")]
        Sensible = 3,
    }
    
    public enum HeatRecoveryHeatExchangerTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Plate")]
        Plate = 1,
        
        [JsonProperty("Rotary")]
        Rotary = 2,
    }
    
    public enum HeatRecoveryFrostControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ExhaustAirRecirculation")]
        ExhaustAirRecirculation = 1,
        
        [JsonProperty("ExhaustOnly")]
        ExhaustOnly = 2,
        
        [JsonProperty("MinimumExhaustTemperature")]
        MinimumExhaustTemperature = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum DehumidificationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    public enum HumidifierTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ElectricSteam")]
        ElectricSteam = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    public enum SizingOptionType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Coincident")]
        Coincident = 1,
        
        [JsonProperty("NonCoincident")]
        NonCoincident = 2,
    }
    
    public enum ReturnFanPartLoadPowerCoefficientsType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAE90.1-2004AppendixG")]
        ASHRAEAppendixG = 1,
        
        [JsonProperty("InletVaneDampers")]
        InletVaneDampers = 2,
        
        [JsonProperty("OutletDampers")]
        OutletDampers = 3,
        
        [JsonProperty("VariableSpeedMotor")]
        VariableSpeedMotor = 4,
        
        [JsonProperty("VariableSpeedMotorPressureReset")]
        VariableSpeedMotorPressureReset = 5,
    }
    
    [Description("This object creates a dedicated outdoor air system that must be used with HVACTem" +
        "plate:Zone:* objects for BaseboardHeat FanCoil PTAC PTHP WaterToAirHeatPump and " +
        "VRF. Does not support HVACTemplate:Zone:VAV or other central multizone systems")]
    [JsonObject("HVACTemplate:System:DedicatedOutdoorAir")]
    public class HVACTemplate_System_DedicatedOutdoorAir
    {
        
[Description(@"If blank, always on; DOAS System always on. Schedule is used in availability manager and fan scheduling.")]
[JsonProperty(@"If blank, always on; DOAS System always on. Schedule is used in availability manager and fan scheduling.")]
public System.String SystemAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault AirOutletType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DirectIntoZone");
        
[JsonProperty(@"")]
public System.String SupplyFanFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single SupplyFanTotalEfficiency { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single SupplyFanDeltaPressure { get; set; } = 1000;
        
[JsonProperty(@"")]
public System.Single SupplyFanMotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single SupplyFanMotorInAirStreamFraction { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault SupplyFanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DrawThrough");
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ChilledWater");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String CoolingCoilAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilSetpointControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FixedSetpoint");
        
[Description(@"Used for sizing and as constant setpoint if no Cooling Coil Setpoint Schedule Name is specified.")]
[JsonProperty(@"Used for sizing and as constant setpoint if no Cooling Coil Setpoint Schedule Name is specified.")]
public System.Single CoolingCoilDesignSetpoint { get; set; } = 12.8;
        
[Description(@"Leave blank if constant setpoint")]
[JsonProperty(@"Leave blank if constant setpoint")]
public System.String CoolingCoilSetpointScheduleName { get; set; } = "";
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single CoolingCoilSetpointAtOutdoorDryBulbLow { get; set; } = 15.6;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control. Defaults are 15.6C (60F) at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control. Defaults are 15.6C (60F) at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)")]
public System.Single CoolingCoilResetOutdoorDryBulbLow { get; set; } = 15.6;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single CoolingCoilSetpointAtOutdoorDryBulbHigh { get; set; } = 12.8;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single CoolingCoilResetOutdoorDryBulbHigh { get; set; } = 23.3;
        
[Description(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.String DxCoolingCoilGrossRatedTotalCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Gross SHR")]
[JsonProperty(@"Gross SHR")]
public System.String DxCoolingCoilGrossRatedSensibleHeatRatio { get; set; } = (System.String)Autosize;
        
[Description(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty(@"Gross cooling capacity divided by power input to the compressor and outdoor fan, does not include supply fan heat or supply fan electrical energy input")]
public System.Single DxCoolingCoilGrossRatedCop { get; set; } = 3;
        
[JsonProperty(@"")]
public YesNoDefault HeatingCoilType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "HotWater");
        
[Description(@"If blank, always on")]
[JsonProperty(@"If blank, always on")]
public System.String HeatingCoilAvailabilityScheduleName { get; set; } = "";
        
[Description(@"When selecting OutdoorAirTemperatureReset, the Heating Coil Design Setpoint may need to be changed")]
[JsonProperty(@"When selecting OutdoorAirTemperatureReset, the Heating Coil Design Setpoint may need to be changed")]
public YesNoDefault HeatingCoilSetpointControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FixedSetpoint");
        
[Description(@"Used for sizing and as constant setpoint if no Heating Coil Setpoint Schedule Name is specified.")]
[JsonProperty(@"Used for sizing and as constant setpoint if no Heating Coil Setpoint Schedule Name is specified.")]
public System.Single HeatingCoilDesignSetpoint { get; set; } = 12.2;
        
[Description(@"Leave blank if constant setpoint")]
[JsonProperty(@"Leave blank if constant setpoint")]
public System.String HeatingCoilSetpointScheduleName { get; set; } = "";
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control. Defaults 15.0C (59F) at 7.8C (46F) to 12.2C (54F) at 12.2C (54F)")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control. Defaults 15.0C (59F) at 7.8C (46F) to 12.2C (54F) at 12.2C (54F)")]
public System.Single HeatingCoilSetpointAtOutdoorDryBulbLow { get; set; } = 15;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single HeatingCoilResetOutdoorDryBulbLow { get; set; } = 7.8;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single HeatingCoilSetpointAtOutdoorDryBulbHigh { get; set; } = 12.2;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single HeatingCoilResetOutdoorDryBulbHigh { get; set; } = 12.2;
        
[JsonProperty(@"")]
public System.Single GasHeatingCoilEfficiency { get; set; } = 0.8;
        
[JsonProperty(@"")]
public System.Single GasHeatingCoilParasiticElectricLoad { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault HeatRecoveryType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[JsonProperty(@"")]
public System.Single HeatRecoverySensibleEffectiveness { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single HeatRecoveryLatentEffectiveness { get; set; } = 0.65;
        
[JsonProperty(@"")]
public YesNoDefault HeatRecoveryHeatExchangerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Plate");
        
[JsonProperty(@"")]
public YesNoDefault HeatRecoveryFrostControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"None = meet sensible load only CoolReheatHeatingCoil = cool beyond the dry-bulb setpoint, reheat with heating coil Valid for all cooling coil types. If no heating coil specified, cold supply temps may occur. CoolReheatDesuperheater = cool beyond the dry-bulb setpoint as required to meet the humidity setpoint, reheat with desuperheater coil. Valid only for Cooling Coil Type = TwoSpeedDX, TwoStageDX, TwoStageHumidityControlDX, or HeatExchangerAssistedDX. Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only for Cooling Coil Type = TwoStageHumidityControlDX or HeatExchangerAssistedDX")]
[JsonProperty(@"None = meet sensible load only CoolReheatHeatingCoil = cool beyond the dry-bulb setpoint, reheat with heating coil Valid for all cooling coil types. If no heating coil specified, cold supply temps may occur. CoolReheatDesuperheater = cool beyond the dry-bulb setpoint as required to meet the humidity setpoint, reheat with desuperheater coil. Valid only for Cooling Coil Type = TwoSpeedDX, TwoStageDX, TwoStageHumidityControlDX, or HeatExchangerAssistedDX. Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only for Cooling Coil Type = TwoStageHumidityControlDX or HeatExchangerAssistedDX")]
public YesNoDefault DehumidificationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"The supply air humidity ratio for dehumidification control. Default of 0.00924 kgWater/kgDryAir is equivalent to 12.8C (55F) dewpoint. Ignored if Dehumidification Setpoint Schedule specified below")]
[JsonProperty(@"The supply air humidity ratio for dehumidification control. Default of 0.00924 kgWater/kgDryAir is equivalent to 12.8C (55F) dewpoint. Ignored if Dehumidification Setpoint Schedule specified below")]
public System.Single DehumidificationSetpoint { get; set; } = 0.00924;
        
[JsonProperty(@"")]
public YesNoDefault HumidifierType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If blank, always available")]
[JsonProperty(@"If blank, always available")]
public System.String HumidifierAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Moisture output rate at full rated power input. The humidifier does not currently autosize, so the default is very large to allow for adequate capacity.")]
[JsonProperty(@"Moisture output rate at full rated power input. The humidifier does not currently autosize, so the default is very large to allow for adequate capacity.")]
public System.Single HumidifierRatedCapacity { get; set; } = 1E-06;
        
[Description(@"Electric power input at rated capacity moisture output. Power consumption is proportional to moisture output with no part-load penalty.")]
[JsonProperty(@"Electric power input at rated capacity moisture output. Power consumption is proportional to moisture output with no part-load penalty.")]
public System.String HumidifierRatedElectricPower { get; set; } = (System.String)Autosize;
        
[Description(@"The supply air humidity ratio for humidification control. Ignored if Humidifier Setpoint Schedule specified below")]
[JsonProperty(@"The supply air humidity ratio for humidification control. Ignored if Humidifier Setpoint Schedule specified below")]
public System.Single HumidifierConstantSetpoint { get; set; } = 0.003;
        
[Description(@"Leave blank to use constant setpoint specified in Dehumidification Setpoint above. Schedule values must be in units of humidity ratio (kgWater/kgDryAir or lbWater/lbDryAir)")]
[JsonProperty(@"Leave blank to use constant setpoint specified in Dehumidification Setpoint above. Schedule values must be in units of humidity ratio (kgWater/kgDryAir or lbWater/lbDryAir)")]
public System.String DehumidificationSetpointScheduleName { get; set; } = "";
        
[Description(@"Leave blank to use constant setpoint specified in Humidifier Constant Setpoint above. Schedule values must be in units of humidity ratio (kgWater/kgDryAir or lbWater/lbDryAir)")]
[JsonProperty(@"Leave blank to use constant setpoint specified in Humidifier Constant Setpoint above. Schedule values must be in units of humidity ratio (kgWater/kgDryAir or lbWater/lbDryAir)")]
public System.String HumidifierSetpointScheduleName { get; set; } = "";
    }
    
    public enum AirOutletTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DirectIntoZone")]
        DirectIntoZone = 1,
    }
    
    public enum SupplyFanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum CoolingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ChilledWater")]
        ChilledWater = 1,
        
        [JsonProperty("ChilledWaterDetailedFlatModel")]
        ChilledWaterDetailedFlatModel = 2,
        
        [JsonProperty("HeatExchangerAssistedChilledWater")]
        HeatExchangerAssistedChilledWater = 3,
        
        [JsonProperty("HeatExchangerAssistedDX")]
        HeatExchangerAssistedDX = 4,
        
        [JsonProperty("None")]
        None = 5,
        
        [JsonProperty("TwoSpeedDX")]
        TwoSpeedDX = 6,
        
        [JsonProperty("TwoStageDX")]
        TwoStageDX = 7,
        
        [JsonProperty("TwoStageHumidityControlDX")]
        TwoStageHumidityControlDX = 8,
    }
    
    public enum CoolingCoilSetpointControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FixedSetpoint")]
        FixedSetpoint = 1,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 2,
        
        [JsonProperty("Scheduled")]
        Scheduled = 3,
    }
    
    public enum HeatingCoilTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("Gas")]
        Gas = 2,
        
        [JsonProperty("HotWater")]
        HotWater = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HeatingCoilSetpointControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FixedSetpoint")]
        FixedSetpoint = 1,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 2,
        
        [JsonProperty("Scheduled")]
        Scheduled = 3,
    }
    
    public enum HeatRecoveryTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Sensible")]
        Sensible = 3,
    }
    
    public enum HeatRecoveryHeatExchangerTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Plate")]
        Plate = 1,
        
        [JsonProperty("Rotary")]
        Rotary = 2,
    }
    
    public enum HeatRecoveryFrostControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ExhaustAirRecirculation")]
        ExhaustAirRecirculation = 1,
        
        [JsonProperty("ExhaustOnly")]
        ExhaustOnly = 2,
        
        [JsonProperty("MinimumExhaustTemperature")]
        MinimumExhaustTemperature = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum DehumidificationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CoolReheatDesuperheater")]
        CoolReheatDesuperheater = 1,
        
        [JsonProperty("CoolReheatHeatingCoil")]
        CoolReheatHeatingCoil = 2,
        
        [JsonProperty("Multimode")]
        Multimode = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HumidifierTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ElectricSteam")]
        ElectricSteam = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    [Description("Plant and condenser loops to serve all HVACTemplate chilled water coils, chillers" +
        ", and towers.")]
    [JsonObject("HVACTemplate:Plant:ChilledWaterLoop")]
    public class HVACTemplate_Plant_ChilledWaterLoop
    {
        
[Description(@"If blank, always available Applies to both chilled water and condenser loop pumps")]
[JsonProperty(@"If blank, always available Applies to both chilled water and condenser loop pumps")]
public System.String PumpScheduleName { get; set; } = "";
        
[Description(@"Applies to both chilled water and condenser loop pumps")]
[JsonProperty(@"Applies to both chilled water and condenser loop pumps")]
public YesNoDefault PumpControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Intermittent");
        
[Description(@"Default operation type makes all equipment available at all times operating in order of Priority specified in HVACTemplate:Plant:Chiller objects.")]
[JsonProperty(@"Default operation type makes all equipment available at all times operating in order of Priority specified in HVACTemplate:Plant:Chiller objects.")]
public YesNoDefault ChillerPlantOperationSchemeType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Name of a PlantEquipmentOperationSchemes object Ignored if Chiller Plant Operation Scheme Type = Default")]
[JsonProperty(@"Name of a PlantEquipmentOperationSchemes object Ignored if Chiller Plant Operation Scheme Type = Default")]
public System.String ChillerPlantEquipmentOperationSchemesName { get; set; } = "";
        
[Description(@"Leave blank if constant setpoint")]
[JsonProperty(@"Leave blank if constant setpoint")]
public System.String ChilledWaterSetpointScheduleName { get; set; } = "";
        
[Description(@"Used for sizing and as constant setpoint if no Chilled Water Setpoint Schedule Name is specified.")]
[JsonProperty(@"Used for sizing and as constant setpoint if no Chilled Water Setpoint Schedule Name is specified.")]
public System.Single ChilledWaterDesignSetpoint { get; set; } = 7.22;
        
[Description(@"VariablePrimaryNoSecondary - variable flow to chillers and coils ConstantPrimaryNoSecondary - constant flow to chillers and coils, excess bypassed ConstantPrimaryVariableSecondary - constant flow to chillers, variable flow to coils VariablePrimaryConstantSecondary - currently unsupported - variable flow to chillers, constant flow to coils")]
[JsonProperty(@"VariablePrimaryNoSecondary - variable flow to chillers and coils ConstantPrimaryNoSecondary - constant flow to chillers and coils, excess bypassed ConstantPrimaryVariableSecondary - constant flow to chillers, variable flow to coils VariablePrimaryConstantSecondary - currently unsupported - variable flow to chillers, constant flow to coils")]
public YesNoDefault ChilledWaterPumpConfiguration { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ConstantPrimaryNoSecondary");
        
[Description(@"default head is 60 feet H2O")]
[JsonProperty(@"default head is 60 feet H2O")]
public System.Single PrimaryChilledWaterPumpRatedHead { get; set; } = 179352;
        
[Description(@"default head is 60 feet H2O")]
[JsonProperty(@"default head is 60 feet H2O")]
public System.Single SecondaryChilledWaterPumpRatedHead { get; set; } = 179352;
        
[Description(@"Default operation type makes all equipment available at all times operating in order of Priority specified in HVACTemplate:Plant:Tower objects. May be left blank if not serving any water cooled chillers")]
[JsonProperty(@"Default operation type makes all equipment available at all times operating in order of Priority specified in HVACTemplate:Plant:Tower objects. May be left blank if not serving any water cooled chillers")]
public YesNoDefault CondenserPlantOperationSchemeType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Name of a CondenserEquipmentOperationSchemes object Ignored if Condenser Plant Operation Scheme Type = Default May be left blank if not serving any water cooled chillers")]
[JsonProperty(@"Name of a CondenserEquipmentOperationSchemes object Ignored if Condenser Plant Operation Scheme Type = Default May be left blank if not serving any water cooled chillers")]
public System.String CondenserEquipmentOperationSchemesName { get; set; } = "";
        
[Description(@"May be left blank if not serving any water cooled chillers")]
[JsonProperty(@"May be left blank if not serving any water cooled chillers")]
public YesNoDefault CondenserWaterTemperatureControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Leave blank if constant setpoint May be left blank if not serving any water cooled chillers")]
[JsonProperty(@"Leave blank if constant setpoint May be left blank if not serving any water cooled chillers")]
public System.String CondenserWaterSetpointScheduleName { get; set; } = "";
        
[Description(@"Used for sizing and as constant setpoint if no Condenser Water Setpoint Schedule Name is specified. May be left blank if not serving any water cooled chillers")]
[JsonProperty(@"Used for sizing and as constant setpoint if no Condenser Water Setpoint Schedule Name is specified. May be left blank if not serving any water cooled chillers")]
public System.Single CondenserWaterDesignSetpoint { get; set; } = 29.4;
        
[Description(@"May be left blank if not serving any water cooled chillers default head is 60 feet H2O")]
[JsonProperty(@"May be left blank if not serving any water cooled chillers default head is 60 feet H2O")]
public System.Single CondenserWaterPumpRatedHead { get; set; } = 179352;
        
[Description(@"Overrides Chilled Water Setpoint Schedule Name")]
[JsonProperty(@"Overrides Chilled Water Setpoint Schedule Name")]
public YesNoDefault ChilledWaterSetpointResetType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single ChilledWaterSetpointAtOutdoorDryBulbLow { get; set; } = 12.2;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single ChilledWaterResetOutdoorDryBulbLow { get; set; } = 15.6;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single ChilledWaterSetpointAtOutdoorDryBulbHigh { get; set; } = 6.7;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single ChilledWaterResetOutdoorDryBulbHigh { get; set; } = 26.7;
        
[Description(@"Describes the type of pump configuration used for the primary portion of the chilled water loop.")]
[JsonProperty(@"Describes the type of pump configuration used for the primary portion of the chilled water loop.")]
public YesNoDefault ChilledWaterPrimaryPumpType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SinglePump");
        
[Description(@"Describes the type of pump configuration used for the secondary portion of the chilled water loop.")]
[JsonProperty(@"Describes the type of pump configuration used for the secondary portion of the chilled water loop.")]
public YesNoDefault ChilledWaterSecondaryPumpType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SinglePump");
        
[Description(@"Describes the type of pump configuration used for the condenser water loop.")]
[JsonProperty(@"Describes the type of pump configuration used for the condenser water loop.")]
public YesNoDefault CondenserWaterPumpType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SinglePump");
        
[Description(@"Determines if a supply side bypass pipe is present in the chilled water loop.")]
[JsonProperty(@"Determines if a supply side bypass pipe is present in the chilled water loop.")]
public YesNoDefault ChilledWaterSupplySideBypassPipe { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[Description(@"Determines if a demand side bypass pipe is present in the chilled water loop.")]
[JsonProperty(@"Determines if a demand side bypass pipe is present in the chilled water loop.")]
public YesNoDefault ChilledWaterDemandSideBypassPipe { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[Description(@"Determines if a supply side bypass pipe is present in the condenser water loop.")]
[JsonProperty(@"Determines if a supply side bypass pipe is present in the condenser water loop.")]
public YesNoDefault CondenserWaterSupplySideBypassPipe { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[Description(@"Determines if a demand side bypass pipe is present in the condenser water loop.")]
[JsonProperty(@"Determines if a demand side bypass pipe is present in the condenser water loop.")]
public YesNoDefault CondenserWaterDemandSideBypassPipe { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault FluidType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Water");
        
[Description(@"The temperature difference used in sizing the loop flow rate.")]
[JsonProperty(@"The temperature difference used in sizing the loop flow rate.")]
public System.Single LoopDesignDeltaTemperature { get; set; } = 6.67;
        
[Description(@"The minimum outdoor dry-bulb temperature that the chilled water loops operate. Leave blank for no limit.")]
[JsonProperty(@"The minimum outdoor dry-bulb temperature that the chilled water loops operate. Leave blank for no limit.")]
public System.Single MinimumOutdoorDryBulbTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault ChilledWaterLoadDistributionScheme { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SequentialLoad");
        
[JsonProperty(@"")]
public YesNoDefault CondenserWaterLoadDistributionScheme { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SequentialLoad");
    }
    
    public enum PumpControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Continuous")]
        Continuous = 1,
        
        [JsonProperty("Intermittent")]
        Intermittent = 2,
    }
    
    public enum ChillerPlantOperationSchemeTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Default")]
        Default = 1,
        
        [JsonProperty("UserDefined")]
        UserDefined = 2,
    }
    
    public enum ChilledWaterPumpConfigurationType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantPrimaryNoSecondary")]
        ConstantPrimaryNoSecondary = 1,
        
        [JsonProperty("ConstantPrimaryVariableSecondary")]
        ConstantPrimaryVariableSecondary = 2,
        
        [JsonProperty("VariablePrimaryNoSecondary")]
        VariablePrimaryNoSecondary = 3,
    }
    
    public enum CondenserPlantOperationSchemeTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Default")]
        Default = 1,
        
        [JsonProperty("UserDefined")]
        UserDefined = 2,
    }
    
    public enum CondenserWaterTemperatureControlTypeType
    {
        
        [JsonProperty("OutdoorWetBulbTemperature")]
        OutdoorWetBulbTemperature = 0,
        
        [JsonProperty("SpecifiedSetpoint")]
        SpecifiedSetpoint = 1,
    }
    
    public enum ChilledWaterSetpointResetTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 2,
    }
    
    public enum ChilledWaterPrimaryPumpTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FiveHeaderedPumps")]
        FiveHeaderedPumps = 1,
        
        [JsonProperty("FourHeaderedPumps")]
        FourHeaderedPumps = 2,
        
        [JsonProperty("PumpPerChiller")]
        PumpPerChiller = 3,
        
        [JsonProperty("SinglePump")]
        SinglePump = 4,
        
        [JsonProperty("ThreeHeaderedPumps")]
        ThreeHeaderedPumps = 5,
        
        [JsonProperty("TwoHeaderedPumps")]
        TwoHeaderedPumps = 6,
    }
    
    public enum ChilledWaterSecondaryPumpTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FiveHeaderedPumps")]
        FiveHeaderedPumps = 1,
        
        [JsonProperty("FourHeaderedPumps")]
        FourHeaderedPumps = 2,
        
        [JsonProperty("SinglePump")]
        SinglePump = 3,
        
        [JsonProperty("ThreeHeaderedPumps")]
        ThreeHeaderedPumps = 4,
        
        [JsonProperty("TwoHeaderedPumps")]
        TwoHeaderedPumps = 5,
    }
    
    public enum CondenserWaterPumpTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FiveHeaderedPumps")]
        FiveHeaderedPumps = 1,
        
        [JsonProperty("FourHeaderedPumps")]
        FourHeaderedPumps = 2,
        
        [JsonProperty("PumpPerTower")]
        PumpPerTower = 3,
        
        [JsonProperty("SinglePump")]
        SinglePump = 4,
        
        [JsonProperty("ThreeHeaderedPumps")]
        ThreeHeaderedPumps = 5,
        
        [JsonProperty("TwoHeaderedPumps")]
        TwoHeaderedPumps = 6,
    }
    
    public enum FluidTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("EthyleneGlycol30")]
        EthyleneGlycol = 1,
        
        [JsonProperty("EthyleneGlycol40")]
        EthyleneGlycol = 2,
        
        [JsonProperty("EthyleneGlycol50")]
        EthyleneGlycol = 3,
        
        [JsonProperty("EthyleneGlycol60")]
        EthyleneGlycol = 4,
        
        [JsonProperty("PropyleneGlycol30")]
        PropyleneGlycol = 5,
        
        [JsonProperty("PropyleneGlycol40")]
        PropyleneGlycol = 6,
        
        [JsonProperty("PropyleneGlycol50")]
        PropyleneGlycol = 7,
        
        [JsonProperty("PropyleneGlycol60")]
        PropyleneGlycol = 8,
        
        [JsonProperty("Water")]
        Water = 9,
    }
    
    public enum ChilledWaterLoadDistributionSchemeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Optimal")]
        Optimal = 1,
        
        [JsonProperty("SequentialLoad")]
        SequentialLoad = 2,
        
        [JsonProperty("SequentialUniformPLR")]
        SequentialUniformPLR = 3,
        
        [JsonProperty("UniformLoad")]
        UniformLoad = 4,
        
        [JsonProperty("UniformPLR")]
        UniformPLR = 5,
    }
    
    public enum CondenserWaterLoadDistributionSchemeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Optimal")]
        Optimal = 1,
        
        [JsonProperty("SequentialLoad")]
        SequentialLoad = 2,
        
        [JsonProperty("SequentialUniformPLR")]
        SequentialUniformPLR = 3,
        
        [JsonProperty("UniformLoad")]
        UniformLoad = 4,
        
        [JsonProperty("UniformPLR")]
        UniformPLR = 5,
    }
    
    [Description("This object adds a chiller to an HVACTemplate:Plant:ChilledWaterLoop.")]
    [JsonObject("HVACTemplate:Plant:Chiller")]
    public class HVACTemplate_Plant_Chiller
    {
        
[JsonProperty(@"")]
public YesNoDefault ChillerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String Capacity { get; set; } = (System.String)Autosize;
        
[Description(@"Not applicable if Chiller Type is DistrictChilledWater Electric Reciprocating Chiller")]
[JsonProperty(@"Not applicable if Chiller Type is DistrictChilledWater Electric Reciprocating Chiller")]
public System.Single NominalCop { get; set; } = ;
        
[Description(@"Not applicable if Chiller Type is DistrictChilledWater")]
[JsonProperty(@"Not applicable if Chiller Type is DistrictChilledWater")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaterCooled");
        
[Description(@"If Chiller Plant Operation Scheme Type=Default in HVACTemplate:Plant:ChilledWaterLoop, then equipment operates in Priority order, 1, 2, 3, etc.")]
[JsonProperty(@"If Chiller Plant Operation Scheme Type=Default in HVACTemplate:Plant:ChilledWaterLoop, then equipment operates in Priority order, 1, 2, 3, etc.")]
public System.String Priority { get; set; } = "";
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
        
[Description(@"Part load ratio below which the chiller starts cycling on/off to meet the load. Must be less than or equal to Maximum Part Load Ratio.")]
[JsonProperty(@"Part load ratio below which the chiller starts cycling on/off to meet the load. Must be less than or equal to Maximum Part Load Ratio.")]
public System.Single MinimumPartLoadRatio { get; set; } = 0;
        
[Description(@"Maximum allowable part load ratio. Must be greater than or equal to Minimum Part Load Ratio.")]
[JsonProperty(@"Maximum allowable part load ratio. Must be greater than or equal to Minimum Part Load Ratio.")]
public System.Single MaximumPartLoadRatio { get; set; } = 1;
        
[Description(@"Optimum part load ratio where the chiller is most efficient. Must be greater than or equal to the Minimum Part Load Ratio and less than or equal to the Maximum Part Load Ratio.")]
[JsonProperty(@"Optimum part load ratio where the chiller is most efficient. Must be greater than or equal to the Minimum Part Load Ratio and less than or equal to the Maximum Part Load Ratio.")]
public System.Single OptimumPartLoadRatio { get; set; } = 1;
        
[Description(@"Part load ratio where the chiller can no longer unload and false loading begins. Minimum unloading ratio must be greater than or equal to the Minimum Part Load Ratio and less than or equal to the Maximum Part Load Ratio.")]
[JsonProperty(@"Part load ratio where the chiller can no longer unload and false loading begins. Minimum unloading ratio must be greater than or equal to the Minimum Part Load Ratio and less than or equal to the Maximum Part Load Ratio.")]
public System.Single MinimumUnloadingRatio { get; set; } = 0.25;
        
[JsonProperty(@"")]
public System.Single LeavingChilledWaterLowerTemperatureLimit { get; set; } = 5;
    }
    
    public enum ChillerTypeType
    {
        
        [JsonProperty("DistrictChilledWater")]
        DistrictChilledWater = 0,
        
        [JsonProperty("ElectricCentrifugalChiller")]
        ElectricCentrifugalChiller = 1,
        
        [JsonProperty("ElectricReciprocatingChiller")]
        ElectricReciprocatingChiller = 2,
        
        [JsonProperty("ElectricScrewChiller")]
        ElectricScrewChiller = 3,
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 3,
    }
    
    [Description("This object references a detailed chiller object and adds it to an HVACTemplate:P" +
        "lant:ChilledWaterLoop. The user must create a complete detailed chiller object w" +
        "ith all required curve or performance objects.")]
    [JsonObject("HVACTemplate:Plant:Chiller:ObjectReference")]
    public class HVACTemplate_Plant_Chiller_ObjectReference
    {
        
[JsonProperty(@"")]
public YesNoDefault ChillerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Chiller:Electric:EIR");
        
[Description(@"The name of the detailed chiller object.")]
[JsonProperty(@"The name of the detailed chiller object.")]
public System.String ChillerName { get; set; } = "";
        
[Description(@"If Chiller Plant Operation Scheme Type=Default in HVACTemplate:Plant:ChilledWaterLoop, then equipment operates in Priority order, 1, 2, 3, etc.")]
[JsonProperty(@"If Chiller Plant Operation Scheme Type=Default in HVACTemplate:Plant:ChilledWaterLoop, then equipment operates in Priority order, 1, 2, 3, etc.")]
public System.Single Priority { get; set; } = ;
    }
    
    public enum ChillerObjectTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 1,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 2,
    }
    
    [Description("This object adds a cooling tower to an HVACTemplate:Plant:ChilledWaterLoop or Mix" +
        "edWaterLoop.")]
    [JsonObject("HVACTemplate:Plant:Tower")]
    public class HVACTemplate_Plant_Tower
    {
        
[JsonProperty(@"")]
public YesNoDefault TowerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Applicable for tower type SingleSpeed and TwoSpeed Nominal tower capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature, with the tower fan operating at high speed. Design water flow rate assumed to be 5.382E-8 m3/s per watt(3 gpm/ton). Nominal tower capacity times (1.25) gives the actual tower heat rejection at these operating conditions.")]
[JsonProperty(@"Applicable for tower type SingleSpeed and TwoSpeed Nominal tower capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature, with the tower fan operating at high speed. Design water flow rate assumed to be 5.382E-8 m3/s per watt(3 gpm/ton). Nominal tower capacity times (1.25) gives the actual tower heat rejection at these operating conditions.")]
public System.String HighSpeedNominalCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Applicable for tower type SingleSpeed and TwoSpeed")]
[JsonProperty(@"Applicable for tower type SingleSpeed and TwoSpeed")]
public System.String HighSpeedFanPower { get; set; } = (System.String)Autosize;
        
[Description(@"Applicable only for Tower Type TwoSpeed Nominal tower capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature, with the tower fan operating at low speed. Design water flow rate assumed to be 5.382E-8 m3/s per watt of tower high-speed nominal capacity (3 gpm/ton). Nominal tower capacity times (1.25) gives the actual tower heat rejection at these operating conditions.")]
[JsonProperty(@"Applicable only for Tower Type TwoSpeed Nominal tower capacity with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature, with the tower fan operating at low speed. Design water flow rate assumed to be 5.382E-8 m3/s per watt of tower high-speed nominal capacity (3 gpm/ton). Nominal tower capacity times (1.25) gives the actual tower heat rejection at these operating conditions.")]
public System.String LowSpeedNominalCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Applicable only for Tower Type TwoSpeed")]
[JsonProperty(@"Applicable only for Tower Type TwoSpeed")]
public System.String LowSpeedFanPower { get; set; } = (System.String)Autosize;
        
[Description(@"Applicable for Tower Type SingleSpeed and TwoSpeed Tower capacity in free convection regime with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt of tower high-speed nominal capacity (3 gpm/ton). Tower free convection capacity times (1.25) gives the actual tower heat rejection at these operating conditions.")]
[JsonProperty(@"Applicable for Tower Type SingleSpeed and TwoSpeed Tower capacity in free convection regime with entering water at 35C (95F), leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be 5.382E-8 m3/s per watt of tower high-speed nominal capacity (3 gpm/ton). Tower free convection capacity times (1.25) gives the actual tower heat rejection at these operating conditions.")]
public System.String FreeConvectionCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Applicable for all Tower Types If Condenser Plant Operation Scheme Type=Default in HVACTemplate:Plant:ChilledWaterLoop, then equipment operates in Priority order, 1, 2, 3, etc.")]
[JsonProperty(@"Applicable for all Tower Types If Condenser Plant Operation Scheme Type=Default in HVACTemplate:Plant:ChilledWaterLoop, then equipment operates in Priority order, 1, 2, 3, etc.")]
public System.String Priority { get; set; } = "";
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
        
[Description(@"Specifies if this tower serves a template chilled water loop or mixed water loop If left blank, will serve a chilled water loop if present, or a mixed water loop (if no chilled water loop is present).")]
[JsonProperty(@"Specifies if this tower serves a template chilled water loop or mixed water loop If left blank, will serve a chilled water loop if present, or a mixed water loop (if no chilled water loop is present).")]
public YesNoDefault TemplatePlantLoopType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum TowerTypeType
    {
        
        [JsonProperty("SingleSpeed")]
        SingleSpeed = 0,
        
        [JsonProperty("TwoSpeed")]
        TwoSpeed = 1,
    }
    
    public enum TemplatePlantLoopTypeType
    {
        
        [JsonProperty("ChilledWater")]
        ChilledWater = 0,
        
        [JsonProperty("MixedWater")]
        MixedWater = 1,
    }
    
    [Description("This object references a detailed cooling tower object and adds it to an HVACTemp" +
        "late:Plant:ChilledWaterLoop or MixedWaterLoop. The user must create a complete d" +
        "etailed cooling tower object with all required curve or performance objects.")]
    [JsonObject("HVACTemplate:Plant:Tower:ObjectReference")]
    public class HVACTemplate_Plant_Tower_ObjectReference
    {
        
[JsonProperty(@"")]
public YesNoDefault CoolingTowerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "CoolingTower:SingleSpeed");
        
[Description(@"The name of the detailed cooling tower object.")]
[JsonProperty(@"The name of the detailed cooling tower object.")]
public System.String CoolingTowerName { get; set; } = "";
        
[Description(@"If Condenser Plant Operation Scheme Type=Default in HVACTemplate:Plant:ChilledWaterLoop or MixedWaterLoop, then equipment operates in Priority order, 1, 2, 3, etc.")]
[JsonProperty(@"If Condenser Plant Operation Scheme Type=Default in HVACTemplate:Plant:ChilledWaterLoop or MixedWaterLoop, then equipment operates in Priority order, 1, 2, 3, etc.")]
public System.Single Priority { get; set; } = ;
        
[Description(@"Specifies if this tower serves a template chilled water loop or mixed water loop If left blank, will serve a chilled water loop if present, or a mixed water loop (if no chilled water loop is present).")]
[JsonProperty(@"Specifies if this tower serves a template chilled water loop or mixed water loop If left blank, will serve a chilled water loop if present, or a mixed water loop (if no chilled water loop is present).")]
public YesNoDefault TemplatePlantLoopType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum CoolingTowerObjectTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CoolingTower:SingleSpeed")]
        CoolingTowerSingleSpeed = 1,
        
        [JsonProperty("CoolingTower:TwoSpeed")]
        CoolingTowerTwoSpeed = 2,
        
        [JsonProperty("CoolingTower:VariableSpeed")]
        CoolingTowerVariableSpeed = 3,
    }
    
    public enum TemplatePlantLoopTypeType
    {
        
        [JsonProperty("ChilledWater")]
        ChilledWater = 0,
        
        [JsonProperty("MixedWater")]
        MixedWater = 1,
    }
    
    [Description("Plant loop to serve all HVACTemplate hot water coils and boilers.")]
    [JsonObject("HVACTemplate:Plant:HotWaterLoop")]
    public class HVACTemplate_Plant_HotWaterLoop
    {
        
[Description(@"If blank, always available")]
[JsonProperty(@"If blank, always available")]
public System.String PumpScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault PumpControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Intermittent");
        
[Description(@"Default operation type makes all equipment available at all times operating in order of Priority specified in HVACTemplate:Plant:Boiler objects.")]
[JsonProperty(@"Default operation type makes all equipment available at all times operating in order of Priority specified in HVACTemplate:Plant:Boiler objects.")]
public YesNoDefault HotWaterPlantOperationSchemeType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Name of a PlantEquipmentOperationSchemes object Ignored if Plant Operation Scheme Type = Default")]
[JsonProperty(@"Name of a PlantEquipmentOperationSchemes object Ignored if Plant Operation Scheme Type = Default")]
public System.String HotWaterPlantEquipmentOperationSchemesName { get; set; } = "";
        
[Description(@"Leave blank if constant setpoint")]
[JsonProperty(@"Leave blank if constant setpoint")]
public System.String HotWaterSetpointScheduleName { get; set; } = "";
        
[Description(@"Used for sizing and as constant setpoint if no Setpoint Schedule Name is specified.")]
[JsonProperty(@"Used for sizing and as constant setpoint if no Setpoint Schedule Name is specified.")]
public System.Single HotWaterDesignSetpoint { get; set; } = 82;
        
[Description(@"VariableFlow - variable flow to boilers and coils, excess bypassed ConstantFlow - constant flow to boilers and coils, excess bypassed")]
[JsonProperty(@"VariableFlow - variable flow to boilers and coils, excess bypassed ConstantFlow - constant flow to boilers and coils, excess bypassed")]
public YesNoDefault HotWaterPumpConfiguration { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ConstantFlow");
        
[Description(@"Default head is 60 feet H2O")]
[JsonProperty(@"Default head is 60 feet H2O")]
public System.Single HotWaterPumpRatedHead { get; set; } = 179352;
        
[Description(@"Overrides Hot Water Setpoint Schedule Name")]
[JsonProperty(@"Overrides Hot Water Setpoint Schedule Name")]
public YesNoDefault HotWaterSetpointResetType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single HotWaterSetpointAtOutdoorDryBulbLow { get; set; } = 82.2;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single HotWaterResetOutdoorDryBulbLow { get; set; } = -6.7;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single HotWaterSetpointAtOutdoorDryBulbHigh { get; set; } = 65.6;
        
[Description(@"Applicable only for OutdoorAirTemperatureReset control.")]
[JsonProperty(@"Applicable only for OutdoorAirTemperatureReset control.")]
public System.Single HotWaterResetOutdoorDryBulbHigh { get; set; } = 10;
        
[Description(@"Describes the type of pump configuration used for the hot water loop.")]
[JsonProperty(@"Describes the type of pump configuration used for the hot water loop.")]
public YesNoDefault HotWaterPumpType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SinglePump");
        
[Description(@"Determines if a supply side bypass pipe is present in the hot water loop.")]
[JsonProperty(@"Determines if a supply side bypass pipe is present in the hot water loop.")]
public YesNoDefault SupplySideBypassPipe { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[Description(@"Determines if a demand side bypass pipe is present in the hot water loop.")]
[JsonProperty(@"Determines if a demand side bypass pipe is present in the hot water loop.")]
public YesNoDefault DemandSideBypassPipe { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault FluidType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Water");
        
[Description(@"The temperature difference used in sizing the loop flow rate.")]
[JsonProperty(@"The temperature difference used in sizing the loop flow rate.")]
public System.Single LoopDesignDeltaTemperature { get; set; } = 11;
        
[Description(@"The maximum outdoor dry-bulb temperature that the hot water loops operate. Leave blank for no limit.")]
[JsonProperty(@"The maximum outdoor dry-bulb temperature that the hot water loops operate. Leave blank for no limit.")]
public System.Single MaximumOutdoorDryBulbTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault LoadDistributionScheme { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SequentialLoad");
    }
    
    public enum PumpControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Continuous")]
        Continuous = 1,
        
        [JsonProperty("Intermittent")]
        Intermittent = 2,
    }
    
    public enum HotWaterPlantOperationSchemeTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Default")]
        Default = 1,
        
        [JsonProperty("UserDefined")]
        UserDefined = 2,
    }
    
    public enum HotWaterPumpConfigurationType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("VariableFlow")]
        VariableFlow = 2,
    }
    
    public enum HotWaterSetpointResetTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("OutdoorAirTemperatureReset")]
        OutdoorAirTemperatureReset = 2,
    }
    
    public enum HotWaterPumpTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FiveHeaderedPumps")]
        FiveHeaderedPumps = 1,
        
        [JsonProperty("FourHeaderedPumps")]
        FourHeaderedPumps = 2,
        
        [JsonProperty("PumpPerBoiler")]
        PumpPerBoiler = 3,
        
        [JsonProperty("SinglePump")]
        SinglePump = 4,
        
        [JsonProperty("ThreeHeaderedPumps")]
        ThreeHeaderedPumps = 5,
        
        [JsonProperty("TwoHeaderedPumps")]
        TwoHeaderedPumps = 6,
    }
    
    public enum FluidTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("EthyleneGlycol30")]
        EthyleneGlycol = 1,
        
        [JsonProperty("EthyleneGlycol40")]
        EthyleneGlycol = 2,
        
        [JsonProperty("EthyleneGlycol50")]
        EthyleneGlycol = 3,
        
        [JsonProperty("EthyleneGlycol60")]
        EthyleneGlycol = 4,
        
        [JsonProperty("PropyleneGlycol30")]
        PropyleneGlycol = 5,
        
        [JsonProperty("PropyleneGlycol40")]
        PropyleneGlycol = 6,
        
        [JsonProperty("PropyleneGlycol50")]
        PropyleneGlycol = 7,
        
        [JsonProperty("PropyleneGlycol60")]
        PropyleneGlycol = 8,
        
        [JsonProperty("Water")]
        Water = 9,
    }
    
    public enum LoadDistributionSchemeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Optimal")]
        Optimal = 1,
        
        [JsonProperty("SequentialLoad")]
        SequentialLoad = 2,
        
        [JsonProperty("SequentialUniformPLR")]
        SequentialUniformPLR = 3,
        
        [JsonProperty("UniformLoad")]
        UniformLoad = 4,
        
        [JsonProperty("UniformPLR")]
        UniformPLR = 5,
    }
    
    [Description("This object adds a boiler to an HVACTemplate:Plant:HotWaterLoop or MixedWaterLoop" +
        ".")]
    [JsonObject("HVACTemplate:Plant:Boiler")]
    public class HVACTemplate_Plant_Boiler
    {
        
[JsonProperty(@"")]
public YesNoDefault BoilerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String Capacity { get; set; } = (System.String)Autosize;
        
[Description(@"Not applicable  if Boiler Type is DistrictHotWater")]
[JsonProperty(@"Not applicable  if Boiler Type is DistrictHotWater")]
public System.Single Efficiency { get; set; } = 0.8;
        
[Description(@"Not applicable  if Boiler Type is DistrictHotWater")]
[JsonProperty(@"Not applicable  if Boiler Type is DistrictHotWater")]
public YesNoDefault FuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"If Hot Water Plant Operation Scheme Type=Default in HVACTemplate:Plant:HotWaterLoop, then equipment operates in priority order, 1, 2, 3, etc.")]
[JsonProperty(@"If Hot Water Plant Operation Scheme Type=Default in HVACTemplate:Plant:HotWaterLoop, then equipment operates in priority order, 1, 2, 3, etc.")]
public System.String Priority { get; set; } = "";
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single MinimumPartLoadRatio { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single MaximumPartLoadRatio { get; set; } = 1.1;
        
[JsonProperty(@"")]
public System.Single OptimumPartLoadRatio { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single WaterOutletUpperTemperatureLimit { get; set; } = 100;
        
[Description(@"Specifies if this boiler serves a template hot water loop or mixed water loop If left blank, will serve a hot water loop if present, or a mixed water loop (if no hot water loop is present).")]
[JsonProperty(@"Specifies if this boiler serves a template hot water loop or mixed water loop If left blank, will serve a hot water loop if present, or a mixed water loop (if no hot water loop is present).")]
public YesNoDefault TemplatePlantLoopType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum BoilerTypeType
    {
        
        [JsonProperty("CondensingHotWaterBoiler")]
        CondensingHotWaterBoiler = 0,
        
        [JsonProperty("DistrictHotWater")]
        DistrictHotWater = 1,
        
        [JsonProperty("HotWaterBoiler")]
        HotWaterBoiler = 2,
    }
    
    public enum FuelTypeType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("Electricity")]
        Electricity = 2,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 3,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 4,
        
        [JsonProperty("Gasoline")]
        Gasoline = 5,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 6,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 7,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 8,
        
        [JsonProperty("Propane")]
        Propane = 9,
    }
    
    public enum TemplatePlantLoopTypeType
    {
        
        [JsonProperty("HotWater")]
        HotWater = 0,
        
        [JsonProperty("MixedWater")]
        MixedWater = 1,
    }
    
    [Description("This object references a detailed boiler object and adds it to an HVACTemplate:Pl" +
        "ant:HotWaterLoop or MixedWaterLoop. The user must create a complete detailed boi" +
        "ler object with all required curve or performance objects.")]
    [JsonObject("HVACTemplate:Plant:Boiler:ObjectReference")]
    public class HVACTemplate_Plant_Boiler_ObjectReference
    {
        
[JsonProperty(@"")]
public YesNoDefault BoilerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Boiler:HotWater");
        
[Description(@"The name of the detailed boiler object.")]
[JsonProperty(@"The name of the detailed boiler object.")]
public System.String BoilerName { get; set; } = "";
        
[Description(@"If Hot Water Plant Operation Scheme Type=Default in HVACTemplate:Plant:HotWaterLoop or MixedWaterLoop, then equipment operates in Priority order, 1, 2, 3, etc.")]
[JsonProperty(@"If Hot Water Plant Operation Scheme Type=Default in HVACTemplate:Plant:HotWaterLoop or MixedWaterLoop, then equipment operates in Priority order, 1, 2, 3, etc.")]
public System.Single Priority { get; set; } = ;
        
[Description(@"Specifies if this boiler serves a template hot water loop or mixed water loop If left blank, will serve a hot water loop if present, or a mixed water loop (if no hot water loop is present).")]
[JsonProperty(@"Specifies if this boiler serves a template hot water loop or mixed water loop If left blank, will serve a hot water loop if present, or a mixed water loop (if no hot water loop is present).")]
public YesNoDefault TemplatePlantLoopType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum BoilerObjectTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Boiler:HotWater")]
        BoilerHotWater = 1,
    }
    
    public enum TemplatePlantLoopTypeType
    {
        
        [JsonProperty("HotWater")]
        HotWater = 0,
        
        [JsonProperty("MixedWater")]
        MixedWater = 1,
    }
    
    [Description("Central plant loop portion of a water source heat pump system.")]
    [JsonObject("HVACTemplate:Plant:MixedWaterLoop")]
    public class HVACTemplate_Plant_MixedWaterLoop
    {
        
[Description(@"If blank, always available Applies to both chilled water and condenser loop pumps")]
[JsonProperty(@"If blank, always available Applies to both chilled water and condenser loop pumps")]
public System.String PumpScheduleName { get; set; } = "";
        
[Description(@"Applies to both chilled water and condenser loop pumps")]
[JsonProperty(@"Applies to both chilled water and condenser loop pumps")]
public YesNoDefault PumpControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Intermittent");
        
[Description(@"Default operation type makes all equipment available at all times operating in order of Priority specified in HVACTemplate:Plant:Boiler and HVACTemplate:Plant:Tower objects.")]
[JsonProperty(@"Default operation type makes all equipment available at all times operating in order of Priority specified in HVACTemplate:Plant:Boiler and HVACTemplate:Plant:Tower objects.")]
public YesNoDefault OperationSchemeType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Name of a PlantEquipmentOperationSchemes object Ignored if Plant Operation Scheme Type = Default")]
[JsonProperty(@"Name of a PlantEquipmentOperationSchemes object Ignored if Plant Operation Scheme Type = Default")]
public System.String EquipmentOperationSchemesName { get; set; } = "";
        
[Description(@"Leave blank if constant setpoint")]
[JsonProperty(@"Leave blank if constant setpoint")]
public System.String HighTemperatureSetpointScheduleName { get; set; } = "";
        
[Description(@"Used for sizing and as constant setpoint if no Setpoint Schedule Name is specified.")]
[JsonProperty(@"Used for sizing and as constant setpoint if no Setpoint Schedule Name is specified.")]
public System.Single HighTemperatureDesignSetpoint { get; set; } = 33;
        
[Description(@"Leave blank if constant setpoint May be left blank if not serving any water cooled chillers")]
[JsonProperty(@"Leave blank if constant setpoint May be left blank if not serving any water cooled chillers")]
public System.String LowTemperatureSetpointScheduleName { get; set; } = "";
        
[Description(@"Used for sizing and as constant setpoint if no Condenser Water Setpoint Schedule Name is specified. May be left blank if not serving any water cooled chillers")]
[JsonProperty(@"Used for sizing and as constant setpoint if no Condenser Water Setpoint Schedule Name is specified. May be left blank if not serving any water cooled chillers")]
public System.Single LowTemperatureDesignSetpoint { get; set; } = 20;
        
[Description(@"VariableFlow - variable flow to boilers and coils, excess bypassed ConstantFlow - constant flow to boilers and coils, excess bypassed")]
[JsonProperty(@"VariableFlow - variable flow to boilers and coils, excess bypassed ConstantFlow - constant flow to boilers and coils, excess bypassed")]
public YesNoDefault WaterPumpConfiguration { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ConstantFlow");
        
[Description(@"May be left blank if not serving any water cooled chillers default head is 60 feet H2O")]
[JsonProperty(@"May be left blank if not serving any water cooled chillers default head is 60 feet H2O")]
public System.Single WaterPumpRatedHead { get; set; } = 179352;
        
[Description(@"Describes the type of pump configuration used for the mixed water loop.")]
[JsonProperty(@"Describes the type of pump configuration used for the mixed water loop.")]
public YesNoDefault WaterPumpType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SinglePump");
        
[Description(@"Determines if a supply side bypass pipe is present in the hot water loop.")]
[JsonProperty(@"Determines if a supply side bypass pipe is present in the hot water loop.")]
public YesNoDefault SupplySideBypassPipe { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[Description(@"Determines if a demand side bypass pipe is present in the hot water loop.")]
[JsonProperty(@"Determines if a demand side bypass pipe is present in the hot water loop.")]
public YesNoDefault DemandSideBypassPipe { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault FluidType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Water");
        
[Description(@"The temperature difference used in sizing the loop flow rate.")]
[JsonProperty(@"The temperature difference used in sizing the loop flow rate.")]
public System.Single LoopDesignDeltaTemperature { get; set; } = 5.6;
        
[JsonProperty(@"")]
public YesNoDefault LoadDistributionScheme { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SequentialLoad");
    }
    
    public enum PumpControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Continuous")]
        Continuous = 1,
        
        [JsonProperty("Intermittent")]
        Intermittent = 2,
    }
    
    public enum OperationSchemeTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Default")]
        Default = 1,
        
        [JsonProperty("UserDefined")]
        UserDefined = 2,
    }
    
    public enum WaterPumpConfigurationType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("VariableFlow")]
        VariableFlow = 2,
    }
    
    public enum WaterPumpTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FiveHeaderedPumps")]
        FiveHeaderedPumps = 1,
        
        [JsonProperty("FourHeaderedPumps")]
        FourHeaderedPumps = 2,
        
        [JsonProperty("PumpPerTowerOrBoiler")]
        PumpPerTowerOrBoiler = 3,
        
        [JsonProperty("SinglePump")]
        SinglePump = 4,
        
        [JsonProperty("ThreeHeaderedPumps")]
        ThreeHeaderedPumps = 5,
        
        [JsonProperty("TwoHeaderedPumps")]
        TwoHeaderedPumps = 6,
    }
    
    public enum FluidTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("EthyleneGlycol30")]
        EthyleneGlycol = 1,
        
        [JsonProperty("EthyleneGlycol40")]
        EthyleneGlycol = 2,
        
        [JsonProperty("EthyleneGlycol50")]
        EthyleneGlycol = 3,
        
        [JsonProperty("EthyleneGlycol60")]
        EthyleneGlycol = 4,
        
        [JsonProperty("PropyleneGlycol30")]
        PropyleneGlycol = 5,
        
        [JsonProperty("PropyleneGlycol40")]
        PropyleneGlycol = 6,
        
        [JsonProperty("PropyleneGlycol50")]
        PropyleneGlycol = 7,
        
        [JsonProperty("PropyleneGlycol60")]
        PropyleneGlycol = 8,
        
        [JsonProperty("Water")]
        Water = 9,
    }
    
    public enum LoadDistributionSchemeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Optimal")]
        Optimal = 1,
        
        [JsonProperty("SequentialLoad")]
        SequentialLoad = 2,
        
        [JsonProperty("SequentialUniformPLR")]
        SequentialUniformPLR = 3,
        
        [JsonProperty("UniformLoad")]
        UniformLoad = 4,
        
        [JsonProperty("UniformPLR")]
        UniformPLR = 5,
    }
}
namespace EnergyPlus.HybridModel
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Zones with measured air temperature data and a range of dates. If the range of te" +
        "mperature measurement dates includes a leap day, the weather data should include" +
        " a leap day.")]
    [JsonObject("HybridModel:Zone")]
    public class HybridModel_Zone
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Use measured zone air temperature to calculate zone internal thermal mass. If set to Yes, the measured zone air temperature should be provided to calculate the thermal mass. If set to No, the inverse calculation of thermal mass will not be activated.")]
[JsonProperty(@"Use measured zone air temperature to calculate zone internal thermal mass. If set to Yes, the measured zone air temperature should be provided to calculate the thermal mass. If set to No, the inverse calculation of thermal mass will not be activated.")]
public YesNoDefault CalculateZoneInternalThermalMass { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Use measured temperature data (temperature, humidity ratio, or CO2 concentration) to calculate zone air infiltration air flow rate. Only one of field Calculate Zone Internal Thermal Mass, Calculate Zone Air Infiltration Rate, and Calculate Zone People Count can be set to YES at a time. By default, this field is set to NO. When set to NO, the inverse calculation of the zone air infiltration rate will not be activated. If this field is set to YES, one of the following fields (combinations) should be provided: 1. Measurements were conducted when HVAC is free-floating: 1.1 Zone Measured Air Temperature Schedule Name 1.2 Zone Measured Air Humidity Ratio Schedule Name 1.3 Zone Measured Air CO2 Concentration Schedule Name 2. Measurements were conducted when HVAC is on: 2.1 Zone Measured Air Temperature Schedule Name, Zone Input Supply Air Temperature Schedule Name, and Zone Input Supply Air Mass Flow Rate Schedule Name 2.2 Zone Measured Air Humidity Ratio Schedule Name, Zone Input Supply Air Temperature Schedule Name, Zone Input Supply Air Mass Flow Rate Schedule Name, and Zone Input Supply Air Humidity Ratio Schedule Name 2.3 Zone Measured Air CO2 Concentration Schedule Name, Zone Input Supply Air Mass Flow Rate Schedule Name, and Zone Input Supply Air CO2 Concentration Schedule Name")]
[JsonProperty(@"Use measured temperature data (temperature, humidity ratio, or CO2 concentration) to calculate zone air infiltration air flow rate. Only one of field Calculate Zone Internal Thermal Mass, Calculate Zone Air Infiltration Rate, and Calculate Zone People Count can be set to YES at a time. By default, this field is set to NO. When set to NO, the inverse calculation of the zone air infiltration rate will not be activated. If this field is set to YES, one of the following fields (combinations) should be provided: 1. Measurements were conducted when HVAC is free-floating: 1.1 Zone Measured Air Temperature Schedule Name 1.2 Zone Measured Air Humidity Ratio Schedule Name 1.3 Zone Measured Air CO2 Concentration Schedule Name 2. Measurements were conducted when HVAC is on: 2.1 Zone Measured Air Temperature Schedule Name, Zone Input Supply Air Temperature Schedule Name, and Zone Input Supply Air Mass Flow Rate Schedule Name 2.2 Zone Measured Air Humidity Ratio Schedule Name, Zone Input Supply Air Temperature Schedule Name, Zone Input Supply Air Mass Flow Rate Schedule Name, and Zone Input Supply Air Humidity Ratio Schedule Name 2.3 Zone Measured Air CO2 Concentration Schedule Name, Zone Input Supply Air Mass Flow Rate Schedule Name, and Zone Input Supply Air CO2 Concentration Schedule Name")]
public YesNoDefault CalculateZoneAirInfiltrationRate { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Use measured humidity ratio data (temperature, humidity ratio, or CO2 concentration) to calculate zone people count. Only one of field Calculate Zone Internal Thermal Mass, Calculate Zone Air Infiltration Rate, and Calculate Zone People Count can be set to YES at a time. By default, this field is set to NO. When set to NO, the inverse calculation of the zone people count will not be activated. If this field is set to YES, one of the following fields (combinations) should be provided: 1. Measurements were conducted when HVAC is free-floating: 1.1 Zone Measured Air Temperature Schedule Name 1.2 Zone Measured Air Humidity Ratio Schedule Name 1.3 Zone Measured Air CO2 Concentration Schedule Name 2. Measurements were conducted when HVAC is on: 2.1 Zone Measured Air Temperature Schedule Name, Zone Input Supply Air Temperature Schedule Name, and Zone Input Supply Air Mass Flow Rate Schedule Name 2.2 Zone Measured Air Humidity Ratio Schedule Name, Zone Input Supply Air Temperature Schedule Name, Zone Input Supply Air Mass Flow Rate Schedule Name, and Zone Input Supply Air Humidity Ratio Schedule Name 2.3 Zone Measured Air CO2 Concentration Schedule Name, Zone Input Supply Air Mass Flow Rate Schedule Name, and Zone Input Supply Air CO2 Concentration Schedule Name Field Zone Input People Activity Schedule Name, Zone Input People Sensible Heat Fraction Schedule Name, Zone Input People Radiant Heat Fraction Schedule Name, Zone Input People CO2 Generation Rate Schedule Name are optional. If provided, the default people activity level (130W), sensible heat generation rate (78W), latent heat generation (52W) rate, and CO2 generation rate (0.0000000382 [m3/(s*W)]) will be overwritten correspondingly.")]
[JsonProperty(@"Use measured humidity ratio data (temperature, humidity ratio, or CO2 concentration) to calculate zone people count. Only one of field Calculate Zone Internal Thermal Mass, Calculate Zone Air Infiltration Rate, and Calculate Zone People Count can be set to YES at a time. By default, this field is set to NO. When set to NO, the inverse calculation of the zone people count will not be activated. If this field is set to YES, one of the following fields (combinations) should be provided: 1. Measurements were conducted when HVAC is free-floating: 1.1 Zone Measured Air Temperature Schedule Name 1.2 Zone Measured Air Humidity Ratio Schedule Name 1.3 Zone Measured Air CO2 Concentration Schedule Name 2. Measurements were conducted when HVAC is on: 2.1 Zone Measured Air Temperature Schedule Name, Zone Input Supply Air Temperature Schedule Name, and Zone Input Supply Air Mass Flow Rate Schedule Name 2.2 Zone Measured Air Humidity Ratio Schedule Name, Zone Input Supply Air Temperature Schedule Name, Zone Input Supply Air Mass Flow Rate Schedule Name, and Zone Input Supply Air Humidity Ratio Schedule Name 2.3 Zone Measured Air CO2 Concentration Schedule Name, Zone Input Supply Air Mass Flow Rate Schedule Name, and Zone Input Supply Air CO2 Concentration Schedule Name Field Zone Input People Activity Schedule Name, Zone Input People Sensible Heat Fraction Schedule Name, Zone Input People Radiant Heat Fraction Schedule Name, Zone Input People CO2 Generation Rate Schedule Name are optional. If provided, the default people activity level (130W), sensible heat generation rate (78W), latent heat generation (52W) rate, and CO2 generation rate (0.0000000382 [m3/(s*W)]) will be overwritten correspondingly.")]
public YesNoDefault CalculateZonePeopleCount { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"from Schedule:File")]
[JsonProperty(@"from Schedule:File")]
public System.String ZoneMeasuredAirTemperatureScheduleName { get; set; } = "";
        
[Description(@"from Schedule:File")]
[JsonProperty(@"from Schedule:File")]
public System.String ZoneMeasuredAirHumidityRatioScheduleName { get; set; } = "";
        
[Description(@"from Schedule:File")]
[JsonProperty(@"from Schedule:File")]
public System.String ZoneMeasuredAirCoConcentrationScheduleName { get; set; } = "";
        
[Description(@"When this field is provided and valid, the default people activity level (used to calculate people count) will be overwritten. from Schedule:File")]
[JsonProperty(@"When this field is provided and valid, the default people activity level (used to calculate people count) will be overwritten. from Schedule:File")]
public System.String ZoneInputPeopleActivityScheduleName { get; set; } = "";
        
[Description(@"When this field is provided and valid, the default sensible heat fraction from people (used to calculate people count) will be overwritten. from Schedule:File")]
[JsonProperty(@"When this field is provided and valid, the default sensible heat fraction from people (used to calculate people count) will be overwritten. from Schedule:File")]
public System.String ZoneInputPeopleSensibleHeatFractionScheduleName { get; set; } = "";
        
[Description(@"When this field is provided and valid, the default radiant heat portion of the sensible heat from people (used to calculate people count) will be overwritten. from Schedule:File")]
[JsonProperty(@"When this field is provided and valid, the default radiant heat portion of the sensible heat from people (used to calculate people count) will be overwritten. from Schedule:File")]
public System.String ZoneInputPeopleRadiantHeatFractionScheduleName { get; set; } = "";
        
[Description(@"When this field is provided and valid, the default people CO2 generation rate (used to calculate people count) will be overwritten. from Schedule:File")]
[JsonProperty(@"When this field is provided and valid, the default people CO2 generation rate (used to calculate people count) will be overwritten. from Schedule:File")]
public System.String ZoneInputPeopleCoGenerationRateScheduleName { get; set; } = "";
        
[Description(@"from Schedule:File")]
[JsonProperty(@"from Schedule:File")]
public System.String ZoneInputSupplyAirTemperatureScheduleName { get; set; } = "";
        
[Description(@"from Schedule:File")]
[JsonProperty(@"from Schedule:File")]
public System.String ZoneInputSupplyAirMassFlowRateScheduleName { get; set; } = "";
        
[Description(@"from Schedule:File")]
[JsonProperty(@"from Schedule:File")]
public System.String ZoneInputSupplyAirHumidityRatioScheduleName { get; set; } = "";
        
[Description(@"from Schedule:File")]
[JsonProperty(@"from Schedule:File")]
public System.String ZoneInputSupplyAirCoConcentrationScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single BeginMonth { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single BeginDayOfMonth { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single EndMonth { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single EndDayOfMonth { get; set; } = ;
    }
}
namespace EnergyPlus.InternalGains
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Sets internal gains and contaminant rates for occupants in the zone. If you use a" +
        " ZoneList in the Zone or ZoneList name field then this definition applies to all" +
        " the zones in the ZoneList.")]
    [JsonObject("People")]
    public class People
    {
        
[JsonProperty(@"")]
public System.String ZoneOrZonelistName { get; set; } = "";
        
[Description(@"units in schedule should be fraction applied to number of people (0.0 - 1.0)")]
[JsonProperty(@"units in schedule should be fraction applied to number of people (0.0 - 1.0)")]
public System.String NumberOfPeopleScheduleName { get; set; } = "";
        
[Description(@"The entered calculation method is used to create the maximum number of people for this set of attributes (i.e. sensible fraction, schedule, etc) Choices: People -- simply enter number of occupants. People per Zone Floor Area -- enter the number to apply. Value * Floor Area = Number of people Zone Floor Area per Person -- enter the number to apply. Floor Area / Value = Number of people")]
[JsonProperty(@"The entered calculation method is used to create the maximum number of people for this set of attributes (i.e. sensible fraction, schedule, etc) Choices: People -- simply enter number of occupants. People per Zone Floor Area -- enter the number to apply. Value * Floor Area = Number of people Zone Floor Area per Person -- enter the number to apply. Floor Area / Value = Number of people")]
public YesNoDefault NumberOfPeopleCalculationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "People");
        
[JsonProperty(@"")]
public System.Single NumberOfPeople { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PeoplePerZoneFloorArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ZoneFloorAreaPerPerson { get; set; } = ;
        
[Description(@"This is radiant fraction of the sensible heat released by people in a zone. This value will be multiplied by the total sensible heat released by people yields the amount of long wavelength radiation gain from people in a zone. Default value is 0.30.")]
[JsonProperty(@"This is radiant fraction of the sensible heat released by people in a zone. This value will be multiplied by the total sensible heat released by people yields the amount of long wavelength radiation gain from people in a zone. Default value is 0.30.")]
public System.Single FractionRadiant { get; set; } = 0.3;
        
[Description(@"if input, overrides program calculated sensible/latent split")]
[JsonProperty(@"if input, overrides program calculated sensible/latent split")]
public System.String SensibleHeatFraction { get; set; } = (System.String)Autocalculate;
        
[Description(@"Note that W has to be converted to mets in TC routine units in schedule are W/person")]
[JsonProperty(@"Note that W has to be converted to mets in TC routine units in schedule are W/person")]
public System.String ActivityLevelScheduleName { get; set; } = "";
        
[Description(@"CO2 generation rate per unit of activity level. The default value is obtained from ASHRAE Std 62.1 at 0.0084 cfm/met/person over the general adult population.")]
[JsonProperty(@"CO2 generation rate per unit of activity level. The default value is obtained from ASHRAE Std 62.1 at 0.0084 cfm/met/person over the general adult population.")]
public System.Single CarbonDioxideGenerationRate { get; set; } = 3.82E-08;
        
[JsonProperty(@"")]
public YesNoDefault EnableAshraeComfortWarnings { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"optional (only required for thermal comfort runs)")]
[JsonProperty(@"optional (only required for thermal comfort runs)")]
public YesNoDefault MeanRadiantTemperatureCalculationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ZoneAveraged");
        
[Description(@"optional (only required for runs of thermal comfort models: Fanger, Pierce, KSU, CoolingEffectASH55 and AnkleDraftASH55)")]
[JsonProperty(@"optional (only required for runs of thermal comfort models: Fanger, Pierce, KSU, CoolingEffectASH55 and AnkleDraftASH55)")]
public System.String SurfaceNameAngleFactorListName { get; set; } = "";
        
[Description(@"units in schedule are 0.0 to 1.0 optional (only required for runs of thermal comfort models: Fanger, Pierce, KSU, CoolingEffectASH55 and AnkleDraftASH55)")]
[JsonProperty(@"units in schedule are 0.0 to 1.0 optional (only required for runs of thermal comfort models: Fanger, Pierce, KSU, CoolingEffectASH55 and AnkleDraftASH55)")]
public System.String WorkEfficiencyScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ClothingInsulationCalculationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ClothingInsulationSchedule");
        
[Description(@"a schedule value of 1 for the Scheduled method, and 2 for the DynamicClothingModelASHRAE55 method")]
[JsonProperty(@"a schedule value of 1 for the Scheduled method, and 2 for the DynamicClothingModelASHRAE55 method")]
public System.String ClothingInsulationCalculationMethodScheduleName { get; set; } = "";
        
[Description(@"use "Clo" from ASHRAE or Thermal Comfort guides optional (only required for runs of thermal comfort models: Fanger, Pierce, KSU, CoolingEffectASH55 and AnkleDraftASH55)")]
[JsonProperty(@"use "Clo" from ASHRAE or Thermal Comfort guides optional (only required for runs of thermal comfort models: Fanger, Pierce, KSU, CoolingEffectASH55 and AnkleDraftASH55)")]
public System.String ClothingInsulationScheduleName { get; set; } = "";
        
[Description(@"units in the schedule are m/s optional (only required for runs of thermal comfort models: Fanger, Pierce, KSU, CoolingEffectASH55 and AnkleDraftASH55)")]
[JsonProperty(@"units in the schedule are m/s optional (only required for runs of thermal comfort models: Fanger, Pierce, KSU, CoolingEffectASH55 and AnkleDraftASH55)")]
public System.String AirVelocityScheduleName { get; set; } = "";
        
[Description(@"optional (only needed for people thermal comfort results reporting)")]
[JsonProperty(@"optional (only needed for people thermal comfort results reporting)")]
public YesNoDefault ThermalComfortModelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"optional (second type of thermal comfort model and results reporting)")]
[JsonProperty(@"optional (second type of thermal comfort model and results reporting)")]
public YesNoDefault ThermalComfortModelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"optional (third thermal comfort model and report type)")]
[JsonProperty(@"optional (third thermal comfort model and report type)")]
public YesNoDefault ThermalComfortModelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"optional (fourth thermal comfort model and report type)")]
[JsonProperty(@"optional (fourth thermal comfort model and report type)")]
public YesNoDefault ThermalComfortModelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"optional (fifth thermal comfort model and report type)")]
[JsonProperty(@"optional (fifth thermal comfort model and report type)")]
public YesNoDefault ThermalComfortModelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"optional (sixth thermal comfort model and report type)")]
[JsonProperty(@"optional (sixth thermal comfort model and report type)")]
public YesNoDefault ThermalComfortModelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"optional (seventh thermal comfort model and report type)")]
[JsonProperty(@"optional (seventh thermal comfort model and report type)")]
public YesNoDefault ThermalComfortModelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"units in the schedule are m/s this is the schedule of the air speed at the 0.1 m above the floor optional (only required for runs of thermal comfort models AnkleDraftASH55)")]
[JsonProperty(@"units in the schedule are m/s this is the schedule of the air speed at the 0.1 m above the floor optional (only required for runs of thermal comfort models AnkleDraftASH55)")]
public System.String AnkleLevelAirVelocityScheduleName { get; set; } = "";
    }
    
    public enum NumberOfPeopleCalculationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Area/Person")]
        AreaPerson = 1,
        
        [JsonProperty("People")]
        People = 2,
        
        [JsonProperty("People/Area")]
        PeopleArea = 3,
    }
    
    public enum MeanRadiantTemperatureCalculationTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AngleFactor")]
        AngleFactor = 1,
        
        [JsonProperty("SurfaceWeighted")]
        SurfaceWeighted = 2,
        
        [JsonProperty("ZoneAveraged")]
        ZoneAveraged = 3,
    }
    
    public enum ClothingInsulationCalculationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CalculationMethodSchedule")]
        CalculationMethodSchedule = 1,
        
        [JsonProperty("ClothingInsulationSchedule")]
        ClothingInsulationSchedule = 2,
        
        [JsonProperty("DynamicClothingModelASHRAE55")]
        DynamicClothingModelASHRAE = 3,
    }
    
    public enum ThermalComfortModelTypeType
    {
        
        [JsonProperty("AdaptiveASH55")]
        AdaptiveASH = 0,
        
        [JsonProperty("AdaptiveCEN15251")]
        AdaptiveCEN = 1,
        
        [JsonProperty("AnkleDraftASH55")]
        AnkleDraftASH = 2,
        
        [JsonProperty("CoolingEffectASH55")]
        CoolingEffectASH = 3,
        
        [JsonProperty("Fanger")]
        Fanger = 4,
        
        [JsonProperty("KSU")]
        KSU = 5,
        
        [JsonProperty("Pierce")]
        Pierce = 6,
    }
    
    public enum ThermalComfortModelTypeType
    {
        
        [JsonProperty("AdaptiveASH55")]
        AdaptiveASH = 0,
        
        [JsonProperty("AdaptiveCEN15251")]
        AdaptiveCEN = 1,
        
        [JsonProperty("AnkleDraftASH55")]
        AnkleDraftASH = 2,
        
        [JsonProperty("CoolingEffectASH55")]
        CoolingEffectASH = 3,
        
        [JsonProperty("Fanger")]
        Fanger = 4,
        
        [JsonProperty("KSU")]
        KSU = 5,
        
        [JsonProperty("Pierce")]
        Pierce = 6,
    }
    
    public enum ThermalComfortModelTypeType
    {
        
        [JsonProperty("AdaptiveASH55")]
        AdaptiveASH = 0,
        
        [JsonProperty("AdaptiveCEN15251")]
        AdaptiveCEN = 1,
        
        [JsonProperty("AnkleDraftASH55")]
        AnkleDraftASH = 2,
        
        [JsonProperty("CoolingEffectASH55")]
        CoolingEffectASH = 3,
        
        [JsonProperty("Fanger")]
        Fanger = 4,
        
        [JsonProperty("KSU")]
        KSU = 5,
        
        [JsonProperty("Pierce")]
        Pierce = 6,
    }
    
    public enum ThermalComfortModelTypeType
    {
        
        [JsonProperty("AdaptiveASH55")]
        AdaptiveASH = 0,
        
        [JsonProperty("AdaptiveCEN15251")]
        AdaptiveCEN = 1,
        
        [JsonProperty("AnkleDraftASH55")]
        AnkleDraftASH = 2,
        
        [JsonProperty("CoolingEffectASH55")]
        CoolingEffectASH = 3,
        
        [JsonProperty("Fanger")]
        Fanger = 4,
        
        [JsonProperty("KSU")]
        KSU = 5,
        
        [JsonProperty("Pierce")]
        Pierce = 6,
    }
    
    public enum ThermalComfortModelTypeType
    {
        
        [JsonProperty("AdaptiveASH55")]
        AdaptiveASH = 0,
        
        [JsonProperty("AdaptiveCEN15251")]
        AdaptiveCEN = 1,
        
        [JsonProperty("AnkleDraftASH55")]
        AnkleDraftASH = 2,
        
        [JsonProperty("CoolingEffectASH55")]
        CoolingEffectASH = 3,
        
        [JsonProperty("Fanger")]
        Fanger = 4,
        
        [JsonProperty("KSU")]
        KSU = 5,
        
        [JsonProperty("Pierce")]
        Pierce = 6,
    }
    
    public enum ThermalComfortModelTypeType
    {
        
        [JsonProperty("AdaptiveASH55")]
        AdaptiveASH = 0,
        
        [JsonProperty("AdaptiveCEN15251")]
        AdaptiveCEN = 1,
        
        [JsonProperty("AnkleDraftASH55")]
        AnkleDraftASH = 2,
        
        [JsonProperty("CoolingEffectASH55")]
        CoolingEffectASH = 3,
        
        [JsonProperty("Fanger")]
        Fanger = 4,
        
        [JsonProperty("KSU")]
        KSU = 5,
        
        [JsonProperty("Pierce")]
        Pierce = 6,
    }
    
    public enum ThermalComfortModelTypeType
    {
        
        [JsonProperty("AdaptiveASH55")]
        AdaptiveASH = 0,
        
        [JsonProperty("AdaptiveCEN15251")]
        AdaptiveCEN = 1,
        
        [JsonProperty("AnkleDraftASH55")]
        AnkleDraftASH = 2,
        
        [JsonProperty("CoolingEffectASH55")]
        CoolingEffectASH = 3,
        
        [JsonProperty("Fanger")]
        Fanger = 4,
        
        [JsonProperty("KSU")]
        KSU = 5,
        
        [JsonProperty("Pierce")]
        Pierce = 6,
    }
    
    [Description("Used to specify radiant view factors for thermal comfort calculations.")]
    [JsonObject("ComfortViewFactorAngles")]
    public class ComfortViewFactorAngles
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AngleFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AngleFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AngleFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AngleFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AngleFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AngleFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AngleFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AngleFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AngleFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AngleFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AngleFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AngleFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AngleFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AngleFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AngleFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AngleFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AngleFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AngleFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AngleFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AngleFactor { get; set; } = ;
    }
    
    [Description("Sets internal gains for lights in the zone. If you use a ZoneList in the Zone or " +
        "ZoneList name field then this definition applies to all the zones in the ZoneLis" +
        "t.")]
    [JsonObject("Lights")]
    public class Lights
    {
        
[JsonProperty(@"")]
public System.String ZoneOrZonelistName { get; set; } = "";
        
[Description(@"units in schedule should be fraction applied to design level of lights, generally (0.0 - 1.0)")]
[JsonProperty(@"units in schedule should be fraction applied to design level of lights, generally (0.0 - 1.0)")]
public System.String ScheduleName { get; set; } = "";
        
[Description(@"The entered calculation method is used to create the maximum amount of lights for this set of attributes Choices: LightingLevel => Lighting Level -- simply enter watts of lights Watts/Area => Watts per Zone Floor Area -- enter the number to apply. Value * Floor Area = Lights Watts/Person => Watts per Person -- enter the number to apply. Value * Occupants = Lights")]
[JsonProperty(@"The entered calculation method is used to create the maximum amount of lights for this set of attributes Choices: LightingLevel => Lighting Level -- simply enter watts of lights Watts/Area => Watts per Zone Floor Area -- enter the number to apply. Value * Floor Area = Lights Watts/Person => Watts per Person -- enter the number to apply. Value * Occupants = Lights")]
public YesNoDefault DesignLevelCalculationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "LightingLevel");
        
[JsonProperty(@"")]
public System.Single LightingLevel { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WattsPerZoneFloorArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WattsPerPerson { get; set; } = ;
        
[Description(@"Used only for sizing calculation if return-air-fraction coefficients are specified.")]
[JsonProperty(@"Used only for sizing calculation if return-air-fraction coefficients are specified.")]
public System.Single ReturnAirFraction { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single FractionRadiant { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single FractionVisible { get; set; } = 0;
        
[Description(@"For Daylighting:Controls must be 0 or 1:  0 = no dimming control, 1 = full dimming control")]
[JsonProperty(@"For Daylighting:Controls must be 0 or 1:  0 = no dimming control, 1 = full dimming control")]
public System.Single FractionReplaceable { get; set; } = 1;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
        
[JsonProperty(@"")]
public YesNoDefault ReturnAirFractionCalculatedFromPlenumTemperature { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Used only if Return Air Fraction Is Calculated from Plenum Temperature = Yes Equation is Return Air Fraction = Coefficient#1 - Coefficient#2 X PlenumTemp(degC)")]
[JsonProperty(@"Used only if Return Air Fraction Is Calculated from Plenum Temperature = Yes Equation is Return Air Fraction = Coefficient#1 - Coefficient#2 X PlenumTemp(degC)")]
public System.Single ReturnAirFractionFunctionOfPlenumTemperatureCoefficient { get; set; } = 0;
        
[Description(@"Used only if Return Air Fraction Is Calculated from Plenum Temperature = Yes Equation is Return Air Fraction = Coefficient#1 - Coefficient#2 X PlenumTemp(degC)")]
[JsonProperty(@"Used only if Return Air Fraction Is Calculated from Plenum Temperature = Yes Equation is Return Air Fraction = Coefficient#1 - Coefficient#2 X PlenumTemp(degC)")]
public System.Single ReturnAirFractionFunctionOfPlenumTemperatureCoefficient { get; set; } = 0;
        
[Description(@"Name of the return air node for this heat gain. If left blank, defaults to the first return air node for the zone. Leave this field blank when using a ZoneList name.")]
[JsonProperty(@"Name of the return air node for this heat gain. If left blank, defaults to the first return air node for the zone. Leave this field blank when using a ZoneList name.")]
public System.String ReturnAirHeatGainNodeName { get; set; } = "";
    }
    
    public enum DesignLevelCalculationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LightingLevel")]
        LightingLevel = 1,
        
        [JsonProperty("Watts/Area")]
        WattsArea = 2,
        
        [JsonProperty("Watts/Person")]
        WattsPerson = 3,
    }
    
    [Description("Sets internal gains for electric equipment in the zone. If you use a ZoneList in " +
        "the Zone or ZoneList name field then this definition applies to all the zones in" +
        " the ZoneList.")]
    [JsonObject("ElectricEquipment")]
    public class ElectricEquipment
    {
        
[JsonProperty(@"")]
public System.String ZoneOrZonelistName { get; set; } = "";
        
[Description(@"units in schedule should be fraction applied to design level of electric equipment, generally (0.0 - 1.0)")]
[JsonProperty(@"units in schedule should be fraction applied to design level of electric equipment, generally (0.0 - 1.0)")]
public System.String ScheduleName { get; set; } = "";
        
[Description(@"The entered calculation method is used to create the maximum amount of electric equipment for this set of attributes Choices: EquipmentLevel => Equipment Level -- simply enter watts of equipment Watts/Area => Watts per Zone Floor Area -- enter the number to apply. Value * Floor Area = Equipment Level Watts/Person => Watts per Person -- enter the number to apply. Value * Occupants = Equipment Level")]
[JsonProperty(@"The entered calculation method is used to create the maximum amount of electric equipment for this set of attributes Choices: EquipmentLevel => Equipment Level -- simply enter watts of equipment Watts/Area => Watts per Zone Floor Area -- enter the number to apply. Value * Floor Area = Equipment Level Watts/Person => Watts per Person -- enter the number to apply. Value * Occupants = Equipment Level")]
public YesNoDefault DesignLevelCalculationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "EquipmentLevel");
        
[JsonProperty(@"")]
public System.Single DesignLevel { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WattsPerZoneFloorArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WattsPerPerson { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FractionLatent { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single FractionRadiant { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single FractionLost { get; set; } = 0;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum DesignLevelCalculationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("EquipmentLevel")]
        EquipmentLevel = 1,
        
        [JsonProperty("Watts/Area")]
        WattsArea = 2,
        
        [JsonProperty("Watts/Person")]
        WattsPerson = 3,
    }
    
    [Description("Sets internal gains and contaminant rates for gas equipment in the zone. If you u" +
        "se a ZoneList in the Zone name field then this definition applies to all those z" +
        "ones.")]
    [JsonObject("GasEquipment")]
    public class GasEquipment
    {
        
[JsonProperty(@"")]
public System.String ZoneOrZonelistName { get; set; } = "";
        
[Description(@"units in Schedule should be fraction applied to design level of gas equipment, generally (0.0 - 1.0)")]
[JsonProperty(@"units in Schedule should be fraction applied to design level of gas equipment, generally (0.0 - 1.0)")]
public System.String ScheduleName { get; set; } = "";
        
[Description(@"The entered calculation method is used to create the maximum amount of gas equipment for this set of attributes Choices: EquipmentLevel => Design Level -- simply enter power input of equipment Watts/Area or Power/Area => Power per Zone Floor Area -- enter the number to apply. Value * Floor Area = Equipment Level Watts/Person or Power/Person => Power per Person -- enter the number to apply. Value * Occupants = Equipment Level")]
[JsonProperty(@"The entered calculation method is used to create the maximum amount of gas equipment for this set of attributes Choices: EquipmentLevel => Design Level -- simply enter power input of equipment Watts/Area or Power/Area => Power per Zone Floor Area -- enter the number to apply. Value * Floor Area = Equipment Level Watts/Person or Power/Person => Power per Person -- enter the number to apply. Value * Occupants = Equipment Level")]
public YesNoDefault DesignLevelCalculationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "EquipmentLevel");
        
[JsonProperty(@"")]
public System.Single DesignLevel { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PowerPerZoneFloorArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PowerPerPerson { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FractionLatent { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single FractionRadiant { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single FractionLost { get; set; } = 0;
        
[Description(@"CO2 generation rate per unit of power input The default value assumes the equipment is fully vented. For unvented equipment, a suggested value is 3.45E-8 m3/s-W. This value is converted from a natural gas CO2 emission rate of 117 lbs CO2 per million Btu. The maximum value assumes to be 10 times of the recommended value.")]
[JsonProperty(@"CO2 generation rate per unit of power input The default value assumes the equipment is fully vented. For unvented equipment, a suggested value is 3.45E-8 m3/s-W. This value is converted from a natural gas CO2 emission rate of 117 lbs CO2 per million Btu. The maximum value assumes to be 10 times of the recommended value.")]
public System.Single CarbonDioxideGenerationRate { get; set; } = 0;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum DesignLevelCalculationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("EquipmentLevel")]
        EquipmentLevel = 1,
        
        [JsonProperty("Power/Area")]
        PowerArea = 2,
        
        [JsonProperty("Power/Person")]
        PowerPerson = 3,
        
        [JsonProperty("Watts/Area")]
        WattsArea = 4,
        
        [JsonProperty("Watts/Person")]
        WattsPerson = 5,
    }
    
    [Description("Sets internal gains for hot water equipment in the zone. If you use a ZoneList in" +
        " the Zone name field then this definition applies to all those zones.")]
    [JsonObject("HotWaterEquipment")]
    public class HotWaterEquipment
    {
        
[JsonProperty(@"")]
public System.String ZoneOrZonelistName { get; set; } = "";
        
[Description(@"units in Schedule should be fraction applied to design level of hot water equipment, generally (0.0 - 1.0)")]
[JsonProperty(@"units in Schedule should be fraction applied to design level of hot water equipment, generally (0.0 - 1.0)")]
public System.String ScheduleName { get; set; } = "";
        
[Description(@"The entered calculation method is used to create the maximum amount of hot water equipment for this set of attributes Choices: EquipmentLevel => Design Level -- simply enter power input of equipment Watts/Area or Power/Area => Power per Zone Floor Area -- enter the number to apply. Value * Floor Area = Equipment Level Watts/Person or Power/Person => Power per Person -- enter the number to apply. Value * Occupants = Equipment Level")]
[JsonProperty(@"The entered calculation method is used to create the maximum amount of hot water equipment for this set of attributes Choices: EquipmentLevel => Design Level -- simply enter power input of equipment Watts/Area or Power/Area => Power per Zone Floor Area -- enter the number to apply. Value * Floor Area = Equipment Level Watts/Person or Power/Person => Power per Person -- enter the number to apply. Value * Occupants = Equipment Level")]
public YesNoDefault DesignLevelCalculationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "EquipmentLevel");
        
[JsonProperty(@"")]
public System.Single DesignLevel { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PowerPerZoneFloorArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PowerPerPerson { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FractionLatent { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single FractionRadiant { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single FractionLost { get; set; } = 0;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum DesignLevelCalculationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("EquipmentLevel")]
        EquipmentLevel = 1,
        
        [JsonProperty("Power/Area")]
        PowerArea = 2,
        
        [JsonProperty("Power/Person")]
        PowerPerson = 3,
        
        [JsonProperty("Watts/Area")]
        WattsArea = 4,
        
        [JsonProperty("Watts/Person")]
        WattsPerson = 5,
    }
    
    [Description("Sets internal gains for steam equipment in the zone.")]
    [JsonObject("SteamEquipment")]
    public class SteamEquipment
    {
        
[JsonProperty(@"")]
public System.String ZoneOrZonelistName { get; set; } = "";
        
[Description(@"units in Schedule should be fraction applied to design level of steam equipment, generally (0.0 - 1.0)")]
[JsonProperty(@"units in Schedule should be fraction applied to design level of steam equipment, generally (0.0 - 1.0)")]
public System.String ScheduleName { get; set; } = "";
        
[Description(@"The entered calculation method is used to create the maximum amount of steam equipment for this set of attributes Choices: EquipmentLevel => Design Level -- simply enter power input of equipment Watts/Area or Power/Area => Power per Zone Floor Area -- enter the number to apply. Value * Floor Area = Equipment Level Watts/Person or Power/Person => Power per Person -- enter the number to apply. Value * Occupants = Equipment Level")]
[JsonProperty(@"The entered calculation method is used to create the maximum amount of steam equipment for this set of attributes Choices: EquipmentLevel => Design Level -- simply enter power input of equipment Watts/Area or Power/Area => Power per Zone Floor Area -- enter the number to apply. Value * Floor Area = Equipment Level Watts/Person or Power/Person => Power per Person -- enter the number to apply. Value * Occupants = Equipment Level")]
public YesNoDefault DesignLevelCalculationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "EquipmentLevel");
        
[JsonProperty(@"")]
public System.Single DesignLevel { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PowerPerZoneFloorArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PowerPerPerson { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FractionLatent { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single FractionRadiant { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single FractionLost { get; set; } = 0;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum DesignLevelCalculationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("EquipmentLevel")]
        EquipmentLevel = 1,
        
        [JsonProperty("Power/Area")]
        PowerArea = 2,
        
        [JsonProperty("Power/Person")]
        PowerPerson = 3,
        
        [JsonProperty("Watts/Area")]
        WattsArea = 4,
        
        [JsonProperty("Watts/Person")]
        WattsPerson = 5,
    }
    
    [Description("Sets internal gains or losses for \"other\" equipment in the zone.")]
    [JsonObject("OtherEquipment")]
    public class OtherEquipment
    {
        
[JsonProperty(@"")]
public YesNoDefault FuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[JsonProperty(@"")]
public System.String ZoneOrZonelistName { get; set; } = "";
        
[Description(@"units in Schedule should be fraction applied to design level of other equipment, generally (0.0 - 1.0)")]
[JsonProperty(@"units in Schedule should be fraction applied to design level of other equipment, generally (0.0 - 1.0)")]
public System.String ScheduleName { get; set; } = "";
        
[Description(@"The entered calculation method is used to create the maximum amount of other equipment. to set a loss, use a negative value in the following fields. for this set of attributes Choices: EquipmentLevel => Design Level -- simply enter power input of equipment Watts/Area or Power/Area => Power per Zone Floor Area -- enter the number to apply. Value * Floor Area = Equipment Level Watts/Person or Power/Person => Power per Person -- enter the number to apply. Value * Occupants = Equipment Level")]
[JsonProperty(@"The entered calculation method is used to create the maximum amount of other equipment. to set a loss, use a negative value in the following fields. for this set of attributes Choices: EquipmentLevel => Design Level -- simply enter power input of equipment Watts/Area or Power/Area => Power per Zone Floor Area -- enter the number to apply. Value * Floor Area = Equipment Level Watts/Person or Power/Person => Power per Person -- enter the number to apply. Value * Occupants = Equipment Level")]
public YesNoDefault DesignLevelCalculationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "EquipmentLevel");
        
[JsonProperty(@"")]
public System.Single DesignLevel { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PowerPerZoneFloorArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PowerPerPerson { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FractionLatent { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single FractionRadiant { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single FractionLost { get; set; } = 0;
        
[Description(@"CO2 generation rate per unit of power input The default value assumes the equipment is fully vented.")]
[JsonProperty(@"CO2 generation rate per unit of power input The default value assumes the equipment is fully vented.")]
public System.Single CarbonDioxideGenerationRate { get; set; } = 0;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum FuelTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Coal")]
        Coal = 1,
        
        [JsonProperty("Diesel")]
        Diesel = 2,
        
        [JsonProperty("DistrictCooling")]
        DistrictCooling = 3,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 4,
        
        [JsonProperty("Electricity")]
        Electricity = 5,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 6,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 7,
        
        [JsonProperty("Gasoline")]
        Gasoline = 8,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 9,
        
        [JsonProperty("None")]
        None = 10,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 11,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 12,
        
        [JsonProperty("Propane")]
        Propane = 13,
        
        [JsonProperty("Steam")]
        Steam = 14,
    }
    
    public enum DesignLevelCalculationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("EquipmentLevel")]
        EquipmentLevel = 1,
        
        [JsonProperty("Power/Area")]
        PowerArea = 2,
        
        [JsonProperty("Power/Person")]
        PowerPerson = 3,
        
        [JsonProperty("Watts/Area")]
        WattsArea = 4,
        
        [JsonProperty("Watts/Person")]
        WattsPerson = 5,
    }
    
    [Description("This object describes air-cooled electric information technology equipment (ITE) " +
        "which has variable power consumption as a function of loading and temperature.")]
    [JsonObject("ElectricEquipment:ITE:AirCooled")]
    public class ElectricEquipment_ITE_AirCooled
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"The specified method is used to calculate the IT inlet temperature and zone return air temperature. If FlowFromSystem is chosen, the zone is assumed to be well-mixed. If FlowControlWithApproachTemperatures is chosen, Supply and Return approach temperature should be defined to indicate the temperature difference due to the air distribution. When FlowControlWithApproachTemperatures is chosen, the inputs of Air Inlet Connection Type, Design Recirculation Fraction and Recirculation Function of Loading and Supply Temperature Curve Name are ignored. For multiple ITE objects defined for one zone, the same calculation method should apply. The FlowControlWithApproachTemperatures only applies to ITE zones with single duct VAV terminal unit. Other return air heat gains from window or lights are not allowed when FlowControlWithApproachTemperatures is chosen.")]
[JsonProperty(@"The specified method is used to calculate the IT inlet temperature and zone return air temperature. If FlowFromSystem is chosen, the zone is assumed to be well-mixed. If FlowControlWithApproachTemperatures is chosen, Supply and Return approach temperature should be defined to indicate the temperature difference due to the air distribution. When FlowControlWithApproachTemperatures is chosen, the inputs of Air Inlet Connection Type, Design Recirculation Fraction and Recirculation Function of Loading and Supply Temperature Curve Name are ignored. For multiple ITE objects defined for one zone, the same calculation method should apply. The FlowControlWithApproachTemperatures only applies to ITE zones with single duct VAV terminal unit. Other return air heat gains from window or lights are not allowed when FlowControlWithApproachTemperatures is chosen.")]
public YesNoDefault AirFlowCalculationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FlowFromSystem");
        
[Description(@"The entered calculation method is used to specify the design power input Watts/Unit => Watts per Unit -- Design Power = Watts per Unit * Number of Units Watts/Area => Watts per Zone Floor Area -- Design Power = Watts per Zone Floor Area * Floor Area")]
[JsonProperty(@"The entered calculation method is used to specify the design power input Watts/Unit => Watts per Unit -- Design Power = Watts per Unit * Number of Units Watts/Area => Watts per Zone Floor Area -- Design Power = Watts per Zone Floor Area * Floor Area")]
public YesNoDefault DesignPowerInputCalculationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Watts/Unit");
        
[JsonProperty(@"")]
public System.Single WattsPerUnit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NumberOfUnits { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single WattsPerZoneFloorArea { get; set; } = ;
        
[Description(@"Operating schedule for this equipment, fraction applied to the design power input, generally (0.0 - 1.0) If this field is blank, the schedule is assumed to always be 1.0.")]
[JsonProperty(@"Operating schedule for this equipment, fraction applied to the design power input, generally (0.0 - 1.0) If this field is blank, the schedule is assumed to always be 1.0.")]
public System.String DesignPowerInputScheduleName { get; set; } = "";
        
[Description(@"CPU loading schedule for this equipment as a fraction from 0.0 (idle) to 1.0 (full load). If this field is blank, the schedule is assumed to always be 1.0.")]
[JsonProperty(@"CPU loading schedule for this equipment as a fraction from 0.0 (idle) to 1.0 (full load). If this field is blank, the schedule is assumed to always be 1.0.")]
public System.String CpuLoadingScheduleName { get; set; } = "";
        
[Description(@"The name of a two-variable curve or table lookup object which modifies the CPU power input as a function of CPU loading (x) and air inlet node temperature (y). This curve (table) should equal 1.0 at design conditions (CPU loading = 1.0 and Design Entering Air Temperature).")]
[JsonProperty(@"The name of a two-variable curve or table lookup object which modifies the CPU power input as a function of CPU loading (x) and air inlet node temperature (y). This curve (table) should equal 1.0 at design conditions (CPU loading = 1.0 and Design Entering Air Temperature).")]
public System.String CpuPowerInputFunctionOfLoadingAndAirTemperatureCurveName { get; set; } = "";
        
[Description(@"The fraction of the total power input at design conditions which is for the cooling fan(s)")]
[JsonProperty(@"The fraction of the total power input at design conditions which is for the cooling fan(s)")]
public System.Single DesignFanPowerInputFraction { get; set; } = 0;
        
[Description(@"The cooling fan air flow rate per total electric power input at design conditions")]
[JsonProperty(@"The cooling fan air flow rate per total electric power input at design conditions")]
public System.Single DesignFanAirFlowRatePerPowerInput { get; set; } = ;
        
[Description(@"The name of a two-variable curve or table lookup object which modifies the cooling air flow rate as a function of CPU loading (x) and air inlet node temperature (y). This curve (table) should equal 1.0 at design conditions (CPU loading = 1.0 and Design Entering Air Temperature).")]
[JsonProperty(@"The name of a two-variable curve or table lookup object which modifies the cooling air flow rate as a function of CPU loading (x) and air inlet node temperature (y). This curve (table) should equal 1.0 at design conditions (CPU loading = 1.0 and Design Entering Air Temperature).")]
public System.String AirFlowFunctionOfLoadingAndAirTemperatureCurveName { get; set; } = "";
        
[Description(@"The name of a single-variable curve or table lookup object which modifies the cooling fan power as a function of flow fraction (x). This curve (table) should equal 1.0 at a flow fraction of 1.0.")]
[JsonProperty(@"The name of a single-variable curve or table lookup object which modifies the cooling fan power as a function of flow fraction (x). This curve (table) should equal 1.0 at a flow fraction of 1.0.")]
public System.String FanPowerInputFunctionOfFlowCurveName { get; set; } = "";
        
[Description(@"The entering air temperature at design conditions.")]
[JsonProperty(@"The entering air temperature at design conditions.")]
public System.Single DesignEnteringAirTemperature { get; set; } = 15;
        
[Description(@"Specifies the allowable operating conditions for the air inlet conditions. Used for reporting time outside allowable conditions.")]
[JsonProperty(@"Specifies the allowable operating conditions for the air inlet conditions. Used for reporting time outside allowable conditions.")]
public YesNoDefault EnvironmentalClass { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Specifies the type of connection between the zone and the ITE air inlet node. AdjustedSupply = ITE inlet temperature will be the current Supply Air Node temperature adjusted by the current recirculation fraction. All heat output is added to the zone air heat balance as a convective gain. ZoneAirNode = ITE air inlet condition is  the average zone condition. All heat output is added to the zone air heat balance as a convective gain. RoomAirModel = ITE air inlet and outlet are connected to room air model nodes. This field is only used when Air Flow Calculation Method is FlowFromSystem.")]
[JsonProperty(@"Specifies the type of connection between the zone and the ITE air inlet node. AdjustedSupply = ITE inlet temperature will be the current Supply Air Node temperature adjusted by the current recirculation fraction. All heat output is added to the zone air heat balance as a convective gain. ZoneAirNode = ITE air inlet condition is  the average zone condition. All heat output is added to the zone air heat balance as a convective gain. RoomAirModel = ITE air inlet and outlet are connected to room air model nodes. This field is only used when Air Flow Calculation Method is FlowFromSystem.")]
public YesNoDefault AirInletConnectionType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AdjustedSupply");
        
[Description(@"Name of a RoomAir:Node object which is connected to the ITE air inlet.")]
[JsonProperty(@"Name of a RoomAir:Node object which is connected to the ITE air inlet.")]
public System.String AirInletRoomAirModelNodeName { get; set; } = "";
        
[Description(@"Name of a RoomAir:Node object which is connected to the ITE air outlet.")]
[JsonProperty(@"Name of a RoomAir:Node object which is connected to the ITE air outlet.")]
public System.String AirOutletRoomAirModelNodeName { get; set; } = "";
        
[Description(@"Name of the supply air inlet node serving this ITE. Required if the Air Node Connection Type = AdjustedSupply. Also required if Calculation Method = FlowControlWithApproachTemperatures. Also required if reporting of Supply Heat Index is desired.")]
[JsonProperty(@"Name of the supply air inlet node serving this ITE. Required if the Air Node Connection Type = AdjustedSupply. Also required if Calculation Method = FlowControlWithApproachTemperatures. Also required if reporting of Supply Heat Index is desired.")]
public System.String SupplyAirNodeName { get; set; } = "";
        
[Description(@"The recirculation fraction for this equipment at design conditions. This field is used only if the Air Node Connection Type = AdjustedSupply. The default is 0.0 (no recirculation). This field is only used when Air Flow Calculation Method is FlowFromSystem.")]
[JsonProperty(@"The recirculation fraction for this equipment at design conditions. This field is used only if the Air Node Connection Type = AdjustedSupply. The default is 0.0 (no recirculation). This field is only used when Air Flow Calculation Method is FlowFromSystem.")]
public System.Single DesignRecirculationFraction { get; set; } = 0;
        
[Description(@"The name of a two-variable curve or table lookup object which modifies the recirculation fractionas a function of CPU loading (x) and supply air node temperature (y). This curve (table) should equal 1.0 at design conditions (CPU loading = 1.0 and Design Entering Air Temperature).This field is used only if the Air Node Connection Type = AdjustedSupply. If this curve is left blank, then the curve is assumed to always equal 1.0. This field is only used when Air Flow Calculation Method is FlowFromSystem.")]
[JsonProperty(@"The name of a two-variable curve or table lookup object which modifies the recirculation fractionas a function of CPU loading (x) and supply air node temperature (y). This curve (table) should equal 1.0 at design conditions (CPU loading = 1.0 and Design Entering Air Temperature).This field is used only if the Air Node Connection Type = AdjustedSupply. If this curve is left blank, then the curve is assumed to always equal 1.0. This field is only used when Air Flow Calculation Method is FlowFromSystem.")]
public System.String RecirculationFunctionOfLoadingAndSupplyTemperatureCurveName { get; set; } = "";
        
[Description(@"The efficiency of the power supply system serving this ITE")]
[JsonProperty(@"The efficiency of the power supply system serving this ITE")]
public System.Single DesignElectricPowerSupplyEfficiency { get; set; } = 1;
        
[Description(@"The name of a single-variable curve or table lookup object which modifies the electric power supply efficiency as a function of part-load ratio (x). This curve (table) should equal 1.0 at full load (PLR = 1.0). If this curve is left blank, then the curve is assumed to always equal 1.0.")]
[JsonProperty(@"The name of a single-variable curve or table lookup object which modifies the electric power supply efficiency as a function of part-load ratio (x). This curve (table) should equal 1.0 at full load (PLR = 1.0). If this curve is left blank, then the curve is assumed to always equal 1.0.")]
public System.String ElectricPowerSupplyEfficiencyFunctionOfPartLoadRatioCurveName { get; set; } = "";
        
[Description(@"Fraction of the electric power supply losses which are a heat gain to the zone If this field is <1.0, the remainder of the losses are assumed to be lost to the outdoors.")]
[JsonProperty(@"Fraction of the electric power supply losses which are a heat gain to the zone If this field is <1.0, the remainder of the losses are assumed to be lost to the outdoors.")]
public System.Single FractionOfElectricPowerSupplyLossesToZone { get; set; } = 1;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String CpuEndUseSubcategory { get; set; } = (System.String)ITE-CPU;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String FanEndUseSubcategory { get; set; } = (System.String)ITE-Fans;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String ElectricPowerSupplyEndUseSubcategory { get; set; } = (System.String)ITE-UPS;
        
[Description(@"The difference of the IT inlet temperature from the AHU supply air temperature. Either Supply Temperature Difference or Supply Temperature Difference Schedule is required if Air Flow Calculation Method is set to FlowControlWithApproachTemperatures. This field is ignored when Air Flow Calculation Method is FlowFromSystem.")]
[JsonProperty(@"The difference of the IT inlet temperature from the AHU supply air temperature. Either Supply Temperature Difference or Supply Temperature Difference Schedule is required if Air Flow Calculation Method is set to FlowControlWithApproachTemperatures. This field is ignored when Air Flow Calculation Method is FlowFromSystem.")]
public System.Single SupplyTemperatureDifference { get; set; } = ;
        
[Description(@"The difference schedule of the IT inlet temperature from the AHU supply air temperature. Either Supply Temperature Difference or Supply Temperature Difference Schedule is required if Air Flow Calculation Method is set to FlowControlWithApproachTemperatures. This field is ignored when Air Flow Calculation Method is FlowFromSystem.")]
[JsonProperty(@"The difference schedule of the IT inlet temperature from the AHU supply air temperature. Either Supply Temperature Difference or Supply Temperature Difference Schedule is required if Air Flow Calculation Method is set to FlowControlWithApproachTemperatures. This field is ignored when Air Flow Calculation Method is FlowFromSystem.")]
public System.String SupplyTemperatureDifferenceSchedule { get; set; } = "";
        
[Description(@"The difference of the the actual AHU return air temperature to the IT equipment outlet temperature. Either Return Temperature Difference or Return Temperature Difference Schedule is required if Air Flow Calculation Method is set to FlowControlWithApproachTemperatures. This field is ignored when Air Flow Calculation Method is FlowFromSystem.")]
[JsonProperty(@"The difference of the the actual AHU return air temperature to the IT equipment outlet temperature. Either Return Temperature Difference or Return Temperature Difference Schedule is required if Air Flow Calculation Method is set to FlowControlWithApproachTemperatures. This field is ignored when Air Flow Calculation Method is FlowFromSystem.")]
public System.Single ReturnTemperatureDifference { get; set; } = ;
        
[Description(@"The difference schedule of the actual AHU return air temperature to the IT equipment outlet temperature. Either Return Temperature Difference or Return Temperature Difference Schedule is required if Air Flow Calculation Method is set to FlowControlWithApproachTemperatures. This field is ignored when Air Flow Calculation Method is FlowFromSystem.")]
[JsonProperty(@"The difference schedule of the actual AHU return air temperature to the IT equipment outlet temperature. Either Return Temperature Difference or Return Temperature Difference Schedule is required if Air Flow Calculation Method is set to FlowControlWithApproachTemperatures. This field is ignored when Air Flow Calculation Method is FlowFromSystem.")]
public System.String ReturnTemperatureDifferenceSchedule { get; set; } = "";
    }
    
    public enum AirFlowCalculationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FlowControlWithApproachTemperatures")]
        FlowControlWithApproachTemperatures = 1,
        
        [JsonProperty("FlowFromSystem")]
        FlowFromSystem = 2,
    }
    
    public enum DesignPowerInputCalculationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Watts/Area")]
        WattsArea = 1,
        
        [JsonProperty("Watts/Unit")]
        WattsUnit = 2,
    }
    
    public enum EnvironmentalClassType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("A1")]
        A = 1,
        
        [JsonProperty("A2")]
        A = 2,
        
        [JsonProperty("A3")]
        A = 3,
        
        [JsonProperty("A4")]
        A = 4,
        
        [JsonProperty("B")]
        B = 5,
        
        [JsonProperty("C")]
        C = 6,
        
        [JsonProperty("None")]
        None = 7,
    }
    
    public enum AirInletConnectionTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AdjustedSupply")]
        AdjustedSupply = 1,
        
        [JsonProperty("RoomAirModel")]
        RoomAirModel = 2,
        
        [JsonProperty("ZoneAirNode")]
        ZoneAirNode = 3,
    }
    
    [Description("Specifies outside temperature-controlled electric baseboard heating.")]
    [JsonObject("ZoneBaseboard:OutdoorTemperatureControlled")]
    public class ZoneBaseboard_OutdoorTemperatureControlled
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"units in Schedule should be fraction applied to capacity of the baseboard heat equipment, generally (0.0 - 1.0)")]
[JsonProperty(@"units in Schedule should be fraction applied to capacity of the baseboard heat equipment, generally (0.0 - 1.0)")]
public System.String ScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single CapacityAtLowTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LowTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CapacityAtHighTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single HighTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FractionRadiant { get; set; } = 0;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    [Description("Specifies an indoor swimming pools linked to a floor surface. The pool is assumed" +
        " to cover the entire floor to which it is linked.")]
    [JsonObject("SwimmingPool:Indoor")]
    public class SwimmingPool_Indoor
    {
        
[Description(@"Name of the floor surface where the pool is located.")]
[JsonProperty(@"Name of the floor surface where the pool is located.")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AverageDepth { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ActivityFactorScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MakeUpWaterSupplyScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoverScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single CoverEvaporationFactor { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single CoverConvectionFactor { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single CoverShortWavelengthRadiationFactor { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single CoverLongWavelengthRadiationFactor { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String PoolWaterInletNode { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PoolWaterOutletNode { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single PoolHeatingSystemMaximumWaterFlowRate { get; set; } = ;
        
[Description(@"Power input per pool water flow rate")]
[JsonProperty(@"Power input per pool water flow rate")]
public System.Single PoolMiscellaneousEquipmentPower { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SetpointTemperatureSchedule { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MaximumNumberOfPeople { get; set; } = ;
        
[JsonProperty(@"")]
public System.String PeopleSchedule { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PeopleHeatGainSchedule { get; set; } = "";
    }
    
    [Description("Represents internal CO2 gains and sinks in the zone.")]
    [JsonObject("ZoneContaminantSourceAndSink:CarbonDioxide")]
    public class ZoneContaminantSourceAndSink_CarbonDioxide
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Positive values represent sources and negative values represent sinks.")]
[JsonProperty(@"Positive values represent sources and negative values represent sinks.")]
public System.Single DesignGenerationRate { get; set; } = ;
        
[Description(@"Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the Design Generation Rate")]
[JsonProperty(@"Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the Design Generation Rate")]
public System.String ScheduleName { get; set; } = "";
    }
    
    [Description("Sets internal generic contaminant gains and sinks in a zone with constant values." +
        "")]
    [JsonObject("ZoneContaminantSourceAndSink:Generic:Constant")]
    public class ZoneContaminantSourceAndSink_Generic_Constant
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"The values represent source.")]
[JsonProperty(@"The values represent source.")]
public System.Single DesignGenerationRate { get; set; } = ;
        
[Description(@"Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the Design Generation Rate")]
[JsonProperty(@"Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the Design Generation Rate")]
public System.String GenerationScheduleName { get; set; } = "";
        
[Description(@"The value represent sink.")]
[JsonProperty(@"The value represent sink.")]
public System.Single DesignRemovalCoefficient { get; set; } = ;
        
[Description(@"Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the Design removal Coefficient")]
[JsonProperty(@"Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the Design removal Coefficient")]
public System.String RemovalScheduleName { get; set; } = "";
    }
    
    [Description("Simulate generic contaminant source driven by the pressure difference across a su" +
        "rface.")]
    [JsonObject("SurfaceContaminantSourceAndSink:Generic:PressureDriven")]
    public class SurfaceContaminantSourceAndSink_Generic_PressureDriven
    {
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DesignGenerationRateCoefficient { get; set; } = ;
        
[Description(@"Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the Design Generation Rate Coefficient")]
[JsonProperty(@"Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the Design Generation Rate Coefficient")]
public System.String GenerationScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single GenerationExponent { get; set; } = ;
    }
    
    [Description("Simulate generic contaminant source driven by the cutoff concentration model.")]
    [JsonObject("ZoneContaminantSourceAndSink:Generic:CutoffModel")]
    public class ZoneContaminantSourceAndSink_Generic_CutoffModel
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DesignGenerationRateCoefficient { get; set; } = ;
        
[Description(@"Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the Design Generation Rate Coefficient")]
[JsonProperty(@"Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the Design Generation Rate Coefficient")]
public System.String ScheduleName { get; set; } = "";
        
[Description(@"When the zone concentration level is greater than the cutoff level, emission stops, and the source level is zero.")]
[JsonProperty(@"When the zone concentration level is greater than the cutoff level, emission stops, and the source level is zero.")]
public System.Single CutoffGenericContaminantAtWhichEmissionCeases { get; set; } = ;
    }
    
    [Description("Simulate generic contaminant source driven by the cutoff concentration model.")]
    [JsonObject("ZoneContaminantSourceAndSink:Generic:DecaySource")]
    public class ZoneContaminantSourceAndSink_Generic_DecaySource
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single InitialEmissionRate { get; set; } = ;
        
[Description(@"Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the Initial Emission Rate. When the value is equal to 1.0, the time will be reset to zero.")]
[JsonProperty(@"Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the Initial Emission Rate. When the value is equal to 1.0, the time will be reset to zero.")]
public System.String ScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DelayTimeConstant { get; set; } = ;
    }
    
    [Description("Simulate generic contaminant source driven by the boundary layer diffusion contro" +
        "lled model.")]
    [JsonObject("SurfaceContaminantSourceAndSink:Generic:BoundaryLayerDiffusion")]
    public class SurfaceContaminantSourceAndSink_Generic_BoundaryLayerDiffusion
    {
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MassTransferCoefficient { get; set; } = ;
        
[Description(@"Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the Initial Emission Rate. When the value is equal to 1.0, the time will be reset to zero.")]
[JsonProperty(@"Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the Initial Emission Rate. When the value is equal to 1.0, the time will be reset to zero.")]
public System.String ScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single HenryAdsorptionConstantOrPartitionCoefficient { get; set; } = ;
    }
    
    [Description("Simulate generic contaminant source driven by the boundary layer diffusion contro" +
        "lled model.")]
    [JsonObject("SurfaceContaminantSourceAndSink:Generic:DepositionVelocitySink")]
    public class SurfaceContaminantSourceAndSink_Generic_DepositionVelocitySink
    {
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DepositionVelocity { get; set; } = ;
        
[Description(@"Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the Initial Emission Rate. When the value is equal to 1.0, the time will be reset to zero.")]
[JsonProperty(@"Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the Initial Emission Rate. When the value is equal to 1.0, the time will be reset to zero.")]
public System.String ScheduleName { get; set; } = "";
    }
    
    [Description("Simulate generic contaminant source driven by the boundary layer diffusion contro" +
        "lled model.")]
    [JsonObject("ZoneContaminantSourceAndSink:Generic:DepositionRateSink")]
    public class ZoneContaminantSourceAndSink_Generic_DepositionRateSink
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DepositionRate { get; set; } = ;
        
[Description(@"Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the Initial Emission Rate. When the value is equal to 1.0, the time will be reset to zero.")]
[JsonProperty(@"Value in this schedule should be a fraction (generally 0.0 - 1.0) applied to the Initial Emission Rate. When the value is equal to 1.0, the time will be reset to zero.")]
public System.String ScheduleName { get; set; } = "";
    }
}
namespace EnergyPlus.LocationandClimate
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Specifies the building\'s location. Only one location is allowed. Weather data fil" +
        "e location, if it exists, will override this object.")]
    [JsonObject("Site:Location")]
    public class Site_Location
    {
        
[Description(@"+ is North, - is South, degree minutes represented in decimal (i.e. 30 minutes is .5)")]
[JsonProperty(@"+ is North, - is South, degree minutes represented in decimal (i.e. 30 minutes is .5)")]
public System.Single Latitude { get; set; } = 0;
        
[Description(@"- is West, + is East, degree minutes represented in decimal (i.e. 30 minutes is .5)")]
[JsonProperty(@"- is West, + is East, degree minutes represented in decimal (i.e. 30 minutes is .5)")]
public System.Single Longitude { get; set; } = 0;
        
[Description(@"basic these limits on the WorldTimeZone Map (2003) Time relative to GMT. Decimal hours.")]
[JsonProperty(@"basic these limits on the WorldTimeZone Map (2003) Time relative to GMT. Decimal hours.")]
public System.Single TimeZone { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Elevation { get; set; } = 0;
    }
    
    [Description("Captures the scheduling of a moving/reorienting building, or more likely a vessel" +
        "")]
    [JsonObject("Site:VariableLocation")]
    public class Site_VariableLocation
    {
        
[Description(@"The name of a schedule that defines the latitude of the building at any time. If not entered, the latitude defined in the Site:Location, or the default latitude, will be used for the entirety of the simulation")]
[JsonProperty(@"The name of a schedule that defines the latitude of the building at any time. If not entered, the latitude defined in the Site:Location, or the default latitude, will be used for the entirety of the simulation")]
public System.String BuildingLocationLatitudeSchedule { get; set; } = "";
        
[Description(@"The name of a schedule that defines the longitude of the building at any time. If not entered, the longitude defined in the Site:Location, or the default longitude, will be used for the entirety of the simulation")]
[JsonProperty(@"The name of a schedule that defines the longitude of the building at any time. If not entered, the longitude defined in the Site:Location, or the default longitude, will be used for the entirety of the simulation")]
public System.String BuildingLocationLongitudeSchedule { get; set; } = "";
        
[Description(@"The name of a schedule that defines the orientation of the building at any time. This orientation is based on a change from the original orientation. -- NEED TO REFINE THIS If not entered, the original orientation will be used for the entirety of the simulation")]
[JsonProperty(@"The name of a schedule that defines the orientation of the building at any time. This orientation is based on a change from the original orientation. -- NEED TO REFINE THIS If not entered, the original orientation will be used for the entirety of the simulation")]
public System.String BuildingLocationOrientationSchedule { get; set; } = "";
    }
    
    [Description(@"The design day object creates the parameters for the program to create the 24 hour weather profile that can be used for sizing as well as running to test the other simulation parameters. Parameters in this include a date (month and day), a day type (which uses the appropriate schedules for either sizing or simple tests), min/max temperatures, wind speeds, and solar radiation values.")]
    [JsonObject("SizingPeriod:DesignDay")]
    public class SizingPeriod_DesignDay
    {
        
[JsonProperty(@"")]
public System.Single Month { get; set; } = ;
        
[Description(@"must be valid for Month field")]
[JsonProperty(@"must be valid for Month field")]
public System.Single DayOfMonth { get; set; } = ;
        
[Description(@"Day Type selects the schedules appropriate for this design day")]
[JsonProperty(@"Day Type selects the schedules appropriate for this design day")]
public YesNoDefault DayType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"This field is required when field "Dry-Bulb Temperature Range Modifier Type" is not "TemperatureProfileSchedule".")]
[JsonProperty(@"This field is required when field "Dry-Bulb Temperature Range Modifier Type" is not "TemperatureProfileSchedule".")]
public System.Single MaximumDryBulbTemperature { get; set; } = ;
        
[Description(@"Must still produce appropriate maximum dry-bulb (within range) This field is not needed if Dry-Bulb Temperature Range Modifier Type is "delta".")]
[JsonProperty(@"Must still produce appropriate maximum dry-bulb (within range) This field is not needed if Dry-Bulb Temperature Range Modifier Type is "delta".")]
public System.Single DailyDryBulbTemperatureRange { get; set; } = 0;
        
[Description(@"Type of modifier to the dry-bulb temperature calculated for the timestep")]
[JsonProperty(@"Type of modifier to the dry-bulb temperature calculated for the timestep")]
public YesNoDefault DryBulbTemperatureRangeModifierType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DefaultMultipliers");
        
[Description(@"Only used when previous field is "MultiplierSchedule", "DifferenceSchedule" or "TemperatureProfileSchedule". For type "MultiplierSchedule"  the hour/time interval values should specify the fraction (0-1) of the dry-bulb temperature range to be subtracted from the maximum dry-bulb temperature for each timestep in the day For type "DifferenceSchedule" the values should specify a number to be subtracted from the maximum dry-bulb temperature for each timestep in the day. Note that numbers in the difference schedule cannot be negative as that would result in a higher maximum than the maximum previously specified. For type "TemperatureProfileSchedule" the values should specify the actual dry-bulb temperature for each timestep in the day.")]
[JsonProperty(@"Only used when previous field is "MultiplierSchedule", "DifferenceSchedule" or "TemperatureProfileSchedule". For type "MultiplierSchedule"  the hour/time interval values should specify the fraction (0-1) of the dry-bulb temperature range to be subtracted from the maximum dry-bulb temperature for each timestep in the day For type "DifferenceSchedule" the values should specify a number to be subtracted from the maximum dry-bulb temperature for each timestep in the day. Note that numbers in the difference schedule cannot be negative as that would result in a higher maximum than the maximum previously specified. For type "TemperatureProfileSchedule" the values should specify the actual dry-bulb temperature for each timestep in the day.")]
public System.String DryBulbTemperatureRangeModifierDayScheduleName { get; set; } = "";
        
[Description(@"values/schedules indicated here and in subsequent fields create the humidity values in the 24 hour design day conditions profile.")]
[JsonProperty(@"values/schedules indicated here and in subsequent fields create the humidity values in the 24 hour design day conditions profile.")]
public YesNoDefault HumidityConditionType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WetBulb");
        
[Description(@"Wetbulb or dewpoint temperature coincident with the maximum temperature. Required only if field Humidity Condition Type is "Wetbulb", "Dewpoint", "WetBulbProfileMultiplierSchedule", "WetBulbProfileDifferenceSchedule", or "WetBulbProfileDefaultMultipliers"")]
[JsonProperty(@"Wetbulb or dewpoint temperature coincident with the maximum temperature. Required only if field Humidity Condition Type is "Wetbulb", "Dewpoint", "WetBulbProfileMultiplierSchedule", "WetBulbProfileDifferenceSchedule", or "WetBulbProfileDefaultMultipliers"")]
public System.Single WetbulbOrDewpointAtMaximumDryBulb { get; set; } = ;
        
[Description(@"Only used when Humidity Condition Type is "RelativeHumiditySchedule", "WetBulbProfileMultiplierSchedule", or "WetBulbProfileDifferenceSchedule" For type "RelativeHumiditySchedule", the hour/time interval values should specify relative humidity (percent) from 0.0 to 100.0. For type "WetBulbProfileMultiplierSchedule" the hour/time interval values should specify the fraction (0-1) of the wet-bulb temperature range to be subtracted from the maximum wet-bulb temperature for each timestep in the day (units = Fraction) For type "WetBulbProfileDifferenceSchedule" the values should specify a number to be subtracted from the maximum wet-bulb temperature for each timestep in the day. (units = deltaC)")]
[JsonProperty(@"Only used when Humidity Condition Type is "RelativeHumiditySchedule", "WetBulbProfileMultiplierSchedule", or "WetBulbProfileDifferenceSchedule" For type "RelativeHumiditySchedule", the hour/time interval values should specify relative humidity (percent) from 0.0 to 100.0. For type "WetBulbProfileMultiplierSchedule" the hour/time interval values should specify the fraction (0-1) of the wet-bulb temperature range to be subtracted from the maximum wet-bulb temperature for each timestep in the day (units = Fraction) For type "WetBulbProfileDifferenceSchedule" the values should specify a number to be subtracted from the maximum wet-bulb temperature for each timestep in the day. (units = deltaC)")]
public System.String HumidityConditionDayScheduleName { get; set; } = "";
        
[Description(@"Humidity ratio coincident with the maximum temperature (constant humidity ratio throughout day). Required only if field Humidity Condition Type is "HumidityRatio".")]
[JsonProperty(@"Humidity ratio coincident with the maximum temperature (constant humidity ratio throughout day). Required only if field Humidity Condition Type is "HumidityRatio".")]
public System.Single HumidityRatioAtMaximumDryBulb { get; set; } = ;
        
[Description(@"Enthalpy coincident with the maximum temperature. Required only if field Humidity Condition Type is "Enthalpy".")]
[JsonProperty(@"Enthalpy coincident with the maximum temperature. Required only if field Humidity Condition Type is "Enthalpy".")]
public System.Single EnthalpyAtMaximumDryBulb { get; set; } = ;
        
[Description(@"Required only if Humidity Condition Type = "WetbulbProfileMultiplierSchedule" or "WetBulbProfileDefaultMultipliers"")]
[JsonProperty(@"Required only if Humidity Condition Type = "WetbulbProfileMultiplierSchedule" or "WetBulbProfileDefaultMultipliers"")]
public System.Single DailyWetBulbTemperatureRange { get; set; } = ;
        
[Description(@"This field's value is also checked against the calculated "standard barometric pressure" for the location. If out of range (>10%) or blank, then is replaced by standard value.")]
[JsonProperty(@"This field's value is also checked against the calculated "standard barometric pressure" for the location. If out of range (>10%) or blank, then is replaced by standard value.")]
public System.Single BarometricPressure { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WindSpeed { get; set; } = ;
        
[Description(@"North=0.0 East=90.0 0 and 360 are the same direction.")]
[JsonProperty(@"North=0.0 East=90.0 0 and 360 are the same direction.")]
public System.Single WindDirection { get; set; } = ;
        
[Description(@"Yes is raining (all day), No is not raining")]
[JsonProperty(@"Yes is raining (all day), No is not raining")]
public YesNoDefault RainIndicator { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Yes is Snow on Ground, No is no Snow on Ground")]
[JsonProperty(@"Yes is Snow on Ground, No is no Snow on Ground")]
public YesNoDefault SnowIndicator { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Yes -- use schedules modified for Daylight Saving Time Schedules. No - do not use schedules modified for Daylight Saving Time Schedules")]
[JsonProperty(@"Yes -- use schedules modified for Daylight Saving Time Schedules. No - do not use schedules modified for Daylight Saving Time Schedules")]
public YesNoDefault DaylightSavingTimeIndicator { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public YesNoDefault SolarModelIndicator { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ASHRAEClearSky");
        
[Description(@"if Solar Model Indicator = Schedule, then beam schedule name (for day)")]
[JsonProperty(@"if Solar Model Indicator = Schedule, then beam schedule name (for day)")]
public System.String BeamSolarDayScheduleName { get; set; } = "";
        
[Description(@"if Solar Model Indicator = Schedule, then diffuse schedule name (for day)")]
[JsonProperty(@"if Solar Model Indicator = Schedule, then diffuse schedule name (for day)")]
public System.String DiffuseSolarDayScheduleName { get; set; } = "";
        
[Description(@"Required if Solar Model Indicator = ASHRAETau or ASHRAETau2017 ASHRAETau2017 solar model can be used with 2013 and 2017 HOF matching taub")]
[JsonProperty(@"Required if Solar Model Indicator = ASHRAETau or ASHRAETau2017 ASHRAETau2017 solar model can be used with 2013 and 2017 HOF matching taub")]
public System.Single AshraeClearSkyOpticalDepthForBeamIrradianceTaub { get; set; } = 0;
        
[Description(@"Required if Solar Model Indicator = ASHRAETau or ASHRAETau2017 ASHRAETau2017 solar model can be used with 2013 and 2017 HOF matching taud")]
[JsonProperty(@"Required if Solar Model Indicator = ASHRAETau or ASHRAETau2017 ASHRAETau2017 solar model can be used with 2013 and 2017 HOF matching taud")]
public System.Single AshraeClearSkyOpticalDepthForDiffuseIrradianceTaud { get; set; } = 0;
        
[Description(@"Used if Sky Model Indicator = ASHRAEClearSky or ZhangHuang 0.0 is totally unclear, 1.0 is totally clear")]
[JsonProperty(@"Used if Sky Model Indicator = ASHRAEClearSky or ZhangHuang 0.0 is totally unclear, 1.0 is totally clear")]
public System.Single SkyClearness { get; set; } = 0;
        
[Description(@"If used this design day will be run with a custom limit on the maximum number of days that are repeated for warmup. Limiting the number of warmup days can improve run time.")]
[JsonProperty(@"If used this design day will be run with a custom limit on the maximum number of days that are repeated for warmup. Limiting the number of warmup days can improve run time.")]
public System.Single MaximumNumberWarmupDays { get; set; } = ;
        
[Description(@"If used this can control if you want the thermal history to be reset at the beginning of the design day. When using a series of similiar design days, this field can be used to retain warmup state from the previous design day.")]
[JsonProperty(@"If used this can control if you want the thermal history to be reset at the beginning of the design day. When using a series of similiar design days, this field can be used to retain warmup state from the previous design day.")]
public YesNoDefault BeginEnvironmentResetMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FullResetAtBeginEnvironment");
    }
    
    public enum DayTypeType
    {
        
        [JsonProperty("CustomDay1")]
        CustomDay = 0,
        
        [JsonProperty("CustomDay2")]
        CustomDay = 1,
        
        [JsonProperty("Friday")]
        Friday = 2,
        
        [JsonProperty("Holiday")]
        Holiday = 3,
        
        [JsonProperty("Monday")]
        Monday = 4,
        
        [JsonProperty("Saturday")]
        Saturday = 5,
        
        [JsonProperty("SummerDesignDay")]
        SummerDesignDay = 6,
        
        [JsonProperty("Sunday")]
        Sunday = 7,
        
        [JsonProperty("Thursday")]
        Thursday = 8,
        
        [JsonProperty("Tuesday")]
        Tuesday = 9,
        
        [JsonProperty("Wednesday")]
        Wednesday = 10,
        
        [JsonProperty("WinterDesignDay")]
        WinterDesignDay = 11,
    }
    
    public enum DryBulbTemperatureRangeModifierTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DefaultMultipliers")]
        DefaultMultipliers = 1,
        
        [JsonProperty("DifferenceSchedule")]
        DifferenceSchedule = 2,
        
        [JsonProperty("MultiplierSchedule")]
        MultiplierSchedule = 3,
        
        [JsonProperty("TemperatureProfileSchedule")]
        TemperatureProfileSchedule = 4,
    }
    
    public enum HumidityConditionTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DewPoint")]
        DewPoint = 1,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 2,
        
        [JsonProperty("HumidityRatio")]
        HumidityRatio = 3,
        
        [JsonProperty("RelativeHumiditySchedule")]
        RelativeHumiditySchedule = 4,
        
        [JsonProperty("WetBulb")]
        WetBulb = 5,
        
        [JsonProperty("WetBulbProfileDefaultMultipliers")]
        WetBulbProfileDefaultMultipliers = 6,
        
        [JsonProperty("WetBulbProfileDifferenceSchedule")]
        WetBulbProfileDifferenceSchedule = 7,
        
        [JsonProperty("WetBulbProfileMultiplierSchedule")]
        WetBulbProfileMultiplierSchedule = 8,
    }
    
    public enum SolarModelIndicatorType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASHRAEClearSky")]
        ASHRAEClearSky = 1,
        
        [JsonProperty("ASHRAETau")]
        ASHRAETau = 2,
        
        [JsonProperty("ASHRAETau2017")]
        ASHRAETau = 3,
        
        [JsonProperty("Schedule")]
        Schedule = 4,
        
        [JsonProperty("ZhangHuang")]
        ZhangHuang = 5,
    }
    
    public enum BeginEnvironmentResetModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FullResetAtBeginEnvironment")]
        FullResetAtBeginEnvironment = 1,
        
        [JsonProperty("SuppressAllBeginEnvironmentResets")]
        SuppressAllBeginEnvironmentResets = 2,
    }
    
    [Description("Use a weather file period for design sizing calculations.")]
    [JsonObject("SizingPeriod:WeatherFileDays")]
    public class SizingPeriod_WeatherFileDays
    {
        
[JsonProperty(@"")]
public System.Single BeginMonth { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single BeginDayOfMonth { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single EndMonth { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single EndDayOfMonth { get; set; } = ;
        
[Description(@"=[|Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|SummerDesignDay|WinterDesignDay| |CustomDay1|CustomDay2]; if you use SummerDesignDay or WinterDesignDay or the CustomDays then this will apply to the whole period; other days (i.e., Monday) will signify a start day and normal sequence of subsequent days")]
[JsonProperty(@"=[|Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|SummerDesignDay|WinterDesignDay| |CustomDay1|CustomDay2]; if you use SummerDesignDay or WinterDesignDay or the CustomDays then this will apply to the whole period; other days (i.e., Monday) will signify a start day and normal sequence of subsequent days")]
public YesNoDefault DayOfWeekForStartDay { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Monday");
        
[Description(@"If yes or blank, use daylight saving period as specified on Weatherfile. If no, do not use the daylight saving period as specified on the Weatherfile.")]
[JsonProperty(@"If yes or blank, use daylight saving period as specified on Weatherfile. If no, do not use the daylight saving period as specified on the Weatherfile.")]
public YesNoDefault UseWeatherFileDaylightSavingPeriod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault UseWeatherFileRainAndSnowIndicators { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
    }
    
    public enum DayOfWeekForStartDayType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CustomDay1")]
        CustomDay = 1,
        
        [JsonProperty("CustomDay2")]
        CustomDay = 2,
        
        [JsonProperty("Friday")]
        Friday = 3,
        
        [JsonProperty("Monday")]
        Monday = 4,
        
        [JsonProperty("Saturday")]
        Saturday = 5,
        
        [JsonProperty("SummerDesignDay")]
        SummerDesignDay = 6,
        
        [JsonProperty("Sunday")]
        Sunday = 7,
        
        [JsonProperty("Thursday")]
        Thursday = 8,
        
        [JsonProperty("Tuesday")]
        Tuesday = 9,
        
        [JsonProperty("Wednesday")]
        Wednesday = 10,
        
        [JsonProperty("WinterDesignDay")]
        WinterDesignDay = 11,
    }
    
    [Description("Use a weather file period for design sizing calculations. EPW weather files are c" +
        "reated with typical and extreme periods created heuristically from the weather f" +
        "ile data. For more details on these periods, see AuxiliaryPrograms document.")]
    [JsonObject("SizingPeriod:WeatherFileConditionType")]
    public class SizingPeriod_WeatherFileConditionType
    {
        
[Description(@"Following is a list of all possible types of Extreme and Typical periods that might be identified in the Weather File. Not all possible types are available for all weather files.")]
[JsonProperty(@"Following is a list of all possible types of Extreme and Typical periods that might be identified in the Weather File. Not all possible types are available for all weather files.")]
public YesNoDefault PeriodSelection { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"=[|Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|SummerDesignDay|WinterDesignDay| |CustomDay1|CustomDay2]; if you use SummerDesignDay or WinterDesignDay or the CustomDays then this will apply to the whole period; other days (i.e., Monday) will signify a start day and normal sequence of subsequent days")]
[JsonProperty(@"=[|Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|SummerDesignDay|WinterDesignDay| |CustomDay1|CustomDay2]; if you use SummerDesignDay or WinterDesignDay or the CustomDays then this will apply to the whole period; other days (i.e., Monday) will signify a start day and normal sequence of subsequent days")]
public YesNoDefault DayOfWeekForStartDay { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Monday");
        
[Description(@"If yes or blank, use daylight saving period as specified on Weatherfile. If no, do not use the daylight saving period as specified on the Weatherfile.")]
[JsonProperty(@"If yes or blank, use daylight saving period as specified on Weatherfile. If no, do not use the daylight saving period as specified on the Weatherfile.")]
public YesNoDefault UseWeatherFileDaylightSavingPeriod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault UseWeatherFileRainAndSnowIndicators { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
    }
    
    public enum PeriodSelectionType
    {
        
        [JsonProperty("AutumnTypical")]
        AutumnTypical = 0,
        
        [JsonProperty("DrySeason")]
        DrySeason = 1,
        
        [JsonProperty("NoDrySeason")]
        NoDrySeason = 2,
        
        [JsonProperty("NoDrySeasonMax")]
        NoDrySeasonMax = 3,
        
        [JsonProperty("NoDrySeasonMin")]
        NoDrySeasonMin = 4,
        
        [JsonProperty("NoWetSeason")]
        NoWetSeason = 5,
        
        [JsonProperty("NoWetSeasonMax")]
        NoWetSeasonMax = 6,
        
        [JsonProperty("NoWetSeasonMin")]
        NoWetSeasonMin = 7,
        
        [JsonProperty("SpringTypical")]
        SpringTypical = 8,
        
        [JsonProperty("SummerExtreme")]
        SummerExtreme = 9,
        
        [JsonProperty("SummerTypical")]
        SummerTypical = 10,
        
        [JsonProperty("TropicalCold")]
        TropicalCold = 11,
        
        [JsonProperty("TropicalHot")]
        TropicalHot = 12,
        
        [JsonProperty("WetSeason")]
        WetSeason = 13,
        
        [JsonProperty("WinterExtreme")]
        WinterExtreme = 14,
        
        [JsonProperty("WinterTypical")]
        WinterTypical = 15,
    }
    
    public enum DayOfWeekForStartDayType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CustomDay1")]
        CustomDay = 1,
        
        [JsonProperty("CustomDay2")]
        CustomDay = 2,
        
        [JsonProperty("Friday")]
        Friday = 3,
        
        [JsonProperty("Monday")]
        Monday = 4,
        
        [JsonProperty("Saturday")]
        Saturday = 5,
        
        [JsonProperty("SummerDesignDay")]
        SummerDesignDay = 6,
        
        [JsonProperty("Sunday")]
        Sunday = 7,
        
        [JsonProperty("Thursday")]
        Thursday = 8,
        
        [JsonProperty("Tuesday")]
        Tuesday = 9,
        
        [JsonProperty("Wednesday")]
        Wednesday = 10,
        
        [JsonProperty("WinterDesignDay")]
        WinterDesignDay = 11,
    }
    
    [Description("Specify a range of dates and other parameters for a simulation. Multiple run peri" +
        "ods may be input, but they may not overlap.")]
    [JsonObject("RunPeriod")]
    public class RunPeriod
    {
        
[JsonProperty(@"")]
public System.Single BeginMonth { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single BeginDayOfMonth { get; set; } = ;
        
[Description(@"Start year of the simulation, if this field is specified it must agree with the Day of Week for Start Day If this field is blank, the year will be selected to match the weekday, which is Sunday if not specified")]
[JsonProperty(@"Start year of the simulation, if this field is specified it must agree with the Day of Week for Start Day If this field is blank, the year will be selected to match the weekday, which is Sunday if not specified")]
public System.Single BeginYear { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single EndMonth { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single EndDayOfMonth { get; set; } = ;
        
[Description(@"end year of simulation, if specified")]
[JsonProperty(@"end year of simulation, if specified")]
public System.Single EndYear { get; set; } = ;
        
[Description(@"=[Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday]; If no year is input, this field will default to Sunday If a year is input and this field is blank, the correct weekday is determined")]
[JsonProperty(@"=[Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday]; If no year is input, this field will default to Sunday If a year is input and this field is blank, the correct weekday is determined")]
public YesNoDefault DayOfWeekForStartDay { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"If yes or blank, use holidays as specified on Weatherfile. If no, do not use the holidays specified on the Weatherfile. Note: You can still specify holidays/special days using the RunPeriodControl:SpecialDays object(s).")]
[JsonProperty(@"If yes or blank, use holidays as specified on Weatherfile. If no, do not use the holidays specified on the Weatherfile. Note: You can still specify holidays/special days using the RunPeriodControl:SpecialDays object(s).")]
public YesNoDefault UseWeatherFileHolidaysAndSpecialDays { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[Description(@"If yes or blank, use daylight saving period as specified on Weatherfile. If no, do not use the daylight saving period as specified on the Weatherfile.")]
[JsonProperty(@"If yes or blank, use daylight saving period as specified on Weatherfile. If no, do not use the daylight saving period as specified on the Weatherfile.")]
public YesNoDefault UseWeatherFileDaylightSavingPeriod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[Description(@"if yes and single day holiday falls on weekend, "holiday" occurs on following Monday")]
[JsonProperty(@"if yes and single day holiday falls on weekend, "holiday" occurs on following Monday")]
public YesNoDefault ApplyWeekendHolidayRule { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public YesNoDefault UseWeatherFileRainIndicators { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault UseWeatherFileSnowIndicators { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault TreatWeatherAsActual { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
    }
    
    public enum DayOfWeekForStartDayType
    {
        
        [JsonProperty("Friday")]
        Friday = 0,
        
        [JsonProperty("Monday")]
        Monday = 1,
        
        [JsonProperty("Saturday")]
        Saturday = 2,
        
        [JsonProperty("Sunday")]
        Sunday = 3,
        
        [JsonProperty("Thursday")]
        Thursday = 4,
        
        [JsonProperty("Tuesday")]
        Tuesday = 5,
        
        [JsonProperty("Wednesday")]
        Wednesday = 6,
    }
    
    [Description(@"This object sets up holidays/special days to be used during weather file run periods. (These are not used with SizingPeriod:* objects.) Depending on the value in the run period, days on the weather file may also be used. However, the weather file specification will take precedence over any specification shown here. (No error message on duplicate days or overlapping days).")]
    [JsonObject("RunPeriodControl:SpecialDays")]
    public class RunPeriodControl_SpecialDays
    {
        
[Description(@"Dates can be several formats: <number>/<number>  (month/day) <number> <Month> <Month> <number> <Nth> <Weekday> in <Month) Last <WeekDay> in <Month> <Month> can be January, February, March, April, May, June, July, August, September, October, November, December Months can be the first 3 letters of the month <Weekday> can be Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday <Nth> can be 1 or 1st, 2 or 2nd, etc. up to 5(?)")]
[JsonProperty(@"Dates can be several formats: <number>/<number>  (month/day) <number> <Month> <Month> <number> <Nth> <Weekday> in <Month) Last <WeekDay> in <Month> <Month> can be January, February, March, April, May, June, July, August, September, October, November, December Months can be the first 3 letters of the month <Weekday> can be Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday <Nth> can be 1 or 1st, 2 or 2nd, etc. up to 5(?)")]
public System.String StartDate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single Duration { get; set; } = 1;
        
[Description(@"Special Day Type selects the schedules appropriate for each day so labeled")]
[JsonProperty(@"Special Day Type selects the schedules appropriate for each day so labeled")]
public YesNoDefault SpecialDayType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Holiday");
    }
    
    public enum SpecialDayTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CustomDay1")]
        CustomDay = 1,
        
        [JsonProperty("CustomDay2")]
        CustomDay = 2,
        
        [JsonProperty("Holiday")]
        Holiday = 3,
        
        [JsonProperty("SummerDesignDay")]
        SummerDesignDay = 4,
        
        [JsonProperty("WinterDesignDay")]
        WinterDesignDay = 5,
    }
    
    [Description(@"This object sets up the daylight saving time period for any RunPeriod. Ignores any daylight saving time period on the weather file and uses this definition. These are not used with SizingPeriod:DesignDay objects. Use with SizingPeriod:WeatherFileDays object can be controlled in that object.")]
    [JsonObject("RunPeriodControl:DaylightSavingTime")]
    public class RunPeriodControl_DaylightSavingTime
    {
        
[JsonProperty(@"")]
public System.String StartDate { get; set; } = "";
        
[Description(@"Dates can be several formats: <number>/<number>  (month/day) <number> <Month> <Month> <number> <Nth> <Weekday> in <Month) Last <WeekDay> in <Month> <Month> can be January, February, March, April, May, June, July, August, September, October, November, December Months can be the first 3 letters of the month <Weekday> can be Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday <Nth> can be 1 or 1st, 2 or 2nd, etc. up to 5(?)")]
[JsonProperty(@"Dates can be several formats: <number>/<number>  (month/day) <number> <Month> <Month> <number> <Nth> <Weekday> in <Month) Last <WeekDay> in <Month> <Month> can be January, February, March, April, May, June, July, August, September, October, November, December Months can be the first 3 letters of the month <Weekday> can be Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday <Nth> can be 1 or 1st, 2 or 2nd, etc. up to 5(?)")]
public System.String EndDate { get; set; } = "";
    }
    
    [Description("This object is used to override internal sky temperature calculations.")]
    [JsonObject("WeatherProperty:SkyTemperature")]
    public class WeatherProperty_SkyTemperature
    {
        
[Description(@"The field indicates that the sky temperature will be imported from external schedules or calculated by alternative methods other than default.")]
[JsonProperty(@"The field indicates that the sky temperature will be imported from external schedules or calculated by alternative methods other than default.")]
public YesNoDefault CalculationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ClarkAllen");
        
[Description(@"if name matches a SizingPeriod:DesignDay, put in a day schedule of this name if name is for a SizingPeriod:WeatherFileDays, SizingPeriod:WeatherFileConditionType or RunPeriod, put in a full year schedule that covers the appropriate days. Required if Calculation Type is ScheduleValue, DifferenceScheduleDryBulbValue or DifferenceScheduleDewPointValue.")]
[JsonProperty(@"if name matches a SizingPeriod:DesignDay, put in a day schedule of this name if name is for a SizingPeriod:WeatherFileDays, SizingPeriod:WeatherFileConditionType or RunPeriod, put in a full year schedule that covers the appropriate days. Required if Calculation Type is ScheduleValue, DifferenceScheduleDryBulbValue or DifferenceScheduleDewPointValue.")]
public System.String ScheduleName { get; set; } = "";
        
[Description(@"If yes or blank, use Horizontal IR values from weather file when present, otherwise use the specified sky model. If no, always use the specified sky model and ignore the horizontal IR values from the weather file. For Calculation Type = ScheduleValue, DifferenceScheduleDryBulbValue or DifferenceScheduleDewPointValue, this field is ignored and the scheduled values are used.")]
[JsonProperty(@"If yes or blank, use Horizontal IR values from weather file when present, otherwise use the specified sky model. If no, always use the specified sky model and ignore the horizontal IR values from the weather file. For Calculation Type = ScheduleValue, DifferenceScheduleDryBulbValue or DifferenceScheduleDewPointValue, this field is ignored and the scheduled values are used.")]
public YesNoDefault UseWeatherFileHorizontalIr { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
    }
    
    public enum CalculationTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BerdahlMartin")]
        BerdahlMartin = 1,
        
        [JsonProperty("Brunt")]
        Brunt = 2,
        
        [JsonProperty("ClarkAllen")]
        ClarkAllen = 3,
        
        [JsonProperty("DifferenceScheduleDewPointValue")]
        DifferenceScheduleDewPointValue = 4,
        
        [JsonProperty("DifferenceScheduleDryBulbValue")]
        DifferenceScheduleDryBulbValue = 5,
        
        [JsonProperty("Idso")]
        Idso = 6,
        
        [JsonProperty("ScheduleValue")]
        ScheduleValue = 7,
    }
    
    [Description("This object should only be used for non-standard weather data. Standard weather d" +
        "ata such as TMY2, IWEC, and ASHRAE design day data are all measured at the defau" +
        "lt conditions and do not require this object.")]
    [JsonObject("Site:WeatherStation")]
    public class Site_WeatherStation
    {
        
[JsonProperty(@"")]
public System.Single WindSensorHeightAboveGround { get; set; } = 10;
        
[JsonProperty(@"")]
public System.Single WindSpeedProfileExponent { get; set; } = 0.14;
        
[JsonProperty(@"")]
public System.Single WindSpeedProfileBoundaryLayerThickness { get; set; } = 270;
        
[JsonProperty(@"")]
public System.Single AirTemperatureSensorHeightAboveGround { get; set; } = 1.5;
    }
    
    [Description(@"This object is used if the user requires advanced control over height-dependent variations in wind speed and temperature. When this object is not present, the default model for temperature dependence on height is used, and the wind speed is modeled according to the Terrain field of the BUILDING object.")]
    [JsonObject("Site:HeightVariation")]
    public class Site_HeightVariation
    {
        
[Description(@"Set to zero for no wind speed dependence on height.")]
[JsonProperty(@"Set to zero for no wind speed dependence on height.")]
public System.Single WindSpeedProfileExponent { get; set; } = 0.22;
        
[JsonProperty(@"")]
public System.Single WindSpeedProfileBoundaryLayerThickness { get; set; } = 370;
        
[Description(@"Set to zero for no air temperature dependence on height.")]
[JsonProperty(@"Set to zero for no air temperature dependence on height.")]
public System.Single AirTemperatureGradientCoefficient { get; set; } = 0.0065;
    }
    
    [Description(@"These temperatures are specifically for those surfaces that have the outside environment of ""Ground"". Documentation about what values these should be is located in the Auxiliary programs document (Ground Heat Transfer) as well as the InputOutput Reference. CAUTION - Do not use the ""undisturbed"" ground temperatures from the weather data. These values are too extreme for the soil under a conditioned building. For best results, use the Slab or Basement program to calculate custom monthly average ground temperatures (see Auxiliary Programs). For typical commercial buildings in the USA, a reasonable default value is 2C less than the average indoor space temperature.")]
    [JsonObject("Site:GroundTemperature:BuildingSurface")]
    public class Site_GroundTemperature_BuildingSurface
    {
        
[JsonProperty(@"")]
public System.Single JanuaryGroundTemperature { get; set; } = 18;
        
[JsonProperty(@"")]
public System.Single FebruaryGroundTemperature { get; set; } = 18;
        
[JsonProperty(@"")]
public System.Single MarchGroundTemperature { get; set; } = 18;
        
[JsonProperty(@"")]
public System.Single AprilGroundTemperature { get; set; } = 18;
        
[JsonProperty(@"")]
public System.Single MayGroundTemperature { get; set; } = 18;
        
[JsonProperty(@"")]
public System.Single JuneGroundTemperature { get; set; } = 18;
        
[JsonProperty(@"")]
public System.Single JulyGroundTemperature { get; set; } = 18;
        
[JsonProperty(@"")]
public System.Single AugustGroundTemperature { get; set; } = 18;
        
[JsonProperty(@"")]
public System.Single SeptemberGroundTemperature { get; set; } = 18;
        
[JsonProperty(@"")]
public System.Single OctoberGroundTemperature { get; set; } = 18;
        
[JsonProperty(@"")]
public System.Single NovemberGroundTemperature { get; set; } = 18;
        
[JsonProperty(@"")]
public System.Single DecemberGroundTemperature { get; set; } = 18;
    }
    
    [Description("These temperatures are specifically for underground walls and ground floors defin" +
        "ed with the C-factor and F-factor methods, and should be close to the monthly av" +
        "erage outdoor air temperature delayed by 3 months for the location.")]
    [JsonObject("Site:GroundTemperature:FCfactorMethod")]
    public class Site_GroundTemperature_FCfactorMethod
    {
        
[JsonProperty(@"")]
public System.Single JanuaryGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single FebruaryGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single MarchGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single AprilGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single MayGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single JuneGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single JulyGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single AugustGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single SeptemberGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single OctoberGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single NovemberGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single DecemberGroundTemperature { get; set; } = 13;
    }
    
    [Description("These temperatures are specifically for the Surface Ground Heat Exchanger and sho" +
        "uld probably be close to the average outdoor air temperature for the location. T" +
        "hey are not used in other models.")]
    [JsonObject("Site:GroundTemperature:Shallow")]
    public class Site_GroundTemperature_Shallow
    {
        
[JsonProperty(@"")]
public System.Single JanuarySurfaceGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single FebruarySurfaceGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single MarchSurfaceGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single AprilSurfaceGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single MaySurfaceGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single JuneSurfaceGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single JulySurfaceGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single AugustSurfaceGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single SeptemberSurfaceGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single OctoberSurfaceGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single NovemberSurfaceGroundTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single DecemberSurfaceGroundTemperature { get; set; } = 13;
    }
    
    [Description("These temperatures are specifically for the ground heat exchangers that would use" +
        " \"deep\" (3-4 m depth) ground temperatures for their heat source. They are not us" +
        "ed in other models.")]
    [JsonObject("Site:GroundTemperature:Deep")]
    public class Site_GroundTemperature_Deep
    {
        
[JsonProperty(@"")]
public System.Single JanuaryDeepGroundTemperature { get; set; } = 16;
        
[JsonProperty(@"")]
public System.Single FebruaryDeepGroundTemperature { get; set; } = 16;
        
[JsonProperty(@"")]
public System.Single MarchDeepGroundTemperature { get; set; } = 16;
        
[JsonProperty(@"")]
public System.Single AprilDeepGroundTemperature { get; set; } = 16;
        
[JsonProperty(@"")]
public System.Single MayDeepGroundTemperature { get; set; } = 16;
        
[JsonProperty(@"")]
public System.Single JuneDeepGroundTemperature { get; set; } = 16;
        
[JsonProperty(@"")]
public System.Single JulyDeepGroundTemperature { get; set; } = 16;
        
[JsonProperty(@"")]
public System.Single AugustDeepGroundTemperature { get; set; } = 16;
        
[JsonProperty(@"")]
public System.Single SeptemberDeepGroundTemperature { get; set; } = 16;
        
[JsonProperty(@"")]
public System.Single OctoberDeepGroundTemperature { get; set; } = 16;
        
[JsonProperty(@"")]
public System.Single NovemberDeepGroundTemperature { get; set; } = 16;
        
[JsonProperty(@"")]
public System.Single DecemberDeepGroundTemperature { get; set; } = 16;
    }
    
    [Description("Undisturbed ground temperature object using a detailed finite difference 1-D mode" +
        "l")]
    [JsonObject("Site:GroundTemperature:Undisturbed:FiniteDifference")]
    public class Site_GroundTemperature_Undisturbed_FiniteDifference
    {
        
[JsonProperty(@"")]
public System.Single SoilThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SoilDensity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SoilSpecificHeat { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SoilMoistureContentVolumeFraction { get; set; } = 30;
        
[JsonProperty(@"")]
public System.Single SoilMoistureContentVolumeFractionAtSaturation { get; set; } = 50;
        
[Description(@"This specifies the ground cover effects during evapotranspiration calculations. The value roughly represents the following cases: = 0   : concrete or other solid, non-permeable ground surface material = 0.5 : short grass, much like a manicured lawn = 1   : standard reference state (12 cm grass) = 1.5 : wild growth")]
[JsonProperty(@"This specifies the ground cover effects during evapotranspiration calculations. The value roughly represents the following cases: = 0   : concrete or other solid, non-permeable ground surface material = 0.5 : short grass, much like a manicured lawn = 1   : standard reference state (12 cm grass) = 1.5 : wild growth")]
public System.Single EvapotranspirationGroundCoverParameter { get; set; } = 0.4;
    }
    
    [Description("Undisturbed ground temperature object using the Kusuda-Achenbach 1965 correlation" +
        ".")]
    [JsonObject("Site:GroundTemperature:Undisturbed:KusudaAchenbach")]
    public class Site_GroundTemperature_Undisturbed_KusudaAchenbach
    {
        
[JsonProperty(@"")]
public System.Single SoilThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SoilDensity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SoilSpecificHeat { get; set; } = ;
        
[Description(@"Annual average surface temperature If left blank the Site:GroundTemperature:Shallow object must be included in the input The soil temperature, amplitude, and phase shift must all be included or omitted together")]
[JsonProperty(@"Annual average surface temperature If left blank the Site:GroundTemperature:Shallow object must be included in the input The soil temperature, amplitude, and phase shift must all be included or omitted together")]
public System.Single AverageSoilSurfaceTemperature { get; set; } = ;
        
[Description(@"Annual average surface temperature variation from average. If left blank the Site:GroundTemperature:Shallow object must be included in the input The soil temperature, amplitude, and phase shift must all be included or omitted together")]
[JsonProperty(@"Annual average surface temperature variation from average. If left blank the Site:GroundTemperature:Shallow object must be included in the input The soil temperature, amplitude, and phase shift must all be included or omitted together")]
public System.Single AverageAmplitudeOfSurfaceTemperature { get; set; } = ;
        
[Description(@"The phase shift of minimum surface temperature, or the day of the year when the minimum surface temperature occurs. If left blank the Site:GroundTemperature:Shallow object must be included in the input The soil temperature, amplitude, and phase shift must all be included or omitted together")]
[JsonProperty(@"The phase shift of minimum surface temperature, or the day of the year when the minimum surface temperature occurs. If left blank the Site:GroundTemperature:Shallow object must be included in the input The soil temperature, amplitude, and phase shift must all be included or omitted together")]
public System.Single PhaseShiftOfMinimumSurfaceTemperature { get; set; } = ;
    }
    
    [Description("Undisturbed ground temperature object using the Xing 2014 2 harmonic parameter mo" +
        "del.")]
    [JsonObject("Site:GroundTemperature:Undisturbed:Xing")]
    public class Site_GroundTemperature_Undisturbed_Xing
    {
        
[JsonProperty(@"")]
public System.Single SoilThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SoilDensity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SoilSpecificHeat { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single AverageSoilSurfaceTempeature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SoilSurfaceTemperatureAmplitude { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SoilSurfaceTemperatureAmplitude { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PhaseShiftOfTemperatureAmplitude { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PhaseShiftOfTemperatureAmplitude { get; set; } = ;
    }
    
    [Description("Ground-coupled slab model for on-grade and in-grade cases with or without insulat" +
        "ion.")]
    [JsonObject("Site:GroundDomain:Slab")]
    public class Site_GroundDomain_Slab
    {
        
[JsonProperty(@"")]
public System.Single GroundDomainDepth { get; set; } = 10;
        
[JsonProperty(@"")]
public System.Single AspectRatio { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single PerimeterOffset { get; set; } = 5;
        
[JsonProperty(@"")]
public System.Single SoilThermalConductivity { get; set; } = 1.5;
        
[JsonProperty(@"")]
public System.Single SoilDensity { get; set; } = 2800;
        
[JsonProperty(@"")]
public System.Single SoilSpecificHeat { get; set; } = 850;
        
[JsonProperty(@"")]
public System.Single SoilMoistureContentVolumeFraction { get; set; } = 30;
        
[JsonProperty(@"")]
public System.Single SoilMoistureContentVolumeFractionAtSaturation { get; set; } = 50;
        
[JsonProperty(@"")]
public YesNoDefault UndisturbedGroundTemperatureModelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String UndisturbedGroundTemperatureModelName { get; set; } = "";
        
[Description(@"This specifies the ground cover effects during evapotranspiration calculations. The value roughly represents the following cases: = 0   : concrete or other solid, non-permeable ground surface material = 0.5 : short grass, much like a manicured lawn = 1   : standard reference state (12 cm grass) = 1.5 : wild growth")]
[JsonProperty(@"This specifies the ground cover effects during evapotranspiration calculations. The value roughly represents the following cases: = 0   : concrete or other solid, non-permeable ground surface material = 0.5 : short grass, much like a manicured lawn = 1   : standard reference state (12 cm grass) = 1.5 : wild growth")]
public System.Single EvapotranspirationGroundCoverParameter { get; set; } = 0.4;
        
[JsonProperty(@"")]
public System.String SlabBoundaryConditionModelName { get; set; } = "";
        
[Description(@"This field specifies whether the slab is located "in-grade" or "on-grade"")]
[JsonProperty(@"This field specifies whether the slab is located "in-grade" or "on-grade"")]
public YesNoDefault SlabLocation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Only applicable for the in-grade case")]
[JsonProperty(@"Only applicable for the in-grade case")]
public System.String SlabMaterialName { get; set; } = "";
        
[Description(@"This field specifies the presence of insulation beneath the slab. Only required for in-grade case.")]
[JsonProperty(@"This field specifies the presence of insulation beneath the slab. Only required for in-grade case.")]
public YesNoDefault HorizontalInsulation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"This field specifies the horizontal insulation material.")]
[JsonProperty(@"This field specifies the horizontal insulation material.")]
public System.String HorizontalInsulationMaterialName { get; set; } = "";
        
[Description(@"This field specifies whether the horizontal insulation fully insulates the surface or is perimeter only insulation")]
[JsonProperty(@"This field specifies whether the horizontal insulation fully insulates the surface or is perimeter only insulation")]
public YesNoDefault HorizontalInsulationExtents { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Full");
        
[Description(@"This field specifies the width of the underfloor perimeter insulation")]
[JsonProperty(@"This field specifies the width of the underfloor perimeter insulation")]
public System.Single PerimeterInsulationWidth { get; set; } = ;
        
[Description(@"This field specifies the presence of vertical insulation at the slab edge.")]
[JsonProperty(@"This field specifies the presence of vertical insulation at the slab edge.")]
public YesNoDefault VerticalInsulation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"This field specifies the vertical insulation material.")]
[JsonProperty(@"This field specifies the vertical insulation material.")]
public System.String VerticalInsulationMaterialName { get; set; } = "";
        
[Description(@"Only used when including vertical insulation This field specifies the depth of the vertical insulation")]
[JsonProperty(@"Only used when including vertical insulation This field specifies the depth of the vertical insulation")]
public System.Single VerticalInsulationDepth { get; set; } = ;
        
[Description(@"This field specifies the ground domain simulation timestep.")]
[JsonProperty(@"This field specifies the ground domain simulation timestep.")]
public YesNoDefault SimulationTimestep { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Hourly");
        
[JsonProperty(@"")]
public System.Single GeometricMeshCoefficient { get; set; } = 1.6;
        
[JsonProperty(@"")]
public System.Single MeshDensityParameter { get; set; } = 6;
    }
    
    public enum UndisturbedGroundTemperatureModelTypeType
    {
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:FiniteDifference")]
        SiteGroundTemperatureUndisturbedFiniteDifference = 0,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:KusudaAchenbach")]
        SiteGroundTemperatureUndisturbedKusudaAchenbach = 1,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:Xing")]
        SiteGroundTemperatureUndisturbedXing = 2,
    }
    
    public enum SlabLocationType
    {
        
        [JsonProperty("InGrade")]
        InGrade = 0,
        
        [JsonProperty("OnGrade")]
        OnGrade = 1,
    }
    
    public enum HorizontalInsulationExtentsType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Full")]
        Full = 1,
        
        [JsonProperty("Perimeter")]
        Perimeter = 2,
    }
    
    public enum SimulationTimestepType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Hourly")]
        Hourly = 1,
        
        [JsonProperty("Timestep")]
        Timestep = 2,
    }
    
    [Description("Ground-coupled basement model for simulating basements or other underground zones" +
        ".")]
    [JsonObject("Site:GroundDomain:Basement")]
    public class Site_GroundDomain_Basement
    {
        
[Description(@"The depth from ground surface to the deep ground boundary of the domain.")]
[JsonProperty(@"The depth from ground surface to the deep ground boundary of the domain.")]
public System.Single GroundDomainDepth { get; set; } = 10;
        
[Description(@"This defines the height to width ratio of the basement zone.")]
[JsonProperty(@"This defines the height to width ratio of the basement zone.")]
public System.Single AspectRatio { get; set; } = 1;
        
[Description(@"The distance from the basement wall edge to the edge of the ground domain")]
[JsonProperty(@"The distance from the basement wall edge to the edge of the ground domain")]
public System.Single PerimeterOffset { get; set; } = 5;
        
[JsonProperty(@"")]
public System.Single SoilThermalConductivity { get; set; } = 1.5;
        
[JsonProperty(@"")]
public System.Single SoilDensity { get; set; } = 2800;
        
[JsonProperty(@"")]
public System.Single SoilSpecificHeat { get; set; } = 850;
        
[JsonProperty(@"")]
public System.Single SoilMoistureContentVolumeFraction { get; set; } = 30;
        
[JsonProperty(@"")]
public System.Single SoilMoistureContentVolumeFractionAtSaturation { get; set; } = 50;
        
[JsonProperty(@"")]
public YesNoDefault UndisturbedGroundTemperatureModelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String UndisturbedGroundTemperatureModelName { get; set; } = "";
        
[Description(@"This specifies the ground cover effects during evapotranspiration calculations. The value roughly represents the following cases: = 0   : concrete or other solid, non-permeable ground surface material = 0.5 : short grass, much like a manicured lawn = 1   : standard reference state (12 cm grass) = 1.5 : wild growth")]
[JsonProperty(@"This specifies the ground cover effects during evapotranspiration calculations. The value roughly represents the following cases: = 0   : concrete or other solid, non-permeable ground surface material = 0.5 : short grass, much like a manicured lawn = 1   : standard reference state (12 cm grass) = 1.5 : wild growth")]
public System.Single EvapotranspirationGroundCoverParameter { get; set; } = 0.4;
        
[JsonProperty(@"")]
public System.String BasementFloorBoundaryConditionModelName { get; set; } = "";
        
[Description(@"This field specifies the presence of insulation beneath the basement floor.")]
[JsonProperty(@"This field specifies the presence of insulation beneath the basement floor.")]
public YesNoDefault HorizontalInsulation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public System.String HorizontalInsulationMaterialName { get; set; } = "";
        
[Description(@"This field specifies whether the horizontal insulation fully insulates the surface or is perimeter only insulation")]
[JsonProperty(@"This field specifies whether the horizontal insulation fully insulates the surface or is perimeter only insulation")]
public YesNoDefault HorizontalInsulationExtents { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Full");
        
[Description(@"Width of horizontal perimeter insulation measured from foundation wall inside surface.")]
[JsonProperty(@"Width of horizontal perimeter insulation measured from foundation wall inside surface.")]
public System.Single PerimeterHorizontalInsulationWidth { get; set; } = ;
        
[Description(@"Depth measured from ground surface.")]
[JsonProperty(@"Depth measured from ground surface.")]
public System.Single BasementWallDepth { get; set; } = ;
        
[JsonProperty(@"")]
public System.String BasementWallBoundaryConditionModelName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault VerticalInsulation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public System.String BasementWallVerticalInsulationMaterialName { get; set; } = "";
        
[Description(@"Depth measured from the ground surface.")]
[JsonProperty(@"Depth measured from the ground surface.")]
public System.Single VerticalInsulationDepth { get; set; } = ;
        
[Description(@"This field specifies the basement domain simulation interval.")]
[JsonProperty(@"This field specifies the basement domain simulation interval.")]
public YesNoDefault SimulationTimestep { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Hourly");
        
[JsonProperty(@"")]
public System.Single MeshDensityParameter { get; set; } = 4;
    }
    
    public enum UndisturbedGroundTemperatureModelTypeType
    {
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:FiniteDifference")]
        SiteGroundTemperatureUndisturbedFiniteDifference = 0,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:KusudaAchenbach")]
        SiteGroundTemperatureUndisturbedKusudaAchenbach = 1,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:Xing")]
        SiteGroundTemperatureUndisturbedXing = 2,
    }
    
    public enum HorizontalInsulationExtentsType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Full")]
        Full = 1,
        
        [JsonProperty("Perimeter")]
        Perimeter = 2,
    }
    
    public enum SimulationTimestepType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Hourly")]
        Hourly = 1,
        
        [JsonProperty("Timestep")]
        Timestep = 2,
    }
    
    [Description("Specifies the ground reflectance values used to calculate ground reflected solar." +
        " The ground reflectance can be further modified when snow is on the ground by Si" +
        "te:GroundReflectance:SnowModifier.")]
    [JsonObject("Site:GroundReflectance")]
    public class Site_GroundReflectance
    {
        
[JsonProperty(@"")]
public System.Single JanuaryGroundReflectance { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single FebruaryGroundReflectance { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single MarchGroundReflectance { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single AprilGroundReflectance { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single MayGroundReflectance { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single JuneGroundReflectance { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single JulyGroundReflectance { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single AugustGroundReflectance { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single SeptemberGroundReflectance { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single OctoberGroundReflectance { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single NovemberGroundReflectance { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single DecemberGroundReflectance { get; set; } = 0.2;
    }
    
    [Description("Specifies ground reflectance multipliers when snow resident on the ground. These " +
        "multipliers are applied to the \"normal\" ground reflectances specified in Site:Gr" +
        "oundReflectance.")]
    [JsonObject("Site:GroundReflectance:SnowModifier")]
    public class Site_GroundReflectance_SnowModifier
    {
        
[Description(@"Value for modifying the "normal" ground reflectance when Snow is on ground when calculating the "Ground Reflected Solar Radiation Value" a value of 1.0 here uses the "normal" ground reflectance Ground Reflected Solar = (BeamSolar*CosSunZenith + DiffuseSolar)*GroundReflectance This would be further modified by the Snow Ground Reflectance Modifier when Snow was on the ground When Snow on ground, effective GroundReflectance is normal GroundReflectance*"Ground Reflectance Snow Modifier" Ground Reflectance achieved in this manner will be restricted to [0.0,1.0]")]
[JsonProperty(@"Value for modifying the "normal" ground reflectance when Snow is on ground when calculating the "Ground Reflected Solar Radiation Value" a value of 1.0 here uses the "normal" ground reflectance Ground Reflected Solar = (BeamSolar*CosSunZenith + DiffuseSolar)*GroundReflectance This would be further modified by the Snow Ground Reflectance Modifier when Snow was on the ground When Snow on ground, effective GroundReflectance is normal GroundReflectance*"Ground Reflectance Snow Modifier" Ground Reflectance achieved in this manner will be restricted to [0.0,1.0]")]
public System.Single GroundReflectedSolarModifier { get; set; } = 1;
        
[Description(@"Value for modifying the "normal" daylighting ground reflectance when Snow is on ground when calculating the "Ground Reflected Solar Radiation Value" a value of 1.0 here uses the "normal" ground reflectance Ground Reflected Solar = (BeamSolar*CosSunZenith + DiffuseSolar)*GroundReflectance This would be further modified by the Snow Ground Reflectance Modifier when Snow was on the ground When Snow on ground, effective GroundReflectance is normal GroundReflectance*"Daylighting Ground Reflectance Snow Modifier" Ground Reflectance achieved in this manner will be restricted to [0.0,1.0]")]
[JsonProperty(@"Value for modifying the "normal" daylighting ground reflectance when Snow is on ground when calculating the "Ground Reflected Solar Radiation Value" a value of 1.0 here uses the "normal" ground reflectance Ground Reflected Solar = (BeamSolar*CosSunZenith + DiffuseSolar)*GroundReflectance This would be further modified by the Snow Ground Reflectance Modifier when Snow was on the ground When Snow on ground, effective GroundReflectance is normal GroundReflectance*"Daylighting Ground Reflectance Snow Modifier" Ground Reflectance achieved in this manner will be restricted to [0.0,1.0]")]
public System.Single DaylightingGroundReflectedSolarModifier { get; set; } = 1;
    }
    
    [Description("Used to calculate water mains temperatures delivered by underground water main pi" +
        "pes. Water mains temperatures are a function of outdoor climate conditions and v" +
        "ary with time of year.")]
    [JsonObject("Site:WaterMainsTemperature")]
    public class Site_WaterMainsTemperature
    {
        
[Description(@"If calculation method is CorrelationFromWeatherFile, the two numeric input fields are ignored. Instead, EnergyPlus calculates them from weather file.")]
[JsonProperty(@"If calculation method is CorrelationFromWeatherFile, the two numeric input fields are ignored. Instead, EnergyPlus calculates them from weather file.")]
public YesNoDefault CalculationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "CorrelationFromWeatherFile");
        
[JsonProperty(@"")]
public System.String TemperatureScheduleName { get; set; } = "";
        
[Description(@"If calculation method is CorrelationFromWeatherFile or Schedule, this input field is ignored.")]
[JsonProperty(@"If calculation method is CorrelationFromWeatherFile or Schedule, this input field is ignored.")]
public System.Single AnnualAverageOutdoorAirTemperature { get; set; } = ;
        
[Description(@"If calculation method is CorrelationFromWeatherFile or Schedule, this input field is ignored.")]
[JsonProperty(@"If calculation method is CorrelationFromWeatherFile or Schedule, this input field is ignored.")]
public System.Single MaximumDifferenceInMonthlyAverageOutdoorAirTemperatures { get; set; } = ;
    }
    
    public enum CalculationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Correlation")]
        Correlation = 1,
        
        [JsonProperty("CorrelationFromWeatherFile")]
        CorrelationFromWeatherFile = 2,
        
        [JsonProperty("Schedule")]
        Schedule = 3,
    }
    
    [Description("Used to describe the amount of water precipitation at the building site. Precipit" +
        "ation includes both rain and the equivalent water content of snow.")]
    [JsonObject("Site:Precipitation")]
    public class Site_Precipitation
    {
        
[JsonProperty(@"")]
public YesNoDefault PrecipitationModelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"meters of water per year used for design level")]
[JsonProperty(@"meters of water per year used for design level")]
public System.Single DesignLevelForTotalAnnualPrecipitation { get; set; } = ;
        
[Description(@"Schedule values in meters of water per hour values should be non-negative")]
[JsonProperty(@"Schedule values in meters of water per hour values should be non-negative")]
public System.String PrecipitationRatesScheduleName { get; set; } = "";
        
[Description(@"meters of water per year from average weather statistics")]
[JsonProperty(@"meters of water per year from average weather statistics")]
public System.Single AverageTotalAnnualPrecipitation { get; set; } = ;
    }
    
    public enum PrecipitationModelTypeType
    {
        
        [JsonProperty("ScheduleAndDesignLevel")]
        ScheduleAndDesignLevel = 0,
    }
    
    [Description("Used to describe the amount of irrigation on the ecoroof surface over the course " +
        "of the simulation runperiod.")]
    [JsonObject("RoofIrrigation")]
    public class RoofIrrigation
    {
        
[Description(@"SmartSchedule will not allow irrigation when soil is already moist. Current threshold set at 30% of saturation.")]
[JsonProperty(@"SmartSchedule will not allow irrigation when soil is already moist. Current threshold set at 30% of saturation.")]
public YesNoDefault IrrigationModelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Schedule values in meters of water per hour values should be non-negative")]
[JsonProperty(@"Schedule values in meters of water per hour values should be non-negative")]
public System.String IrrigationRateScheduleName { get; set; } = "";
        
[Description(@"Used with SmartSchedule to set the saturation level at which no irrigation is allowed.")]
[JsonProperty(@"Used with SmartSchedule to set the saturation level at which no irrigation is allowed.")]
public System.Single IrrigationMaximumSaturationThreshold { get; set; } = 40;
    }
    
    public enum IrrigationModelTypeType
    {
        
        [JsonProperty("Schedule")]
        Schedule = 0,
        
        [JsonProperty("SmartSchedule")]
        SmartSchedule = 1,
    }
    
    [Description("If this object is omitted, the default solar and visible spectrum data will be us" +
        "ed.")]
    [JsonObject("Site:SolarAndVisibleSpectrum")]
    public class Site_SolarAndVisibleSpectrum
    {
        
[Description(@"The method specifies which of the solar and visible spectrum data to use in the calculations. Choices: Default - existing hard-wired spectrum data in EnergyPlus. UserDefined - user specified spectrum data referenced by the next two fields")]
[JsonProperty(@"The method specifies which of the solar and visible spectrum data to use in the calculations. Choices: Default - existing hard-wired spectrum data in EnergyPlus. UserDefined - user specified spectrum data referenced by the next two fields")]
public YesNoDefault SpectrumDataMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String SolarSpectrumDataObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String VisibleSpectrumDataObjectName { get; set; } = "";
    }
    
    public enum SpectrumDataMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Default")]
        Default = 1,
        
        [JsonProperty("UserDefined")]
        UserDefined = 2,
    }
    
    [Description("Spectrum Data Type is followed by up to 107 sets of normal-incidence measured val" +
        "ues of [wavelength, spectrum] for wavelengths covering the solar (0.25 to 2.5 mi" +
        "crons) or visible spectrum (0.38 to 0.78 microns)")]
    [JsonObject("Site:SpectrumData")]
    public class Site_SpectrumData
    {
        
[JsonProperty(@"")]
public YesNoDefault SpectrumDataType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single Wavelength { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Spectrum { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Wavelength { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Spectrum { get; set; } = ;
        
[JsonProperty(@"")]
public System.String Extensions { get; set; } = "";
    }
    
    public enum SpectrumDataTypeType
    {
        
        [JsonProperty("Solar")]
        Solar = 0,
        
        [JsonProperty("Visible")]
        Visible = 1,
    }
}
namespace EnergyPlus.NodeBranchManagement
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("List components on the branch in simulation and connection order Note: this shoul" +
        "d NOT include splitters or mixers which define endpoints of branches")]
    [JsonObject("Branch")]
    public class Branch
    {
        
[Description(@"Optional field to include this branch in plant pressure drop calculations This field is only relevant for branches in PlantLoops and CondenserLoops Air loops do not account for pressure drop using this field Valid curve types are: Curve:Functional:PressureDrop or one of Curve:{Linear,Quadratic,Cubic,Exponent}')")]
[JsonProperty(@"Optional field to include this branch in plant pressure drop calculations This field is only relevant for branches in PlantLoops and CondenserLoops Air loops do not account for pressure drop using this field Valid curve types are: Curve:Functional:PressureDrop or one of Curve:{Linear,Quadratic,Cubic,Exponent}')")]
public System.String PressureDropCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Components { get; set; } = "";
    }
    
    [Description("Branches MUST be listed in Flow order: Inlet branch, then parallel branches, then" +
        " Outlet branch. Branches are simulated in the order listed. Branch names cannot " +
        "be duplicated within a single branch list.")]
    [JsonObject("BranchList")]
    public class BranchList
    {
        
[JsonProperty(@"")]
public System.String Branches { get; set; } = "";
    }
    
    [Description("Split one air/water stream into N outlet streams. Branch names cannot be duplicat" +
        "ed within a single Splitter list.")]
    [JsonObject("Connector:Splitter")]
    public class Connector_Splitter
    {
        
[JsonProperty(@"")]
public System.String InletBranchName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Branches { get; set; } = "";
    }
    
    [Description("Mix N inlet air/water streams into one. Branch names cannot be duplicated within " +
        "a single mixer list.")]
    [JsonObject("Connector:Mixer")]
    public class Connector_Mixer
    {
        
[JsonProperty(@"")]
public System.String OutletBranchName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Branches { get; set; } = "";
    }
    
    [Description("only two connectors allowed per loop if two entered, one must be Connector:Splitt" +
        "er and one must be Connector:Mixer")]
    [JsonObject("ConnectorList")]
    public class ConnectorList
    {
        
[JsonProperty(@"")]
public YesNoDefault ConnectorObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ConnectorName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ConnectorObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ConnectorName { get; set; } = "";
    }
    
    public enum ConnectorObjectTypeType
    {
        
        [JsonProperty("Connector:Mixer")]
        ConnectorMixer = 0,
        
        [JsonProperty("Connector:Splitter")]
        ConnectorSplitter = 1,
    }
    
    public enum ConnectorObjectTypeType
    {
        
        [JsonProperty("Connector:Mixer")]
        ConnectorMixer = 0,
        
        [JsonProperty("Connector:Splitter")]
        ConnectorSplitter = 1,
    }
    
    [Description("This object is used in places where lists of nodes may be needed, e.g. ZoneHVAC:E" +
        "quipmentConnections field Zone Air Inlet Node or NodeList Name")]
    [JsonObject("NodeList")]
    public class NodeList
    {
        
[JsonProperty(@"")]
public System.String Nodes { get; set; } = "";
    }
    
    [Description(@"This object sets the temperature and humidity conditions for an outdoor air node. It allows the height above ground to be specified. This object may be used more than once. The same node name may not appear in both an OutdoorAir:Node object and an OutdoorAir:NodeList object. This object defines local outdoor air environmental conditions.")]
    [JsonObject("OutdoorAir:Node")]
    public class OutdoorAir_Node
    {
        
[Description(@"A value less than zero indicates that the height will be ignored and the weather file conditions will be used.")]
[JsonProperty(@"A value less than zero indicates that the height will be ignored and the weather file conditions will be used.")]
public System.Single HeightAboveGround { get; set; } = -1;
        
[Description(@"Schedule values are real numbers, -100.0 to 100.0, units C")]
[JsonProperty(@"Schedule values are real numbers, -100.0 to 100.0, units C")]
public System.String DrybulbTemperatureScheduleName { get; set; } = "";
        
[Description(@"Schedule values are real numbers, -100.0 to 100.0, units C")]
[JsonProperty(@"Schedule values are real numbers, -100.0 to 100.0, units C")]
public System.String WetbulbTemperatureScheduleName { get; set; } = "";
        
[Description(@"Schedule values are real numbers, 0.0 to 40.0, units m/s")]
[JsonProperty(@"Schedule values are real numbers, 0.0 to 40.0, units m/s")]
public System.String WindSpeedScheduleName { get; set; } = "";
        
[Description(@"Schedule values are real numbers, 0.0 to 360.0, units degree")]
[JsonProperty(@"Schedule values are real numbers, 0.0 to 360.0, units degree")]
public System.String WindDirectionScheduleName { get; set; } = "";
        
[Description(@"The name of the AirflowNetwork:MultiZone:WindPressureCoefficientValues, curve, or table object specifying the wind pressure coefficient.")]
[JsonProperty(@"The name of the AirflowNetwork:MultiZone:WindPressureCoefficientValues, curve, or table object specifying the wind pressure coefficient.")]
public System.String WindPressureCoefficientCurveName { get; set; } = "";
        
[Description(@"Specify whether the pressure curve is symmetric or not. Specify Yes for curves that should be evaluated from 0 to 180 degrees Specify No for curves that should be evaluated from 0 to 360 degrees")]
[JsonProperty(@"Specify whether the pressure curve is symmetric or not. Specify Yes for curves that should be evaluated from 0 to 180 degrees Specify No for curves that should be evaluated from 0 to 360 degrees")]
public YesNoDefault SymmetricWindPressureCoefficientCurve { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Specify whether the angle used to compute the wind pressure coefficient is absolute or relative Specify Relative to compute the angle between the wind direction and the surface azimuth Specify Absolute to use the wind direction angle directly")]
[JsonProperty(@"Specify whether the angle used to compute the wind pressure coefficient is absolute or relative Specify Relative to compute the angle between the wind direction and the surface azimuth Specify Absolute to use the wind direction angle directly")]
public YesNoDefault WindAngleType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Absolute");
    }
    
    public enum WindAngleTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Absolute")]
        Absolute = 1,
        
        [JsonProperty("Relative")]
        Relative = 2,
    }
    
    [Description(@"This object sets the temperature and humidity conditions for an outdoor air node using the weather data values. to vary outdoor air node conditions with height above ground use OutdoorAir:Node instead of this object. This object may be used more than once. The same node name may not appear in both an OutdoorAir:Node object and an OutdoorAir:NodeList object.")]
    [JsonObject("OutdoorAir:NodeList")]
    public class OutdoorAir_NodeList
    {
        
[JsonProperty(@"")]
public System.String Nodes { get; set; } = "";
    }
    
    [Description("Passes Inlet Node state variables to Outlet Node state variables")]
    [JsonObject("Pipe:Adiabatic")]
    public class Pipe_Adiabatic
    {
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
    }
    
    [Description("Passes Inlet Node state variables to Outlet Node state variables")]
    [JsonObject("Pipe:Adiabatic:Steam")]
    public class Pipe_Adiabatic_Steam
    {
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
    }
    
    [Description("Pipe model with transport delay and heat transfer to the environment.")]
    [JsonObject("Pipe:Indoor")]
    public class Pipe_Indoor
    {
        
[JsonProperty(@"")]
public System.String ConstructionName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FluidInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FluidOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault EnvironmentType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Zone");
        
[JsonProperty(@"")]
public System.String AmbientTemperatureZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AmbientTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AmbientAirVelocityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single PipeInsideDiameter { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PipeLength { get; set; } = ;
    }
    
    public enum EnvironmentTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Schedule")]
        Schedule = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    [Description("Pipe model with transport delay and heat transfer to the environment.")]
    [JsonObject("Pipe:Outdoor")]
    public class Pipe_Outdoor
    {
        
[JsonProperty(@"")]
public System.String ConstructionName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FluidInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FluidOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AmbientTemperatureOutdoorAirNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single PipeInsideDiameter { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PipeLength { get; set; } = ;
    }
    
    [Description("Buried Pipe model: For pipes buried at a depth less than one meter, this is an al" +
        "ternative object to: HeatExchanger:Surface")]
    [JsonObject("Pipe:Underground")]
    public class Pipe_Underground
    {
        
[JsonProperty(@"")]
public System.String ConstructionName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FluidInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FluidOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault SunExposure { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"pipe thickness is defined in the Construction object")]
[JsonProperty(@"pipe thickness is defined in the Construction object")]
public System.Single PipeInsideDiameter { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PipeLength { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SoilMaterialName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault UndisturbedGroundTemperatureModelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String UndisturbedGroundTemperatureModelName { get; set; } = "";
    }
    
    public enum SunExposureType
    {
        
        [JsonProperty("NoSun")]
        NoSun = 0,
        
        [JsonProperty("SunExposed")]
        SunExposed = 1,
    }
    
    public enum UndisturbedGroundTemperatureModelTypeType
    {
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:FiniteDifference")]
        SiteGroundTemperatureUndisturbedFiniteDifference = 0,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:KusudaAchenbach")]
        SiteGroundTemperatureUndisturbedKusudaAchenbach = 1,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:Xing")]
        SiteGroundTemperatureUndisturbedXing = 2,
    }
    
    [Description("The ground domain object for underground piping system simulation.")]
    [JsonObject("PipingSystem:Underground:Domain")]
    public class PipingSystem_Underground_Domain
    {
        
[Description(@"Domain extent in the local 'X' direction")]
[JsonProperty(@"Domain extent in the local 'X' direction")]
public System.Single Xmax { get; set; } = ;
        
[Description(@"Domain extent in the local 'Y' direction")]
[JsonProperty(@"Domain extent in the local 'Y' direction")]
public System.Single Ymax { get; set; } = ;
        
[Description(@"Domain extent in the local 'Y' direction")]
[JsonProperty(@"Domain extent in the local 'Y' direction")]
public System.Single Zmax { get; set; } = ;
        
[Description(@"If mesh type is symmetric geometric, this should be an even number.")]
[JsonProperty(@"If mesh type is symmetric geometric, this should be an even number.")]
public System.Single XDirectionMeshDensityParameter { get; set; } = 4;
        
[JsonProperty(@"")]
public YesNoDefault XDirectionMeshType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"optional Only used if mesh type is symmetric geometric")]
[JsonProperty(@"optional Only used if mesh type is symmetric geometric")]
public System.Single XDirectionGeometricCoefficient { get; set; } = 1.3;
        
[Description(@"If mesh type is symmetric geometric, this should be an even number.")]
[JsonProperty(@"If mesh type is symmetric geometric, this should be an even number.")]
public System.Single YDirectionMeshDensityParameter { get; set; } = 4;
        
[JsonProperty(@"")]
public YesNoDefault YDirectionMeshType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"optional Only used if mesh type is symmetric geometric")]
[JsonProperty(@"optional Only used if mesh type is symmetric geometric")]
public System.Single YDirectionGeometricCoefficient { get; set; } = 1.3;
        
[Description(@"If mesh type is symmetric geometric, this should be an even number.")]
[JsonProperty(@"If mesh type is symmetric geometric, this should be an even number.")]
public System.Single ZDirectionMeshDensityParameter { get; set; } = 4;
        
[JsonProperty(@"")]
public YesNoDefault ZDirectionMeshType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"optional Only used if mesh type is symmetric geometric")]
[JsonProperty(@"optional Only used if mesh type is symmetric geometric")]
public System.Single ZDirectionGeometricCoefficient { get; set; } = 1.3;
        
[JsonProperty(@"")]
public System.Single SoilThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SoilDensity { get; set; } = ;
        
[Description(@"This is a dry soil property, which is adjusted for freezing effects by the simulation algorithm.")]
[JsonProperty(@"This is a dry soil property, which is adjusted for freezing effects by the simulation algorithm.")]
public System.Single SoilSpecificHeat { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SoilMoistureContentVolumeFraction { get; set; } = 30;
        
[JsonProperty(@"")]
public System.Single SoilMoistureContentVolumeFractionAtSaturation { get; set; } = 50;
        
[JsonProperty(@"")]
public YesNoDefault UndisturbedGroundTemperatureModelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String UndisturbedGroundTemperatureModelName { get; set; } = "";
        
[Description(@"if Yes, then the following basement inputs are used if No, then the following basement inputs are *ignored*")]
[JsonProperty(@"if Yes, then the following basement inputs are used if No, then the following basement inputs are *ignored*")]
public YesNoDefault ThisDomainIncludesBasementSurfaceInteraction { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Required only if Domain Has Basement Interaction")]
[JsonProperty(@"Required only if Domain Has Basement Interaction")]
public System.Single WidthOfBasementFloorInGroundDomain { get; set; } = ;
        
[Description(@"Required only if Domain Has Basement Interaction")]
[JsonProperty(@"Required only if Domain Has Basement Interaction")]
public System.Single DepthOfBasementWallInGroundDomain { get; set; } = ;
        
[Description(@"Required only if Domain Has Basement Interaction")]
[JsonProperty(@"Required only if Domain Has Basement Interaction")]
public YesNoDefault ShiftPipeXCoordinatesByBasementWidth { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Required only if Domain Has Basement Interaction")]
[JsonProperty(@"Required only if Domain Has Basement Interaction")]
public System.String NameOfBasementWallBoundaryConditionModel { get; set; } = "";
        
[Description(@"Required only if Domain Has Basement Interaction")]
[JsonProperty(@"Required only if Domain Has Basement Interaction")]
public System.String NameOfBasementFloorBoundaryConditionModel { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single ConvergenceCriterionForTheOuterCartesianDomainIterationLoop { get; set; } = 0.001;
        
[JsonProperty(@"")]
public System.Single MaximumIterationsInTheOuterCartesianDomainIterationLoop { get; set; } = 500;
        
[Description(@"This specifies the ground cover effects during evapotranspiration calculations. The value roughly represents the following cases: = 0   : concrete or other solid, non-permeable ground surface material = 0.5 : short grass, much like a manicured lawn = 1   : standard reference state (12 cm grass) = 1.5 : wild growth")]
[JsonProperty(@"This specifies the ground cover effects during evapotranspiration calculations. The value roughly represents the following cases: = 0   : concrete or other solid, non-permeable ground surface material = 0.5 : short grass, much like a manicured lawn = 1   : standard reference state (12 cm grass) = 1.5 : wild growth")]
public System.Single EvapotranspirationGroundCoverParameter { get; set; } = 0.4;
        
[JsonProperty(@"")]
public System.Single NumberOfPipeCircuitsEnteredForThisDomain { get; set; } = ;
        
[JsonProperty(@"")]
public System.String PipeCircuits { get; set; } = "";
    }
    
    public enum XDirectionMeshTypeType
    {
        
        [JsonProperty("SymmetricGeometric")]
        SymmetricGeometric = 0,
        
        [JsonProperty("Uniform")]
        Uniform = 1,
    }
    
    public enum YDirectionMeshTypeType
    {
        
        [JsonProperty("SymmetricGeometric")]
        SymmetricGeometric = 0,
        
        [JsonProperty("Uniform")]
        Uniform = 1,
    }
    
    public enum ZDirectionMeshTypeType
    {
        
        [JsonProperty("SymmetricGeometric")]
        SymmetricGeometric = 0,
        
        [JsonProperty("Uniform")]
        Uniform = 1,
    }
    
    public enum UndisturbedGroundTemperatureModelTypeType
    {
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:FiniteDifference")]
        SiteGroundTemperatureUndisturbedFiniteDifference = 0,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:KusudaAchenbach")]
        SiteGroundTemperatureUndisturbedKusudaAchenbach = 1,
        
        [JsonProperty("Site:GroundTemperature:Undisturbed:Xing")]
        SiteGroundTemperatureUndisturbedXing = 2,
    }
    
    public enum ShiftPipeXCoordinatesByBasementWidthType
    {
        
        [JsonProperty("No")]
        No = 0,
        
        [JsonProperty("Yes")]
        Yes = 1,
    }
    
    [Description("The pipe circuit object in an underground piping system. This object is simulated" +
        " within an underground piping domain object and connected on a branch on a plant" +
        " loop.")]
    [JsonObject("PipingSystem:Underground:PipeCircuit")]
    public class PipingSystem_Underground_PipeCircuit
    {
        
[JsonProperty(@"")]
public System.Single PipeThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PipeDensity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PipeSpecificHeat { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PipeInnerDiameter { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PipeOuterDiameter { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DesignFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.String CircuitInletNode { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CircuitOutletNode { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single ConvergenceCriterionForTheInnerRadialIterationLoop { get; set; } = 0.001;
        
[JsonProperty(@"")]
public System.Single MaximumIterationsInTheInnerRadialIterationLoop { get; set; } = 500;
        
[JsonProperty(@"")]
public System.Single NumberOfSoilNodesInTheInnerRadialNearPipeMeshRegion { get; set; } = 3;
        
[Description(@"Required because it must be selected by user instead of being inferred from circuit/domain object inputs.")]
[JsonProperty(@"Required because it must be selected by user instead of being inferred from circuit/domain object inputs.")]
public System.Single RadialThicknessOfInnerRadialNearPipeMeshRegion { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NumberOfPipeSegmentsEnteredForThisPipeCircuit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String PipeSegments { get; set; } = "";
    }
    
    [Description("The pipe segment to be used in an underground piping system This object represent" +
        "s a single pipe leg positioned axially in the local z-direction, at a given x, y" +
        " location in the domain")]
    [JsonObject("PipingSystem:Underground:PipeSegment")]
    public class PipingSystem_Underground_PipeSegment
    {
        
[Description(@"This segment will be centered at this distance from the x=0 domain surface or the basement wall surface, based on whether a basement exists in this domain and the selection of the shift input field found in the domain object.")]
[JsonProperty(@"This segment will be centered at this distance from the x=0 domain surface or the basement wall surface, based on whether a basement exists in this domain and the selection of the shift input field found in the domain object.")]
public System.Single XPosition { get; set; } = ;
        
[Description(@"This segment will be centered at this distance away from the ground surface; thus this value represents the burial depth of this pipe segment.")]
[JsonProperty(@"This segment will be centered at this distance away from the ground surface; thus this value represents the burial depth of this pipe segment.")]
public System.Single YPosition { get; set; } = ;
        
[Description(@"This segment will be simulated such that the flow is in the selected direction. This can allow for detailed analysis of circuiting effects in a single domain.")]
[JsonProperty(@"This segment will be simulated such that the flow is in the selected direction. This can allow for detailed analysis of circuiting effects in a single domain.")]
public YesNoDefault FlowDirection { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum FlowDirectionType
    {
        
        [JsonProperty("DecreasingZ")]
        DecreasingZ = 0,
        
        [JsonProperty("IncreasingZ")]
        IncreasingZ = 1,
    }
    
    [Description("Passes inlet node state variables to outlet node state variables")]
    [JsonObject("Duct")]
    public class Duct
    {
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
    }
}
namespace EnergyPlus.NonZoneEquipment
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Used to simulate a scheduled plant loop demand profile. Load and flow rate are specified using schedules. Positive values are heating loads, and negative values are cooling loads. The actual load met is dependent on the performance of the supply loop components.")]
    [JsonObject("LoadProfile:Plant")]
    public class LoadProfile_Plant
    {
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[Description(@"Schedule values are load in [W]")]
[JsonProperty(@"Schedule values are load in [W]")]
public System.String LoadScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single PeakFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.String FlowRateFractionScheduleName { get; set; } = "";
    }
}
namespace EnergyPlus.OperationalFaults
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("This object describes outdoor air temperature sensor offset")]
    [JsonObject("FaultModel:TemperatureSensorOffset:OutdoorAir")]
    public class FaultModel_TemperatureSensorOffset_OutdoorAir
    {
        
[JsonProperty(@"")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SeverityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControllerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControllerObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single TemperatureSensorOffset { get; set; } = 0;
    }
    
    public enum ControllerObjectTypeType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
    }
    
    [Description("This object describes outdoor air humidity sensor offset")]
    [JsonObject("FaultModel:HumiditySensorOffset:OutdoorAir")]
    public class FaultModel_HumiditySensorOffset_OutdoorAir
    {
        
[JsonProperty(@"")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SeverityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControllerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControllerObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single HumiditySensorOffset { get; set; } = 0;
    }
    
    public enum ControllerObjectTypeType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
    }
    
    [Description("This object describes outdoor air enthalpy sensor offset")]
    [JsonObject("FaultModel:EnthalpySensorOffset:OutdoorAir")]
    public class FaultModel_EnthalpySensorOffset_OutdoorAir
    {
        
[JsonProperty(@"")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SeverityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControllerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControllerObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single EnthalpySensorOffset { get; set; } = 0;
    }
    
    public enum ControllerObjectTypeType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
    }
    
    [Description("This object describes return air temperature sensor offset")]
    [JsonObject("FaultModel:TemperatureSensorOffset:ReturnAir")]
    public class FaultModel_TemperatureSensorOffset_ReturnAir
    {
        
[JsonProperty(@"")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SeverityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControllerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControllerObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single TemperatureSensorOffset { get; set; } = 0;
    }
    
    public enum ControllerObjectTypeType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
    }
    
    [Description("This object describes return air enthalpy sensor offset")]
    [JsonObject("FaultModel:EnthalpySensorOffset:ReturnAir")]
    public class FaultModel_EnthalpySensorOffset_ReturnAir
    {
        
[JsonProperty(@"")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SeverityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControllerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControllerObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single EnthalpySensorOffset { get; set; } = 0;
    }
    
    public enum ControllerObjectTypeType
    {
        
        [JsonProperty("Controller:OutdoorAir")]
        ControllerOutdoorAir = 0,
    }
    
    [Description("This object describes fault of chiller supply water temperature sensor offset")]
    [JsonObject("FaultModel:TemperatureSensorOffset:ChillerSupplyWater")]
    public class FaultModel_TemperatureSensorOffset_ChillerSupplyWater
    {
        
[JsonProperty(@"")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SeverityScheduleName { get; set; } = "";
        
[Description(@"Enter the type of a chiller object")]
[JsonProperty(@"Enter the type of a chiller object")]
public YesNoDefault ChillerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of a chiller object")]
[JsonProperty(@"Enter the name of a chiller object")]
public System.String ChillerObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single ReferenceSensorOffset { get; set; } = 0;
    }
    
    public enum ChillerObjectTypeType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
    }
    
    [Description("This object describes fault of coil supply air temperature sensor offset")]
    [JsonObject("FaultModel:TemperatureSensorOffset:CoilSupplyAir")]
    public class FaultModel_TemperatureSensorOffset_CoilSupplyAir
    {
        
[JsonProperty(@"")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SeverityScheduleName { get; set; } = "";
        
[Description(@"Enter the type of the coil affected")]
[JsonProperty(@"Enter the type of the coil affected")]
public YesNoDefault CoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of the coil affected")]
[JsonProperty(@"Enter the name of the coil affected")]
public System.String CoilObjectName { get; set; } = "";
        
[Description(@"Enter the name of controller for the water coil affected Required for water coils")]
[JsonProperty(@"Enter the name of controller for the water coil affected Required for water coils")]
public System.String WaterCoilControllerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single ReferenceSensorOffset { get; set; } = 0;
    }
    
    public enum CoilObjectTypeType
    {
        
        [JsonProperty("AirLoopHVAC:UnitarySystem")]
        AirLoopHVACUnitarySystem = 0,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 1,
        
        [JsonProperty("Coil:Cooling:Water:Detailedgeometry")]
        CoilCoolingWaterDetailedgeometry = 2,
        
        [JsonProperty("Coil:Heating:Desuperheater")]
        CoilHeatingDesuperheater = 3,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 4,
        
        [JsonProperty("Coil:Heating:Gas")]
        CoilHeatingGas = 5,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 6,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 7,
        
        [JsonProperty("CoilSystem:Cooling:DX")]
        CoilSystemCoolingDX = 8,
        
        [JsonProperty("CoilSystem:Heating:DX")]
        CoilSystemHeatingDX = 9,
    }
    
    [Description("This object describes fault of condenser supply water temperature sensor offset")]
    [JsonObject("FaultModel:TemperatureSensorOffset:CondenserSupplyWater")]
    public class FaultModel_TemperatureSensorOffset_CondenserSupplyWater
    {
        
[JsonProperty(@"")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SeverityScheduleName { get; set; } = "";
        
[Description(@"Enter the type of the cooling tower affected")]
[JsonProperty(@"Enter the type of the cooling tower affected")]
public YesNoDefault CoolingTowerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of the cooling tower affected")]
[JsonProperty(@"Enter the name of the cooling tower affected")]
public System.String CoolingTowerObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single ReferenceSensorOffset { get; set; } = 0;
    }
    
    public enum CoolingTowerObjectTypeType
    {
        
        [JsonProperty("CoolingTower:SingleSpeed")]
        CoolingTowerSingleSpeed = 0,
        
        [JsonProperty("CoolingTower:TwoSpeed")]
        CoolingTowerTwoSpeed = 1,
        
        [JsonProperty("CoolingTower:VariableSpeed")]
        CoolingTowerVariableSpeed = 2,
        
        [JsonProperty("CoolingTower:VariableSpeed:MERKEL")]
        CoolingTowerVariableSpeedMERKEL = 3,
    }
    
    [Description("This object describes fault of thermostat offset")]
    [JsonObject("FaultModel:ThermostatOffset")]
    public class FaultModel_ThermostatOffset
    {
        
[Description(@"Enter the name of a ZoneControl:Thermostat object.")]
[JsonProperty(@"Enter the name of a ZoneControl:Thermostat object.")]
public System.String ThermostatName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SeverityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single ReferenceThermostatOffset { get; set; } = 2;
    }
    
    [Description("This object describes fault of humidistat offset")]
    [JsonObject("FaultModel:HumidistatOffset")]
    public class FaultModel_HumidistatOffset
    {
        
[Description(@"Enter the name of a ZoneControl:Humidistat object.")]
[JsonProperty(@"Enter the name of a ZoneControl:Humidistat object.")]
public System.String HumidistatName { get; set; } = "";
        
[Description(@"Two types are available: Type ThermostatOffsetIndependent Type ThermostatOffsetDependent")]
[JsonProperty(@"Two types are available: Type ThermostatOffsetIndependent Type ThermostatOffsetDependent")]
public YesNoDefault HumidistatOffsetType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ThermostatOffsetIndependent");
        
[Description(@"This field is applicable for Type ThermostatOffsetIndependent")]
[JsonProperty(@"This field is applicable for Type ThermostatOffsetIndependent")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"This field is applicable for Type ThermostatOffsetIndependent")]
[JsonProperty(@"This field is applicable for Type ThermostatOffsetIndependent")]
public System.String SeverityScheduleName { get; set; } = "";
        
[Description(@"Required field for Type ThermostatOffsetIndependent")]
[JsonProperty(@"Required field for Type ThermostatOffsetIndependent")]
public System.Single ReferenceHumidistatOffset { get; set; } = 5;
        
[Description(@"Enter the name of a FaultModel:ThermostatOffset object Required field for Type ThermostatOffsetDependent")]
[JsonProperty(@"Enter the name of a FaultModel:ThermostatOffset object Required field for Type ThermostatOffsetDependent")]
public System.String RelatedThermostatOffsetFaultName { get; set; } = "";
    }
    
    public enum HumidistatOffsetTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ThermostatOffsetDependent")]
        ThermostatOffsetDependent = 1,
        
        [JsonProperty("ThermostatOffsetIndependent")]
        ThermostatOffsetIndependent = 2,
    }
    
    [Description("This object describes fault of dirty air filters")]
    [JsonObject("FaultModel:Fouling:AirFilter")]
    public class FaultModel_Fouling_AirFilter
    {
        
[Description(@"Choose the type of the fan Support for Fan:SystemModel is pending")]
[JsonProperty(@"Choose the type of the fan Support for Fan:SystemModel is pending")]
public YesNoDefault FanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of a fan object")]
[JsonProperty(@"Enter the name of a fan object")]
public System.String FanName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Enter the name of a schedule describing the variations of the fan pressure rise in terms of multipliers to the fan design pressure rise")]
[JsonProperty(@"Enter the name of a schedule describing the variations of the fan pressure rise in terms of multipliers to the fan design pressure rise")]
public System.String PressureFractionScheduleName { get; set; } = "";
        
[Description(@"The curve describes the relationship between the fan pressure rise and air flow rate")]
[JsonProperty(@"The curve describes the relationship between the fan pressure rise and air flow rate")]
public System.String FanCurveName { get; set; } = "";
    }
    
    public enum FanObjectTypeType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:VariableVolume")]
        FanVariableVolume = 2,
    }
    
    [Description("This object describes the fouling fault of boilers with water-based heat exchange" +
        "rs")]
    [JsonObject("FaultModel:Fouling:Boiler")]
    public class FaultModel_Fouling_Boiler
    {
        
[JsonProperty(@"")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SeverityScheduleName { get; set; } = "";
        
[Description(@"Enter the type of a boiler object The fault applies to the hot-water boilers")]
[JsonProperty(@"Enter the type of a boiler object The fault applies to the hot-water boilers")]
public YesNoDefault BoilerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of a Boiler object")]
[JsonProperty(@"Enter the name of a Boiler object")]
public System.String BoilerObjectName { get; set; } = "";
        
[Description(@"The factor indicates the decrease of the nominal capacity of the boiler It is the ratio between the nominal capacity at fouling case and that at fault free case")]
[JsonProperty(@"The factor indicates the decrease of the nominal capacity of the boiler It is the ratio between the nominal capacity at fouling case and that at fault free case")]
public System.Single FoulingFactor { get; set; } = 1;
    }
    
    public enum BoilerObjectTypeType
    {
        
        [JsonProperty("Boiler:HotWater")]
        BoilerHotWater = 0,
    }
    
    [Description("This object describes the fouling fault of the wetted coil evaporative cooler")]
    [JsonObject("FaultModel:Fouling:EvaporativeCooler")]
    public class FaultModel_Fouling_EvaporativeCooler
    {
        
[JsonProperty(@"")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SeverityScheduleName { get; set; } = "";
        
[Description(@"Enter the type of a Evaporative Cooler object The fault applies to the wetted coil evaporative cooler The fault does not apply to direct evaporative coolers or the dry coil indirect evaporative coolers")]
[JsonProperty(@"Enter the type of a Evaporative Cooler object The fault applies to the wetted coil evaporative cooler The fault does not apply to direct evaporative coolers or the dry coil indirect evaporative coolers")]
public YesNoDefault EvaporativeCoolerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of aN Evaporative Cooler object")]
[JsonProperty(@"Enter the name of aN Evaporative Cooler object")]
public System.String EvaporativeCoolerObjectName { get; set; } = "";
        
[Description(@"The factor indicates the decrease of the indirect stage efficiency It is the ratio between the indirect stage efficiency at fouling case and that at fault free case")]
[JsonProperty(@"The factor indicates the decrease of the indirect stage efficiency It is the ratio between the indirect stage efficiency at fouling case and that at fault free case")]
public System.Single FoulingFactor { get; set; } = 1;
    }
    
    public enum EvaporativeCoolerObjectTypeType
    {
        
        [JsonProperty("EvaporativeCooler:Indirect:WetCoil")]
        EvaporativeCoolerIndirectWetCoil = 0,
    }
    
    [Description("This object describes the fouling fault of chillers with water-cooled condensers")]
    [JsonObject("FaultModel:Fouling:Chiller")]
    public class FaultModel_Fouling_Chiller
    {
        
[JsonProperty(@"")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SeverityScheduleName { get; set; } = "";
        
[Description(@"Enter the type of a chiller object The fault applies to the chillers with water-cooled condensers")]
[JsonProperty(@"Enter the type of a chiller object The fault applies to the chillers with water-cooled condensers")]
public YesNoDefault ChillerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of a chiller object")]
[JsonProperty(@"Enter the name of a chiller object")]
public System.String ChillerObjectName { get; set; } = "";
        
[Description(@"The factor indicates the decrease of the nominal capacity of the chiller It is the ratio between the nominal capacity at fouling case and that at fault free case")]
[JsonProperty(@"The factor indicates the decrease of the nominal capacity of the chiller It is the ratio between the nominal capacity at fouling case and that at fault free case")]
public System.Single FoulingFactor { get; set; } = 1;
    }
    
    public enum ChillerObjectTypeType
    {
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 0,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 1,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 2,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 3,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 4,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 5,
    }
    
    [Description("This object describes the fault of fouling cooling towers")]
    [JsonObject("FaultModel:Fouling:CoolingTower")]
    public class FaultModel_Fouling_CoolingTower
    {
        
[JsonProperty(@"")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SeverityScheduleName { get; set; } = "";
        
[Description(@"Enter the type of the cooling tower affected")]
[JsonProperty(@"Enter the type of the cooling tower affected")]
public YesNoDefault CoolingTowerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of the cooling tower affected")]
[JsonProperty(@"Enter the name of the cooling tower affected")]
public System.String CoolingTowerObjectName { get; set; } = "";
        
[Description(@"Factor describing the tower UA reduction due to fouling It is the ratio between the UA value at fouling case and that at fault free case It is applicable to both the Design UA and Free Convection UA of the tower")]
[JsonProperty(@"Factor describing the tower UA reduction due to fouling It is the ratio between the UA value at fouling case and that at fault free case It is applicable to both the Design UA and Free Convection UA of the tower")]
public System.Single ReferenceUaReductionFactor { get; set; } = ;
    }
    
    public enum CoolingTowerObjectTypeType
    {
        
        [JsonProperty("CoolingTower:SingleSpeed")]
        CoolingTowerSingleSpeed = 0,
        
        [JsonProperty("CoolingTower:TwoSpeed")]
        CoolingTowerTwoSpeed = 1,
        
        [JsonProperty("CoolingTower:VariableSpeed:MERKEL")]
        CoolingTowerVariableSpeedMERKEL = 2,
    }
    
    [Description("This object describes fouling water heating or cooling coils")]
    [JsonObject("FaultModel:Fouling:Coil")]
    public class FaultModel_Fouling_Coil
    {
        
[JsonProperty(@"")]
public System.String CoilName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SeverityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FoulingInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FouledUARated");
        
[Description(@"Fouling coil UA value under rating conditions For Fouling Input Method: FouledUARated")]
[JsonProperty(@"Fouling coil UA value under rating conditions For Fouling Input Method: FouledUARated")]
public System.Single Uafouled { get; set; } = ;
        
[Description(@"For Fouling Input Method: FoulingFactor")]
[JsonProperty(@"For Fouling Input Method: FoulingFactor")]
public System.Single WaterSideFoulingFactor { get; set; } = 0;
        
[Description(@"For Fouling Input Method: FoulingFactor")]
[JsonProperty(@"For Fouling Input Method: FoulingFactor")]
public System.Single AirSideFoulingFactor { get; set; } = 0;
        
[Description(@"For Fouling Input Method: FoulingFactor")]
[JsonProperty(@"For Fouling Input Method: FoulingFactor")]
public System.Single OutsideCoilSurfaceArea { get; set; } = ;
        
[Description(@"For Fouling Input Method: FoulingFactor")]
[JsonProperty(@"For Fouling Input Method: FoulingFactor")]
public System.Single InsideToOutsideCoilSurfaceAreaRatio { get; set; } = 0.07;
    }
    
    public enum FoulingInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FouledUARated")]
        FouledUARated = 1,
        
        [JsonProperty("FoulingFactor")]
        FoulingFactor = 2,
    }
}
namespace EnergyPlus.OutputReporting
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Produces a list summarizing the output variables and meters that are available for reporting for the model being simulated (rdd output file). The list varies depending on the types of objects present in the idf file. For example, variables related to lights will only appear if a Lights object is present. The IDF option generates complete Output:Variable objects to simplify adding the desired output to the idf file.")]
    [JsonObject("Output:VariableDictionary")]
    public class Output_VariableDictionary
    {
        
[JsonProperty(@"")]
public YesNoDefault KeyField { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "regular");
        
[JsonProperty(@"")]
public YesNoDefault SortOption { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum KeyFieldType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("IDF")]
        IDF = 1,
        
        [JsonProperty("regular")]
        Regular = 2,
    }
    
    public enum SortOptionType
    {
        
        [JsonProperty("Name")]
        Name = 0,
        
        [JsonProperty("Unsorted")]
        Unsorted = 1,
    }
    
    [Description("Produces a report summarizing the details of surfaces in the eio output file.")]
    [JsonObject("Output:Surfaces:List")]
    public class Output_Surfaces_List
    {
        
[JsonProperty(@"")]
public YesNoDefault ReportType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"(IDF, only for Output:Surfaces:List, Lines report -- will print transformed coordinates in IDF style)")]
[JsonProperty(@"(IDF, only for Output:Surfaces:List, Lines report -- will print transformed coordinates in IDF style)")]
public YesNoDefault ReportSpecifications { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum ReportTypeType
    {
        
        [JsonProperty("CostInfo")]
        CostInfo = 0,
        
        [JsonProperty("DecayCurvesFromComponentLoadsSummary")]
        DecayCurvesFromComponentLoadsSummary = 1,
        
        [JsonProperty("Details")]
        Details = 2,
        
        [JsonProperty("DetailsWithVertices")]
        DetailsWithVertices = 3,
        
        [JsonProperty("Lines")]
        Lines = 4,
        
        [JsonProperty("Vertices")]
        Vertices = 5,
        
        [JsonProperty("ViewFactorInfo")]
        ViewFactorInfo = 6,
    }
    
    public enum ReportSpecificationsType
    {
        
        [JsonProperty("IDF")]
        IDF = 0,
    }
    
    [Description("Produces reports/files that are capable of rendering graphically or being importe" +
        "d into other programs. Rendering does not alter the actual inputs/surfaces.")]
    [JsonObject("Output:Surfaces:Drawing")]
    public class Output_Surfaces_Drawing
    {
        
[JsonProperty(@"")]
public YesNoDefault ReportType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Triangulate3DFace (default), ThickPolyline, RegularPolyline apply to DXF This field is ignored for DXF:WireFrame and VRML")]
[JsonProperty(@"Triangulate3DFace (default), ThickPolyline, RegularPolyline apply to DXF This field is ignored for DXF:WireFrame and VRML")]
public YesNoDefault ReportSpecifications { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Triangulate3DFace");
        
[Description(@"Use ColorScheme Name for DXF reports")]
[JsonProperty(@"Use ColorScheme Name for DXF reports")]
public System.String ReportSpecifications { get; set; } = "";
    }
    
    public enum ReportTypeType
    {
        
        [JsonProperty("DXF")]
        DXF = 0,
        
        [JsonProperty("DXF:WireFrame")]
        DXFWireFrame = 1,
        
        [JsonProperty("VRML")]
        VRML = 2,
    }
    
    public enum ReportSpecificationsType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("RegularPolyline")]
        RegularPolyline = 1,
        
        [JsonProperty("ThickPolyline")]
        ThickPolyline = 2,
        
        [JsonProperty("Triangulate3DFace")]
        TriangulateDFace = 3,
    }
    
    [Description("Produces a condensed reporting that illustrates the full range of schedule values" +
        " in the eio output file. In the style of input: DaySchedule,  WeekSchedule, and " +
        "Annual Schedule.")]
    [JsonObject("Output:Schedules")]
    public class Output_Schedules
    {
        
[JsonProperty(@"")]
public YesNoDefault KeyField { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum KeyFieldType
    {
        
        [JsonProperty("Hourly")]
        Hourly = 0,
        
        [JsonProperty("Timestep")]
        Timestep = 1,
    }
    
    [Description("Adds a report to the eio output file which shows details for each construction, i" +
        "ncluding overall properties, a list of material layers, and calculated results r" +
        "elated to conduction transfer functions.")]
    [JsonObject("Output:Constructions")]
    public class Output_Constructions
    {
        
[JsonProperty(@"")]
public YesNoDefault DetailsType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault DetailsType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum DetailsTypeType
    {
        
        [JsonProperty("Constructions")]
        Constructions = 0,
        
        [JsonProperty("Materials")]
        Materials = 1,
    }
    
    public enum DetailsTypeType
    {
        
        [JsonProperty("Constructions")]
        Constructions = 0,
        
        [JsonProperty("Materials")]
        Materials = 1,
    }
    
    [Description("This object is used to control the output produced by the Energy Management Syste" +
        "m")]
    [JsonObject("Output:EnergyManagementSystem")]
    public class Output_EnergyManagementSystem
    {
        
[JsonProperty(@"")]
public YesNoDefault ActuatorAvailabilityDictionaryReporting { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[JsonProperty(@"")]
public YesNoDefault InternalVariableAvailabilityDictionaryReporting { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[JsonProperty(@"")]
public YesNoDefault EmsRuntimeLanguageDebugOutputLevel { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
    }
    
    public enum ActuatorAvailabilityDictionaryReportingType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("NotByUniqueKeyNames")]
        NotByUniqueKeyNames = 2,
        
        [JsonProperty("Verbose")]
        Verbose = 3,
    }
    
    public enum InternalVariableAvailabilityDictionaryReportingType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("NotByUniqueKeyNames")]
        NotByUniqueKeyNames = 2,
        
        [JsonProperty("Verbose")]
        Verbose = 3,
    }
    
    public enum EmsRuntimeLanguageDebugOutputLevelType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ErrorsOnly")]
        ErrorsOnly = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Verbose")]
        Verbose = 3,
    }
    
    [Description(@"This object is used to set colors for reporting on various building elements particularly for the DXF reports. We know the user can enter 0 to 255 and the color map is available in DXF output. Therefore, we are limiting the colors in that range. You can extend by editing the IDD but you do so on your own. Colors not changed in any scheme will remain as the default scheme uses.")]
    [JsonObject("OutputControl:SurfaceColorScheme")]
    public class OutputControl_SurfaceColorScheme
    {
        
[JsonProperty(@"")]
public YesNoDefault DrawingElementType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"use color number for output assignment (e.g. DXF)")]
[JsonProperty(@"use color number for output assignment (e.g. DXF)")]
public System.Single ColorForDrawingElement { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault DrawingElementType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"use color number for output assignment (e.g. DXF)")]
[JsonProperty(@"use color number for output assignment (e.g. DXF)")]
public System.Single ColorForDrawingElement { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault DrawingElementType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"use color number for output assignment (e.g. DXF)")]
[JsonProperty(@"use color number for output assignment (e.g. DXF)")]
public System.Single ColorForDrawingElement { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault DrawingElementType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"use color number for output assignment (e.g. DXF)")]
[JsonProperty(@"use color number for output assignment (e.g. DXF)")]
public System.Single ColorForDrawingElement { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault DrawingElementType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"use color number for output assignment (e.g. DXF)")]
[JsonProperty(@"use color number for output assignment (e.g. DXF)")]
public System.Single ColorForDrawingElement { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault DrawingElementType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"use color number for output assignment (e.g. DXF)")]
[JsonProperty(@"use color number for output assignment (e.g. DXF)")]
public System.Single ColorForDrawingElement { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault DrawingElementType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"use color number for output assignment (e.g. DXF)")]
[JsonProperty(@"use color number for output assignment (e.g. DXF)")]
public System.Single ColorForDrawingElement { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault DrawingElementType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"use color number for output assignment (e.g. DXF)")]
[JsonProperty(@"use color number for output assignment (e.g. DXF)")]
public System.Single ColorForDrawingElement { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault DrawingElementType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"use color number for output assignment (e.g. DXF)")]
[JsonProperty(@"use color number for output assignment (e.g. DXF)")]
public System.Single ColorForDrawingElement { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault DrawingElementType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"use color number for output assignment (e.g. DXF)")]
[JsonProperty(@"use color number for output assignment (e.g. DXF)")]
public System.Single ColorForDrawingElement { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault DrawingElementType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"use color number for output assignment (e.g. DXF)")]
[JsonProperty(@"use color number for output assignment (e.g. DXF)")]
public System.Single ColorForDrawingElement { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault DrawingElementType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"use color number for output assignment (e.g. DXF)")]
[JsonProperty(@"use color number for output assignment (e.g. DXF)")]
public System.Single ColorForDrawingElement { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault DrawingElementType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"use color number for output assignment (e.g. DXF)")]
[JsonProperty(@"use color number for output assignment (e.g. DXF)")]
public System.Single ColorForDrawingElement { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault DrawingElementType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"use color number for output assignment (e.g. DXF)")]
[JsonProperty(@"use color number for output assignment (e.g. DXF)")]
public System.Single ColorForDrawingElement { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault DrawingElementType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"use color number for output assignment (e.g. DXF)")]
[JsonProperty(@"use color number for output assignment (e.g. DXF)")]
public System.Single ColorForDrawingElement { get; set; } = ;
    }
    
    public enum DrawingElementTypeType
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum DrawingElementTypeType
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum DrawingElementTypeType
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum DrawingElementTypeType
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum DrawingElementTypeType
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum DrawingElementTypeType
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum DrawingElementTypeType
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum DrawingElementTypeType
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum DrawingElementTypeType
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum DrawingElementTypeType
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum DrawingElementTypeType
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum DrawingElementTypeType
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum DrawingElementTypeType
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum DrawingElementTypeType
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    public enum DrawingElementTypeType
    {
        
        [JsonProperty("AttachedBuildingShades")]
        AttachedBuildingShades = 0,
        
        [JsonProperty("DaylightReferencePoint1")]
        DaylightReferencePoint = 1,
        
        [JsonProperty("DaylightReferencePoint2")]
        DaylightReferencePoint = 2,
        
        [JsonProperty("DetachedBuildingShades")]
        DetachedBuildingShades = 3,
        
        [JsonProperty("DetachedFixedShades")]
        DetachedFixedShades = 4,
        
        [JsonProperty("Doors")]
        Doors = 5,
        
        [JsonProperty("Floors")]
        Floors = 6,
        
        [JsonProperty("GlassDoors")]
        GlassDoors = 7,
        
        [JsonProperty("Photovoltaics")]
        Photovoltaics = 8,
        
        [JsonProperty("Roofs")]
        Roofs = 9,
        
        [JsonProperty("Text")]
        Text = 10,
        
        [JsonProperty("TubularDaylightDiffusers")]
        TubularDaylightDiffusers = 11,
        
        [JsonProperty("TubularDaylightDomes")]
        TubularDaylightDomes = 12,
        
        [JsonProperty("Walls")]
        Walls = 13,
        
        [JsonProperty("Windows")]
        Windows = 14,
    }
    
    [Description(@"This object allows the user to call report types that are predefined and will appear with the other tabular reports. These predefined reports are sensitive to the OutputControl:Table:Style object and appear in the same files as the tabular reports. The entries for this object is a list of the predefined reports that should appear in the tabular report output file.")]
    [JsonObject("Output:Table:SummaryReports")]
    public class Output_Table_SummaryReports
    {
        
[JsonProperty(@"")]
public System.String Reports { get; set; } = "";
    }
    
    [Description("Produces a bin report in the table output file which shows the amount of time in " +
        "hours that occurs in different bins for a single specific output variable or met" +
        "er. Two different types of binning are reported: by month and by hour of the day" +
        ".")]
    [JsonObject("Output:Table:TimeBins")]
    public class Output_Table_TimeBins
    {
        
[Description(@"use '*' (without quotes) to apply this variable to all keys")]
[JsonProperty(@"use '*' (without quotes) to apply this variable to all keys")]
public System.String KeyValue { get; set; } = (System.String)*;
        
[JsonProperty(@"")]
public System.String VariableName { get; set; } = "";
        
[Description(@"The lowest value for the intervals being binned into.")]
[JsonProperty(@"The lowest value for the intervals being binned into.")]
public System.Single IntervalStart { get; set; } = ;
        
[Description(@"The size of the bins starting with Interval start.")]
[JsonProperty(@"The size of the bins starting with Interval start.")]
public System.Single IntervalSize { get; set; } = ;
        
[Description(@"The number of bins used. The number of hours below the start of the Lowest bin and above the value of the last bin are also shown.")]
[JsonProperty(@"The number of bins used. The number of hours below the start of the Lowest bin and above the value of the last bin are also shown.")]
public System.Single IntervalCount { get; set; } = ;
        
[Description(@"Optional schedule name. Binning is performed for non-zero hours. Binning always performed if left blank.")]
[JsonProperty(@"Optional schedule name. Binning is performed for non-zero hours. Binning always performed if left blank.")]
public System.String ScheduleName { get; set; } = "";
        
[Description(@"Optional input on the type of units for the variable used by other fields in the object.")]
[JsonProperty(@"Optional input on the type of units for the variable used by other fields in the object.")]
public YesNoDefault VariableType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum VariableTypeType
    {
        
        [JsonProperty("Energy")]
        Energy = 0,
        
        [JsonProperty("Power")]
        Power = 1,
        
        [JsonProperty("Temperature")]
        Temperature = 2,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 3,
    }
    
    [Description(@"Provides a generic method of setting up tables of monthly results. The report has multiple columns that are each defined using a repeated group of fields for any number of columns. A single Output:Table:Monthly object often produces multiple tables in the output. A table is produced for every instance of a particular output variable. For example, a table defined with zone variables will be produced once for every zone.")]
    [JsonObject("Output:Table:Monthly")]
    public class Output_Table_Monthly
    {
        
[JsonProperty(@"")]
public System.Single DigitsAfterDecimal { get; set; } = 2;
        
[JsonProperty(@"")]
public System.String VariableDetails { get; set; } = "";
    }
    
    [Description(@"Provides a generic method of setting up tables of annual results with one row per object. The report has multiple columns that are each defined using a repeated group of fields for any number of columns. A single Output:Table:Annual produces a single table in the output.")]
    [JsonObject("Output:Table:Annual")]
    public class Output_Table_Annual
    {
        
[Description(@"An optional text string that is compared to the names of the objects referenced by the variables and if they match are included in the table. A footnote will appear that indicates that the objects shown may not be all the objects that of that type that occur in the file.")]
[JsonProperty(@"An optional text string that is compared to the names of the objects referenced by the variables and if they match are included in the table. A footnote will appear that indicates that the objects shown may not be all the objects that of that type that occur in the file.")]
public System.String Filter { get; set; } = "";
        
[Description(@"Optional schedule name. If left blank, aggregation is performed for all hours simulated. If a schedule is specified, aggregation is performed for non-zero hours in the schedule.")]
[JsonProperty(@"Optional schedule name. If left blank, aggregation is performed for all hours simulated. If a schedule is specified, aggregation is performed for non-zero hours in the schedule.")]
public System.String ScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String VariableDetails { get; set; } = "";
    }
    
    [Description(@"default style for the OutputControl:Table:Style is comma -- this works well for importing into spreadsheet programs such as Excel(tm) but not so well for word processing programs -- there tab may be a better choice. fixed puts spaces between the ""columns"". HTML produces tables in HTML. XML produces an XML file. note - if no OutputControl:Table:Style is included, the defaults are comma and None.")]
    [JsonObject("OutputControl:Table:Style")]
    public class OutputControl_Table_Style
    {
        
[JsonProperty(@"")]
public YesNoDefault ColumnSeparator { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Comma");
        
[JsonProperty(@"")]
public YesNoDefault UnitConversion { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
    }
    
    public enum ColumnSeparatorType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("All")]
        All = 1,
        
        [JsonProperty("Comma")]
        Comma = 2,
        
        [JsonProperty("CommaAndHTML")]
        CommaAndHTML = 3,
        
        [JsonProperty("CommaAndXML")]
        CommaAndXML = 4,
        
        [JsonProperty("Fixed")]
        Fixed = 5,
        
        [JsonProperty("HTML")]
        HTML = 6,
        
        [JsonProperty("Tab")]
        Tab = 7,
        
        [JsonProperty("TabAndHTML")]
        TabAndHTML = 8,
        
        [JsonProperty("XML")]
        XML = 9,
        
        [JsonProperty("XMLandHTML")]
        XMLandHTML = 10,
    }
    
    public enum UnitConversionType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("InchPound")]
        InchPound = 1,
        
        [JsonProperty("JtoGJ")]
        JtoGJ = 2,
        
        [JsonProperty("JtoKWH")]
        JtoKWH = 3,
        
        [JsonProperty("JtoMJ")]
        JtoMJ = 4,
        
        [JsonProperty("None")]
        None = 5,
    }
    
    [Description("Calculations of the time that setpoints are not met use a tolerance of 0.2C. This" +
        " object allows changing the tolerance used to determine when setpoints are being" +
        " met.")]
    [JsonObject("OutputControl:ReportingTolerances")]
    public class OutputControl_ReportingTolerances
    {
        
[Description(@"If the zone temperature is below the heating setpoint by more than this value, the following output variables will increment as appropriate Zone Heating Setpoint Not Met Time Zone Heating Setpoint Not Met While Occupied Time This also impacts table report "Annual Building Utility Performance Summary" subtable "Comfort and Setpoint Not Met Summary"")]
[JsonProperty(@"If the zone temperature is below the heating setpoint by more than this value, the following output variables will increment as appropriate Zone Heating Setpoint Not Met Time Zone Heating Setpoint Not Met While Occupied Time This also impacts table report "Annual Building Utility Performance Summary" subtable "Comfort and Setpoint Not Met Summary"")]
public System.Single ToleranceForTimeHeatingSetpointNotMet { get; set; } = 0.2;
        
[Description(@"If the zone temperature is above the cooling setpoint by more than this value, the following output variables will increment as appropriate Zone Cooling Setpoint Not Met Time Zone Cooling Setpoint Not Met While Occupied Time This also impacts table report "Annual Building Utility Performance Summary" subtable "Comfort and Setpoint Not Met Summary"")]
[JsonProperty(@"If the zone temperature is above the cooling setpoint by more than this value, the following output variables will increment as appropriate Zone Cooling Setpoint Not Met Time Zone Cooling Setpoint Not Met While Occupied Time This also impacts table report "Annual Building Utility Performance Summary" subtable "Comfort and Setpoint Not Met Summary"")]
public System.Single ToleranceForTimeCoolingSetpointNotMet { get; set; } = 0.2;
    }
    
    [Description(@"each Output:Variable command picks variables to be put onto the standard output file (.eso) some variables may not be reported for every simulation. a list of variables that can be reported are available after a run on the report dictionary file (.rdd) if the Output:VariableDictionary has been requested.")]
    [JsonObject("Output:Variable")]
    public class Output_Variable
    {
        
[Description(@"use '*' (without quotes) to apply this variable to all keys")]
[JsonProperty(@"use '*' (without quotes) to apply this variable to all keys")]
public System.String KeyValue { get; set; } = (System.String)*;
        
[JsonProperty(@"")]
public System.String VariableName { get; set; } = "";
        
[Description(@"Detailed lists every instance (i.e. HVAC variable timesteps) Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod and Environment are the same")]
[JsonProperty(@"Detailed lists every instance (i.e. HVAC variable timesteps) Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod and Environment are the same")]
public YesNoDefault ReportingFrequency { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Hourly");
        
[JsonProperty(@"")]
public System.String ScheduleName { get; set; } = "";
    }
    
    public enum ReportingFrequencyType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Annual")]
        Annual = 1,
        
        [JsonProperty("Daily")]
        Daily = 2,
        
        [JsonProperty("Detailed")]
        Detailed = 3,
        
        [JsonProperty("Environment")]
        Environment = 4,
        
        [JsonProperty("Hourly")]
        Hourly = 5,
        
        [JsonProperty("Monthly")]
        Monthly = 6,
        
        [JsonProperty("RunPeriod")]
        RunPeriod = 7,
        
        [JsonProperty("Timestep")]
        Timestep = 8,
    }
    
    [Description(@"Each Output:Meter command picks meters to be put onto the standard output file (.eso) and meter file (.mtr). Not all meters are reported in every simulation. A list of meters that can be reported are available after a run on the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.")]
    [JsonObject("Output:Meter")]
    public class Output_Meter
    {
        
[Description(@"Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters or EndUse:..., e.g. GeneralLights:* for all General Lights Output:Meter puts results on both the eplusout.mtr and eplusout.eso files")]
[JsonProperty(@"Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters or EndUse:..., e.g. GeneralLights:* for all General Lights Output:Meter puts results on both the eplusout.mtr and eplusout.eso files")]
public System.String KeyName { get; set; } = "";
        
[Description(@"Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod and Environment are the same")]
[JsonProperty(@"Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod and Environment are the same")]
public YesNoDefault ReportingFrequency { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Hourly");
    }
    
    public enum ReportingFrequencyType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Annual")]
        Annual = 1,
        
        [JsonProperty("Daily")]
        Daily = 2,
        
        [JsonProperty("Detailed")]
        Detailed = 3,
        
        [JsonProperty("Detailed")]
        Detailed = 4,
        
        [JsonProperty("Environment")]
        Environment = 5,
        
        [JsonProperty("Hourly")]
        Hourly = 6,
        
        [JsonProperty("Monthly")]
        Monthly = 7,
        
        [JsonProperty("RunPeriod")]
        RunPeriod = 8,
        
        [JsonProperty("Timestep")]
        Timestep = 9,
    }
    
    [Description(@"Each Output:Meter:MeterFileOnly command picks meters to be put only onto meter file (.mtr). Not all meters are reported in every simulation. A list of meters that can be reported a list of meters that can be reported are available after a run on the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.")]
    [JsonObject("Output:Meter:MeterFileOnly")]
    public class Output_Meter_MeterFileOnly
    {
        
[Description(@"Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters or EndUse:..., e.g. GeneralLights:* for all General Lights Output:Meter:MeterFileOnly puts results on the eplusout.mtr file only")]
[JsonProperty(@"Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters or EndUse:..., e.g. GeneralLights:* for all General Lights Output:Meter:MeterFileOnly puts results on the eplusout.mtr file only")]
public System.String KeyName { get; set; } = "";
        
[Description(@"Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod and Environment are the same")]
[JsonProperty(@"Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod and Environment are the same")]
public YesNoDefault ReportingFrequency { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Hourly");
    }
    
    public enum ReportingFrequencyType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Annual")]
        Annual = 1,
        
        [JsonProperty("Daily")]
        Daily = 2,
        
        [JsonProperty("Detailed")]
        Detailed = 3,
        
        [JsonProperty("Environment")]
        Environment = 4,
        
        [JsonProperty("Hourly")]
        Hourly = 5,
        
        [JsonProperty("Monthly")]
        Monthly = 6,
        
        [JsonProperty("RunPeriod")]
        RunPeriod = 7,
        
        [JsonProperty("Timestep")]
        Timestep = 8,
    }
    
    [Description(@"Each Output:Meter:Cumulative command picks meters to be reported cumulatively onto the standard output file (.eso) and meter file (.mtr). Not all meters are reported in every simulation. a list of meters that can be reported are available after a run on the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.")]
    [JsonObject("Output:Meter:Cumulative")]
    public class Output_Meter_Cumulative
    {
        
[Description(@"Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters or EndUse:..., e.g. GeneralLights:* for all General Lights Output:Meter:Cumulative puts results on both the eplusout.mtr and eplusout.eso files")]
[JsonProperty(@"Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters or EndUse:..., e.g. GeneralLights:* for all General Lights Output:Meter:Cumulative puts results on both the eplusout.mtr and eplusout.eso files")]
public System.String KeyName { get; set; } = "";
        
[Description(@"Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod and Environment are the same")]
[JsonProperty(@"Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod and Environment are the same")]
public YesNoDefault ReportingFrequency { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Hourly");
    }
    
    public enum ReportingFrequencyType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Annual")]
        Annual = 1,
        
        [JsonProperty("Daily")]
        Daily = 2,
        
        [JsonProperty("Detailed")]
        Detailed = 3,
        
        [JsonProperty("Environment")]
        Environment = 4,
        
        [JsonProperty("Hourly")]
        Hourly = 5,
        
        [JsonProperty("Monthly")]
        Monthly = 6,
        
        [JsonProperty("RunPeriod")]
        RunPeriod = 7,
        
        [JsonProperty("Timestep")]
        Timestep = 8,
    }
    
    [Description(@"Each Output:Meter:Cumulative:MeterFileOnly command picks meters to be reported cumulatively onto the standard output file (.eso) and meter file (.mtr). Not all meters are reported in every simulation. a list of meters that can be reported are available after a run on the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.")]
    [JsonObject("Output:Meter:Cumulative:MeterFileOnly")]
    public class Output_Meter_Cumulative_MeterFileOnly
    {
        
[Description(@"Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters or EndUse:..., e.g. GeneralLights:* for all General Lights Output:Meter:Cumulative:MeterFileOnly puts results on the eplusout.mtr file only")]
[JsonProperty(@"Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters or EndUse:..., e.g. GeneralLights:* for all General Lights Output:Meter:Cumulative:MeterFileOnly puts results on the eplusout.mtr file only")]
public System.String KeyName { get; set; } = "";
        
[Description(@"Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod and Environment are the same")]
[JsonProperty(@"Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod and Environment are the same")]
public YesNoDefault ReportingFrequency { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Hourly");
    }
    
    public enum ReportingFrequencyType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Annual")]
        Annual = 1,
        
        [JsonProperty("Daily")]
        Daily = 2,
        
        [JsonProperty("Detailed")]
        Detailed = 3,
        
        [JsonProperty("Environment")]
        Environment = 4,
        
        [JsonProperty("Hourly")]
        Hourly = 5,
        
        [JsonProperty("Monthly")]
        Monthly = 6,
        
        [JsonProperty("RunPeriod")]
        RunPeriod = 7,
        
        [JsonProperty("Timestep")]
        Timestep = 8,
    }
    
    [Description(@"Used to allow users to combine specific variables and/or meters into ""custom"" meter configurations. To access these meters by name, one must first run a simulation to generate the RDD/MDD files and names. A Meter:Custom cannot reference another Meter:Custom.")]
    [JsonObject("Meter:Custom")]
    public class Meter_Custom
    {
        
[JsonProperty(@"")]
public YesNoDefault ResourceType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String VariableDetails { get; set; } = "";
    }
    
    public enum ResourceTypeType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("DistrictCooling")]
        DistrictCooling = 2,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 3,
        
        [JsonProperty("Electricity")]
        Electricity = 4,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 5,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 6,
        
        [JsonProperty("Gasoline")]
        Gasoline = 7,
        
        [JsonProperty("Generic")]
        Generic = 8,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 9,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 10,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Steam")]
        Steam = 13,
        
        [JsonProperty("Water")]
        Water = 14,
    }
    
    [Description("Used to allow users to combine specific variables and/or meters into \"custom\" met" +
        "er configurations. To access these meters by name, one must first run a simulati" +
        "on to generate the RDD/MDD files and names.")]
    [JsonObject("Meter:CustomDecrement")]
    public class Meter_CustomDecrement
    {
        
[JsonProperty(@"")]
public YesNoDefault ResourceType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String SourceMeterName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String VariableDetails { get; set; } = "";
    }
    
    public enum ResourceTypeType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("DistrictCooling")]
        DistrictCooling = 2,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 3,
        
        [JsonProperty("Electricity")]
        Electricity = 4,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 5,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 6,
        
        [JsonProperty("Gasoline")]
        Gasoline = 7,
        
        [JsonProperty("Generic")]
        Generic = 8,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 9,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 10,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 11,
        
        [JsonProperty("Propane")]
        Propane = 12,
        
        [JsonProperty("Steam")]
        Steam = 13,
        
        [JsonProperty("Water")]
        Water = 14,
    }
    
    [Description("Conditionally turn on/off output from EnergyPlus.")]
    [JsonObject("OutputControl:Files")]
    public class OutputControl_Files
    {
        
[JsonProperty(@"")]
public YesNoDefault OutputCsv { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public YesNoDefault OutputMtr { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputEso { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputEio { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputTabular { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputSqlite { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputJson { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputAudit { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputZoneSizing { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputSystemSizing { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputDxf { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputBnd { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputRdd { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputMdd { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputMtd { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputEnd { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputShd { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputDfs { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputGlhe { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputDelightin { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputDelighteldmp { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputDelightdfdmp { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputEdd { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputDbg { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputPerflog { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputSln { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputSci { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputWrl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputScreen { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputExtshd { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[Description(@"Not Implemented Yet")]
[JsonProperty(@"Not Implemented Yet")]
public YesNoDefault OutputTarcog { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
    }
    
    [Description("Output from EnergyPlus can be written to JSON format files.")]
    [JsonObject("Output:JSON")]
    public class Output_JSON
    {
        
[JsonProperty(@"")]
public YesNoDefault OptionType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault OutputJson { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public YesNoDefault OutputCbor { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public YesNoDefault OutputMessagepack { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
    }
    
    public enum OptionTypeType
    {
        
        [JsonProperty("TimeSeries")]
        TimeSeries = 0,
        
        [JsonProperty("TimeSeriesAndTabular")]
        TimeSeriesAndTabular = 1,
    }
    
    [Description("Output from EnergyPlus can be written to an SQLite format file.")]
    [JsonObject("Output:SQLite")]
    public class Output_SQLite
    {
        
[JsonProperty(@"")]
public YesNoDefault OptionType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Unit conversion option used when writing SQLite Tabular Data This option applies to TabularData and TabularDatawithString in the SQLite file")]
[JsonProperty(@"Unit conversion option used when writing SQLite Tabular Data This option applies to TabularData and TabularDatawithString in the SQLite file")]
public YesNoDefault UnitConversionForTabularData { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "UseOutputControlTableStyle");
    }
    
    public enum OptionTypeType
    {
        
        [JsonProperty("Simple")]
        Simple = 0,
        
        [JsonProperty("SimpleAndTabular")]
        SimpleAndTabular = 1,
    }
    
    public enum UnitConversionForTabularDataType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("InchPound")]
        InchPound = 1,
        
        [JsonProperty("JtoGJ")]
        JtoGJ = 2,
        
        [JsonProperty("JtoKWH")]
        JtoKWH = 3,
        
        [JsonProperty("JtoMJ")]
        JtoMJ = 4,
        
        [JsonProperty("None")]
        None = 5,
        
        [JsonProperty("UseOutputControlTableStyle")]
        UseOutputControlTableStyle = 6,
    }
    
    [Description("This is used to Automatically report the facility meters and turn on the Environm" +
        "ental Impact Report calculations for all of the Environmental Factors.")]
    [JsonObject("Output:EnvironmentalImpactFactors")]
    public class Output_EnvironmentalImpactFactors
    {
        
[Description(@"Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod and Environment are the same. Detailed is not a valid choice.")]
[JsonProperty(@"Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod and Environment are the same. Detailed is not a valid choice.")]
public YesNoDefault ReportingFrequency { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum ReportingFrequencyType
    {
        
        [JsonProperty("Annual")]
        Annual = 0,
        
        [JsonProperty("Daily")]
        Daily = 1,
        
        [JsonProperty("Environment")]
        Environment = 2,
        
        [JsonProperty("Hourly")]
        Hourly = 3,
        
        [JsonProperty("Monthly")]
        Monthly = 4,
        
        [JsonProperty("RunPeriod")]
        RunPeriod = 5,
        
        [JsonProperty("Timestep")]
        Timestep = 6,
    }
    
    [Description("Used to help convert district and ideal energy use to a fuel type and provide tot" +
        "al carbon equivalent with coefficients Also used in Source=>Site conversions.")]
    [JsonObject("EnvironmentalImpactFactors")]
    public class EnvironmentalImpactFactors
    {
        
[Description(@"District heating efficiency used when converted to natural gas")]
[JsonProperty(@"District heating efficiency used when converted to natural gas")]
public System.Single DistrictHeatingEfficiency { get; set; } = 0.3;
        
[Description(@"District cooling COP used when converted to electricity")]
[JsonProperty(@"District cooling COP used when converted to electricity")]
public System.Single DistrictCoolingCop { get; set; } = 3;
        
[Description(@"Steam conversion efficiency used to convert steam usage to natural gas")]
[JsonProperty(@"Steam conversion efficiency used to convert steam usage to natural gas")]
public System.Single SteamConversionEfficiency { get; set; } = 0.25;
        
[JsonProperty(@"")]
public System.Single TotalCarbonEquivalentEmissionFactorFromNo { get; set; } = 80.7272;
        
[JsonProperty(@"")]
public System.Single TotalCarbonEquivalentEmissionFactorFromCh { get; set; } = 6.2727;
        
[JsonProperty(@"")]
public System.Single TotalCarbonEquivalentEmissionFactorFromCo { get; set; } = 0.2727;
    }
    
    [Description("Provides Fuel Factors for Emissions as well as Source=>Site conversions. OtherFue" +
        "l1, OtherFuel2 provide options for users who want to create and use fuels that m" +
        "ay not be mainstream (biomass, wood, pellets).")]
    [JsonObject("FuelFactors")]
    public class FuelFactors
    {
        
[JsonProperty(@"")]
public YesNoDefault ExistingFuelResourceName { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String UnitsOfMeasure { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single EnergyPerUnitFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SourceEnergyFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SourceEnergyScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single CoEmissionFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String CoEmissionFactorScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single CoEmissionFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String CoEmissionFactorScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single ChEmissionFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ChEmissionFactorScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NoxEmissionFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String NoxEmissionFactorScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NoEmissionFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String NoEmissionFactorScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SoEmissionFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SoEmissionFactorScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single PmEmissionFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String PmEmissionFactorScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single PmEmissionFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String PmEmissionFactorScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single PmEmissionFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String PmEmissionFactorScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NhEmissionFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String NhEmissionFactorScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NmvocEmissionFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String NmvocEmissionFactorScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single HgEmissionFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String HgEmissionFactorScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single PbEmissionFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String PbEmissionFactorScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WaterEmissionFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String WaterEmissionFactorScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NuclearHighLevelEmissionFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String NuclearHighLevelEmissionFactorScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NuclearLowLevelEmissionFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String NuclearLowLevelEmissionFactorScheduleName { get; set; } = "";
    }
    
    public enum ExistingFuelResourceNameType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("Electricity")]
        Electricity = 2,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 3,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 4,
        
        [JsonProperty("Gasoline")]
        Gasoline = 5,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 6,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 7,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 8,
        
        [JsonProperty("Propane")]
        Propane = 9,
    }
    
    [Description("Special keys to produce certain warning messages or effect certain simulation cha" +
        "racteristics.")]
    [JsonObject("Output:Diagnostics")]
    public class Output_Diagnostics
    {
        
[JsonProperty(@"")]
public System.String Diagnostics { get; set; } = "";
    }
    
    [Description("switch eplusout.dbg file on or off")]
    [JsonObject("Output:DebuggingData")]
    public class Output_DebuggingData
    {
        
[JsonProperty(@"")]
public YesNoDefault ReportDebuggingData { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public YesNoDefault ReportDuringWarmup { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
    }
    
    [Description("This object does not come from a user input. This is generated by a pre-processor" +
        " so that various conditions can be gracefully passed on by the InputProcessor.")]
    [JsonObject("Output:PreprocessorMessage")]
    public class Output_PreprocessorMessage
    {
        
[JsonProperty(@"")]
public System.String PreprocessorName { get; set; } = "";
        
[Description(@"Depending on type, InputProcessor may terminate the program.")]
[JsonProperty(@"Depending on type, InputProcessor may terminate the program.")]
public YesNoDefault ErrorSeverity { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String MessageLine { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MessageLine { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MessageLine { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MessageLine { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MessageLine { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MessageLine { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MessageLine { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MessageLine { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MessageLine { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MessageLine { get; set; } = "";
    }
    
    public enum ErrorSeverityType
    {
        
        [JsonProperty("Fatal")]
        Fatal = 0,
        
        [JsonProperty("Information")]
        Information = 1,
        
        [JsonProperty("Severe")]
        Severe = 2,
        
        [JsonProperty("Warning")]
        Warning = 3,
    }
}
namespace EnergyPlus.Parametrics
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Parametric objects allow a set of multiple simulations to be defined in a single idf file. The parametric preprocessor scans the idf for Parametric:* objects then creates and runs multiple idf files, one for each defined simulation. The core parametric object is Parametric:SetValueForRun which defines the name of a parameter and sets the parameter to different values depending on which run is being simulated.")]
    [JsonObject("Parametric:SetValueForRun")]
    public class Parametric_SetValueForRun
    {
        
[JsonProperty(@"")]
public System.String Values { get; set; } = "";
    }
    
    [Description(@"This object allows some types of objects to be included for some parametric cases and not for others. For example, you might want an overhang on a window in some parametric runs and not others. A single Parametric:Logic object is allowed per file. Consult the Input Output Reference for available commands and syntax.")]
    [JsonObject("Parametric:Logic")]
    public class Parametric_Logic
    {
        
[JsonProperty(@"")]
public System.String Lines { get; set; } = "";
    }
    
    [Description("Controls which parametric runs are simulated. This object is optional. If it is n" +
        "ot included, then all parametric runs are performed.")]
    [JsonObject("Parametric:RunControl")]
    public class Parametric_RunControl
    {
        
[JsonProperty(@"")]
public System.String Runs { get; set; } = "";
    }
    
    [Description("Defines the suffixes to be appended to the idf and output file names for each par" +
        "ametric run. If this object is omitted, the suffix will default to the run numbe" +
        "r.")]
    [JsonObject("Parametric:FileNameSuffix")]
    public class Parametric_FileNameSuffix
    {
        
[JsonProperty(@"")]
public System.String Suffixes { get; set; } = "";
    }
}
namespace EnergyPlus.PerformanceCurves
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Linear curve with one independent variable. Input for the linear curve consists of a curve name, the two coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x")]
    [JsonObject("Curve:Linear")]
    public class Curve_Linear
    {
        
[JsonProperty(@"")]
public System.Single CoefficientConstant { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfX { get; set; } = ;
        
[Description(@"Specify the minimum value calculated by this curve object")]
[JsonProperty(@"Specify the minimum value calculated by this curve object")]
public System.Single MinimumCurveOutput { get; set; } = ;
        
[Description(@"Specify the maximum value calculated by this curve object")]
[JsonProperty(@"Specify the maximum value calculated by this curve object")]
public System.Single MaximumCurveOutput { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForX { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault OutputUnitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
    }
    
    public enum InputUnitTypeForXType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Pressure")]
        Pressure = 5,
        
        [JsonProperty("Temperature")]
        Temperature = 6,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 7,
    }
    
    public enum OutputUnitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Linear curve with four independent variables. Input for the linear curve consists of a curve name, the two coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*w + C3*x + C4*y + C5*z")]
    [JsonObject("Curve:QuadLinear")]
    public class Curve_QuadLinear
    {
        
[JsonProperty(@"")]
public System.Single CoefficientConstant { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientW { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfW { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfW { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfZ { get; set; } = ;
        
[Description(@"Specify the minimum value calculated by this curve object")]
[JsonProperty(@"Specify the minimum value calculated by this curve object")]
public System.Single MinimumCurveOutput { get; set; } = ;
        
[Description(@"Specify the maximum value calculated by this curve object")]
[JsonProperty(@"Specify the maximum value calculated by this curve object")]
public System.Single MaximumCurveOutput { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForW { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForX { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForY { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForZ { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
    }
    
    public enum InputUnitTypeForWType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
        
        [JsonProperty("VolumetricFlowPerPower")]
        VolumetricFlowPerPower = 7,
    }
    
    public enum InputUnitTypeForXType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
        
        [JsonProperty("VolumetricFlowPerPower")]
        VolumetricFlowPerPower = 7,
    }
    
    public enum InputUnitTypeForYType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
        
        [JsonProperty("VolumetricFlowPerPower")]
        VolumetricFlowPerPower = 7,
    }
    
    public enum InputUnitTypeForZType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
        
        [JsonProperty("VolumetricFlowPerPower")]
        VolumetricFlowPerPower = 7,
    }
    
    [Description(@"Linear curve with five independent variables. Input for the linear curve consists of a curve name, the two coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*v + C3*w + C4*x + C5*y + C6*z")]
    [JsonObject("Curve:QuintLinear")]
    public class Curve_QuintLinear
    {
        
[JsonProperty(@"")]
public System.Single CoefficientConstant { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientV { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientW { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfV { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfV { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfW { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfW { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfZ { get; set; } = ;
        
[Description(@"Specify the minimum value calculated by this curve object")]
[JsonProperty(@"Specify the minimum value calculated by this curve object")]
public System.Single MinimumCurveOutput { get; set; } = ;
        
[Description(@"Specify the maximum value calculated by this curve object")]
[JsonProperty(@"Specify the maximum value calculated by this curve object")]
public System.Single MaximumCurveOutput { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForV { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForW { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForX { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForY { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForZ { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
    }
    
    public enum InputUnitTypeForVType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
        
        [JsonProperty("VolumetricFlowPerPower")]
        VolumetricFlowPerPower = 7,
    }
    
    public enum InputUnitTypeForWType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
        
        [JsonProperty("VolumetricFlowPerPower")]
        VolumetricFlowPerPower = 7,
    }
    
    public enum InputUnitTypeForXType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
        
        [JsonProperty("VolumetricFlowPerPower")]
        VolumetricFlowPerPower = 7,
    }
    
    public enum InputUnitTypeForYType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
        
        [JsonProperty("VolumetricFlowPerPower")]
        VolumetricFlowPerPower = 7,
    }
    
    public enum InputUnitTypeForZType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
        
        [JsonProperty("VolumetricFlowPerPower")]
        VolumetricFlowPerPower = 7,
    }
    
    [Description(@"Quadratic curve with one independent variable. Input for a quadratic curve consists of the curve name, the three coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x + C3*x**2")]
    [JsonObject("Curve:Quadratic")]
    public class Curve_Quadratic
    {
        
[JsonProperty(@"")]
public System.Single CoefficientConstant { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfX { get; set; } = ;
        
[Description(@"Specify the minimum value calculated by this curve object")]
[JsonProperty(@"Specify the minimum value calculated by this curve object")]
public System.Single MinimumCurveOutput { get; set; } = ;
        
[Description(@"Specify the maximum value calculated by this curve object")]
[JsonProperty(@"Specify the maximum value calculated by this curve object")]
public System.Single MaximumCurveOutput { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForX { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault OutputUnitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
    }
    
    public enum InputUnitTypeForXType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum OutputUnitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Cubic curve with one independent variable. Input for a cubic curve consists of the curve name, the 4 coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x + C3*x**2 + C4*x**3")]
    [JsonObject("Curve:Cubic")]
    public class Curve_Cubic
    {
        
[JsonProperty(@"")]
public System.Single CoefficientConstant { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfX { get; set; } = ;
        
[Description(@"Specify the minimum value calculated by this curve object")]
[JsonProperty(@"Specify the minimum value calculated by this curve object")]
public System.Single MinimumCurveOutput { get; set; } = ;
        
[Description(@"Specify the maximum value calculated by this curve object")]
[JsonProperty(@"Specify the maximum value calculated by this curve object")]
public System.Single MaximumCurveOutput { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForX { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault OutputUnitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
    }
    
    public enum InputUnitTypeForXType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum OutputUnitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Quartic (fourth order polynomial) curve with one independent variable. Input for a Quartic curve consists of the curve name, the five coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x + C3*x**2 + C4*x**3 + C5*x**4")]
    [JsonObject("Curve:Quartic")]
    public class Curve_Quartic
    {
        
[JsonProperty(@"")]
public System.Single CoefficientConstant { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfX { get; set; } = ;
        
[Description(@"Specify the minimum value calculated by this curve object")]
[JsonProperty(@"Specify the minimum value calculated by this curve object")]
public System.Single MinimumCurveOutput { get; set; } = ;
        
[Description(@"Specify the maximum value calculated by this curve object")]
[JsonProperty(@"Specify the maximum value calculated by this curve object")]
public System.Single MaximumCurveOutput { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForX { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault OutputUnitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
    }
    
    public enum InputUnitTypeForXType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum OutputUnitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Exponent curve with one independent variable. Input for a exponent curve consists of the curve name, the 3 coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x**C3 The independent variable x is raised to the C3 power, multiplied by C2, and C1 is added to the result.")]
    [JsonObject("Curve:Exponent")]
    public class Curve_Exponent
    {
        
[JsonProperty(@"")]
public System.Single CoefficientConstant { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientConstant { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientConstant { get; set; } = ;
        
[Description(@"Specify the minimum value of the independent variable x allowed")]
[JsonProperty(@"Specify the minimum value of the independent variable x allowed")]
public System.Single MinimumValueOfX { get; set; } = ;
        
[Description(@"Specify the maximum value of the independent variable x allowed")]
[JsonProperty(@"Specify the maximum value of the independent variable x allowed")]
public System.Single MaximumValueOfX { get; set; } = ;
        
[Description(@"Specify the minimum value calculated by this curve object")]
[JsonProperty(@"Specify the minimum value calculated by this curve object")]
public System.Single MinimumCurveOutput { get; set; } = ;
        
[Description(@"Specify the maximum value calculated by this curve object")]
[JsonProperty(@"Specify the maximum value calculated by this curve object")]
public System.Single MaximumCurveOutput { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForX { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault OutputUnitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
    }
    
    public enum InputUnitTypeForXType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum OutputUnitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Cubic curve with two independent variables. Input consists of the curve name, the ten coefficients, and the minimum and maximum values for each of the independent variables. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x + C3*x**2 + C4*y + C5*y**2 + C6*x*y + C7*x**3 + C8*y**3 + C9*x**2*y + C10*x*y**2")]
    [JsonObject("Curve:Bicubic")]
    public class Curve_Bicubic
    {
        
[JsonProperty(@"")]
public System.Single CoefficientConstant { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfY { get; set; } = ;
        
[Description(@"Specify the minimum value calculated by this curve object")]
[JsonProperty(@"Specify the minimum value calculated by this curve object")]
public System.Single MinimumCurveOutput { get; set; } = ;
        
[Description(@"Specify the maximum value calculated by this curve object")]
[JsonProperty(@"Specify the maximum value calculated by this curve object")]
public System.Single MaximumCurveOutput { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForX { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForY { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault OutputUnitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
    }
    
    public enum InputUnitTypeForXType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum InputUnitTypeForYType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum OutputUnitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Quadratic curve with two independent variables. Input consists of the curve name, the six coefficients, and min and max values for each of the independent variables. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x + C3*x**2 + C4*y + C5*y**2 + C6*x*y")]
    [JsonObject("Curve:Biquadratic")]
    public class Curve_Biquadratic
    {
        
[JsonProperty(@"")]
public System.Single CoefficientConstant { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfY { get; set; } = ;
        
[Description(@"Specify the minimum value calculated by this curve object")]
[JsonProperty(@"Specify the minimum value calculated by this curve object")]
public System.Single MinimumCurveOutput { get; set; } = ;
        
[Description(@"Specify the maximum value calculated by this curve object")]
[JsonProperty(@"Specify the maximum value calculated by this curve object")]
public System.Single MaximumCurveOutput { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForX { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForY { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault OutputUnitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
    }
    
    public enum InputUnitTypeForXType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum InputUnitTypeForYType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum OutputUnitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Quadratic-linear curve with two independent variables. Input consists of the curve name, the six coefficients, and min and max values for each of the independent variables. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = (C1 + C2*x + C3*x**2) + (C4 + C5*x + C6*x**2)*y")]
    [JsonObject("Curve:QuadraticLinear")]
    public class Curve_QuadraticLinear
    {
        
[JsonProperty(@"")]
public System.Single CoefficientConstant { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfY { get; set; } = ;
        
[Description(@"Specify the minimum value calculated by this curve object")]
[JsonProperty(@"Specify the minimum value calculated by this curve object")]
public System.Single MinimumCurveOutput { get; set; } = ;
        
[Description(@"Specify the maximum value calculated by this curve object")]
[JsonProperty(@"Specify the maximum value calculated by this curve object")]
public System.Single MaximumCurveOutput { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForX { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForY { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault OutputUnitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
    }
    
    public enum InputUnitTypeForXType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum InputUnitTypeForYType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum OutputUnitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Cubic-linear curve with two independent variables. Input consists of the curve name, the six coefficients, and min and max values for each of the independent variables. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = (C1 + C2*x + C3*x**2 + C4*x**3) + (C5 + C6*x)*y")]
    [JsonObject("Curve:CubicLinear")]
    public class Curve_CubicLinear
    {
        
[JsonProperty(@"")]
public System.Single CoefficientConstant { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfY { get; set; } = ;
        
[Description(@"Specify the minimum value calculated by this curve object")]
[JsonProperty(@"Specify the minimum value calculated by this curve object")]
public System.Single MinimumCurveOutput { get; set; } = ;
        
[Description(@"Specify the maximum value calculated by this curve object")]
[JsonProperty(@"Specify the maximum value calculated by this curve object")]
public System.Single MaximumCurveOutput { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForX { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForY { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault OutputUnitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
    }
    
    public enum InputUnitTypeForXType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Temperature")]
        Temperature = 2,
    }
    
    public enum InputUnitTypeForYType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Temperature")]
        Temperature = 2,
    }
    
    public enum OutputUnitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Quadratic curve with three independent variables. Input consists of the curve name, the twenty seven coefficients, and min and max values for each of the independent variables. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = a0 + a1*x**2 + a2*x + a3*y**2 + a4*y + a5*z**2 + a6*z + a7*x**2*y**2 + a8*x*y + a9*x*y**2 + a10*x**2*y + a11*x**2*z**2 + a12*x*z + a13*x*z**2 + a14*x**2*z + a15*y**2*z**2 + a16*y*z + a17*y*z**2 + a18*y**2*z + a19*x**2*y**2*z**2 + a20*x**2*y**2*z + a21*x**2*y*z**2 + a22*x*y**2*z**2 + a23*x**2*y*z + a24*x*y**2*z + a25*x*y*z**2 +a26*x*y*z")]
    [JsonObject("Curve:Triquadratic")]
    public class Curve_Triquadratic
    {
        
[JsonProperty(@"")]
public System.Single CoefficientConstant { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientYZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientYZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientYZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientYZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXYZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXYZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXYZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXYZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXYZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXYZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXYZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientXYZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfZ { get; set; } = ;
        
[Description(@"Specify the minimum value calculated by this curve object")]
[JsonProperty(@"Specify the minimum value calculated by this curve object")]
public System.Single MinimumCurveOutput { get; set; } = ;
        
[Description(@"Specify the maximum value calculated by this curve object")]
[JsonProperty(@"Specify the maximum value calculated by this curve object")]
public System.Single MaximumCurveOutput { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForX { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForY { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForZ { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault OutputUnitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
    }
    
    public enum InputUnitTypeForXType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum InputUnitTypeForYType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum InputUnitTypeForZType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
        
        [JsonProperty("Distance")]
        Distance = 2,
        
        [JsonProperty("MassFlow")]
        MassFlow = 3,
        
        [JsonProperty("Power")]
        Power = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 6,
    }
    
    public enum OutputUnitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description("Sets up curve information for minor loss and/or friction calculations in plant pr" +
        "essure simulations Expression: DeltaP = {K + f*(L/D)} * (rho * V^2) / 2")]
    [JsonObject("Curve:Functional:PressureDrop")]
    public class Curve_Functional_PressureDrop
    {
        
[Description(@""D" in above expression, used to also calculate local velocity")]
[JsonProperty(@""D" in above expression, used to also calculate local velocity")]
public System.Single Diameter { get; set; } = ;
        
[Description(@""K" in above expression")]
[JsonProperty(@""K" in above expression")]
public System.Single MinorLossCoefficient { get; set; } = ;
        
[Description(@""L" in above expression")]
[JsonProperty(@""L" in above expression")]
public System.Single Length { get; set; } = ;
        
[Description(@"This will be used to calculate "f" from Moody-chart approximations")]
[JsonProperty(@"This will be used to calculate "f" from Moody-chart approximations")]
public System.Single Roughness { get; set; } = ;
        
[Description(@"Optional way to set a constant value for "f", instead of using internal Moody-chart approximations")]
[JsonProperty(@"Optional way to set a constant value for "f", instead of using internal Moody-chart approximations")]
public System.Single FixedFrictionFactor { get; set; } = ;
    }
    
    [Description(@"Special curve type with two independent variables. Input for the fan total pressure rise curve consists of the curve name, the four coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = C1*Qfan**2+C2*Qfan+C3*Qfan*(Psm-Po)**0.5+C4*(Psm-Po) Po assumed to be zero See InputOut Reference for curve details")]
    [JsonObject("Curve:FanPressureRise")]
    public class Curve_FanPressureRise
    {
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfQfan { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfQfan { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfPsm { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfPsm { get; set; } = ;
        
[Description(@"Specify the minimum value calculated by this curve object")]
[JsonProperty(@"Specify the minimum value calculated by this curve object")]
public System.Single MinimumCurveOutput { get; set; } = ;
        
[Description(@"Specify the maximum value calculated by this curve object")]
[JsonProperty(@"Specify the maximum value calculated by this curve object")]
public System.Single MaximumCurveOutput { get; set; } = ;
    }
    
    [Description(@"Exponential-modified skew normal curve with one independent variable. Input consists of the curve name, the four coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = see Input Output Reference")]
    [JsonObject("Curve:ExponentialSkewNormal")]
    public class Curve_ExponentialSkewNormal
    {
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfX { get; set; } = ;
        
[Description(@"Specify the minimum value calculated by this curve object")]
[JsonProperty(@"Specify the minimum value calculated by this curve object")]
public System.Single MinimumCurveOutput { get; set; } = ;
        
[Description(@"Specify the maximum value calculated by this curve object")]
[JsonProperty(@"Specify the maximum value calculated by this curve object")]
public System.Single MaximumCurveOutput { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForX { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault OutputUnitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
    }
    
    public enum InputUnitTypeForXType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
    }
    
    public enum OutputUnitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Sigmoid curve with one independent variable. Input consists of the curve name, the five coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = C1+C2/[1+exp((C3-x)/C4)]**C5")]
    [JsonObject("Curve:Sigmoid")]
    public class Curve_Sigmoid
    {
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfX { get; set; } = ;
        
[Description(@"Specify the minimum value calculated by this curve object")]
[JsonProperty(@"Specify the minimum value calculated by this curve object")]
public System.Single MinimumCurveOutput { get; set; } = ;
        
[Description(@"Specify the maximum value calculated by this curve object")]
[JsonProperty(@"Specify the maximum value calculated by this curve object")]
public System.Single MaximumCurveOutput { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForX { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault OutputUnitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
    }
    
    public enum InputUnitTypeForXType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
    }
    
    public enum OutputUnitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Rectangular hyperbola type 1 curve with one independent variable. Input consists of the curve name, the three coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = ((C1*x)/(C2+x))+C3")]
    [JsonObject("Curve:RectangularHyperbola1")]
    public class Curve_RectangularHyperbola
    {
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfX { get; set; } = ;
        
[Description(@"Specify the minimum value calculated by this curve object")]
[JsonProperty(@"Specify the minimum value calculated by this curve object")]
public System.Single MinimumCurveOutput { get; set; } = ;
        
[Description(@"Specify the maximum value calculated by this curve object")]
[JsonProperty(@"Specify the maximum value calculated by this curve object")]
public System.Single MaximumCurveOutput { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForX { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault OutputUnitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfX { get; set; } = ;
        
[Description(@"Specify the minimum value calculated by this curve object")]
[JsonProperty(@"Specify the minimum value calculated by this curve object")]
public System.Single MinimumCurveOutput { get; set; } = ;
        
[Description(@"Specify the maximum value calculated by this curve object")]
[JsonProperty(@"Specify the maximum value calculated by this curve object")]
public System.Single MaximumCurveOutput { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForX { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault OutputUnitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
    }
    
    public enum InputUnitTypeForXType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
    }
    
    public enum OutputUnitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Rectangular hyperbola type 2 curve with one independent variable. Input consists of the curve name, the three coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = ((C1*x)/(C2+x))+(C3*x)")]
    [JsonObject("Curve:RectangularHyperbola2")]
    public class Curve_RectangularHyperbola
    {
    }
    
    public enum InputUnitTypeForXType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
    }
    
    public enum OutputUnitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Exponential decay curve with one independent variable. Input consists of the curve name, the three coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = C1+C2*exp(C3*x)")]
    [JsonObject("Curve:ExponentialDecay")]
    public class Curve_ExponentialDecay
    {
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfX { get; set; } = ;
        
[Description(@"Specify the minimum value calculated by this curve object")]
[JsonProperty(@"Specify the minimum value calculated by this curve object")]
public System.Single MinimumCurveOutput { get; set; } = ;
        
[Description(@"Specify the maximum value calculated by this curve object")]
[JsonProperty(@"Specify the maximum value calculated by this curve object")]
public System.Single MaximumCurveOutput { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForX { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault OutputUnitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
    }
    
    public enum InputUnitTypeForXType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
    }
    
    public enum OutputUnitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"Double exponential decay curve with one independent variable. Input consists of the curve name, the five coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = C1+C2*exp(C3*x)+C4*exp(C5*x)")]
    [JsonObject("Curve:DoubleExponentialDecay")]
    public class Curve_DoubleExponentialDecay
    {
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfX { get; set; } = ;
        
[Description(@"Specify the minimum value calculated by this curve object")]
[JsonProperty(@"Specify the minimum value calculated by this curve object")]
public System.Single MinimumCurveOutput { get; set; } = ;
        
[Description(@"Specify the maximum value calculated by this curve object")]
[JsonProperty(@"Specify the maximum value calculated by this curve object")]
public System.Single MaximumCurveOutput { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForX { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault OutputUnitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
    }
    
    public enum InputUnitTypeForXType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
    }
    
    public enum OutputUnitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
    
    [Description(@"This chiller part-load performance curve has three independent variables. Input consists of the curve name, the twelve coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x + C3*x**2 + C4*y + C5*y**2 + C6*x*y + C7*x**3 + C8*y**3 + C9*x**2*y + C10*x*y**2 + C11*x**2*y**2 + C12*z*y**3 x = dT* = normalized fractional Lift = dT / dTref y = PLR = part load ratio (cooling load/steady state capacity) z = Tdev* = normalized Tdev = Tdev / dTref Where: dT = Lift = Leaving Condenser Water Temperature - Leaving Chilled Water Temperature dTref = dT at the reference condition Tdev = Leaving Chilled Water Temperature - Reference Chilled Water Temperature")]
    [JsonObject("Curve:ChillerPartLoadWithLift")]
    public class Curve_ChillerPartLoadWithLift
    {
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfX { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfY { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumValueOfZ { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValueOfZ { get; set; } = ;
        
[Description(@"Specify the minimum value calculated by this curve object")]
[JsonProperty(@"Specify the minimum value calculated by this curve object")]
public System.Single MinimumCurveOutput { get; set; } = ;
        
[Description(@"Specify the maximum value calculated by this curve object")]
[JsonProperty(@"Specify the maximum value calculated by this curve object")]
public System.Single MaximumCurveOutput { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForX { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForY { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault InputUnitTypeForZ { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public YesNoDefault OutputUnitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
    }
    
    public enum InputUnitTypeForXType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
    }
    
    public enum InputUnitTypeForYType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
    }
    
    public enum InputUnitTypeForZType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 1,
    }
    
    public enum OutputUnitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
}
namespace EnergyPlus.PerformanceTables
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("An independent variable representing a single dimension of a Table:Lookup object." +
        "")]
    [JsonObject("Table:IndependentVariable")]
    public class Table_IndependentVariable
    {
        
[JsonProperty(@"")]
public YesNoDefault InterpolationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Linear");
        
[JsonProperty(@"")]
public YesNoDefault ExtrapolationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Constant");
        
[JsonProperty(@"")]
public System.Single MinimumValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NormalizationReferenceValue { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault UnitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public System.String ExternalFileName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single ExternalFileColumnNumber { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ExternalFileStartingRowNumber { get; set; } = ;
        
[JsonProperty(@"")]
public System.String Values { get; set; } = "";
    }
    
    public enum InterpolationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Cubic")]
        Cubic = 1,
        
        [JsonProperty("Linear")]
        Linear = 2,
    }
    
    public enum ExtrapolationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Constant")]
        Constant = 1,
        
        [JsonProperty("Linear")]
        Linear = 2,
    }
    
    public enum UnitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Angle")]
        Angle = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Distance")]
        Distance = 3,
        
        [JsonProperty("MassFlow")]
        MassFlow = 4,
        
        [JsonProperty("Power")]
        Power = 5,
        
        [JsonProperty("Temperature")]
        Temperature = 6,
        
        [JsonProperty("VolumetricFlow")]
        VolumetricFlow = 7,
    }
    
    [Description("A sorted list of independent variables used by one or more Table:Lookup objects.")]
    [JsonObject("Table:IndependentVariableList")]
    public class Table_IndependentVariableList
    {
        
[JsonProperty(@"")]
public System.String IndependentVariables { get; set; } = "";
    }
    
    [Description(@"Lookup tables are used in place of curves and can represent any number of independent variables (defined as Table:IndependentVariable objects in a Table:IndependentVariableList). Output values are interpolated within the bounds defined by each independent variable and extrapolated beyond the bounds according to the interpolation/extrapolation methods defined by each independent variable.")]
    [JsonObject("Table:Lookup")]
    public class Table_Lookup
    {
        
[JsonProperty(@"")]
public System.String IndependentVariableListName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault NormalizationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[JsonProperty(@"")]
public System.Single NormalizationDivisor { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single MinimumOutput { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumOutput { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault OutputUnitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
        
[JsonProperty(@"")]
public System.String ExternalFileName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single ExternalFileColumnNumber { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ExternalFileStartingRowNumber { get; set; } = ;
        
[JsonProperty(@"")]
public System.String Values { get; set; } = "";
    }
    
    public enum NormalizationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AutomaticWithDivisor")]
        AutomaticWithDivisor = 1,
        
        [JsonProperty("DivisorOnly")]
        DivisorOnly = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum OutputUnitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Capacity")]
        Capacity = 1,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 2,
        
        [JsonProperty("Power")]
        Power = 3,
        
        [JsonProperty("Pressure")]
        Pressure = 4,
        
        [JsonProperty("Temperature")]
        Temperature = 5,
    }
}
namespace EnergyPlus.PlantHeatingandCoolingEquipment
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"This boiler model is an adaptation of the empirical model from the Building Loads and System Thermodynamics (BLAST) program. Boiler performance curves are generated by fitting catalog data to polynomial equations. A constant efficiency boiler may be modeled by leaving the normalized boiler efficiency curve name input blank.")]
    [JsonObject("Boiler:HotWater")]
    public class Boiler_HotWater
    {
        
[JsonProperty(@"")]
public YesNoDefault FuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String NominalCapacity { get; set; } = "";
        
[Description(@"Based on the higher heating value of fuel.")]
[JsonProperty(@"Based on the higher heating value of fuel.")]
public System.Single NominalThermalEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault EfficiencyCurveTemperatureEvaluationVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Linear, Quadratic and Cubic efficiency curves are solely a function of PLR. All other efficiency curve types are a function of PLR and boiler water temperature. Linear = C1 + C2*PLR Quadratic = C1 + C2*PLR + C3*PLR^2 Cubic = C1 + C2*PLR + C3*PLR^2 + C4*PLR^3 Biquadratic = C1 + C2*PLR + C3*PLR^2 + C4*T + C5*T^2 + C6*PLR*T QuadraticLinear = C1 + C2*PLR + C3*PLR^2 + (C4 + C5*PLR + C6*PLR^2)*T BiCubic = C1+C2*PLR+C3*PLR^2+C4*T+C5*T^2+C6*PLR*T+C7*PLR^3+C8*T^3+C9*PLR^2*T+C10*PLR*T^2 TriQuadratic curves are not allowed. PLR = part-load ratio T = boiler water temperature (either entering or leaving).")]
[JsonProperty(@"Linear, Quadratic and Cubic efficiency curves are solely a function of PLR. All other efficiency curve types are a function of PLR and boiler water temperature. Linear = C1 + C2*PLR Quadratic = C1 + C2*PLR + C3*PLR^2 Cubic = C1 + C2*PLR + C3*PLR^2 + C4*PLR^3 Biquadratic = C1 + C2*PLR + C3*PLR^2 + C4*T + C5*T^2 + C6*PLR*T QuadraticLinear = C1 + C2*PLR + C3*PLR^2 + (C4 + C5*PLR + C6*PLR^2)*T BiCubic = C1+C2*PLR+C3*PLR^2+C4*T+C5*T^2+C6*PLR*T+C7*PLR^3+C8*T^3+C9*PLR^2*T+C10*PLR*T^2 TriQuadratic curves are not allowed. PLR = part-load ratio T = boiler water temperature (either entering or leaving).")]
public System.String NormalizedBoilerEfficiencyCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DesignWaterFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single MinimumPartLoadRatio { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single MaximumPartLoadRatio { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single OptimumPartLoadRatio { get; set; } = 1;
        
[JsonProperty(@"")]
public System.String BoilerWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String BoilerWaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WaterOutletUpperTemperatureLimit { get; set; } = 99.9;
        
[Description(@"Select operating mode for fluid flow through the boiler. "NotModulated" is for either variable or constant pumping with flow controlled by the external plant system. "ConstantFlow" is for constant pumping with flow controlled by boiler to operate at full design flow rate. "LeavingSetpointModulated" is for variable pumping with flow controlled by boiler to vary flow to target a leaving temperature setpoint.")]
[JsonProperty(@"Select operating mode for fluid flow through the boiler. "NotModulated" is for either variable or constant pumping with flow controlled by the external plant system. "ConstantFlow" is for constant pumping with flow controlled by boiler to operate at full design flow rate. "LeavingSetpointModulated" is for variable pumping with flow controlled by boiler to vary flow to target a leaving temperature setpoint.")]
public YesNoDefault BoilerFlowMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NotModulated");
        
[JsonProperty(@"")]
public System.Single ParasiticElectricLoad { get; set; } = 0;
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum FuelTypeType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("Electricity")]
        Electricity = 2,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 3,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 4,
        
        [JsonProperty("Gasoline")]
        Gasoline = 5,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 6,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 7,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 8,
        
        [JsonProperty("Propane")]
        Propane = 9,
    }
    
    public enum EfficiencyCurveTemperatureEvaluationVariableType
    {
        
        [JsonProperty("EnteringBoiler")]
        EnteringBoiler = 0,
        
        [JsonProperty("LeavingBoiler")]
        LeavingBoiler = 1,
    }
    
    public enum BoilerFlowModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("LeavingSetpointModulated")]
        LeavingSetpointModulated = 2,
        
        [JsonProperty("NotModulated")]
        NotModulated = 3,
    }
    
    [Description(@"This boiler model is an adaptation of the empirical model from the Building Loads and System Thermodynamics (BLAST) program. Boiler performance curves are generated by fitting catalog data to third order polynomial equations. A constant efficiency boiler is modeled by setting the fuel use coefficients as follows: N9=1, N10=0, N11=0")]
    [JsonObject("Boiler:Steam")]
    public class Boiler_Steam
    {
        
[JsonProperty(@"")]
public YesNoDefault FuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single MaximumOperatingPressure { get; set; } = 160000;
        
[JsonProperty(@"")]
public System.Single TheoreticalEfficiency { get; set; } = 0.8;
        
[JsonProperty(@"")]
public System.Single DesignOutletSteamTemperature { get; set; } = 100;
        
[JsonProperty(@"")]
public System.String NominalCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single OptimumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfFuelUseFunctionOfPartLoadRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfFuelUseFunctionOfPartLoadRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfFuelUseFunctionOfPartLoadRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.String WaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SteamOutletNodeName { get; set; } = "";
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum FuelTypeType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("Electricity")]
        Electricity = 2,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 3,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 4,
        
        [JsonProperty("Gasoline")]
        Gasoline = 5,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 6,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 7,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 8,
        
        [JsonProperty("Propane")]
        Propane = 9,
    }
    
    [Description("This chiller model is the empirical model from the DOE-2 building Energy simulati" +
        "on program. Chiller performance at off-reference conditions is modeled using thr" +
        "ee polynomial equations. Three curves objects are required.")]
    [JsonObject("Chiller:Electric:EIR")]
    public class Chiller_Electric_EIR
    {
        
[JsonProperty(@"")]
public System.String ReferenceCapacity { get; set; } = "";
        
[Description(@"Efficiency of the chiller compressor (cooling output/compressor energy input). Condenser fan power should not be included here.")]
[JsonProperty(@"Efficiency of the chiller compressor (cooling output/compressor energy input). Condenser fan power should not be included here.")]
public System.Single ReferenceCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ReferenceLeavingChilledWaterTemperature { get; set; } = 6.67;
        
[JsonProperty(@"")]
public System.Single ReferenceEnteringCondenserFluidTemperature { get; set; } = 29.4;
        
[JsonProperty(@"")]
public System.String ReferenceChilledWaterFlowRate { get; set; } = "";
        
[Description(@"This field is only used for Condenser Type = AirCooled or EvaporativelyCooled when Heat Recovery is specified")]
[JsonProperty(@"This field is only used for Condenser Type = AirCooled or EvaporativelyCooled when Heat Recovery is specified")]
public System.String ReferenceCondenserFluidFlowRate { get; set; } = "";
        
[Description(@"Cooling capacity as a function of CW supply temp and entering condenser temp curve = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT CWS = supply (leaving) chilled water temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty(@"Cooling capacity as a function of CW supply temp and entering condenser temp curve = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT CWS = supply (leaving) chilled water temperature(C) ECT = entering condenser fluid temperature(C)")]
public System.String CoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Electric Input Ratio (EIR) as a function of temperature EIR = 1/COP curve = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT CWS = supply (leaving) chilled water temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty(@"Electric Input Ratio (EIR) as a function of temperature EIR = 1/COP curve = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT CWS = supply (leaving) chilled water temperature(C) ECT = entering condenser fluid temperature(C)")]
public System.String ElectricInputToCoolingOutputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Electric Input Ratio (EIR) as a function of Part Load Ratio (PLR) EIR = 1/COP quadratic curve = a + b*PLR + c*PLR**2 is typical, other univariate curves may be used PLR = part load ratio (cooling load/steady state capacity)")]
[JsonProperty(@"Electric Input Ratio (EIR) as a function of Part Load Ratio (PLR) EIR = 1/COP quadratic curve = a + b*PLR + c*PLR**2 is typical, other univariate curves may be used PLR = part load ratio (cooling load/steady state capacity)")]
public System.String ElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveName { get; set; } = "";
        
[Description(@"Part load ratio below which the chiller starts cycling on/off to meet the load. Must be less than or equal to Maximum Part Load Ratio.")]
[JsonProperty(@"Part load ratio below which the chiller starts cycling on/off to meet the load. Must be less than or equal to Maximum Part Load Ratio.")]
public System.Single MinimumPartLoadRatio { get; set; } = 0.1;
        
[Description(@"Maximum allowable part load ratio. Must be greater than or equal to Minimum Part Load Ratio.")]
[JsonProperty(@"Maximum allowable part load ratio. Must be greater than or equal to Minimum Part Load Ratio.")]
public System.Single MaximumPartLoadRatio { get; set; } = 1;
        
[Description(@"Optimum part load ratio where the chiller is most efficient. Must be greater than or equal to the Minimum Part Load Ratio and less than or equal to the Maximum Part Load Ratio.")]
[JsonProperty(@"Optimum part load ratio where the chiller is most efficient. Must be greater than or equal to the Minimum Part Load Ratio and less than or equal to the Maximum Part Load Ratio.")]
public System.Single OptimumPartLoadRatio { get; set; } = 1;
        
[Description(@"Part load ratio where the chiller can no longer unload and false loading begins. Minimum unloading ratio must be greater than or equal to the Minimum Part Load Ratio and less than or equal to the Maximum Part Load Ratio.")]
[JsonProperty(@"Part load ratio where the chiller can no longer unload and false loading begins. Minimum unloading ratio must be greater than or equal to the Minimum Part Load Ratio and less than or equal to the Maximum Part Load Ratio.")]
public System.Single MinimumUnloadingRatio { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.String ChilledWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChilledWaterOutletNodeName { get; set; } = "";
        
[Description(@"Not required if air-cooled or evaporatively-cooled")]
[JsonProperty(@"Not required if air-cooled or evaporatively-cooled")]
public System.String CondenserInletNodeName { get; set; } = "";
        
[Description(@"Not required if air-cooled or evaporatively-cooled")]
[JsonProperty(@"Not required if air-cooled or evaporatively-cooled")]
public System.String CondenserOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaterCooled");
        
[Description(@"Use for air-cooled or evaporatively-cooled condensers. Ratio of condenser fan power to reference chiller capacity")]
[JsonProperty(@"Use for air-cooled or evaporatively-cooled condensers. Ratio of condenser fan power to reference chiller capacity")]
public System.Single CondenserFanPowerRatio { get; set; } = 0;
        
[Description(@"Fraction of compressor electrical energy that must be rejected by the condenser. Enter a value of 1.0 when modeling hermetic chillers. For open chillers, enter the compressor motor efficiency. This value should be greater than 0.6 for practical applications.")]
[JsonProperty(@"Fraction of compressor electrical energy that must be rejected by the condenser. Enter a value of 1.0 when modeling hermetic chillers. For open chillers, enter the compressor motor efficiency. This value should be greater than 0.6 for practical applications.")]
public System.Single FractionOfCompressorElectricConsumptionRejectedByCondenser { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single LeavingChilledWaterLowerTemperatureLimit { get; set; } = 2;
        
[Description(@"Select operating mode for fluid flow through the chiller. "NotModulated" is for either variable or constant pumping with flow controlled by the external plant system. "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at full design flow rate. "LeavingSetpointModulated" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
[JsonProperty(@"Select operating mode for fluid flow through the chiller. "NotModulated" is for either variable or constant pumping with flow controlled by the external plant system. "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at full design flow rate. "LeavingSetpointModulated" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
public YesNoDefault ChillerFlowMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NotModulated");
        
[Description(@"If non-zero, then the heat recovery inlet and outlet node names must be entered. Heat recovery is only available with Condenser Type = WaterCooled.")]
[JsonProperty(@"If non-zero, then the heat recovery inlet and outlet node names must be entered. Heat recovery is only available with Condenser Type = WaterCooled.")]
public System.String DesignHeatRecoveryWaterFlowRate { get; set; } = (System.String)0;
        
[JsonProperty(@"")]
public System.String HeatRecoveryInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatRecoveryOutletNodeName { get; set; } = "";
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the chiller is not operating.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the chiller is not operating.")]
public System.Single BasinHeaterCapacity { get; set; } = 0;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
public System.Single BasinHeaterSetpointTemperature { get; set; } = 2;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
public System.String BasinHeaterOperatingScheduleName { get; set; } = "";
        
[Description(@"This optional field is the fraction of total rejected heat that can be recovered at full load")]
[JsonProperty(@"This optional field is the fraction of total rejected heat that can be recovered at full load")]
public System.Single CondenserHeatRecoveryRelativeCapacityFraction { get; set; } = ;
        
[Description(@"This optional schedule of temperatures will turn off heat recovery if inlet exceeds the value")]
[JsonProperty(@"This optional schedule of temperatures will turn off heat recovery if inlet exceeds the value")]
public System.String HeatRecoveryInletHighTemperatureLimitScheduleName { get; set; } = "";
        
[Description(@"This optional field provides control over the heat recovery Using this triggers a model more suited to series bundle and chillers with higher temperature heat recovery If this field is not used, the bundles are modeled as being in parallel")]
[JsonProperty(@"This optional field provides control over the heat recovery Using this triggers a model more suited to series bundle and chillers with higher temperature heat recovery If this field is not used, the bundles are modeled as being in parallel")]
public System.String HeatRecoveryLeavingTemperatureSetpointNodeName { get; set; } = "";
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 3,
    }
    
    public enum ChillerFlowModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("LeavingSetpointModulated")]
        LeavingSetpointModulated = 2,
        
        [JsonProperty("NotModulated")]
        NotModulated = 3,
    }
    
    [Description(@"This chiller model is an empirical model, a reformulated version of Chiller:Electric:EIR where the performance is a function of condenser leaving fluid Temperature instead of condenser entering fluid Temperature. Chiller performance at off-reference conditions is modeled using three polynomial equations. Three curve objects are required.")]
    [JsonObject("Chiller:Electric:ReformulatedEIR")]
    public class Chiller_Electric_ReformulatedEIR
    {
        
[JsonProperty(@"")]
public System.String ReferenceCapacity { get; set; } = "";
        
[Description(@"Efficiency of the chiller compressor (cooling output/compressor energy input). Condenser fan power should not be included here.")]
[JsonProperty(@"Efficiency of the chiller compressor (cooling output/compressor energy input). Condenser fan power should not be included here.")]
public System.Single ReferenceCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ReferenceLeavingChilledWaterTemperature { get; set; } = 6.67;
        
[JsonProperty(@"")]
public System.Single ReferenceLeavingCondenserWaterTemperature { get; set; } = 35;
        
[JsonProperty(@"")]
public System.String ReferenceChilledWaterFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ReferenceCondenserWaterFlowRate { get; set; } = "";
        
[Description(@"Cooling capacity as a function of supply (leaving) chilled water temperature and leaving condenser fluid temperature curve = a + b*CWS + c*CWS**2 + d*LCT + e*LCT**2 + f*CWS*LCT CWS = supply (leaving) chilled water temperature(C) LCT = leaving condenser fluid temperature(C)")]
[JsonProperty(@"Cooling capacity as a function of supply (leaving) chilled water temperature and leaving condenser fluid temperature curve = a + b*CWS + c*CWS**2 + d*LCT + e*LCT**2 + f*CWS*LCT CWS = supply (leaving) chilled water temperature(C) LCT = leaving condenser fluid temperature(C)")]
public System.String CoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Electric Input Ratio (EIR) as a function of supply (leaving) chilled water temperature and leaving condenser fluid temperature. EIR = 1/COP. curve = a + b*CWS + c*CWS**2 + d*LCT + e*LCT**2 + f*CWS*LCT CWS = supply (leaving) chilled water temperature(C) LCT = leaving condenser fluid temperature(C)")]
[JsonProperty(@"Electric Input Ratio (EIR) as a function of supply (leaving) chilled water temperature and leaving condenser fluid temperature. EIR = 1/COP. curve = a + b*CWS + c*CWS**2 + d*LCT + e*LCT**2 + f*CWS*LCT CWS = supply (leaving) chilled water temperature(C) LCT = leaving condenser fluid temperature(C)")]
public System.String ElectricInputToCoolingOutputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Two curve types are available: Type LeavingCondenserWaterTemperature: based on the leaving condenser water temperature. Type Lift: based on the normalized lift, which is the temperature difference between the leaving condenser water temperature and the leaving evaporator water temperature.")]
[JsonProperty(@"Two curve types are available: Type LeavingCondenserWaterTemperature: based on the leaving condenser water temperature. Type Lift: based on the normalized lift, which is the temperature difference between the leaving condenser water temperature and the leaving evaporator water temperature.")]
public YesNoDefault ElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "LeavingCondenserWaterTemperature");
        
[Description(@"Electric Input Ratio (EIR) as a function of Part Load Ratio (PLR) EIR = 1/COP The form of this curve is based on the input for Electric Input to Cooling Output RatioFunction of Part Load Ratio Curve Type Type=LeavingCondenserWaterTemperature: Calculated based on LCT and PLR Curve object type should be Curve:Bicubic or Table:Lookup Bicubic curve = a + b*LCT + c*LCT**2 + d*PLR + e*PLR**2 + f*LCT*PLR + g*0 + h*PLR**3 + i*0 + j*0 PLR = part load ratio (cooling load/steady state capacity) LCT = leaving condenser fluid temperature(C) Type=Lift: Calculated based on dT*, Tdev* and PLR Curve object type should be Curve:ChillerPartLoadWithLiftCurves or Table:Lookup ChillerPartLoadWithLiftCurves curve = a + b*(dT*) + c*(dT*)**2 + d*PLR + e*PLR**2 + f*(dT*)*PLR + g*(dT*)**3 + h*PLR**3 + i*(dT*)**2*PLR + j*(dT*)*PLR**2 + k*(dT*)**2*PLR**2 + l*(Tdev*)*PLR**3 x = dT* = normalized fractional Lift = dT / dTref y = PLR = part load ratio (cooling load/steady state capacity) z = Tdev* = normalized Tdev = Tdev / dTref Where: dT = Lift = Leaving Condenser Water Temperature - Leaving Chilled Water Temperature dTref = dT at the reference condition Tdev = Leaving Chilled Water Temperature - Reference Chilled Water Temperature")]
[JsonProperty(@"Electric Input Ratio (EIR) as a function of Part Load Ratio (PLR) EIR = 1/COP The form of this curve is based on the input for Electric Input to Cooling Output RatioFunction of Part Load Ratio Curve Type Type=LeavingCondenserWaterTemperature: Calculated based on LCT and PLR Curve object type should be Curve:Bicubic or Table:Lookup Bicubic curve = a + b*LCT + c*LCT**2 + d*PLR + e*PLR**2 + f*LCT*PLR + g*0 + h*PLR**3 + i*0 + j*0 PLR = part load ratio (cooling load/steady state capacity) LCT = leaving condenser fluid temperature(C) Type=Lift: Calculated based on dT*, Tdev* and PLR Curve object type should be Curve:ChillerPartLoadWithLiftCurves or Table:Lookup ChillerPartLoadWithLiftCurves curve = a + b*(dT*) + c*(dT*)**2 + d*PLR + e*PLR**2 + f*(dT*)*PLR + g*(dT*)**3 + h*PLR**3 + i*(dT*)**2*PLR + j*(dT*)*PLR**2 + k*(dT*)**2*PLR**2 + l*(Tdev*)*PLR**3 x = dT* = normalized fractional Lift = dT / dTref y = PLR = part load ratio (cooling load/steady state capacity) z = Tdev* = normalized Tdev = Tdev / dTref Where: dT = Lift = Leaving Condenser Water Temperature - Leaving Chilled Water Temperature dTref = dT at the reference condition Tdev = Leaving Chilled Water Temperature - Reference Chilled Water Temperature")]
public System.String ElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveName { get; set; } = "";
        
[Description(@"Part load ratio below which the chiller starts cycling on/off to meet the load. Must be less than or equal to Maximum Part Load Ratio.")]
[JsonProperty(@"Part load ratio below which the chiller starts cycling on/off to meet the load. Must be less than or equal to Maximum Part Load Ratio.")]
public System.Single MinimumPartLoadRatio { get; set; } = 0.1;
        
[Description(@"Maximum allowable part load ratio. Must be greater than or equal to Minimum Part Load Ratio.")]
[JsonProperty(@"Maximum allowable part load ratio. Must be greater than or equal to Minimum Part Load Ratio.")]
public System.Single MaximumPartLoadRatio { get; set; } = 1;
        
[Description(@"Optimum part load ratio where the chiller is most efficient. Must be greater than or equal to the Minimum Part Load Ratio and less than or equal to the Maximum Part Load Ratio.")]
[JsonProperty(@"Optimum part load ratio where the chiller is most efficient. Must be greater than or equal to the Minimum Part Load Ratio and less than or equal to the Maximum Part Load Ratio.")]
public System.Single OptimumPartLoadRatio { get; set; } = 1;
        
[Description(@"Part load ratio where the chiller can no longer unload and false loading begins. Minimum unloading ratio must be greater than or equal to the Minimum Part Load Ratio and less than or equal to the Maximum Part Load Ratio.")]
[JsonProperty(@"Part load ratio where the chiller can no longer unload and false loading begins. Minimum unloading ratio must be greater than or equal to the Minimum Part Load Ratio and less than or equal to the Maximum Part Load Ratio.")]
public System.Single MinimumUnloadingRatio { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.String ChilledWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChilledWaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserOutletNodeName { get; set; } = "";
        
[Description(@"Fraction of compressor electrical energy that must be rejected by the condenser. Enter a value of 1.0 when modeling hermetic chillers. For open chillers, enter the compressor motor efficiency. This value should be greater than 0.6 for practical applications.")]
[JsonProperty(@"Fraction of compressor electrical energy that must be rejected by the condenser. Enter a value of 1.0 when modeling hermetic chillers. For open chillers, enter the compressor motor efficiency. This value should be greater than 0.6 for practical applications.")]
public System.Single FractionOfCompressorElectricConsumptionRejectedByCondenser { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single LeavingChilledWaterLowerTemperatureLimit { get; set; } = 2;
        
[Description(@"Select operating mode for fluid flow through the chiller. "NotModulated" is for either variable or constant pumping with flow controlled by the external plant system. "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at full design flow rate. "LeavingSetpointModulated" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
[JsonProperty(@"Select operating mode for fluid flow through the chiller. "NotModulated" is for either variable or constant pumping with flow controlled by the external plant system. "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at full design flow rate. "LeavingSetpointModulated" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
public YesNoDefault ChillerFlowModeType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NotModulated");
        
[Description(@"If non-zero, then the heat recovery inlet and outlet node names must be entered.")]
[JsonProperty(@"If non-zero, then the heat recovery inlet and outlet node names must be entered.")]
public System.String DesignHeatRecoveryWaterFlowRate { get; set; } = (System.String)0;
        
[JsonProperty(@"")]
public System.String HeatRecoveryInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatRecoveryOutletNodeName { get; set; } = "";
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
        
[Description(@"This optional field is the fraction of total rejected heat that can be recovered at full load")]
[JsonProperty(@"This optional field is the fraction of total rejected heat that can be recovered at full load")]
public System.Single CondenserHeatRecoveryRelativeCapacityFraction { get; set; } = ;
        
[Description(@"This optional schedule of temperatures will turn off heat recovery if inlet exceeds the value")]
[JsonProperty(@"This optional schedule of temperatures will turn off heat recovery if inlet exceeds the value")]
public System.String HeatRecoveryInletHighTemperatureLimitScheduleName { get; set; } = "";
        
[Description(@"This optional field provides control over the heat recovery Using this triggers a model more suited to series bundle and chillers with higher temperature heat recovery If this field is not used, the bundles are modeled as being in parallel")]
[JsonProperty(@"This optional field provides control over the heat recovery Using this triggers a model more suited to series bundle and chillers with higher temperature heat recovery If this field is not used, the bundles are modeled as being in parallel")]
public System.String HeatRecoveryLeavingTemperatureSetpointNodeName { get; set; } = "";
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum ElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LeavingCondenserWaterTemperature")]
        LeavingCondenserWaterTemperature = 1,
        
        [JsonProperty("Lift")]
        Lift = 2,
    }
    
    public enum ChillerFlowModeTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("LeavingSetpointModulated")]
        LeavingSetpointModulated = 2,
        
        [JsonProperty("NotModulated")]
        NotModulated = 3,
    }
    
    [Description("This chiller model is the empirical model from the Building Loads and System Ther" +
        "modynamics (BLAST) program. Chiller performance curves are generated by fitting " +
        "catalog data to third order polynomial equations. Three sets of coefficients are" +
        " required.")]
    [JsonObject("Chiller:Electric")]
    public class Chiller_Electric
    {
        
[JsonProperty(@"")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AirCooled");
        
[JsonProperty(@"")]
public System.String NominalCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NominalCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ChilledWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChilledWaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single OptimumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DesignCondenserInletTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single TemperatureRiseCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DesignChilledWaterOutletTemperature { get; set; } = ;
        
[Description(@"For variable volume this is the maximum flow & for constant flow this is the flow.")]
[JsonProperty(@"For variable volume this is the maximum flow & for constant flow this is the flow.")]
public System.String DesignChilledWaterFlowRate { get; set; } = "";
        
[Description(@"This field is only used for Condenser Type = AirCooled or EvaporativelyCooled when Heat Recovery is specified")]
[JsonProperty(@"This field is only used for Condenser Type = AirCooled or EvaporativelyCooled when Heat Recovery is specified")]
public System.String DesignCondenserFluidFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single CoefficientOfCapacityRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfCapacityRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfCapacityRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfPowerRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfPowerRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfPowerRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfFullLoadRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfFullLoadRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfFullLoadRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ChilledWaterOutletTemperatureLowerLimit { get; set; } = ;
        
[Description(@"Select operating mode for fluid flow through the chiller. "NotModulated" is for either variable or constant pumping with flow controlled by the external plant system. "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at full design flow rate. "LeavingSetpointModulated" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
[JsonProperty(@"Select operating mode for fluid flow through the chiller. "NotModulated" is for either variable or constant pumping with flow controlled by the external plant system. "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at full design flow rate. "LeavingSetpointModulated" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
public YesNoDefault ChillerFlowMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NotModulated");
        
[Description(@"If non-zero, then the heat recovery inlet and outlet node names must be entered. Heat recovery is only available with Condenser Type = WaterCooled.")]
[JsonProperty(@"If non-zero, then the heat recovery inlet and outlet node names must be entered. Heat recovery is only available with Condenser Type = WaterCooled.")]
public System.String DesignHeatRecoveryWaterFlowRate { get; set; } = (System.String)0;
        
[JsonProperty(@"")]
public System.String HeatRecoveryInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatRecoveryOutletNodeName { get; set; } = "";
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the chiller is not operating.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the chiller is not operating.")]
public System.Single BasinHeaterCapacity { get; set; } = 0;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
public System.Single BasinHeaterSetpointTemperature { get; set; } = 2;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
public System.String BasinHeaterOperatingScheduleName { get; set; } = "";
        
[Description(@"This optional field is the fraction of total rejected heat that can be recovered at full load")]
[JsonProperty(@"This optional field is the fraction of total rejected heat that can be recovered at full load")]
public System.Single CondenserHeatRecoveryRelativeCapacityFraction { get; set; } = ;
        
[Description(@"This optional schedule of temperatures will turn off heat recovery if inlet exceeds the value")]
[JsonProperty(@"This optional schedule of temperatures will turn off heat recovery if inlet exceeds the value")]
public System.String HeatRecoveryInletHighTemperatureLimitScheduleName { get; set; } = "";
        
[Description(@"This optional field provides control over the heat recovery Using this triggers a model more suited to series bundle and chillers with higher temperature heat recovery If this field is not used, the bundles are modeled as being in parallel")]
[JsonProperty(@"This optional field provides control over the heat recovery Using this triggers a model more suited to series bundle and chillers with higher temperature heat recovery If this field is not used, the bundles are modeled as being in parallel")]
public System.String HeatRecoveryLeavingTemperatureSetpointNodeName { get; set; } = "";
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 3,
    }
    
    public enum ChillerFlowModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("LeavingSetpointModulated")]
        LeavingSetpointModulated = 2,
        
        [JsonProperty("NotModulated")]
        NotModulated = 3,
    }
    
    [Description(@"This indirect absorption chiller model is an enhanced model from the Building Loads and System Thermodynamics (BLAST) program. Chiller performance curves are generated by fitting catalog data to third order polynomial equations. The chiller capacity is a function of condenser, chilled water, and generator temperatures. The heat input is a function of part-load ratio, condenser temperature, and chilled water temperature.")]
    [JsonObject("Chiller:Absorption:Indirect")]
    public class Chiller_Absorption_Indirect
    {
        
[JsonProperty(@"")]
public System.String NominalCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public System.String NominalPumpingPower { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChilledWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChilledWaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single OptimumPartLoadRatio { get; set; } = ;
        
[Description(@"Used only when condenser flow rate is autosized.")]
[JsonProperty(@"Used only when condenser flow rate is autosized.")]
public System.Single DesignCondenserInletTemperature { get; set; } = 30;
        
[Description(@"Provides warnings when entering condenser temperature is below minimum. Capacity is not adjusted when entering condenser temperature is below minimum.")]
[JsonProperty(@"Provides warnings when entering condenser temperature is below minimum. Capacity is not adjusted when entering condenser temperature is below minimum.")]
public System.Single CondenserInletTemperatureLowerLimit { get; set; } = 15;
        
[Description(@"Capacity is adjusted when leaving chilled water temperature is below minimum.")]
[JsonProperty(@"Capacity is adjusted when leaving chilled water temperature is below minimum.")]
public System.Single ChilledWaterOutletTemperatureLowerLimit { get; set; } = 5;
        
[Description(@"For variable flow this is the max flow & for constant flow this is the flow.")]
[JsonProperty(@"For variable flow this is the max flow & for constant flow this is the flow.")]
public System.String DesignChilledWaterFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String DesignCondenserWaterFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Select operating mode for fluid flow through the chiller. "NotModulated" is for either variable or constant pumping with flow controlled by the external plant system. "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at full design flow rate. "LeavingSetpointModulated" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
[JsonProperty(@"Select operating mode for fluid flow through the chiller. "NotModulated" is for either variable or constant pumping with flow controlled by the external plant system. "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at full design flow rate. "LeavingSetpointModulated" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
public YesNoDefault ChillerFlowMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NotModulated");
        
[JsonProperty(@"")]
public System.String GeneratorHeatInputFunctionOfPartLoadRatioCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PumpElectricInputFunctionOfPartLoadRatioCurveName { get; set; } = "";
        
[Description(@"Enter the generator inlet node name which connects this chiller to a steam or hot water plant, otherwise leave this field blank. Generator nodes are used to model heat input to the chiller.")]
[JsonProperty(@"Enter the generator inlet node name which connects this chiller to a steam or hot water plant, otherwise leave this field blank. Generator nodes are used to model heat input to the chiller.")]
public System.String GeneratorInletNodeName { get; set; } = "";
        
[Description(@"Enter the generator outlet node name which connects this chiller to a steam or hot water plant, otherwise leave this field blank. Generator nodes are used to model heat input to the chiller.")]
[JsonProperty(@"Enter the generator outlet node name which connects this chiller to a steam or hot water plant, otherwise leave this field blank. Generator nodes are used to model heat input to the chiller.")]
public System.String GeneratorOutletNodeName { get; set; } = "";
        
[Description(@"Curve which shows the change in normalized capacity to changes in condenser temperature.")]
[JsonProperty(@"Curve which shows the change in normalized capacity to changes in condenser temperature.")]
public System.String CapacityCorrectionFunctionOfCondenserTemperatureCurveName { get; set; } = "";
        
[Description(@"Curve which shows the change in normalized capacity to changes in leaving chilled water temperature.")]
[JsonProperty(@"Curve which shows the change in normalized capacity to changes in leaving chilled water temperature.")]
public System.String CapacityCorrectionFunctionOfChilledWaterTemperatureCurveName { get; set; } = "";
        
[Description(@"Used when generator fluid type is hot water Curve which shows the change in normalized capacity to changes in generator temperature.")]
[JsonProperty(@"Used when generator fluid type is hot water Curve which shows the change in normalized capacity to changes in generator temperature.")]
public System.String CapacityCorrectionFunctionOfGeneratorTemperatureCurveName { get; set; } = "";
        
[Description(@"Curve which shows the change in normalized heat input to changes in condenser temperature.")]
[JsonProperty(@"Curve which shows the change in normalized heat input to changes in condenser temperature.")]
public System.String GeneratorHeatInputCorrectionFunctionOfCondenserTemperatureCurveName { get; set; } = "";
        
[Description(@"Curve which shows the change in normalized heat input to changes in leaving chilled water temperature.")]
[JsonProperty(@"Curve which shows the change in normalized heat input to changes in leaving chilled water temperature.")]
public System.String GeneratorHeatInputCorrectionFunctionOfChilledWaterTemperatureCurveName { get; set; } = "";
        
[Description(@"The Generator side of the chiller can be connected to a hot water or steam plant where the generator inlet and outlet nodes are connected to a plant loop. If the generator is not connected to a plant loop, and the generator inlet/outlet nodes are not used, this field should be specified as steam or left blank. When a plant is not used, the model assumes steam as the heat source.")]
[JsonProperty(@"The Generator side of the chiller can be connected to a hot water or steam plant where the generator inlet and outlet nodes are connected to a plant loop. If the generator is not connected to a plant loop, and the generator inlet/outlet nodes are not used, this field should be specified as steam or left blank. When a plant is not used, the model assumes steam as the heat source.")]
public YesNoDefault GeneratorHeatSourceType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Steam");
        
[Description(@"For variable flow this is the max flow and for constant flow this is the flow.")]
[JsonProperty(@"For variable flow this is the max flow and for constant flow this is the flow.")]
public System.String DesignGeneratorFluidFlowRate { get; set; } = "";
        
[Description(@"Provides warnings when entering generator temperature is below minimum. Capacity is not adjusted when entering generator temperature is below minimum.")]
[JsonProperty(@"Provides warnings when entering generator temperature is below minimum. Capacity is not adjusted when entering generator temperature is below minimum.")]
public System.Single TemperatureLowerLimitGeneratorInlet { get; set; } = 0;
        
[Description(@"This field is not used when the generator inlet/outlet nodes are not specified or the generator is connected to a hot water loop.")]
[JsonProperty(@"This field is not used when the generator inlet/outlet nodes are not specified or the generator is connected to a hot water loop.")]
public System.Single DegreeOfSubcoolingInSteamGenerator { get; set; } = 1;
        
[Description(@"This field is not used when the generator inlet/outlet nodes are not specified or the generator is connected to a hot water loop.")]
[JsonProperty(@"This field is not used when the generator inlet/outlet nodes are not specified or the generator is connected to a hot water loop.")]
public System.Single DegreeOfSubcoolingInSteamCondensateLoop { get; set; } = 0;
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
    }
    
    public enum ChillerFlowModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("LeavingSetpointModulated")]
        LeavingSetpointModulated = 2,
        
        [JsonProperty("NotModulated")]
        NotModulated = 3,
    }
    
    public enum GeneratorHeatSourceTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("HotWater")]
        HotWater = 1,
        
        [JsonProperty("Steam")]
        Steam = 2,
    }
    
    [Description(@"This indirect absorption chiller model is the empirical model from the Building Loads and System Thermodynamics (BLAST) program. Chiller performance curves are generated by fitting catalog data to third order polynomial equations. Two sets of coefficients are required.")]
    [JsonObject("Chiller:Absorption")]
    public class Chiller_Absorption
    {
        
[JsonProperty(@"")]
public System.String NominalCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public System.String NominalPumpingPower { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChilledWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChilledWaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single OptimumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DesignCondenserInletTemperature { get; set; } = ;
        
[Description(@"For variable volume this is the max flow & for constant flow this is the flow.")]
[JsonProperty(@"For variable volume this is the max flow & for constant flow this is the flow.")]
public System.String DesignChilledWaterFlowRate { get; set; } = "";
        
[Description(@"The steam use coefficients below specify the steam use as a fraction of chiller operating capacity")]
[JsonProperty(@"The steam use coefficients below specify the steam use as a fraction of chiller operating capacity")]
public System.String DesignCondenserWaterFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single CoefficientOfTheHotWaterOrSteamUsePartLoadRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfTheHotWaterOrSteamUsePartLoadRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfTheHotWaterOrSteamUsePartLoadRatioCurve { get; set; } = ;
        
[Description(@"The pump electric use coefficients specify the pumping power as a Fraction of Nominal pumping power")]
[JsonProperty(@"The pump electric use coefficients specify the pumping power as a Fraction of Nominal pumping power")]
public System.Single CoefficientOfThePumpElectricUsePartLoadRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfThePumpElectricUsePartLoadRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfThePumpElectricUsePartLoadRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ChilledWaterOutletTemperatureLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String GeneratorInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String GeneratorOutletNodeName { get; set; } = "";
        
[Description(@"Select operating mode for fluid flow through the chiller. "NotModulated" is for either variable or constant pumping with flow controlled by the external plant system. "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at full design flow rate. "LeavingSetpointModulated" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
[JsonProperty(@"Select operating mode for fluid flow through the chiller. "NotModulated" is for either variable or constant pumping with flow controlled by the external plant system. "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at full design flow rate. "LeavingSetpointModulated" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
public YesNoDefault ChillerFlowMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NotModulated");
        
[Description(@"The Generator side of the chiller can be connected to a hot water or steam plant where the generator inlet and outlet nodes are connected to a plant loop. If the generator is not connected to a plant loop, and the generator inlet/outlet nodes are not used, this field should be specified as steam or left blank. When a plant is not used, the model assumes steam as the heat source.")]
[JsonProperty(@"The Generator side of the chiller can be connected to a hot water or steam plant where the generator inlet and outlet nodes are connected to a plant loop. If the generator is not connected to a plant loop, and the generator inlet/outlet nodes are not used, this field should be specified as steam or left blank. When a plant is not used, the model assumes steam as the heat source.")]
public YesNoDefault GeneratorHeatSourceType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Steam");
        
[JsonProperty(@"")]
public System.String DesignGeneratorFluidFlowRate { get; set; } = "";
        
[Description(@"This field is not used when the generator inlet/outlet nodes are not specified or the generator is connected to a hot water loop.")]
[JsonProperty(@"This field is not used when the generator inlet/outlet nodes are not specified or the generator is connected to a hot water loop.")]
public System.Single DegreeOfSubcoolingInSteamGenerator { get; set; } = 1;
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
    }
    
    public enum ChillerFlowModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("LeavingSetpointModulated")]
        LeavingSetpointModulated = 2,
        
        [JsonProperty("NotModulated")]
        NotModulated = 3,
    }
    
    public enum GeneratorHeatSourceTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("HotWater")]
        HotWater = 1,
        
        [JsonProperty("Steam")]
        Steam = 2,
    }
    
    [Description("This constant COP chiller model provides a means of quickly specifying a Chiller " +
        "where performance data is not available.")]
    [JsonObject("Chiller:ConstantCOP")]
    public class Chiller_ConstantCOP
    {
        
[JsonProperty(@"")]
public System.String NominalCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NominalCop { get; set; } = ;
        
[Description(@"For variable volume this is the maximum flow and for constant flow this is the flow.")]
[JsonProperty(@"For variable volume this is the maximum flow and for constant flow this is the flow.")]
public System.String DesignChilledWaterFlowRate { get; set; } = "";
        
[Description(@"This field is not used for Condenser Type = AirCooled or EvaporativelyCooled")]
[JsonProperty(@"This field is not used for Condenser Type = AirCooled or EvaporativelyCooled")]
public System.String DesignCondenserWaterFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChilledWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChilledWaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AirCooled");
        
[Description(@"Select operating mode for fluid flow through the chiller. "NotModulated" is for either variable or constant pumping with flow controlled by the external plant system. "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at full design flow rate. "LeavingSetpointModulated" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
[JsonProperty(@"Select operating mode for fluid flow through the chiller. "NotModulated" is for either variable or constant pumping with flow controlled by the external plant system. "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at full design flow rate. "LeavingSetpointModulated" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
public YesNoDefault ChillerFlowMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NotModulated");
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the chiller is not operating.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the chiller is not operating.")]
public System.Single BasinHeaterCapacity { get; set; } = 0;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
public System.Single BasinHeaterSetpointTemperature { get; set; } = 2;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
public System.String BasinHeaterOperatingScheduleName { get; set; } = "";
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 3,
    }
    
    public enum ChillerFlowModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("LeavingSetpointModulated")]
        LeavingSetpointModulated = 2,
        
        [JsonProperty("NotModulated")]
        NotModulated = 3,
    }
    
    [Description("This chiller model is the empirical model from the Building Loads and System Ther" +
        "modynamics (BLAST) program. Chiller performance curves are generated by fitting " +
        "catalog data to third order polynomial equations. Three sets of coefficients are" +
        " required.")]
    [JsonObject("Chiller:EngineDriven")]
    public class Chiller_EngineDriven
    {
        
[JsonProperty(@"")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AirCooled");
        
[JsonProperty(@"")]
public System.String NominalCapacity { get; set; } = "";
        
[Description(@"Nominal Refrigeration Cycle COP")]
[JsonProperty(@"Nominal Refrigeration Cycle COP")]
public System.Single NominalCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ChilledWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChilledWaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single OptimumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DesignCondenserInletTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single TemperatureRiseCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DesignChilledWaterOutletTemperature { get; set; } = ;
        
[Description(@"For variable volume this is the maximum flow and for constant flow this is the flow.")]
[JsonProperty(@"For variable volume this is the maximum flow and for constant flow this is the flow.")]
public System.String DesignChilledWaterFlowRate { get; set; } = "";
        
[Description(@"This field is not used for Condenser Type = AirCooled or EvaporativelyCooled")]
[JsonProperty(@"This field is not used for Condenser Type = AirCooled or EvaporativelyCooled")]
public System.String DesignCondenserWaterFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single CoefficientOfCapacityRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfCapacityRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfCapacityRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfPowerRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfPowerRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfPowerRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfFullLoadRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfFullLoadRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfFullLoadRatioCurve { get; set; } = ;
        
[Description(@"Special EngineDriven Chiller Parameters Below")]
[JsonProperty(@"Special EngineDriven Chiller Parameters Below")]
public System.Single ChilledWaterOutletTemperatureLowerLimit { get; set; } = ;
        
[Description(@"Curve is a function of Part Load Ratio (PLR) curve = a + b*PLR + c*PLR**2 PLR = Ratio of evaporator heat transfer rate to nominal capacity")]
[JsonProperty(@"Curve is a function of Part Load Ratio (PLR) curve = a + b*PLR + c*PLR**2 PLR = Ratio of evaporator heat transfer rate to nominal capacity")]
public System.String FuelUseCurveName { get; set; } = "";
        
[Description(@"Curve is a function of Part Load Ratio (PLR) curve = a + b*PLR + c*PLR**2 PLR = Ratio of evaporator heat transfer rate to nominal capacity")]
[JsonProperty(@"Curve is a function of Part Load Ratio (PLR) curve = a + b*PLR + c*PLR**2 PLR = Ratio of evaporator heat transfer rate to nominal capacity")]
public System.String JacketHeatRecoveryCurveName { get; set; } = "";
        
[Description(@"Curve is a function of Part Load Ratio (PLR) curve = a + b*PLR + c*PLR**2 PLR = Ratio of evaporator heat transfer rate to nominal capacity")]
[JsonProperty(@"Curve is a function of Part Load Ratio (PLR) curve = a + b*PLR + c*PLR**2 PLR = Ratio of evaporator heat transfer rate to nominal capacity")]
public System.String LubeHeatRecoveryCurveName { get; set; } = "";
        
[Description(@"Curve is a function of Part Load Ratio (PLR) curve = a + b*PLR + c*PLR**2 PLR = Ratio of evaporator heat transfer rate to nominal capacity")]
[JsonProperty(@"Curve is a function of Part Load Ratio (PLR) curve = a + b*PLR + c*PLR**2 PLR = Ratio of evaporator heat transfer rate to nominal capacity")]
public System.String TotalExhaustEnergyCurveName { get; set; } = "";
        
[Description(@"Curve is a function of Part Load Ratio (PLR) curve = a + b*PLR + c*PLR**2 PLR = Ratio of evaporator heat transfer rate to nominal capacity")]
[JsonProperty(@"Curve is a function of Part Load Ratio (PLR) curve = a + b*PLR + c*PLR**2 PLR = Ratio of evaporator heat transfer rate to nominal capacity")]
public System.String ExhaustTemperatureCurveName { get; set; } = "";
        
[Description(@"curve = C1 * (nominal capacity)**C2")]
[JsonProperty(@"curve = C1 * (nominal capacity)**C2")]
public System.Single CoefficientOfUFactorTimesAreaCurve { get; set; } = ;
        
[Description(@"curve = C1 * (nominal capacity)**C2 typical value .9")]
[JsonProperty(@"curve = C1 * (nominal capacity)**C2 typical value .9")]
public System.Single CoefficientOfUFactorTimesAreaCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumExhaustFlowPerUnitOfPowerOutput { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DesignMinimumExhaustTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault FuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single FuelHigherHeatingValue { get; set; } = ;
        
[Description(@"If non-zero, then the heat recovery inlet and outlet node names must be entered.")]
[JsonProperty(@"If non-zero, then the heat recovery inlet and outlet node names must be entered.")]
public System.String DesignHeatRecoveryWaterFlowRate { get; set; } = (System.String)0;
        
[JsonProperty(@"")]
public System.String HeatRecoveryInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatRecoveryOutletNodeName { get; set; } = "";
        
[Description(@"Select operating mode for fluid flow through the chiller. "NotModulated" is for either variable or constant pumping with flow controlled by the external plant system. "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at full design flow rate. "LeavingSetpointModulated" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
[JsonProperty(@"Select operating mode for fluid flow through the chiller. "NotModulated" is for either variable or constant pumping with flow controlled by the external plant system. "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at full design flow rate. "LeavingSetpointModulated" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
public YesNoDefault ChillerFlowMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NotModulated");
        
[JsonProperty(@"")]
public System.Single MaximumTemperatureForHeatRecoveryAtHeatRecoveryOutletNode { get; set; } = 60;
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the chiller is not operating.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the chiller is not operating.")]
public System.Single BasinHeaterCapacity { get; set; } = 0;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
public System.Single BasinHeaterSetpointTemperature { get; set; } = 2;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
public System.String BasinHeaterOperatingScheduleName { get; set; } = "";
        
[Description(@"This optional field is the fraction of total rejected heat that can be recovered at full load. Also used to autosize Design Heat Recovery Water Flow Rate as a fraction of Design Condenser Water Flow Rate.")]
[JsonProperty(@"This optional field is the fraction of total rejected heat that can be recovered at full load. Also used to autosize Design Heat Recovery Water Flow Rate as a fraction of Design Condenser Water Flow Rate.")]
public System.Single CondenserHeatRecoveryRelativeCapacityFraction { get; set; } = ;
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 3,
    }
    
    public enum FuelTypeType
    {
        
        [JsonProperty("Diesel")]
        Diesel = 0,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 1,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 2,
        
        [JsonProperty("Gasoline")]
        Gasoline = 3,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 4,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 5,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 6,
        
        [JsonProperty("Propane")]
        Propane = 7,
    }
    
    public enum ChillerFlowModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("LeavingSetpointModulated")]
        LeavingSetpointModulated = 2,
        
        [JsonProperty("NotModulated")]
        NotModulated = 3,
    }
    
    [Description("This chiller model is the empirical model from the Building Loads and System Ther" +
        "modynamics (BLAST) program. Chiller performance curves are generated by fitting " +
        "catalog data to third order polynomial equations. Three sets of coefficients are" +
        " required.")]
    [JsonObject("Chiller:CombustionTurbine")]
    public class Chiller_CombustionTurbine
    {
        
[JsonProperty(@"")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AirCooled");
        
[JsonProperty(@"")]
public System.String NominalCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NominalCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ChilledWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChilledWaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single OptimumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DesignCondenserInletTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single TemperatureRiseCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DesignChilledWaterOutletTemperature { get; set; } = ;
        
[Description(@"For variable volume this is the max flow & for constant flow this is the flow.")]
[JsonProperty(@"For variable volume this is the max flow & for constant flow this is the flow.")]
public System.String DesignChilledWaterFlowRate { get; set; } = "";
        
[Description(@"This field is not used for Condenser Type = AirCooled or EvaporativelyCooled")]
[JsonProperty(@"This field is not used for Condenser Type = AirCooled or EvaporativelyCooled")]
public System.String DesignCondenserWaterFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single CoefficientOfCapacityRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfCapacityRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfCapacityRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfPowerRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfPowerRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfPowerRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfFullLoadRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfFullLoadRatioCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfFullLoadRatioCurve { get; set; } = ;
        
[Description(@"Special Gas Turbine Chiller Parameters Below")]
[JsonProperty(@"Special Gas Turbine Chiller Parameters Below")]
public System.Single ChilledWaterOutletTemperatureLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfFuelInputCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfFuelInputCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfFuelInputCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfTemperatureBasedFuelInputCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfTemperatureBasedFuelInputCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfTemperatureBasedFuelInputCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfExhaustFlowCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfExhaustFlowCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfExhaustFlowCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfExhaustGasTemperatureCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfExhaustGasTemperatureCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfExhaustGasTemperatureCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfTemperatureBasedExhaustGasTemperatureCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfTemperatureBasedExhaustGasTemperatureCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfTemperatureBasedExhaustGasTemperatureCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfRecoveryLubeHeatCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfRecoveryLubeHeatCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfRecoveryLubeHeatCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoefficientOfUFactorTimesAreaCurve { get; set; } = ;
        
[Description(@"typical value .9")]
[JsonProperty(@"typical value .9")]
public System.Single CoefficientOfUFactorTimesAreaCurve { get; set; } = ;
        
[JsonProperty(@"")]
public System.String GasTurbineEngineCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MaximumExhaustFlowPerUnitOfPowerOutput { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DesignSteamSaturationTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FuelHigherHeatingValue { get; set; } = ;
        
[Description(@"If non-zero, then the heat recovery inlet and outlet node names must be entered.")]
[JsonProperty(@"If non-zero, then the heat recovery inlet and outlet node names must be entered.")]
public System.String DesignHeatRecoveryWaterFlowRate { get; set; } = (System.String)0;
        
[JsonProperty(@"")]
public System.String HeatRecoveryInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatRecoveryOutletNodeName { get; set; } = "";
        
[Description(@"Select operating mode for fluid flow through the chiller. "NotModulated" is for either variable or constant pumping with flow controlled by the external plant system. "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at full design flow rate. "LeavingSetpointModulated" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
[JsonProperty(@"Select operating mode for fluid flow through the chiller. "NotModulated" is for either variable or constant pumping with flow controlled by the external plant system. "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at full design flow rate. "LeavingSetpointModulated" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
public YesNoDefault ChillerFlowMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NotModulated");
        
[JsonProperty(@"")]
public YesNoDefault FuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NaturalGas");
        
[JsonProperty(@"")]
public System.Single HeatRecoveryMaximumTemperature { get; set; } = 80;
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, The heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the chiller is not operating.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, The heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the chiller is not operating.")]
public System.Single BasinHeaterCapacity { get; set; } = 0;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
public System.Single BasinHeaterSetpointTemperature { get; set; } = 2;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
public System.String BasinHeaterOperatingScheduleName { get; set; } = "";
        
[Description(@"This optional field is the fraction of total rejected heat that can be recovered at full load. Also used to autosize Design Heat Recovery Water Flow Rate as a fraction of Design Condenser Water Flow Rate.")]
[JsonProperty(@"This optional field is the fraction of total rejected heat that can be recovered at full load. Also used to autosize Design Heat Recovery Water Flow Rate as a fraction of Design Condenser Water Flow Rate.")]
public System.Single CondenserHeatRecoveryRelativeCapacityFraction { get; set; } = ;
        
[Description(@"This optional field is the nominal turbine engine efficiency and is used when Gas Turbine Engine Capacity is set to Autosize")]
[JsonProperty(@"This optional field is the nominal turbine engine efficiency and is used when Gas Turbine Engine Capacity is set to Autosize")]
public System.Single TurbineEngineEfficiency { get; set; } = 0.35;
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 3,
    }
    
    public enum ChillerFlowModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("LeavingSetpointModulated")]
        LeavingSetpointModulated = 2,
        
        [JsonProperty("NotModulated")]
        NotModulated = 3,
    }
    
    public enum FuelTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 2,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 3,
        
        [JsonProperty("Gasoline")]
        Gasoline = 4,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 5,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 6,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 7,
        
        [JsonProperty("Propane")]
        Propane = 8,
    }
    
    [Description("Direct fired gas absorption chiller-heater using performance curves similar to DO" +
        "E-2")]
    [JsonObject("ChillerHeater:Absorption:DirectFired")]
    public class ChillerHeater_Absorption_DirectFired
    {
        
[JsonProperty(@"")]
public System.String NominalCoolingCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"A positive fraction that represents the ratio of the heating capacity divided by the cooling capacity at rated conditions.")]
[JsonProperty(@"A positive fraction that represents the ratio of the heating capacity divided by the cooling capacity at rated conditions.")]
public System.Single HeatingToCoolingCapacityRatio { get; set; } = 0.8;
        
[Description(@"The positive fraction that represents the ratio of the instantaneous fuel used divided by the cooling capacity at rated conditions.")]
[JsonProperty(@"The positive fraction that represents the ratio of the instantaneous fuel used divided by the cooling capacity at rated conditions.")]
public System.Single FuelInputToCoolingOutputRatio { get; set; } = 0.97;
        
[Description(@"The positive fraction that represents the ratio of the instantaneous fuel used divided by the nominal heating capacity.")]
[JsonProperty(@"The positive fraction that represents the ratio of the instantaneous fuel used divided by the nominal heating capacity.")]
public System.Single FuelInputToHeatingOutputRatio { get; set; } = 1.25;
        
[Description(@"The positive fraction that represents the ratio of the instantaneous electricity used divided by the cooling capacity at rated conditions. If the chiller is both heating and cooling only the cooling electricity is used.")]
[JsonProperty(@"The positive fraction that represents the ratio of the instantaneous electricity used divided by the cooling capacity at rated conditions. If the chiller is both heating and cooling only the cooling electricity is used.")]
public System.Single ElectricInputToCoolingOutputRatio { get; set; } = 0.01;
        
[Description(@"The positive fraction that represents the ratio of the instantaneous electricity used divided by the nominal heating capacity. If the chiller is both heating and cooling only the cooling electricity is used.")]
[JsonProperty(@"The positive fraction that represents the ratio of the instantaneous electricity used divided by the nominal heating capacity. If the chiller is both heating and cooling only the cooling electricity is used.")]
public System.Single ElectricInputToHeatingOutputRatio { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String ChilledWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChilledWaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserInletNodeName { get; set; } = "";
        
[Description(@"Not required if air-cooled")]
[JsonProperty(@"Not required if air-cooled")]
public System.String CondenserOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HotWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HotWaterOutletNodeName { get; set; } = "";
        
[Description(@"The positive fraction that represents the minimum cooling output possible when operated continually at rated temperature conditions divided by the nominal cooling capacity at those same conditions. If the load on the chiller is below this fraction the chiller will cycle.")]
[JsonProperty(@"The positive fraction that represents the minimum cooling output possible when operated continually at rated temperature conditions divided by the nominal cooling capacity at those same conditions. If the load on the chiller is below this fraction the chiller will cycle.")]
public System.Single MinimumPartLoadRatio { get; set; } = 0.1;
        
[Description(@"The positive fraction that represents the maximum cooling output possible at rated temperature conditions divided by the nominal cooling capacity at those same conditions. If greater than 1.0, the chiller is typically thought of as capable of being overloaded.")]
[JsonProperty(@"The positive fraction that represents the maximum cooling output possible at rated temperature conditions divided by the nominal cooling capacity at those same conditions. If greater than 1.0, the chiller is typically thought of as capable of being overloaded.")]
public System.Single MaximumPartLoadRatio { get; set; } = 1;
        
[Description(@"The positive fraction that represents the optimal cooling output at rated temperature conditions divided by the nominal cooling capacity at those same conditions. It represents the most desirable operating point for the chiller.")]
[JsonProperty(@"The positive fraction that represents the optimal cooling output at rated temperature conditions divided by the nominal cooling capacity at those same conditions. It represents the most desirable operating point for the chiller.")]
public System.Single OptimumPartLoadRatio { get; set; } = 1;
        
[Description(@"The temperature of the water entering the condenser of the chiller when operating at design conditions. This is usually based on the temperature delivered by the cooling tower in a water cooled application.")]
[JsonProperty(@"The temperature of the water entering the condenser of the chiller when operating at design conditions. This is usually based on the temperature delivered by the cooling tower in a water cooled application.")]
public System.Single DesignEnteringCondenserWaterTemperature { get; set; } = 29;
        
[Description(@"The temperature of the water leaving the evaporator of the chiller when operating at design conditions also called the chilled water supply temperature or leaving chilled water temperature.")]
[JsonProperty(@"The temperature of the water leaving the evaporator of the chiller when operating at design conditions also called the chilled water supply temperature or leaving chilled water temperature.")]
public System.Single DesignLeavingChilledWaterTemperature { get; set; } = 7;
        
[Description(@"For variable volume this is the max flow & for constant flow this is the flow.")]
[JsonProperty(@"For variable volume this is the max flow & for constant flow this is the flow.")]
public System.String DesignChilledWaterFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"The water flow rate at design conditions through the condenser. This field is not used for Condenser Type = AirCooled")]
[JsonProperty(@"The water flow rate at design conditions through the condenser. This field is not used for Condenser Type = AirCooled")]
public System.String DesignCondenserWaterFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"The water flow rate at design conditions through the heater side.")]
[JsonProperty(@"The water flow rate at design conditions through the heater side.")]
public System.String DesignHotWaterFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"The CoolCapFT curve represents the fraction of the cooling capacity of the chiller as it varies by temperature. The curve is normalized so that at design conditions the value of the curve should be 1.0. This is a biquadratic curve with the input variables being the leaving chilled water temperature and either the entering or leaving condenser water temperature.")]
[JsonProperty(@"The CoolCapFT curve represents the fraction of the cooling capacity of the chiller as it varies by temperature. The curve is normalized so that at design conditions the value of the curve should be 1.0. This is a biquadratic curve with the input variables being the leaving chilled water temperature and either the entering or leaving condenser water temperature.")]
public System.String CoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"The curve represents the fraction of the fuel input to the chiller at full load as it varies by temperature. The curve is normalized so that at design conditions the value of the curve should be 1.0. This is a biquadratic curve with the input variables being the leaving chilled water temperature and either the entering or leaving condenser water temperature.")]
[JsonProperty(@"The curve represents the fraction of the fuel input to the chiller at full load as it varies by temperature. The curve is normalized so that at design conditions the value of the curve should be 1.0. This is a biquadratic curve with the input variables being the leaving chilled water temperature and either the entering or leaving condenser water temperature.")]
public System.String FuelInputToCoolingOutputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"The curve represents the fraction of the fuel input to the chiller as the load on the chiller varies but the operating temperatures remain at the design values. The curve is normalized so that at full load the value of the curve should be 1.0. The curve is usually linear or quadratic.")]
[JsonProperty(@"The curve represents the fraction of the fuel input to the chiller as the load on the chiller varies but the operating temperatures remain at the design values. The curve is normalized so that at full load the value of the curve should be 1.0. The curve is usually linear or quadratic.")]
public System.String FuelInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveName { get; set; } = "";
        
[Description(@"The curve represents the fraction of the electricity to the chiller at full load as it varies by temperature. The curve is normalized so that at design conditions the value of the curve should be 1.0. This is a biquadratic curve with the input variables being the leaving chilled water temperature and either the entering or leaving condenser water temperature.")]
[JsonProperty(@"The curve represents the fraction of the electricity to the chiller at full load as it varies by temperature. The curve is normalized so that at design conditions the value of the curve should be 1.0. This is a biquadratic curve with the input variables being the leaving chilled water temperature and either the entering or leaving condenser water temperature.")]
public System.String ElectricInputToCoolingOutputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"The curve represents the fraction of the electricity to the chiller as the load on the chiller varies but the operating temperatures remain at the design values. The curve is normalized so that at full load the value of the curve should be 1.0. The curve is usually linear or quadratic.")]
[JsonProperty(@"The curve represents the fraction of the electricity to the chiller as the load on the chiller varies but the operating temperatures remain at the design values. The curve is normalized so that at full load the value of the curve should be 1.0. The curve is usually linear or quadratic.")]
public System.String ElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveName { get; set; } = "";
        
[Description(@"The curve represents how the heating capacity of the chiller varies with cooling capacity when the chiller is simultaneous heating and cooling. The curve is normalized so an input of 1.0 represents the nominal cooling capacity and an output of 1.0 represents the full heating capacity (see the Heating to cooling capacity ratio input) The curve is usually linear or quadratic.")]
[JsonProperty(@"The curve represents how the heating capacity of the chiller varies with cooling capacity when the chiller is simultaneous heating and cooling. The curve is normalized so an input of 1.0 represents the nominal cooling capacity and an output of 1.0 represents the full heating capacity (see the Heating to cooling capacity ratio input) The curve is usually linear or quadratic.")]
public System.String HeatingCapacityFunctionOfCoolingCapacityCurveName { get; set; } = "";
        
[Description(@"When the chiller is operating as only a heater, this curve is used to represent the fraction of fuel used as the heating load varies. It is normalized so that a value of 1.0 is the full heating capacity. The curve is usually linear or quadratic and will probably be similar to a boiler curve for most chillers.")]
[JsonProperty(@"When the chiller is operating as only a heater, this curve is used to represent the fraction of fuel used as the heating load varies. It is normalized so that a value of 1.0 is the full heating capacity. The curve is usually linear or quadratic and will probably be similar to a boiler curve for most chillers.")]
public System.String FuelInputToHeatOutputRatioDuringHeatingOnlyOperationCurveName { get; set; } = "";
        
[Description(@"Sets the second independent variable in the three temperature dependent performance curves to either the leaving or entering condenser water temperature. Manufacturers express the performance of their chillers using either the leaving condenser water temperature (to the tower) or the entering condenser water temperature (from the tower).")]
[JsonProperty(@"Sets the second independent variable in the three temperature dependent performance curves to either the leaving or entering condenser water temperature. Manufacturers express the performance of their chillers using either the leaving condenser water temperature (to the tower) or the entering condenser water temperature (from the tower).")]
public YesNoDefault TemperatureCurveInputVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "EnteringCondenser");
        
[Description(@"The condenser can either be air cooled or connected to a cooling tower.")]
[JsonProperty(@"The condenser can either be air cooled or connected to a cooling tower.")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaterCooled");
        
[Description(@"The chilled water supply temperature below which the chiller will shut off.")]
[JsonProperty(@"The chilled water supply temperature below which the chiller will shut off.")]
public System.Single ChilledWaterTemperatureLowerLimit { get; set; } = 2;
        
[Description(@"Not currently used.")]
[JsonProperty(@"Not currently used.")]
public System.Single FuelHigherHeatingValue { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault FuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NaturalGas");
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
    }
    
    public enum TemperatureCurveInputVariableType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("EnteringCondenser")]
        EnteringCondenser = 1,
        
        [JsonProperty("LeavingCondenser")]
        LeavingCondenser = 2,
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 2,
    }
    
    public enum FuelTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 2,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 3,
        
        [JsonProperty("Gasoline")]
        Gasoline = 4,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 5,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 6,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 7,
        
        [JsonProperty("Propane")]
        Propane = 8,
    }
    
    [Description("Exhaust fired absorption chiller-heater using performance curves similar to DOE-2" +
        "")]
    [JsonObject("ChillerHeater:Absorption:DoubleEffect")]
    public class ChillerHeater_Absorption_DoubleEffect
    {
        
[JsonProperty(@"")]
public System.String NominalCoolingCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"A positive fraction that represents the ratio of the heating capacity divided by the cooling capacity at rated conditions.")]
[JsonProperty(@"A positive fraction that represents the ratio of the heating capacity divided by the cooling capacity at rated conditions.")]
public System.Single HeatingToCoolingCapacityRatio { get; set; } = 0.8;
        
[Description(@"The positive fraction that represents the ratio of the instantaneous fuel used divided by the cooling capacity at rated conditions.")]
[JsonProperty(@"The positive fraction that represents the ratio of the instantaneous fuel used divided by the cooling capacity at rated conditions.")]
public System.Single ThermalEnergyInputToCoolingOutputRatio { get; set; } = 0.97;
        
[Description(@"The positive fraction that represents the ratio of the instantaneous fuel used divided by the nominal heating capacity.")]
[JsonProperty(@"The positive fraction that represents the ratio of the instantaneous fuel used divided by the nominal heating capacity.")]
public System.Single ThermalEnergyInputToHeatingOutputRatio { get; set; } = 1.25;
        
[Description(@"The positive fraction that represents the ratio of the instantaneous electricity used divided by the cooling capacity at rated conditions. If the chiller is both heating and cooling only the cooling electricity is used.")]
[JsonProperty(@"The positive fraction that represents the ratio of the instantaneous electricity used divided by the cooling capacity at rated conditions. If the chiller is both heating and cooling only the cooling electricity is used.")]
public System.Single ElectricInputToCoolingOutputRatio { get; set; } = 0.01;
        
[Description(@"The positive fraction that represents the ratio of the instantaneous electricity used divided by the nominal heating capacity. If the chiller is both heating and cooling only the cooling electricity is used.")]
[JsonProperty(@"The positive fraction that represents the ratio of the instantaneous electricity used divided by the nominal heating capacity. If the chiller is both heating and cooling only the cooling electricity is used.")]
public System.Single ElectricInputToHeatingOutputRatio { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String ChilledWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChilledWaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserInletNodeName { get; set; } = "";
        
[Description(@"Not required if air-cooled")]
[JsonProperty(@"Not required if air-cooled")]
public System.String CondenserOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HotWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HotWaterOutletNodeName { get; set; } = "";
        
[Description(@"The positive fraction that represents the minimum cooling output possible when operated continually at rated temperature conditions divided by the nominal cooling capacity at those same conditions. If the load on the chiller is below this fraction the chiller will cycle.")]
[JsonProperty(@"The positive fraction that represents the minimum cooling output possible when operated continually at rated temperature conditions divided by the nominal cooling capacity at those same conditions. If the load on the chiller is below this fraction the chiller will cycle.")]
public System.Single MinimumPartLoadRatio { get; set; } = 0.1;
        
[Description(@"The positive fraction that represents the maximum cooling output possible at rated temperature conditions divided by the nominal cooling capacity at those same conditions. If greater than 1.0, the chiller is typically thought of as capable of being overloaded.")]
[JsonProperty(@"The positive fraction that represents the maximum cooling output possible at rated temperature conditions divided by the nominal cooling capacity at those same conditions. If greater than 1.0, the chiller is typically thought of as capable of being overloaded.")]
public System.Single MaximumPartLoadRatio { get; set; } = 1;
        
[Description(@"The positive fraction that represents the optimal cooling output at rated temperature conditions divided by the nominal cooling capacity at those same conditions. It represents the most desirable operating point for the chiller.")]
[JsonProperty(@"The positive fraction that represents the optimal cooling output at rated temperature conditions divided by the nominal cooling capacity at those same conditions. It represents the most desirable operating point for the chiller.")]
public System.Single OptimumPartLoadRatio { get; set; } = 1;
        
[Description(@"The temperature of the water entering the condenser of the chiller when operating at design conditions. This is usually based on the temperature delivered by the cooling tower in a water cooled application.")]
[JsonProperty(@"The temperature of the water entering the condenser of the chiller when operating at design conditions. This is usually based on the temperature delivered by the cooling tower in a water cooled application.")]
public System.Single DesignEnteringCondenserWaterTemperature { get; set; } = 29;
        
[Description(@"The temperature of the water leaving the evaporator of the chiller when operating at design conditions also called the chilled water supply temperature or leaving chilled water temperature.")]
[JsonProperty(@"The temperature of the water leaving the evaporator of the chiller when operating at design conditions also called the chilled water supply temperature or leaving chilled water temperature.")]
public System.Single DesignLeavingChilledWaterTemperature { get; set; } = 7;
        
[Description(@"For variable volume this is the max flow & for constant flow this is the flow.")]
[JsonProperty(@"For variable volume this is the max flow & for constant flow this is the flow.")]
public System.String DesignChilledWaterFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"The water flow rate at design conditions through the condenser. This field is not used for Condenser Type = AirCooled")]
[JsonProperty(@"The water flow rate at design conditions through the condenser. This field is not used for Condenser Type = AirCooled")]
public System.String DesignCondenserWaterFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"The water flow rate at design conditions through the heater side.")]
[JsonProperty(@"The water flow rate at design conditions through the heater side.")]
public System.String DesignHotWaterFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"The CoolCapFT curve represents the fraction of the cooling capacity of the chiller as it varies by temperature. The curve is normalized so that at design conditions the value of the curve should be 1.0. This is a biquadratic curve with the input variables being the leaving chilled water temperature and either the entering or leaving condenser water temperature.")]
[JsonProperty(@"The CoolCapFT curve represents the fraction of the cooling capacity of the chiller as it varies by temperature. The curve is normalized so that at design conditions the value of the curve should be 1.0. This is a biquadratic curve with the input variables being the leaving chilled water temperature and either the entering or leaving condenser water temperature.")]
public System.String CoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"The curve represents the fraction of the fuel input to the chiller at full load as it varies by temperature. The curve is normalized so that at design conditions the value of the curve should be 1.0. This is a biquadratic curve with the input variables being the leaving chilled water temperature and either the entering or leaving condenser water temperature.")]
[JsonProperty(@"The curve represents the fraction of the fuel input to the chiller at full load as it varies by temperature. The curve is normalized so that at design conditions the value of the curve should be 1.0. This is a biquadratic curve with the input variables being the leaving chilled water temperature and either the entering or leaving condenser water temperature.")]
public System.String FuelInputToCoolingOutputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"The curve represents the fraction of the fuel input to the chiller as the load on the chiller varies but the operating temperatures remain at the design values. The curve is normalized so that at full load the value of the curve should be 1.0. The curve is usually linear or quadratic.")]
[JsonProperty(@"The curve represents the fraction of the fuel input to the chiller as the load on the chiller varies but the operating temperatures remain at the design values. The curve is normalized so that at full load the value of the curve should be 1.0. The curve is usually linear or quadratic.")]
public System.String FuelInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveName { get; set; } = "";
        
[Description(@"The curve represents the fraction of the electricity to the chiller at full load as it varies by temperature. The curve is normalized so that at design conditions the value of the curve should be 1.0. This is a biquadratic curve with the input variables being the leaving chilled water temperature and either the entering or leaving condenser water temperature.")]
[JsonProperty(@"The curve represents the fraction of the electricity to the chiller at full load as it varies by temperature. The curve is normalized so that at design conditions the value of the curve should be 1.0. This is a biquadratic curve with the input variables being the leaving chilled water temperature and either the entering or leaving condenser water temperature.")]
public System.String ElectricInputToCoolingOutputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"The curve represents the fraction of the electricity to the chiller as the load on the chiller varies but the operating temperatures remain at the design values. The curve is normalized so that at full load the value of the curve should be 1.0. The curve is usually linear or quadratic.")]
[JsonProperty(@"The curve represents the fraction of the electricity to the chiller as the load on the chiller varies but the operating temperatures remain at the design values. The curve is normalized so that at full load the value of the curve should be 1.0. The curve is usually linear or quadratic.")]
public System.String ElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveName { get; set; } = "";
        
[Description(@"The curve represents how the heating capacity of the chiller varies with cooling capacity when the chiller is simultaneous heating and cooling. The curve is normalized so an input of 1.0 represents the nominal cooling capacity and an output of 1.0 represents the full heating capacity (see the Heating to cooling capacity ratio input) The curve is usually linear or quadratic.")]
[JsonProperty(@"The curve represents how the heating capacity of the chiller varies with cooling capacity when the chiller is simultaneous heating and cooling. The curve is normalized so an input of 1.0 represents the nominal cooling capacity and an output of 1.0 represents the full heating capacity (see the Heating to cooling capacity ratio input) The curve is usually linear or quadratic.")]
public System.String HeatingCapacityFunctionOfCoolingCapacityCurveName { get; set; } = "";
        
[Description(@"When the chiller is operating as only a heater, this curve is used to represent the fraction of fuel used as the heating load varies. It is normalized so that a value of 1.0 is the full heating capacity. The curve is usually linear or quadratic and will probably be similar to a boiler curve for most chillers.")]
[JsonProperty(@"When the chiller is operating as only a heater, this curve is used to represent the fraction of fuel used as the heating load varies. It is normalized so that a value of 1.0 is the full heating capacity. The curve is usually linear or quadratic and will probably be similar to a boiler curve for most chillers.")]
public System.String FuelInputToHeatOutputRatioDuringHeatingOnlyOperationCurveName { get; set; } = "";
        
[Description(@"Sets the second independent variable in the three temperature dependent performance curves to either the leaving or entering condenser water temperature. Manufacturers express the performance of their chillers using either the leaving condenser water temperature (to the tower) or the entering condenser water temperature (from the tower).")]
[JsonProperty(@"Sets the second independent variable in the three temperature dependent performance curves to either the leaving or entering condenser water temperature. Manufacturers express the performance of their chillers using either the leaving condenser water temperature (to the tower) or the entering condenser water temperature (from the tower).")]
public YesNoDefault TemperatureCurveInputVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "EnteringCondenser");
        
[Description(@"The condenser can either be air cooled or connected to a cooling tower.")]
[JsonProperty(@"The condenser can either be air cooled or connected to a cooling tower.")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaterCooled");
        
[Description(@"The chilled water supply temperature below which the chiller will shut off.")]
[JsonProperty(@"The chilled water supply temperature below which the chiller will shut off.")]
public System.Single ChilledWaterTemperatureLowerLimit { get; set; } = 2;
        
[JsonProperty(@"")]
public YesNoDefault ExhaustSourceObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ExhaustSourceObjectName { get; set; } = "";
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
    }
    
    public enum TemperatureCurveInputVariableType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("EnteringCondenser")]
        EnteringCondenser = 1,
        
        [JsonProperty("LeavingCondenser")]
        LeavingCondenser = 2,
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 2,
    }
    
    public enum ExhaustSourceObjectTypeType
    {
        
        [JsonProperty("Generator:MicroTurbine")]
        GeneratorMicroTurbine = 0,
    }
    
    [Description("An EIR formulated water to water heat pump model, cooling operation.")]
    [JsonObject("HeatPump:PlantLoop:EIR:Cooling")]
    public class HeatPump_PlantLoop_EIR_Cooling
    {
        
[JsonProperty(@"")]
public System.String LoadSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LoadSideOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaterSource");
        
[JsonProperty(@"")]
public System.String SourceSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SourceSideOutletNodeName { get; set; } = "";
        
[Description(@"This field allows the user to specify a companion heating object for this cooling object. The companion is used in sizing the heat pump as well as to allow checks for unexpected simultaneous operation of the two objects.")]
[JsonProperty(@"This field allows the user to specify a companion heating object for this cooling object. The companion is used in sizing the heat pump as well as to allow checks for unexpected simultaneous operation of the two objects.")]
public System.String CompanionHeatPumpName { get; set; } = "";
        
[Description(@"This component is currently a constant-flow device, meaning it will always try to request the full design flow from the central plant manager.")]
[JsonProperty(@"This component is currently a constant-flow device, meaning it will always try to request the full design flow from the central plant manager.")]
public System.String LoadSideReferenceFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String SourceSideReferenceFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String ReferenceCapacity { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single ReferenceCoefficientOfPerformance { get; set; } = 7.5;
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
        
[Description(@"Cooling capacity modifier as a function of CW supply temp and entering condenser temp curve = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT CWS = supply (leaving) chilled water temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty(@"Cooling capacity modifier as a function of CW supply temp and entering condenser temp curve = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT CWS = supply (leaving) chilled water temperature(C) ECT = entering condenser fluid temperature(C)")]
public System.String CapacityModifierFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Electric Input Ratio (EIR) modifier as a function of temperature EIR = 1/COP curve = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT CWS = supply (leaving) chilled water temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty(@"Electric Input Ratio (EIR) modifier as a function of temperature EIR = 1/COP curve = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT CWS = supply (leaving) chilled water temperature(C) ECT = entering condenser fluid temperature(C)")]
public System.String ElectricInputToOutputRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Electric Input Ratio (EIR) modifier as a function of Part Load Ratio (PLR) EIR = 1/COP quadratic curve = a + b*PLR + c*PLR**2 is typical, other univariate curves may be used PLR = part load ratio (cooling load/steady state capacity)")]
[JsonProperty(@"Electric Input Ratio (EIR) modifier as a function of Part Load Ratio (PLR) EIR = 1/COP quadratic curve = a + b*PLR + c*PLR**2 is typical, other univariate curves may be used PLR = part load ratio (cooling load/steady state capacity)")]
public System.String ElectricInputToOutputRatioModifierFunctionOfPartLoadRatioCurveName { get; set; } = "";
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirSource")]
        AirSource = 1,
        
        [JsonProperty("WaterSource")]
        WaterSource = 2,
    }
    
    [Description("An EIR formulated water to water heat pump model, heating operation")]
    [JsonObject("HeatPump:PlantLoop:EIR:Heating")]
    public class HeatPump_PlantLoop_EIR_Heating
    {
        
[JsonProperty(@"")]
public System.String LoadSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LoadSideOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaterSource");
        
[JsonProperty(@"")]
public System.String SourceSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SourceSideOutletNodeName { get; set; } = "";
        
[Description(@"This field allows the user to specify a companion cooling object for this heating object. The companion is used in sizing the heat pump as well as to allow checks for unexpected simultaneous operation of the two objects.")]
[JsonProperty(@"This field allows the user to specify a companion cooling object for this heating object. The companion is used in sizing the heat pump as well as to allow checks for unexpected simultaneous operation of the two objects.")]
public System.String CompanionHeatPumpName { get; set; } = "";
        
[Description(@"This component is currently a constant-flow device, meaning it will always try to request the full design flow from the central plant manager.")]
[JsonProperty(@"This component is currently a constant-flow device, meaning it will always try to request the full design flow from the central plant manager.")]
public System.String LoadSideReferenceFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String SourceSideReferenceFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String ReferenceCapacity { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single ReferenceCoefficientOfPerformance { get; set; } = 7.5;
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
        
[Description(@"Heating capacity modifier as a function of CW supply temp and entering condenser temp curve = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT CWS = supply (leaving) hot water temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty(@"Heating capacity modifier as a function of CW supply temp and entering condenser temp curve = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT CWS = supply (leaving) hot water temperature(C) ECT = entering condenser fluid temperature(C)")]
public System.String CapacityModifierFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Electric Input Ratio (EIR) modifier as a function of temperature EIR = 1/COP curve = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT CWS = supply (leaving) hot water temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty(@"Electric Input Ratio (EIR) modifier as a function of temperature EIR = 1/COP curve = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT CWS = supply (leaving) hot water temperature(C) ECT = entering condenser fluid temperature(C)")]
public System.String ElectricInputToOutputRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Electric Input Ratio (EIR) modifier as a function of Part Load Ratio (PLR) EIR = 1/COP quadratic curve = a + b*PLR + c*PLR**2 is typical, other univariate curves may be used PLR = part load ratio (hot load/steady state capacity)")]
[JsonProperty(@"Electric Input Ratio (EIR) modifier as a function of Part Load Ratio (PLR) EIR = 1/COP quadratic curve = a + b*PLR + c*PLR**2 is typical, other univariate curves may be used PLR = part load ratio (hot load/steady state capacity)")]
public System.String ElectricInputToOutputRatioModifierFunctionOfPartLoadRatioCurveName { get; set; } = "";
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirSource")]
        AirSource = 1,
        
        [JsonProperty("WaterSource")]
        WaterSource = 2,
    }
    
    [Description("simple water-water hp curve-fit model")]
    [JsonObject("HeatPump:WaterToWater:EquationFit:Heating")]
    public class HeatPump_WaterToWater_EquationFit_Heating
    {
        
[JsonProperty(@"")]
public System.String SourceSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SourceSideOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LoadSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LoadSideOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ReferenceLoadSideFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ReferenceSourceSideFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ReferenceHeatingCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ReferenceHeatingPowerConsumption { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatingCapacityCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatingCompressorPowerCurveName { get; set; } = "";
        
[Description(@"This optional field is used to autosize Reference Heating Power Consumption COP = Reference Heating Capacity / Reference Heating Power Consumption")]
[JsonProperty(@"This optional field is used to autosize Reference Heating Power Consumption COP = Reference Heating Capacity / Reference Heating Power Consumption")]
public System.Single ReferenceCoefficientOfPerformance { get; set; } = 7.5;
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
        
[JsonProperty(@"")]
public System.String CompanionCoolingHeatPumpName { get; set; } = "";
    }
    
    [Description("simple water-water heat pump curve-fit model")]
    [JsonObject("HeatPump:WaterToWater:EquationFit:Cooling")]
    public class HeatPump_WaterToWater_EquationFit_Cooling
    {
        
[JsonProperty(@"")]
public System.String SourceSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SourceSideOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LoadSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LoadSideOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ReferenceLoadSideFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ReferenceSourceSideFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ReferenceCoolingCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ReferenceCoolingPowerConsumption { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoolingCapacityCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoolingCompressorPowerCurveName { get; set; } = "";
        
[Description(@"This optional field is used to autosize Reference Cooling Power Consumption COP = Rated Cooling Capacity / Rated Cooling Power Consumption")]
[JsonProperty(@"This optional field is used to autosize Reference Cooling Power Consumption COP = Rated Cooling Capacity / Rated Cooling Power Consumption")]
public System.Single ReferenceCoefficientOfPerformance { get; set; } = 8;
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
        
[Description(@"This optional field is used to coordinate sizing calculations between heating and cooling modes.")]
[JsonProperty(@"This optional field is used to coordinate sizing calculations between heating and cooling modes.")]
public System.String CompanionHeatingHeatPumpName { get; set; } = "";
    }
    
    [Description("OSU parameter estimation model")]
    [JsonObject("HeatPump:WaterToWater:ParameterEstimation:Cooling")]
    public class HeatPump_WaterToWater_ParameterEstimation_Cooling
    {
        
[JsonProperty(@"")]
public System.String SourceSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SourceSideOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LoadSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LoadSideOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NominalCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NominalCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single OptimumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadSideFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SourceSideFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadSideHeatTransferCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SourceSideHeatTransferCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PistonDisplacement { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CompressorClearanceFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CompressorSuctionAndDischargePressureDrop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Superheating { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ConstantPartOfElectromechanicalPowerLosses { get; set; } = ;
        
[Description(@"Used to define electromechanical loss that is proportional to the theoretical power %")]
[JsonProperty(@"Used to define electromechanical loss that is proportional to the theoretical power %")]
public System.Single LossFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single HighPressureCutOff { get; set; } = 500000000;
        
[JsonProperty(@"")]
public System.Single LowPressureCutOff { get; set; } = 0;
    }
    
    [Description("OSU parameter estimation model")]
    [JsonObject("HeatPump:WaterToWater:ParameterEstimation:Heating")]
    public class HeatPump_WaterToWater_ParameterEstimation_Heating
    {
        
[JsonProperty(@"")]
public System.String SourceSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SourceSideOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LoadSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LoadSideOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NominalCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NominalCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single OptimumPartLoadRatio { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadSideFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SourceSideFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadSideHeatTransferCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SourceSideHeatTransferCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PistonDisplacement { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CompressorClearanceFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CompressorSuctionAndDischargePressureDrop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Superheating { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ConstantPartOfElectromechanicalPowerLosses { get; set; } = ;
        
[Description(@"Used to define electromechanical loss that is proportional to the theoretical power %")]
[JsonProperty(@"Used to define electromechanical loss that is proportional to the theoretical power %")]
public System.Single LossFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single HighPressureCutOff { get; set; } = 500000000;
        
[JsonProperty(@"")]
public System.Single LowPressureCutOff { get; set; } = 0;
    }
    
    [Description("Centralized source of chilled water, such as a district cooling system.")]
    [JsonObject("DistrictCooling")]
    public class DistrictCooling
    {
        
[JsonProperty(@"")]
public System.String ChilledWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChilledWaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String NominalCapacity { get; set; } = "";
        
[Description(@"Schedule values are multiplied by Nominal Capacity for current capacity")]
[JsonProperty(@"Schedule values are multiplied by Nominal Capacity for current capacity")]
public System.String CapacityFractionScheduleName { get; set; } = "";
    }
    
    [Description("Centralized source of hot water, such as a district heating system.")]
    [JsonObject("DistrictHeating")]
    public class DistrictHeating
    {
        
[JsonProperty(@"")]
public System.String HotWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HotWaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String NominalCapacity { get; set; } = "";
        
[Description(@"Schedule values are multiplied by Nominal Capacity for current capacity")]
[JsonProperty(@"Schedule values are multiplied by Nominal Capacity for current capacity")]
public System.String CapacityFractionScheduleName { get; set; } = "";
    }
    
    [Description(@"Simulates an object of pre-determined (constant or scheduled) source temperature The object introduces fluid into the plant loop at the specified temperature and at the same flow rate as the fluid enters the component Fluid entering the component vanishes equivalent to the relief air in an air system")]
    [JsonObject("PlantComponent:TemperatureSource")]
    public class PlantComponent_TemperatureSource
    {
        
[Description(@"Name of the source inlet node")]
[JsonProperty(@"Name of the source inlet node")]
public System.String InletNode { get; set; } = "";
        
[Description(@"Name of the source outlet node")]
[JsonProperty(@"Name of the source outlet node")]
public System.String OutletNode { get; set; } = "";
        
[Description(@"The design volumetric flow rate for this source")]
[JsonProperty(@"The design volumetric flow rate for this source")]
public System.String DesignVolumeFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault TemperatureSpecificationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Used if Temperature Specification Type = Constant")]
[JsonProperty(@"Used if Temperature Specification Type = Constant")]
public System.Single SourceTemperature { get; set; } = ;
        
[Description(@"Used if Temperature Specification Type = Scheduled")]
[JsonProperty(@"Used if Temperature Specification Type = Scheduled")]
public System.String SourceTemperatureScheduleName { get; set; } = "";
    }
    
    public enum TemperatureSpecificationTypeType
    {
        
        [JsonProperty("Constant")]
        Constant = 0,
        
        [JsonProperty("Scheduled")]
        Scheduled = 1,
    }
    
    [Description(@"This chiller bank can contain multiple chiller heaters and heat pump performance objects. Its function is to encapsulate the extra controls needed to turn individual modules on/off and whether they are to operate in cooling-only, heating-only or simultaneous cooling/heating mode and whether to connect the source water to the evaporator or condenser side.")]
    [JsonObject("CentralHeatPumpSystem")]
    public class CentralHeatPumpSystem
    {
        
[JsonProperty(@"")]
public YesNoDefault ControlMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SmartMixing");
        
[JsonProperty(@"")]
public System.String CoolingLoopInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoolingLoopOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SourceLoopInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SourceLoopOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatingLoopInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatingLoopOutletNodeName { get; set; } = "";
        
[Description(@"Power as demanded from any auxiliary controls")]
[JsonProperty(@"Power as demanded from any auxiliary controls")]
public System.Single AncillaryPower { get; set; } = 0;
        
[Description(@"This value from this schedule is multiplied times the Ancillary Power")]
[JsonProperty(@"This value from this schedule is multiplied times the Ancillary Power")]
public System.String AncillaryOperationScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ChillerHeaterModulesPerformanceComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesPerformanceComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfChillerHeaterModules { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault ChillerHeaterModulesPerformanceComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesPerformanceComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfChillerHeaterModules { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault ChillerHeaterPerformanceComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChillerHeaterPerformanceComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfChillerHeaterModules { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault ChillerHeaterModulesPerformanceComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesPerformanceComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfChillerHeaterModules { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault ChillerHeaterModulesPerformanceComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChillerHeaterModelsPerformanceComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfChillerHeaterModules { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault ChillerHeaterModulesPerformanceComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesPerformanceComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfChillerHeaterModules { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault ChillerHeaterModulesPerformanceComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesPerformanceComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfChillerHeaterModules { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault ChillerHeaterModulesPerformanceComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesPerformanceComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfChillerHeaterModules { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault ChillerHeaterModulesPerformanceComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesPerformanceComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfChillerHeaterModules { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault ChillerHeaterModulesPerformanceComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesPerformanceComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfChillerHeaterModules { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault ChillerHeaterModulesPerformanceComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesPerformanceComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChillerHeaterModuleControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfChillerHeaterModules { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault ChillerHeaterModulesPerformanceComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesPerformanceComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfChillerHeaterModules { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault ChillerHeaterModulesPerformanceComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesPerformanceComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfChillerHeaterModules { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault ChillerHeaterModulesPerformanceComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesPerformanceComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfChillerHeaterModules { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault ChillerHeaterModulesPerformanceComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesPerformanceComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfChillerHeaterModules { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault ChillerHeaterModulesPerformanceComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesPerformanceComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfChillerHeaterModules { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault ChillerHeaterModulesPerformanceComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesPerformanceComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfChillerHeaterModules { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault ChillerHeaterModulesPerformanceComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesPerformanceComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesControlControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfChillerHeaterModules { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault ChillerHeaterModulesPerformanceComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesPerformanceComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfChillerHeaterModules { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault ChillerHeaterModulesPerformanceComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesPerformanceComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChillerHeaterModulesControlScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfChillerHeaterModules { get; set; } = 1;
    }
    
    public enum ControlMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SmartMixing")]
        SmartMixing = 1,
    }
    
    public enum ChillerHeaterModulesPerformanceComponentObjectTypeType
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum ChillerHeaterModulesPerformanceComponentObjectTypeType
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum ChillerHeaterPerformanceComponentObjectTypeType
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum ChillerHeaterModulesPerformanceComponentObjectTypeType
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum ChillerHeaterModulesPerformanceComponentObjectTypeType
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum ChillerHeaterModulesPerformanceComponentObjectTypeType
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum ChillerHeaterModulesPerformanceComponentObjectTypeType
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum ChillerHeaterModulesPerformanceComponentObjectTypeType
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum ChillerHeaterModulesPerformanceComponentObjectTypeType
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum ChillerHeaterModulesPerformanceComponentObjectTypeType
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum ChillerHeaterModulesPerformanceComponentObjectTypeType
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum ChillerHeaterModulesPerformanceComponentObjectTypeType
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum ChillerHeaterModulesPerformanceComponentObjectTypeType
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum ChillerHeaterModulesPerformanceComponentObjectTypeType
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum ChillerHeaterModulesPerformanceComponentObjectTypeType
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum ChillerHeaterModulesPerformanceComponentObjectTypeType
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum ChillerHeaterModulesPerformanceComponentObjectTypeType
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum ChillerHeaterModulesPerformanceComponentObjectTypeType
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum ChillerHeaterModulesPerformanceComponentObjectTypeType
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    public enum ChillerHeaterModulesPerformanceComponentObjectTypeType
    {
        
        [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
        ChillerHeaterPerformanceElectricEIR = 0,
    }
    
    [Description(@"This chiller model is a generic chiller-heater where the cooling mode performance is a function of condenser entering or leaving fluid temperature and the heating mode performance is typically a function of condenser leaving fluid temperature. Performance at off-reference conditions is modeled using three polynomial equations per mode. Six curve objects are required.")]
    [JsonObject("ChillerHeaterPerformance:Electric:EIR")]
    public class ChillerHeaterPerformance_Electric_EIR
    {
        
[JsonProperty(@"")]
public System.String ReferenceCoolingModeEvaporatorCapacity { get; set; } = "";
        
[Description(@"Efficiency of the chiller compressor (cooling output/compressor energy input).")]
[JsonProperty(@"Efficiency of the chiller compressor (cooling output/compressor energy input).")]
public System.Single ReferenceCoolingModeCop { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ReferenceCoolingModeLeavingChilledWaterTemperature { get; set; } = 6.67;
        
[JsonProperty(@"")]
public System.Single ReferenceCoolingModeEnteringCondenserFluidTemperature { get; set; } = 29.44;
        
[JsonProperty(@"")]
public System.Single ReferenceCoolingModeLeavingCondenserWaterTemperature { get; set; } = 35;
        
[Description(@"During simultaneous cooling-heating mode, this ratio is relative to the Reference Cooling Mode Cooling Capacity (Evaporator capacity at simul clg-htg mode ref condition)/ (Evaporator capacity at cooling mode ref condition)")]
[JsonProperty(@"During simultaneous cooling-heating mode, this ratio is relative to the Reference Cooling Mode Cooling Capacity (Evaporator capacity at simul clg-htg mode ref condition)/ (Evaporator capacity at cooling mode ref condition)")]
public System.Single ReferenceHeatingModeCoolingCapacityRatio { get; set; } = 0.75;
        
[Description(@"During simultaneous cooling-heating mode, this ratio is relative to the Reference Cooling Mode COP (Power at simultaneous clg-htg mode reference condition)/ (Power at cooling mode reference condition)")]
[JsonProperty(@"During simultaneous cooling-heating mode, this ratio is relative to the Reference Cooling Mode COP (Power at simultaneous clg-htg mode reference condition)/ (Power at cooling mode reference condition)")]
public System.Single ReferenceHeatingModeCoolingPowerInputRatio { get; set; } = 1.38;
        
[Description(@"During simultaneous cooling-heating mode")]
[JsonProperty(@"During simultaneous cooling-heating mode")]
public System.Single ReferenceHeatingModeLeavingChilledWaterTemperature { get; set; } = 6.67;
        
[Description(@"During simultaneous cooling-heating mode")]
[JsonProperty(@"During simultaneous cooling-heating mode")]
public System.Single ReferenceHeatingModeLeavingCondenserWaterTemperature { get; set; } = 49;
        
[JsonProperty(@"")]
public System.Single ReferenceHeatingModeEnteringCondenserFluidTemperature { get; set; } = 29.44;
        
[Description(@"During simultaneous cooling-heating mode")]
[JsonProperty(@"During simultaneous cooling-heating mode")]
public System.Single HeatingModeEnteringChilledWaterTemperatureLowLimit { get; set; } = 12.22;
        
[Description(@"Sets chilled water flow rate to either constant or variable.")]
[JsonProperty(@"Sets chilled water flow rate to either constant or variable.")]
public YesNoDefault ChilledWaterFlowModeType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ConstantFlow");
        
[JsonProperty(@"")]
public System.String DesignChilledWaterFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DesignCondenserWaterFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DesignHotWaterFlowRate { get; set; } = 0;
        
[Description(@"Fraction of compressor electrical energy that must be rejected by the condenser. Enter 1.0 or leave this field blank for a hermetic compressor.")]
[JsonProperty(@"Fraction of compressor electrical energy that must be rejected by the condenser. Enter 1.0 or leave this field blank for a hermetic compressor.")]
public System.Single CompressorMotorEfficiency { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaterCooled");
        
[Description(@"Sets the second independent variable in the three temperature dependent performance curves to either the leaving or entering condenser water temperature. Manufacturers express the performance of their chillers using either the leaving condenser water temperature (to the tower) or the entering condenser water temperature (from the tower). Cooling mode is generally a stronger function of Entering Condenser Fluid Temperature")]
[JsonProperty(@"Sets the second independent variable in the three temperature dependent performance curves to either the leaving or entering condenser water temperature. Manufacturers express the performance of their chillers using either the leaving condenser water temperature (to the tower) or the entering condenser water temperature (from the tower). Cooling mode is generally a stronger function of Entering Condenser Fluid Temperature")]
public YesNoDefault CoolingModeTemperatureCurveCondenserWaterIndependentVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "EnteringCondenser");
        
[Description(@"Cooling capacity as a function of leaving chilled water temperature and either entering or leaving condenser fluid temperature curve = a + b*CWS + c*CWS**2 + d*TCond + e*TCond**2 + f*CWS*TCond If ClgModeCondWaterCurveInputVariable = EnteringCondenser, TCond = ECT If ClgModeCondWaterCurveInputVariable = LeavingCondenser, TCond = LCT CWS = supply (leaving) chilled water temperature(C) LCT = leaving condenser fluid temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty(@"Cooling capacity as a function of leaving chilled water temperature and either entering or leaving condenser fluid temperature curve = a + b*CWS + c*CWS**2 + d*TCond + e*TCond**2 + f*CWS*TCond If ClgModeCondWaterCurveInputVariable = EnteringCondenser, TCond = ECT If ClgModeCondWaterCurveInputVariable = LeavingCondenser, TCond = LCT CWS = supply (leaving) chilled water temperature(C) LCT = leaving condenser fluid temperature(C) ECT = entering condenser fluid temperature(C)")]
public System.String CoolingModeCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Electric Input Ratio (EIR) as a function of supply (leaving) chilled water temperature and leaving condenser fluid temperature. EIR = 1/COP. curve = a + b*CWS + c*CWS**2 + d*TCond + e*TCond**2 + f*CWS*TCond If ClgModeCondWaterCurveInputVariable = EnteringCondenser, TCond = ECT If ClgModeCondWaterCurveInputVariable = LeavingCondenser, TCond = LCT CWS = supply (leaving) chilled water temperature(C) LCT = leaving condenser fluid temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty(@"Electric Input Ratio (EIR) as a function of supply (leaving) chilled water temperature and leaving condenser fluid temperature. EIR = 1/COP. curve = a + b*CWS + c*CWS**2 + d*TCond + e*TCond**2 + f*CWS*TCond If ClgModeCondWaterCurveInputVariable = EnteringCondenser, TCond = ECT If ClgModeCondWaterCurveInputVariable = LeavingCondenser, TCond = LCT CWS = supply (leaving) chilled water temperature(C) LCT = leaving condenser fluid temperature(C) ECT = entering condenser fluid temperature(C)")]
public System.String CoolingModeElectricInputToCoolingOutputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Electric Input Ratio (EIR) as a function of Part Load Ratio (PLR) EIR = 1/COP Bicubic = a + b*TCond + c*TCond**2 + d*PLR + e*PLR**2 + f*TCond*PLR +g*0 + h*PLR**3+i*0+j*0 If ClgModeCondWaterCurveInputVariable = EnteringCondenser, TCond = ECT If ClgModeCondWaterCurveInputVariable = LeavingCondenser, TCond = LCT Normally, a bicubic curve here should be in terms of LCT rather than ECT Also, a bicubic curve is more applicable for variable-speed compressor motor drives or Quadratic = a + b*PLR + c*PLR**2 PLR = part load ratio (cooling load/steady-state capacity) LCT = leaving condenser fluid temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty(@"Electric Input Ratio (EIR) as a function of Part Load Ratio (PLR) EIR = 1/COP Bicubic = a + b*TCond + c*TCond**2 + d*PLR + e*PLR**2 + f*TCond*PLR +g*0 + h*PLR**3+i*0+j*0 If ClgModeCondWaterCurveInputVariable = EnteringCondenser, TCond = ECT If ClgModeCondWaterCurveInputVariable = LeavingCondenser, TCond = LCT Normally, a bicubic curve here should be in terms of LCT rather than ECT Also, a bicubic curve is more applicable for variable-speed compressor motor drives or Quadratic = a + b*PLR + c*PLR**2 PLR = part load ratio (cooling load/steady-state capacity) LCT = leaving condenser fluid temperature(C) ECT = entering condenser fluid temperature(C)")]
public System.String CoolingModeElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveName { get; set; } = "";
        
[Description(@"Optimum part load ratio where the chiller is most efficient. Must be greater than or equal to the Minimum Part Load Ratio and less than or equal to the Maximum Part Load Ratio. The Min/Max PLR are taken from their associated EIR-FPLR curve references.")]
[JsonProperty(@"Optimum part load ratio where the chiller is most efficient. Must be greater than or equal to the Minimum Part Load Ratio and less than or equal to the Maximum Part Load Ratio. The Min/Max PLR are taken from their associated EIR-FPLR curve references.")]
public System.Single CoolingModeCoolingCapacityOptimumPartLoadRatio { get; set; } = 1;
        
[Description(@"Sets the second independent variable in the three temperature dependent performance curves to either the leaving or entering condenser water temperature. Manufacturers express the performance of their chillers using either the leaving condenser water temperature (to the tower) or the entering condenser water temperature (from the tower). Heating mode (or Simul Clg/Htg Load) should be a function of Leaving Condenser Fluid Temperature Only use EnteringCondenser as a last resort in case no performance data exists for LeavingCondenser")]
[JsonProperty(@"Sets the second independent variable in the three temperature dependent performance curves to either the leaving or entering condenser water temperature. Manufacturers express the performance of their chillers using either the leaving condenser water temperature (to the tower) or the entering condenser water temperature (from the tower). Heating mode (or Simul Clg/Htg Load) should be a function of Leaving Condenser Fluid Temperature Only use EnteringCondenser as a last resort in case no performance data exists for LeavingCondenser")]
public YesNoDefault HeatingModeTemperatureCurveCondenserWaterIndependentVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "LeavingCondenser");
        
[Description(@"Evaporator (cooling) capacity as a function of leaving chilled water temperature and leaving condenser fluid temperature when in heating or simultaneous cool/heat mode curve = a + b*CWS + c*CWS**2 + d*TCond + e*TCond**2 + f*CWS*TCond If independent variable = EnteringCondenser, TCond = ECT If independent variable = LeavingCondenser, TCond = LCT CWS = supply (leaving) chilled water temperature(C) LCT = leaving condenser fluid temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty(@"Evaporator (cooling) capacity as a function of leaving chilled water temperature and leaving condenser fluid temperature when in heating or simultaneous cool/heat mode curve = a + b*CWS + c*CWS**2 + d*TCond + e*TCond**2 + f*CWS*TCond If independent variable = EnteringCondenser, TCond = ECT If independent variable = LeavingCondenser, TCond = LCT CWS = supply (leaving) chilled water temperature(C) LCT = leaving condenser fluid temperature(C) ECT = entering condenser fluid temperature(C)")]
public System.String HeatingModeCoolingCapacityFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Electric Input Ratio (EIR) as a function of leaving chilled water temperature when in heating or simultaneous cool/heat mode and leaving condenser fluid temperature. EIR = 1/COP. curve = a + b*CWS + c*CWS**2 + d*TCond + e*TCond**2 + f*CWS*TCond If independent variable = EnteringCondenser, TCond = ECT If independent variable = LeavingCondenser, TCond = LCT CWS = leaving chilled water temperature(C) LCT = leaving condenser fluid temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty(@"Electric Input Ratio (EIR) as a function of leaving chilled water temperature when in heating or simultaneous cool/heat mode and leaving condenser fluid temperature. EIR = 1/COP. curve = a + b*CWS + c*CWS**2 + d*TCond + e*TCond**2 + f*CWS*TCond If independent variable = EnteringCondenser, TCond = ECT If independent variable = LeavingCondenser, TCond = LCT CWS = leaving chilled water temperature(C) LCT = leaving condenser fluid temperature(C) ECT = entering condenser fluid temperature(C)")]
public System.String HeatingModeElectricInputToCoolingOutputRatioFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Electric Input Ratio (EIR) as a function of Part Load Ratio (PLR) when in heating or simultaneous cool/heat mode EIR = 1/COP Bicubic = a + b*LCT + c*LCT**2 + d*PLR + e*PLR**2 + f*LCT*PLR + g*0 + h*PLR**3 + i*0 + j*0 Normally, a bicubic curve here should be in terms of LCT rather than ECT Also, a bicubic curve is more applicable for variable-speed compressor motor drives or Quadratic = a + b*PLR + c*PLR**2 PLR = part load ratio (cooling load/steady-state capacity) LCT = leaving condenser fluid temperature(C) ECT = entering condenser fluid temperature(C)")]
[JsonProperty(@"Electric Input Ratio (EIR) as a function of Part Load Ratio (PLR) when in heating or simultaneous cool/heat mode EIR = 1/COP Bicubic = a + b*LCT + c*LCT**2 + d*PLR + e*PLR**2 + f*LCT*PLR + g*0 + h*PLR**3 + i*0 + j*0 Normally, a bicubic curve here should be in terms of LCT rather than ECT Also, a bicubic curve is more applicable for variable-speed compressor motor drives or Quadratic = a + b*PLR + c*PLR**2 PLR = part load ratio (cooling load/steady-state capacity) LCT = leaving condenser fluid temperature(C) ECT = entering condenser fluid temperature(C)")]
public System.String HeatingModeElectricInputToCoolingOutputRatioFunctionOfPartLoadRatioCurveName { get; set; } = "";
        
[Description(@"Optimum part load ratio where the chiller is most efficient when in heating or simultaneous cool/heat mode. Must be greater than or equal to the Minimum Part Load Ratio and less than or equal to the Maximum Part Load Ratio. The Min/Max PLR are taken from their associated EIR-FPLR curve references.")]
[JsonProperty(@"Optimum part load ratio where the chiller is most efficient when in heating or simultaneous cool/heat mode. Must be greater than or equal to the Minimum Part Load Ratio and less than or equal to the Maximum Part Load Ratio. The Min/Max PLR are taken from their associated EIR-FPLR curve references.")]
public System.Single HeatingModeCoolingCapacityOptimumPartLoadRatio { get; set; } = 1;
        
[Description(@"Multiplies the autosized capacity and flow rates")]
[JsonProperty(@"Multiplies the autosized capacity and flow rates")]
public System.Single SizingFactor { get; set; } = 1;
    }
    
    public enum ChilledWaterFlowModeTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("VariableFlow")]
        VariableFlow = 2,
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 2,
    }
    
    public enum CoolingModeTemperatureCurveCondenserWaterIndependentVariableType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("EnteringCondenser")]
        EnteringCondenser = 1,
        
        [JsonProperty("LeavingCondenser")]
        LeavingCondenser = 2,
    }
    
    public enum HeatingModeTemperatureCurveCondenserWaterIndependentVariableType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("EnteringCondenser")]
        EnteringCondenser = 1,
        
        [JsonProperty("LeavingCondenser")]
        LeavingCondenser = 2,
    }
}
namespace EnergyPlus.PlantCondenserControl
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"List plant equipment in order of operating priority, 1st in list will be used 1st, etc Use only plant equipment in this list. If no equipment object types and equipment names are specified, then the corresponding PlantEquipmentOperation:* object will assume all available plant equipment for the loop should be OFF (not operate) within the specified lower/upper limit.")]
    [JsonObject("PlantEquipmentList")]
    public class PlantEquipmentList
    {
        
[JsonProperty(@"")]
public System.String Equipment { get; set; } = "";
    }
    
    [Description(@"List condenser equipment in order of operating priority, 1st in list will be used 1st, etc Use only condenser equipment in this list. If no equipment object types and equipment names are specified, then the corresponding PlantEquipmentOperation:* object will assume all available condenser equipment for the loop should be OFF (not operate) within the specified lower/upper limit.")]
    [JsonObject("CondenserEquipmentList")]
    public class CondenserEquipmentList
    {
        
[JsonProperty(@"")]
public System.String Equipment { get; set; } = "";
    }
    
    [Description("Plant equipment operation scheme for uncontrolled operation. Specifies a group of" +
        " equipment that runs if the loop is active, unless turned off by the loop flow r" +
        "esolver to maintain continuity in the fluid loop.")]
    [JsonObject("PlantEquipmentOperation:Uncontrolled")]
    public class PlantEquipmentOperation_Uncontrolled
    {
        
[JsonProperty(@"")]
public System.String EquipmentListName { get; set; } = "";
    }
    
    [Description("Plant equipment operation scheme for cooling load range operation. Specifies one " +
        "or more groups of equipment which are available to operate for successive coolin" +
        "g load ranges.")]
    [JsonObject("PlantEquipmentOperation:CoolingLoad")]
    public class PlantEquipmentOperation_CoolingLoad
    {
        
[JsonProperty(@"")]
public System.Single LoadRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LoadRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LoadRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LoadRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LoadRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LoadRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LoadRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LoadRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LoadRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LoadRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
    }
    
    [Description("Plant equipment operation scheme for heating load range operation. Specifies one " +
        "or more groups of equipment which are available to operate for successive heatin" +
        "g load ranges.")]
    [JsonObject("PlantEquipmentOperation:HeatingLoad")]
    public class PlantEquipmentOperation_HeatingLoad
    {
        
[JsonProperty(@"")]
public System.Single LoadRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LoadRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LoadRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LoadRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LoadRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LoadRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LoadRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LoadRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LoadRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LoadRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LoadRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
    }
    
    [Description("Plant equipment operation scheme for outdoor dry-bulb temperature range operation" +
        ". Specifies one or more groups of equipment which are available to operate for s" +
        "uccessive outdoor dry-bulb temperature ranges.")]
    [JsonObject("PlantEquipmentOperation:OutdoorDryBulb")]
    public class PlantEquipmentOperation_OutdoorDryBulb
    {
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
    }
    
    [Description("Plant equipment operation scheme for outdoor wet-bulb temperature range operation" +
        ". Specifies one or more groups of equipment which are available to operate for s" +
        "uccessive outdoor wet-bulb temperature ranges.")]
    [JsonObject("PlantEquipmentOperation:OutdoorWetBulb")]
    public class PlantEquipmentOperation_OutdoorWetBulb
    {
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
    }
    
    [Description("Plant equipment operation scheme for outdoor relative humidity range operation. S" +
        "pecifies one or more groups of equipment which are available to operate for succ" +
        "essive outdoor relative humidity ranges.")]
    [JsonObject("PlantEquipmentOperation:OutdoorRelativeHumidity")]
    public class PlantEquipmentOperation_OutdoorRelativeHumidity
    {
        
[JsonProperty(@"")]
public System.Single RelativeHumidityRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeHumidityRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RelativeHumidityRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeHumidityRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RelativeHumidityRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeHumidityRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RelativeHumidityRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeHumidityRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RelativeHumidityRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeHumidityRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RelativeHumidityRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeHumidityRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RelativeHumidityRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeHumidityRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RelativeHumidityRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeHumidityRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RelativeHumidityRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeHumidityRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RelativeHumidityRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeHumidityRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
    }
    
    [Description("Plant equipment operation scheme for outdoor dewpoint temperature range operation" +
        ". Specifies one or more groups of equipment which are available to operate for s" +
        "uccessive outdoor dewpoint temperature ranges.")]
    [JsonObject("PlantEquipmentOperation:OutdoorDewpoint")]
    public class PlantEquipmentOperation_OutdoorDewpoint
    {
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
    }
    
    [Description("Plant equipment operation scheme for component setpoint operation. Specifies one " +
        "or pieces of equipment which are controlled to meet the temperature setpoint at " +
        "the component outlet node.")]
    [JsonObject("PlantEquipmentOperation:ComponentSetpoint")]
    public class PlantEquipmentOperation_ComponentSetpoint
    {
        
[JsonProperty(@"")]
public System.String EquipmentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DemandCalculationNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault OperationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String EquipmentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DemandCalculationNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault OperationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String EquipmentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DemandCalculationNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault OperationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String EquipmentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DemandCalculationNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault OperationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String EquipmentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DemandCalculationNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault OperationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String EquipmentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DemandCalculationNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault OperationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String EquipmentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DemandCalculationNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault OperationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String EquipmentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DemandCalculationNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault OperationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String EquipmentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DemandCalculationNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault OperationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String EquipmentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DemandCalculationNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault OperationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum OperationTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum OperationTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum OperationTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum OperationTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum OperationTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum OperationTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum OperationTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum OperationTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum OperationTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum OperationTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    [Description("Plant equipment operation scheme for simpler input to control thermal (ice) energ" +
        "y storage systems. It replaces a host of setpoint managers with simple, single i" +
        "nput values. For more complex controls, use the ComponentSetpoint scheme.")]
    [JsonObject("PlantEquipmentOperation:ThermalEnergyStorage")]
    public class PlantEquipmentOperation_ThermalEnergyStorage
    {
        
[JsonProperty(@"")]
public System.String OnPeakSchedule { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChargingAvailabilitySchedule { get; set; } = "";
        
[Description(@"Single temperature for chiller outlet when not in cooling season or during on-peak cooling (discharge)")]
[JsonProperty(@"Single temperature for chiller outlet when not in cooling season or during on-peak cooling (discharge)")]
public System.Single NonChargingChilledWaterTemperature { get; set; } = ;
        
[Description(@"Single temperature for chiller outlet when off-peak during cooling season (charging)")]
[JsonProperty(@"Single temperature for chiller outlet when off-peak during cooling season (charging)")]
public System.Single ChargingChilledWaterTemperature { get; set; } = ;
        
[Description(@"This field is the type of object and should either be a chiller or some ice storage equipment.")]
[JsonProperty(@"This field is the type of object and should either be a chiller or some ice storage equipment.")]
public YesNoDefault ComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"This field is the name of either the chiller or ice storage equipment on the loop.")]
[JsonProperty(@"This field is the name of either the chiller or ice storage equipment on the loop.")]
public System.String ComponentName { get; set; } = "";
        
[Description(@"This field is the name of the inlet node for the component defined in the two previous input fields.")]
[JsonProperty(@"This field is the name of the inlet node for the component defined in the two previous input fields.")]
public System.String ComponentDemandCalculationNodeName { get; set; } = "";
        
[Description(@"This field is the name of the outlet node for the component listed above.")]
[JsonProperty(@"This field is the name of the outlet node for the component listed above.")]
public System.String ComponentSetpointNodeName { get; set; } = "";
        
[Description(@"This field is the flow rate for the component listed above.")]
[JsonProperty(@"This field is the flow rate for the component listed above.")]
public System.String ComponentFlowRate { get; set; } = "";
        
[Description(@"This field is the operation type for the component listed above. For this plant equipment operation scheme, "Cooling" should be selected for chiller equipment while ice storage equipment should be defined as "Dual".")]
[JsonProperty(@"This field is the operation type for the component listed above. For this plant equipment operation scheme, "Cooling" should be selected for chiller equipment while ice storage equipment should be defined as "Dual".")]
public YesNoDefault ComponentOperationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault ComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentDemandCalculationNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentSetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ComponentOperationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault ComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentDemandCalculationNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentSetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ComponentOperationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault ComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentDemandCalculationNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentSetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ComponentOperationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault ComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentDemandCalculationNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentSetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ComponentOperationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault ComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentDemandCalculationNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentSetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ComponentOperationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault ComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentDemandCalculationNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentSetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ComponentOperationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault ComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentDemandCalculationNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentSetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ComponentOperationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault ComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentDemandCalculationNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentSetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ComponentOperationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault ComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentDemandCalculationNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentSetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ComponentFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ComponentOperationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum ComponentObjectTypeType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
        
        [JsonProperty("ThermalStorage:Ice:Detailed")]
        ThermalStorageIceDetailed = 8,
        
        [JsonProperty("ThermalStorage:Ice:Simple")]
        ThermalStorageIceSimple = 9,
    }
    
    public enum ComponentOperationTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum ComponentObjectTypeType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
        
        [JsonProperty("ThermalStorage:Ice:Detailed")]
        ThermalStorageIceDetailed = 8,
        
        [JsonProperty("ThermalStorage:Ice:Simple")]
        ThermalStorageIceSimple = 9,
    }
    
    public enum ComponentOperationTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum ComponentObjectTypeType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
        
        [JsonProperty("ThermalStorage:Ice:Detailed")]
        ThermalStorageIceDetailed = 8,
        
        [JsonProperty("ThermalStorage:Ice:Simple")]
        ThermalStorageIceSimple = 9,
    }
    
    public enum ComponentOperationTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum ComponentObjectTypeType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
        
        [JsonProperty("ThermalStorage:Ice:Detailed")]
        ThermalStorageIceDetailed = 8,
        
        [JsonProperty("ThermalStorage:Ice:Simple")]
        ThermalStorageIceSimple = 9,
    }
    
    public enum ComponentOperationTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum ComponentObjectTypeType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
        
        [JsonProperty("ThermalStorage:Ice:Detailed")]
        ThermalStorageIceDetailed = 8,
        
        [JsonProperty("ThermalStorage:Ice:Simple")]
        ThermalStorageIceSimple = 9,
    }
    
    public enum ComponentOperationTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum ComponentObjectTypeType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
        
        [JsonProperty("ThermalStorage:Ice:Detailed")]
        ThermalStorageIceDetailed = 8,
        
        [JsonProperty("ThermalStorage:Ice:Simple")]
        ThermalStorageIceSimple = 9,
    }
    
    public enum ComponentOperationTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum ComponentObjectTypeType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
        
        [JsonProperty("ThermalStorage:Ice:Detailed")]
        ThermalStorageIceDetailed = 8,
        
        [JsonProperty("ThermalStorage:Ice:Simple")]
        ThermalStorageIceSimple = 9,
    }
    
    public enum ComponentOperationTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum ComponentObjectTypeType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
        
        [JsonProperty("ThermalStorage:Ice:Detailed")]
        ThermalStorageIceDetailed = 8,
        
        [JsonProperty("ThermalStorage:Ice:Simple")]
        ThermalStorageIceSimple = 9,
    }
    
    public enum ComponentOperationTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum ComponentObjectTypeType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
        
        [JsonProperty("ThermalStorage:Ice:Detailed")]
        ThermalStorageIceDetailed = 8,
        
        [JsonProperty("ThermalStorage:Ice:Simple")]
        ThermalStorageIceSimple = 9,
    }
    
    public enum ComponentOperationTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    public enum ComponentObjectTypeType
    {
        
        [JsonProperty("Chiller:Absorption")]
        ChillerAbsorption = 0,
        
        [JsonProperty("Chiller:Absorption:Indirect")]
        ChillerAbsorptionIndirect = 1,
        
        [JsonProperty("Chiller:CombustionTurbine")]
        ChillerCombustionTurbine = 2,
        
        [JsonProperty("Chiller:ConstantCOP")]
        ChillerConstantCOP = 3,
        
        [JsonProperty("Chiller:Electric")]
        ChillerElectric = 4,
        
        [JsonProperty("Chiller:Electric:EIR")]
        ChillerElectricEIR = 5,
        
        [JsonProperty("Chiller:Electric:ReformulatedEIR")]
        ChillerElectricReformulatedEIR = 6,
        
        [JsonProperty("Chiller:EngineDriven")]
        ChillerEngineDriven = 7,
        
        [JsonProperty("ThermalStorage:Ice:Detailed")]
        ThermalStorageIceDetailed = 8,
        
        [JsonProperty("ThermalStorage:Ice:Simple")]
        ThermalStorageIceSimple = 9,
    }
    
    public enum ComponentOperationTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Dual")]
        Dual = 1,
        
        [JsonProperty("Heating")]
        Heating = 2,
    }
    
    [Description(@"Plant equipment operation scheme for outdoor dry-bulb temperature difference operation. Specifies one or more groups of equipment which are available to operate for successive ranges based the difference between a reference node temperature and the outdoor dry-bulb temperature.")]
    [JsonObject("PlantEquipmentOperation:OutdoorDryBulbDifference")]
    public class PlantEquipmentOperation_OutdoorDryBulbDifference
    {
        
[JsonProperty(@"")]
public System.String ReferenceTemperatureNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DryBulbTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
    }
    
    [Description(@"Plant equipment operation scheme for outdoor wet-bulb temperature difference operation. Specifies one or more groups of equipment which are available to operate for successive ranges based the difference between a reference node temperature and the outdoor wet-bulb temperature.")]
    [JsonObject("PlantEquipmentOperation:OutdoorWetBulbDifference")]
    public class PlantEquipmentOperation_OutdoorWetBulbDifference
    {
        
[JsonProperty(@"")]
public System.String ReferenceTemperatureNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WetBulbTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
    }
    
    [Description(@"Plant equipment operation scheme for outdoor dewpoint temperature difference operation. Specifies one or more groups of equipment which are available to operate for successive ranges based the difference between a reference node temperature and the outdoor dewpoint temperature.")]
    [JsonObject("PlantEquipmentOperation:OutdoorDewpointDifference")]
    public class PlantEquipmentOperation_OutdoorDewpointDifference
    {
        
[JsonProperty(@"")]
public System.String ReferenceTemperatureNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureDifferenceRangeLowerLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DewpointTemperatureDifferenceRangeUpperLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RangeEquipmentListName { get; set; } = "";
    }
    
    [Description(@"Operation schemes are listed in ""priority"" order. Note that each scheme must address the entire load and/or condition ranges for the simulation. The actual one selected for use will be the first that is ""Scheduled"" on. That is, if control scheme 1 is not ""on"" and control scheme 2 is -- then control scheme 2 is selected. Only plant equipment should be listed on a Control Scheme for this item.")]
    [JsonObject("PlantEquipmentOperationSchemes")]
    public class PlantEquipmentOperationSchemes
    {
        
[JsonProperty(@"")]
public YesNoDefault ControlSchemeObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControlSchemeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControlSchemeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControlSchemeObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControlSchemeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControlSchemeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControlSchemeObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControlSchemeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControlSchemeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControlSchemeObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControlSchemeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControlSchemeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControlSchemeObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControlSchemeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControlSchemeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControlSchemeObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControlSchemeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControlSchemeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControlSchemeObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControlSchemeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControlSchemeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControlSchemeObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControlSchemeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControlSchemeScheduleName { get; set; } = "";
    }
    
    public enum ControlSchemeObjectTypeType
    {
        
        [JsonProperty("PlantEquipmentOperation:ComponentSetpoint")]
        PlantEquipmentOperationComponentSetpoint = 0,
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 8,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 9,
        
        [JsonProperty("PlantEquipmentOperation:ThermalEnergyStorage")]
        PlantEquipmentOperationThermalEnergyStorage = 10,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 11,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 12,
    }
    
    public enum ControlSchemeObjectTypeType
    {
        
        [JsonProperty("PlantEquipmentOperation:ComponentSetpoint")]
        PlantEquipmentOperationComponentSetpoint = 0,
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 8,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 9,
        
        [JsonProperty("PlantEquipmentOperation:ThermalEnergyStorage")]
        PlantEquipmentOperationThermalEnergyStorage = 10,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 11,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 12,
    }
    
    public enum ControlSchemeObjectTypeType
    {
        
        [JsonProperty("PlantEquipmentOperation:ComponentSetpoint")]
        PlantEquipmentOperationComponentSetpoint = 0,
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 8,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 9,
        
        [JsonProperty("PlantEquipmentOperation:ThermalEnergyStorage")]
        PlantEquipmentOperationThermalEnergyStorage = 10,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 11,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 12,
    }
    
    public enum ControlSchemeObjectTypeType
    {
        
        [JsonProperty("PlantEquipmentOperation:ComponentSetpoint")]
        PlantEquipmentOperationComponentSetpoint = 0,
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 8,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 9,
        
        [JsonProperty("PlantEquipmentOperation:ThermalEnergyStorage")]
        PlantEquipmentOperationThermalEnergyStorage = 10,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 11,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 12,
    }
    
    public enum ControlSchemeObjectTypeType
    {
        
        [JsonProperty("PlantEquipmentOperation:ComponentSetpoint")]
        PlantEquipmentOperationComponentSetpoint = 0,
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 8,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 9,
        
        [JsonProperty("PlantEquipmentOperation:ThermalEnergyStorage")]
        PlantEquipmentOperationThermalEnergyStorage = 10,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 11,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 12,
    }
    
    public enum ControlSchemeObjectTypeType
    {
        
        [JsonProperty("PlantEquipmentOperation:ComponentSetpoint")]
        PlantEquipmentOperationComponentSetpoint = 0,
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 8,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 9,
        
        [JsonProperty("PlantEquipmentOperation:ThermalEnergyStorage")]
        PlantEquipmentOperationThermalEnergyStorage = 10,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 11,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 12,
    }
    
    public enum ControlSchemeObjectTypeType
    {
        
        [JsonProperty("PlantEquipmentOperation:ComponentSetpoint")]
        PlantEquipmentOperationComponentSetpoint = 0,
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 8,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 9,
        
        [JsonProperty("PlantEquipmentOperation:ThermalEnergyStorage")]
        PlantEquipmentOperationThermalEnergyStorage = 10,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 11,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 12,
    }
    
    public enum ControlSchemeObjectTypeType
    {
        
        [JsonProperty("PlantEquipmentOperation:ComponentSetpoint")]
        PlantEquipmentOperationComponentSetpoint = 0,
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 8,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 9,
        
        [JsonProperty("PlantEquipmentOperation:ThermalEnergyStorage")]
        PlantEquipmentOperationThermalEnergyStorage = 10,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 11,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 12,
    }
    
    [Description(@"Operation schemes are listed in ""priority"" order. Note that each scheme must address the entire load and/or condition ranges for the simulation. The actual one selected for use will be the first that is ""Scheduled"" on. That is, if control scheme 1 is not ""on"" and control scheme 2 is -- then control scheme 2 is selected. Only condenser equipment should be listed on a Control Scheme for this item.")]
    [JsonObject("CondenserEquipmentOperationSchemes")]
    public class CondenserEquipmentOperationSchemes
    {
        
[JsonProperty(@"")]
public YesNoDefault ControlSchemeObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControlSchemeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControlSchemeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControlSchemeObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControlSchemeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControlSchemeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControlSchemeObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControlSchemeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControlSchemeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControlSchemeObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControlSchemeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControlSchemeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControlSchemeObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControlSchemeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControlSchemeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControlSchemeObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControlSchemeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControlSchemeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControlSchemeObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControlSchemeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControlSchemeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControlSchemeObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ControlSchemeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControlSchemeScheduleName { get; set; } = "";
    }
    
    public enum ControlSchemeObjectTypeType
    {
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 0,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 8,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 9,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 10,
    }
    
    public enum ControlSchemeObjectTypeType
    {
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 0,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 8,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 9,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 10,
    }
    
    public enum ControlSchemeObjectTypeType
    {
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 0,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 8,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 9,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 10,
    }
    
    public enum ControlSchemeObjectTypeType
    {
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 0,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 8,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 9,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 10,
    }
    
    public enum ControlSchemeObjectTypeType
    {
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 0,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 8,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 9,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 10,
    }
    
    public enum ControlSchemeObjectTypeType
    {
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 0,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 8,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 9,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 10,
    }
    
    public enum ControlSchemeObjectTypeType
    {
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 0,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 8,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 9,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 10,
    }
    
    public enum ControlSchemeObjectTypeType
    {
        
        [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
        PlantEquipmentOperationCoolingLoad = 0,
        
        [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
        PlantEquipmentOperationHeatingLoad = 1,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
        PlantEquipmentOperationOutdoorDewpoint = 2,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
        PlantEquipmentOperationOutdoorDewpointDifference = 3,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
        PlantEquipmentOperationOutdoorDryBulb = 4,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
        PlantEquipmentOperationOutdoorDryBulbDifference = 5,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
        PlantEquipmentOperationOutdoorRelativeHumidity = 6,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
        PlantEquipmentOperationOutdoorWetBulb = 7,
        
        [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
        PlantEquipmentOperationOutdoorWetBulbDifference = 8,
        
        [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
        PlantEquipmentOperationUncontrolled = 9,
        
        [JsonProperty("PlantEquipmentOperation:UserDefined")]
        PlantEquipmentOperationUserDefined = 10,
    }
}
namespace EnergyPlus.PlantCondenserFlowControl
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Temperature-controlled diversion valve used to divert flow around one or more pla" +
        "nt components such as a hot water heater. It can only be used on one of two bran" +
        "ches between a Splitter and a Mixer.")]
    [JsonObject("TemperingValve")]
    public class TemperingValve
    {
        
[Description(@"Name of a Node")]
[JsonProperty(@"Name of a Node")]
public System.String InletNodeName { get; set; } = "";
        
[Description(@"Name of a Node")]
[JsonProperty(@"Name of a Node")]
public System.String OutletNodeName { get; set; } = "";
        
[Description(@"Name of a Node")]
[JsonProperty(@"Name of a Node")]
public System.String StreamSourceNodeName { get; set; } = "";
        
[Description(@"Name of a Node")]
[JsonProperty(@"Name of a Node")]
public System.String TemperatureSetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PumpOutletNodeName { get; set; } = "";
    }
}
namespace EnergyPlus.PlantCondenserLoops
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Defines a central plant loop.")]
    [JsonObject("PlantLoop")]
    public class PlantLoop
    {
        
[JsonProperty(@"")]
public YesNoDefault FluidType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Water");
        
[Description(@"This field is only required when Fluid Type is UserDefinedFluidType")]
[JsonProperty(@"This field is only required when Fluid Type is UserDefinedFluidType")]
public System.String UserDefinedFluidType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantEquipmentOperationSchemeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LoopTemperatureSetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MaximumLoopTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumLoopTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.String MaximumLoopFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumLoopFlowRate { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String PlantLoopVolume { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.String PlantSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantSideOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantSideBranchListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantSideConnectorListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DemandSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DemandSideOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DemandSideBranchListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DemandSideConnectorListName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault LoadDistributionScheme { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SequentialLoad");
        
[JsonProperty(@"")]
public System.String AvailabilityManagerListName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault PlantLoopDemandCalculationScheme { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SingleSetpoint");
        
[Description(@"Specifies a primary-secondary loop configuration. The plant side is the primary loop, and the demand side is the secondary loop. A secondary supply pump is required on the demand side. None = Primary-only, no secondary simulation CommonPipe = Primary-secondary with no temperature control at primary-secondary interface TwoWayCommonPipe = Primary-secondary with control of secondary supply temperature or primary return temperature (requires a setpoint be placed on the plant side or demand side inlet node).")]
[JsonProperty(@"Specifies a primary-secondary loop configuration. The plant side is the primary loop, and the demand side is the secondary loop. A secondary supply pump is required on the demand side. None = Primary-only, no secondary simulation CommonPipe = Primary-secondary with no temperature control at primary-secondary interface TwoWayCommonPipe = Primary-secondary with control of secondary supply temperature or primary return temperature (requires a setpoint be placed on the plant side or demand side inlet node).")]
public YesNoDefault CommonPipeSimulation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[JsonProperty(@"")]
public YesNoDefault PressureSimulationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"This field is only used to autocalulate the Plant Loop Volume. Loop Volume = Loop Circulation Time * Maximum Loop Flow Rate")]
[JsonProperty(@"This field is only used to autocalulate the Plant Loop Volume. Loop Volume = Loop Circulation Time * Maximum Loop Flow Rate")]
public System.Single LoopCirculationTime { get; set; } = 2;
    }
    
    public enum FluidTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Steam")]
        Steam = 1,
        
        [JsonProperty("UserDefinedFluidType")]
        UserDefinedFluidType = 2,
        
        [JsonProperty("Water")]
        Water = 3,
    }
    
    public enum LoadDistributionSchemeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Optimal")]
        Optimal = 1,
        
        [JsonProperty("SequentialLoad")]
        SequentialLoad = 2,
        
        [JsonProperty("SequentialUniformPLR")]
        SequentialUniformPLR = 3,
        
        [JsonProperty("UniformLoad")]
        UniformLoad = 4,
        
        [JsonProperty("UniformPLR")]
        UniformPLR = 5,
    }
    
    public enum PlantLoopDemandCalculationSchemeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DualSetpointDeadband")]
        DualSetpointDeadband = 1,
        
        [JsonProperty("SingleSetpoint")]
        SingleSetpoint = 2,
    }
    
    public enum CommonPipeSimulationType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CommonPipe")]
        CommonPipe = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("TwoWayCommonPipe")]
        TwoWayCommonPipe = 3,
    }
    
    public enum PressureSimulationTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LoopFlowCorrection")]
        LoopFlowCorrection = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("PumpPowerCorrection")]
        PumpPowerCorrection = 3,
    }
    
    [Description("Defines a central plant condenser loop. CondenserLoop and PlantLoop are nearly id" +
        "entical except some components and operation schemes are applicable to only one " +
        "loop type or the other.")]
    [JsonObject("CondenserLoop")]
    public class CondenserLoop
    {
        
[JsonProperty(@"")]
public YesNoDefault FluidType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Water");
        
[Description(@"This field is only required when Fluid Type is UserDefinedFluidType")]
[JsonProperty(@"This field is only required when Fluid Type is UserDefinedFluidType")]
public System.String UserDefinedFluidType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserEquipmentOperationSchemeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserLoopTemperatureSetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MaximumLoopTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumLoopTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.String MaximumLoopFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumLoopFlowRate { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String CondenserLoopVolume { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.String CondenserSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserSideOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserSideBranchListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserSideConnectorListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DemandSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DemandSideOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserDemandSideBranchListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CondenserDemandSideConnectorListName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault LoadDistributionScheme { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SequentialLoad");
        
[JsonProperty(@"")]
public YesNoDefault PressureSimulationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"This field is only used to autocalulate the Condenser Loop Volume. Loop Volume = Loop Circulation Time * Maximum Loop Flow Rate")]
[JsonProperty(@"This field is only used to autocalulate the Condenser Loop Volume. Loop Volume = Loop Circulation Time * Maximum Loop Flow Rate")]
public System.Single LoopCirculationTime { get; set; } = 2;
    }
    
    public enum FluidTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("UserDefinedFluidType")]
        UserDefinedFluidType = 1,
        
        [JsonProperty("Water")]
        Water = 2,
    }
    
    public enum LoadDistributionSchemeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Optimal")]
        Optimal = 1,
        
        [JsonProperty("SequentialLoad")]
        SequentialLoad = 2,
        
        [JsonProperty("SequentialUniformPLR")]
        SequentialUniformPLR = 3,
        
        [JsonProperty("UniformLoad")]
        UniformLoad = 4,
        
        [JsonProperty("UniformPLR")]
        UniformPLR = 5,
    }
    
    public enum PressureSimulationTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LoopFlowCorrection")]
        LoopFlowCorrection = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("PumpPowerCorrection")]
        PumpPowerCorrection = 3,
    }
}
namespace EnergyPlus.Pumps
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("This pump model is described in the ASHRAE secondary HVAC toolkit.")]
    [JsonObject("Pump:VariableSpeed")]
    public class Pump_VariableSpeed
    {
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DesignMaximumFlowRate { get; set; } = "";
        
[Description(@"default head is 60 feet")]
[JsonProperty(@"default head is 60 feet")]
public System.Single DesignPumpHead { get; set; } = 179352;
        
[Description(@"When autosized the type of scaling factor is chosen in the input field Design Power Sizing Method")]
[JsonProperty(@"When autosized the type of scaling factor is chosen in the input field Design Power Sizing Method")]
public System.String DesignPowerConsumption { get; set; } = "";
        
[Description(@"This is the motor efficiency only. When the Design Power Consumption is autosized using PowerPerFlowPerPressure, the Design Shaft Power per Unit Flow Rate per Unit Head is used in addition to the motor efficiency.")]
[JsonProperty(@"This is the motor efficiency only. When the Design Power Consumption is autosized using PowerPerFlowPerPressure, the Design Shaft Power per Unit Flow Rate per Unit Head is used in addition to the motor efficiency.")]
public System.Single MotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single FractionOfMotorInefficienciesToFluidStream { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single CoefficientOfThePartLoadPerformanceCurve { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single CoefficientOfThePartLoadPerformanceCurve { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single CoefficientOfThePartLoadPerformanceCurve { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single CoefficientOfThePartLoadPerformanceCurve { get; set; } = 0;
        
[Description(@"When autosized the scaling factor is the input field Design Minimum Flow Rate Fraction")]
[JsonProperty(@"When autosized the scaling factor is the input field Design Minimum Flow Rate Fraction")]
public System.String DesignMinimumFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public YesNoDefault PumpControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Continuous");
        
[Description(@"Modifies the rated flow rate of the pump on a time basis. Default is that the pump is on and runs according to its other operational requirements specified above. The schedule is for special pump operations.")]
[JsonProperty(@"Modifies the rated flow rate of the pump on a time basis. Default is that the pump is on and runs according to its other operational requirements specified above. The schedule is for special pump operations.")]
public System.String PumpFlowRateScheduleName { get; set; } = "";
        
[Description(@"This references any single independent variable polynomial curve in order to do pressure vs. flow calculations for this pump. The available types are then: Linear, Quadratic, Cubic, and Quartic The non-dimensional pump pressure relationship is of the following form: (psi = C4*phi^4 + C3*phi^3 + C2*phi^2 + C1*phi + C0) Where the non-dimensional variables are defined as: delP = rho * ((N/60)^2) * (D^2) * psi mdot = rho * (N/60) * (D^3) * phi")]
[JsonProperty(@"This references any single independent variable polynomial curve in order to do pressure vs. flow calculations for this pump. The available types are then: Linear, Quadratic, Cubic, and Quartic The non-dimensional pump pressure relationship is of the following form: (psi = C4*phi^4 + C3*phi^3 + C2*phi^2 + C1*phi + C0) Where the non-dimensional variables are defined as: delP = rho * ((N/60)^2) * (D^2) * psi mdot = rho * (N/60) * (D^3) * phi")]
public System.String PumpCurveName { get; set; } = "";
        
[Description(@""D" in above expression in field A6")]
[JsonProperty(@""D" in above expression in field A6")]
public System.Single ImpellerDiameter { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault VfdControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Modifies the rpm of the pump on a time basis. Default is that the pump is on and runs according to its other operational requirements specified above. The schedule is for special pump operations.")]
[JsonProperty(@"Modifies the rpm of the pump on a time basis. Default is that the pump is on and runs according to its other operational requirements specified above. The schedule is for special pump operations.")]
public System.String PumpRpmScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MinimumPressureSchedule { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumPressureSchedule { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MinimumRpmSchedule { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumRpmSchedule { get; set; } = "";
        
[Description(@"optional, if used pump losses transfered to zone as internal gains")]
[JsonProperty(@"optional, if used pump losses transfered to zone as internal gains")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"optional. If zone identified in previous field then this determines the split between convection and radiation for the skin losses")]
[JsonProperty(@"optional. If zone identified in previous field then this determines the split between convection and radiation for the skin losses")]
public System.Single SkinLossRadiativeFraction { get; set; } = ;
        
[Description(@"Used to indicate which sizing factor is used to calculate Design Power Consumption. PowerPerFlow indicates that Design Electric Power per Unit Flow Rate is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * scaling factor PowerPerFlowPerPressure indicates that Design Shaft Power per Unit Flow Rate per Unit Head is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * Design Pump Head * scaling factor / Motor Efficiency")]
[JsonProperty(@"Used to indicate which sizing factor is used to calculate Design Power Consumption. PowerPerFlow indicates that Design Electric Power per Unit Flow Rate is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * scaling factor PowerPerFlowPerPressure indicates that Design Shaft Power per Unit Flow Rate per Unit Head is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * Design Pump Head * scaling factor / Motor Efficiency")]
public YesNoDefault DesignPowerSizingMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "PowerPerFlowPerPressure");
        
[Description(@"Used to size Design Power Consumption from design flow rate")]
[JsonProperty(@"Used to size Design Power Consumption from design flow rate")]
public System.Single DesignElectricPowerPerUnitFlowRate { get; set; } = 348701.1;
        
[Description(@"Used to size Design Power Consumption from design flow rate for head and motor efficiency")]
[JsonProperty(@"Used to size Design Power Consumption from design flow rate for head and motor efficiency")]
public System.Single DesignShaftPowerPerUnitFlowRatePerUnitHead { get; set; } = 1.282051282;
        
[Description(@"Used to size Design Minimum Flow Rate")]
[JsonProperty(@"Used to size Design Minimum Flow Rate")]
public System.Single DesignMinimumFlowRateFraction { get; set; } = 0;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum PumpControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Continuous")]
        Continuous = 1,
        
        [JsonProperty("Intermittent")]
        Intermittent = 2,
    }
    
    public enum VfdControlTypeType
    {
        
        [JsonProperty("ManualControl")]
        ManualControl = 0,
        
        [JsonProperty("PressureSetpointControl")]
        PressureSetpointControl = 1,
    }
    
    public enum DesignPowerSizingMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("PowerPerFlow")]
        PowerPerFlow = 1,
        
        [JsonProperty("PowerPerFlowPerPressure")]
        PowerPerFlowPerPressure = 2,
    }
    
    [Description("This pump model is described in the ASHRAE secondary HVAC toolkit.")]
    [JsonObject("Pump:ConstantSpeed")]
    public class Pump_ConstantSpeed
    {
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DesignFlowRate { get; set; } = "";
        
[Description(@"default head is 60 feet")]
[JsonProperty(@"default head is 60 feet")]
public System.Single DesignPumpHead { get; set; } = 179352;
        
[Description(@"When autosized the type of scaling factor is chosen in the input field Design Power Sizing Method")]
[JsonProperty(@"When autosized the type of scaling factor is chosen in the input field Design Power Sizing Method")]
public System.String DesignPowerConsumption { get; set; } = "";
        
[Description(@"This is the motor efficiency only. When the Design Power Consumption is autosized using PowerPerFlowPerPressure, the Design Shaft Power per Unit Flow Rate per Unit Head is used in addition to the motor efficiency.")]
[JsonProperty(@"This is the motor efficiency only. When the Design Power Consumption is autosized using PowerPerFlowPerPressure, the Design Shaft Power per Unit Flow Rate per Unit Head is used in addition to the motor efficiency.")]
public System.Single MotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single FractionOfMotorInefficienciesToFluidStream { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault PumpControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Continuous");
        
[Description(@"Modifies the rated flow rate of the pump on a time basis. Default is that the pump is on and runs according to its other operational requirements specified above. The schedule is for special pump operations.")]
[JsonProperty(@"Modifies the rated flow rate of the pump on a time basis. Default is that the pump is on and runs according to its other operational requirements specified above. The schedule is for special pump operations.")]
public System.String PumpFlowRateScheduleName { get; set; } = "";
        
[Description(@"This references any single independent variable polynomial curve in order to do pressure vs. flow calculations for this pump. The available types are then: Linear, Quadratic, Cubic, and Quartic The non-dimensional pump pressure relationship is of the following form: (psi = C4*phi^4 + C3*phi^3 + C2*phi^2 + C1*phi + C0) Where the non-dimensional variables are defined as: delP = rho * ((N/60)^2) * (D^2) * psi mdot = rho * (N/60) * (D^3) * phi")]
[JsonProperty(@"This references any single independent variable polynomial curve in order to do pressure vs. flow calculations for this pump. The available types are then: Linear, Quadratic, Cubic, and Quartic The non-dimensional pump pressure relationship is of the following form: (psi = C4*phi^4 + C3*phi^3 + C2*phi^2 + C1*phi + C0) Where the non-dimensional variables are defined as: delP = rho * ((N/60)^2) * (D^2) * psi mdot = rho * (N/60) * (D^3) * phi")]
public System.String PumpCurveName { get; set; } = "";
        
[Description(@""D" in above expression in field A6")]
[JsonProperty(@""D" in above expression in field A6")]
public System.Single ImpellerDiameter { get; set; } = ;
        
[Description(@""N" in above expression in field A6")]
[JsonProperty(@""N" in above expression in field A6")]
public System.Single RotationalSpeed { get; set; } = ;
        
[Description(@"optional, if used pump losses transfered to zone as internal gains")]
[JsonProperty(@"optional, if used pump losses transfered to zone as internal gains")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"optional. If zone identified in previous field then this determines the split between convection and radiation for the skin losses")]
[JsonProperty(@"optional. If zone identified in previous field then this determines the split between convection and radiation for the skin losses")]
public System.Single SkinLossRadiativeFraction { get; set; } = ;
        
[Description(@"Used to indicate which sizing factor is used to calculate Design Power Consumption. PowerPerFlow indicates that Design Electric Power per Unit Flow Rate is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * scaling factor PowerPerFlowPerPressure indicates that Design Shaft Power per Unit Flow Rate per Unit Head is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * Design Pump Head * scaling factor / Motor Efficiency")]
[JsonProperty(@"Used to indicate which sizing factor is used to calculate Design Power Consumption. PowerPerFlow indicates that Design Electric Power per Unit Flow Rate is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * scaling factor PowerPerFlowPerPressure indicates that Design Shaft Power per Unit Flow Rate per Unit Head is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * Design Pump Head * scaling factor / Motor Efficiency")]
public YesNoDefault DesignPowerSizingMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "PowerPerFlowPerPressure");
        
[Description(@"Used to size Design Power Consumption from design flow rate")]
[JsonProperty(@"Used to size Design Power Consumption from design flow rate")]
public System.Single DesignElectricPowerPerUnitFlowRate { get; set; } = 348701.1;
        
[Description(@"Used to size Design Power Consumption from design flow rate for head and motor efficiency")]
[JsonProperty(@"Used to size Design Power Consumption from design flow rate for head and motor efficiency")]
public System.Single DesignShaftPowerPerUnitFlowRatePerUnitHead { get; set; } = 1.282051282;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum PumpControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Continuous")]
        Continuous = 1,
        
        [JsonProperty("Intermittent")]
        Intermittent = 2,
    }
    
    public enum DesignPowerSizingMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("PowerPerFlow")]
        PowerPerFlow = 1,
        
        [JsonProperty("PowerPerFlowPerPressure")]
        PowerPerFlowPerPressure = 2,
    }
    
    [Description("This pump model is described in the ASHRAE secondary HVAC toolkit. Variable Speed" +
        " Condensate pump for Steam Systems")]
    [JsonObject("Pump:VariableSpeed:Condensate")]
    public class Pump_VariableSpeed_Condensate
    {
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[Description(@"this is the volume of steam before condensation, the volume of condensate is much lower and calculated from steam density")]
[JsonProperty(@"this is the volume of steam before condensation, the volume of condensate is much lower and calculated from steam density")]
public System.String DesignSteamVolumeFlowRate { get; set; } = "";
        
[Description(@"default head is 60 feet")]
[JsonProperty(@"default head is 60 feet")]
public System.Single DesignPumpHead { get; set; } = 179352;
        
[Description(@"When autosized the type of scaling factor is chosen in the input field Design Power Sizing Method")]
[JsonProperty(@"When autosized the type of scaling factor is chosen in the input field Design Power Sizing Method")]
public System.String DesignPowerConsumption { get; set; } = "";
        
[Description(@"This is the motor efficiency only. When the Design Power Consumption is autosized using PowerPerFlowPerPressure, the Design Shaft Power per Unit Flow Rate per Unit Head is used in addition to the motor efficiency.")]
[JsonProperty(@"This is the motor efficiency only. When the Design Power Consumption is autosized using PowerPerFlowPerPressure, the Design Shaft Power per Unit Flow Rate per Unit Head is used in addition to the motor efficiency.")]
public System.Single MotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single FractionOfMotorInefficienciesToFluidStream { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single CoefficientOfThePartLoadPerformanceCurve { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single CoefficientOfThePartLoadPerformanceCurve { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single CoefficientOfThePartLoadPerformanceCurve { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single CoefficientOfThePartLoadPerformanceCurve { get; set; } = 0;
        
[Description(@"Modifies the rated flow rate of the pump on a time basis. Default is that the pump is on and runs according to its other operational requirements specified above. The schedule is for special pump operations.")]
[JsonProperty(@"Modifies the rated flow rate of the pump on a time basis. Default is that the pump is on and runs according to its other operational requirements specified above. The schedule is for special pump operations.")]
public System.String PumpFlowRateScheduleName { get; set; } = "";
        
[Description(@"optional, if used pump losses transfered to zone as internal gains")]
[JsonProperty(@"optional, if used pump losses transfered to zone as internal gains")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"optional. If zone identified in previous field then this determines the split between convection and radiation for the skin losses")]
[JsonProperty(@"optional. If zone identified in previous field then this determines the split between convection and radiation for the skin losses")]
public System.Single SkinLossRadiativeFraction { get; set; } = ;
        
[Description(@"Used to indicate which sizing factor is used to calculate Design Power Consumption. PowerPerFlow indicates that Design Electric Power per Unit Flow Rate is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * scaling factor PowerPerFlowPerPressure indicates that Design Shaft Power per Unit Flow Rate per Unit Head is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * Design Pump Head * scaling factor / Motor Efficiency")]
[JsonProperty(@"Used to indicate which sizing factor is used to calculate Design Power Consumption. PowerPerFlow indicates that Design Electric Power per Unit Flow Rate is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * scaling factor PowerPerFlowPerPressure indicates that Design Shaft Power per Unit Flow Rate per Unit Head is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * Design Pump Head * scaling factor / Motor Efficiency")]
public YesNoDefault DesignPowerSizingMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "PowerPerFlowPerPressure");
        
[Description(@"Used to size Design Power Consumption from design flow rate")]
[JsonProperty(@"Used to size Design Power Consumption from design flow rate")]
public System.Single DesignElectricPowerPerUnitFlowRate { get; set; } = 348701.1;
        
[Description(@"Used to size Design Power Consumption from design flow rate for head and motor efficiency")]
[JsonProperty(@"Used to size Design Power Consumption from design flow rate for head and motor efficiency")]
public System.Single DesignShaftPowerPerUnitFlowRatePerUnitHead { get; set; } = 1.282051282;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum DesignPowerSizingMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("PowerPerFlow")]
        PowerPerFlow = 1,
        
        [JsonProperty("PowerPerFlowPerPressure")]
        PowerPerFlowPerPressure = 2,
    }
    
    [Description("This Headered pump object describes a pump bank with more than 1 pump in parallel" +
        "")]
    [JsonObject("HeaderedPumps:ConstantSpeed")]
    public class HeaderedPumps_ConstantSpeed
    {
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[Description(@"If the field is not autosized set to the flow rate to the total flow when all pumps are running at full load")]
[JsonProperty(@"If the field is not autosized set to the flow rate to the total flow when all pumps are running at full load")]
public System.String TotalDesignFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfPumpsInBank { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault FlowSequencingControlScheme { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Sequential");
        
[Description(@"default head is 60 feet")]
[JsonProperty(@"default head is 60 feet")]
public System.Single DesignPumpHead { get; set; } = 179352;
        
[Description(@"If the field is not autosized set to the power consumed by the pump bank when all the pumps are running at nominal flow When autosized the type of scaling factor is chosen in the input field Design Power Sizing Method")]
[JsonProperty(@"If the field is not autosized set to the power consumed by the pump bank when all the pumps are running at nominal flow When autosized the type of scaling factor is chosen in the input field Design Power Sizing Method")]
public System.String DesignPowerConsumption { get; set; } = "";
        
[Description(@"This is the motor efficiency only. When the Design Power Consumption is autosized using PowerPerFlowPerPressure, the Design Shaft Power per Unit Flow Rate per Unit Head is used in addition to the motor efficiency.")]
[JsonProperty(@"This is the motor efficiency only. When the Design Power Consumption is autosized using PowerPerFlowPerPressure, the Design Shaft Power per Unit Flow Rate per Unit Head is used in addition to the motor efficiency.")]
public System.Single MotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single FractionOfMotorInefficienciesToFluidStream { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault PumpControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Continuous");
        
[Description(@"Modifies the rated flow rate of the pump on a time basis. Default is that the pump is on and runs according to its other operational requirements specified above. The schedule is for special pump operations.")]
[JsonProperty(@"Modifies the rated flow rate of the pump on a time basis. Default is that the pump is on and runs according to its other operational requirements specified above. The schedule is for special pump operations.")]
public System.String PumpFlowRateScheduleName { get; set; } = "";
        
[Description(@"optional, if used pump losses transfered to zone as internal gains")]
[JsonProperty(@"optional, if used pump losses transfered to zone as internal gains")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"optional. If zone identified in previous field then this determines the split between convection and radiation for the skin losses")]
[JsonProperty(@"optional. If zone identified in previous field then this determines the split between convection and radiation for the skin losses")]
public System.Single SkinLossRadiativeFraction { get; set; } = ;
        
[Description(@"Used to indicate which sizing factor is used to calculate Design Power Consumption. PowerPerFlow indicates that Design Electric Power per Unit Flow Rate is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * scaling factor PowerPerFlowPerPressure indicates that Design Shaft Power per Unit Flow Rate per Unit Head is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * Design Pump Head * scaling factor / Motor Efficiency")]
[JsonProperty(@"Used to indicate which sizing factor is used to calculate Design Power Consumption. PowerPerFlow indicates that Design Electric Power per Unit Flow Rate is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * scaling factor PowerPerFlowPerPressure indicates that Design Shaft Power per Unit Flow Rate per Unit Head is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * Design Pump Head * scaling factor / Motor Efficiency")]
public YesNoDefault DesignPowerSizingMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "PowerPerFlowPerPressure");
        
[Description(@"Used to size Design Power Consumption from design flow rate")]
[JsonProperty(@"Used to size Design Power Consumption from design flow rate")]
public System.Single DesignElectricPowerPerUnitFlowRate { get; set; } = 348701.1;
        
[Description(@"Used to size Design Power Consumption from design flow rate for head and motor efficiency")]
[JsonProperty(@"Used to size Design Power Consumption from design flow rate for head and motor efficiency")]
public System.Single DesignShaftPowerPerUnitFlowRatePerUnitHead { get; set; } = 1.282051282;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum FlowSequencingControlSchemeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Sequential")]
        Sequential = 1,
    }
    
    public enum PumpControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Continuous")]
        Continuous = 1,
        
        [JsonProperty("Intermittent")]
        Intermittent = 2,
    }
    
    public enum DesignPowerSizingMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("PowerPerFlow")]
        PowerPerFlow = 1,
        
        [JsonProperty("PowerPerFlowPerPressure")]
        PowerPerFlowPerPressure = 2,
    }
    
    [Description("This Headered pump object describes a pump bank with more than 1 pump in parallel" +
        "")]
    [JsonObject("HeaderedPumps:VariableSpeed")]
    public class HeaderedPumps_VariableSpeed
    {
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[Description(@"If the field is not autosized set to the flow rate to the total flow when all pumps are running at full load")]
[JsonProperty(@"If the field is not autosized set to the flow rate to the total flow when all pumps are running at full load")]
public System.String TotalDesignFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfPumpsInBank { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault FlowSequencingControlScheme { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Sequential");
        
[Description(@"default head is 60 feet")]
[JsonProperty(@"default head is 60 feet")]
public System.Single DesignPumpHead { get; set; } = 179352;
        
[Description(@"If the field is not autosized set to the power consumed by the pump bank when all the pumps are running at nominal flow When autosized the type of scaling factor is chosen in the input field Design Power Sizing Method")]
[JsonProperty(@"If the field is not autosized set to the power consumed by the pump bank when all the pumps are running at nominal flow When autosized the type of scaling factor is chosen in the input field Design Power Sizing Method")]
public System.String DesignPowerConsumption { get; set; } = "";
        
[Description(@"This is the motor efficiency only. When the Design Power Consumption is autosized using PowerPerFlowPerPressure, the Design Shaft Power per Unit Flow Rate per Unit Head is used in addition to the motor efficiency.")]
[JsonProperty(@"This is the motor efficiency only. When the Design Power Consumption is autosized using PowerPerFlowPerPressure, the Design Shaft Power per Unit Flow Rate per Unit Head is used in addition to the motor efficiency.")]
public System.Single MotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single FractionOfMotorInefficienciesToFluidStream { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single CoefficientOfThePartLoadPerformanceCurve { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single CoefficientOfThePartLoadPerformanceCurve { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single CoefficientOfThePartLoadPerformanceCurve { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single CoefficientOfThePartLoadPerformanceCurve { get; set; } = 0;
        
[Description(@"This value can be zero and will be defaulted to that if not specified.")]
[JsonProperty(@"This value can be zero and will be defaulted to that if not specified.")]
public System.Single MinimumFlowRateFraction { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault PumpControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Continuous");
        
[Description(@"Modifies the rated flow rate of the pump on a time basis. Default is that the pump is on and runs according to its other operational requirements specified above. The schedule is for special pump operations.")]
[JsonProperty(@"Modifies the rated flow rate of the pump on a time basis. Default is that the pump is on and runs according to its other operational requirements specified above. The schedule is for special pump operations.")]
public System.String PumpFlowRateScheduleName { get; set; } = "";
        
[Description(@"optional, if used pump losses transfered to zone as internal gains")]
[JsonProperty(@"optional, if used pump losses transfered to zone as internal gains")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"optional. If zone identified in previous field then this determines the split between convection and radiation for the skin losses")]
[JsonProperty(@"optional. If zone identified in previous field then this determines the split between convection and radiation for the skin losses")]
public System.Single SkinLossRadiativeFraction { get; set; } = ;
        
[Description(@"Used to indicate which sizing factor is used to calculate Design Power Consumption. PowerPerFlow indicates that Design Electric Power per Unit Flow Rate is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * scaling factor PowerPerFlowPerPressure indicates that Design Shaft Power per Unit Flow Rate per Unit Head is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * Design Pump Head * scaling factor / Motor Efficiency")]
[JsonProperty(@"Used to indicate which sizing factor is used to calculate Design Power Consumption. PowerPerFlow indicates that Design Electric Power per Unit Flow Rate is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * scaling factor PowerPerFlowPerPressure indicates that Design Shaft Power per Unit Flow Rate per Unit Head is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * Design Pump Head * scaling factor / Motor Efficiency")]
public YesNoDefault DesignPowerSizingMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "PowerPerFlowPerPressure");
        
[Description(@"Used to size Design Power Consumption from design flow rate")]
[JsonProperty(@"Used to size Design Power Consumption from design flow rate")]
public System.Single DesignElectricPowerPerUnitFlowRate { get; set; } = 348701.1;
        
[Description(@"Used to size Design Power Consumption from design flow rate for head and motor efficiency")]
[JsonProperty(@"Used to size Design Power Consumption from design flow rate for head and motor efficiency")]
public System.Single DesignShaftPowerPerUnitFlowRatePerUnitHead { get; set; } = 1.282051282;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum FlowSequencingControlSchemeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Sequential")]
        Sequential = 1,
    }
    
    public enum PumpControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Continuous")]
        Continuous = 1,
        
        [JsonProperty("Intermittent")]
        Intermittent = 2,
    }
    
    public enum DesignPowerSizingMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("PowerPerFlow")]
        PowerPerFlow = 1,
        
        [JsonProperty("PowerPerFlowPerPressure")]
        PowerPerFlowPerPressure = 2,
    }
}
namespace EnergyPlus.PythonPluginSystem
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Add directories to the search path for Python plugin modules The directory containing the EnergyPlus executable file is automatically added so that the Python interpreter can find the packaged up pyenergyplus Python package. By default, the current working directory and input file directory are also added to the search path. However, this object allows modifying this behavior. With this object, searching these directories can be disabled, and users can add supplemental search paths that point to libraries of plugin scripts.")]
    [JsonObject("PythonPlugin:SearchPaths")]
    public class PythonPlugin_SearchPaths
    {
        
[Description(@"Adding the current working directory allows Python to find plugin scripts in the current directory.")]
[JsonProperty(@"Adding the current working directory allows Python to find plugin scripts in the current directory.")]
public YesNoDefault AddCurrentWorkingDirectoryToSearchPath { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[Description(@"Enabling this will allow Python to find plugin scripts in the same directory as the running input file, even if that is not the current working directory.")]
[JsonProperty(@"Enabling this will allow Python to find plugin scripts in the same directory as the running input file, even if that is not the current working directory.")]
public YesNoDefault AddInputFileDirectoryToSearchPath { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[JsonProperty(@"")]
public System.String PySearchPaths { get; set; } = "";
    }
    
    [Description("A single plugin to be executed during the simulation, which can contain multiple " +
        "calling points for the same class instance by overriding multiple calling point " +
        "methods.")]
    [JsonObject("PythonPlugin:Instance")]
    public class PythonPlugin_Instance
    {
        
[Description(@"If this field is enabled, the plugin will be executed during warmup days, otherwise it will only be executed once warmup is completed and the actual run period begins")]
[JsonProperty(@"If this field is enabled, the plugin will be executed during warmup days, otherwise it will only be executed once warmup is completed and the actual run period begins")]
public YesNoDefault RunDuringWarmupDays { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"This is the name of the Python file, without a file extension. For "plugin_b.py", use just "plugin_b". The Python plugin file must be on the plugin system search path to be found during a simulation Additional directories can be added to the search path using the PythonPlugin:SearchPaths object")]
[JsonProperty(@"This is the name of the Python file, without a file extension. For "plugin_b.py", use just "plugin_b". The Python plugin file must be on the plugin system search path to be found during a simulation Additional directories can be added to the search path using the PythonPlugin:SearchPaths object")]
public System.String PythonModuleName { get; set; } = "";
        
[Description(@"This is the name of the class to be executed as a plugin during a simulation The class must inherit the EnergyPlusPlugin base class")]
[JsonProperty(@"This is the name of the class to be executed as a plugin during a simulation The class must inherit the EnergyPlusPlugin base class")]
public System.String PluginClassName { get; set; } = "";
    }
    
    [Description("This object defines name identifiers for custom Python Plugin variable data that " +
        "should be shared among all running Python Plugins.")]
    [JsonObject("PythonPlugin:Variables")]
    public class PythonPlugin_Variables
    {
        
[JsonProperty(@"")]
public System.String GlobalPyVars { get; set; } = "";
    }
    
    [Description("This object sets up a Python plugin trend variable from an Python plugin variable" +
        " A trend variable logs values across timesteps")]
    [JsonObject("PythonPlugin:TrendVariable")]
    public class PythonPlugin_TrendVariable
    {
        
[JsonProperty(@"")]
public System.String NameOfAPythonPluginVariable { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfTimestepsToBeLogged { get; set; } = ;
    }
    
    [Description("This object sets up an EnergyPlus output variable from a Python Plugin variable")]
    [JsonObject("PythonPlugin:OutputVariable")]
    public class PythonPlugin_OutputVariable
    {
        
[Description(@"Must be listed in the PythonPlugin:Variables object")]
[JsonProperty(@"Must be listed in the PythonPlugin:Variables object")]
public System.String PythonPluginVariableName { get; set; } = "";
        
[Description(@"If Metered is selected, the variable is automatically set to a "Summed" type, and the Resource Type, Group Type, and End-Use Subcategory fields on this object are required")]
[JsonProperty(@"If Metered is selected, the variable is automatically set to a "Summed" type, and the Resource Type, Group Type, and End-Use Subcategory fields on this object are required")]
public YesNoDefault TypeOfDataInVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault UpdateFrequency { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"optional but will result in dimensionless units for blank EnergyPlus units are standard SI units")]
[JsonProperty(@"optional but will result in dimensionless units for blank EnergyPlus units are standard SI units")]
public System.String Units { get; set; } = "";
        
[Description(@"This field is optional for regular output variables with "Type of Data in Variable" set to either Averaged or Summed. For Metered variables, this field is required. Choose the type of fuel, water, electricity, pollution or heat rate that should be metered.")]
[JsonProperty(@"This field is optional for regular output variables with "Type of Data in Variable" set to either Averaged or Summed. For Metered variables, this field is required. Choose the type of fuel, water, electricity, pollution or heat rate that should be metered.")]
public YesNoDefault ResourceType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"This field is optional for regular output variables with "Type of Data in Variable" set to either Averaged or Summed. For Metered variables, this field is required. Choose a general classification, building (internal services), HVAC (air systems), or plant (hydronic systems), or system")]
[JsonProperty(@"This field is optional for regular output variables with "Type of Data in Variable" set to either Averaged or Summed. For Metered variables, this field is required. Choose a general classification, building (internal services), HVAC (air systems), or plant (hydronic systems), or system")]
public YesNoDefault GroupType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"This field is optional for regular output variables with "Type of Data in Variable" set to either Averaged or Summed. For Metered variables, this field is required. Choose how the metered output should be classified for end-use category")]
[JsonProperty(@"This field is optional for regular output variables with "Type of Data in Variable" set to either Averaged or Summed. For Metered variables, this field is required. Choose how the metered output should be classified for end-use category")]
public YesNoDefault EndUseCategory { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"This field is always optional. For regular output variables with "Type of Data in Variable" set to either Averaged or Summed, this field is completely ignored. For Metered variables, this field is optional, but allows custom categorization of the end-uses in the ABUPS End Uses by Subcategory table. Enter a user-defined subcategory for this metered output")]
[JsonProperty(@"This field is always optional. For regular output variables with "Type of Data in Variable" set to either Averaged or Summed, this field is completely ignored. For Metered variables, this field is optional, but allows custom categorization of the end-uses in the ABUPS End Uses by Subcategory table. Enter a user-defined subcategory for this metered output")]
public System.String EndUseSubcategory { get; set; } = "";
    }
    
    public enum TypeOfDataInVariableType
    {
        
        [JsonProperty("Averaged")]
        Averaged = 0,
        
        [JsonProperty("Metered")]
        Metered = 1,
        
        [JsonProperty("Summed")]
        Summed = 2,
    }
    
    public enum UpdateFrequencyType
    {
        
        [JsonProperty("SystemTimestep")]
        SystemTimestep = 0,
        
        [JsonProperty("ZoneTimestep")]
        ZoneTimestep = 1,
    }
    
    public enum ResourceTypeType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("CondensateWaterCollected")]
        CondensateWaterCollected = 1,
        
        [JsonProperty("Diesel")]
        Diesel = 2,
        
        [JsonProperty("DistrictCooling")]
        DistrictCooling = 3,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 4,
        
        [JsonProperty("Electricity")]
        Electricity = 5,
        
        [JsonProperty("ElectricityProducedOnSite")]
        ElectricityProducedOnSite = 6,
        
        [JsonProperty("EnergyTransfer")]
        EnergyTransfer = 7,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 8,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 9,
        
        [JsonProperty("Gasoline")]
        Gasoline = 10,
        
        [JsonProperty("MainsWaterSupply")]
        MainsWaterSupply = 11,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 12,
        
        [JsonProperty("OnSiteWaterProduced")]
        OnSiteWaterProduced = 13,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 14,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 15,
        
        [JsonProperty("Propane")]
        Propane = 16,
        
        [JsonProperty("RainWaterCollected")]
        RainWaterCollected = 17,
        
        [JsonProperty("SolarAirHeating")]
        SolarAirHeating = 18,
        
        [JsonProperty("SolarWaterHeating")]
        SolarWaterHeating = 19,
        
        [JsonProperty("Steam")]
        Steam = 20,
        
        [JsonProperty("WaterUse")]
        WaterUse = 21,
        
        [JsonProperty("WellWaterDrawn")]
        WellWaterDrawn = 22,
    }
    
    public enum GroupTypeType
    {
        
        [JsonProperty("Building")]
        Building = 0,
        
        [JsonProperty("HVAC")]
        HVAC = 1,
        
        [JsonProperty("Plant")]
        Plant = 2,
        
        [JsonProperty("System")]
        System = 3,
    }
    
    public enum EndUseCategoryType
    {
        
        [JsonProperty("Baseboard")]
        Baseboard = 0,
        
        [JsonProperty("Boilers")]
        Boilers = 1,
        
        [JsonProperty("Chillers")]
        Chillers = 2,
        
        [JsonProperty("Cooling")]
        Cooling = 3,
        
        [JsonProperty("CoolingCoils")]
        CoolingCoils = 4,
        
        [JsonProperty("ExteriorEquipment")]
        ExteriorEquipment = 5,
        
        [JsonProperty("ExteriorLights")]
        ExteriorLights = 6,
        
        [JsonProperty("Fans")]
        Fans = 7,
        
        [JsonProperty("HeatRecovery")]
        HeatRecovery = 8,
        
        [JsonProperty("HeatRecoveryForCooling")]
        HeatRecoveryForCooling = 9,
        
        [JsonProperty("HeatRecoveryForHeating")]
        HeatRecoveryForHeating = 10,
        
        [JsonProperty("HeatRejection")]
        HeatRejection = 11,
        
        [JsonProperty("Heating")]
        Heating = 12,
        
        [JsonProperty("HeatingCoils")]
        HeatingCoils = 13,
        
        [JsonProperty("Humidifier")]
        Humidifier = 14,
        
        [JsonProperty("InteriorEquipment")]
        InteriorEquipment = 15,
        
        [JsonProperty("InteriorLights")]
        InteriorLights = 16,
        
        [JsonProperty("OnSiteGeneration")]
        OnSiteGeneration = 17,
        
        [JsonProperty("Pumps")]
        Pumps = 18,
        
        [JsonProperty("Refrigeration")]
        Refrigeration = 19,
        
        [JsonProperty("WaterSystems")]
        WaterSystems = 20,
    }
}
namespace EnergyPlus.Refrigeration
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"The Refrigeration Case object works in conjunction with a compressor rack, a refrigeration system, or a secondary loop to simulate the performance of a refrigerated case system. The object calculates the energy use for lights, fans and anti-sweat heaters and accounts for the sensible and latent heat exchange with the surrounding environment (termed ""case credits"") which impacts the temperature and humidity in the zone where the case is located.")]
    [JsonObject("Refrigeration:Case")]
    public class Refrigeration_Case
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"This must be a controlled zone and appear in a ZoneHVAC:EquipmentConnections object.")]
[JsonProperty(@"This must be a controlled zone and appear in a ZoneHVAC:EquipmentConnections object.")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RatedAmbientTemperature { get; set; } = 23.9;
        
[JsonProperty(@"")]
public System.Single RatedAmbientRelativeHumidity { get; set; } = 55;
        
[JsonProperty(@"")]
public System.Single RatedTotalCoolingCapacityPerUnitLength { get; set; } = 1900;
        
[JsonProperty(@"")]
public System.Single RatedLatentHeatRatio { get; set; } = 0.3;
        
[JsonProperty(@"")]
public System.Single RatedRuntimeFraction { get; set; } = 0.85;
        
[JsonProperty(@"")]
public System.Single CaseLength { get; set; } = 3;
        
[JsonProperty(@"")]
public System.Single CaseOperatingTemperature { get; set; } = 1.1;
        
[JsonProperty(@"")]
public YesNoDefault LatentCaseCreditCurveType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "CaseTemperatureMethod");
        
[JsonProperty(@"")]
public System.String LatentCaseCreditCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single StandardCaseFanPowerPerUnitLength { get; set; } = 75;
        
[JsonProperty(@"")]
public System.Single OperatingCaseFanPowerPerUnitLength { get; set; } = 75;
        
[JsonProperty(@"")]
public System.Single StandardCaseLightingPowerPerUnitLength { get; set; } = 90;
        
[Description(@"default set equal to Standard Case Lighting Power per Unit Length")]
[JsonProperty(@"default set equal to Standard Case Lighting Power per Unit Length")]
public System.Single InstalledCaseLightingPowerPerUnitLength { get; set; } = ;
        
[JsonProperty(@"")]
public System.String CaseLightingScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single FractionOfLightingEnergyToCase { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single CaseAntiSweatHeaterPowerPerUnitLength { get; set; } = 0;
        
[Description(@"This field is only applicable to the Linear, Dewpoint Method, and Heat Balance Method anti-sweat heater control types")]
[JsonProperty(@"This field is only applicable to the Linear, Dewpoint Method, and Heat Balance Method anti-sweat heater control types")]
public System.Single MinimumAntiSweatHeaterPowerPerUnitLength { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault AntiSweatHeaterControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"This field is only applicable to Linear AS heater control type Zone relative humidity (%) where anti-sweat heater energy is zero")]
[JsonProperty(@"This field is only applicable to Linear AS heater control type Zone relative humidity (%) where anti-sweat heater energy is zero")]
public System.Single HumidityAtZeroAntiSweatHeaterEnergy { get; set; } = -10;
        
[Description(@"This field only applicable to Heat Balance Method AS heater control type Height must be greater than zero if Heat Balance Method AS heater control is selected")]
[JsonProperty(@"This field only applicable to Heat Balance Method AS heater control type Height must be greater than zero if Heat Balance Method AS heater control is selected")]
public System.Single CaseHeight { get; set; } = 1.5;
        
[JsonProperty(@"")]
public System.Single FractionOfAntiSweatHeaterEnergyToCase { get; set; } = 1;
        
[Description(@"Used to evaluate load on case as well as power or heat consumption")]
[JsonProperty(@"Used to evaluate load on case as well as power or heat consumption")]
public System.Single CaseDefrostPowerPerUnitLength { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault CaseDefrostType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "OffCycle");
        
[Description(@"A case defrost schedule name is required unless case defrost type = None")]
[JsonProperty(@"A case defrost schedule name is required unless case defrost type = None")]
public System.String CaseDefrostScheduleName { get; set; } = "";
        
[Description(@"If left blank, the defrost schedule will be used The start time for each defrost period in this drip-down schedule should coincide with the start time for each defrost period in the case defrost schedule (previous input field). The length of each defrost drip-down period must be greater than or equal to the corresponding defrost period specified in the case defrost schedule. This extra time allows the melted frost to drip from the coil before refrigeration is restarted.")]
[JsonProperty(@"If left blank, the defrost schedule will be used The start time for each defrost period in this drip-down schedule should coincide with the start time for each defrost period in the case defrost schedule (previous input field). The length of each defrost drip-down period must be greater than or equal to the corresponding defrost period specified in the case defrost schedule. This extra time allows the melted frost to drip from the coil before refrigeration is restarted.")]
public System.String CaseDefrostDripDownScheduleName { get; set; } = "";
        
[Description(@"Case Temperature, Relative Humidity, and Dewpoint Method are applicable to case defrost types with temperature termination only.")]
[JsonProperty(@"Case Temperature, Relative Humidity, and Dewpoint Method are applicable to case defrost types with temperature termination only.")]
public YesNoDefault DefrostEnergyCorrectionCurveType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Defrost Energy Correction Curve Name is applicable to case defrost types with temperature termination only.")]
[JsonProperty(@"Defrost Energy Correction Curve Name is applicable to case defrost types with temperature termination only.")]
public System.String DefrostEnergyCorrectionCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single UnderCaseHvacReturnAirFraction { get; set; } = 0;
        
[Description(@"Schedule values should be in units of Watts per unit case length (W/m) Leave this field blank if no restocking is to be modeled")]
[JsonProperty(@"Schedule values should be in units of Watts per unit case length (W/m) Leave this field blank if no restocking is to be modeled")]
public System.String RefrigeratedCaseRestockingScheduleName { get; set; } = "";
        
[Description(@"Schedule values should be from 0 to 1 Leave this field blank if no case credit fraction is to be applied")]
[JsonProperty(@"Schedule values should be from 0 to 1 Leave this field blank if no case credit fraction is to be applied")]
public System.String CaseCreditFractionScheduleName { get; set; } = "";
        
[Description(@"Required for detailed refrigeration system, not for compressor rack For a DX system, enter the saturated temperature for refrigerant pressure leaving case For a brine-cooled cooled (secondary system) case, enter the brine inlet temperature Default is 5 C less than case operating temperature")]
[JsonProperty(@"Required for detailed refrigeration system, not for compressor rack For a DX system, enter the saturated temperature for refrigerant pressure leaving case For a brine-cooled cooled (secondary system) case, enter the brine inlet temperature Default is 5 C less than case operating temperature")]
public System.Single DesignEvaporatorTemperatureOrBrineInletTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single AverageRefrigerantChargeInventory { get; set; } = 0;
        
[Description(@"Name of the return air node for this case. If left blank, defaults to the first return air node for this zone.")]
[JsonProperty(@"Name of the return air node for this case. If left blank, defaults to the first return air node for this zone.")]
public System.String UnderCaseHvacReturnAirNodeName { get; set; } = "";
    }
    
    public enum LatentCaseCreditCurveTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CaseTemperatureMethod")]
        CaseTemperatureMethod = 1,
        
        [JsonProperty("DewpointMethod")]
        DewpointMethod = 2,
        
        [JsonProperty("RelativeHumidityMethod")]
        RelativeHumidityMethod = 3,
    }
    
    public enum AntiSweatHeaterControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Constant")]
        Constant = 1,
        
        [JsonProperty("DewpointMethod")]
        DewpointMethod = 2,
        
        [JsonProperty("HeatBalanceMethod")]
        HeatBalanceMethod = 3,
        
        [JsonProperty("Linear")]
        Linear = 4,
        
        [JsonProperty("None")]
        None = 5,
    }
    
    public enum CaseDefrostTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("ElectricWithTemperatureTermination")]
        ElectricWithTemperatureTermination = 2,
        
        [JsonProperty("HotFluid")]
        HotFluid = 3,
        
        [JsonProperty("HotFluidWithTemperatureTermination")]
        HotFluidWithTemperatureTermination = 4,
        
        [JsonProperty("HotGas")]
        HotGas = 5,
        
        [JsonProperty("HotGasWithTemperatureTermination")]
        HotGasWithTemperatureTermination = 6,
        
        [JsonProperty("None")]
        None = 7,
        
        [JsonProperty("OffCycle")]
        OffCycle = 8,
    }
    
    public enum DefrostEnergyCorrectionCurveTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CaseTemperatureMethod")]
        CaseTemperatureMethod = 1,
        
        [JsonProperty("DewpointMethod")]
        DewpointMethod = 2,
        
        [JsonProperty("None")]
        None = 3,
        
        [JsonProperty("RelativeHumidityMethod")]
        RelativeHumidityMethod = 4,
    }
    
    [Description(@"Works in conjunction with the refrigeration case and walk-in objects to simulate the performance of a refrigerated case system. This object models the electric consumption of the rack compressors and the condenser fans. Heat can be rejected either outdoors or to a zone. Compressor rack waste heat can also be reclaimed for use by an optional air- or water-heating coil (Coil:Heating:Desuperheater and Coil:WaterHeating:Desuperheater).")]
    [JsonObject("Refrigeration:CompressorRack")]
    public class Refrigeration_CompressorRack
    {
        
[JsonProperty(@"")]
public YesNoDefault HeatRejectionLocation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Outdoors");
        
[Description(@"It is important that this COP correspond to the lowest saturated suction temperature needed to serve all refrigeration loads")]
[JsonProperty(@"It is important that this COP correspond to the lowest saturated suction temperature needed to serve all refrigeration loads")]
public System.Single DesignCompressorRackCop { get; set; } = 2;
        
[Description(@"It is important that this COP curve correspond to the lowest saturated suction temperature needed to serve all refrigeration loads")]
[JsonProperty(@"It is important that this COP curve correspond to the lowest saturated suction temperature needed to serve all refrigeration loads")]
public System.String CompressorRackCopFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Design power for condenser fan(s).")]
[JsonProperty(@"Design power for condenser fan(s).")]
public System.Single DesignCondenserFanPower { get; set; } = 250;
        
[JsonProperty(@"")]
public System.String CondenserFanPowerFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Applicable only when Heat Rejection Location is Outdoors.")]
[JsonProperty(@"Applicable only when Heat Rejection Location is Outdoors.")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AirCooled");
        
[JsonProperty(@"")]
public System.String WaterCooledCondenserInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterCooledCondenserOutletNodeName { get; set; } = "";
        
[Description(@"Applicable only when Condenser Type is WaterCooled.")]
[JsonProperty(@"Applicable only when Condenser Type is WaterCooled.")]
public YesNoDefault WaterCooledLoopFlowType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "VariableFlow");
        
[Description(@"Applicable only when loop Flow type is VariableFlow.")]
[JsonProperty(@"Applicable only when loop Flow type is VariableFlow.")]
public System.String WaterCooledCondenserOutletTemperatureScheduleName { get; set; } = "";
        
[Description(@"Applicable only when loop flow type is ConstantFlow.")]
[JsonProperty(@"Applicable only when loop flow type is ConstantFlow.")]
public System.Single WaterCooledCondenserDesignFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterCooledCondenserMaximumFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterCooledCondenserMaximumWaterOutletTemperature { get; set; } = 55;
        
[JsonProperty(@"")]
public System.Single WaterCooledCondenserMinimumWaterInletTemperature { get; set; } = 10;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 indicate that evaporative cooling of the condenser is available. This schedule allows the user to define seasonal shutdown/draining of the water cooling system in cold climate applications. For periods with schedule values of 0, the condenser operates as AirCooled.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 indicate that evaporative cooling of the condenser is available. This schedule allows the user to define seasonal shutdown/draining of the water cooling system in cold climate applications. For periods with schedule values of 0, the condenser operates as AirCooled.")]
public System.String EvaporativeCondenserAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Applicable only for Condenser Type = EvaporativlyCooled.")]
[JsonProperty(@"Applicable only for Condenser Type = EvaporativlyCooled.")]
public System.Single EvaporativeCondenserEffectiveness { get; set; } = 0.9;
        
[Description(@"Applicable only for Condenser Type = EvaporativelyCooled. Used to calculate evaporative condenser water use.")]
[JsonProperty(@"Applicable only for Condenser Type = EvaporativelyCooled. Used to calculate evaporative condenser water use.")]
public System.String EvaporativeCondenserAirFlowRate { get; set; } = (System.String)Autocalculate;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the evaporatively cooled condenser is available (field Evaporative Condenser Availability Schedule Name). For this situation, the heater heats the basin water when the outdoor air dry-bulb temperature falls below the setpoint temperature, but only when the condenser fans are off (i.e., no refrigerated case load).")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the evaporatively cooled condenser is available (field Evaporative Condenser Availability Schedule Name). For this situation, the heater heats the basin water when the outdoor air dry-bulb temperature falls below the setpoint temperature, but only when the condenser fans are off (i.e., no refrigerated case load).")]
public System.Single BasinHeaterCapacity { get; set; } = 200;
        
[Description(@"Enter the outdoor dry-bulb temperature at which the basin heater turns on.")]
[JsonProperty(@"Enter the outdoor dry-bulb temperature at which the basin heater turns on.")]
public System.Single BasinHeaterSetpointTemperature { get; set; } = 2;
        
[Description(@"Design recirc water pump power for Condenser Type = EvaporativelyCooled. Applicable only for Condenser Type = EvaporativelyCooled.")]
[JsonProperty(@"Design recirc water pump power for Condenser Type = EvaporativelyCooled. Applicable only for Condenser Type = EvaporativelyCooled.")]
public System.String DesignEvaporativeCondenserWaterPumpPower { get; set; } = (System.String)1000;
        
[Description(@"If blank, water supply is from Mains. Applicable only for Condenser Type = EvaporativelyCooled.")]
[JsonProperty(@"If blank, water supply is from Mains. Applicable only for Condenser Type = EvaporativelyCooled.")]
public System.String EvaporativeWaterSupplyTankName { get; set; } = "";
        
[Description(@"Applicable only when Heat Rejection Location is Outdoors and Condenser Type is not WaterCooled; otherwise, leave field blank. If field is left blank with Heat Rejection Location = Outdoors, then the model assumes that the Inlet Air conditions are the outdoor air conditions for the current timestep (e.g., no adjustment for height above ground).")]
[JsonProperty(@"Applicable only when Heat Rejection Location is Outdoors and Condenser Type is not WaterCooled; otherwise, leave field blank. If field is left blank with Heat Rejection Location = Outdoors, then the model assumes that the Inlet Air conditions are the outdoor air conditions for the current timestep (e.g., no adjustment for height above ground).")]
public System.String CondenserAirInletNodeName { get; set; } = "";
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
        
[Description(@"Enter the name of a Refrigeration:Case or Refrigeration:Walkin or Refrigeration:CaseAndWalkinList object.")]
[JsonProperty(@"Enter the name of a Refrigeration:Case or Refrigeration:Walkin or Refrigeration:CaseAndWalkinList object.")]
public System.String RefrigerationCaseNameOrWalkinNameOrCaseandwalkinlistName { get; set; } = "";
        
[Description(@"This must be a controlled zone and appear in a ZoneHVAC:EquipmentConnections object. Required only if walk-in[s] are connected to this rack AND the heat rejection location is "Zone"")]
[JsonProperty(@"This must be a controlled zone and appear in a ZoneHVAC:EquipmentConnections object. Required only if walk-in[s] are connected to this rack AND the heat rejection location is "Zone"")]
public System.String HeatRejectionZoneName { get; set; } = "";
    }
    
    public enum HeatRejectionLocationType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Outdoors")]
        Outdoors = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 3,
    }
    
    public enum WaterCooledLoopFlowTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("VariableFlow")]
        VariableFlow = 2,
    }
    
    [Description(@"Provides a list of all the refrigerated cases, walk in coolers, or air chillers cooled by a single refrigeration system. Note that the names of all cases, walk-ins ,air chillers, and CaseAndWalkInLists must be unique. That is, you cannot give a list the same name as one of list items. This list may contain a combination of case and walk-in names OR a list of air chiller names. Air chillers may not be included in any list that also includes cases or walk-ins.")]
    [JsonObject("Refrigeration:CaseAndWalkInList")]
    public class Refrigeration_CaseAndWalkInList
    {
        
[JsonProperty(@"")]
public System.String CasesAndWalkins { get; set; } = "";
    }
    
    [Description("Air cooled condenser for a refrigeration system (Refrigeration:System).")]
    [JsonObject("Refrigeration:Condenser:AirCooled")]
    public class Refrigeration_Condenser_AirCooled
    {
        
[Description(@"Rating as per ARI 460 Be sure the rating corresponds to the correct refrigerant HeatRejection(W)=C1 +C2(Condensing Temp - Entering Air Temp, deg C) Will be adjusted for elevation automatically")]
[JsonProperty(@"Rating as per ARI 460 Be sure the rating corresponds to the correct refrigerant HeatRejection(W)=C1 +C2(Condensing Temp - Entering Air Temp, deg C) Will be adjusted for elevation automatically")]
public System.String RatedEffectiveTotalHeatRejectionRateCurveName { get; set; } = "";
        
[Description(@"must correspond to rating given for total heat rejection effect")]
[JsonProperty(@"must correspond to rating given for total heat rejection effect")]
public System.Single RatedSubcoolingTemperatureDifference { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault CondenserFanSpeedControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Fixed");
        
[Description(@"Power for condenser fan(s) corresponding to rated total heat rejection effect.")]
[JsonProperty(@"Power for condenser fan(s) corresponding to rated total heat rejection effect.")]
public System.Single RatedFanPower { get; set; } = 250;
        
[Description(@"Minimum air flow fraction through condenser fan")]
[JsonProperty(@"Minimum air flow fraction through condenser fan")]
public System.Single MinimumFanAirFlowRatio { get; set; } = 0.2;
        
[Description(@"If field is left blank, then the model assumes that the inlet air conditions are the outdoor air conditions for the current timestep (e.g., no adjustment for height above ground). If the condenser rejects heat to a conditioned zone, enter the zone name here.")]
[JsonProperty(@"If field is left blank, then the model assumes that the inlet air conditions are the outdoor air conditions for the current timestep (e.g., no adjustment for height above ground). If the condenser rejects heat to a conditioned zone, enter the zone name here.")]
public System.String AirInletNodeNameOrZoneName { get; set; } = "";
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
        
[Description(@"optional input")]
[JsonProperty(@"optional input")]
public System.Single CondenserRefrigerantOperatingChargeInventory { get; set; } = 0;
        
[Description(@"optional input")]
[JsonProperty(@"optional input")]
public System.Single CondensateReceiverRefrigerantInventory { get; set; } = 0;
        
[Description(@"optional input")]
[JsonProperty(@"optional input")]
public System.Single CondensatePipingRefrigerantInventory { get; set; } = 0;
    }
    
    public enum CondenserFanSpeedControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Fixed")]
        Fixed = 1,
        
        [JsonProperty("FixedLinear")]
        FixedLinear = 2,
        
        [JsonProperty("TwoSpeed")]
        TwoSpeed = 3,
        
        [JsonProperty("VariableSpeed")]
        VariableSpeed = 4,
    }
    
    [Description("Evaporative-cooled condenser for a refrigeration system (Refrigeration:System).")]
    [JsonObject("Refrigeration:Condenser:EvaporativeCooled")]
    public class Refrigeration_Condenser_EvaporativeCooled
    {
        
[Description(@"Rating as per ARI 490 Be sure the rating corresponds to the correct refrigerant")]
[JsonProperty(@"Rating as per ARI 490 Be sure the rating corresponds to the correct refrigerant")]
public System.Single RatedEffectiveTotalHeatRejectionRate { get; set; } = ;
        
[Description(@"must correspond to rating given for total heat rejection effect")]
[JsonProperty(@"must correspond to rating given for total heat rejection effect")]
public System.Single RatedSubcoolingTemperatureDifference { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault FanSpeedControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Fixed");
        
[Description(@"Power for condenser fan(s) corresponding to rated total heat rejection effect.")]
[JsonProperty(@"Power for condenser fan(s) corresponding to rated total heat rejection effect.")]
public System.Single RatedFanPower { get; set; } = ;
        
[Description(@"Minimum air flow fraction through condenser fan")]
[JsonProperty(@"Minimum air flow fraction through condenser fan")]
public System.Single MinimumFanAirFlowRatio { get; set; } = 0.2;
        
[Description(@"A1 in delta T = A1 + A2(hrcf) + A3/(hrcf) + A4(Twb)")]
[JsonProperty(@"A1 in delta T = A1 + A2(hrcf) + A3/(hrcf) + A4(Twb)")]
public System.Single ApproachTemperatureConstantTerm { get; set; } = 6.63;
        
[Description(@"A2 in delta T = A1 + A2(hrcf) +A3/(hrcf) +A4(Twb)")]
[JsonProperty(@"A2 in delta T = A1 + A2(hrcf) +A3/(hrcf) +A4(Twb)")]
public System.Single ApproachTemperatureCoefficient { get; set; } = 0.468;
        
[Description(@"A3 in delta T = A1 + A2(hrcf) +A3/(hrcf) +A4(Twb)")]
[JsonProperty(@"A3 in delta T = A1 + A2(hrcf) +A3/(hrcf) +A4(Twb)")]
public System.Single ApproachTemperatureCoefficient { get; set; } = 17.93;
        
[Description(@"A4 in deltaT=A1 + A2(hrcf) +A3/(hrcf) +A4(Twb)")]
[JsonProperty(@"A4 in deltaT=A1 + A2(hrcf) +A3/(hrcf) +A4(Twb)")]
public System.Single ApproachTemperatureCoefficient { get; set; } = -0.322;
        
[Description(@"taken from manufacturer's Heat Rejection Capacity Factor Table")]
[JsonProperty(@"taken from manufacturer's Heat Rejection Capacity Factor Table")]
public System.Single MinimumCapacityFactor { get; set; } = 0.5;
        
[Description(@"taken from manufacturer's Heat Rejection Capacity Factor Table")]
[JsonProperty(@"taken from manufacturer's Heat Rejection Capacity Factor Table")]
public System.Single MaximumCapacityFactor { get; set; } = 5;
        
[Description(@"If field is left blank, then the model assumes that the inlet air conditions are the outdoor air conditions for the current timestep (e.g., no adjustment for height above ground).")]
[JsonProperty(@"If field is left blank, then the model assumes that the inlet air conditions are the outdoor air conditions for the current timestep (e.g., no adjustment for height above ground).")]
public System.String AirInletNodeName { get; set; } = "";
        
[Description(@"Used to calculate evaporative condenser water use and fan energy use.")]
[JsonProperty(@"Used to calculate evaporative condenser water use and fan energy use.")]
public System.String RatedAirFlowRate { get; set; } = (System.String)Autocalculate;
        
[Description(@"This field is only used for periods when the evap condenser is available (field Evaporative Condenser Availability Schedule). For this situation, the heater heats the basin water when the outdoor air dry-bulb temperature falls below the set point temperature, but only when the condenser fans are off (i.e., no refrigerated case load).")]
[JsonProperty(@"This field is only used for periods when the evap condenser is available (field Evaporative Condenser Availability Schedule). For this situation, the heater heats the basin water when the outdoor air dry-bulb temperature falls below the set point temperature, but only when the condenser fans are off (i.e., no refrigerated case load).")]
public System.Single BasinHeaterCapacity { get; set; } = 200;
        
[Description(@"Enter the outdoor dry-bulb temperature at which the basin heater turns on.")]
[JsonProperty(@"Enter the outdoor dry-bulb temperature at which the basin heater turns on.")]
public System.Single BasinHeaterSetpointTemperature { get; set; } = 2;
        
[Description(@"Design recirculating water pump power.")]
[JsonProperty(@"Design recirculating water pump power.")]
public System.String RatedWaterPumpPower { get; set; } = (System.String)1000;
        
[Description(@"If blank, water supply is from Mains.")]
[JsonProperty(@"If blank, water supply is from Mains.")]
public System.String EvaporativeWaterSupplyTankName { get; set; } = "";
        
[Description(@"Schedule values greater than 0 indicate that evaporative cooling of the condenser is available. This schedule allows the user to define seasonal shutdown/draining of the water cooling system in cold climate applications. For periods with schedule values of 0, the condenser operates as Air Cooled.")]
[JsonProperty(@"Schedule values greater than 0 indicate that evaporative cooling of the condenser is available. This schedule allows the user to define seasonal shutdown/draining of the water cooling system in cold climate applications. For periods with schedule values of 0, the condenser operates as Air Cooled.")]
public System.String EvaporativeCondenserAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
        
[Description(@"optional input")]
[JsonProperty(@"optional input")]
public System.Single CondenserRefrigerantOperatingChargeInventory { get; set; } = 0;
        
[Description(@"optional input")]
[JsonProperty(@"optional input")]
public System.Single CondensateReceiverRefrigerantInventory { get; set; } = 0;
        
[Description(@"optional input")]
[JsonProperty(@"optional input")]
public System.Single CondensatePipingRefrigerantInventory { get; set; } = 0;
    }
    
    public enum FanSpeedControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Fixed")]
        Fixed = 1,
        
        [JsonProperty("FixedLinear")]
        FixedLinear = 2,
        
        [JsonProperty("TwoSpeed")]
        TwoSpeed = 3,
        
        [JsonProperty("VariableSpeed")]
        VariableSpeed = 4,
    }
    
    [Description("Water cooled condenser for a refrigeration system (Refrigeration:System).")]
    [JsonObject("Refrigeration:Condenser:WaterCooled")]
    public class Refrigeration_Condenser_WaterCooled
    {
        
[Description(@"Rating as per ARI 450 Be sure the rating corresponds to the correct refrigerant not used in calculations, only for identification and output")]
[JsonProperty(@"Rating as per ARI 450 Be sure the rating corresponds to the correct refrigerant not used in calculations, only for identification and output")]
public System.Single RatedEffectiveTotalHeatRejectionRate { get; set; } = ;
        
[Description(@"must correspond to rating given for total heat rejection effect")]
[JsonProperty(@"must correspond to rating given for total heat rejection effect")]
public System.Single RatedCondensingTemperature { get; set; } = ;
        
[Description(@"must correspond to rating given for total heat rejection effect")]
[JsonProperty(@"must correspond to rating given for total heat rejection effect")]
public System.Single RatedSubcoolingTemperatureDifference { get; set; } = 0;
        
[Description(@"must correspond to rating given for total heat rejection effect")]
[JsonProperty(@"must correspond to rating given for total heat rejection effect")]
public System.Single RatedWaterInletTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.String WaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault WaterCooledLoopFlowType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "VariableFlow");
        
[Description(@"Applicable only when loop flow type is Variable Flow.")]
[JsonProperty(@"Applicable only when loop flow type is Variable Flow.")]
public System.String WaterOutletTemperatureScheduleName { get; set; } = "";
        
[Description(@"note required units must be converted from L/s as specified in ARI 450-2007 Applicable only when loop flow type is Constant Flow.")]
[JsonProperty(@"note required units must be converted from L/s as specified in ARI 450-2007 Applicable only when loop flow type is Constant Flow.")]
public System.Single WaterDesignFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterMaximumFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterMaximumWaterOutletTemperature { get; set; } = 55;
        
[Description(@"related to the minimum allowed refrigeration system condensing temperature")]
[JsonProperty(@"related to the minimum allowed refrigeration system condensing temperature")]
public System.Single WaterMinimumWaterInletTemperature { get; set; } = 10;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
        
[Description(@"optional input")]
[JsonProperty(@"optional input")]
public System.Single CondenserRefrigerantOperatingChargeInventory { get; set; } = ;
        
[Description(@"optional input")]
[JsonProperty(@"optional input")]
public System.Single CondensateReceiverRefrigerantInventory { get; set; } = ;
        
[Description(@"optional input")]
[JsonProperty(@"optional input")]
public System.Single CondensatePipingRefrigerantInventory { get; set; } = ;
    }
    
    public enum WaterCooledLoopFlowTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantFlow")]
        ConstantFlow = 1,
        
        [JsonProperty("VariableFlow")]
        VariableFlow = 2,
    }
    
    [Description(@"Cascade condenser for a refrigeration system (Refrigeration:System). The cascade condenser is unlike the other condenser options because it rejects heat to another, higher-temperature, refrigeration system. That is, the cascade condenser acts as a heat rejection object for one system, but acts as a refrigeration load for another system.")]
    [JsonObject("Refrigeration:Condenser:Cascade")]
    public class Refrigeration_Condenser_Cascade
    {
        
[Description(@"This is the condensing temperature for the lower temperature secondary loop")]
[JsonProperty(@"This is the condensing temperature for the lower temperature secondary loop")]
public System.Single RatedCondensingTemperature { get; set; } = ;
        
[Description(@"This is the difference between the condensing and evaporating temperatures")]
[JsonProperty(@"This is the difference between the condensing and evaporating temperatures")]
public System.Single RatedApproachTemperatureDifference { get; set; } = 3;
        
[Description(@"used for identification and rough system size error checking")]
[JsonProperty(@"used for identification and rough system size error checking")]
public System.Single RatedEffectiveTotalHeatRejectionRate { get; set; } = ;
        
[Description(@"Fixed keeps condensing temperature constant Float sets the condensing temperature according to the other loads on the higher temperature system")]
[JsonProperty(@"Fixed keeps condensing temperature constant Float sets the condensing temperature according to the other loads on the higher temperature system")]
public YesNoDefault CondensingTemperatureControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Fixed");
        
[Description(@"optional input")]
[JsonProperty(@"optional input")]
public System.Single CondenserRefrigerantOperatingChargeInventory { get; set; } = ;
        
[Description(@"optional input")]
[JsonProperty(@"optional input")]
public System.Single CondensateReceiverRefrigerantInventory { get; set; } = ;
        
[Description(@"optional input")]
[JsonProperty(@"optional input")]
public System.Single CondensatePipingRefrigerantInventory { get; set; } = ;
    }
    
    public enum CondensingTemperatureControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Fixed")]
        Fixed = 1,
        
        [JsonProperty("Float")]
        Float = 2,
    }
    
    [Description("The transcritical refrigeration system requires a single gas cooler to reject the" +
        " system heat.")]
    [JsonObject("Refrigeration:GasCooler:AirCooled")]
    public class Refrigeration_GasCooler_AirCooled
    {
        
[Description(@"Be sure the rating corresponds to the correct refrigerant (R744) HeatRejection(W)=C1 +C2(Gas Cooler Outlet Temp - Entering Air Temp, deg C) Will be adjusted for elevation automatically")]
[JsonProperty(@"Be sure the rating corresponds to the correct refrigerant (R744) HeatRejection(W)=C1 +C2(Gas Cooler Outlet Temp - Entering Air Temp, deg C) Will be adjusted for elevation automatically")]
public System.String RatedTotalHeatRejectionRateCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault GasCoolerFanSpeedControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Fixed");
        
[Description(@"Power for gas cooler fan(s) corresponding to rated total heat rejection effect.")]
[JsonProperty(@"Power for gas cooler fan(s) corresponding to rated total heat rejection effect.")]
public System.Single RatedFanPower { get; set; } = 5000;
        
[Description(@"Minimum air flow fraction through gas cooler fan")]
[JsonProperty(@"Minimum air flow fraction through gas cooler fan")]
public System.Single MinimumFanAirFlowRatio { get; set; } = 0.2;
        
[Description(@"Temperature at which system transitions between subcritical and transcritical operation.")]
[JsonProperty(@"Temperature at which system transitions between subcritical and transcritical operation.")]
public System.Single TransitionTemperature { get; set; } = 27;
        
[Description(@"Temperature difference between the CO2 exiting the gas cooler and the air entering the gas cooler during transcritical operation.")]
[JsonProperty(@"Temperature difference between the CO2 exiting the gas cooler and the air entering the gas cooler during transcritical operation.")]
public System.Single TranscriticalApproachTemperature { get; set; } = 3;
        
[Description(@"Temperature difference between the saturated condensing temperature and the air temperature during subcritical operation.")]
[JsonProperty(@"Temperature difference between the saturated condensing temperature and the air temperature during subcritical operation.")]
public System.Single SubcriticalTemperatureDifference { get; set; } = 10;
        
[Description(@"Minimum saturated condensing temperature during subcritical operation.")]
[JsonProperty(@"Minimum saturated condensing temperature during subcritical operation.")]
public System.Single MinimumCondensingTemperature { get; set; } = 10;
        
[Description(@"If field is left blank, then the model assumes that the inlet air conditions are the outdoor air conditions for the current timestep (e.g., no adjustment for height above ground).")]
[JsonProperty(@"If field is left blank, then the model assumes that the inlet air conditions are the outdoor air conditions for the current timestep (e.g., no adjustment for height above ground).")]
public System.String AirInletNodeName { get; set; } = "";
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
        
[Description(@"optional input")]
[JsonProperty(@"optional input")]
public System.Single GasCoolerRefrigerantOperatingChargeInventory { get; set; } = 0;
        
[Description(@"optional input")]
[JsonProperty(@"optional input")]
public System.Single GasCoolerReceiverRefrigerantInventory { get; set; } = 0;
        
[Description(@"optional input")]
[JsonProperty(@"optional input")]
public System.Single GasCoolerOutletPipingRefrigerantInventory { get; set; } = 0;
    }
    
    public enum GasCoolerFanSpeedControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Fixed")]
        Fixed = 1,
        
        [JsonProperty("FixedLinear")]
        FixedLinear = 2,
        
        [JsonProperty("TwoSpeed")]
        TwoSpeed = 3,
        
        [JsonProperty("VariableSpeed")]
        VariableSpeed = 4,
    }
    
    [Description(@"A refrigeration system may provide cooling to other, secondary, systems through either a secondary loop or a cascade condenser. If multiple transfer loads are served by a single primary system, use this list to group them together for reference by the primary system (see the field ""Refrigeration Transfer Load or TransferLoad List Name"" in the Refrigeration:System object).")]
    [JsonObject("Refrigeration:TransferLoadList")]
    public class Refrigeration_TransferLoadList
    {
        
[JsonProperty(@"")]
public System.String TransferLoads { get; set; } = "";
    }
    
    [Description(@"Two types of subcoolers are modeled by the detailed refrigeration system. The liquid suction heat exchanger uses cool suction gas to subcool the hot condensate after it leaves the condenser and before it reaches the thermal expansion valve. A mechanical subcooler is used to transfer cooling capacity from one refrigeration system to another.")]
    [JsonObject("Refrigeration:Subcooler")]
    public class Refrigeration_Subcooler
    {
        
[Description(@"plan to add ambient subcoolers at future time")]
[JsonProperty(@"plan to add ambient subcoolers at future time")]
public YesNoDefault SubcoolerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "LiquidSuction");
        
[Description(@"Applicable only and required for liquid suction heat exchangers design liquid suction subcooling")]
[JsonProperty(@"Applicable only and required for liquid suction heat exchangers design liquid suction subcooling")]
public System.Single LiquidSuctionDesignSubcoolingTemperatureDifference { get; set; } = ;
        
[Description(@"design inlet temperature on liquid side Applicable only and required for liquid suction heat exchangers (LSHX)")]
[JsonProperty(@"design inlet temperature on liquid side Applicable only and required for liquid suction heat exchangers (LSHX)")]
public System.Single DesignLiquidInletTemperature { get; set; } = ;
        
[Description(@"design inlet temperature on vapor side Applicable only and required for liquid suction heat exchangers (LSHX) Design vapor inlet temperature must be less than or equal to the Liquid inlet design temp")]
[JsonProperty(@"design inlet temperature on vapor side Applicable only and required for liquid suction heat exchangers (LSHX) Design vapor inlet temperature must be less than or equal to the Liquid inlet design temp")]
public System.Single DesignVaporInletTemperature { get; set; } = ;
        
[Description(@"Name of the Detailed Refrigeration System providing cooling capacity Applicable only and required for mechanical subcoolers")]
[JsonProperty(@"Name of the Detailed Refrigeration System providing cooling capacity Applicable only and required for mechanical subcoolers")]
public System.String CapacityProvidingSystem { get; set; } = "";
        
[Description(@"Control Temperature Out for subcooled liquid Applicable only and required for mechanical subcoolers")]
[JsonProperty(@"Control Temperature Out for subcooled liquid Applicable only and required for mechanical subcoolers")]
public System.Single OutletControlTemperature { get; set; } = ;
    }
    
    public enum SubcoolerTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LiquidSuction")]
        LiquidSuction = 1,
        
        [JsonProperty("Mechanical")]
        Mechanical = 2,
    }
    
    [Description("Refrigeration system compressor. Data is available for many compressors in the Re" +
        "frigerationCompressor.idf dataset")]
    [JsonObject("Refrigeration:Compressor")]
    public class Refrigeration_Compressor
    {
        
[Description(@"the input order for the Curve:Bicubic does not match the ARI 540-2004 Eq. 1 coefficient order N1 is ARI_C1, N2 is ARI_C2, N3 is ARI_C4, N4 is ARI_C3, N5 is ARI_C6, N6 is ARI_C5, N7 is ARI_C7, N8 is ARI_C10, N9 is ARI_C8, N10 is ARI_C9, N11 is Minimum Suction dewpoint temperature, N12 is Maximum Suction dewpoint temperature, N13 is Minimum Discharge dewpoint temperature, N14 is Maximum Discharge dewpoint temperature")]
[JsonProperty(@"the input order for the Curve:Bicubic does not match the ARI 540-2004 Eq. 1 coefficient order N1 is ARI_C1, N2 is ARI_C2, N3 is ARI_C4, N4 is ARI_C3, N5 is ARI_C6, N6 is ARI_C5, N7 is ARI_C7, N8 is ARI_C10, N9 is ARI_C8, N10 is ARI_C9, N11 is Minimum Suction dewpoint temperature, N12 is Maximum Suction dewpoint temperature, N13 is Minimum Discharge dewpoint temperature, N14 is Maximum Discharge dewpoint temperature")]
public System.String RefrigerationCompressorPowerCurveName { get; set; } = "";
        
[Description(@"the input order for the Curve:Bicubic does not match the ARI 540-2004 Eq. 1 coefficient order N1 is ARI_C1, N2 is ARI_C2, N3 is ARI_C4, N4 is ARI_C3, N5 is ARI_C6, N6 is ARI_C5, N7 is ARI_C7, N8 is ARI_C10, N9 is ARI_C8, N10 is ARI_C9, N11 is Minimum Suction dewpoint temperature, N12 is Maximum Suction dewpoint temperature, N13 is Minimum Discharge dewpoint temperature, N14 is Maximum Discharge dewpoint temperature")]
[JsonProperty(@"the input order for the Curve:Bicubic does not match the ARI 540-2004 Eq. 1 coefficient order N1 is ARI_C1, N2 is ARI_C2, N3 is ARI_C4, N4 is ARI_C3, N5 is ARI_C6, N6 is ARI_C5, N7 is ARI_C7, N8 is ARI_C10, N9 is ARI_C8, N10 is ARI_C9, N11 is Minimum Suction dewpoint temperature, N12 is Maximum Suction dewpoint temperature, N13 is Minimum Discharge dewpoint temperature, N14 is Maximum Discharge dewpoint temperature")]
public System.String RefrigerationCompressorCapacityCurveName { get; set; } = "";
        
[Description(@"Use this input field OR the next, not both This is used if the compressor rating is based upon degrees of superheat")]
[JsonProperty(@"Use this input field OR the next, not both This is used if the compressor rating is based upon degrees of superheat")]
public System.Single RatedSuperheat { get; set; } = ;
        
[Description(@"Use this input field OR the previous, not both This is used if the compressor rating is based upon rated return gas temperature (Rated Suction Temperature)")]
[JsonProperty(@"Use this input field OR the previous, not both This is used if the compressor rating is based upon rated return gas temperature (Rated Suction Temperature)")]
public System.Single RatedReturnGasTemperature { get; set; } = ;
        
[Description(@"Use this input field OR the next, not both This is used if the compressor rating is based upon rated liquid temperature at the expansion valve")]
[JsonProperty(@"Use this input field OR the next, not both This is used if the compressor rating is based upon rated liquid temperature at the expansion valve")]
public System.Single RatedLiquidTemperature { get; set; } = ;
        
[Description(@"Use this input field OR the previous, not both This is used if the compressor rating is based upon degrees of subcooling")]
[JsonProperty(@"Use this input field OR the previous, not both This is used if the compressor rating is based upon degrees of subcooling")]
public System.Single RatedSubcooling { get; set; } = ;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
        
[JsonProperty(@"")]
public YesNoDefault ModeOfOperation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Subcritical");
        
[JsonProperty(@"")]
public System.String TranscriticalCompressorPowerCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String TranscriticalCompressorCapacityCurveName { get; set; } = "";
    }
    
    public enum ModeOfOperationType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Subcritical")]
        Subcritical = 1,
        
        [JsonProperty("Transcritical")]
        Transcritical = 2,
    }
    
    [Description(@"List of all the compressors included within a single refrigeration system (Refrigeration:System). Each list must contain at least one compressor. The order in which the individual compressors are listed here will be the order in which the compressors are dispatched to meet the system load. IMPORTANT: List compressor names in the order in which the compressors will be loaded Data is available for many compressors in the RefrigerationCompressor.idf dataset")]
    [JsonObject("Refrigeration:CompressorList")]
    public class Refrigeration_CompressorList
    {
        
[JsonProperty(@"")]
public System.String Compressors { get; set; } = "";
    }
    
    [Description("Simulates the performance of a supermarket refrigeration system when used along w" +
        "ith other objects to define the refrigeration load(s), the compressor(s), and th" +
        "e condenser.")]
    [JsonObject("Refrigeration:System")]
    public class Refrigeration_System
    {
        
[Description(@"Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object. If there is more than one refrigerated case or walk-in served by this system, enter the name of a Refrigeration:CaseAndWalkInList object. Only cases and walkins served directly by the system should be included in this list. Any cases served indirectly via a secondary chiller should NOT be included in this list")]
[JsonProperty(@"Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object. If there is more than one refrigerated case or walk-in served by this system, enter the name of a Refrigeration:CaseAndWalkInList object. Only cases and walkins served directly by the system should be included in this list. Any cases served indirectly via a secondary chiller should NOT be included in this list")]
public System.String RefrigeratedCaseOrWalkinOrCaseandwalkinlistName { get; set; } = "";
        
[Description(@"Enter the name of a Refrigeration:SecondarySystem object OR a Refrigeration:Condenser:Cascade object OR, a Refrigeration:TransferLoadList object. A transfer load is identified as one which moves the load from one system to another. So if you have more than one such load (including cascade condensers and secondary loops) served by the same system, use a TransferLoadList object.")]
[JsonProperty(@"Enter the name of a Refrigeration:SecondarySystem object OR a Refrigeration:Condenser:Cascade object OR, a Refrigeration:TransferLoadList object. A transfer load is identified as one which moves the load from one system to another. So if you have more than one such load (including cascade condensers and secondary loops) served by the same system, use a TransferLoadList object.")]
public System.String RefrigerationTransferLoadOrTransferloadListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String RefrigerationCondenserName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CompressorOrCompressorlistName { get; set; } = "";
        
[Description(@"related to the proper operation of the thermal expansion valves and compressors")]
[JsonProperty(@"related to the proper operation of the thermal expansion valves and compressors")]
public System.Single MinimumCondensingTemperature { get; set; } = ;
        
[Description(@"Fluid property data for the refrigerant must be entered. The fluid property data, including the objects: FluidProperties:Name, FluidProperties:Temperatures, FluidProperties:Saturated and FluidProperties:Superheated can be copied from the FluidPropertiesRefData.idf dataset")]
[JsonProperty(@"Fluid property data for the refrigerant must be entered. The fluid property data, including the objects: FluidProperties:Name, FluidProperties:Temperatures, FluidProperties:Saturated and FluidProperties:Superheated can be copied from the FluidPropertiesRefData.idf dataset")]
public System.String RefrigerationSystemWorkingFluidType { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault SuctionTemperatureControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ConstantSuctionTemperature");
        
[Description(@"Optional Field Recipient of refrigeration capacity, that is receives cool liquid from another refrigeration system to help meet aggregate case loads")]
[JsonProperty(@"Optional Field Recipient of refrigeration capacity, that is receives cool liquid from another refrigeration system to help meet aggregate case loads")]
public System.String MechanicalSubcoolerName { get; set; } = "";
        
[Description(@"Optional Field Liquid Suction Heat Exchanger Name, or leave blank")]
[JsonProperty(@"Optional Field Liquid Suction Heat Exchanger Name, or leave blank")]
public System.String LiquidSuctionHeatExchangerSubcoolerName { get; set; } = "";
        
[Description(@"Use only if you want to include suction piping heat gain in refrigeration load")]
[JsonProperty(@"Use only if you want to include suction piping heat gain in refrigeration load")]
public System.Single SumUaSuctionPiping { get; set; } = 0;
        
[Description(@"This will be used to determine the temperature used for distribution piping heat gain and the pipe heat gains  as cooling credit for the zone. Required only if Sum UA Distribution Piping >0.0")]
[JsonProperty(@"This will be used to determine the temperature used for distribution piping heat gain and the pipe heat gains  as cooling credit for the zone. Required only if Sum UA Distribution Piping >0.0")]
public System.String SuctionPipingZoneName { get; set; } = "";
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
        
[JsonProperty(@"")]
public System.String NumberOfCompressorStages { get; set; } = (System.String)1;
        
[JsonProperty(@"")]
public YesNoDefault IntercoolerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[JsonProperty(@"")]
public System.Single ShellAndCoilIntercoolerEffectiveness { get; set; } = 0.8;
        
[JsonProperty(@"")]
public System.String HighStageCompressorOrCompressorlistName { get; set; } = "";
    }
    
    public enum SuctionTemperatureControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantSuctionTemperature")]
        ConstantSuctionTemperature = 1,
        
        [JsonProperty("FloatSuctionTemperature")]
        FloatSuctionTemperature = 2,
    }
    
    public enum IntercoolerTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Flash Intercooler")]
        FlashIntercooler = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Shell-and-Coil Intercooler")]
        ShellandCoilIntercooler = 3,
    }
    
    [Description("Detailed transcritical carbon dioxide (CO2) booster refrigeration systems used in" +
        " supermarkets. The object allows for modeling either a single stage system with " +
        "medium-temperature loads or a two stage system with both medium- and low-tempera" +
        "ture loads.")]
    [JsonObject("Refrigeration:TranscriticalSystem")]
    public class Refrigeration_TranscriticalSystem
    {
        
[JsonProperty(@"")]
public YesNoDefault SystemType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object. If there is more than one refrigerated case or walk-in served by this system, enter the name of a Refrigeration:CaseAndWalkInList object. Only medium temperature cases and walk-ins served directly by the system should be included in this list.")]
[JsonProperty(@"Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object. If there is more than one refrigerated case or walk-in served by this system, enter the name of a Refrigeration:CaseAndWalkInList object. Only medium temperature cases and walk-ins served directly by the system should be included in this list.")]
public System.String MediumTemperatureRefrigeratedCaseOrWalkinOrCaseandwalkinlistName { get; set; } = "";
        
[Description(@"Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object. If there is more than one refrigerated case or walk-in served by this system, enter the name of a Refrigeration:CaseAndWalkInList object. Only low temperature cases and walkins served directly by the system should be included in this list.")]
[JsonProperty(@"Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object. If there is more than one refrigerated case or walk-in served by this system, enter the name of a Refrigeration:CaseAndWalkInList object. Only low temperature cases and walkins served directly by the system should be included in this list.")]
public System.String LowTemperatureRefrigeratedCaseOrWalkinOrCaseandwalkinlistName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String RefrigerationGasCoolerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HighPressureCompressorOrCompressorlistName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LowPressureCompressorOrCompressorlistName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single ReceiverPressure { get; set; } = 4000000;
        
[JsonProperty(@"")]
public System.Single SubcoolerEffectiveness { get; set; } = 0.4;
        
[Description(@"Fluid property data for the refrigerant must be entered. The fluid property data, including the objects: FluidProperties:Name, FluidProperties:Temperatures, FluidProperties:Saturated and FluidProperties:Superheated can be copied from the FluidPropertiesRefData.idf dataset")]
[JsonProperty(@"Fluid property data for the refrigerant must be entered. The fluid property data, including the objects: FluidProperties:Name, FluidProperties:Temperatures, FluidProperties:Saturated and FluidProperties:Superheated can be copied from the FluidPropertiesRefData.idf dataset")]
public System.String RefrigerationSystemWorkingFluidType { get; set; } = "";
        
[Description(@"Use only if you want to include suction piping heat gain in refrigeration load")]
[JsonProperty(@"Use only if you want to include suction piping heat gain in refrigeration load")]
public System.Single SumUaSuctionPipingForMediumTemperatureLoads { get; set; } = 0;
        
[Description(@"This will be used to determine the temperature used for distribution piping heat gain and the pipe heat gains as cooling credit for the zone. Required only if Sum UA Distribution Piping for Medium Temperature Loads > 0.0")]
[JsonProperty(@"This will be used to determine the temperature used for distribution piping heat gain and the pipe heat gains as cooling credit for the zone. Required only if Sum UA Distribution Piping for Medium Temperature Loads > 0.0")]
public System.String MediumTemperatureSuctionPipingZoneName { get; set; } = "";
        
[Description(@"Use only if you want to include suction piping heat gain in refrigeration load")]
[JsonProperty(@"Use only if you want to include suction piping heat gain in refrigeration load")]
public System.Single SumUaSuctionPipingForLowTemperatureLoads { get; set; } = 0;
        
[Description(@"This will be used to determine the temperature used for distribution piping heat gain and the pipe heat gains as cooling credit for the zone. Required only if Sum UA Distribution Piping for Low Temperature Loads > 0.0")]
[JsonProperty(@"This will be used to determine the temperature used for distribution piping heat gain and the pipe heat gains as cooling credit for the zone. Required only if Sum UA Distribution Piping for Low Temperature Loads > 0.0")]
public System.String LowTemperatureSuctionPipingZoneName { get; set; } = "";
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum SystemTypeType
    {
        
        [JsonProperty("SingleStage")]
        SingleStage = 0,
        
        [JsonProperty("TwoStage")]
        TwoStage = 1,
    }
    
    [Description(@"Works in conjunction with refrigerated cases and walkins to simulate the performance of a secondary loop supermarket refrigeration system. Heat from the refrigeration loads served by the secondary loop is absorbed by a primary refrigeration system (Refrigeration:System). The SecondarySystem object simulates a heat exchanger that is an evaporator, or refrigeration load, on the primary refrigeration system.")]
    [JsonObject("Refrigeration:SecondarySystem")]
    public class Refrigeration_SecondarySystem
    {
        
[Description(@"Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object. If there is more than one refrigerated case or walk-in served by this secondary system, enter the name of a Refrigeration:CaseAndWalkInList object.")]
[JsonProperty(@"Enter the name of a Refrigeration:Case or Refrigeration:WalkIn object. If there is more than one refrigerated case or walk-in served by this secondary system, enter the name of a Refrigeration:CaseAndWalkInList object.")]
public System.String RefrigeratedCaseOrWalkinOrCaseandwalkinlistName { get; set; } = "";
        
[Description(@"If "FluidAlwaysLiquid" is selected, the fluid properties must be input using the objects: FluidProperties:Name, FluidProperties:GlycolConcentration, and, if user defined fluid type, FluidProperties:Temperatures and FluidProperties:Concentration. Many sets of fluid properties can be found in GlycolPropertiesRefData.idf. If "FluidPhaseChange" is selected, the refrigerant properties must be input using the objects: (if user defined fluid type): FluidProperties:Name, FluidProperties:Temperatures, FluidProperties:Saturated, and FluidProperties:Superheated. Many sets of refrigerant data can be found in FluidPropertiesRefData.idf.")]
[JsonProperty(@"If "FluidAlwaysLiquid" is selected, the fluid properties must be input using the objects: FluidProperties:Name, FluidProperties:GlycolConcentration, and, if user defined fluid type, FluidProperties:Temperatures and FluidProperties:Concentration. Many sets of fluid properties can be found in GlycolPropertiesRefData.idf. If "FluidPhaseChange" is selected, the refrigerant properties must be input using the objects: (if user defined fluid type): FluidProperties:Name, FluidProperties:Temperatures, FluidProperties:Saturated, and FluidProperties:Superheated. Many sets of refrigerant data can be found in FluidPropertiesRefData.idf.")]
public YesNoDefault CirculatingFluidType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"This must correspond to a name in the FluidProperties:Name object.")]
[JsonProperty(@"This must correspond to a name in the FluidProperties:Name object.")]
public System.String CirculatingFluidName { get; set; } = "";
        
[Description(@"For "FluidAlwaysLiquid", at least one of the two, Evaporator Capacity OR Evaporator Flow Rate for Secondary Fluid, is required. For "FluidPhaseChange", the default capacity is the sum of the rated capacities of the Cases and Walk-ins served by the secondary loop.")]
[JsonProperty(@"For "FluidAlwaysLiquid", at least one of the two, Evaporator Capacity OR Evaporator Flow Rate for Secondary Fluid, is required. For "FluidPhaseChange", the default capacity is the sum of the rated capacities of the Cases and Walk-ins served by the secondary loop.")]
public System.Single EvaporatorCapacity { get; set; } = ;
        
[Description(@"For "FluidAlwaysLiquid", at least one of the two, Evaporator Capacity OR Evaporator Flow Rate for Secondary Fluid, is required. For "FluidPhaseChange" loops, this input is not used. (see PhaseChange Circulating Rate)")]
[JsonProperty(@"For "FluidAlwaysLiquid", at least one of the two, Evaporator Capacity OR Evaporator Flow Rate for Secondary Fluid, is required. For "FluidPhaseChange" loops, this input is not used. (see PhaseChange Circulating Rate)")]
public System.Single EvaporatorFlowRateForSecondaryFluid { get; set; } = ;
        
[Description(@"This is the evaporating temperature in the heat exchanger used to chill or condense the secondary loop circulating fluid. It is NOT the temperature in any cases or walk-ins served by the secondary loop.")]
[JsonProperty(@"This is the evaporating temperature in the heat exchanger used to chill or condense the secondary loop circulating fluid. It is NOT the temperature in any cases or walk-ins served by the secondary loop.")]
public System.Single EvaporatorEvaporatingTemperature { get; set; } = ;
        
[Description(@"For "FluidAlwaysLiquid", this is the rated difference between the temperature of the circulating fluid leaving the heat exchanger and the heat exchanger's rated evaporating temperature. For "FluidPhaseChange", this is the difference between the temperature of the evaporating and condensing temperatures in the heat exchanger.")]
[JsonProperty(@"For "FluidAlwaysLiquid", this is the rated difference between the temperature of the circulating fluid leaving the heat exchanger and the heat exchanger's rated evaporating temperature. For "FluidPhaseChange", this is the difference between the temperature of the evaporating and condensing temperatures in the heat exchanger.")]
public System.Single EvaporatorApproachTemperatureDifference { get; set; } = ;
        
[Description(@"For "FluidAlwaysLiquid", this is the rated difference between the temperature of the circulating fluid entering the heat exchanger and the temperature of the circulating fluid leaving the heat exchanger, and is Required. For "FluidPhaseChange", this input is not used.")]
[JsonProperty(@"For "FluidAlwaysLiquid", this is the rated difference between the temperature of the circulating fluid entering the heat exchanger and the temperature of the circulating fluid leaving the heat exchanger, and is Required. For "FluidPhaseChange", this input is not used.")]
public System.Single EvaporatorRangeTemperatureDifference { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NumberOfPumpsInLoop { get; set; } = 1;
        
[Description(@"For "FluidAlwaysLiquid",if not input, Evaporator Flow Rate for Secondary Fluid will be used. For "FluidPhaseChange", if not input, this will be calculated using the PhaseChange Circulating Rate.")]
[JsonProperty(@"For "FluidAlwaysLiquid",if not input, Evaporator Flow Rate for Secondary Fluid will be used. For "FluidPhaseChange", if not input, this will be calculated using the PhaseChange Circulating Rate.")]
public System.Single TotalPumpFlowRate { get; set; } = ;
        
[Description(@"Either the Total Pump Power or the Total Pump Head is required.")]
[JsonProperty(@"Either the Total Pump Power or the Total Pump Head is required.")]
public System.Single TotalPumpPower { get; set; } = ;
        
[Description(@"Either the Total Pump Power or the Total Pump Head is required.")]
[JsonProperty(@"Either the Total Pump Power or the Total Pump Head is required.")]
public System.Single TotalPumpHead { get; set; } = ;
        
[Description(@"This is the total mass flow at the pump divided by the gaseous mass flow leaving the refrigeration load.")]
[JsonProperty(@"This is the total mass flow at the pump divided by the gaseous mass flow leaving the refrigeration load.")]
public System.Single PhasechangeCirculatingRate { get; set; } = 2.5;
        
[JsonProperty(@"")]
public YesNoDefault PumpDriveType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Constant");
        
[Description(@"Variable Speed Pump Curve Name is applicable to variable speed pumps only.")]
[JsonProperty(@"Variable Speed Pump Curve Name is applicable to variable speed pumps only.")]
public System.String VariableSpeedPumpCubicCurveName { get; set; } = "";
        
[Description(@"This is the portion of the pump motor heat added to secondary circulating fluid and is equal to the motor efficiency for non-hermetic motor. Enter 1.0 for a semi-hermetic motor.")]
[JsonProperty(@"This is the portion of the pump motor heat added to secondary circulating fluid and is equal to the motor efficiency for non-hermetic motor. Enter 1.0 for a semi-hermetic motor.")]
public System.Single PumpMotorHeatToFluid { get; set; } = 0.85;
        
[Description(@"Use only if you want to include distribution piping heat gain in refrigeration load.")]
[JsonProperty(@"Use only if you want to include distribution piping heat gain in refrigeration load.")]
public System.Single SumUaDistributionPiping { get; set; } = 0;
        
[Description(@"This will be used to determine the temperature used for distribution piping heat gain. The pipe heat gains are also counted as cooling credit for the zone. Required only if Sum UA Distribution Piping >0.0")]
[JsonProperty(@"This will be used to determine the temperature used for distribution piping heat gain. The pipe heat gains are also counted as cooling credit for the zone. Required only if Sum UA Distribution Piping >0.0")]
public System.String DistributionPipingZoneName { get; set; } = "";
        
[Description(@"Use only if you want to include Receiver/Separator Shell heat gain in refrigeration load.")]
[JsonProperty(@"Use only if you want to include Receiver/Separator Shell heat gain in refrigeration load.")]
public System.Single SumUaReceiverSeparatorShell { get; set; } = 0;
        
[Description(@"This will be used to determine the temperature used for Receiver/Separator Shell heat gain. The shell heat gains are also counted as cooling credit for the zone. Required only if Sum UA Receiver/Separator Shell >0.0")]
[JsonProperty(@"This will be used to determine the temperature used for Receiver/Separator Shell heat gain. The shell heat gains are also counted as cooling credit for the zone. Required only if Sum UA Receiver/Separator Shell >0.0")]
public System.String ReceiverSeparatorZoneName { get; set; } = "";
        
[Description(@"This value refers to the refrigerant circulating within the primary system providing cooling to the chiller for the secondary loop, not to the fluid circulating within the secondary loop itself.")]
[JsonProperty(@"This value refers to the refrigerant circulating within the primary system providing cooling to the chiller for the secondary loop, not to the fluid circulating within the secondary loop itself.")]
public System.Single EvaporatorRefrigerantInventory { get; set; } = 0;
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum CirculatingFluidTypeType
    {
        
        [JsonProperty("FluidAlwaysLiquid")]
        FluidAlwaysLiquid = 0,
        
        [JsonProperty("FluidPhaseChange")]
        FluidPhaseChange = 1,
    }
    
    public enum PumpDriveTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Constant")]
        Constant = 1,
        
        [JsonProperty("Variable")]
        Variable = 2,
    }
    
    [Description(@"Works in conjunction with a compressor rack, a refrigeration system, or a refrigeration secondary system to simulate the performance of a walk-in cooler. The walk-in cooler model uses information at rated conditions along with input descriptions for heat transfer surfaces facing multiple zones to determine performance.")]
    [JsonObject("Refrigeration:WalkIn")]
    public class Refrigeration_WalkIn
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RatedCoilCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single OperatingTemperature { get; set; } = ;
        
[Description(@"If DXEvaporator, use evaporating temperature (saturated suction temperature) If BrineCoil, use Brine entering temperature used to set minimum suction pressure for DX systems and minimum brine temp for secondary systems")]
[JsonProperty(@"If DXEvaporator, use evaporating temperature (saturated suction temperature) If BrineCoil, use Brine entering temperature used to set minimum suction pressure for DX systems and minimum brine temp for secondary systems")]
public System.Single RatedCoolingSourceTemperature { get; set; } = ;
        
[Description(@"Include total for all anti-sweat, door, drip-pan, and floor heater power Do not include defrost heater power")]
[JsonProperty(@"Include total for all anti-sweat, door, drip-pan, and floor heater power Do not include defrost heater power")]
public System.Single RatedTotalHeatingPower { get; set; } = ;
        
[Description(@"Values will be used to multiply the total heating power Values in the schedule should be between 0.0 and 1.0 For example, this could be used if display door antisweat heaters are turned off at night Defaults to always on if schedule name left blank.")]
[JsonProperty(@"Values will be used to multiply the total heating power Values in the schedule should be between 0.0 and 1.0 For example, this could be used if display door antisweat heaters are turned off at night Defaults to always on if schedule name left blank.")]
public System.String HeatingPowerScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RatedCoolingCoilFanPower { get; set; } = 375;
        
[JsonProperty(@"")]
public System.Single RatedCirculationFanPower { get; set; } = 0;
        
[Description(@"Enter the total (display + task) installed lighting power.")]
[JsonProperty(@"Enter the total (display + task) installed lighting power.")]
public System.Single RatedTotalLightingPower { get; set; } = ;
        
[Description(@"The schedule should contain values between 0 and 1 Defaults to always on if schedule name left blank.")]
[JsonProperty(@"The schedule should contain values between 0 and 1 Defaults to always on if schedule name left blank.")]
public System.String LightingScheduleName { get; set; } = "";
        
[Description(@"HotFluid includes either hot gas defrost for a DX system or Hot Brine defrost if this walk in is cooled by brine from a secondary chiller")]
[JsonProperty(@"HotFluid includes either hot gas defrost for a DX system or Hot Brine defrost if this walk in is cooled by brine from a secondary chiller")]
public YesNoDefault DefrostType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Electric");
        
[JsonProperty(@"")]
public YesNoDefault DefrostControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "TimeSchedule");
        
[Description(@"The schedule values should be 0 (off) or 1 (on)")]
[JsonProperty(@"The schedule values should be 0 (off) or 1 (on)")]
public System.String DefrostScheduleName { get; set; } = "";
        
[Description(@"The schedule values should be 0 (off) or 1 (on) The start time for each defrost period in this drip-down schedule should coincide with the start time for each defrost period in the defrost schedule (previous input field). The length of each defrost drip-down period must be greater than or equal to the corresponding defrost period specified in the defrost schedule. This extra time allows the melted frost to drip from the coil before refrigeration is restarted.")]
[JsonProperty(@"The schedule values should be 0 (off) or 1 (on) The start time for each defrost period in this drip-down schedule should coincide with the start time for each defrost period in the defrost schedule (previous input field). The length of each defrost drip-down period must be greater than or equal to the corresponding defrost period specified in the defrost schedule. This extra time allows the melted frost to drip from the coil before refrigeration is restarted.")]
public System.String DefrostDripDownScheduleName { get; set; } = "";
        
[Description(@"needed for all defrost types except none and offcycle")]
[JsonProperty(@"needed for all defrost types except none and offcycle")]
public System.Single DefrostPower { get; set; } = ;
        
[Description(@"This is the portion of the defrost energy that is available to melt frost Needed only for defrost control type TemperatureTermination defaults to 0.7 for electric defrost and to 0.3 for hot fluid defrost")]
[JsonProperty(@"This is the portion of the defrost energy that is available to melt frost Needed only for defrost control type TemperatureTermination defaults to 0.7 for electric defrost and to 0.3 for hot fluid defrost")]
public System.Single TemperatureTerminationDefrostFractionToIce { get; set; } = ;
        
[Description(@"Schedule values should be in units of Watts Leave this field blank if no restocking is to be modeled")]
[JsonProperty(@"Schedule values should be in units of Watts Leave this field blank if no restocking is to be modeled")]
public System.String RestockingScheduleName { get; set; } = "";
        
[Description(@"This value is only used if the Cooling Source Type is DXEvaporator")]
[JsonProperty(@"This value is only used if the Cooling Source Type is DXEvaporator")]
public System.Single AverageRefrigerantChargeInventory { get; set; } = 0;
        
[Description(@"floor area of walk-in cooler")]
[JsonProperty(@"floor area of walk-in cooler")]
public System.Single InsulatedFloorSurfaceArea { get; set; } = ;
        
[Description(@"The default value corresponds to R18 [ft2-F-hr/Btu] To convert other IP R-values to U, divide 5.678 by the R-value Some examples: R15 is U 0.3785 W/m2-K R5 is U 1.136 W/m2-K")]
[JsonProperty(@"The default value corresponds to R18 [ft2-F-hr/Btu] To convert other IP R-values to U, divide 5.678 by the R-value Some examples: R15 is U 0.3785 W/m2-K R5 is U 1.136 W/m2-K")]
public System.Single InsulatedFloorUValue { get; set; } = 0.3154;
        
[JsonProperty(@"")]
public System.String ZoneData { get; set; } = "";
    }
    
    public enum DefrostTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotFluid")]
        HotFluid = 2,
        
        [JsonProperty("None")]
        None = 3,
        
        [JsonProperty("OffCycle")]
        OffCycle = 4,
    }
    
    public enum DefrostControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("TemperatureTermination")]
        TemperatureTermination = 1,
        
        [JsonProperty("TimeSchedule")]
        TimeSchedule = 2,
    }
    
    [Description(@"Works in conjunction with a refrigeration chiller set, compressor rack, a refrigeration system, or a refrigeration secondary system to simulate the performance of an air chiller, similar to one found in a refrigerated warehouse. Energy use for fans and heaters is modeled based on inputs for nominal power, schedules, and control type. The air chiller model accounts for the sensible and latent heat exchange with the surrounding environment.")]
    [JsonObject("Refrigeration:AirChiller")]
    public class Refrigeration_AirChiller
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"In each case, select the rating option that corresponds to the expected service conditions. For example, U.S. manufacturers quote a separate Unit Load Factor for wet or frosted coils. If the evaporating temperature is less than 0C, input the frosted coil value. Within the European convention, select SC1, 2, 3, 4, or 5 depending upon the expected evaporating temperature.")]
[JsonProperty(@"In each case, select the rating option that corresponds to the expected service conditions. For example, U.S. manufacturers quote a separate Unit Load Factor for wet or frosted coils. If the evaporating temperature is less than 0C, input the frosted coil value. Within the European convention, select SC1, 2, 3, 4, or 5 depending upon the expected evaporating temperature.")]
public YesNoDefault CapacityRatingType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"The sensible cooling capacity in watts (W/C) at rated conditions. The value entered for this field must be greater than zero, with no default value. This value is only used if the Capacity Rating Type is UnitLoadFactorSensibleOnly. The value given must be based upon the difference between the chiller inlet and outlet air temperatures, not on the difference between the zone mean temperature and the outlet air temperature")]
[JsonProperty(@"The sensible cooling capacity in watts (W/C) at rated conditions. The value entered for this field must be greater than zero, with no default value. This value is only used if the Capacity Rating Type is UnitLoadFactorSensibleOnly. The value given must be based upon the difference between the chiller inlet and outlet air temperatures, not on the difference between the zone mean temperature and the outlet air temperature")]
public System.Single RatedUnitLoadFactor { get; set; } = ;
        
[Description(@"This value is only used if the Capacity Rating Type is NOT UnitLoadFactorSensibleOnly. For CapacityTotalSpecificConditions, this capacity includes both sensible and latent at the conditions given in the next two fields. Note that the European Standard ratings are sensible only and the European Nominal ratings include latent capacity as well. The value given here must correspond to the capacity rating type given previously")]
[JsonProperty(@"This value is only used if the Capacity Rating Type is NOT UnitLoadFactorSensibleOnly. For CapacityTotalSpecificConditions, this capacity includes both sensible and latent at the conditions given in the next two fields. Note that the European Standard ratings are sensible only and the European Nominal ratings include latent capacity as well. The value given here must correspond to the capacity rating type given previously")]
public System.Single RatedCapacity { get; set; } = ;
        
[Description(@"This field is ONLY used if the Capacity Rating Type is CapacityTotalSpecificConditions and represents the relative humidity at rated conditions. The default is 85.")]
[JsonProperty(@"This field is ONLY used if the Capacity Rating Type is CapacityTotalSpecificConditions and represents the relative humidity at rated conditions. The default is 85.")]
public System.Single RatedRelativeHumidity { get; set; } = 85;
        
[Description(@"If DXEvaporator, use evaporating temperature (saturated suction temperature) If BrineCoil, use Brine entering temperature used to set minimum suction pressure for DX systems and minimum brine temp for secondary systems")]
[JsonProperty(@"If DXEvaporator, use evaporating temperature (saturated suction temperature) If BrineCoil, use Brine entering temperature used to set minimum suction pressure for DX systems and minimum brine temp for secondary systems")]
public System.Single RatedCoolingSourceTemperature { get; set; } = ;
        
[Description(@"The rated difference between the air entering the refrigeration chiller and the cooling source temperature in degC.")]
[JsonProperty(@"The rated difference between the air entering the refrigeration chiller and the cooling source temperature in degC.")]
public System.Single RatedTemperatureDifferenceDt { get; set; } = ;
        
[Description(@"The maximum difference between the air entering the refrigeration chiller and the cooling source temperature in degC used to limit capacity during pull-down. defaults to 1.3 times the Rated Temperature Difference DT1")]
[JsonProperty(@"The maximum difference between the air entering the refrigeration chiller and the cooling source temperature in degC used to limit capacity during pull-down. defaults to 1.3 times the Rated Temperature Difference DT1")]
public System.Single MaximumTemperatureDifferenceBetweenInletAirAndEvaporatingTemperature { get; set; } = ;
        
[Description(@"This is the manufacturer's correction factor for coil material corresponding to rating")]
[JsonProperty(@"This is the manufacturer's correction factor for coil material corresponding to rating")]
public System.Single CoilMaterialCorrectionFactor { get; set; } = 1;
        
[Description(@"This is the manufacturer's correction factor for refrigerant corresponding to rating")]
[JsonProperty(@"This is the manufacturer's correction factor for refrigerant corresponding to rating")]
public System.Single RefrigerantCorrectionFactor { get; set; } = 1;
        
[Description(@"In each case, select the correction curve type that corresponds to the rating type. default LinearSHR60 unless Capacity Rating Type = CapacityTotalSpecificConditions")]
[JsonProperty(@"In each case, select the correction curve type that corresponds to the rating type. default LinearSHR60 unless Capacity Rating Type = CapacityTotalSpecificConditions")]
public YesNoDefault CapacityCorrectionCurveType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Should be blank for LinearSHR60 correction curve type")]
[JsonProperty(@"Should be blank for LinearSHR60 correction curve type")]
public System.String CapacityCorrectionCurveName { get; set; } = "";
        
[Description(@"only used when the capacity correction curve type is LinearSHR60")]
[JsonProperty(@"only used when the capacity correction curve type is LinearSHR60")]
public System.Single ShrCorrectionFactor { get; set; } = 1.48;
        
[Description(@"Include total for all heater power Do not include defrost heater power")]
[JsonProperty(@"Include total for all heater power Do not include defrost heater power")]
public System.Single RatedTotalHeatingPower { get; set; } = ;
        
[Description(@"Values will be used to multiply the total heating power Values in the schedule should be between 0.0 and 1.0 Defaults to always on if schedule name left blank.")]
[JsonProperty(@"Values will be used to multiply the total heating power Values in the schedule should be between 0.0 and 1.0 Defaults to always on if schedule name left blank.")]
public System.String HeatingPowerScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FanSpeedControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Fixed");
        
[JsonProperty(@"")]
public System.Single RatedFanPower { get; set; } = 375;
        
[JsonProperty(@"")]
public System.Single RatedAirFlow { get; set; } = ;
        
[Description(@"Minimum air flow fraction through fan")]
[JsonProperty(@"Minimum air flow fraction through fan")]
public System.Single MinimumFanAirFlowRatio { get; set; } = 0.2;
        
[Description(@"HotFluid includes either hot gas defrost for a DX system or Hot Brine defrost if this walk in is cooled by brine from a secondary chiller")]
[JsonProperty(@"HotFluid includes either hot gas defrost for a DX system or Hot Brine defrost if this walk in is cooled by brine from a secondary chiller")]
public YesNoDefault DefrostType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Electric");
        
[JsonProperty(@"")]
public YesNoDefault DefrostControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "TimeSchedule");
        
[Description(@"The schedule values should be 0 (off) or 1 (on)")]
[JsonProperty(@"The schedule values should be 0 (off) or 1 (on)")]
public System.String DefrostScheduleName { get; set; } = "";
        
[Description(@"The schedule values should be 0 (off) or 1 (on) The start time for each defrost period in this drip-down schedule should coincide with the start time for each defrost period in the defrost schedule (previous input field). The length of each defrost drip-down period must be greater than or equal to the corresponding defrost period specified in the defrost schedule. This extra time allows the melted frost to drip from the coil before refrigeration is restarted.")]
[JsonProperty(@"The schedule values should be 0 (off) or 1 (on) The start time for each defrost period in this drip-down schedule should coincide with the start time for each defrost period in the defrost schedule (previous input field). The length of each defrost drip-down period must be greater than or equal to the corresponding defrost period specified in the defrost schedule. This extra time allows the melted frost to drip from the coil before refrigeration is restarted.")]
public System.String DefrostDripDownScheduleName { get; set; } = "";
        
[Description(@"needed for all defrost types except none and offcycle")]
[JsonProperty(@"needed for all defrost types except none and offcycle")]
public System.Single DefrostPower { get; set; } = ;
        
[Description(@"This is the portion of the defrost energy that is available to melt frost Needed only for defrost control type TemperatureTermination defaults to 0.7 for electric defrost and to 0.3 for hot fluid defrost")]
[JsonProperty(@"This is the portion of the defrost energy that is available to melt frost Needed only for defrost control type TemperatureTermination defaults to 0.7 for electric defrost and to 0.3 for hot fluid defrost")]
public System.Single TemperatureTerminationDefrostFractionToIce { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault VerticalLocation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Middle");
        
[Description(@"This value is only used if the Cooling Source Type is DXEvaporator")]
[JsonProperty(@"This value is only used if the Cooling Source Type is DXEvaporator")]
public System.Single AverageRefrigerantChargeInventory { get; set; } = 0;
    }
    
    public enum CapacityRatingTypeType
    {
        
        [JsonProperty("CapacityTotalSpecificConditions")]
        CapacityTotalSpecificConditions = 0,
        
        [JsonProperty("EuropeanSC1NominalWet")]
        EuropeanSCNominalWet = 1,
        
        [JsonProperty("EuropeanSC1Standard")]
        EuropeanSCStandard = 2,
        
        [JsonProperty("EuropeanSC2NominalWet")]
        EuropeanSCNominalWet = 3,
        
        [JsonProperty("EuropeanSC2Standard")]
        EuropeanSCStandard = 4,
        
        [JsonProperty("EuropeanSC3NominalWet")]
        EuropeanSCNominalWet = 5,
        
        [JsonProperty("EuropeanSC3Standard")]
        EuropeanSCStandard = 6,
        
        [JsonProperty("EuropeanSC4NominalWet")]
        EuropeanSCNominalWet = 7,
        
        [JsonProperty("EuropeanSC4Standard")]
        EuropeanSCStandard = 8,
        
        [JsonProperty("EuropeanSC5NominalWet")]
        EuropeanSCNominalWet = 9,
        
        [JsonProperty("EuropeanSC5Standard")]
        EuropeanSCStandard = 10,
        
        [JsonProperty("FixedLinear")]
        FixedLinear = 11,
        
        [JsonProperty("UnitLoadFactorSensibleOnly")]
        UnitLoadFactorSensibleOnly = 12,
    }
    
    public enum CapacityCorrectionCurveTypeType
    {
        
        [JsonProperty("European")]
        European = 0,
        
        [JsonProperty("LinearSHR60")]
        LinearSHR = 1,
        
        [JsonProperty("QuadraticSHR")]
        QuadraticSHR = 2,
        
        [JsonProperty("TabularRHxDT1xTRoom")]
        TabularRHxDTxTRoom = 3,
    }
    
    public enum FanSpeedControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Fixed")]
        Fixed = 1,
        
        [JsonProperty("FixedLinear")]
        FixedLinear = 2,
        
        [JsonProperty("TwoSpeed")]
        TwoSpeed = 3,
        
        [JsonProperty("VariableSpeed")]
        VariableSpeed = 4,
    }
    
    public enum DefrostTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electric")]
        Electric = 1,
        
        [JsonProperty("HotFluid")]
        HotFluid = 2,
        
        [JsonProperty("None")]
        None = 3,
        
        [JsonProperty("OffCycle")]
        OffCycle = 4,
    }
    
    public enum DefrostControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("TemperatureTermination")]
        TemperatureTermination = 1,
        
        [JsonProperty("TimeSchedule")]
        TimeSchedule = 2,
    }
    
    public enum VerticalLocationType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Ceiling")]
        Ceiling = 1,
        
        [JsonProperty("Floor")]
        Floor = 2,
        
        [JsonProperty("Middle")]
        Middle = 3,
    }
    
    [Description(@"Works in conjunction with one or multiple air chillers, compressor racks, refrigeration systems, or refrigeration secondary system objects to simulate the performance of a group of air chillers cooling a single zone. The chiller set model passes information about the zone conditions to determine the performance of individual chiller coils within the set, thus providing the sensible and latent heat exchange with the zone environment.")]
    [JsonObject("ZoneHVAC:RefrigerationChillerSet")]
    public class ZoneHVAC_RefrigerationChillerSet
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"This must be a controlled zone and appear in a ZoneHVAC:EquipmentConnections object.")]
[JsonProperty(@"This must be a controlled zone and appear in a ZoneHVAC:EquipmentConnections object.")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Not used - reserved for future use Name of the zone exhaust node (see Node) from which the refrigeration chiller draws its indoor air. This should be one of the zone exhaust nodes for the zone cooled by the chiller set.")]
[JsonProperty(@"Not used - reserved for future use Name of the zone exhaust node (see Node) from which the refrigeration chiller draws its indoor air. This should be one of the zone exhaust nodes for the zone cooled by the chiller set.")]
public System.String AirInletNodeName { get; set; } = "";
        
[Description(@"Not used - reserved for future use The name of the node where the chiller coil sends its outlet air, which must be one of the inlet air nodes for the zone which is being cooled.")]
[JsonProperty(@"Not used - reserved for future use The name of the node where the chiller coil sends its outlet air, which must be one of the inlet air nodes for the zone which is being cooled.")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Chillers { get; set; } = "";
    }
}
namespace EnergyPlus.RoomAirModels
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Selects the type of room air model to be used in a given zone. If no RoomAirModel" +
        "Type object is specified then the default Mixing model (all zone air at the same" +
        " temperature) will be used.")]
    [JsonObject("RoomAirModelType")]
    public class RoomAirModelType
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Mixing = Complete mixing air model UserDefined = UserDefined Room Air Temperature Patterns needs RoomAir:TemperaturePattern:UserDefined object referencing this Zone OneNodeDisplacementVentilation = Mundt roomair model for displacement ventilation with single floor air node needs RoomAirSettings:OneNodeDisplacementVentilation object referencing this Zone ThreeNodeDisplacementVentilation = RoomAir modeling using UCSD three-node displacement ventilation model needs RoomAirSettings:ThreeNodeDisplacementVentilation object referencing this Zone CrossVentilation = RoomAir modeling using UCSD two-zone cross ventilation model needs RoomAirSettings:CrossVentilation object referencing this Zone UnderFloorAirDistributionInterior = 2-Node UFAD model for interior zones needs RoomAirSettings:UnderFloorAirDistributionInterior object referencing this Zone UnderFloorAirDistributionExterior = RoomAir modeling using 2-Node UFAD model for exterior zones needs RoomAirSettings:UnderFloorAirDistributionExterior object referencing this Zone AirflowNetwork = RoomAir modeling using AirflowNetwork needs RoomAirSettings:AirflowNetwork object referencing this Zone")]
[JsonProperty(@"Mixing = Complete mixing air model UserDefined = UserDefined Room Air Temperature Patterns needs RoomAir:TemperaturePattern:UserDefined object referencing this Zone OneNodeDisplacementVentilation = Mundt roomair model for displacement ventilation with single floor air node needs RoomAirSettings:OneNodeDisplacementVentilation object referencing this Zone ThreeNodeDisplacementVentilation = RoomAir modeling using UCSD three-node displacement ventilation model needs RoomAirSettings:ThreeNodeDisplacementVentilation object referencing this Zone CrossVentilation = RoomAir modeling using UCSD two-zone cross ventilation model needs RoomAirSettings:CrossVentilation object referencing this Zone UnderFloorAirDistributionInterior = 2-Node UFAD model for interior zones needs RoomAirSettings:UnderFloorAirDistributionInterior object referencing this Zone UnderFloorAirDistributionExterior = RoomAir modeling using 2-Node UFAD model for exterior zones needs RoomAirSettings:UnderFloorAirDistributionExterior object referencing this Zone AirflowNetwork = RoomAir modeling using AirflowNetwork needs RoomAirSettings:AirflowNetwork object referencing this Zone")]
public YesNoDefault RoomAirModelingType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Mixing");
        
[JsonProperty(@"")]
public YesNoDefault AirTemperatureCouplingStrategy { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Direct");
    }
    
    public enum RoomAirModelingTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirflowNetwork")]
        AirflowNetwork = 1,
        
        [JsonProperty("CrossVentilation")]
        CrossVentilation = 2,
        
        [JsonProperty("Mixing")]
        Mixing = 3,
        
        [JsonProperty("OneNodeDisplacementVentilation")]
        OneNodeDisplacementVentilation = 4,
        
        [JsonProperty("ThreeNodeDisplacementVentilation")]
        ThreeNodeDisplacementVentilation = 5,
        
        [JsonProperty("UnderFloorAirDistributionExterior")]
        UnderFloorAirDistributionExterior = 6,
        
        [JsonProperty("UnderFloorAirDistributionInterior")]
        UnderFloorAirDistributionInterior = 7,
        
        [JsonProperty("UserDefined")]
        UserDefined = 8,
    }
    
    public enum AirTemperatureCouplingStrategyType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Direct")]
        Direct = 1,
        
        [JsonProperty("Indirect")]
        Indirect = 2,
    }
    
    [Description("Used to explicitly define temperature patterns that are to be applied to the mean" +
        " air temperature within a thermal zone. Used with RoomAirModelType = UserDefined" +
        ".")]
    [JsonObject("RoomAir:TemperaturePattern:UserDefined")]
    public class RoomAir_TemperaturePattern_UserDefined
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Availability schedule name for this model. Schedule value > 0 means the model is active. Schedule value = 0 means the model is inactive and the zone will be modeled as fully mixed (Mixing). If this field is blank, the model is always active.")]
[JsonProperty(@"Availability schedule name for this model. Schedule value > 0 means the model is active. Schedule value = 0 means the model is inactive and the zone will be modeled as fully mixed (Mixing). If this field is blank, the model is always active.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"The schedule should contain integer values that correspond to unique Control Integer fields in one of the RoomAir:TemperaturePattern:* objects.")]
[JsonProperty(@"The schedule should contain integer values that correspond to unique Control Integer fields in one of the RoomAir:TemperaturePattern:* objects.")]
public System.String PatternControlScheduleName { get; set; } = "";
    }
    
    [Description("Used to model room air with a fixed temperature gradient in the vertical directio" +
        "n. Used in combination with RoomAir:TemperaturePattern:UserDefined.")]
    [JsonObject("RoomAir:TemperaturePattern:ConstantGradient")]
    public class RoomAir_TemperaturePattern_ConstantGradient
    {
        
[JsonProperty(@"")]
public System.String RoomAirTemperaturePatternConstantGradientName { get; set; } = "";
        
[Description(@"reference this entry in Schedule Name")]
[JsonProperty(@"reference this entry in Schedule Name")]
public System.Single ControlIntegerForPatternControlScheduleName { get; set; } = ;
        
[Description(@"= (Temp at thermostat- Mean Air Temp)")]
[JsonProperty(@"= (Temp at thermostat- Mean Air Temp)")]
public System.Single ThermostatOffset { get; set; } = ;
        
[Description(@"= (Tleaving - Mean Air Temp )")]
[JsonProperty(@"= (Tleaving - Mean Air Temp )")]
public System.Single ReturnAirOffset { get; set; } = ;
        
[Description(@"= (Texhaust - Mean Air Temp) deg C")]
[JsonProperty(@"= (Texhaust - Mean Air Temp) deg C")]
public System.Single ExhaustAirOffset { get; set; } = ;
        
[Description(@"Slope of temperature change in vertical direction")]
[JsonProperty(@"Slope of temperature change in vertical direction")]
public System.Single TemperatureGradient { get; set; } = ;
    }
    
    [Description("Used to model room air with two temperature gradients in the vertical direction. " +
        "Used in combination with RoomAir:TemperaturePattern:UserDefined.")]
    [JsonObject("RoomAir:TemperaturePattern:TwoGradient")]
    public class RoomAir_TemperaturePattern_TwoGradient
    {
        
[JsonProperty(@"")]
public System.String RoomAirTemperaturePatternTwoGradientName { get; set; } = "";
        
[Description(@"reference this entry in Schedule Name")]
[JsonProperty(@"reference this entry in Schedule Name")]
public System.Single ControlIntegerForPatternControlScheduleName { get; set; } = ;
        
[Description(@"= Distance from floor of zone")]
[JsonProperty(@"= Distance from floor of zone")]
public System.Single ThermostatHeight { get; set; } = ;
        
[Description(@"= Distance from floor of zone")]
[JsonProperty(@"= Distance from floor of zone")]
public System.Single ReturnAirHeight { get; set; } = ;
        
[Description(@"= Distance from floor of zone")]
[JsonProperty(@"= Distance from floor of zone")]
public System.Single ExhaustAirHeight { get; set; } = ;
        
[Description(@"Slope of temperature change in vertical direction")]
[JsonProperty(@"Slope of temperature change in vertical direction")]
public System.Single TemperatureGradientLowerBound { get; set; } = ;
        
[Description(@"Slope of temperature change in vertical direction")]
[JsonProperty(@"Slope of temperature change in vertical direction")]
public System.Single TemperatureGradientUpperBound { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault GradientInterpolationMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single UpperTemperatureBound { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LowerTemperatureBound { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single UpperHeatRateBound { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LowerHeatRateBound { get; set; } = ;
    }
    
    public enum GradientInterpolationModeType
    {
        
        [JsonProperty("OutdoorDryBulbTemperature")]
        OutdoorDryBulbTemperature = 0,
        
        [JsonProperty("SensibleCoolingLoad")]
        SensibleCoolingLoad = 1,
        
        [JsonProperty("SensibleHeatingLoad")]
        SensibleHeatingLoad = 2,
        
        [JsonProperty("ZoneAndOutdoorTemperatureDifference")]
        ZoneAndOutdoorTemperatureDifference = 3,
        
        [JsonProperty("ZoneDryBulbTemperature")]
        ZoneDryBulbTemperature = 4,
    }
    
    [Description(@"Defines a distribution pattern for air temperatures relative to the current mean air temperature as a function of height. The height, referred to as Zeta, is nondimensional by normalizing with the zone ceiling height. Used in combination with RoomAir:TemperaturePattern:UserDefined.")]
    [JsonObject("RoomAir:TemperaturePattern:NondimensionalHeight")]
    public class RoomAir_TemperaturePattern_NondimensionalHeight
    {
        
[Description(@"this value should appear in as a schedule value")]
[JsonProperty(@"this value should appear in as a schedule value")]
public System.Single ControlIntegerForPatternControlScheduleName { get; set; } = ;
        
[Description(@"= (Temp at thermostat- Mean Air Temp)")]
[JsonProperty(@"= (Temp at thermostat- Mean Air Temp)")]
public System.Single ThermostatOffset { get; set; } = ;
        
[Description(@"= (Temp leaving - Mean Air Temp ) deg C")]
[JsonProperty(@"= (Temp leaving - Mean Air Temp ) deg C")]
public System.Single ReturnAirOffset { get; set; } = ;
        
[Description(@"= (Temp exhaust - Mean Air Temp) deg C the remaining fields have pairs that describe the relative temperature pattern in the vertical direction of a zone Zeta is the nondimensional height (in z-direction). on [0..1] DeltaTai =  (Tai - MAT) in units of deg. C relative deg C on [-10.0 .. 20.0 ]")]
[JsonProperty(@"= (Temp exhaust - Mean Air Temp) deg C the remaining fields have pairs that describe the relative temperature pattern in the vertical direction of a zone Zeta is the nondimensional height (in z-direction). on [0..1] DeltaTai =  (Tai - MAT) in units of deg. C relative deg C on [-10.0 .. 20.0 ]")]
public System.Single ExhaustAirOffset { get; set; } = ;
        
[JsonProperty(@"")]
public System.String Pairs { get; set; } = "";
    }
    
    [Description(@"Defines a distribution pattern for the air temperatures adjacent to individual surfaces. This allows controlling the adjacent air temperature on a surface-by-surface basis rather than by height. This allows modeling different adjacent air temperatures on the opposite sides of the zone. Used in combination with RoomAir:TemperaturePattern:UserDefined.")]
    [JsonObject("RoomAir:TemperaturePattern:SurfaceMapping")]
    public class RoomAir_TemperaturePattern_SurfaceMapping
    {
        
[Description(@"reference this entry in schedule")]
[JsonProperty(@"reference this entry in schedule")]
public System.Single ControlIntegerForPatternControlScheduleName { get; set; } = ;
        
[Description(@"= (Temp at thermostat- Mean Air Temp)")]
[JsonProperty(@"= (Temp at thermostat- Mean Air Temp)")]
public System.Single ThermostatOffset { get; set; } = ;
        
[Description(@"= (Tleaving - Mean Air Temp ) deg C")]
[JsonProperty(@"= (Tleaving - Mean Air Temp ) deg C")]
public System.Single ReturnAirOffset { get; set; } = ;
        
[Description(@"= (Texhaust - Mean Air Temp) deg C")]
[JsonProperty(@"= (Texhaust - Mean Air Temp) deg C")]
public System.Single ExhaustAirOffset { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceDeltas { get; set; } = "";
    }
    
    [Description("Define an air node for some types of nodal room air models")]
    [JsonObject("RoomAir:Node")]
    public class RoomAir_Node
    {
        
[JsonProperty(@"")]
public YesNoDefault NodeType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single HeightOfNodalControlVolumeCenter { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
    }
    
    public enum NodeTypeType
    {
        
        [JsonProperty("Ceiling")]
        Ceiling = 0,
        
        [JsonProperty("Control")]
        Control = 1,
        
        [JsonProperty("Floor")]
        Floor = 2,
        
        [JsonProperty("Inlet")]
        Inlet = 3,
        
        [JsonProperty("MundtRoom")]
        MundtRoom = 4,
        
        [JsonProperty("Return")]
        Return = 5,
    }
    
    [Description("The Mundt model for displacement ventilation")]
    [JsonObject("RoomAirSettings:OneNodeDisplacementVentilation")]
    public class RoomAirSettings_OneNodeDisplacementVentilation
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single FractionOfConvectiveInternalLoadsAddedToFloorAir { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FractionOfInfiltrationInternalLoadsAddedToFloorAir { get; set; } = ;
    }
    
    [Description("The UCSD model for Displacement Ventilation")]
    [JsonObject("RoomAirSettings:ThreeNodeDisplacementVentilation")]
    public class RoomAirSettings_ThreeNodeDisplacementVentilation
    {
        
[Description(@"Name of Zone being described. Any existing zone name")]
[JsonProperty(@"Name of Zone being described. Any existing zone name")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Distribution of the convective heat gains between the occupied and mixed zones. 0<= Accepted Value <= 1. In the DV model 1 means all convective gains in the lower layer.")]
[JsonProperty(@"Distribution of the convective heat gains between the occupied and mixed zones. 0<= Accepted Value <= 1. In the DV model 1 means all convective gains in the lower layer.")]
public System.String GainDistributionScheduleName { get; set; } = "";
        
[Description(@"Used only in the UCSD displacement ventilation model. Effective number of separate plumes per occupant in the occupied zone. Plumes that merge together in the occupied zone count as one.")]
[JsonProperty(@"Used only in the UCSD displacement ventilation model. Effective number of separate plumes per occupant in the occupied zone. Plumes that merge together in the occupied zone count as one.")]
public System.Single NumberOfPlumesPerOccupant { get; set; } = 1;
        
[Description(@"Height of thermostat/temperature control sensor above floor")]
[JsonProperty(@"Height of thermostat/temperature control sensor above floor")]
public System.Single ThermostatHeight { get; set; } = 1.1;
        
[Description(@"Height at which air temperature is calculated for comfort purposes")]
[JsonProperty(@"Height at which air temperature is calculated for comfort purposes")]
public System.Single ComfortHeight { get; set; } = 1.1;
        
[Description(@"Minimum temperature difference between predicted upper and lower layer temperatures above which DV auxiliary outputs are calculated. These outputs are 'DV Transition Height', 'DV Fraction Min Recommended Flow Rate' 'DV Average Temp Gradient' and 'DV Maximum Temp Gradient'. They are set to negative values when the temperature difference is less than the threshold and the output 'DV Zone Is Mixed' is set to 1")]
[JsonProperty(@"Minimum temperature difference between predicted upper and lower layer temperatures above which DV auxiliary outputs are calculated. These outputs are 'DV Transition Height', 'DV Fraction Min Recommended Flow Rate' 'DV Average Temp Gradient' and 'DV Maximum Temp Gradient'. They are set to negative values when the temperature difference is less than the threshold and the output 'DV Zone Is Mixed' is set to 1")]
public System.Single TemperatureDifferenceThresholdForReporting { get; set; } = 0.4;
    }
    
    [Description(@"This UCSD Cross Ventilation Room Air Model provides a simple model for heat transfer and vertical temperature profile prediction in cross ventilated rooms. The model distinguishes two regions in the room, the main jet region and the recirculations, and predicts characteristic airflow velocities and average air temperatures. Used with RoomAirModelType = CrossVentilation.")]
    [JsonObject("RoomAirSettings:CrossVentilation")]
    public class RoomAirSettings_CrossVentilation
    {
        
[Description(@"Name of Zone being described. Any existing zone name")]
[JsonProperty(@"Name of Zone being described. Any existing zone name")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Distribution of the convective heat gains between the jet and recirculation zones. 0<= Accepted Value <= 1. In the CV model 1 means all convective gains in the jet region.")]
[JsonProperty(@"Distribution of the convective heat gains between the jet and recirculation zones. 0<= Accepted Value <= 1. In the CV model 1 means all convective gains in the jet region.")]
public System.String GainDistributionScheduleName { get; set; } = "";
        
[Description(@"Required field whenever thermal comfort is predicted defines Air temperature and Airflow velocity that will be used in the Fanger model conditions must refer to one of the two regions: jet or recirculation")]
[JsonProperty(@"Required field whenever thermal comfort is predicted defines Air temperature and Airflow velocity that will be used in the Fanger model conditions must refer to one of the two regions: jet or recirculation")]
public YesNoDefault AirflowRegionUsedForThermalComfortEvaluation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum AirflowRegionUsedForThermalComfortEvaluationType
    {
        
        [JsonProperty("Jet")]
        Jet = 0,
        
        [JsonProperty("Recirculation")]
        Recirculation = 1,
    }
    
    [Description(@"This Room Air Model is applicable to interior spaces that are served by an underfloor air distribution system. The dominant sources of heat gain should be from people, equipment, and other localized sources located in the occupied part of the room. The model should be used with caution in zones which have large heat gains or losses through exterior walls or windows or which have considerable direct solar gain. Used with RoomAirModelType = UnderFloorAirDistributionInterior.")]
    [JsonObject("RoomAirSettings:UnderFloorAirDistributionInterior")]
    public class RoomAirSettings_UnderFloorAirDistributionInterior
    {
        
[Description(@"Name of Zone with underfloor air distribution")]
[JsonProperty(@"Name of Zone with underfloor air distribution")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Total number of diffusers in this zone")]
[JsonProperty(@"Total number of diffusers in this zone")]
public System.String NumberOfDiffusers { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.String PowerPerPlume { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.String DesignEffectiveAreaOfDiffuser { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.String DiffuserSlotAngleFromVertical { get; set; } = (System.String)Autocalculate;
        
[Description(@"Height of thermostat/temperature control sensor above floor")]
[JsonProperty(@"Height of thermostat/temperature control sensor above floor")]
public System.Single ThermostatHeight { get; set; } = 1.2;
        
[Description(@"Height at which air temperature is calculated for comfort purposes")]
[JsonProperty(@"Height at which air temperature is calculated for comfort purposes")]
public System.Single ComfortHeight { get; set; } = 1.1;
        
[Description(@"Minimum temperature difference between predicted upper and lower layer temperatures above which UFAD auxiliary outputs are calculated. These outputs are 'UF Transition Height' and 'UF Average Temp Gradient'. They are set to zero values when the temperature difference is less than the threshold and the output 'UF Zone Is Mixed' is set to 1")]
[JsonProperty(@"Minimum temperature difference between predicted upper and lower layer temperatures above which UFAD auxiliary outputs are calculated. These outputs are 'UF Transition Height' and 'UF Average Temp Gradient'. They are set to zero values when the temperature difference is less than the threshold and the output 'UF Zone Is Mixed' is set to 1")]
public System.Single TemperatureDifferenceThresholdForReporting { get; set; } = 0.4;
        
[JsonProperty(@"")]
public YesNoDefault FloorDiffuserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Swirl");
        
[Description(@"user-specified height above floor of boundary between occupied and upper subzones")]
[JsonProperty(@"user-specified height above floor of boundary between occupied and upper subzones")]
public System.String TransitionHeight { get; set; } = (System.String)1.7;
        
[Description(@"Coefficient A in Formula Kc = A*Gamma**B + C + D*Gamma + E*Gamma**2 Kc is the fraction of the total zone load attributable to the lower subzone")]
[JsonProperty(@"Coefficient A in Formula Kc = A*Gamma**B + C + D*Gamma + E*Gamma**2 Kc is the fraction of the total zone load attributable to the lower subzone")]
public System.String CoefficientA { get; set; } = (System.String)Autocalculate;
        
[Description(@"Coefficient B in Formula Kc = A*Gamma**B + C + D*Gamma + E*Gamma**2 Kc is the fraction of the total zone load attributable to the lower subzone")]
[JsonProperty(@"Coefficient B in Formula Kc = A*Gamma**B + C + D*Gamma + E*Gamma**2 Kc is the fraction of the total zone load attributable to the lower subzone")]
public System.String CoefficientB { get; set; } = (System.String)Autocalculate;
        
[Description(@"Coefficient C in Formula Kc = A*Gamma**B + C + D*Gamma + E*Gamma**2 Kc is the fraction of the total zone load attributable to the lower subzone")]
[JsonProperty(@"Coefficient C in Formula Kc = A*Gamma**B + C + D*Gamma + E*Gamma**2 Kc is the fraction of the total zone load attributable to the lower subzone")]
public System.String CoefficientC { get; set; } = (System.String)Autocalculate;
        
[Description(@"Coefficient D in Formula Kc = A*Gamma**B + C + D*Gamma + E*Gamma**2 Kc is the fraction of the total zone load attributable to the lower subzone")]
[JsonProperty(@"Coefficient D in Formula Kc = A*Gamma**B + C + D*Gamma + E*Gamma**2 Kc is the fraction of the total zone load attributable to the lower subzone")]
public System.String CoefficientD { get; set; } = (System.String)Autocalculate;
        
[Description(@"Coefficient E in Formula Kc = A*Gamma**B + C + D*Gamma + E*Gamma**2 Kc is the fraction of the total zone load attributable to the lower subzone")]
[JsonProperty(@"Coefficient E in Formula Kc = A*Gamma**B + C + D*Gamma + E*Gamma**2 Kc is the fraction of the total zone load attributable to the lower subzone")]
public System.String CoefficientE { get; set; } = (System.String)Autocalculate;
    }
    
    public enum FloorDiffuserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Custom")]
        Custom = 1,
        
        [JsonProperty("HorizontalSwirl")]
        HorizontalSwirl = 2,
        
        [JsonProperty("LinearBarGrille")]
        LinearBarGrille = 3,
        
        [JsonProperty("Swirl")]
        Swirl = 4,
        
        [JsonProperty("VariableArea")]
        VariableArea = 5,
    }
    
    [Description(@"Applicable to exterior spaces that are served by an underfloor air distribution system. The dominant sources of heat gain should be from people, equipment, and other localized sources located in the occupied part of the room, as well as convective gain coming from a warm window. Used with RoomAirModelType = CrossVentilation.")]
    [JsonObject("RoomAirSettings:UnderFloorAirDistributionExterior")]
    public class RoomAirSettings_UnderFloorAirDistributionExterior
    {
        
[Description(@"Name of Zone being described. Any existing zone name")]
[JsonProperty(@"Name of Zone being described. Any existing zone name")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String NumberOfDiffusersPerZone { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.String PowerPerPlume { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.String DesignEffectiveAreaOfDiffuser { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.String DiffuserSlotAngleFromVertical { get; set; } = (System.String)Autocalculate;
        
[Description(@"Height of thermostat/temperature control sensor above floor")]
[JsonProperty(@"Height of thermostat/temperature control sensor above floor")]
public System.Single ThermostatHeight { get; set; } = 1.2;
        
[Description(@"Height at which Air temperature is calculated for comfort purposes")]
[JsonProperty(@"Height at which Air temperature is calculated for comfort purposes")]
public System.Single ComfortHeight { get; set; } = 1.1;
        
[Description(@"Minimum temperature difference between upper and lower layer temperatures above which UFAD auxiliary outputs are calculated. These outputs are 'UF Transition Height' and 'UF Average Temp Gradient'. They are set to zero values when the temperature difference is less than the threshold and the output 'UF Zone Is Mixed' is set to 1")]
[JsonProperty(@"Minimum temperature difference between upper and lower layer temperatures above which UFAD auxiliary outputs are calculated. These outputs are 'UF Transition Height' and 'UF Average Temp Gradient'. They are set to zero values when the temperature difference is less than the threshold and the output 'UF Zone Is Mixed' is set to 1")]
public System.Single TemperatureDifferenceThresholdForReporting { get; set; } = 0.4;
        
[JsonProperty(@"")]
public YesNoDefault FloorDiffuserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Swirl");
        
[Description(@"User-specified height above floor of boundary between occupied and upper subzones")]
[JsonProperty(@"User-specified height above floor of boundary between occupied and upper subzones")]
public System.String TransitionHeight { get; set; } = (System.String)1.7;
        
[Description(@"Kc is the fraction of the total zone load attributable to the lower subzone")]
[JsonProperty(@"Kc is the fraction of the total zone load attributable to the lower subzone")]
public System.String CoefficientAInFormulaKcAGammaBCDGammaEGamma { get; set; } = (System.String)Autocalculate;
        
[Description(@"Kc is the fraction of the total zone load attributable to the lower subzone")]
[JsonProperty(@"Kc is the fraction of the total zone load attributable to the lower subzone")]
public System.String CoefficientBInFormulaKcAGammaBCDGammaEGamma { get; set; } = (System.String)Autocalculate;
        
[Description(@"Kc is the fraction of the total zone load attributable to the lower subzone")]
[JsonProperty(@"Kc is the fraction of the total zone load attributable to the lower subzone")]
public System.String CoefficientCInFormulaKcAGammaBCDGammaEGamma { get; set; } = (System.String)Autocalculate;
        
[Description(@"Kc is the fraction of the total zone load attributable to the lower subzone")]
[JsonProperty(@"Kc is the fraction of the total zone load attributable to the lower subzone")]
public System.String CoefficientDInFormulaKcAGammaBCDGammaEGamma { get; set; } = (System.String)Autocalculate;
        
[Description(@"Kc is the fraction of the total zone load attributable to the lower subzone")]
[JsonProperty(@"Kc is the fraction of the total zone load attributable to the lower subzone")]
public System.String CoefficientEInFormulaKcAGammaBCDGammaEGamma { get; set; } = (System.String)Autocalculate;
    }
    
    public enum FloorDiffuserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Custom")]
        Custom = 1,
        
        [JsonProperty("HorizontalSwirl")]
        HorizontalSwirl = 2,
        
        [JsonProperty("LinearBarGrille")]
        LinearBarGrille = 3,
        
        [JsonProperty("Swirl")]
        Swirl = 4,
        
        [JsonProperty("VariableArea")]
        VariableArea = 5,
    }
    
    [Description("define an air node for some types of nodal air models")]
    [JsonObject("RoomAir:Node:AirflowNetwork")]
    public class RoomAir_Node_AirflowNetwork
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single FractionOfZoneAirVolume { get; set; } = ;
        
[JsonProperty(@"")]
public System.String RoomairNodeAirflownetworkAdjacentsurfacelistName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String RoomairNodeAirflownetworkInternalgainsName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String RoomairNodeAirflownetworkHvacequipmentName { get; set; } = "";
    }
    
    [Description(null)]
    [JsonObject("RoomAir:Node:AirflowNetwork:AdjacentSurfaceList")]
    public class RoomAir_Node_AirflowNetwork_AdjacentSurfaceList
    {
        
[JsonProperty(@"")]
public System.String Surfaces { get; set; } = "";
    }
    
    [Description("define the internal gains that are associated with one particular RoomAir:Node")]
    [JsonObject("RoomAir:Node:AirflowNetwork:InternalGains")]
    public class RoomAir_Node_AirflowNetwork_InternalGains
    {
        
[JsonProperty(@"")]
public System.String Gains { get; set; } = "";
    }
    
    [Description("define the zone equipment associated with one particular RoomAir:Node")]
    [JsonObject("RoomAir:Node:AirflowNetwork:HVACEquipment")]
    public class RoomAir_Node_AirflowNetwork_HVACEquipment
    {
        
[JsonProperty(@"")]
public System.String EquipmentFractions { get; set; } = "";
    }
    
    [Description("RoomAir modeling using Airflow pressure network solver")]
    [JsonObject("RoomAirSettings:AirflowNetwork")]
    public class RoomAirSettings_AirflowNetwork
    {
        
[Description(@"Name of Zone being described. Any existing zone name")]
[JsonProperty(@"Name of Zone being described. Any existing zone name")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControlPointRoomairflownetworkNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Nodes { get; set; } = "";
    }
}
namespace EnergyPlus.Schedules
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("ScheduleTypeLimits specifies the data types and limits for the values contained i" +
        "n schedules")]
    [JsonObject("ScheduleTypeLimits")]
    public class ScheduleTypeLimits
    {
        
[Description(@"lower limit (real or integer) for the Schedule Type. e.g. if fraction, this is 0.0")]
[JsonProperty(@"lower limit (real or integer) for the Schedule Type. e.g. if fraction, this is 0.0")]
public System.Single LowerLimitValue { get; set; } = ;
        
[Description(@"upper limit (real or integer) for the Schedule Type. e.g. if fraction, this is 1.0")]
[JsonProperty(@"upper limit (real or integer) for the Schedule Type. e.g. if fraction, this is 1.0")]
public System.Single UpperLimitValue { get; set; } = ;
        
[Description(@"Numeric type is either Continuous (all numbers within the min and max are valid or Discrete (only integer numbers between min and max are valid. (Could also allow REAL and INTEGER to mean the same things)")]
[JsonProperty(@"Numeric type is either Continuous (all numbers within the min and max are valid or Discrete (only integer numbers between min and max are valid. (Could also allow REAL and INTEGER to mean the same things)")]
public YesNoDefault NumericType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Temperature (C or F) DeltaTemperature (C or F) PrecipitationRate (m/hr or ft/hr) Angle (degrees) Convection Coefficient (W/m2-K or Btu/sqft-hr-F) Activity Level (W/person) Velocity (m/s or ft/min) Capacity (W or Btu/h) Power (W)")]
[JsonProperty(@"Temperature (C or F) DeltaTemperature (C or F) PrecipitationRate (m/hr or ft/hr) Angle (degrees) Convection Coefficient (W/m2-K or Btu/sqft-hr-F) Activity Level (W/person) Velocity (m/s or ft/min) Capacity (W or Btu/h) Power (W)")]
public YesNoDefault UnitType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Dimensionless");
    }
    
    public enum NumericTypeType
    {
        
        [JsonProperty("Continuous")]
        Continuous = 0,
        
        [JsonProperty("Discrete")]
        Discrete = 1,
    }
    
    public enum UnitTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ActivityLevel")]
        ActivityLevel = 1,
        
        [JsonProperty("Angle")]
        Angle = 2,
        
        [JsonProperty("Availability")]
        Availability = 3,
        
        [JsonProperty("Capacity")]
        Capacity = 4,
        
        [JsonProperty("Control")]
        Control = 5,
        
        [JsonProperty("ConvectionCoefficient")]
        ConvectionCoefficient = 6,
        
        [JsonProperty("DeltaTemperature")]
        DeltaTemperature = 7,
        
        [JsonProperty("Dimensionless")]
        Dimensionless = 8,
        
        [JsonProperty("Mode")]
        Mode = 9,
        
        [JsonProperty("Percent")]
        Percent = 10,
        
        [JsonProperty("Power")]
        Power = 11,
        
        [JsonProperty("PrecipitationRate")]
        PrecipitationRate = 12,
        
        [JsonProperty("Temperature")]
        Temperature = 13,
        
        [JsonProperty("Velocity")]
        Velocity = 14,
    }
    
    [Description("A Schedule:Day:Hourly contains 24 values for each hour of the day.")]
    [JsonObject("Schedule:Day:Hourly")]
    public class Schedule_Day_Hourly
    {
        
[JsonProperty(@"")]
public System.String ScheduleTypeLimitsName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Hour { get; set; } = 0;
    }
    
    [Description("A Schedule:Day:Interval contains a full day of values with specified end times fo" +
        "r each value Currently, is set up to allow for 10 minute intervals for an entire" +
        " day.")]
    [JsonObject("Schedule:Day:Interval")]
    public class Schedule_Day_Interval
    {
        
[JsonProperty(@"")]
public System.String ScheduleTypeLimitsName { get; set; } = "";
        
[Description(@"when the interval does not match the user specified timestep a Average choice will average between the intervals request (to timestep resolution. A No choice will use the interval value at the simulation timestep without regard to if it matches the boundary or not. A Linear choice will interpolate linearly between successive values.")]
[JsonProperty(@"when the interval does not match the user specified timestep a Average choice will average between the intervals request (to timestep resolution. A No choice will use the interval value at the simulation timestep without regard to if it matches the boundary or not. A Linear choice will interpolate linearly between successive values.")]
public YesNoDefault InterpolateToTimestep { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public System.String Data { get; set; } = "";
    }
    
    public enum InterpolateToTimestepType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Average")]
        Average = 1,
        
        [JsonProperty("Linear")]
        Linear = 2,
        
        [JsonProperty("No")]
        No = 3,
    }
    
    [Description("Schedule:Day:List will allow the user to list 24 hours worth of values, which can" +
        " be sub-hourly in nature.")]
    [JsonObject("Schedule:Day:List")]
    public class Schedule_Day_List
    {
        
[JsonProperty(@"")]
public System.String ScheduleTypeLimitsName { get; set; } = "";
        
[Description(@"when the interval does not match the user specified timestep a "Average" choice will average between the intervals request (to timestep resolution. A "No" choice will use the interval value at the simulation timestep without regard to if it matches the boundary or not. A "Linear" choice will interpolate linearly between successive values.")]
[JsonProperty(@"when the interval does not match the user specified timestep a "Average" choice will average between the intervals request (to timestep resolution. A "No" choice will use the interval value at the simulation timestep without regard to if it matches the boundary or not. A "Linear" choice will interpolate linearly between successive values.")]
public YesNoDefault InterpolateToTimestep { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Must be evenly divisible into 60")]
[JsonProperty(@"Must be evenly divisible into 60")]
public System.Single MinutesPerItem { get; set; } = ;
        
[JsonProperty(@"")]
public System.String Extensions { get; set; } = "";
    }
    
    public enum InterpolateToTimestepType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Average")]
        Average = 1,
        
        [JsonProperty("Linear")]
        Linear = 2,
        
        [JsonProperty("No")]
        No = 3,
    }
    
    [Description("A Schedule:Week:Daily contains 12 Schedule:Day:Hourly objects, one for each day t" +
        "ype.")]
    [JsonObject("Schedule:Week:Daily")]
    public class Schedule_Week_Daily
    {
        
[JsonProperty(@"")]
public System.String SundayScheduleDayName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MondayScheduleDayName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String TuesdayScheduleDayName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WednesdayScheduleDayName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ThursdayScheduleDayName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FridayScheduleDayName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SaturdayScheduleDayName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HolidayScheduleDayName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SummerdesigndayScheduleDayName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WinterdesigndayScheduleDayName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CustomdayScheduleDayName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CustomdayScheduleDayName { get; set; } = "";
    }
    
    [Description("Compact definition for Schedule:Day:List")]
    [JsonObject("Schedule:Week:Compact")]
    public class Schedule_Week_Compact
    {
        
[JsonProperty(@"")]
public System.String Data { get; set; } = "";
    }
    
    [Description("A Schedule:Year contains from 1 to 52 week schedules")]
    [JsonObject("Schedule:Year")]
    public class Schedule_Year
    {
        
[JsonProperty(@"")]
public System.String ScheduleTypeLimitsName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ScheduleWeeks { get; set; } = "";
    }
    
    [Description(@"Irregular object. Does not follow the usual definition for fields. Fields A3... are: Through: Date For: Applicable days (ref: Schedule:Week:Compact) Interpolate: Average/Linear/No (ref: Schedule:Day:Interval) -- optional, if not used will be ""No"" Until: <Time> (ref: Schedule:Day:Interval) <numeric value> words ""Through"",""For"",""Interpolate"",""Until"" must be included.")]
    [JsonObject("Schedule:Compact")]
    public class Schedule_Compact
    {
        
[JsonProperty(@"")]
public System.String ScheduleTypeLimitsName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Data { get; set; } = "";
    }
    
    [Description("Constant hourly value for entire year.")]
    [JsonObject("Schedule:Constant")]
    public class Schedule_Constant
    {
        
[JsonProperty(@"")]
public System.String ScheduleTypeLimitsName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single HourlyValue { get; set; } = 0;
    }
    
    [Description("A Schedule:File:Shading points to a CSV file that has 8760-8784 hours of sunlit f" +
        "raction data for all or some of the exterior surfaces.")]
    [JsonObject("Schedule:File:Shading")]
    public class Schedule_File_Shading
    {
        
[Description(@"The name of the file that writes all shading data.")]
[JsonProperty(@"The name of the file that writes all shading data.")]
public System.String FileName { get; set; } = "";
    }
    
    [Description("A Schedule:File points to a text computer file that has 8760-8784 hours of data.")]
    [JsonObject("Schedule:File")]
    public class Schedule_File
    {
        
[JsonProperty(@"")]
public System.String ScheduleTypeLimitsName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FileName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single ColumnNumber { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RowsToSkipAtTop { get; set; } = ;
        
[Description(@"8760 hours does not account for leap years, 8784 does. should be either 8760 or 8784")]
[JsonProperty(@"8760 hours does not account for leap years, 8784 does. should be either 8760 or 8784")]
public System.Single NumberOfHoursOfData { get; set; } = 8760;
        
[JsonProperty(@"")]
public YesNoDefault ColumnSeparator { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Comma");
        
[Description(@"when the interval does not match the user specified timestep a "Yes" choice will average between the intervals request (to timestep resolution. a "No" choice will use the interval value at the simulation timestep without regard to if it matches the boundary or not.")]
[JsonProperty(@"when the interval does not match the user specified timestep a "Yes" choice will average between the intervals request (to timestep resolution. a "No" choice will use the interval value at the simulation timestep without regard to if it matches the boundary or not.")]
public YesNoDefault InterpolateToTimestep { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Must be evenly divisible into 60")]
[JsonProperty(@"Must be evenly divisible into 60")]
public System.Single MinutesPerItem { get; set; } = ;
    }
    
    public enum ColumnSeparatorType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Comma")]
        Comma = 1,
        
        [JsonProperty("Semicolon")]
        Semicolon = 2,
        
        [JsonProperty("Space")]
        Space = 3,
        
        [JsonProperty("Tab")]
        Tab = 4,
    }
}
namespace EnergyPlus.SetpointManagers
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("The simplest Setpoint Manager simply uses a schedule to determine one or more set" +
        "points. Values of the nodes are not used as input.")]
    [JsonObject("SetpointManager:Scheduled")]
    public class SetpointManager_Scheduled
    {
        
[JsonProperty(@"")]
public YesNoDefault ControlVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ScheduleName { get; set; } = "";
        
[Description(@"Node(s) at which control variable will be set")]
[JsonProperty(@"Node(s) at which control variable will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum ControlVariableType
    {
        
        [JsonProperty("HumidityRatio")]
        HumidityRatio = 0,
        
        [JsonProperty("MassFlowRate")]
        MassFlowRate = 1,
        
        [JsonProperty("MaximumHumidityRatio")]
        MaximumHumidityRatio = 2,
        
        [JsonProperty("MaximumMassFlowRate")]
        MaximumMassFlowRate = 3,
        
        [JsonProperty("MaximumTemperature")]
        MaximumTemperature = 4,
        
        [JsonProperty("MinimumHumidityRatio")]
        MinimumHumidityRatio = 5,
        
        [JsonProperty("MinimumMassFlowRate")]
        MinimumMassFlowRate = 6,
        
        [JsonProperty("MinimumTemperature")]
        MinimumTemperature = 7,
        
        [JsonProperty("Temperature")]
        Temperature = 8,
    }
    
    [Description("This setpoint manager places a high and low schedule value on one or more nodes.")]
    [JsonObject("SetpointManager:Scheduled:DualSetpoint")]
    public class SetpointManager_Scheduled_DualSetpoint
    {
        
[JsonProperty(@"")]
public YesNoDefault ControlVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Temperature");
        
[JsonProperty(@"")]
public System.String HighSetpointScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LowSetpointScheduleName { get; set; } = "";
        
[Description(@"Node(s) at which temperature will be set")]
[JsonProperty(@"Node(s) at which temperature will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum ControlVariableType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Temperature")]
        Temperature = 1,
    }
    
    [Description("This Setpoint Manager is used to place a setpoint temperature on system node acco" +
        "rding to the outdoor air temperature using a reset rule. The outdoor air tempera" +
        "ture is obtained from the weather information during the simulation.")]
    [JsonObject("SetpointManager:OutdoorAirReset")]
    public class SetpointManager_OutdoorAirReset
    {
        
[JsonProperty(@"")]
public YesNoDefault ControlVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Temperature");
        
[JsonProperty(@"")]
public System.Single SetpointAtOutdoorLowTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single OutdoorLowTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SetpointAtOutdoorHighTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single OutdoorHighTemperature { get; set; } = ;
        
[Description(@"Node(s) at which temperature will be set")]
[JsonProperty(@"Node(s) at which temperature will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
        
[Description(@"Optional input. Schedule allows scheduling of the outdoor air reset rule - a schedule value of 1 means use the first rule; a value of 2 means use the second rule.")]
[JsonProperty(@"Optional input. Schedule allows scheduling of the outdoor air reset rule - a schedule value of 1 means use the first rule; a value of 2 means use the second rule.")]
public System.String ScheduleName { get; set; } = "";
        
[Description(@"2nd outdoor air temperature reset rule")]
[JsonProperty(@"2nd outdoor air temperature reset rule")]
public System.Single SetpointAtOutdoorLowTemperature { get; set; } = ;
        
[Description(@"2nd outdoor air temperature reset rule")]
[JsonProperty(@"2nd outdoor air temperature reset rule")]
public System.Single OutdoorLowTemperature { get; set; } = ;
        
[Description(@"2nd outdoor air temperature reset rule")]
[JsonProperty(@"2nd outdoor air temperature reset rule")]
public System.Single SetpointAtOutdoorHighTemperature { get; set; } = ;
        
[Description(@"2nd outdoor air temperature reset rule")]
[JsonProperty(@"2nd outdoor air temperature reset rule")]
public System.Single OutdoorHighTemperature { get; set; } = ;
    }
    
    public enum ControlVariableType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MaximumTemperature")]
        MaximumTemperature = 1,
        
        [JsonProperty("MinimumTemperature")]
        MinimumTemperature = 2,
        
        [JsonProperty("Temperature")]
        Temperature = 3,
    }
    
    [Description(@"This setpoint manager detects the control zone load, zone inlet node flow rate, and zone node temperature and calculates a setpoint temperature for the supply air that will satisfy the zone load (heating or cooling) for the control zone. This setpoint manager is not limited to reheat applications.")]
    [JsonObject("SetpointManager:SingleZone:Reheat")]
    public class SetpointManager_SingleZone_Reheat
    {
        
[JsonProperty(@"")]
public YesNoDefault ControlVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Temperature");
        
[JsonProperty(@"")]
public System.Single MinimumSupplyAirTemperature { get; set; } = -99;
        
[JsonProperty(@"")]
public System.Single MaximumSupplyAirTemperature { get; set; } = 99;
        
[JsonProperty(@"")]
public System.String ControlZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ZoneNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ZoneInletNodeName { get; set; } = "";
        
[Description(@"Node(s) at which the temperature will be set")]
[JsonProperty(@"Node(s) at which the temperature will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum ControlVariableType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Temperature")]
        Temperature = 1,
    }
    
    [Description(@"This setpoint manager detects the control zone load to meet the current heating setpoint, zone inlet node flow rate, and zone node temperature, and calculates a setpoint temperature for the supply air that will satisfy the zone heating load for the control zone.")]
    [JsonObject("SetpointManager:SingleZone:Heating")]
    public class SetpointManager_SingleZone_Heating
    {
        
[JsonProperty(@"")]
public YesNoDefault ControlVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Temperature");
        
[JsonProperty(@"")]
public System.Single MinimumSupplyAirTemperature { get; set; } = -99;
        
[JsonProperty(@"")]
public System.Single MaximumSupplyAirTemperature { get; set; } = 99;
        
[JsonProperty(@"")]
public System.String ControlZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ZoneNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ZoneInletNodeName { get; set; } = "";
        
[Description(@"Node(s) at which the temperature will be set")]
[JsonProperty(@"Node(s) at which the temperature will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum ControlVariableType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Temperature")]
        Temperature = 1,
    }
    
    [Description(@"This setpoint manager detects the control zone load to meet the current cooling setpoint, zone inlet node flow rate, and zone node temperature, and calculates a setpoint temperature for the supply air that will satisfy the zone cooling load for the control zone.")]
    [JsonObject("SetpointManager:SingleZone:Cooling")]
    public class SetpointManager_SingleZone_Cooling
    {
        
[JsonProperty(@"")]
public YesNoDefault ControlVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Temperature");
        
[JsonProperty(@"")]
public System.Single MinimumSupplyAirTemperature { get; set; } = -99;
        
[JsonProperty(@"")]
public System.Single MaximumSupplyAirTemperature { get; set; } = 99;
        
[JsonProperty(@"")]
public System.String ControlZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ZoneNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ZoneInletNodeName { get; set; } = "";
        
[Description(@"Node(s) at which the temperature will be set")]
[JsonProperty(@"Node(s) at which the temperature will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum ControlVariableType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Temperature")]
        Temperature = 1,
    }
    
    [Description("The Single Zone Minimum Humidity Setpoint Manager allows the control of a single " +
        "zone minimum humidity level. This setpoint manager can be used in conjunction wi" +
        "th object ZoneControl:Humidistat to detect humidity levels.")]
    [JsonObject("SetpointManager:SingleZone:Humidity:Minimum")]
    public class SetpointManager_SingleZone_Humidity_Minimum
    {
        
[Description(@"Node(s) at which humidity ratio setpoint will be set")]
[JsonProperty(@"Node(s) at which humidity ratio setpoint will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
        
[Description(@"Name of the zone air node for the humidity control zone")]
[JsonProperty(@"Name of the zone air node for the humidity control zone")]
public System.String ControlZoneAirNodeName { get; set; } = "";
    }
    
    [Description("The Single Zone Maximum Humidity Setpoint Manager allows the control of a single " +
        "zone maximum humidity level. This setpoint manager can be used in conjunction wi" +
        "th object ZoneControl:Humidistat to detect humidity levels.")]
    [JsonObject("SetpointManager:SingleZone:Humidity:Maximum")]
    public class SetpointManager_SingleZone_Humidity_Maximum
    {
        
[Description(@"Node(s) at which humidity ratio setpoint will be set")]
[JsonProperty(@"Node(s) at which humidity ratio setpoint will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
        
[Description(@"Name of the zone air node for the humidity control zone")]
[JsonProperty(@"Name of the zone air node for the humidity control zone")]
public System.String ControlZoneAirNodeName { get; set; } = "";
    }
    
    [Description("The Mixed Air Setpoint Manager is meant to be used in conjunction with a Controll" +
        "er:OutdoorAir object. This setpoint manager is used to establish a temperature s" +
        "etpoint at the mixed air node.")]
    [JsonObject("SetpointManager:MixedAir")]
    public class SetpointManager_MixedAir
    {
        
[JsonProperty(@"")]
public YesNoDefault ControlVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Temperature");
        
[JsonProperty(@"")]
public System.String ReferenceSetpointNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FanInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FanOutletNodeName { get; set; } = "";
        
[Description(@"Node(s) at which the temperature will be set")]
[JsonProperty(@"Node(s) at which the temperature will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
        
[Description(@"Optional field used to limit economizer operation to prevent freezing of DX cooling coil.")]
[JsonProperty(@"Optional field used to limit economizer operation to prevent freezing of DX cooling coil.")]
public System.String CoolingCoilInletNodeName { get; set; } = "";
        
[Description(@"Optional field used to limit economizer operation to prevent freezing of DX cooling coil.")]
[JsonProperty(@"Optional field used to limit economizer operation to prevent freezing of DX cooling coil.")]
public System.String CoolingCoilOutletNodeName { get; set; } = "";
        
[Description(@"Optional field used to limit economizer operation to prevent freezing of DX cooling coil.")]
[JsonProperty(@"Optional field used to limit economizer operation to prevent freezing of DX cooling coil.")]
public System.Single MinimumTemperatureAtCoolingCoilOutletNode { get; set; } = 7.2;
    }
    
    public enum ControlVariableType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Temperature")]
        Temperature = 1,
    }
    
    [Description("This setpoint manager determines the required conditions at the outdoor air strea" +
        "m node which will produce the reference setpoint condition at the mixed air node" +
        " when mixed with the return air stream")]
    [JsonObject("SetpointManager:OutdoorAirPretreat")]
    public class SetpointManager_OutdoorAirPretreat
    {
        
[JsonProperty(@"")]
public YesNoDefault ControlVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Applicable only if Control variable is Temperature")]
[JsonProperty(@"Applicable only if Control variable is Temperature")]
public System.Single MinimumSetpointTemperature { get; set; } = -99;
        
[Description(@"Applicable only if Control variable is Temperature")]
[JsonProperty(@"Applicable only if Control variable is Temperature")]
public System.Single MaximumSetpointTemperature { get; set; } = 99;
        
[Description(@"Applicable only if Control variable is MaximumHumidityRatio, MinimumHumidityRatio, or HumidityRatio - then minimum is 0.00001")]
[JsonProperty(@"Applicable only if Control variable is MaximumHumidityRatio, MinimumHumidityRatio, or HumidityRatio - then minimum is 0.00001")]
public System.Single MinimumSetpointHumidityRatio { get; set; } = 1E-05;
        
[Description(@"Applicable only if Control variable is MaximumHumidityRatio, MinimumHumidityRatio, or HumidityRatio - then minimum is 0.00001")]
[JsonProperty(@"Applicable only if Control variable is MaximumHumidityRatio, MinimumHumidityRatio, or HumidityRatio - then minimum is 0.00001")]
public System.Single MaximumSetpointHumidityRatio { get; set; } = 1;
        
[Description(@"The current setpoint at this node is the desired condition for the Mixed Air Node This node must have a valid setpoint which has been set by another setpoint manager")]
[JsonProperty(@"The current setpoint at this node is the desired condition for the Mixed Air Node This node must have a valid setpoint which has been set by another setpoint manager")]
public System.String ReferenceSetpointNodeName { get; set; } = "";
        
[Description(@"Name of Mixed Air Node")]
[JsonProperty(@"Name of Mixed Air Node")]
public System.String MixedAirStreamNodeName { get; set; } = "";
        
[Description(@"Name of Outdoor Air Stream Node")]
[JsonProperty(@"Name of Outdoor Air Stream Node")]
public System.String OutdoorAirStreamNodeName { get; set; } = "";
        
[Description(@"Name of Return Air Stream Node")]
[JsonProperty(@"Name of Return Air Stream Node")]
public System.String ReturnAirStreamNodeName { get; set; } = "";
        
[Description(@"Node(s) at which the temperature or humidity ratio will be set")]
[JsonProperty(@"Node(s) at which the temperature or humidity ratio will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum ControlVariableType
    {
        
        [JsonProperty("HumidityRatio")]
        HumidityRatio = 0,
        
        [JsonProperty("MaximumHumidityRatio")]
        MaximumHumidityRatio = 1,
        
        [JsonProperty("MinimumHumidityRatio")]
        MinimumHumidityRatio = 2,
        
        [JsonProperty("Temperature")]
        Temperature = 3,
    }
    
    [Description("This SetpointManager resets the cooling supply air temperature of a central force" +
        "d air HVAC system according to the cooling demand of the warmest zone.")]
    [JsonObject("SetpointManager:Warmest")]
    public class SetpointManager_Warmest
    {
        
[JsonProperty(@"")]
public YesNoDefault ControlVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Temperature");
        
[Description(@"Enter the name of an AirLoopHVAC object")]
[JsonProperty(@"Enter the name of an AirLoopHVAC object")]
public System.String HvacAirLoopName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumSetpointTemperature { get; set; } = 12;
        
[JsonProperty(@"")]
public System.Single MaximumSetpointTemperature { get; set; } = 18;
        
[JsonProperty(@"")]
public YesNoDefault Strategy { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "MaximumTemperature");
        
[Description(@"Node(s) at which the temperature will be set")]
[JsonProperty(@"Node(s) at which the temperature will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum ControlVariableType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Temperature")]
        Temperature = 1,
    }
    
    public enum StrategyType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MaximumTemperature")]
        MaximumTemperature = 1,
    }
    
    [Description("This SetpointManager is used in dual duct systems to reset the setpoint temperatu" +
        "re of the air in the heating supply duct. Usually it is used in conjunction with" +
        " a SetpointManager:Warmest resetting the temperature of the air in the cooling s" +
        "upply duct.")]
    [JsonObject("SetpointManager:Coldest")]
    public class SetpointManager_Coldest
    {
        
[JsonProperty(@"")]
public YesNoDefault ControlVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Temperature");
        
[Description(@"Enter the name of an AirLoopHVAC object.")]
[JsonProperty(@"Enter the name of an AirLoopHVAC object.")]
public System.String HvacAirLoopName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumSetpointTemperature { get; set; } = 20;
        
[JsonProperty(@"")]
public System.Single MaximumSetpointTemperature { get; set; } = 50;
        
[JsonProperty(@"")]
public YesNoDefault Strategy { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "MinimumTemperature");
        
[Description(@"Node(s) at which the temperature will be set")]
[JsonProperty(@"Node(s) at which the temperature will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum ControlVariableType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Temperature")]
        Temperature = 1,
    }
    
    public enum StrategyType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MinimumTemperature")]
        MinimumTemperature = 1,
    }
    
    [Description("This setpoint manager determines the required mass flow rate through a return air" +
        " bypass duct to meet the specified temperature setpoint")]
    [JsonObject("SetpointManager:ReturnAirBypassFlow")]
    public class SetpointManager_ReturnAirBypassFlow
    {
        
[JsonProperty(@"")]
public YesNoDefault ControlVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Flow");
        
[Description(@"Enter the name of an AirLoopHVAC object.")]
[JsonProperty(@"Enter the name of an AirLoopHVAC object.")]
public System.String HvacAirLoopName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String TemperatureSetpointScheduleName { get; set; } = "";
    }
    
    public enum ControlVariableType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Flow")]
        Flow = 1,
    }
    
    [Description("This setpoint manager sets both the supply air temperature and the supply air flo" +
        "w rate.")]
    [JsonObject("SetpointManager:WarmestTemperatureFlow")]
    public class SetpointManager_WarmestTemperatureFlow
    {
        
[JsonProperty(@"")]
public YesNoDefault ControlVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of an AirLoopHVAC object.")]
[JsonProperty(@"Enter the name of an AirLoopHVAC object.")]
public System.String HvacAirLoopName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumSetpointTemperature { get; set; } = 12;
        
[JsonProperty(@"")]
public System.Single MaximumSetpointTemperature { get; set; } = 18;
        
[Description(@"For TemperatureFirst the manager tries to find the highest setpoint temperature that will satisfy all the zone cooling loads at minimum supply air flow rate. If this setpoint temperature is less than the minimum, the setpoint temperature is set to the minimum, and the supply air flow rate is increased to meet the loads. For FlowFirst the manager tries to find the lowest supply air flow rate that will satisfy all the zone cooling loads at the maximum setpoint temperature. If this flow is greater than the maximum, the flow is set to the maximum and the setpoint temperature is reduced to satisfy the cooling loads.")]
[JsonProperty(@"For TemperatureFirst the manager tries to find the highest setpoint temperature that will satisfy all the zone cooling loads at minimum supply air flow rate. If this setpoint temperature is less than the minimum, the setpoint temperature is set to the minimum, and the supply air flow rate is increased to meet the loads. For FlowFirst the manager tries to find the lowest supply air flow rate that will satisfy all the zone cooling loads at the maximum setpoint temperature. If this flow is greater than the maximum, the flow is set to the maximum and the setpoint temperature is reduced to satisfy the cooling loads.")]
public YesNoDefault Strategy { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "TemperatureFirst");
        
[Description(@"Node(s) at which the temperature will be set")]
[JsonProperty(@"Node(s) at which the temperature will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
        
[Description(@"Fraction of the maximum supply air flow rate. Used to define the minimum supply flow for the TemperatureFirst strategy.")]
[JsonProperty(@"Fraction of the maximum supply air flow rate. Used to define the minimum supply flow for the TemperatureFirst strategy.")]
public System.Single MinimumTurndownRatio { get; set; } = 0.2;
    }
    
    public enum ControlVariableType
    {
        
        [JsonProperty("Temperature")]
        Temperature = 0,
    }
    
    public enum StrategyType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FlowFirst")]
        FlowFirst = 1,
        
        [JsonProperty("TemperatureFirst")]
        TemperatureFirst = 2,
    }
    
    [Description("This setpoint manager sets the average supply air temperature based on the heatin" +
        "g load requirements of all controlled zones in an air loop served by a central a" +
        "ir-conditioner.")]
    [JsonObject("SetpointManager:MultiZone:Heating:Average")]
    public class SetpointManager_MultiZone_Heating_Average
    {
        
[Description(@"Enter the name of an AirLoopHVAC object")]
[JsonProperty(@"Enter the name of an AirLoopHVAC object")]
public System.String HvacAirLoopName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumSetpointTemperature { get; set; } = 20;
        
[JsonProperty(@"")]
public System.Single MaximumSetpointTemperature { get; set; } = 50;
        
[Description(@"Node(s) at which the temperature will be set")]
[JsonProperty(@"Node(s) at which the temperature will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    [Description("This setpoint manager sets the average supply air temperature based on the coolin" +
        "g load requirements of all controlled zones in an air loop served by a central a" +
        "ir-conditioner.")]
    [JsonObject("SetpointManager:MultiZone:Cooling:Average")]
    public class SetpointManager_MultiZone_Cooling_Average
    {
        
[Description(@"Enter the name of an AirLoopHVAC object")]
[JsonProperty(@"Enter the name of an AirLoopHVAC object")]
public System.String HvacAirLoopName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumSetpointTemperature { get; set; } = 12;
        
[JsonProperty(@"")]
public System.Single MaximumSetpointTemperature { get; set; } = 18;
        
[Description(@"Node(s) at which the temperature will be set")]
[JsonProperty(@"Node(s) at which the temperature will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    [Description("This setpoint manager sets the average supply air minimum humidity ratio based on" +
        " moisture load requirements of all controlled zones in an air loop served by a c" +
        "entral air-conditioner.")]
    [JsonObject("SetpointManager:MultiZone:MinimumHumidity:Average")]
    public class SetpointManager_MultiZone_MinimumHumidity_Average
    {
        
[Description(@"Enter the name of an AirLoopHVAC object")]
[JsonProperty(@"Enter the name of an AirLoopHVAC object")]
public System.String HvacAirLoopName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumSetpointHumidityRatio { get; set; } = 0.005;
        
[JsonProperty(@"")]
public System.Single MaximumSetpointHumidityRatio { get; set; } = 0.012;
        
[Description(@"Node(s) at which the humidity ratio will be set")]
[JsonProperty(@"Node(s) at which the humidity ratio will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    [Description("This setpoint manager sets the average supply air maximum humidity ratio based on" +
        " moisture load requirements of all controlled zones in an air loop served by a c" +
        "entral air-conditioner.")]
    [JsonObject("SetpointManager:MultiZone:MaximumHumidity:Average")]
    public class SetpointManager_MultiZone_MaximumHumidity_Average
    {
        
[Description(@"Enter the name of an AirLoopHVAC object")]
[JsonProperty(@"Enter the name of an AirLoopHVAC object")]
public System.String HvacAirLoopName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumSetpointHumidityRatio { get; set; } = 0.008;
        
[JsonProperty(@"")]
public System.Single MaximumSetpointHumidityRatio { get; set; } = 0.015;
        
[Description(@"Node(s) at which the humidity ratio will be set")]
[JsonProperty(@"Node(s) at which the humidity ratio will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    [Description(@"This setpoint manager sets the minimum supply air humidity ratio based on humidification requirements of a controlled zone with critical humidity ratio setpoint (i.e., a zone with the highest humidity ratio setpoint) in an air loop served by a central air-conditioner.")]
    [JsonObject("SetpointManager:MultiZone:Humidity:Minimum")]
    public class SetpointManager_MultiZone_Humidity_Minimum
    {
        
[Description(@"Enter the name of an AirLoopHVAC object")]
[JsonProperty(@"Enter the name of an AirLoopHVAC object")]
public System.String HvacAirLoopName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumSetpointHumidityRatio { get; set; } = 0.005;
        
[JsonProperty(@"")]
public System.Single MaximumSetpointHumidityRatio { get; set; } = 0.012;
        
[Description(@"Node(s) at which the humidity ratio will be set")]
[JsonProperty(@"Node(s) at which the humidity ratio will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    [Description(@"This setpoint manager sets the maximum supply air humidity ratio based on dehumidification requirements of a controlled zone with critical humidity ratio setpoint (i.e., a zone with the lowest humidity ratio setpoint) in an air loop served by a central air-conditioner.")]
    [JsonObject("SetpointManager:MultiZone:Humidity:Maximum")]
    public class SetpointManager_MultiZone_Humidity_Maximum
    {
        
[Description(@"Enter the name of an AirLoopHVAC object")]
[JsonProperty(@"Enter the name of an AirLoopHVAC object")]
public System.String HvacAirLoopName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumSetpointHumidityRatio { get; set; } = 0.008;
        
[JsonProperty(@"")]
public System.Single MaximumSetpointHumidityRatio { get; set; } = 0.015;
        
[Description(@"Node(s) at which the humidity ratio will be set")]
[JsonProperty(@"Node(s) at which the humidity ratio will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    [Description("This setpoint manager is used to place a temperature setpoint on a system node th" +
        "at is derived from the current outdoor air environmental conditions. The outdoor" +
        " air conditions are obtained from the weather information during the simulation." +
        "")]
    [JsonObject("SetpointManager:FollowOutdoorAirTemperature")]
    public class SetpointManager_FollowOutdoorAirTemperature
    {
        
[JsonProperty(@"")]
public YesNoDefault ControlVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Temperature");
        
[JsonProperty(@"")]
public YesNoDefault ReferenceTemperatureType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "OutdoorAirWetBulb");
        
[JsonProperty(@"")]
public System.Single OffsetTemperatureDifference { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumSetpointTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumSetpointTemperature { get; set; } = ;
        
[Description(@"Node(s) at which control variable will be set")]
[JsonProperty(@"Node(s) at which control variable will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum ControlVariableType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MaximumTemperature")]
        MaximumTemperature = 1,
        
        [JsonProperty("MinimumTemperature")]
        MinimumTemperature = 2,
        
        [JsonProperty("Temperature")]
        Temperature = 3,
    }
    
    public enum ReferenceTemperatureTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("OutdoorAirDryBulb")]
        OutdoorAirDryBulb = 1,
        
        [JsonProperty("OutdoorAirWetBulb")]
        OutdoorAirWetBulb = 2,
    }
    
    [Description(@"This setpoint manager is used to place a temperature setpoint on a system node that is derived from the current temperatures at a separate system node. The current value of the temperature at a reference node is obtained and used to generate setpoint on a second system node. If the reference node is also designated to be an outdoor air (intake) node, then this setpoint manager can be used to follow outdoor air conditions that are adjusted for altitude.")]
    [JsonObject("SetpointManager:FollowSystemNodeTemperature")]
    public class SetpointManager_FollowSystemNodeTemperature
    {
        
[JsonProperty(@"")]
public YesNoDefault ControlVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Temperature");
        
[JsonProperty(@"")]
public System.String ReferenceNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ReferenceTemperatureType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NodeDryBulb");
        
[JsonProperty(@"")]
public System.Single OffsetTemperatureDifference { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumLimitSetpointTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumLimitSetpointTemperature { get; set; } = ;
        
[Description(@"Node(s) at which control variable will be set")]
[JsonProperty(@"Node(s) at which control variable will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum ControlVariableType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MaximumTemperature")]
        MaximumTemperature = 1,
        
        [JsonProperty("MinimumTemperature")]
        MinimumTemperature = 2,
        
        [JsonProperty("Temperature")]
        Temperature = 3,
    }
    
    public enum ReferenceTemperatureTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("NodeDryBulb")]
        NodeDryBulb = 1,
        
        [JsonProperty("NodeWetBulb")]
        NodeWetBulb = 2,
    }
    
    [Description(@"This setpoint manager is used to place a temperature setpoint on a system node that is derived from a current ground temperature. The ground temperatures are specified in different Site:GroundTemperature:* objects and used during the simulation. This setpoint manager is primarily intended for condenser or plant loops using some type of ground heat exchanger.")]
    [JsonObject("SetpointManager:FollowGroundTemperature")]
    public class SetpointManager_FollowGroundTemperature
    {
        
[JsonProperty(@"")]
public YesNoDefault ControlVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Temperature");
        
[JsonProperty(@"")]
public YesNoDefault ReferenceGroundTemperatureObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single OffsetTemperatureDifference { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumSetpointTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumSetpointTemperature { get; set; } = ;
        
[Description(@"Node(s) at which control variable will be set")]
[JsonProperty(@"Node(s) at which control variable will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum ControlVariableType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MaximumTemperature")]
        MaximumTemperature = 1,
        
        [JsonProperty("MinimumTemperature")]
        MinimumTemperature = 2,
        
        [JsonProperty("Temperature")]
        Temperature = 3,
    }
    
    public enum ReferenceGroundTemperatureObjectTypeType
    {
        
        [JsonProperty("Site:GroundTemperature:BuildingSurface")]
        SiteGroundTemperatureBuildingSurface = 0,
        
        [JsonProperty("Site:GroundTemperature:Deep")]
        SiteGroundTemperatureDeep = 1,
        
        [JsonProperty("Site:GroundTemperature:FCfactorMethod")]
        SiteGroundTemperatureFCfactorMethod = 2,
        
        [JsonProperty("Site:GroundTemperature:Shallow")]
        SiteGroundTemperatureShallow = 3,
    }
    
    [Description("This setpoint manager uses one curve to determine the optimum condenser entering " +
        "water temperature for a given timestep and two other curves to place boundary co" +
        "nditions on the setpoint value.")]
    [JsonObject("SetpointManager:CondenserEnteringReset")]
    public class SetpointManager_CondenserEnteringReset
    {
        
[JsonProperty(@"")]
public YesNoDefault ControlVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Temperature");
        
[Description(@"This scheduled setpoint value is only used in a given timestep if the "Optimized" Condenser Entering Temperature does not fall within the prescribed boundary conditions.")]
[JsonProperty(@"This scheduled setpoint value is only used in a given timestep if the "Optimized" Condenser Entering Temperature does not fall within the prescribed boundary conditions.")]
public System.String DefaultCondenserEnteringWaterTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MinimumDesignWetbulbTemperatureCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MinimumOutsideAirWetbulbTemperatureCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OptimizedCondEnteringWaterTemperatureCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumLift { get; set; } = 11.1;
        
[JsonProperty(@"")]
public System.Single MaximumCondenserEnteringWaterTemperature { get; set; } = 32;
        
[JsonProperty(@"")]
public System.Single CoolingTowerDesignInletAirWetBulbTemperature { get; set; } = 25.56;
        
[Description(@"Node(s) at which control variable will be set")]
[JsonProperty(@"Node(s) at which control variable will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum ControlVariableType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Temperature")]
        Temperature = 1,
    }
    
    [Description("This setpoint manager determine the ideal optimum condenser entering water temper" +
        "ature setpoint for a given timestep.")]
    [JsonObject("SetpointManager:CondenserEnteringReset:Ideal")]
    public class SetpointManager_CondenserEnteringReset_Ideal
    {
        
[JsonProperty(@"")]
public YesNoDefault ControlVariable { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Temperature");
        
[JsonProperty(@"")]
public System.Single MinimumLift { get; set; } = 11.1;
        
[JsonProperty(@"")]
public System.Single MaximumCondenserEnteringWaterTemperature { get; set; } = 32;
        
[Description(@"Node(s) at which control variable will be set")]
[JsonProperty(@"Node(s) at which control variable will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    public enum ControlVariableType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Temperature")]
        Temperature = 1,
    }
    
    [Description(@"This object can be used with CoilSystem:Cooling:DX to model on/off cycling control of single stage air systems. Setpoints are modulated to run coil full on or full off depending on zone conditions. Intended for use with ZoneControl:Thermostat:StagedDualSetpoint")]
    [JsonObject("SetpointManager:SingleZone:OneStageCooling")]
    public class SetpointManager_SingleZone_OneStageCooling
    {
        
[Description(@"This is the setpoint value applied when cooling device is to cycle ON")]
[JsonProperty(@"This is the setpoint value applied when cooling device is to cycle ON")]
public System.Single CoolingStageOnSupplyAirSetpointTemperature { get; set; } = -99;
        
[Description(@"This is the setpoint value applied when cooling device is to cycle OFF")]
[JsonProperty(@"This is the setpoint value applied when cooling device is to cycle OFF")]
public System.Single CoolingStageOffSupplyAirSetpointTemperature { get; set; } = 99;
        
[JsonProperty(@"")]
public System.String ControlZoneName { get; set; } = "";
        
[Description(@"Node(s) at which the temperature will be set")]
[JsonProperty(@"Node(s) at which the temperature will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    [Description(@"This object can be used with CoilSystem:Heating:DX, Coil:Heating:Fuel, Coil:Heating:Electric to model on/off cycling control of single stage air systems. Setpoints are modulated to run coil full on or full off depending on zone conditions. Intended for use with ZoneControl:Thermostat:StagedDualSetpoint.")]
    [JsonObject("SetpointManager:SingleZone:OneStageHeating")]
    public class SetpointManager_SingleZone_OneStageHeating
    {
        
[Description(@"This is the setpoint value applied when heating device is to cycle ON")]
[JsonProperty(@"This is the setpoint value applied when heating device is to cycle ON")]
public System.Single HeatingStageOnSupplyAirSetpointTemperature { get; set; } = 99;
        
[Description(@"This is the setpoint value applied when heating device is to cycle OFF")]
[JsonProperty(@"This is the setpoint value applied when heating device is to cycle OFF")]
public System.Single HeatingStageOffSupplyAirSetpointTemperature { get; set; } = -99;
        
[JsonProperty(@"")]
public System.String ControlZoneName { get; set; } = "";
        
[Description(@"Node(s) at which the temperature will be set")]
[JsonProperty(@"Node(s) at which the temperature will be set")]
public System.String SetpointNodeOrNodelistName { get; set; } = "";
    }
    
    [Description(@"This setpoint manager is used to place a temperature setpoint on a plant supply outlet node based on a target return water setpoint. The setpoint manager attempts to achieve the desired return water temperature by adjusting the supply temperature setpoint based on the plant conditions at each system time step.")]
    [JsonObject("SetpointManager:ReturnTemperature:ChilledWater")]
    public class SetpointManager_ReturnTemperature_ChilledWater
    {
        
[Description(@"This is the name of the supply outlet node for the plant being controlled by this setpoint manager. Typically this is where the setpoint will be actuated for supply equipment to control to, but not necessarily. This setpoint manager will mine that information from the internal plant data structures.")]
[JsonProperty(@"This is the name of the supply outlet node for the plant being controlled by this setpoint manager. Typically this is where the setpoint will be actuated for supply equipment to control to, but not necessarily. This setpoint manager will mine that information from the internal plant data structures.")]
public System.String PlantLoopSupplyOutletNode { get; set; } = "";
        
[Description(@"This is the name of the supply inlet node for the plant being controlled with this setpoint manager. The temperature on this node is controlled by actuating the supply setpoint.")]
[JsonProperty(@"This is the name of the supply inlet node for the plant being controlled with this setpoint manager. The temperature on this node is controlled by actuating the supply setpoint.")]
public System.String PlantLoopSupplyInletNode { get; set; } = "";
        
[Description(@"This is the minimum chilled water supply temperature setpoint. This is also used as the default setpoint during no-load or negative-load conditions and during initialization.")]
[JsonProperty(@"This is the minimum chilled water supply temperature setpoint. This is also used as the default setpoint during no-load or negative-load conditions and during initialization.")]
public System.Single MinimumSupplyTemperatureSetpoint { get; set; } = 5;
        
[Description(@"This is the maximum reset temperature for the chilled water supply.")]
[JsonProperty(@"This is the maximum reset temperature for the chilled water supply.")]
public System.Single MaximumSupplyTemperatureSetpoint { get; set; } = 10;
        
[Description(@"This defines whether the chilled water return temperature target is constant, scheduled, or specified on the supply inlet node by a separate setpoint manager.")]
[JsonProperty(@"This defines whether the chilled water return temperature target is constant, scheduled, or specified on the supply inlet node by a separate setpoint manager.")]
public YesNoDefault ReturnTemperatureSetpointInputType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"This is the desired return temperature target, which is met by adjusting the supply temperature setpoint. This constant value is only used if the Design Chilled Water Return Temperature Input Type is Constant")]
[JsonProperty(@"This is the desired return temperature target, which is met by adjusting the supply temperature setpoint. This constant value is only used if the Design Chilled Water Return Temperature Input Type is Constant")]
public System.Single ReturnTemperatureSetpointConstantValue { get; set; } = 13;
        
[Description(@"This is the desired return temperature target, which is met by adjusting the supply temperature setpoint. This is a schedule name to allow the return temperature target value to be scheduled. This field is only used if the Design Chilled Water Return Temperature Input Type is Scheduled")]
[JsonProperty(@"This is the desired return temperature target, which is met by adjusting the supply temperature setpoint. This is a schedule name to allow the return temperature target value to be scheduled. This field is only used if the Design Chilled Water Return Temperature Input Type is Scheduled")]
public System.String ReturnTemperatureSetpointScheduleName { get; set; } = "";
    }
    
    public enum ReturnTemperatureSetpointInputTypeType
    {
        
        [JsonProperty("Constant")]
        Constant = 0,
        
        [JsonProperty("ReturnTemperatureSetpoint")]
        ReturnTemperatureSetpoint = 1,
        
        [JsonProperty("Scheduled")]
        Scheduled = 2,
    }
    
    [Description(@"This setpoint manager is used to place a temperature setpoint on a plant supply outlet node based on a target return water setpoint. The setpoint manager attempts to achieve the desired return water temperature by adjusting the supply temperature setpoint based on the plant conditions at each system time step.")]
    [JsonObject("SetpointManager:ReturnTemperature:HotWater")]
    public class SetpointManager_ReturnTemperature_HotWater
    {
        
[Description(@"This is the name of the supply outlet node for the plant being controlled by this setpoint manager. Typically this is where the setpoint will be actuated for supply equipment to control to, but not necessarily. This setpoint manager will mine that information from the internal plant data structures.")]
[JsonProperty(@"This is the name of the supply outlet node for the plant being controlled by this setpoint manager. Typically this is where the setpoint will be actuated for supply equipment to control to, but not necessarily. This setpoint manager will mine that information from the internal plant data structures.")]
public System.String PlantLoopSupplyOutletNode { get; set; } = "";
        
[Description(@"This is the name of the supply inlet node for the plant being controlled with this setpoint manager. The temperature on this node is controlled by actuating the supply setpoint.")]
[JsonProperty(@"This is the name of the supply inlet node for the plant being controlled with this setpoint manager. The temperature on this node is controlled by actuating the supply setpoint.")]
public System.String PlantLoopSupplyInletNode { get; set; } = "";
        
[Description(@"This is the minimum reset temperature for the hot water supply.")]
[JsonProperty(@"This is the minimum reset temperature for the hot water supply.")]
public System.Single MinimumSupplyTemperatureSetpoint { get; set; } = 77;
        
[Description(@"This is the maximum hot water supply temperature setpoint. This is also used as the default setpoint during no-load or negative-load conditions and during initialization.")]
[JsonProperty(@"This is the maximum hot water supply temperature setpoint. This is also used as the default setpoint during no-load or negative-load conditions and during initialization.")]
public System.Single MaximumSupplyTemperatureSetpoint { get; set; } = 82;
        
[Description(@"This defines whether the hot water return temperature target is constant, scheduled, or specified on the supply inlet node by a separate setpoint manager.")]
[JsonProperty(@"This defines whether the hot water return temperature target is constant, scheduled, or specified on the supply inlet node by a separate setpoint manager.")]
public YesNoDefault ReturnTemperatureSetpointInputType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"This is the desired return temperature target, which is met by adjusting the supply temperature setpoint. This constant value is only used if the Design Hot Water Return Temperature Input Type is Constant")]
[JsonProperty(@"This is the desired return temperature target, which is met by adjusting the supply temperature setpoint. This constant value is only used if the Design Hot Water Return Temperature Input Type is Constant")]
public System.Single ReturnTemperatureSetpointConstantValue { get; set; } = 71;
        
[Description(@"This is the desired return temperature target, which is met by adjusting the supply temperature setpoint. This is a schedule name to allow the return temperature target value to be scheduled. This field is only used if the Design Hot Water Return Temperature Input Type is Scheduled")]
[JsonProperty(@"This is the desired return temperature target, which is met by adjusting the supply temperature setpoint. This is a schedule name to allow the return temperature target value to be scheduled. This field is only used if the Design Hot Water Return Temperature Input Type is Scheduled")]
public System.String ReturnTemperatureSetpointScheduleName { get; set; } = "";
    }
    
    public enum ReturnTemperatureSetpointInputTypeType
    {
        
        [JsonProperty("Constant")]
        Constant = 0,
        
        [JsonProperty("ReturnTemperatureSetpoint")]
        ReturnTemperatureSetpoint = 1,
        
        [JsonProperty("Scheduled")]
        Scheduled = 2,
    }
}
namespace EnergyPlus.SimulationParameters
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Specifies the EnergyPlus version of the IDF file.")]
    [JsonObject("Version")]
    public class Version
    {
        
[JsonProperty(@"")]
public System.String VersionIdentifier { get; set; } = (System.String)9.5;
    }
    
    [Description(@"Note that the following 3 fields are related to the Sizing:Zone, Sizing:System, and Sizing:Plant objects. Having these fields set to Yes but no corresponding Sizing object will not cause the sizing to be done. However, having any of these fields set to No, the corresponding Sizing object is ignored. Note also, if you want to do system sizing, you must also do zone sizing in the same run or an error will result.")]
    [JsonObject("SimulationControl")]
    public class SimulationControl
    {
        
[Description(@"If Yes, Zone sizing is accomplished from corresponding Sizing:Zone objects and autosize fields.")]
[JsonProperty(@"If Yes, Zone sizing is accomplished from corresponding Sizing:Zone objects and autosize fields.")]
public YesNoDefault DoZoneSizingCalculation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"If Yes, System sizing is accomplished from corresponding Sizing:System objects and autosize fields. If Yes, Zone sizing (previous field) must also be Yes.")]
[JsonProperty(@"If Yes, System sizing is accomplished from corresponding Sizing:System objects and autosize fields. If Yes, Zone sizing (previous field) must also be Yes.")]
public YesNoDefault DoSystemSizingCalculation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"If Yes, Plant sizing is accomplished from corresponding Sizing:Plant objects and autosize fields.")]
[JsonProperty(@"If Yes, Plant sizing is accomplished from corresponding Sizing:Plant objects and autosize fields.")]
public YesNoDefault DoPlantSizingCalculation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"If Yes, SizingPeriod:* objects are executed and results from those may be displayed..")]
[JsonProperty(@"If Yes, SizingPeriod:* objects are executed and results from those may be displayed..")]
public YesNoDefault RunSimulationForSizingPeriods { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[Description(@"If Yes, RunPeriod:* objects are executed and results from those may be displayed..")]
[JsonProperty(@"If Yes, RunPeriod:* objects are executed and results from those may be displayed..")]
public YesNoDefault RunSimulationForWeatherFileRunPeriods { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[Description(@"If Yes, SizingPeriod:* objects are exectuted additional times for advanced sizing. Currently limited to use with coincident plant sizing, see Sizing:Plant object")]
[JsonProperty(@"If Yes, SizingPeriod:* objects are exectuted additional times for advanced sizing. Currently limited to use with coincident plant sizing, see Sizing:Plant object")]
public YesNoDefault DoHvacSizingSimulationForSizingPeriods { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"the entire set of SizingPeriod:* objects may be repeated to fine tune size results this input sets a limit on the number of passes that the sizing algorithms can repeate the set")]
[JsonProperty(@"the entire set of SizingPeriod:* objects may be repeated to fine tune size results this input sets a limit on the number of passes that the sizing algorithms can repeate the set")]
public System.Single MaximumNumberOfHvacSizingSimulationPasses { get; set; } = 1;
    }
    
    [Description("This object enables users to choose certain options that speed up EnergyPlus simu" +
        "lation, but may lead to small decreases in accuracy of results.")]
    [JsonObject("PerformancePrecisionTradeoffs")]
    public class PerformancePrecisionTradeoffs
    {
        
[Description(@"If Yes, an analytical or empirical solution will be used to replace iterations in the coil performance calculations.")]
[JsonProperty(@"If Yes, an analytical or empirical solution will be used to replace iterations in the coil performance calculations.")]
public YesNoDefault UseCoilDirectSolutions { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Determines which algorithm will be used to solve long wave radiant exchange among surfaces within a zone.")]
[JsonProperty(@"Determines which algorithm will be used to solve long wave radiant exchange among surfaces within a zone.")]
public YesNoDefault ZoneRadiantExchangeAlgorithm { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ScriptF");
        
[Description(@"The increasing mode number roughly correspond with increased speed. A description of each mode are shown in the documentation. When Advanced is selected the N1 field value is used.")]
[JsonProperty(@"The increasing mode number roughly correspond with increased speed. A description of each mode are shown in the documentation. When Advanced is selected the N1 field value is used.")]
public YesNoDefault OverrideMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Normal");
        
[Description(@"Maximum zone temperature change before HVAC timestep is shortened. Only used when Override Mode is set to Advanced")]
[JsonProperty(@"Maximum zone temperature change before HVAC timestep is shortened. Only used when Override Mode is set to Advanced")]
public System.Single Maxzonetempdiff { get; set; } = 0.3;
        
[Description(@"Maximum surface temperature change before HVAC timestep is shortened. Only used when Override Mode is set to Advanced")]
[JsonProperty(@"Maximum surface temperature change before HVAC timestep is shortened. Only used when Override Mode is set to Advanced")]
public System.Single Maxalloweddeltemp { get; set; } = 0.002;
    }
    
    public enum ZoneRadiantExchangeAlgorithmType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CarrollMRT")]
        CarrollMRT = 1,
        
        [JsonProperty("ScriptF")]
        ScriptF = 2,
    }
    
    public enum OverrideModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Advanced")]
        Advanced = 1,
        
        [JsonProperty("Mode01")]
        Mode = 2,
        
        [JsonProperty("Mode02")]
        Mode = 3,
        
        [JsonProperty("Mode03")]
        Mode = 4,
        
        [JsonProperty("Mode04")]
        Mode = 5,
        
        [JsonProperty("Mode05")]
        Mode = 6,
        
        [JsonProperty("Mode06")]
        Mode = 7,
        
        [JsonProperty("Mode07")]
        Mode = 8,
        
        [JsonProperty("Normal")]
        Normal = 9,
    }
    
    [Description("Describes parameters that are used during the simulation of the building. There a" +
        "re necessary correlations between the entries for this object and some entries i" +
        "n the Site:WeatherStation and Site:HeightVariation objects, specifically the Ter" +
        "rain field.")]
    [JsonObject("Building")]
    public class Building
    {
        
[Description(@"degrees from true North")]
[JsonProperty(@"degrees from true North")]
public System.Single NorthAxis { get; set; } = 0;
        
[Description(@"Country=FlatOpenCountry | Suburbs=CountryTownsSuburbs | City=CityCenter | Ocean=body of water (5km) | Urban=Urban-Industrial-Forest")]
[JsonProperty(@"Country=FlatOpenCountry | Suburbs=CountryTownsSuburbs | City=CityCenter | Ocean=body of water (5km) | Urban=Urban-Industrial-Forest")]
public YesNoDefault Terrain { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Suburbs");
        
[Description(@"Loads Convergence Tolerance Value is a change in load from one warmup day to the next")]
[JsonProperty(@"Loads Convergence Tolerance Value is a change in load from one warmup day to the next")]
public System.Single LoadsConvergenceToleranceValue { get; set; } = 0.04;
        
[JsonProperty(@"")]
public System.Single TemperatureConvergenceToleranceValue { get; set; } = 0.4;
        
[Description(@"MinimalShadowing | FullExterior | FullInteriorAndExterior | FullExteriorWithReflections | FullInteriorAndExteriorWithReflections")]
[JsonProperty(@"MinimalShadowing | FullExterior | FullInteriorAndExterior | FullExteriorWithReflections | FullInteriorAndExteriorWithReflections")]
public YesNoDefault SolarDistribution { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FullExterior");
        
[Description(@"EnergyPlus will only use as many warmup days as needed to reach convergence tolerance. This field's value should NOT be set less than 25.")]
[JsonProperty(@"EnergyPlus will only use as many warmup days as needed to reach convergence tolerance. This field's value should NOT be set less than 25.")]
public System.Single MaximumNumberOfWarmupDays { get; set; } = 25;
        
[Description(@"The minimum number of warmup days that produce enough temperature and flux history to start EnergyPlus simulation for all reference buildings was suggested to be 6. However this can lead to excessive run times as warmup days can be repeated needlessly. For faster execution rely on the convergence criteria to detect when warmup is complete. When this field is greater than the maximum warmup days defined previous field the maximum number of warmup days will be reset to the minimum value entered here. Warmup days will be set to be the value you entered. The default is 1.")]
[JsonProperty(@"The minimum number of warmup days that produce enough temperature and flux history to start EnergyPlus simulation for all reference buildings was suggested to be 6. However this can lead to excessive run times as warmup days can be repeated needlessly. For faster execution rely on the convergence criteria to detect when warmup is complete. When this field is greater than the maximum warmup days defined previous field the maximum number of warmup days will be reset to the minimum value entered here. Warmup days will be set to be the value you entered. The default is 1.")]
public System.Single MinimumNumberOfWarmupDays { get; set; } = 1;
    }
    
    public enum TerrainType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("City")]
        City = 1,
        
        [JsonProperty("Country")]
        Country = 2,
        
        [JsonProperty("Ocean")]
        Ocean = 3,
        
        [JsonProperty("Suburbs")]
        Suburbs = 4,
        
        [JsonProperty("Urban")]
        Urban = 5,
    }
    
    public enum SolarDistributionType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FullExterior")]
        FullExterior = 1,
        
        [JsonProperty("FullExteriorWithReflections")]
        FullExteriorWithReflections = 2,
        
        [JsonProperty("FullInteriorAndExterior")]
        FullInteriorAndExterior = 3,
        
        [JsonProperty("FullInteriorAndExteriorWithReflections")]
        FullInteriorAndExteriorWithReflections = 4,
        
        [JsonProperty("MinimalShadowing")]
        MinimalShadowing = 5,
    }
    
    [Description("This object is used to control details of the solar, shading, and daylighting mod" +
        "els")]
    [JsonObject("ShadowCalculation")]
    public class ShadowCalculation
    {
        
[Description(@"Select between CPU-based polygon clipping method, the GPU-based pixel counting method, or importing from external shading data. If PixelCounting is selected and GPU hardware (or GPU emulation) is not available, a warning will be displayed and EnergyPlus will revert to PolygonClipping. If Scheduled is chosen, the External Shading Fraction Schedule Name is required in SurfaceProperty:LocalEnvironment. If Imported is chosen, the Schedule:File:Shading object is required.")]
[JsonProperty(@"Select between CPU-based polygon clipping method, the GPU-based pixel counting method, or importing from external shading data. If PixelCounting is selected and GPU hardware (or GPU emulation) is not available, a warning will be displayed and EnergyPlus will revert to PolygonClipping. If Scheduled is chosen, the External Shading Fraction Schedule Name is required in SurfaceProperty:LocalEnvironment. If Imported is chosen, the Schedule:File:Shading object is required.")]
public YesNoDefault ShadingCalculationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "PolygonClipping");
        
[Description(@"choose calculation frequency method. note that Timestep is only needed for certain cases and can increase execution time significantly.")]
[JsonProperty(@"choose calculation frequency method. note that Timestep is only needed for certain cases and can increase execution time significantly.")]
public YesNoDefault ShadingCalculationUpdateFrequencyMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Periodic");
        
[Description(@"enter number of days this field is only used if the previous field is set to Periodic warning issued if >31")]
[JsonProperty(@"enter number of days this field is only used if the previous field is set to Periodic warning issued if >31")]
public System.Single ShadingCalculationUpdateFrequency { get; set; } = 20;
        
[Description(@"Number of allowable figures in shadow overlap in PolygonClipping calculations")]
[JsonProperty(@"Number of allowable figures in shadow overlap in PolygonClipping calculations")]
public System.Single MaximumFiguresInShadowOverlapCalculations { get; set; } = 15000;
        
[Description(@"Advanced Feature. Internal default is SutherlandHodgman Refer to InputOutput Reference and Engineering Reference for more information")]
[JsonProperty(@"Advanced Feature. Internal default is SutherlandHodgman Refer to InputOutput Reference and Engineering Reference for more information")]
public YesNoDefault PolygonClippingAlgorithm { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SutherlandHodgman");
        
[Description(@"Number of pixels in both dimensions of the surface rendering")]
[JsonProperty(@"Number of pixels in both dimensions of the surface rendering")]
public System.Single PixelCountingResolution { get; set; } = 512;
        
[Description(@"Advanced Feature. Internal default is SimpleSkyDiffuseModeling If you have shading elements that change transmittance over the year, you may wish to choose the detailed method. Refer to InputOutput Reference and Engineering Reference for more information")]
[JsonProperty(@"Advanced Feature. Internal default is SimpleSkyDiffuseModeling If you have shading elements that change transmittance over the year, you may wish to choose the detailed method. Refer to InputOutput Reference and Engineering Reference for more information")]
public YesNoDefault SkyDiffuseModelingAlgorithm { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SimpleSkyDiffuseModeling");
        
[Description(@"If Yes is chosen, the calculated external shading fraction results will be saved to an external CSV file with surface names as the column headers.")]
[JsonProperty(@"If Yes is chosen, the calculated external shading fraction results will be saved to an external CSV file with surface names as the column headers.")]
public YesNoDefault OutputExternalShadingCalculationResults { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"If Yes, self-shading will be disabled from all exterior surfaces in a given Shading Zone Group to surfaces within the same Shading Zone Group. If both Disable Self-Shading Within Shading Zone Groups and Disable Self-Shading From Shading Zone Groups to Other Zones = Yes, then all self-shading from exterior surfaces will be disabled. If only one of these fields = Yes, then at least one Shading Zone Group must be specified, or this field will be ignored. Shading from Shading:* surfaces, overhangs, fins, and reveals will not be disabled.")]
[JsonProperty(@"If Yes, self-shading will be disabled from all exterior surfaces in a given Shading Zone Group to surfaces within the same Shading Zone Group. If both Disable Self-Shading Within Shading Zone Groups and Disable Self-Shading From Shading Zone Groups to Other Zones = Yes, then all self-shading from exterior surfaces will be disabled. If only one of these fields = Yes, then at least one Shading Zone Group must be specified, or this field will be ignored. Shading from Shading:* surfaces, overhangs, fins, and reveals will not be disabled.")]
public YesNoDefault DisableSelfShadingWithinShadingZoneGroups { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"If Yes, self-shading will be disabled from all exterior surfaces in a given Shading Zone Group to all other zones in the model. If both Disable Self-Shading Within Shading Zone Groups and Disable Self-Shading From Shading Zone Groups to Other Zones = Yes, then all self-shading from exterior surfaces will be disabled. If only one of these fields = Yes, then at least one Shading Zone Group must be specified, or this field will be ignored. Shading from Shading:* surfaces, overhangs, fins, and reveals will not be disabled.")]
[JsonProperty(@"If Yes, self-shading will be disabled from all exterior surfaces in a given Shading Zone Group to all other zones in the model. If both Disable Self-Shading Within Shading Zone Groups and Disable Self-Shading From Shading Zone Groups to Other Zones = Yes, then all self-shading from exterior surfaces will be disabled. If only one of these fields = Yes, then at least one Shading Zone Group must be specified, or this field will be ignored. Shading from Shading:* surfaces, overhangs, fins, and reveals will not be disabled.")]
public YesNoDefault DisableSelfShadingFromShadingZoneGroupsToOtherZones { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[JsonProperty(@"")]
public System.String ShadingZoneGroups { get; set; } = "";
    }
    
    public enum ShadingCalculationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Imported")]
        Imported = 1,
        
        [JsonProperty("PixelCounting")]
        PixelCounting = 2,
        
        [JsonProperty("PolygonClipping")]
        PolygonClipping = 3,
        
        [JsonProperty("Scheduled")]
        Scheduled = 4,
    }
    
    public enum ShadingCalculationUpdateFrequencyMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Periodic")]
        Periodic = 1,
        
        [JsonProperty("Timestep")]
        Timestep = 2,
    }
    
    public enum PolygonClippingAlgorithmType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConvexWeilerAtherton")]
        ConvexWeilerAtherton = 1,
        
        [JsonProperty("SlaterBarskyandSutherlandHodgman")]
        SlaterBarskyandSutherlandHodgman = 2,
        
        [JsonProperty("SutherlandHodgman")]
        SutherlandHodgman = 3,
    }
    
    public enum SkyDiffuseModelingAlgorithmType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DetailedSkyDiffuseModeling")]
        DetailedSkyDiffuseModeling = 1,
        
        [JsonProperty("SimpleSkyDiffuseModeling")]
        SimpleSkyDiffuseModeling = 2,
    }
    
    [Description("Default indoor surface heat transfer convection algorithm to be used for all zone" +
        "s")]
    [JsonObject("SurfaceConvectionAlgorithm:Inside")]
    public class SurfaceConvectionAlgorithm_Inside
    {
        
[Description(@"Simple = constant value natural convection (ASHRAE) TARP = variable natural convection based on temperature difference (ASHRAE, Walton) CeilingDiffuser = ACH-based forced and mixed convection correlations for ceiling diffuser configuration with simple natural convection limit AdaptiveConvectionAlgorithm = dynamic selection of convection models based on conditions ASTMC1340 = mixed convection correlations based on heat flow direction, surface tilt angle, surface characteristic length, and air speed past the surface.")]
[JsonProperty(@"Simple = constant value natural convection (ASHRAE) TARP = variable natural convection based on temperature difference (ASHRAE, Walton) CeilingDiffuser = ACH-based forced and mixed convection correlations for ceiling diffuser configuration with simple natural convection limit AdaptiveConvectionAlgorithm = dynamic selection of convection models based on conditions ASTMC1340 = mixed convection correlations based on heat flow direction, surface tilt angle, surface characteristic length, and air speed past the surface.")]
public YesNoDefault Algorithm { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "TARP");
    }
    
    public enum AlgorithmType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASTMC1340")]
        ASTMC = 1,
        
        [JsonProperty("AdaptiveConvectionAlgorithm")]
        AdaptiveConvectionAlgorithm = 2,
        
        [JsonProperty("CeilingDiffuser")]
        CeilingDiffuser = 3,
        
        [JsonProperty("Simple")]
        Simple = 4,
        
        [JsonProperty("TARP")]
        TARP = 5,
    }
    
    [Description("Default outside surface heat transfer convection algorithm to be used for all zon" +
        "es")]
    [JsonObject("SurfaceConvectionAlgorithm:Outside")]
    public class SurfaceConvectionAlgorithm_Outside
    {
        
[Description(@"SimpleCombined = Combined radiation and convection coefficient using simple ASHRAE model TARP = correlation from models developed by ASHRAE, Walton, and Sparrow et. al. MoWiTT = correlation from measurements by Klems and Yazdanian for smooth surfaces DOE-2 = correlation from measurements by Klems and Yazdanian for rough surfaces AdaptiveConvectionAlgorithm = dynamic selection of correlations based on conditions")]
[JsonProperty(@"SimpleCombined = Combined radiation and convection coefficient using simple ASHRAE model TARP = correlation from models developed by ASHRAE, Walton, and Sparrow et. al. MoWiTT = correlation from measurements by Klems and Yazdanian for smooth surfaces DOE-2 = correlation from measurements by Klems and Yazdanian for rough surfaces AdaptiveConvectionAlgorithm = dynamic selection of correlations based on conditions")]
public YesNoDefault Algorithm { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DOE-2");
    }
    
    public enum AlgorithmType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AdaptiveConvectionAlgorithm")]
        AdaptiveConvectionAlgorithm = 1,
        
        [JsonProperty("DOE-2")]
        DOE = 2,
        
        [JsonProperty("MoWiTT")]
        MoWiTT = 3,
        
        [JsonProperty("SimpleCombined")]
        SimpleCombined = 4,
        
        [JsonProperty("TARP")]
        TARP = 5,
    }
    
    [Description(@"Determines which Heat Balance Algorithm will be used ie. CTF (Conduction Transfer Functions), EMPD (Effective Moisture Penetration Depth with Conduction Transfer Functions). Advanced/Research Usage: CondFD (Conduction Finite Difference) Advanced/Research Usage: ConductionFiniteDifferenceSimplified Advanced/Research Usage: HAMT (Combined Heat And Moisture Finite Element)")]
    [JsonObject("HeatBalanceAlgorithm")]
    public class HeatBalanceAlgorithm
    {
        
[JsonProperty(@"")]
public HeatTransferAlgorithm Algorithm { get; set; } = (HeatTransferAlgorithm)Enum.Parse(typeof(HeatTransferAlgorithm), "ConductionTransferFunction");
        
[JsonProperty(@"")]
public System.Single SurfaceTemperatureUpperLimit { get; set; } = 200;
        
[JsonProperty(@"")]
public System.Single MinimumSurfaceConvectionHeatTransferCoefficientValue { get; set; } = 0.1;
        
[JsonProperty(@"")]
public System.Single MaximumSurfaceConvectionHeatTransferCoefficientValue { get; set; } = 1000;
    }
    
    [Description("Determines settings for the Conduction Finite Difference algorithm for surface he" +
        "at transfer modeling.")]
    [JsonObject("HeatBalanceSettings:ConductionFiniteDifference")]
    public class HeatBalanceSettings_ConductionFiniteDifference
    {
        
[JsonProperty(@"")]
public YesNoDefault DifferenceScheme { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FullyImplicitFirstOrder");
        
[Description(@"increase or decrease number of nodes")]
[JsonProperty(@"increase or decrease number of nodes")]
public System.Single SpaceDiscretizationConstant { get; set; } = 3;
        
[JsonProperty(@"")]
public System.Single RelaxationFactor { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single InsideFaceSurfaceTemperatureConvergenceCriteria { get; set; } = 0.002;
    }
    
    public enum DifferenceSchemeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CrankNicholsonSecondOrder")]
        CrankNicholsonSecondOrder = 1,
        
        [JsonProperty("FullyImplicitFirstOrder")]
        FullyImplicitFirstOrder = 2,
    }
    
    [Description("Determines which algorithm will be used to solve the zone air heat balance.")]
    [JsonObject("ZoneAirHeatBalanceAlgorithm")]
    public class ZoneAirHeatBalanceAlgorithm
    {
        
[JsonProperty(@"")]
public YesNoDefault Algorithm { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ThirdOrderBackwardDifference");
    }
    
    public enum AlgorithmType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AnalyticalSolution")]
        AnalyticalSolution = 1,
        
        [JsonProperty("EulerMethod")]
        EulerMethod = 2,
        
        [JsonProperty("ThirdOrderBackwardDifference")]
        ThirdOrderBackwardDifference = 3,
    }
    
    [Description("Determines which contaminant concentration will be simulates.")]
    [JsonObject("ZoneAirContaminantBalance")]
    public class ZoneAirContaminantBalance
    {
        
[Description(@"If Yes, CO2 simulation will be performed.")]
[JsonProperty(@"If Yes, CO2 simulation will be performed.")]
public YesNoDefault CarbonDioxideConcentration { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Schedule values should be in parts per million (ppm)")]
[JsonProperty(@"Schedule values should be in parts per million (ppm)")]
public System.String OutdoorCarbonDioxideScheduleName { get; set; } = "";
        
[Description(@"If Yes, generic contaminant simulation will be performed.")]
[JsonProperty(@"If Yes, generic contaminant simulation will be performed.")]
public YesNoDefault GenericContaminantConcentration { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Schedule values should be generic contaminant concentration in parts per million (ppm)")]
[JsonProperty(@"Schedule values should be generic contaminant concentration in parts per million (ppm)")]
public System.String OutdoorGenericContaminantScheduleName { get; set; } = "";
    }
    
    [Description(@"Enforces the zone air mass flow balance by either adjusting zone mixing object flow only, adjusting zone total return flow only, zone mixing and the zone total return flows, or adjusting the zone total return and zone mixing object flows. Zone infiltration flow air flow is increased or decreased depending user selection in the infiltration treatment method. If either of zone mixing or zone return flow adjusting methods or infiltration is active, then the zone air mass flow balance calculation will attempt to enforce conservation of mass for each zone. If flow balancing method is ""None"" and infiltration is ""None"", then the zone air mass flow calculation defaults to assume self-balanced simple flow mixing and infiltration objects.")]
    [JsonObject("ZoneAirMassFlowConservation")]
    public class ZoneAirMassFlowConservation
    {
        
[Description(@"If "AdjustMixingOnly", zone mixing object flow rates are adjusted to balance the zone air mass flow and zone infiltration air flow may be increased or decreased if required in order to balance the zone air mass flow. If "AdjustReturnOnly", zone total return flow rate is adjusted to balance the zone air mass flow and zone infiltration air flow may be increased or decreased if required in order to balance the zone air mass flow. If "AdjustMixingThenReturn", first the zone mixing objects flow rates are adjusted to balance the zone air flow, second zone total return flow rate is adjusted and zone infiltration air flow may be increased or decreased if required in order to balance the zone air mass flow. If "AdjustReturnThenMixing", first zone total return flow rate is adjusted to balance the zone air flow, second the zone mixing object flow rates are adjusted and infiltration air flow may be increased or decreased if required in order to balance the zone air mass flow.")]
[JsonProperty(@"If "AdjustMixingOnly", zone mixing object flow rates are adjusted to balance the zone air mass flow and zone infiltration air flow may be increased or decreased if required in order to balance the zone air mass flow. If "AdjustReturnOnly", zone total return flow rate is adjusted to balance the zone air mass flow and zone infiltration air flow may be increased or decreased if required in order to balance the zone air mass flow. If "AdjustMixingThenReturn", first the zone mixing objects flow rates are adjusted to balance the zone air flow, second zone total return flow rate is adjusted and zone infiltration air flow may be increased or decreased if required in order to balance the zone air mass flow. If "AdjustReturnThenMixing", first zone total return flow rate is adjusted to balance the zone air flow, second the zone mixing object flow rates are adjusted and infiltration air flow may be increased or decreased if required in order to balance the zone air mass flow.")]
public YesNoDefault AdjustZoneMixingAndReturnForAirMassFlowBalance { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"This input field allows user to choose how zone infiltration flow is treated during the zone air mass flow balance calculation. AddInfiltrationFlow may add infiltration to the base flow specified in the infiltration object to balance the zone air mass flow. The additional infiltration air mass flow is not self-balanced. The base flow is assumed to be self-balanced. AdjustInfiltrationFlow may adjust the base flow calculated using the base flow specified in the infiltration object to balance the zone air mass flow. If it If no adjustment is required, then the base infiltration is assumed to be self-balanced. None will make no changes to the base infiltration flow.")]
[JsonProperty(@"This input field allows user to choose how zone infiltration flow is treated during the zone air mass flow balance calculation. AddInfiltrationFlow may add infiltration to the base flow specified in the infiltration object to balance the zone air mass flow. The additional infiltration air mass flow is not self-balanced. The base flow is assumed to be self-balanced. AdjustInfiltrationFlow may adjust the base flow calculated using the base flow specified in the infiltration object to balance the zone air mass flow. If it If no adjustment is required, then the base infiltration is assumed to be self-balanced. None will make no changes to the base infiltration flow.")]
public YesNoDefault InfiltrationBalancingMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AddInfiltrationFlow");
        
[Description(@"This input field allows user to choose which zones are included in infiltration balancing. MixingSourceZonesOnly allows infiltration balancing only in zones which as source zones for mixing which also have an infiltration object defined. AllZones allows infiltration balancing in any zone which has an infiltration object defined.")]
[JsonProperty(@"This input field allows user to choose which zones are included in infiltration balancing. MixingSourceZonesOnly allows infiltration balancing only in zones which as source zones for mixing which also have an infiltration object defined. AllZones allows infiltration balancing in any zone which has an infiltration object defined.")]
public YesNoDefault InfiltrationBalancingZones { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "MixingSourceZonesOnly");
    }
    
    public enum AdjustZoneMixingAndReturnForAirMassFlowBalanceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AdjustMixingOnly")]
        AdjustMixingOnly = 1,
        
        [JsonProperty("AdjustMixingThenReturn")]
        AdjustMixingThenReturn = 2,
        
        [JsonProperty("AdjustReturnOnly")]
        AdjustReturnOnly = 3,
        
        [JsonProperty("AdjustReturnThenMixing")]
        AdjustReturnThenMixing = 4,
        
        [JsonProperty("None")]
        None = 5,
    }
    
    public enum InfiltrationBalancingMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AddInfiltrationFlow")]
        AddInfiltrationFlow = 1,
        
        [JsonProperty("AdjustInfiltrationFlow")]
        AdjustInfiltrationFlow = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum InfiltrationBalancingZonesType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AllZones")]
        AllZones = 1,
        
        [JsonProperty("MixingSourceZonesOnly")]
        MixingSourceZonesOnly = 2,
    }
    
    [Description("Multiplier altering the relative capacitance of the air compared to an empty zone" +
        "")]
    [JsonObject("ZoneCapacitanceMultiplier:ResearchSpecial")]
    public class ZoneCapacitanceMultiplier_ResearchSpecial
    {
        
[Description(@"If this field is left blank, the multipliers are applied to all the zones not specified")]
[JsonProperty(@"If this field is left blank, the multipliers are applied to all the zones not specified")]
public System.String ZoneOrZonelistName { get; set; } = "";
        
[Description(@"Used to alter the capacitance of zone air with respect to heat or temperature")]
[JsonProperty(@"Used to alter the capacitance of zone air with respect to heat or temperature")]
public System.Single TemperatureCapacityMultiplier { get; set; } = 1;
        
[Description(@"Used to alter the capacitance of zone air with respect to moisture or humidity ratio")]
[JsonProperty(@"Used to alter the capacitance of zone air with respect to moisture or humidity ratio")]
public System.Single HumidityCapacityMultiplier { get; set; } = 1;
        
[Description(@"Used to alter the capacitance of zone air with respect to zone air carbon dioxide concentration")]
[JsonProperty(@"Used to alter the capacitance of zone air with respect to zone air carbon dioxide concentration")]
public System.Single CarbonDioxideCapacityMultiplier { get; set; } = 1;
        
[Description(@"Used to alter the capacitance of zone air with respect to zone air generic contaminant concentration")]
[JsonProperty(@"Used to alter the capacitance of zone air with respect to zone air generic contaminant concentration")]
public System.Single GenericContaminantCapacityMultiplier { get; set; } = 1;
    }
    
    [Description("Specifies the \"basic\" timestep for the simulation. The value entered here is also" +
        " known as the Zone Timestep. This is used in the Zone Heat Balance Model calcula" +
        "tion as the driving timestep for heat transfer and load calculations.")]
    [JsonObject("Timestep")]
    public class Timestep
    {
        
[Description(@"Number in hour: normal validity 4 to 60: 6 suggested Must be evenly divisible into 60 Allowable values include 1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30, and 60 Normal 6 is minimum as lower values may cause inaccuracies A minimum value of 20 is suggested for both ConductionFiniteDifference and CombinedHeatAndMoistureFiniteElement surface heat balance algorithms A minimum of 12 is suggested for simulations involving a Vegetated Roof (Material:RoofVegetation).")]
[JsonProperty(@"Number in hour: normal validity 4 to 60: 6 suggested Must be evenly divisible into 60 Allowable values include 1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30, and 60 Normal 6 is minimum as lower values may cause inaccuracies A minimum value of 20 is suggested for both ConductionFiniteDifference and CombinedHeatAndMoistureFiniteElement surface heat balance algorithms A minimum of 12 is suggested for simulations involving a Vegetated Roof (Material:RoofVegetation).")]
public System.Single NumberOfTimestepsPerHour { get; set; } = 6;
    }
    
    [Description("Specifies limits on HVAC system simulation timesteps and iterations. This item is" +
        " an advanced feature that should be used only with caution.")]
    [JsonObject("ConvergenceLimits")]
    public class ConvergenceLimits
    {
        
[Description(@"0 sets the minimum to the zone timestep (ref: Timestep) 1 is normal (ratchet down to 1 minute) setting greater than zone timestep (in minutes) will effectively set to zone timestep")]
[JsonProperty(@"0 sets the minimum to the zone timestep (ref: Timestep) 1 is normal (ratchet down to 1 minute) setting greater than zone timestep (in minutes) will effectively set to zone timestep")]
public System.Single MinimumSystemTimestep { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumHvacIterations { get; set; } = 20;
        
[Description(@"Controls the minimum number of plant system solver iterations within a single HVAC iteration Larger values will increase runtime but might improve solution accuracy for complicated plant systems Complex plants include: several interconnected loops, heat recovery, thermal load following generators, etc.")]
[JsonProperty(@"Controls the minimum number of plant system solver iterations within a single HVAC iteration Larger values will increase runtime but might improve solution accuracy for complicated plant systems Complex plants include: several interconnected loops, heat recovery, thermal load following generators, etc.")]
public System.Single MinimumPlantIterations { get; set; } = 2;
        
[Description(@"Controls the maximum number of plant system solver iterations within a single HVAC iteration Smaller values might decrease runtime but could decrease solution accuracy for complicated plant systems")]
[JsonProperty(@"Controls the maximum number of plant system solver iterations within a single HVAC iteration Smaller values might decrease runtime but could decrease solution accuracy for complicated plant systems")]
public System.Single MaximumPlantIterations { get; set; } = 8;
    }
    
    [Description("Specifies a HVAC system solver algorithm to find a root")]
    [JsonObject("HVACSystemRootFindingAlgorithm")]
    public class HVACSystemRootFindingAlgorithm
    {
        
[JsonProperty(@"")]
public YesNoDefault Algorithm { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "RegulaFalsi");
        
[Description(@"This field is used when RegulaFalsiThenBisection or BisectionThenRegulaFalsi is entered. When iteration number is greater than the value, algorithm switches.")]
[JsonProperty(@"This field is used when RegulaFalsiThenBisection or BisectionThenRegulaFalsi is entered. When iteration number is greater than the value, algorithm switches.")]
public System.Single NumberOfIterationsBeforeAlgorithmSwitch { get; set; } = 5;
    }
    
    public enum AlgorithmType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Alternation")]
        Alternation = 1,
        
        [JsonProperty("Bisection")]
        Bisection = 2,
        
        [JsonProperty("BisectionThenRegulaFalsi")]
        BisectionThenRegulaFalsi = 3,
        
        [JsonProperty("RegulaFalsi")]
        RegulaFalsi = 4,
        
        [JsonProperty("RegulaFalsiThenBisection")]
        RegulaFalsiThenBisection = 5,
    }
}
namespace EnergyPlus.SolarCollectors
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Thermal and optical performance parameters for a single flat plate solar collector module. These parameters are based on the testing methodologies described in ASHRAE Standards 93 and 96 which are used Solar Rating and Certification Corporation (SRCC) Directory of SRCC Certified Solar Collector Ratings. See EnergyPlus DataSets file SolarCollectors.idf.")]
    [JsonObject("SolarCollectorPerformance:FlatPlate")]
    public class SolarCollectorPerformance_FlatPlate
    {
        
[JsonProperty(@"")]
public System.Single GrossArea { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault TestFluid { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Water");
        
[JsonProperty(@"")]
public System.Single TestFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault TestCorrelationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Y-intercept term")]
[JsonProperty(@"Y-intercept term")]
public System.Single CoefficientOfEfficiencyEquation { get; set; } = ;
        
[Description(@"1st Order term")]
[JsonProperty(@"1st Order term")]
public System.Single CoefficientOfEfficiencyEquation { get; set; } = ;
        
[Description(@"2nd order term")]
[JsonProperty(@"2nd order term")]
public System.Single CoefficientOfEfficiencyEquation { get; set; } = ;
        
[Description(@"1st order term")]
[JsonProperty(@"1st order term")]
public System.Single CoefficientOfIncidentAngleModifier { get; set; } = ;
        
[Description(@"2nd order term")]
[JsonProperty(@"2nd order term")]
public System.Single CoefficientOfIncidentAngleModifier { get; set; } = ;
    }
    
    public enum TestFluidType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Water")]
        Water = 1,
    }
    
    public enum TestCorrelationTypeType
    {
        
        [JsonProperty("Average")]
        Average = 0,
        
        [JsonProperty("Inlet")]
        Inlet = 1,
        
        [JsonProperty("Outlet")]
        Outlet = 2,
    }
    
    [Description(@"Flat plate water solar collector (single glazed, unglazed, or evacuated tube). Thermal and optical properties are taken from the referenced SolarCollectorPerformance:FlatPlate object. Collector tilt, azimuth, and gross area are taken from the referenced building surface or shading surface. The collector surface participates normally in all shading calculations.")]
    [JsonObject("SolarCollector:FlatPlate:Water")]
    public class SolarCollector_FlatPlate_Water
    {
        
[JsonProperty(@"")]
public System.String SolarcollectorperformanceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MaximumFlowRate { get; set; } = ;
    }
    
    [Description("Models hybrid photovoltaic-thermal (PVT) solar collectors that convert incident s" +
        "olar energy into both electricity and useful thermal energy by heating air or wa" +
        "ter.")]
    [JsonObject("SolarCollector:FlatPlate:PhotovoltaicThermal")]
    public class SolarCollector_FlatPlate_PhotovoltaicThermal
    {
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PhotovoltaicThermalModelPerformanceName { get; set; } = "";
        
[Description(@"Enter the name of a Generator:Photovoltaic object.")]
[JsonProperty(@"Enter the name of a Generator:Photovoltaic object.")]
public System.String PhotovoltaicName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ThermalWorkingFluidType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String WaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DesignFlowRate { get; set; } = "";
    }
    
    public enum ThermalWorkingFluidTypeType
    {
        
        [JsonProperty("Air")]
        Air = 0,
        
        [JsonProperty("Water")]
        Water = 1,
    }
    
    [Description("Thermal performance parameters for a hybrid photovoltaic-thermal (PVT) solar coll" +
        "ector.")]
    [JsonObject("SolarCollectorPerformance:PhotovoltaicThermal:Simple")]
    public class SolarCollectorPerformance_PhotovoltaicThermal_Simple
    {
        
[JsonProperty(@"")]
public System.Single FractionOfSurfaceAreaWithActiveThermalCollector { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault ThermalConversionEfficiencyInputModeType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Efficiency = (thermal power generated [W])/(incident solar[W])")]
[JsonProperty(@"Efficiency = (thermal power generated [W])/(incident solar[W])")]
public System.Single ValueForThermalConversionEfficiencyIfFixed { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ThermalConversionEfficiencyScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single FrontSurfaceEmittance { get; set; } = 0.84;
    }
    
    public enum ThermalConversionEfficiencyInputModeTypeType
    {
        
        [JsonProperty("Fixed")]
        Fixed = 0,
        
        [JsonProperty("Scheduled")]
        Scheduled = 1,
    }
    
    [Description(@"Glazed solar collector with integral storage unit. Thermal and optical properties are taken from the referenced SolarCollectorPerformance:IntegralCollectorStorage object. Collector tilt, azimuth, and gross area are taken from the referenced building surface or shading surface. The collector surface participates normally in all shading calculations.")]
    [JsonObject("SolarCollector:IntegralCollectorStorage")]
    public class SolarCollector_IntegralCollectorStorage
    {
        
[JsonProperty(@"")]
public System.String IntegralcollectorstorageparametersName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault BottomSurfaceBoundaryConditionsType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AmbientAir");
        
[Description(@"Enter the name of a SurfaceProperty:OtherSideConditionsModel object. Specified only if the boundary condition type is OtherSideConditionsModel, otherwise leave it blank")]
[JsonProperty(@"Enter the name of a SurfaceProperty:OtherSideConditionsModel object. Specified only if the boundary condition type is OtherSideConditionsModel, otherwise leave it blank")]
public System.String BoundaryConditionModelName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MaximumFlowRate { get; set; } = ;
    }
    
    public enum BottomSurfaceBoundaryConditionsTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AmbientAir")]
        AmbientAir = 1,
        
        [JsonProperty("OtherSideConditionsModel")]
        OtherSideConditionsModel = 2,
    }
    
    [Description("Thermal and optical performance parameters for a single glazed solar collector wi" +
        "th integral storage unit.")]
    [JsonObject("SolarCollectorPerformance:IntegralCollectorStorage")]
    public class SolarCollectorPerformance_IntegralCollectorStorage
    {
        
[Description(@"Currently only RectangularTank ICS collector type is available.")]
[JsonProperty(@"Currently only RectangularTank ICS collector type is available.")]
public YesNoDefault IcsCollectorType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "RectangularTank");
        
[JsonProperty(@"")]
public System.Single GrossArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CollectorWaterVolume { get; set; } = ;
        
[Description(@"Heat loss conductance of the collector bottom insulation")]
[JsonProperty(@"Heat loss conductance of the collector bottom insulation")]
public System.Single BottomHeatLossConductance { get; set; } = 0.4;
        
[Description(@"heat loss conductance of the collector side insulation")]
[JsonProperty(@"heat loss conductance of the collector side insulation")]
public System.Single SideHeatLossConductance { get; set; } = 0.6;
        
[Description(@"This value is ratio of the width (short side) to length (long side of) of the collector. Used to calculate the perimeter of the collector")]
[JsonProperty(@"This value is ratio of the width (short side) to length (long side of) of the collector. Used to calculate the perimeter of the collector")]
public System.Single AspectRatio { get; set; } = 0.8;
        
[Description(@"This value is used to estimate collector side area for the heat loss calculation through the collector side")]
[JsonProperty(@"This value is used to estimate collector side area for the heat loss calculation through the collector side")]
public System.Single CollectorSideHeight { get; set; } = 0.2;
        
[Description(@"Calculated from the specific heat, density and thickness of the absorber plate.")]
[JsonProperty(@"Calculated from the specific heat, density and thickness of the absorber plate.")]
public System.Single ThermalMassOfAbsorberPlate { get; set; } = 0;
        
[Description(@"Number of transparent covers. Common practice is to use low-iron glass as the outer cover and very thin transparent sheet such as Teflon as the inner cover.")]
[JsonProperty(@"Number of transparent covers. Common practice is to use low-iron glass as the outer cover and very thin transparent sheet such as Teflon as the inner cover.")]
public System.Single NumberOfCovers { get; set; } = 2;
        
[Description(@"The gap between the transparent covers and between the inner cover and the absorber plate")]
[JsonProperty(@"The gap between the transparent covers and between the inner cover and the absorber plate")]
public System.Single CoverSpacing { get; set; } = 0.05;
        
[Description(@"Refractive index of outer cover. Typically low-iron glass is used as the outer cover material, and used as the default outer cover with a value of 1.526.")]
[JsonProperty(@"Refractive index of outer cover. Typically low-iron glass is used as the outer cover material, and used as the default outer cover with a value of 1.526.")]
public System.Single RefractiveIndexOfOuterCover { get; set; } = 1.526;
        
[Description(@"Clear glass has extinction coefficient of about 15 [1/m] and with thickness of 3.0mm, the product of the extinction coefficient and thickness becomes 0.045 (=15 * 0.003)")]
[JsonProperty(@"Clear glass has extinction coefficient of about 15 [1/m] and with thickness of 3.0mm, the product of the extinction coefficient and thickness becomes 0.045 (=15 * 0.003)")]
public System.Single ExtinctionCoefficientTimesThicknessOfOuterCover { get; set; } = 0.045;
        
[Description(@"Thermal emissivity of the outer cover, commonly glass is used as the out collector cover material.")]
[JsonProperty(@"Thermal emissivity of the outer cover, commonly glass is used as the out collector cover material.")]
public System.Single EmissivityOfOuterCover { get; set; } = 0.88;
        
[Description(@"Typical material is very thin sheet of Teflon (PTFE). The default value is refractive index of Teflon.")]
[JsonProperty(@"Typical material is very thin sheet of Teflon (PTFE). The default value is refractive index of Teflon.")]
public System.Single RefractiveIndexOfInnerCover { get; set; } = 1.37;
        
[Description(@"Default inner cover is very thin sheet of Teflon with extinction coefficient of approximately 40.0 and a thickness 0.2mm yields a default value of 0.008.")]
[JsonProperty(@"Default inner cover is very thin sheet of Teflon with extinction coefficient of approximately 40.0 and a thickness 0.2mm yields a default value of 0.008.")]
public System.Single ExtinctionCoefficientTimesThicknessOfTheInnerCover { get; set; } = 0.008;
        
[Description(@"Thermal emissivity of the inner cover material")]
[JsonProperty(@"Thermal emissivity of the inner cover material")]
public System.Single EmissivityOfInnerCover { get; set; } = 0.88;
        
[Description(@"The absorber plate solar absorptance. Copper is assumed as the default absorber plate.")]
[JsonProperty(@"The absorber plate solar absorptance. Copper is assumed as the default absorber plate.")]
public System.Single AbsorptanceOfAbsorberPlate { get; set; } = 0.96;
        
[Description(@"Thermal emissivity of the absorber plate")]
[JsonProperty(@"Thermal emissivity of the absorber plate")]
public System.Single EmissivityOfAbsorberPlate { get; set; } = 0.3;
    }
    
    public enum IcsCollectorTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("RectangularTank")]
        RectangularTank = 1,
    }
    
    [Description(@"Unglazed transpired solar collector (UTSC) used to condition outdoor air. This type of collector is generally used to heat air drawn through perforated absorbers and also recover heat conducted out through the underlying surface. This object represents a single collector attached to one or more building or shading surfaces and to one or more outdoor air systems.")]
    [JsonObject("SolarCollector:UnglazedTranspired")]
    public class SolarCollector_UnglazedTranspired
    {
        
[Description(@"Enter the name of a SurfaceProperty:OtherSideConditionsModel object")]
[JsonProperty(@"Enter the name of a SurfaceProperty:OtherSideConditionsModel object")]
public System.String BoundaryConditionsModelName { get; set; } = "";
        
[Description(@"Availability schedule name for this collector. Schedule value > 0 means it is available. If this field is blank, the collector is always available.")]
[JsonProperty(@"Availability schedule name for this collector. Schedule value > 0 means it is available. If this field is blank, the collector is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"required field if no SolarCollector:UnglazedTranspired:Multisystem")]
[JsonProperty(@"required field if no SolarCollector:UnglazedTranspired:Multisystem")]
public System.String InletNodeName { get; set; } = "";
        
[Description(@"required field if no SolarCollector:UnglazedTranspired:Multisystem")]
[JsonProperty(@"required field if no SolarCollector:UnglazedTranspired:Multisystem")]
public System.String OutletNodeName { get; set; } = "";
        
[Description(@"This node is where the mixed air setpoint is determined. required field if no SolarCollector:UnglazedTranspired:Multisystem")]
[JsonProperty(@"This node is where the mixed air setpoint is determined. required field if no SolarCollector:UnglazedTranspired:Multisystem")]
public System.String SetpointNodeName { get; set; } = "";
        
[Description(@"This node is used to identify the affected zone required field if no SolarCollector:UnglazedTranspired:Multisystem")]
[JsonProperty(@"This node is used to identify the affected zone required field if no SolarCollector:UnglazedTranspired:Multisystem")]
public System.String ZoneNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FreeHeatingSetpointScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DiameterOfPerforationsInCollector { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DistanceBetweenPerforationsInCollector { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalEmissivityOfCollectorSurface { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SolarAbsorbtivityOfCollectorSurface { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single EffectiveOverallHeightOfCollector { get; set; } = ;
        
[Description(@"if corrugated, use average depth")]
[JsonProperty(@"if corrugated, use average depth")]
public System.Single EffectiveGapThicknessOfPlenumBehindCollector { get; set; } = ;
        
[Description(@"if corrugated, use average depth")]
[JsonProperty(@"if corrugated, use average depth")]
public System.Single EffectiveCrossSectionAreaOfPlenumBehindCollector { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault HoleLayoutPatternForPitch { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Square");
        
[JsonProperty(@"")]
public YesNoDefault HeatExchangeEffectivenessCorrelation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Kutscher1994");
        
[Description(@"This parameter is used to help account for corrugations in the collector")]
[JsonProperty(@"This parameter is used to help account for corrugations in the collector")]
public System.Single RatioOfActualCollectorSurfaceAreaToProjectedSurfaceArea { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault RoughnessOfCollector { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Collector thickness is not required for Kutscher correlation Collector thickness is required for Van Decker et al. correlation")]
[JsonProperty(@"Collector thickness is not required for Kutscher correlation Collector thickness is required for Van Decker et al. correlation")]
public System.Single CollectorThickness { get; set; } = ;
        
[Description(@"Cv")]
[JsonProperty(@"Cv")]
public System.Single EffectivenessForPerforationsWithRespectToWind { get; set; } = 0.25;
        
[Description(@"Cd")]
[JsonProperty(@"Cd")]
public System.Single DischargeCoefficientForOpeningsWithRespectToBuoyancyDrivenFlow { get; set; } = 0.65;
        
[JsonProperty(@"")]
public System.String Surfaces { get; set; } = "";
    }
    
    public enum HoleLayoutPatternForPitchType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Square")]
        Square = 1,
        
        [JsonProperty("Triangle")]
        Triangle = 2,
    }
    
    public enum HeatExchangeEffectivenessCorrelationType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Kutscher1994")]
        Kutscher = 1,
        
        [JsonProperty("VanDeckerHollandsBrunger2001")]
        VanDeckerHollandsBrunger = 2,
    }
    
    public enum RoughnessOfCollectorType
    {
        
        [JsonProperty("MediumRough")]
        MediumRough = 0,
        
        [JsonProperty("MediumSmooth")]
        MediumSmooth = 1,
        
        [JsonProperty("Rough")]
        Rough = 2,
        
        [JsonProperty("Smooth")]
        Smooth = 3,
        
        [JsonProperty("VeryRough")]
        VeryRough = 4,
        
        [JsonProperty("VerySmooth")]
        VerySmooth = 5,
    }
    
    [Description("quad-tuples of inlet, outlet, control, and zone nodes for multiple different outd" +
        "oor air systems attached to same collector")]
    [JsonObject("SolarCollector:UnglazedTranspired:Multisystem")]
    public class SolarCollector_UnglazedTranspired_Multisystem
    {
        
[Description(@"Enter the name of a SolarCollector:UnglazedTranspired object.")]
[JsonProperty(@"Enter the name of a SolarCollector:UnglazedTranspired object.")]
public System.String SolarCollectorName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Systems { get; set; } = "";
    }
}
namespace EnergyPlus.SurfaceConstructionElements
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Regular materials described with full set of thermal properties")]
    [JsonObject("Material")]
    public class Material
    {
        
[JsonProperty(@"")]
public YesNoDefault Roughness { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single Thickness { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Conductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Density { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SpecificHeat { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalAbsorptance { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single SolarAbsorptance { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single VisibleAbsorptance { get; set; } = 0.7;
    }
    
    public enum RoughnessType
    {
        
        [JsonProperty("MediumRough")]
        MediumRough = 0,
        
        [JsonProperty("MediumSmooth")]
        MediumSmooth = 1,
        
        [JsonProperty("Rough")]
        Rough = 2,
        
        [JsonProperty("Smooth")]
        Smooth = 3,
        
        [JsonProperty("VeryRough")]
        VeryRough = 4,
        
        [JsonProperty("VerySmooth")]
        VerySmooth = 5,
    }
    
    [Description("Regular materials properties described whose principal description is R (Thermal " +
        "Resistance)")]
    [JsonObject("Material:NoMass")]
    public class Material_NoMass
    {
        
[JsonProperty(@"")]
public YesNoDefault Roughness { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single ThermalResistance { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalAbsorptance { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single SolarAbsorptance { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single VisibleAbsorptance { get; set; } = 0.7;
    }
    
    public enum RoughnessType
    {
        
        [JsonProperty("MediumRough")]
        MediumRough = 0,
        
        [JsonProperty("MediumSmooth")]
        MediumSmooth = 1,
        
        [JsonProperty("Rough")]
        Rough = 2,
        
        [JsonProperty("Smooth")]
        Smooth = 3,
        
        [JsonProperty("VeryRough")]
        VeryRough = 4,
        
        [JsonProperty("VerySmooth")]
        VerySmooth = 5,
    }
    
    [Description(@"Special infrared transparent material. Similar to a Material:Nomass with low thermal resistance. High absorptance in both wavelengths. Area will be doubled internally to make internal radiant exchange accurate. Should be only material in single layer surface construction. All thermal properties are set internally. User needs only to supply name. Cannot be used with ConductionFiniteDifference solution algorithms")]
    [JsonObject("Material:InfraredTransparent")]
    public class Material_InfraredTransparent
    {
    }
    
    [Description("Air Space in Opaque Construction")]
    [JsonObject("Material:AirGap")]
    public class Material_AirGap
    {
        
[JsonProperty(@"")]
public System.Single ThermalResistance { get; set; } = ;
    }
    
    [Description(@"EcoRoof model, plant layer plus soil layer Implemented by Portland State University (Sailor et al., January, 2007) only one material must be referenced per simulation though the same EcoRoof material could be used in multiple constructions. New moisture redistribution scheme (2010) requires higher number of timesteps per hour (minimum 12 recommended).")]
    [JsonObject("Material:RoofVegetation")]
    public class Material_RoofVegetation
    {
        
[Description(@"The ecoroof module is designed for short plants and shrubs.")]
[JsonProperty(@"The ecoroof module is designed for short plants and shrubs.")]
public System.Single HeightOfPlants { get; set; } = 0.2;
        
[Description(@"Entire surface is assumed covered, so decrease LAI accordingly.")]
[JsonProperty(@"Entire surface is assumed covered, so decrease LAI accordingly.")]
public System.Single LeafAreaIndex { get; set; } = 1;
        
[Description(@"Leaf reflectivity (albedo) is typically 0.18-0.25")]
[JsonProperty(@"Leaf reflectivity (albedo) is typically 0.18-0.25")]
public System.Single LeafReflectivity { get; set; } = 0.22;
        
[JsonProperty(@"")]
public System.Single LeafEmissivity { get; set; } = 0.95;
        
[Description(@"This depends upon plant type")]
[JsonProperty(@"This depends upon plant type")]
public System.Single MinimumStomatalResistance { get; set; } = 180;
        
[JsonProperty(@"")]
public System.String SoilLayerName { get; set; } = (System.String)Green Roof Soil;
        
[JsonProperty(@"")]
public YesNoDefault Roughness { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "MediumRough");
        
[Description(@"thickness of the soil layer of the EcoRoof Soil depths of 0.15m (6in) and 0.30m (12in) are common.")]
[JsonProperty(@"thickness of the soil layer of the EcoRoof Soil depths of 0.15m (6in) and 0.30m (12in) are common.")]
public System.Single Thickness { get; set; } = 0.1;
        
[Description(@"Thermal conductivity of dry soil. Typical ecoroof soils range from 0.3 to 0.5")]
[JsonProperty(@"Thermal conductivity of dry soil. Typical ecoroof soils range from 0.3 to 0.5")]
public System.Single ConductivityOfDrySoil { get; set; } = 0.35;
        
[Description(@"Density of dry soil (the code modifies this as the soil becomes moist) Typical ecoroof soils range from 400 to 1000 (dry to wet)")]
[JsonProperty(@"Density of dry soil (the code modifies this as the soil becomes moist) Typical ecoroof soils range from 400 to 1000 (dry to wet)")]
public System.Single DensityOfDrySoil { get; set; } = 1100;
        
[Description(@"Specific heat of dry soil")]
[JsonProperty(@"Specific heat of dry soil")]
public System.Single SpecificHeatOfDrySoil { get; set; } = 1200;
        
[Description(@"Soil emissivity is typically in range of 0.90 to 0.98")]
[JsonProperty(@"Soil emissivity is typically in range of 0.90 to 0.98")]
public System.Single ThermalAbsorptance { get; set; } = 0.9;
        
[Description(@"Solar absorptance of dry soil (1-albedo) is typically 0.60 to 0.85 corresponding to a dry albedo of 0.15 to 0.40")]
[JsonProperty(@"Solar absorptance of dry soil (1-albedo) is typically 0.60 to 0.85 corresponding to a dry albedo of 0.15 to 0.40")]
public System.Single SolarAbsorptance { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single VisibleAbsorptance { get; set; } = 0.75;
        
[Description(@"Maximum moisture content is typically less than 0.5")]
[JsonProperty(@"Maximum moisture content is typically less than 0.5")]
public System.Single SaturationVolumetricMoistureContentOfTheSoilLayer { get; set; } = 0.3;
        
[JsonProperty(@"")]
public System.Single ResidualVolumetricMoistureContentOfTheSoilLayer { get; set; } = 0.01;
        
[JsonProperty(@"")]
public System.Single InitialVolumetricMoistureContentOfTheSoilLayer { get; set; } = 0.1;
        
[Description(@"Advanced calculation requires increased number of timesteps (recommended >20).")]
[JsonProperty(@"Advanced calculation requires increased number of timesteps (recommended >20).")]
public YesNoDefault MoistureDiffusionCalculationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Advanced");
    }
    
    public enum RoughnessType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MediumRough")]
        MediumRough = 1,
        
        [JsonProperty("MediumSmooth")]
        MediumSmooth = 2,
        
        [JsonProperty("Rough")]
        Rough = 3,
        
        [JsonProperty("Smooth")]
        Smooth = 4,
        
        [JsonProperty("VeryRough")]
        VeryRough = 5,
        
        [JsonProperty("VerySmooth")]
        VerySmooth = 6,
    }
    
    public enum MoistureDiffusionCalculationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Advanced")]
        Advanced = 1,
        
        [JsonProperty("Simple")]
        Simple = 2,
    }
    
    [Description("Alternate method of describing windows This window material object is used to def" +
        "ine an entire glazing system using simple performance parameters.")]
    [JsonObject("WindowMaterial:SimpleGlazingSystem")]
    public class WindowMaterial_SimpleGlazingSystem
    {
        
[Description(@"Enter U-Factor including film coefficients Note that the effective upper limit for U-factor is 5.8 W/m2-K")]
[JsonProperty(@"Enter U-Factor including film coefficients Note that the effective upper limit for U-factor is 5.8 W/m2-K")]
public System.Single UFactor { get; set; } = ;
        
[Description(@"SHGC at Normal Incidence")]
[JsonProperty(@"SHGC at Normal Incidence")]
public System.Single SolarHeatGainCoefficient { get; set; } = ;
        
[Description(@"VT at Normal Incidence optional")]
[JsonProperty(@"VT at Normal Incidence optional")]
public System.Single VisibleTransmittance { get; set; } = ;
    }
    
    [Description("Glass material properties for Windows or Glass Doors Transmittance/Reflectance in" +
        "put method.")]
    [JsonObject("WindowMaterial:Glazing")]
    public class WindowMaterial_Glazing
    {
        
[JsonProperty(@"")]
public YesNoDefault OpticalDataType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Used only when Optical Data Type = Spectral")]
[JsonProperty(@"Used only when Optical Data Type = Spectral")]
public System.String WindowGlassSpectralDataSetName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single Thickness { get; set; } = ;
        
[Description(@"Used only when Optical Data Type = SpectralAverage")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage")]
public System.Single SolarTransmittanceAtNormalIncidence { get; set; } = ;
        
[Description(@"Used only when Optical Data Type = SpectralAverage Front Side is side closest to outdoor air")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage Front Side is side closest to outdoor air")]
public System.Single FrontSideSolarReflectanceAtNormalIncidence { get; set; } = ;
        
[Description(@"Used only when Optical Data Type = SpectralAverage Back Side is side closest to zone air")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage Back Side is side closest to zone air")]
public System.Single BackSideSolarReflectanceAtNormalIncidence { get; set; } = ;
        
[Description(@"Used only when Optical Data Type = SpectralAverage")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage")]
public System.Single VisibleTransmittanceAtNormalIncidence { get; set; } = ;
        
[Description(@"Used only when Optical Data Type = SpectralAverage")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage")]
public System.Single FrontSideVisibleReflectanceAtNormalIncidence { get; set; } = ;
        
[Description(@"Used only when Optical Data Type = SpectralAverage")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage")]
public System.Single BackSideVisibleReflectanceAtNormalIncidence { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single InfraredTransmittanceAtNormalIncidence { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single FrontSideInfraredHemisphericalEmissivity { get; set; } = 0.84;
        
[JsonProperty(@"")]
public System.Single BackSideInfraredHemisphericalEmissivity { get; set; } = 0.84;
        
[JsonProperty(@"")]
public System.Single Conductivity { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single DirtCorrectionFactorForSolarAndVisibleTransmittance { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault SolarDiffusing { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"coefficient used for deflection calculations. Used only with complex fenestration when deflection model is set to TemperatureAndPressureInput")]
[JsonProperty(@"coefficient used for deflection calculations. Used only with complex fenestration when deflection model is set to TemperatureAndPressureInput")]
public System.Single YoungSModulus { get; set; } = 72000000000;
        
[Description(@"coefficient used for deflection calculations. Used only with complex fenestration when deflection model is set to TemperatureAndPressureInput")]
[JsonProperty(@"coefficient used for deflection calculations. Used only with complex fenestration when deflection model is set to TemperatureAndPressureInput")]
public System.Single PoissonSRatio { get; set; } = 0.22;
        
[Description(@"Used only when Optical Data Type = SpectralAndAngle")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAndAngle")]
public System.String WindowGlassSpectralAndIncidentAngleTransmittanceDataSetTableName { get; set; } = "";
        
[Description(@"Used only when Optical Data Type = SpectralAndAngle")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAndAngle")]
public System.String WindowGlassSpectralAndIncidentAngleFrontReflectanceDataSetTableName { get; set; } = "";
        
[Description(@"Used only when Optical Data Type = SpectralAndAngle")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAndAngle")]
public System.String WindowGlassSpectralAndIncidentAngleBackReflectanceDataSetTableName { get; set; } = "";
    }
    
    public enum OpticalDataTypeType
    {
        
        [JsonProperty("BSDF")]
        BSDF = 0,
        
        [JsonProperty("Spectral")]
        Spectral = 1,
        
        [JsonProperty("SpectralAndAngle")]
        SpectralAndAngle = 2,
        
        [JsonProperty("SpectralAverage")]
        SpectralAverage = 3,
    }
    
    [Description("thermochromic glass at different temperatures")]
    [JsonObject("WindowMaterial:GlazingGroup:Thermochromic")]
    public class WindowMaterial_GlazingGroup_Thermochromic
    {
        
[JsonProperty(@"")]
public System.String TemperatureData { get; set; } = "";
    }
    
    [Description("Glass material properties for Windows or Glass Doors Index of Refraction/Extincti" +
        "on Coefficient input method Not to be used for coated glass")]
    [JsonObject("WindowMaterial:Glazing:RefractionExtinctionMethod")]
    public class WindowMaterial_Glazing_RefractionExtinctionMethod
    {
        
[JsonProperty(@"")]
public System.Single Thickness { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SolarIndexOfRefraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SolarExtinctionCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single VisibleIndexOfRefraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single VisibleExtinctionCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single InfraredTransmittanceAtNormalIncidence { get; set; } = 0;
        
[Description(@"Emissivity of front and back side assumed equal")]
[JsonProperty(@"Emissivity of front and back side assumed equal")]
public System.Single InfraredHemisphericalEmissivity { get; set; } = 0.84;
        
[JsonProperty(@"")]
public System.Single Conductivity { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single DirtCorrectionFactorForSolarAndVisibleTransmittance { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault SolarDiffusing { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
    }
    
    [Description("Gas material properties that are used in Windows or Glass Doors")]
    [JsonObject("WindowMaterial:Gas")]
    public class WindowMaterial_Gas
    {
        
[JsonProperty(@"")]
public YesNoDefault GasType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single Thickness { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single ConductivityCoefficientA { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single ConductivityCoefficientB { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single ConductivityCoefficientC { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single ViscosityCoefficientA { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single ViscosityCoefficientB { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single ViscosityCoefficientC { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single SpecificHeatCoefficientA { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single SpecificHeatCoefficientB { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single SpecificHeatCoefficientC { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single MolecularWeight { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single SpecificHeatRatio { get; set; } = ;
    }
    
    public enum GasTypeType
    {
        
        [JsonProperty("Air")]
        Air = 0,
        
        [JsonProperty("Argon")]
        Argon = 1,
        
        [JsonProperty("Custom")]
        Custom = 2,
        
        [JsonProperty("Krypton")]
        Krypton = 3,
        
        [JsonProperty("Xenon")]
        Xenon = 4,
    }
    
    [Description("used to define pillar geometry for support pillars")]
    [JsonObject("WindowGap:SupportPillar")]
    public class WindowGap_SupportPillar
    {
        
[JsonProperty(@"")]
public System.Single Spacing { get; set; } = 0.04;
        
[JsonProperty(@"")]
public System.Single Radius { get; set; } = 0.0004;
    }
    
    [Description("Used to enter data describing deflection state of the gap. It is referenced from " +
        "WindowMaterial:Gap object only and it is used only when deflection model is set " +
        "to MeasuredDeflection, otherwise it is ignored.")]
    [JsonObject("WindowGap:DeflectionState")]
    public class WindowGap_DeflectionState
    {
        
[Description(@"If left blank will be considered that gap has no deflection.")]
[JsonProperty(@"If left blank will be considered that gap has no deflection.")]
public System.Single DeflectedThickness { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single InitialTemperature { get; set; } = 25;
        
[JsonProperty(@"")]
public System.Single InitialPressure { get; set; } = 101325;
    }
    
    [Description("Gas mixtures that are used in Windows or Glass Doors")]
    [JsonObject("WindowMaterial:GasMixture")]
    public class WindowMaterial_GasMixture
    {
        
[JsonProperty(@"")]
public System.Single Thickness { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NumberOfGasesInMixture { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault GasType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single GasFraction { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault GasType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single GasFraction { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault GasType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single GasFraction { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault GasType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single GasFraction { get; set; } = ;
    }
    
    public enum GasTypeType
    {
        
        [JsonProperty("Air")]
        Air = 0,
        
        [JsonProperty("Argon")]
        Argon = 1,
        
        [JsonProperty("Krypton")]
        Krypton = 2,
        
        [JsonProperty("Xenon")]
        Xenon = 3,
    }
    
    public enum GasTypeType
    {
        
        [JsonProperty("Air")]
        Air = 0,
        
        [JsonProperty("Argon")]
        Argon = 1,
        
        [JsonProperty("Krypton")]
        Krypton = 2,
        
        [JsonProperty("Xenon")]
        Xenon = 3,
    }
    
    public enum GasTypeType
    {
        
        [JsonProperty("Air")]
        Air = 0,
        
        [JsonProperty("Argon")]
        Argon = 1,
        
        [JsonProperty("Krypton")]
        Krypton = 2,
        
        [JsonProperty("Xenon")]
        Xenon = 3,
    }
    
    public enum GasTypeType
    {
        
        [JsonProperty("Air")]
        Air = 0,
        
        [JsonProperty("Argon")]
        Argon = 1,
        
        [JsonProperty("Krypton")]
        Krypton = 2,
        
        [JsonProperty("Xenon")]
        Xenon = 3,
    }
    
    [Description(@"Used to define the gap between two layers in a complex fenestration system, where the Construction:ComplexFenestrationState object is used. It is referenced as a layer in the Construction:ComplexFenestrationState object. It cannot be referenced as a layer from the Construction object.")]
    [JsonObject("WindowMaterial:Gap")]
    public class WindowMaterial_Gap
    {
        
[JsonProperty(@"")]
public System.Single Thickness { get; set; } = ;
        
[Description(@"This field should reference only WindowMaterial:Gas or WindowMaterial:GasMixture objects")]
[JsonProperty(@"This field should reference only WindowMaterial:Gas or WindowMaterial:GasMixture objects")]
public System.String GasOrGasMixture { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single Pressure { get; set; } = 101325;
        
[Description(@"If left blank, it will be considered that gap is not deflected")]
[JsonProperty(@"If left blank, it will be considered that gap is not deflected")]
public System.String DeflectionState { get; set; } = "";
        
[Description(@"If left blank, it will be considered that gap does not have support pillars")]
[JsonProperty(@"If left blank, it will be considered that gap does not have support pillars")]
public System.String SupportPillar { get; set; } = "";
    }
    
    [Description(@"Specifies the properties of window shade materials. Reflectance and emissivity properties are assumed to be the same on both sides of the shade. Shades are considered to be perfect diffusers (all transmitted and reflected radiation is hemispherically-diffuse) independent of angle of incidence.")]
    [JsonObject("WindowMaterial:Shade")]
    public class WindowMaterial_Shade
    {
        
[Description(@"Assumed independent of incidence angle")]
[JsonProperty(@"Assumed independent of incidence angle")]
public System.Single SolarTransmittance { get; set; } = ;
        
[Description(@"Assumed same for both sides Assumed independent of incidence angle")]
[JsonProperty(@"Assumed same for both sides Assumed independent of incidence angle")]
public System.Single SolarReflectance { get; set; } = ;
        
[Description(@"Assumed independent of incidence angle")]
[JsonProperty(@"Assumed independent of incidence angle")]
public System.Single VisibleTransmittance { get; set; } = ;
        
[Description(@"Assumed same for both sides Assumed independent of incidence angle")]
[JsonProperty(@"Assumed same for both sides Assumed independent of incidence angle")]
public System.Single VisibleReflectance { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single InfraredHemisphericalEmissivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single InfraredTransmittance { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Thickness { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Conductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ShadeToGlassDistance { get; set; } = 0.05;
        
[JsonProperty(@"")]
public System.Single TopOpeningMultiplier { get; set; } = 0.5;
        
[JsonProperty(@"")]
public System.Single BottomOpeningMultiplier { get; set; } = 0.5;
        
[JsonProperty(@"")]
public System.Single LeftSideOpeningMultiplier { get; set; } = 0.5;
        
[JsonProperty(@"")]
public System.Single RightSideOpeningMultiplier { get; set; } = 0.5;
        
[JsonProperty(@"")]
public System.Single AirflowPermeability { get; set; } = 0;
    }
    
    [Description("Complex window shading layer thermal properties")]
    [JsonObject("WindowMaterial:ComplexShade")]
    public class WindowMaterial_ComplexShade
    {
        
[JsonProperty(@"")]
public YesNoDefault LayerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "OtherShadingType");
        
[JsonProperty(@"")]
public System.Single Thickness { get; set; } = 0.002;
        
[JsonProperty(@"")]
public System.Single Conductivity { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single IrTransmittance { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single FrontEmissivity { get; set; } = 0.84;
        
[JsonProperty(@"")]
public System.Single BackEmissivity { get; set; } = 0.84;
        
[JsonProperty(@"")]
public System.Single TopOpeningMultiplier { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single BottomOpeningMultiplier { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single LeftSideOpeningMultiplier { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single RightSideOpeningMultiplier { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single FrontOpeningMultiplier { get; set; } = 0.05;
        
[JsonProperty(@"")]
public System.Single SlatWidth { get; set; } = 0.016;
        
[Description(@"Distance between adjacent slat faces")]
[JsonProperty(@"Distance between adjacent slat faces")]
public System.Single SlatSpacing { get; set; } = 0.012;
        
[Description(@"Distance between top and bottom surfaces of slat Slat is assumed to be rectangular in cross section and flat")]
[JsonProperty(@"Distance between top and bottom surfaces of slat Slat is assumed to be rectangular in cross section and flat")]
public System.Single SlatThickness { get; set; } = 0.0006;
        
[JsonProperty(@"")]
public System.Single SlatAngle { get; set; } = 90;
        
[JsonProperty(@"")]
public System.Single SlatConductivity { get; set; } = 160;
        
[Description(@"this value represents curvature radius of the slat. if the slat is flat use zero. if this value is not zero, then it must be > SlatWidth/2.")]
[JsonProperty(@"this value represents curvature radius of the slat. if the slat is flat use zero. if this value is not zero, then it must be > SlatWidth/2.")]
public System.Single SlatCurve { get; set; } = 0;
    }
    
    public enum LayerTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BSDF")]
        BSDF = 1,
        
        [JsonProperty("OtherShadingType")]
        OtherShadingType = 2,
        
        [JsonProperty("Perforated")]
        Perforated = 3,
        
        [JsonProperty("VenetianHorizontal")]
        VenetianHorizontal = 4,
        
        [JsonProperty("VenetianVertical")]
        VenetianVertical = 5,
        
        [JsonProperty("Woven")]
        Woven = 6,
    }
    
    [Description("Window blind thermal properties")]
    [JsonObject("WindowMaterial:Blind")]
    public class WindowMaterial_Blind
    {
        
[JsonProperty(@"")]
public YesNoDefault SlatOrientation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Horizontal");
        
[JsonProperty(@"")]
public System.Single SlatWidth { get; set; } = ;
        
[Description(@"Distance between adjacent slat faces")]
[JsonProperty(@"Distance between adjacent slat faces")]
public System.Single SlatSeparation { get; set; } = ;
        
[Description(@"Distance between top and bottom surfaces of slat Slat is assumed to be rectangular in cross section and flat")]
[JsonProperty(@"Distance between top and bottom surfaces of slat Slat is assumed to be rectangular in cross section and flat")]
public System.Single SlatThickness { get; set; } = 0.00025;
        
[Description(@"If WindowShadingControl referencing the window that incorporates this blind has Type of Slat Angle Control for Blinds = FixedSlatAngle, then this is the fixed value of the slat angle; If WindowShadingControl referencing the window that incorporates this blind has Type of Slat Angle Control for Blinds = BlockBeamSolar, then this is the slat angle when slat angle control is not in effect (e.g., when there is no beam solar on the blind); Not used if WindowShadingControl referencing the window that incorporates this blind has Type of Slat Angle Control for Blinds = ScheduledSlatAngle.")]
[JsonProperty(@"If WindowShadingControl referencing the window that incorporates this blind has Type of Slat Angle Control for Blinds = FixedSlatAngle, then this is the fixed value of the slat angle; If WindowShadingControl referencing the window that incorporates this blind has Type of Slat Angle Control for Blinds = BlockBeamSolar, then this is the slat angle when slat angle control is not in effect (e.g., when there is no beam solar on the blind); Not used if WindowShadingControl referencing the window that incorporates this blind has Type of Slat Angle Control for Blinds = ScheduledSlatAngle.")]
public System.Single SlatAngle { get; set; } = 45;
        
[Description(@"default is for aluminum")]
[JsonProperty(@"default is for aluminum")]
public System.Single SlatConductivity { get; set; } = 221;
        
[JsonProperty(@"")]
public System.Single SlatBeamSolarTransmittance { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single FrontSideSlatBeamSolarReflectance { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single BackSideSlatBeamSolarReflectance { get; set; } = ;
        
[Description(@"Must equal "Slat beam solar transmittance"")]
[JsonProperty(@"Must equal "Slat beam solar transmittance"")]
public System.Single SlatDiffuseSolarTransmittance { get; set; } = 0;
        
[Description(@"Must equal "Front Side Slat Beam Solar Reflectance"")]
[JsonProperty(@"Must equal "Front Side Slat Beam Solar Reflectance"")]
public System.Single FrontSideSlatDiffuseSolarReflectance { get; set; } = ;
        
[Description(@"Must equal "Back Side Slat Beam Solar Reflectance"")]
[JsonProperty(@"Must equal "Back Side Slat Beam Solar Reflectance"")]
public System.Single BackSideSlatDiffuseSolarReflectance { get; set; } = ;
        
[Description(@"Required for detailed daylighting calculation")]
[JsonProperty(@"Required for detailed daylighting calculation")]
public System.Single SlatBeamVisibleTransmittance { get; set; } = ;
        
[Description(@"Required for detailed daylighting calculation")]
[JsonProperty(@"Required for detailed daylighting calculation")]
public System.Single FrontSideSlatBeamVisibleReflectance { get; set; } = ;
        
[Description(@"Required for detailed daylighting calculation")]
[JsonProperty(@"Required for detailed daylighting calculation")]
public System.Single BackSideSlatBeamVisibleReflectance { get; set; } = ;
        
[Description(@"Used only for detailed daylighting calculation Must equal "Slat Beam Visible Transmittance"")]
[JsonProperty(@"Used only for detailed daylighting calculation Must equal "Slat Beam Visible Transmittance"")]
public System.Single SlatDiffuseVisibleTransmittance { get; set; } = 0;
        
[Description(@"Required for detailed daylighting calculation Must equal "Front Side Slat Beam Visible Reflectance"")]
[JsonProperty(@"Required for detailed daylighting calculation Must equal "Front Side Slat Beam Visible Reflectance"")]
public System.Single FrontSideSlatDiffuseVisibleReflectance { get; set; } = ;
        
[Description(@"Required for detailed daylighting calculation Must equal "Back Side Slat Beam Visible Reflectance"")]
[JsonProperty(@"Required for detailed daylighting calculation Must equal "Back Side Slat Beam Visible Reflectance"")]
public System.Single BackSideSlatDiffuseVisibleReflectance { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SlatInfraredHemisphericalTransmittance { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single FrontSideSlatInfraredHemisphericalEmissivity { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single BackSideSlatInfraredHemisphericalEmissivity { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single BlindToGlassDistance { get; set; } = 0.05;
        
[JsonProperty(@"")]
public System.Single BlindTopOpeningMultiplier { get; set; } = 0.5;
        
[JsonProperty(@"")]
public System.Single BlindBottomOpeningMultiplier { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single BlindLeftSideOpeningMultiplier { get; set; } = 0.5;
        
[JsonProperty(@"")]
public System.Single BlindRightSideOpeningMultiplier { get; set; } = 0.5;
        
[Description(@"Used only if WindowShadingControl referencing the window that incorporates this blind varies the slat angle (i.e., WindowShadingControl with Type of Slat Angle Control for Blinds = ScheduledSlatAngle or BlockBeamSolar)")]
[JsonProperty(@"Used only if WindowShadingControl referencing the window that incorporates this blind varies the slat angle (i.e., WindowShadingControl with Type of Slat Angle Control for Blinds = ScheduledSlatAngle or BlockBeamSolar)")]
public System.Single MinimumSlatAngle { get; set; } = 0;
        
[Description(@"Used only if WindowShadingControl referencing the window that incorporates this blind varies the slat angle (i.e., WindowShadingControl with Type of Slat Angle Control for Blinds = ScheduledSlatAngle or BlockBeamSolar)")]
[JsonProperty(@"Used only if WindowShadingControl referencing the window that incorporates this blind varies the slat angle (i.e., WindowShadingControl with Type of Slat Angle Control for Blinds = ScheduledSlatAngle or BlockBeamSolar)")]
public System.Single MaximumSlatAngle { get; set; } = 180;
    }
    
    public enum SlatOrientationType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Horizontal")]
        Horizontal = 1,
        
        [JsonProperty("Vertical")]
        Vertical = 2,
    }
    
    [Description("Window screen physical properties. Can only be located on the exterior side of a " +
        "window construction.")]
    [JsonObject("WindowMaterial:Screen")]
    public class WindowMaterial_Screen
    {
        
[Description(@"Select the method used to account for the beam solar reflected off the material surface.")]
[JsonProperty(@"Select the method used to account for the beam solar reflected off the material surface.")]
public YesNoDefault ReflectedBeamTransmittanceAccountingMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ModelAsDiffuse");
        
[Description(@"Diffuse reflectance of the screen material over the entire solar radiation spectrum. Assumed to be the same for both sides of the screen.")]
[JsonProperty(@"Diffuse reflectance of the screen material over the entire solar radiation spectrum. Assumed to be the same for both sides of the screen.")]
public System.Single DiffuseSolarReflectance { get; set; } = ;
        
[Description(@"Diffuse visible reflectance of the screen material averaged over the solar spectrum and weighted by the response of the human eye. Assumed to be the same for both sides of the screen.")]
[JsonProperty(@"Diffuse visible reflectance of the screen material averaged over the solar spectrum and weighted by the response of the human eye. Assumed to be the same for both sides of the screen.")]
public System.Single DiffuseVisibleReflectance { get; set; } = ;
        
[Description(@"Long-wave emissivity of the screen material. Assumed to be the same for both sides of the screen.")]
[JsonProperty(@"Long-wave emissivity of the screen material. Assumed to be the same for both sides of the screen.")]
public System.Single ThermalHemisphericalEmissivity { get; set; } = 0.9;
        
[Description(@"Thermal conductivity of the screen material. Default is for aluminum.")]
[JsonProperty(@"Thermal conductivity of the screen material. Default is for aluminum.")]
public System.Single Conductivity { get; set; } = 221;
        
[Description(@"Spacing assumed to be the same in both directions.")]
[JsonProperty(@"Spacing assumed to be the same in both directions.")]
public System.Single ScreenMaterialSpacing { get; set; } = ;
        
[Description(@"Diameter assumed to be the same in both directions.")]
[JsonProperty(@"Diameter assumed to be the same in both directions.")]
public System.Single ScreenMaterialDiameter { get; set; } = ;
        
[Description(@"Distance from the window screen to the adjacent glass surface.")]
[JsonProperty(@"Distance from the window screen to the adjacent glass surface.")]
public System.Single ScreenToGlassDistance { get; set; } = 0.025;
        
[Description(@"Effective area for air flow at the top of the screen divided by the perpendicular area between the glass and the top of the screen.")]
[JsonProperty(@"Effective area for air flow at the top of the screen divided by the perpendicular area between the glass and the top of the screen.")]
public System.Single TopOpeningMultiplier { get; set; } = 0;
        
[Description(@"Effective area for air flow at the bottom of the screen divided by the perpendicular area between the glass and the bottom of the screen.")]
[JsonProperty(@"Effective area for air flow at the bottom of the screen divided by the perpendicular area between the glass and the bottom of the screen.")]
public System.Single BottomOpeningMultiplier { get; set; } = 0;
        
[Description(@"Effective area for air flow at the left side of the screen divided by the perpendicular area between the glass and the left side of the screen.")]
[JsonProperty(@"Effective area for air flow at the left side of the screen divided by the perpendicular area between the glass and the left side of the screen.")]
public System.Single LeftSideOpeningMultiplier { get; set; } = 0;
        
[Description(@"Effective area for air flow at the right side of the screen divided by the perpendicular area between the glass and the right side of the screen.")]
[JsonProperty(@"Effective area for air flow at the right side of the screen divided by the perpendicular area between the glass and the right side of the screen.")]
public System.Single RightSideOpeningMultiplier { get; set; } = 0;
        
[Description(@"Select the resolution of azimuth and altitude angles for the screen transmittance map. A value of 0 means no transmittance map will be generated. Valid values for this field are 0, 1, 2, 3 and 5.")]
[JsonProperty(@"Select the resolution of azimuth and altitude angles for the screen transmittance map. A value of 0 means no transmittance map will be generated. Valid values for this field are 0, 1, 2, 3 and 5.")]
public System.String AngleOfResolutionForScreenTransmittanceOutputMap { get; set; } = (System.String)0;
    }
    
    public enum ReflectedBeamTransmittanceAccountingMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DoNotModel")]
        DoNotModel = 1,
        
        [JsonProperty("ModelAsDiffuse")]
        ModelAsDiffuse = 2,
        
        [JsonProperty("ModelAsDirectBeam")]
        ModelAsDirectBeam = 3,
    }
    
    [Description("Specifies the properties of equivalent layer window shade material Shades are con" +
        "sidered to be perfect diffusers (all transmitted and reflected radiation is hemi" +
        "spherically-diffuse) independent of angle of incidence. Shade represents roller " +
        "blinds.")]
    [JsonObject("WindowMaterial:Shade:EquivalentLayer")]
    public class WindowMaterial_Shade_EquivalentLayer
    {
        
[Description(@"The beam-beam solar transmittance at normal incidence. This value is the same as the openness area fraction of the shade material. Assumed to be the same for front and back sides.")]
[JsonProperty(@"The beam-beam solar transmittance at normal incidence. This value is the same as the openness area fraction of the shade material. Assumed to be the same for front and back sides.")]
public System.Single ShadeBeamBeamSolarTransmittance { get; set; } = 0;
        
[Description(@"The front side beam-diffuse solar transmittance at normal incidence averaged over the entire spectrum of solar radiation.")]
[JsonProperty(@"The front side beam-diffuse solar transmittance at normal incidence averaged over the entire spectrum of solar radiation.")]
public System.Single FrontSideShadeBeamDiffuseSolarTransmittance { get; set; } = ;
        
[Description(@"The back side beam-diffuse solar transmittance at normal incidence averaged over the entire spectrum of solar radiation.")]
[JsonProperty(@"The back side beam-diffuse solar transmittance at normal incidence averaged over the entire spectrum of solar radiation.")]
public System.Single BackSideShadeBeamDiffuseSolarTransmittance { get; set; } = ;
        
[Description(@"The front side beam-diffuse solar reflectance at normal incidence averaged over the entire spectrum of solar radiation.")]
[JsonProperty(@"The front side beam-diffuse solar reflectance at normal incidence averaged over the entire spectrum of solar radiation.")]
public System.Single FrontSideShadeBeamDiffuseSolarReflectance { get; set; } = ;
        
[Description(@"The back side beam-diffuse solar reflectance at normal incidence averaged over the entire spectrum of solar radiation.")]
[JsonProperty(@"The back side beam-diffuse solar reflectance at normal incidence averaged over the entire spectrum of solar radiation.")]
public System.Single BackSideShadeBeamDiffuseSolarReflectance { get; set; } = ;
        
[Description(@"The beam-beam visible transmittance at normal incidence averaged over the visible spectrum range of solar radiation. Assumed to be the same for front and back sides of the shade.")]
[JsonProperty(@"The beam-beam visible transmittance at normal incidence averaged over the visible spectrum range of solar radiation. Assumed to be the same for front and back sides of the shade.")]
public System.Single ShadeBeamBeamVisibleTransmittanceAtNormalIncidence { get; set; } = ;
        
[Description(@"The beam-diffuse visible transmittance at normal incidence averaged over the visible spectrum range of solar radiation. Assumed to be the same for front and back sides of the shade.")]
[JsonProperty(@"The beam-diffuse visible transmittance at normal incidence averaged over the visible spectrum range of solar radiation. Assumed to be the same for front and back sides of the shade.")]
public System.Single ShadeBeamDiffuseVisibleTransmittanceAtNormalIncidence { get; set; } = ;
        
[Description(@"The beam-diffuse visible reflectance at normal incidence averaged over the visible spectrum range of solar radiation. Assumed to be the same for front and back sides of the shade.")]
[JsonProperty(@"The beam-diffuse visible reflectance at normal incidence averaged over the visible spectrum range of solar radiation. Assumed to be the same for front and back sides of the shade.")]
public System.Single ShadeBeamDiffuseVisibleReflectanceAtNormalIncidence { get; set; } = ;
        
[Description(@"The long-wave transmittance of the shade material at zero shade openness. Assumed to be the same for front and back sides of the shade.")]
[JsonProperty(@"The long-wave transmittance of the shade material at zero shade openness. Assumed to be the same for front and back sides of the shade.")]
public System.Single ShadeMaterialInfraredTransmittance { get; set; } = 0.05;
        
[Description(@"The front side long-wave emissivity of the shade material at zero shade openness. Openness fraction is used to calculate the effective emissivity value.")]
[JsonProperty(@"The front side long-wave emissivity of the shade material at zero shade openness. Openness fraction is used to calculate the effective emissivity value.")]
public System.Single FrontSideShadeMaterialInfraredEmissivity { get; set; } = 0.91;
        
[Description(@"The back side long-wave emissivity of the shade material at zero shade openness. Openness fraction is used to calculate the effective emissivity value.")]
[JsonProperty(@"The back side long-wave emissivity of the shade material at zero shade openness. Openness fraction is used to calculate the effective emissivity value.")]
public System.Single BackSideShadeMaterialInfraredEmissivity { get; set; } = 0.91;
    }
    
    [Description(@"Specifies the properties of equivalent layer drape fabric materials. Shades are considered to be perfect diffusers (all transmitted and reflected radiation is hemispherically-diffuse) independent of angle of incidence. unpleated drape fabric is treated as thin and flat layer.")]
    [JsonObject("WindowMaterial:Drape:EquivalentLayer")]
    public class WindowMaterial_Drape_EquivalentLayer
    {
        
[Description(@"The beam-beam solar transmittance at normal incidence. This value is the same as the openness area fraction of the drape fabric. Assumed to be same for front and back sides.")]
[JsonProperty(@"The beam-beam solar transmittance at normal incidence. This value is the same as the openness area fraction of the drape fabric. Assumed to be same for front and back sides.")]
public System.Single DrapeBeamBeamSolarTransmittanceAtNormalIncidence { get; set; } = 0;
        
[Description(@"The front side beam-diffuse solar transmittance at normal incidence averaged over the entire spectrum of solar radiation. Assumed to be the same for front and back sides.")]
[JsonProperty(@"The front side beam-diffuse solar transmittance at normal incidence averaged over the entire spectrum of solar radiation. Assumed to be the same for front and back sides.")]
public System.Single FrontSideDrapeBeamDiffuseSolarTransmittance { get; set; } = ;
        
[Description(@"The back side beam-diffuse solar transmittance at normal incidence averaged over the entire spectrum of solar radiation. Assumed to be the same for front and back sides.")]
[JsonProperty(@"The back side beam-diffuse solar transmittance at normal incidence averaged over the entire spectrum of solar radiation. Assumed to be the same for front and back sides.")]
public System.Single BackSideDrapeBeamDiffuseSolarTransmittance { get; set; } = ;
        
[Description(@"The front side beam-diffuse solar reflectance at normal incidence averaged over the entire spectrum of solar radiation.")]
[JsonProperty(@"The front side beam-diffuse solar reflectance at normal incidence averaged over the entire spectrum of solar radiation.")]
public System.Single FrontSideDrapeBeamDiffuseSolarReflectance { get; set; } = ;
        
[Description(@"The back side beam-diffuse solar reflectance at normal incidence averaged over the entire spectrum of solar radiation.")]
[JsonProperty(@"The back side beam-diffuse solar reflectance at normal incidence averaged over the entire spectrum of solar radiation.")]
public System.Single BackSideDrapeBeamDiffuseSolarReflectance { get; set; } = ;
        
[Description(@"The beam-beam visible transmittance at normal incidence averaged over the visible spectrum of solar radiation. Assumed same for front and back sides.")]
[JsonProperty(@"The beam-beam visible transmittance at normal incidence averaged over the visible spectrum of solar radiation. Assumed same for front and back sides.")]
public System.Single DrapeBeamBeamVisibleTransmittance { get; set; } = ;
        
[Description(@"The beam-diffuse visible transmittance at normal incidence averaged over the visible spectrum range of solar radiation. Assumed to be the same for front and back sides.")]
[JsonProperty(@"The beam-diffuse visible transmittance at normal incidence averaged over the visible spectrum range of solar radiation. Assumed to be the same for front and back sides.")]
public System.Single DrapeBeamDiffuseVisibleTransmittance { get; set; } = ;
        
[Description(@"The beam-diffuse visible reflectance at normal incidence average over the visible spectrum range of solar radiation. Assumed to be the same for front and back sides.")]
[JsonProperty(@"The beam-diffuse visible reflectance at normal incidence average over the visible spectrum range of solar radiation. Assumed to be the same for front and back sides.")]
public System.Single DrapeBeamDiffuseVisibleReflectance { get; set; } = ;
        
[Description(@"Long-wave transmittance of the drape fabric at zero openness fraction. Assumed same for front and back sides.")]
[JsonProperty(@"Long-wave transmittance of the drape fabric at zero openness fraction. Assumed same for front and back sides.")]
public System.Single DrapeMaterialInfraredTransmittance { get; set; } = 0.05;
        
[Description(@"Front side long-wave emissivity of the drape fabric at zero shade openness. Openness fraction specified above is used to calculate the effective emissivity value.")]
[JsonProperty(@"Front side long-wave emissivity of the drape fabric at zero shade openness. Openness fraction specified above is used to calculate the effective emissivity value.")]
public System.Single FrontSideDrapeMaterialInfraredEmissivity { get; set; } = 0.87;
        
[Description(@"Back side long-wave emissivity of the drape fabric at zero shade openness. Openness fraction specified above is used to calculate the effective emissivity value.")]
[JsonProperty(@"Back side long-wave emissivity of the drape fabric at zero shade openness. Openness fraction specified above is used to calculate the effective emissivity value.")]
public System.Single BackSideDrapeMaterialInfraredEmissivity { get; set; } = 0.87;
        
[Description(@"Width of the pleated section of the draped fabric. If the drape fabric is unpleated or is flat, then the pleated section width is set to zero.")]
[JsonProperty(@"Width of the pleated section of the draped fabric. If the drape fabric is unpleated or is flat, then the pleated section width is set to zero.")]
public System.Single WidthOfPleatedFabric { get; set; } = 0;
        
[Description(@"Length of the pleated section of the draped fabric. If the drape fabric is unpleated or is flat, then the pleated section length is set to zero.")]
[JsonProperty(@"Length of the pleated section of the draped fabric. If the drape fabric is unpleated or is flat, then the pleated section length is set to zero.")]
public System.Single LengthOfPleatedFabric { get; set; } = 0;
    }
    
    [Description("Window equivalent layer blind slat optical and thermal properties. The model assu" +
        "mes that slats are thin and flat, applies correction empirical correlation to ac" +
        "count for curvature effect. Slats are assumed to transmit and reflect diffusely." +
        "")]
    [JsonObject("WindowMaterial:Blind:EquivalentLayer")]
    public class WindowMaterial_Blind_EquivalentLayer
    {
        
[JsonProperty(@"")]
public YesNoDefault SlatOrientation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Horizontal");
        
[JsonProperty(@"")]
public System.Single SlatWidth { get; set; } = ;
        
[Description(@"Distance between adjacent slat faces")]
[JsonProperty(@"Distance between adjacent slat faces")]
public System.Single SlatSeparation { get; set; } = ;
        
[Description(@"Perpendicular length between the cord and the curve. Slat is assumed to be rectangular in cross section and flat. Crown=0.0625x"Slat width"")]
[JsonProperty(@"Perpendicular length between the cord and the curve. Slat is assumed to be rectangular in cross section and flat. Crown=0.0625x"Slat width"")]
public System.Single SlatCrown { get; set; } = 0.0015;
        
[Description(@"Slat angle is +ve if the tip of the slat front face is tilted upward, else the slat angle is -ve if the tip of the slat front face is tilted downward. The slat angle varies between -90 to +90. The default value is 45 degrees.")]
[JsonProperty(@"Slat angle is +ve if the tip of the slat front face is tilted upward, else the slat angle is -ve if the tip of the slat front face is tilted downward. The slat angle varies between -90 to +90. The default value is 45 degrees.")]
public System.Single SlatAngle { get; set; } = 45;
        
[Description(@"The front side beam-diffuse solar transmittance of the slat at normal incidence averaged over the entire spectrum of solar radiation.")]
[JsonProperty(@"The front side beam-diffuse solar transmittance of the slat at normal incidence averaged over the entire spectrum of solar radiation.")]
public System.Single FrontSideSlatBeamDiffuseSolarTransmittance { get; set; } = 0;
        
[Description(@"The back side beam-diffuse solar transmittance of the slat at normal incidence averaged over the entire spectrum of solar radiation.")]
[JsonProperty(@"The back side beam-diffuse solar transmittance of the slat at normal incidence averaged over the entire spectrum of solar radiation.")]
public System.Single BackSideSlatBeamDiffuseSolarTransmittance { get; set; } = 0;
        
[Description(@"The front side beam-diffuse solar reflectance of the slat at normal incidence averaged over the entire spectrum of solar radiation.")]
[JsonProperty(@"The front side beam-diffuse solar reflectance of the slat at normal incidence averaged over the entire spectrum of solar radiation.")]
public System.Single FrontSideSlatBeamDiffuseSolarReflectance { get; set; } = ;
        
[Description(@"The back side beam-diffuse solar reflectance of the slat at normal incidence averaged over the entire spectrum of solar radiation.")]
[JsonProperty(@"The back side beam-diffuse solar reflectance of the slat at normal incidence averaged over the entire spectrum of solar radiation.")]
public System.Single BackSideSlatBeamDiffuseSolarReflectance { get; set; } = ;
        
[Description(@"The front side beam-diffuse visible transmittance of the slat at normal incidence averaged over the visible spectrum range of solar radiation.")]
[JsonProperty(@"The front side beam-diffuse visible transmittance of the slat at normal incidence averaged over the visible spectrum range of solar radiation.")]
public System.Single FrontSideSlatBeamDiffuseVisibleTransmittance { get; set; } = 0;
        
[Description(@"The back side beam-diffuse visible transmittance of the slat at normal incidence averaged over the visible spectrum range of solar radiation.")]
[JsonProperty(@"The back side beam-diffuse visible transmittance of the slat at normal incidence averaged over the visible spectrum range of solar radiation.")]
public System.Single BackSideSlatBeamDiffuseVisibleTransmittance { get; set; } = 0;
        
[Description(@"The front side beam-diffuse visible reflectance of the slat at normal incidence averaged over the visible spectrum range of solar radiation.")]
[JsonProperty(@"The front side beam-diffuse visible reflectance of the slat at normal incidence averaged over the visible spectrum range of solar radiation.")]
public System.Single FrontSideSlatBeamDiffuseVisibleReflectance { get; set; } = ;
        
[Description(@"The back side beam-diffuse visible reflectance of the slat at normal incidence averaged over the visible spectrum range of solar radiation.")]
[JsonProperty(@"The back side beam-diffuse visible reflectance of the slat at normal incidence averaged over the visible spectrum range of solar radiation.")]
public System.Single BackSideSlatBeamDiffuseVisibleReflectance { get; set; } = ;
        
[Description(@"The beam-diffuse solar transmittance of the slat averaged over the entire solar spectrum of solar radiation.")]
[JsonProperty(@"The beam-diffuse solar transmittance of the slat averaged over the entire solar spectrum of solar radiation.")]
public System.Single SlatDiffuseDiffuseSolarTransmittance { get; set; } = 0;
        
[Description(@"The front side beam-diffuse solar reflectance of the slat averaged over the entire solar spectrum of solar radiation.")]
[JsonProperty(@"The front side beam-diffuse solar reflectance of the slat averaged over the entire solar spectrum of solar radiation.")]
public System.Single FrontSideSlatDiffuseDiffuseSolarReflectance { get; set; } = ;
        
[Description(@"The back side beam-diffuse solar reflectance of the slat averaged over the entire solar spectrum of solar radiation.")]
[JsonProperty(@"The back side beam-diffuse solar reflectance of the slat averaged over the entire solar spectrum of solar radiation.")]
public System.Single BackSideSlatDiffuseDiffuseSolarReflectance { get; set; } = ;
        
[Description(@"The beam-diffuse visible transmittance of the slat averaged over the visible spectrum range of solar radiation.")]
[JsonProperty(@"The beam-diffuse visible transmittance of the slat averaged over the visible spectrum range of solar radiation.")]
public System.Single SlatDiffuseDiffuseVisibleTransmittance { get; set; } = ;
        
[Description(@"The front side beam-diffuse visible reflectance of the slat averaged over the visible spectrum range of solar radiation.")]
[JsonProperty(@"The front side beam-diffuse visible reflectance of the slat averaged over the visible spectrum range of solar radiation.")]
public System.Single FrontSideSlatDiffuseDiffuseVisibleReflectance { get; set; } = ;
        
[Description(@"The back side beam-diffuse visible reflectance of the slat averaged over the visible spectrum range of solar radiation.")]
[JsonProperty(@"The back side beam-diffuse visible reflectance of the slat averaged over the visible spectrum range of solar radiation.")]
public System.Single BackSideSlatDiffuseDiffuseVisibleReflectance { get; set; } = ;
        
[Description(@"Long-wave hemispherical transmittance of the slat material. Assumed to be the same for both sides of the slat.")]
[JsonProperty(@"Long-wave hemispherical transmittance of the slat material. Assumed to be the same for both sides of the slat.")]
public System.Single SlatInfraredTransmittance { get; set; } = 0;
        
[Description(@"Front side long-wave hemispherical emissivity of the slat material.")]
[JsonProperty(@"Front side long-wave hemispherical emissivity of the slat material.")]
public System.Single FrontSideSlatInfraredEmissivity { get; set; } = 0.9;
        
[Description(@"Back side long-wave hemispherical emissivity of the slat material.")]
[JsonProperty(@"Back side long-wave hemispherical emissivity of the slat material.")]
public System.Single BackSideSlatInfraredEmissivity { get; set; } = 0.9;
        
[Description(@"Used only if slat angle control is desired to either maximize solar gain (MaximizeSolar), maximize visibility while eliminating beam solar radiation (BlockBeamSolar), or fixed slate angle (FixedSlatAngle). If FixedSlatAngle is selected, the slat angle entered above is used.")]
[JsonProperty(@"Used only if slat angle control is desired to either maximize solar gain (MaximizeSolar), maximize visibility while eliminating beam solar radiation (BlockBeamSolar), or fixed slate angle (FixedSlatAngle). If FixedSlatAngle is selected, the slat angle entered above is used.")]
public YesNoDefault SlatAngleControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FixedSlatAngle");
    }
    
    public enum SlatOrientationType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Horizontal")]
        Horizontal = 1,
        
        [JsonProperty("Vertical")]
        Vertical = 2,
    }
    
    public enum SlatAngleControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlockBeamSolar")]
        BlockBeamSolar = 1,
        
        [JsonProperty("FixedSlatAngle")]
        FixedSlatAngle = 2,
        
        [JsonProperty("MaximizeSolar")]
        MaximizeSolar = 3,
    }
    
    [Description("Equivalent layer window screen physical properties. Can only be located on the ex" +
        "terior side of a window construction.")]
    [JsonObject("WindowMaterial:Screen:EquivalentLayer")]
    public class WindowMaterial_Screen_EquivalentLayer
    {
        
[Description(@"The beam-beam transmittance of the screen material at normal incidence. This input field is the same as the material openness area fraction and can be autocalculated from the wire spacing and wire and diameter. Assumed to be the same for both sides of the screen.")]
[JsonProperty(@"The beam-beam transmittance of the screen material at normal incidence. This input field is the same as the material openness area fraction and can be autocalculated from the wire spacing and wire and diameter. Assumed to be the same for both sides of the screen.")]
public System.String ScreenBeamBeamSolarTransmittance { get; set; } = (System.String)Autocalculate;
        
[Description(@"The beam-diffuse solar transmittance of the screen material at normal incidence averaged over the entire spectrum of solar radiation. Assumed to be the same for both sides of the screen.")]
[JsonProperty(@"The beam-diffuse solar transmittance of the screen material at normal incidence averaged over the entire spectrum of solar radiation. Assumed to be the same for both sides of the screen.")]
public System.Single ScreenBeamDiffuseSolarTransmittance { get; set; } = ;
        
[Description(@"The beam-diffuse solar reflectance of the screen material at normal incidence averaged over the entire spectrum of solar radiation. Assumed to be the same for both sides of the screen.")]
[JsonProperty(@"The beam-diffuse solar reflectance of the screen material at normal incidence averaged over the entire spectrum of solar radiation. Assumed to be the same for both sides of the screen.")]
public System.Single ScreenBeamDiffuseSolarReflectance { get; set; } = ;
        
[Description(@"The beam-beam visible transmittance of the screen material at normal incidence averaged over the visible spectrum range of solar radiation. Assumed to be the same for both sides of the screen.")]
[JsonProperty(@"The beam-beam visible transmittance of the screen material at normal incidence averaged over the visible spectrum range of solar radiation. Assumed to be the same for both sides of the screen.")]
public System.Single ScreenBeamBeamVisibleTransmittance { get; set; } = ;
        
[Description(@"The beam-diffuse visible transmittance of the screen material at normal incidence averaged over the visible spectrum range of solar radiation. Assumed to be the same for both sides of the screen.")]
[JsonProperty(@"The beam-diffuse visible transmittance of the screen material at normal incidence averaged over the visible spectrum range of solar radiation. Assumed to be the same for both sides of the screen.")]
public System.Single ScreenBeamDiffuseVisibleTransmittance { get; set; } = ;
        
[Description(@"Beam-diffuse visible reflectance of the screen material at normal incidence averaged over the visible spectrum range of solar radiation. Assumed to be the same for both sides of the screen.")]
[JsonProperty(@"Beam-diffuse visible reflectance of the screen material at normal incidence averaged over the visible spectrum range of solar radiation. Assumed to be the same for both sides of the screen.")]
public System.Single ScreenBeamDiffuseVisibleReflectance { get; set; } = ;
        
[Description(@"The long-wave hemispherical transmittance of the screen material. Assumed to be the same for both sides of the screen.")]
[JsonProperty(@"The long-wave hemispherical transmittance of the screen material. Assumed to be the same for both sides of the screen.")]
public System.Single ScreenInfraredTransmittance { get; set; } = 0.02;
        
[Description(@"The long-wave hemispherical emissivity of the screen material. Assumed to be the same for both sides of the screen.")]
[JsonProperty(@"The long-wave hemispherical emissivity of the screen material. Assumed to be the same for both sides of the screen.")]
public System.Single ScreenInfraredEmissivity { get; set; } = 0.93;
        
[Description(@"Spacing assumed to be the same in both directions.")]
[JsonProperty(@"Spacing assumed to be the same in both directions.")]
public System.Single ScreenWireSpacing { get; set; } = 0.025;
        
[Description(@"Diameter assumed to be the same in both directions.")]
[JsonProperty(@"Diameter assumed to be the same in both directions.")]
public System.Single ScreenWireDiameter { get; set; } = 0.005;
    }
    
    [Description("Glass material properties for Windows or Glass Doors Transmittance/Reflectance in" +
        "put method.")]
    [JsonObject("WindowMaterial:Glazing:EquivalentLayer")]
    public class WindowMaterial_Glazing_EquivalentLayer
    {
        
[Description(@"Spectral is not currently supported and SpectralAverage is the default.")]
[JsonProperty(@"Spectral is not currently supported and SpectralAverage is the default.")]
public YesNoDefault OpticalDataType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SpectralAverage");
        
[Description(@"Spectral data is not currently supported. Used only when Optical Data Type = Spectral")]
[JsonProperty(@"Spectral data is not currently supported. Used only when Optical Data Type = Spectral")]
public System.String WindowGlassSpectralDataSetName { get; set; } = "";
        
[Description(@"Used only when Optical Data Type = SpectralAverage")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage")]
public System.Single FrontSideBeamBeamSolarTransmittance { get; set; } = ;
        
[Description(@"Used only when Optical Data Type = SpectralAverage")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage")]
public System.Single BackSideBeamBeamSolarTransmittance { get; set; } = ;
        
[Description(@"Used only when Optical Data Type = SpectralAverage Front Side is side closest to outdoor air")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage Front Side is side closest to outdoor air")]
public System.Single FrontSideBeamBeamSolarReflectance { get; set; } = ;
        
[Description(@"Used only when Optical Data Type = SpectralAverage Back Side is side closest to zone air")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage Back Side is side closest to zone air")]
public System.Single BackSideBeamBeamSolarReflectance { get; set; } = ;
        
[Description(@"Used only when Optical Data Type = SpectralAverage")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage")]
public System.Single FrontSideBeamBeamVisibleSolarTransmittance { get; set; } = ;
        
[Description(@"Used only when Optical Data Type = SpectralAverage")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage")]
public System.Single BackSideBeamBeamVisibleSolarTransmittance { get; set; } = ;
        
[Description(@"Used only when Optical Data Type = SpectralAverage Front Side is side closest to outdoor air")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage Front Side is side closest to outdoor air")]
public System.Single FrontSideBeamBeamVisibleSolarReflectance { get; set; } = ;
        
[Description(@"Used only when Optical Data Type = SpectralAverage Back Side is side closest to zone air")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage Back Side is side closest to zone air")]
public System.Single BackSideBeamBeamVisibleSolarReflectance { get; set; } = ;
        
[Description(@"Used only when Optical Data Type = SpectralAverage")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage")]
public System.Single FrontSideBeamDiffuseSolarTransmittance { get; set; } = 0;
        
[Description(@"Used only when Optical Data Type = SpectralAverage")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage")]
public System.Single BackSideBeamDiffuseSolarTransmittance { get; set; } = 0;
        
[Description(@"Used only when Optical Data Type = SpectralAverage Front Side is side closest to outdoor air")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage Front Side is side closest to outdoor air")]
public System.Single FrontSideBeamDiffuseSolarReflectance { get; set; } = 0;
        
[Description(@"Used only when Optical Data Type = SpectralAverage Back Side is side closest to zone air")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage Back Side is side closest to zone air")]
public System.Single BackSideBeamDiffuseSolarReflectance { get; set; } = 0;
        
[Description(@"Used only when Optical Data Type = SpectralAverage")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage")]
public System.Single FrontSideBeamDiffuseVisibleSolarTransmittance { get; set; } = 0;
        
[Description(@"Used only when Optical Data Type = SpectralAverage")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage")]
public System.Single BackSideBeamDiffuseVisibleSolarTransmittance { get; set; } = 0;
        
[Description(@"Used only when Optical Data Type = SpectralAverage Front Side is side closest to outdoor air")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage Front Side is side closest to outdoor air")]
public System.Single FrontSideBeamDiffuseVisibleSolarReflectance { get; set; } = 0;
        
[Description(@"Used only when Optical Data Type = SpectralAverage Back Side is side closest to zone air")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage Back Side is side closest to zone air")]
public System.Single BackSideBeamDiffuseVisibleSolarReflectance { get; set; } = 0;
        
[Description(@"Used only when Optical Data Type = SpectralAverage If this field is autocalculate, then the diffuse-diffuse solar transmittance is automatically estimated from other inputs and used in subsequent calculations. If this field is zero or positive, then the value entered here will be used.")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage If this field is autocalculate, then the diffuse-diffuse solar transmittance is automatically estimated from other inputs and used in subsequent calculations. If this field is zero or positive, then the value entered here will be used.")]
public System.String DiffuseDiffuseSolarTransmittance { get; set; } = (System.String)Autocalculate;
        
[Description(@"Used only when Optical Data Type = SpectralAverage If this field is autocalculate, then the front diffuse-diffuse solar reflectance is automatically estimated from other inputs and used in subsequent calculations. If this field is zero or positive, then the value entered here will be used. Front Side is side closest to outdoor air.")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage If this field is autocalculate, then the front diffuse-diffuse solar reflectance is automatically estimated from other inputs and used in subsequent calculations. If this field is zero or positive, then the value entered here will be used. Front Side is side closest to outdoor air.")]
public System.String FrontSideDiffuseDiffuseSolarReflectance { get; set; } = (System.String)Autocalculate;
        
[Description(@"Used only when Optical Data Type = SpectralAverage If this field is autocalculate, then the back diffuse-diffuse solar reflectance is automatically estimated from other inputs and used in subsequent calculations. If this field is zero or positive, then the value entered here will be used. Back side is side closest to indoor air.")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage If this field is autocalculate, then the back diffuse-diffuse solar reflectance is automatically estimated from other inputs and used in subsequent calculations. If this field is zero or positive, then the value entered here will be used. Back side is side closest to indoor air.")]
public System.String BackSideDiffuseDiffuseSolarReflectance { get; set; } = (System.String)Autocalculate;
        
[Description(@"Used only when Optical Data Type = SpectralAverage This input field is not used currently.")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage This input field is not used currently.")]
public System.String DiffuseDiffuseVisibleSolarTransmittance { get; set; } = (System.String)Autocalculate;
        
[Description(@"Used only when Optical Data Type = SpectralAverage This input field is not used currently.")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage This input field is not used currently.")]
public System.String FrontSideDiffuseDiffuseVisibleSolarReflectance { get; set; } = (System.String)Autocalculate;
        
[Description(@"Used only when Optical Data Type = SpectralAverage This input field is not used currently.")]
[JsonProperty(@"Used only when Optical Data Type = SpectralAverage This input field is not used currently.")]
public System.String BackSideDiffuseDiffuseVisibleSolarReflectance { get; set; } = (System.String)Autocalculate;
        
[Description(@"The long-wave hemispherical transmittance of the glazing. Assumed to be the same for both sides of the glazing.")]
[JsonProperty(@"The long-wave hemispherical transmittance of the glazing. Assumed to be the same for both sides of the glazing.")]
public System.Single InfraredTransmittanceAppliesToFrontAndBack { get; set; } = 0;
        
[Description(@"The front side long-wave hemispherical emissivity of the glazing.")]
[JsonProperty(@"The front side long-wave hemispherical emissivity of the glazing.")]
public System.Single FrontSideInfraredEmissivity { get; set; } = 0.84;
        
[Description(@"The back side long-wave hemispherical emissivity of the glazing.")]
[JsonProperty(@"The back side long-wave hemispherical emissivity of the glazing.")]
public System.Single BackSideInfraredEmissivity { get; set; } = 0.84;
        
[Description(@"This is the R-Value in SI for the glass. The default value is an approximation for a single layer of glass at 1/4" inch thickness. This field is used only for movable insulation defined with this material type.")]
[JsonProperty(@"This is the R-Value in SI for the glass. The default value is an approximation for a single layer of glass at 1/4" inch thickness. This field is used only for movable insulation defined with this material type.")]
public System.Single ThermalResistance { get; set; } = 0.158;
    }
    
    public enum OpticalDataTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Spectral")]
        Spectral = 1,
        
        [JsonProperty("SpectralAverage")]
        SpectralAverage = 2,
    }
    
    [Description("Gas material properties that are used in Windows Equivalent Layer References only" +
        " WindowMaterial:Gas properties")]
    [JsonObject("WindowMaterial:Gap:EquivalentLayer")]
    public class WindowMaterial_Gap_EquivalentLayer
    {
        
[JsonProperty(@"")]
public YesNoDefault GasType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single Thickness { get; set; } = ;
        
[Description(@"Sealed means the gap is enclosed and gas tight, i.e., no venting to indoor or outdoor environment. VentedIndoor means the gap is vented to indoor environment, and VentedOutdoor means the gap is vented to the outdoor environment. The gap types VentedIndoor and VentedOutdoor are used with gas type "Air" only.")]
[JsonProperty(@"Sealed means the gap is enclosed and gas tight, i.e., no venting to indoor or outdoor environment. VentedIndoor means the gap is vented to indoor environment, and VentedOutdoor means the gap is vented to the outdoor environment. The gap types VentedIndoor and VentedOutdoor are used with gas type "Air" only.")]
public YesNoDefault GapVentType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single ConductivityCoefficientA { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single ConductivityCoefficientB { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single ConductivityCoefficientC { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single ViscosityCoefficientA { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single ViscosityCoefficientB { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single ViscosityCoefficientC { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single SpecificHeatCoefficientA { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single SpecificHeatCoefficientB { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single SpecificHeatCoefficientC { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single MolecularWeight { get; set; } = ;
        
[Description(@"Used only if Gas Type = Custom")]
[JsonProperty(@"Used only if Gas Type = Custom")]
public System.Single SpecificHeatRatio { get; set; } = ;
    }
    
    public enum GasTypeType
    {
        
        [JsonProperty("AIR")]
        AIR = 0,
        
        [JsonProperty("ARGON")]
        ARGON = 1,
        
        [JsonProperty("CUSTOM")]
        CUSTOM = 2,
        
        [JsonProperty("KRYPTON")]
        KRYPTON = 3,
        
        [JsonProperty("XENON")]
        XENON = 4,
    }
    
    public enum GapVentTypeType
    {
        
        [JsonProperty("Sealed")]
        Sealed = 0,
        
        [JsonProperty("VentedIndoor")]
        VentedIndoor = 1,
        
        [JsonProperty("VentedOutdoor")]
        VentedOutdoor = 2,
    }
    
    [Description("Additional properties for moisture using EMPD procedure HeatBalanceAlgorithm choi" +
        "ce=MoisturePenetrationDepthConductionTransferFunction only Has no effect with ot" +
        "her HeatBalanceAlgorithm solution algorithms")]
    [JsonObject("MaterialProperty:MoisturePenetrationDepth:Settings")]
    public class MaterialProperty_MoisturePenetrationDepth_Settings
    {
        
[Description(@"Ratio of water vapor permeability of stagnant air to water vapor permeability of material")]
[JsonProperty(@"Ratio of water vapor permeability of stagnant air to water vapor permeability of material")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureEquationCoefficientA { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureEquationCoefficientB { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureEquationCoefficientC { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureEquationCoefficientD { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceLayerPenetrationDepth { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.String DeepLayerPenetrationDepth { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.Single CoatingLayerThickness { get; set; } = ;
        
[Description(@"The coating's resistance to water vapor diffusion relative to the resistance to water vapor diffusion in stagnant air (see Water Vapor Diffusion Resistance Factor above).")]
[JsonProperty(@"The coating's resistance to water vapor diffusion relative to the resistance to water vapor diffusion in stagnant air (see Water Vapor Diffusion Resistance Factor above).")]
public System.Single CoatingLayerWaterVaporDiffusionResistanceFactor { get; set; } = ;
    }
    
    [Description(@"Additional properties for temperature dependent thermal conductivity and enthalpy for Phase Change Materials (PCM) HeatBalanceAlgorithm = CondFD(ConductionFiniteDifference) solution algorithm only. Constructions with this should use the detailed CondFD process. Has no effect with other HeatBalanceAlgorithm solution algorithms")]
    [JsonObject("MaterialProperty:PhaseChange")]
    public class MaterialProperty_PhaseChange
    {
        
[Description(@"The base temperature is 20C. This is the thermal conductivity change per degree excursion from 20C. This variable conductivity function is overridden by the VariableThermalConductivity object, if present.")]
[JsonProperty(@"The base temperature is 20C. This is the thermal conductivity change per degree excursion from 20C. This variable conductivity function is overridden by the VariableThermalConductivity object, if present.")]
public System.Single TemperatureCoefficientForThermalConductivity { get; set; } = 0;
        
[Description(@"for Temperature-enthalpy function")]
[JsonProperty(@"for Temperature-enthalpy function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function corresponding to temperature 1")]
[JsonProperty(@"for Temperature-enthalpy function corresponding to temperature 1")]
public System.Single Enthalpy { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function")]
[JsonProperty(@"for Temperature-enthalpy function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function corresponding to temperature 2")]
[JsonProperty(@"for Temperature-enthalpy function corresponding to temperature 2")]
public System.Single Enthalpy { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function")]
[JsonProperty(@"for Temperature-enthalpy function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function corresponding to temperature 3")]
[JsonProperty(@"for Temperature-enthalpy function corresponding to temperature 3")]
public System.Single Enthalpy { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function")]
[JsonProperty(@"for Temperature-enthalpy function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function corresponding to temperature 4")]
[JsonProperty(@"for Temperature-enthalpy function corresponding to temperature 4")]
public System.Single Enthalpy { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function")]
[JsonProperty(@"for Temperature-enthalpy function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function corresponding to temperature 5")]
[JsonProperty(@"for Temperature-enthalpy function corresponding to temperature 5")]
public System.Single Enthalpy { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function")]
[JsonProperty(@"for Temperature-enthalpy function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function corresponding to temperature 6")]
[JsonProperty(@"for Temperature-enthalpy function corresponding to temperature 6")]
public System.Single Enthalpy { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function")]
[JsonProperty(@"for Temperature-enthalpy function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function corresponding to temperature 7")]
[JsonProperty(@"for Temperature-enthalpy function corresponding to temperature 7")]
public System.Single Enthalpy { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function")]
[JsonProperty(@"for Temperature-enthalpy function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function corresponding to temperature 8")]
[JsonProperty(@"for Temperature-enthalpy function corresponding to temperature 8")]
public System.Single Enthalpy { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function")]
[JsonProperty(@"for Temperature-enthalpy function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function corresponding to temperature 1")]
[JsonProperty(@"for Temperature-enthalpy function corresponding to temperature 1")]
public System.Single Enthalpy { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function")]
[JsonProperty(@"for Temperature-enthalpy function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function corresponding to temperature 2")]
[JsonProperty(@"for Temperature-enthalpy function corresponding to temperature 2")]
public System.Single Enthalpy { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function")]
[JsonProperty(@"for Temperature-enthalpy function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function corresponding to temperature 3")]
[JsonProperty(@"for Temperature-enthalpy function corresponding to temperature 3")]
public System.Single Enthalpy { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function")]
[JsonProperty(@"for Temperature-enthalpy function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function corresponding to temperature 14")]
[JsonProperty(@"for Temperature-enthalpy function corresponding to temperature 14")]
public System.Single Enthalpy { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function")]
[JsonProperty(@"for Temperature-enthalpy function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function corresponding to temperature 15")]
[JsonProperty(@"for Temperature-enthalpy function corresponding to temperature 15")]
public System.Single Enthalpy { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function")]
[JsonProperty(@"for Temperature-enthalpy function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function corresponding to temperature 16")]
[JsonProperty(@"for Temperature-enthalpy function corresponding to temperature 16")]
public System.Single Enthalpy { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function")]
[JsonProperty(@"for Temperature-enthalpy function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function corresponding to temperature 17")]
[JsonProperty(@"for Temperature-enthalpy function corresponding to temperature 17")]
public System.Single Enthalpy { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function")]
[JsonProperty(@"for Temperature-enthalpy function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-enthalpy function corresponding to temperature 16")]
[JsonProperty(@"for Temperature-enthalpy function corresponding to temperature 16")]
public System.Single Enthalpy { get; set; } = ;
    }
    
    [Description(@"Additional properties for temperature dependent thermal conductivity and enthalpy for Phase Change Materials (PCM) with separate melting and freezing curves. HeatBalanceAlgorithm = CondFD (ConductionFiniteDifference) solution algorithm only. Constructions with this should use the detailed CondFD process. Has no effect with other HeatBalanceAlgorithm solution algorithms.")]
    [JsonObject("MaterialProperty:PhaseChangeHysteresis")]
    public class MaterialProperty_PhaseChangeHysteresis
    {
        
[Description(@"The total latent heat absorbed or rejected during the transition from solid to liquid, or back")]
[JsonProperty(@"The total latent heat absorbed or rejected during the transition from solid to liquid, or back")]
public System.Single LatentHeatDuringTheEntirePhaseChangeProcess { get; set; } = ;
        
[Description(@"The thermal conductivity used by this material when the material is fully liquid")]
[JsonProperty(@"The thermal conductivity used by this material when the material is fully liquid")]
public System.Single LiquidStateThermalConductivity { get; set; } = ;
        
[Description(@"The density used by this material when the material is fully liquid")]
[JsonProperty(@"The density used by this material when the material is fully liquid")]
public System.Single LiquidStateDensity { get; set; } = ;
        
[Description(@"The constant specific heat used for the fully melted (liquid) state")]
[JsonProperty(@"The constant specific heat used for the fully melted (liquid) state")]
public System.Single LiquidStateSpecificHeat { get; set; } = ;
        
[Description(@"The total melting range of the material is the sum of low and high temperature difference of melting curve.")]
[JsonProperty(@"The total melting range of the material is the sum of low and high temperature difference of melting curve.")]
public System.Single HighTemperatureDifferenceOfMeltingCurve { get; set; } = ;
        
[Description(@"The temperature at which the melting curve peaks")]
[JsonProperty(@"The temperature at which the melting curve peaks")]
public System.Single PeakMeltingTemperature { get; set; } = ;
        
[Description(@"The total melting range of the material is the sum of low and high temperature difference of melting curve.")]
[JsonProperty(@"The total melting range of the material is the sum of low and high temperature difference of melting curve.")]
public System.Single LowTemperatureDifferenceOfMeltingCurve { get; set; } = ;
        
[Description(@"The thermal conductivity used by this material when the material is fully solid")]
[JsonProperty(@"The thermal conductivity used by this material when the material is fully solid")]
public System.Single SolidStateThermalConductivity { get; set; } = ;
        
[Description(@"The density used by this material when the material is fully solid")]
[JsonProperty(@"The density used by this material when the material is fully solid")]
public System.Single SolidStateDensity { get; set; } = ;
        
[Description(@"The constant specific heat used for the fully frozen (crystallized) state")]
[JsonProperty(@"The constant specific heat used for the fully frozen (crystallized) state")]
public System.Single SolidStateSpecificHeat { get; set; } = ;
        
[Description(@"The total freezing range of the material is the sum of low and high temperature difference of freezing curve.")]
[JsonProperty(@"The total freezing range of the material is the sum of low and high temperature difference of freezing curve.")]
public System.Single HighTemperatureDifferenceOfFreezingCurve { get; set; } = ;
        
[Description(@"The temperature at which the freezing curve peaks")]
[JsonProperty(@"The temperature at which the freezing curve peaks")]
public System.Single PeakFreezingTemperature { get; set; } = ;
        
[Description(@"The total freezing range of the material is the sum of low and high temperature difference of freezing curve.")]
[JsonProperty(@"The total freezing range of the material is the sum of low and high temperature difference of freezing curve.")]
public System.Single LowTemperatureDifferenceOfFreezingCurve { get; set; } = ;
    }
    
    [Description(@"Additional properties for temperature dependent thermal conductivity using piecewise linear temperature-conductivity function. HeatBalanceAlgorithm = CondFD(ConductionFiniteDifference) solution algorithm only. Has no effect with other HeatBalanceAlgorithm solution algorithms")]
    [JsonObject("MaterialProperty:VariableThermalConductivity")]
    public class MaterialProperty_VariableThermalConductivity
    {
        
[Description(@"for Temperature-Thermal Conductivity function")]
[JsonProperty(@"for Temperature-Thermal Conductivity function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-Thermal Conductivity function corresponding to temperature 1")]
[JsonProperty(@"for Temperature-Thermal Conductivity function corresponding to temperature 1")]
public System.Single ThermalConductivity { get; set; } = ;
        
[Description(@"for Temperature-Thermal Conductivity function")]
[JsonProperty(@"for Temperature-Thermal Conductivity function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-Thermal Conductivity function corresponding to temperature 2")]
[JsonProperty(@"for Temperature-Thermal Conductivity function corresponding to temperature 2")]
public System.Single ThermalConductivity { get; set; } = ;
        
[Description(@"for Temperature-Thermal Conductivity function")]
[JsonProperty(@"for Temperature-Thermal Conductivity function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-Thermal Conductivity function corresponding to temperature 3")]
[JsonProperty(@"for Temperature-Thermal Conductivity function corresponding to temperature 3")]
public System.Single ThermalConductivity { get; set; } = ;
        
[Description(@"for Temperature-Thermal Conductivity function")]
[JsonProperty(@"for Temperature-Thermal Conductivity function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-Thermal Conductivity function corresponding to temperature 4")]
[JsonProperty(@"for Temperature-Thermal Conductivity function corresponding to temperature 4")]
public System.Single ThermalConductivity { get; set; } = ;
        
[Description(@"for Temperature-Thermal Conductivity function")]
[JsonProperty(@"for Temperature-Thermal Conductivity function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-Thermal Conductivity function corresponding to temperature 5")]
[JsonProperty(@"for Temperature-Thermal Conductivity function corresponding to temperature 5")]
public System.Single ThermalConductivity { get; set; } = ;
        
[Description(@"for Temperature-Thermal Conductivity function")]
[JsonProperty(@"for Temperature-Thermal Conductivity function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-Thermal Conductivity function corresponding to temperature 6")]
[JsonProperty(@"for Temperature-Thermal Conductivity function corresponding to temperature 6")]
public System.Single ThermalConductivity { get; set; } = ;
        
[Description(@"for Temperature-Thermal Conductivity function")]
[JsonProperty(@"for Temperature-Thermal Conductivity function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-Thermal Conductivity function corresponding to temperature 7")]
[JsonProperty(@"for Temperature-Thermal Conductivity function corresponding to temperature 7")]
public System.Single ThermalConductivity { get; set; } = ;
        
[Description(@"for Temperature-Thermal Conductivity function")]
[JsonProperty(@"for Temperature-Thermal Conductivity function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-Thermal Conductivity function corresponding to temperature 8")]
[JsonProperty(@"for Temperature-Thermal Conductivity function corresponding to temperature 8")]
public System.Single ThermalConductivity { get; set; } = ;
        
[Description(@"for Temperature-Thermal Conductivity function")]
[JsonProperty(@"for Temperature-Thermal Conductivity function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-Thermal Conductivity function corresponding to temperature 9")]
[JsonProperty(@"for Temperature-Thermal Conductivity function corresponding to temperature 9")]
public System.Single ThermalConductivity { get; set; } = ;
        
[Description(@"for Temperature-Thermal Conductivity function")]
[JsonProperty(@"for Temperature-Thermal Conductivity function")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"for Temperature-Thermal Conductivity function corresponding to temperature 10")]
[JsonProperty(@"for Temperature-Thermal Conductivity function corresponding to temperature 10")]
public System.Single ThermalConductivity { get; set; } = ;
    }
    
    [Description("HeatBalanceAlgorithm = CombinedHeatAndMoistureFiniteElement solution algorithm on" +
        "ly. Additional material properties for surfaces. Has no effect with other HeatBa" +
        "lanceAlgorithm solution algorithms")]
    [JsonObject("MaterialProperty:HeatAndMoistureTransfer:Settings")]
    public class MaterialProperty_HeatAndMoistureTransfer_Settings
    {
        
[Description(@"Material Name that the moisture properties will be added to. This augments material properties needed for combined heat and moisture transfer for surfaces.")]
[JsonProperty(@"Material Name that the moisture properties will be added to. This augments material properties needed for combined heat and moisture transfer for surfaces.")]
public System.String MaterialName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single Porosity { get; set; } = ;
        
[Description(@"units are the water/material density ratio at the beginning of each run period.")]
[JsonProperty(@"units are the water/material density ratio at the beginning of each run period.")]
public System.Single InitialWaterContentRatio { get; set; } = 0.2;
    }
    
    [Description("HeatBalanceAlgorithm = CombinedHeatAndMoistureFiniteElement solution algorithm on" +
        "ly. Relationship between moisture content and relative humidity fraction. Has no" +
        " effect with other HeatBalanceAlgorithm solution algorithms")]
    [JsonObject("MaterialProperty:HeatAndMoistureTransfer:SorptionIsotherm")]
    public class MaterialProperty_HeatAndMoistureTransfer_SorptionIsotherm
    {
        
[Description(@"The Material Name that the moisture sorption isotherm will be added to.")]
[JsonProperty(@"The Material Name that the moisture sorption isotherm will be added to.")]
public System.String MaterialName { get; set; } = "";
        
[Description(@"Number of data Coordinates")]
[JsonProperty(@"Number of data Coordinates")]
public System.Single NumberOfIsothermCoordinates { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
    }
    
    [Description("HeatBalanceAlgorithm = CombinedHeatAndMoistureFiniteElement solution algorithm on" +
        "ly. Relationship between liquid suction transport coefficient and moisture conte" +
        "nt Has no effect with other HeatBalanceAlgorithm solution algorithms")]
    [JsonObject("MaterialProperty:HeatAndMoistureTransfer:Suction")]
    public class MaterialProperty_HeatAndMoistureTransfer_Suction
    {
        
[Description(@"Material Name that the moisture properties will be added to.")]
[JsonProperty(@"Material Name that the moisture properties will be added to.")]
public System.String MaterialName { get; set; } = "";
        
[Description(@"Number of Suction Liquid Transport Coefficient coordinates")]
[JsonProperty(@"Number of Suction Liquid Transport Coefficient coordinates")]
public System.Single NumberOfSuctionPoints { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
    }
    
    [Description("HeatBalanceAlgorithm = CombinedHeatAndMoistureFiniteElement solution algorithm on" +
        "ly. Relationship between liquid transport coefficient and moisture content Has n" +
        "o effect with other HeatBalanceAlgorithm solution algorithms")]
    [JsonObject("MaterialProperty:HeatAndMoistureTransfer:Redistribution")]
    public class MaterialProperty_HeatAndMoistureTransfer_Redistribution
    {
        
[Description(@"Moisture Material Name that the moisture properties will be added to.")]
[JsonProperty(@"Moisture Material Name that the moisture properties will be added to.")]
public System.String MaterialName { get; set; } = "";
        
[Description(@"number of data points")]
[JsonProperty(@"number of data points")]
public System.Single NumberOfRedistributionPoints { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LiquidTransportCoefficient { get; set; } = ;
    }
    
    [Description("HeatBalanceAlgorithm = CombinedHeatAndMoistureFiniteElement solution algorithm on" +
        "ly. Relationship between water vapor diffusion and relative humidity fraction Ha" +
        "s no effect with other HeatBalanceAlgorithm solution algorithms")]
    [JsonObject("MaterialProperty:HeatAndMoistureTransfer:Diffusion")]
    public class MaterialProperty_HeatAndMoistureTransfer_Diffusion
    {
        
[Description(@"Moisture Material Name that the moisture properties will be added to.")]
[JsonProperty(@"Moisture Material Name that the moisture properties will be added to.")]
public System.String MaterialName { get; set; } = "";
        
[Description(@"Water Vapor Diffusion Resistance Factor")]
[JsonProperty(@"Water Vapor Diffusion Resistance Factor")]
public System.Single NumberOfDataPairs { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
        
[Description(@"The relative humidity is entered as a fraction.")]
[JsonProperty(@"The relative humidity is entered as a fraction.")]
public System.Single RelativeHumidityFraction { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WaterVaporDiffusionResistanceFactor { get; set; } = ;
    }
    
    [Description("HeatBalanceAlgorithm = CombinedHeatAndMoistureFiniteElement solution algorithm on" +
        "ly. Relationship between thermal conductivity and moisture content Has no effect" +
        " with other HeatBalanceAlgorithm solution algorithms")]
    [JsonObject("MaterialProperty:HeatAndMoistureTransfer:ThermalConductivity")]
    public class MaterialProperty_HeatAndMoistureTransfer_ThermalConductivity
    {
        
[Description(@"Moisture Material Name that the Thermal Conductivity will be added to.")]
[JsonProperty(@"Moisture Material Name that the Thermal Conductivity will be added to.")]
public System.String MaterialName { get; set; } = "";
        
[Description(@"number of data coordinates")]
[JsonProperty(@"number of data coordinates")]
public System.Single NumberOfThermalCoordinates { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MoistureContent { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ThermalConductivity { get; set; } = ;
    }
    
    [Description("Name is followed by up to 800 sets of normal-incidence measured values of [wavele" +
        "ngth, transmittance, front reflectance, back reflectance] for wavelengths coveri" +
        "ng the solar spectrum (from about 0.25 to 2.5 microns)")]
    [JsonObject("MaterialProperty:GlazingSpectralData")]
    public class MaterialProperty_GlazingSpectralData
    {
        
[JsonProperty(@"")]
public System.Single Wavelength { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Transmittance { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FrontReflectance { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single BackReflectance { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Wavelength { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Transmittance { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FrontReflectance { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single BackReflectance { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Wavelength { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Transmittance { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FrontReflectance { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single BackReflectance { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Wavelength { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Transmittance { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FrontReflectance { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single BackReflectance { get; set; } = ;
        
[JsonProperty(@"")]
public System.String Extensions { get; set; } = "";
    }
    
    [Description("Start with outside layer and work your way to the inside layer Up to 10 layers to" +
        "tal, 8 for windows Enter the material name for each layer")]
    [JsonObject("Construction")]
    public class Construction
    {
        
[JsonProperty(@"")]
public System.String OutsideLayer { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Layer { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Layer { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Layer { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Layer { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Layer { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Layer { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Layer { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Layer { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Layer { get; set; } = "";
    }
    
    [Description("Alternate method of describing underground wall constructions")]
    [JsonObject("Construction:CfactorUndergroundWall")]
    public class Construction_CfactorUndergroundWall
    {
        
[Description(@"Enter C-Factor without film coefficients or soil")]
[JsonProperty(@"Enter C-Factor without film coefficients or soil")]
public System.Single CFactor { get; set; } = ;
        
[Description(@"Enter height of the underground wall")]
[JsonProperty(@"Enter height of the underground wall")]
public System.Single Height { get; set; } = ;
    }
    
    [Description("Alternate method of describing slab-on-grade or underground floor constructions")]
    [JsonObject("Construction:FfactorGroundFloor")]
    public class Construction_FfactorGroundFloor
    {
        
[JsonProperty(@"")]
public System.Single FFactor { get; set; } = ;
        
[Description(@"Enter area of the floor")]
[JsonProperty(@"Enter area of the floor")]
public System.Single Area { get; set; } = ;
        
[Description(@"Enter exposed perimeter of the floor")]
[JsonProperty(@"Enter exposed perimeter of the floor")]
public System.Single Perimeterexposed { get; set; } = ;
    }
    
    [Description("Internal heat source to be attached to a construction layer")]
    [JsonObject("ConstructionProperty:InternalHeatSource")]
    public class ConstructionProperty_InternalHeatSource
    {
        
[JsonProperty(@"")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"refers to the list of materials which follows")]
[JsonProperty(@"refers to the list of materials which follows")]
public System.Single ThermalSourcePresentAfterLayerNumber { get; set; } = ;
        
[Description(@"refers to the list of materials which follows")]
[JsonProperty(@"refers to the list of materials which follows")]
public System.Single TemperatureCalculationRequestedAfterLayerNumber { get; set; } = ;
        
[Description(@"1 = 1-dimensional calculation, 2 = 2-dimensional calculation")]
[JsonProperty(@"1 = 1-dimensional calculation, 2 = 2-dimensional calculation")]
public System.Single DimensionsForTheCtfCalculation { get; set; } = ;
        
[Description(@"uniform spacing between tubes or resistance wires in direction perpendicular to main intended direction of heat transfer")]
[JsonProperty(@"uniform spacing between tubes or resistance wires in direction perpendicular to main intended direction of heat transfer")]
public System.Single TubeSpacing { get; set; } = ;
        
[Description(@"used in conjunction with field Temperature Calculation Requested After Layer Number this field is the location perpendicular to the main direction of heat transfer 0.0 means in line with the tubing, 1.0 means at the midpoint between two adjacent pipes this field is ignored for 1-D calculations")]
[JsonProperty(@"used in conjunction with field Temperature Calculation Requested After Layer Number this field is the location perpendicular to the main direction of heat transfer 0.0 means in line with the tubing, 1.0 means at the midpoint between two adjacent pipes this field is ignored for 1-D calculations")]
public System.Single TwoDimensionalTemperatureCalculationPosition { get; set; } = 0;
    }
    
    [Description(@"Indicates an open boundary between two zones. It may be used for base surfaces and fenestration surfaces. The two adjacent zones are grouped together for solar, daylighting and radiant exchange. When this construction type is used, the Outside Boundary Condition of the surface (or the base surface of a fenestration surface) must be either Surface or Zone. A base surface with Construction:AirBoundary cannot hold any fenestration surfaces.")]
    [JsonObject("Construction:AirBoundary")]
    public class Construction_AirBoundary
    {
        
[Description(@"This field controls how air exchange is modeled across this boundary.")]
[JsonProperty(@"This field controls how air exchange is modeled across this boundary.")]
public YesNoDefault AirExchangeMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"If the Air Exchange Method is SimpleMixing then this field specifies the air changes per hour using the volume of the smaller zone as the basis. If an AirflowNetwork simulation is active this field is ignored.")]
[JsonProperty(@"If the Air Exchange Method is SimpleMixing then this field specifies the air changes per hour using the volume of the smaller zone as the basis. If an AirflowNetwork simulation is active this field is ignored.")]
public System.Single SimpleMixingAirChangesPerHour { get; set; } = 0.5;
        
[Description(@"If the Air Exchange Method is SimpleMixing then this field specifies the air exchange schedule. If this field is blank, the schedule is always 1.0. If an AirflowNetwork simulation is active this field is ignored.")]
[JsonProperty(@"If the Air Exchange Method is SimpleMixing then this field specifies the air exchange schedule. If this field is blank, the schedule is always 1.0. If an AirflowNetwork simulation is active this field is ignored.")]
public System.String SimpleMixingScheduleName { get; set; } = "";
    }
    
    public enum AirExchangeMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("SimpleMixing")]
        SimpleMixing = 2,
    }
    
    [Description("object is used to select which thermal model should be used in tarcog simulations" +
        "")]
    [JsonObject("WindowThermalModel:Params")]
    public class WindowThermalModel_Params
    {
        
[JsonProperty(@"")]
public YesNoDefault Standard { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ISO15099");
        
[JsonProperty(@"")]
public YesNoDefault ThermalModel { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ISO15099");
        
[JsonProperty(@"")]
public System.Single Sdscalar { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault DeflectionModel { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoDeflection");
        
[JsonProperty(@"")]
public System.Single VacuumPressureLimit { get; set; } = 13.238;
        
[Description(@"This is temperature in time of window fabrication")]
[JsonProperty(@"This is temperature in time of window fabrication")]
public System.Single InitialTemperature { get; set; } = 25;
        
[Description(@"This is pressure in time of window fabrication")]
[JsonProperty(@"This is pressure in time of window fabrication")]
public System.Single InitialPressure { get; set; } = 101325;
    }
    
    public enum StandardType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("EN673Declared")]
        ENDeclared = 1,
        
        [JsonProperty("EN673Design")]
        ENDesign = 2,
        
        [JsonProperty("ISO15099")]
        ISO = 3,
    }
    
    public enum ThermalModelType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConvectiveScalarModel_NoSDThickness")]
        ConvectiveScalarModelNoSDThickness = 1,
        
        [JsonProperty("ConvectiveScalarModel_withSDThickness")]
        ConvectiveScalarModelWithSDThickness = 2,
        
        [JsonProperty("ISO15099")]
        ISO = 3,
        
        [JsonProperty("ScaledCavityWidth")]
        ScaledCavityWidth = 4,
    }
    
    public enum DeflectionModelType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MeasuredDeflection")]
        MeasuredDeflection = 1,
        
        [JsonProperty("NoDeflection")]
        NoDeflection = 2,
        
        [JsonProperty("TemperatureAndPressureInput")]
        TemperatureAndPressureInput = 3,
    }
    
    [Description(@"Describes which window model will be used in calculations. Built in windows model will use algorithms that are part of EnergyPlus, while ExternalWindowsModel will use Windows-CalcEngine library to perform optical and thermal performances of windows and doors.")]
    [JsonObject("WindowsCalculationEngine")]
    public class WindowsCalculationEngine
    {
        
[JsonProperty(@"")]
public YesNoDefault WindowsEngine { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BuiltInWindowsModel");
    }
    
    public enum WindowsEngineType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BuiltInWindowsModel")]
        BuiltInWindowsModel = 1,
        
        [JsonProperty("ExternalWindowsModel")]
        ExternalWindowsModel = 2,
    }
    
    [Description("Describes one state for a complex glazing system These input objects are typicall" +
        "y generated by using WINDOW software and export to IDF syntax")]
    [JsonObject("Construction:ComplexFenestrationState")]
    public class Construction_ComplexFenestrationState
    {
        
[JsonProperty(@"")]
public YesNoDefault BasisType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "LBNLWINDOW");
        
[JsonProperty(@"")]
public YesNoDefault BasisSymmetryType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[JsonProperty(@"")]
public System.String WindowThermalModel { get; set; } = "";
        
[JsonProperty(@"")]
public System.String BasisMatrixName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SolarOpticalComplexFrontTransmittanceMatrixName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SolarOpticalComplexBackReflectanceMatrixName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String VisibleOpticalComplexFrontTransmittanceMatrixName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String VisibleOpticalComplexBackTransmittanceMatrixName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutsideLayerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutsideLayerDirectionalFrontAbsoptanceMatrixName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutsideLayerDirectionalBackAbsoptanceMatrixName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String GapName { get; set; } = "";
        
[Description(@"Reserved for future use. Leave it blank for this version")]
[JsonProperty(@"Reserved for future use. Leave it blank for this version")]
public System.String CfsGapDirectionalFrontAbsoptanceMatrixName { get; set; } = "";
        
[Description(@"Reserved for future use. Leave it blank for this version")]
[JsonProperty(@"Reserved for future use. Leave it blank for this version")]
public System.String CfsGapDirectionalBackAbsoptanceMatrixName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LayerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LayerDirectionalFrontAbsoptanceMatrixName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LayerDirectionalBackAbsoptanceMatrixName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String GapName { get; set; } = "";
        
[Description(@"Reserved for future use. Leave it blank for this version")]
[JsonProperty(@"Reserved for future use. Leave it blank for this version")]
public System.String GapDirectionalFrontAbsoptanceMatrixName { get; set; } = "";
        
[Description(@"Reserved for future use. Leave it blank for this version")]
[JsonProperty(@"Reserved for future use. Leave it blank for this version")]
public System.String GapDirectionalBackAbsoptanceMatrixName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LayerMaterial { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LayerDirectionalFrontAbsoptanceMatrixName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LayerDirectionalBackAbsoptanceMatrixName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String GapName { get; set; } = "";
        
[Description(@"Reserved for future use. Leave it blank for this version")]
[JsonProperty(@"Reserved for future use. Leave it blank for this version")]
public System.String GapDirectionalFrontAbsoptanceMatrixName { get; set; } = "";
        
[Description(@"Reserved for future use. Leave it blank for this version")]
[JsonProperty(@"Reserved for future use. Leave it blank for this version")]
public System.String GapDirectionalBackAbsoptanceMatrixName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LayerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LayerDirectionalFrontAbsoptanceMatrixName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LayerDirectionalBackAbsoptanceMatrixName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String GapName { get; set; } = "";
        
[Description(@"Reserved for future use. Leave it blank for this version")]
[JsonProperty(@"Reserved for future use. Leave it blank for this version")]
public System.String GapDirectionalFrontAbsoptanceMatrixName { get; set; } = "";
        
[Description(@"Reserved for future use. Leave it blank for this version")]
[JsonProperty(@"Reserved for future use. Leave it blank for this version")]
public System.String GapDirectionalBackAbsoptanceMatrixName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LayerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LayerDirectionalFrontAbsoptanceMatrixName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String LayerDirectionalBackAbsoptanceMatrixName { get; set; } = "";
    }
    
    public enum BasisTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LBNLWINDOW")]
        LBNLWINDOW = 1,
        
        [JsonProperty("UserDefined")]
        UserDefined = 2,
    }
    
    public enum BasisSymmetryTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Axisymmetric")]
        Axisymmetric = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    [Description("Start with outside layer and work your way to the inside Layer Up to 11 layers to" +
        "tal. Up to six solid layers and up to five gaps. Enter the material name for eac" +
        "h layer")]
    [JsonObject("Construction:WindowEquivalentLayer")]
    public class Construction_WindowEquivalentLayer
    {
        
[JsonProperty(@"")]
public System.String OutsideLayer { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Layer { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Layer { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Layer { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Layer { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Layer { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Layer { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Layer { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Layer { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Layer { get; set; } = "";
        
[JsonProperty(@"")]
public System.String Layer { get; set; } = "";
    }
    
    [Description("Initiates search of the Window data file for a window called Name.")]
    [JsonObject("Construction:WindowDataFile")]
    public class Construction_WindowDataFile
    {
        
[Description(@"default file name is "Window5DataFile.dat" limit on this field is 100 characters.")]
[JsonProperty(@"default file name is "Window5DataFile.dat" limit on this field is 100 characters.")]
public System.String FileName { get; set; } = "";
    }
}
namespace EnergyPlus.SystemAvailabilityManagers
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Determines the availability of a loop or system: whether it is on or off. Schedul" +
        "e overrides fan/pump schedule.")]
    [JsonObject("AvailabilityManager:Scheduled")]
    public class AvailabilityManager_Scheduled
    {
        
[JsonProperty(@"")]
public System.String ScheduleName { get; set; } = "";
    }
    
    [Description("Determines the availability of a loop or system: only controls the turn on action" +
        ". Schedule overrides fan/pump schedule.")]
    [JsonObject("AvailabilityManager:ScheduledOn")]
    public class AvailabilityManager_ScheduledOn
    {
        
[JsonProperty(@"")]
public System.String ScheduleName { get; set; } = "";
    }
    
    [Description("Determines the availability of a loop or system: only controls the turn off actio" +
        "n. Schedule overrides fan/pump schedule.")]
    [JsonObject("AvailabilityManager:ScheduledOff")]
    public class AvailabilityManager_ScheduledOff
    {
        
[JsonProperty(@"")]
public System.String ScheduleName { get; set; } = "";
    }
    
    [Description("Determines the optimal start of HVAC systems before occupancy.")]
    [JsonObject("AvailabilityManager:OptimumStart")]
    public class AvailabilityManager_OptimumStart
    {
        
[JsonProperty(@"")]
public System.String ApplicabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FanScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ControlZone");
        
[JsonProperty(@"")]
public System.String ControlZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ZoneListName { get; set; } = "";
        
[Description(@"this is the maximum number of hours that a system can start before occupancy")]
[JsonProperty(@"this is the maximum number of hours that a system can start before occupancy")]
public System.Single MaximumValueForOptimumStartTime { get; set; } = 6;
        
[JsonProperty(@"")]
public YesNoDefault ControlAlgorithm { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AdaptiveASHRAE");
        
[JsonProperty(@"")]
public System.Single ConstantTemperatureGradientDuringCooling { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ConstantTemperatureGradientDuringHeating { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single InitialTemperatureGradientDuringCooling { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single InitialTemperatureGradientDuringHeating { get; set; } = ;
        
[Description(@"this is the number of hours before occupancy for a system")]
[JsonProperty(@"this is the number of hours before occupancy for a system")]
public System.Single ConstantStartTime { get; set; } = ;
        
[Description(@"this is the number of days that their actual temperature gradients will be used in the AdaptiveTemperatureGradient method")]
[JsonProperty(@"this is the number of days that their actual temperature gradients will be used in the AdaptiveTemperatureGradient method")]
public System.Single NumberOfPreviousDays { get; set; } = 2;
    }
    
    public enum ControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ControlZone")]
        ControlZone = 1,
        
        [JsonProperty("MaximumofZoneList")]
        MaximumofZoneList = 2,
        
        [JsonProperty("StayOff")]
        StayOff = 3,
    }
    
    public enum ControlAlgorithmType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AdaptiveASHRAE")]
        AdaptiveASHRAE = 1,
        
        [JsonProperty("AdaptiveTemperatureGradient")]
        AdaptiveTemperatureGradient = 2,
        
        [JsonProperty("ConstantStartTime")]
        ConstantStartTime = 3,
        
        [JsonProperty("ConstantTemperatureGradient")]
        ConstantTemperatureGradient = 4,
    }
    
    [Description("Determines the availability of a loop or system: whether it is on or off. Dependi" +
        "ng on zone temperatures, overrides Schedules and forces system Fans on.")]
    [JsonObject("AvailabilityManager:NightCycle")]
    public class AvailabilityManager_NightCycle
    {
        
[JsonProperty(@"")]
public System.String ApplicabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FanScheduleName { get; set; } = "";
        
[Description(@"When AvailabilityManager:NightCycle is used in the zone component availability manager assignment list, the key choices for Control Type would only be StayOff and CycleOnControlZone")]
[JsonProperty(@"When AvailabilityManager:NightCycle is used in the zone component availability manager assignment list, the key choices for Control Type would only be StayOff and CycleOnControlZone")]
public YesNoDefault ControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "StayOff");
        
[JsonProperty(@"")]
public System.Single ThermostatTolerance { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault CyclingRunTimeControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FixedRunTime");
        
[JsonProperty(@"")]
public System.Single CyclingRunTime { get; set; } = 3600;
        
[Description(@"When AvailabilityManager:NightCycle is used in the zone component availability manager assignment list, the Control Zone Name should be the name of the zone in which the zone component is.")]
[JsonProperty(@"When AvailabilityManager:NightCycle is used in the zone component availability manager assignment list, the Control Zone Name should be the name of the zone in which the zone component is.")]
public System.String ControlZoneOrZoneListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoolingControlZoneOrZoneListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatingControlZoneOrZoneListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatingZoneFansOnlyZoneOrZoneListName { get; set; } = "";
    }
    
    public enum ControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CycleOnAny")]
        CycleOnAny = 1,
        
        [JsonProperty("CycleOnAnyCoolingOrHeatingZone")]
        CycleOnAnyCoolingOrHeatingZone = 2,
        
        [JsonProperty("CycleOnAnyCoolingZone")]
        CycleOnAnyCoolingZone = 3,
        
        [JsonProperty("CycleOnAnyHeatingZone")]
        CycleOnAnyHeatingZone = 4,
        
        [JsonProperty("CycleOnAnyHeatingZoneFansOnly")]
        CycleOnAnyHeatingZoneFansOnly = 5,
        
        [JsonProperty("CycleOnAnyZoneFansOnly")]
        CycleOnAnyZoneFansOnly = 6,
        
        [JsonProperty("CycleOnControlZone")]
        CycleOnControlZone = 7,
        
        [JsonProperty("StayOff")]
        StayOff = 8,
    }
    
    public enum CyclingRunTimeControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("FixedRunTime")]
        FixedRunTime = 1,
        
        [JsonProperty("Thermostat")]
        Thermostat = 2,
        
        [JsonProperty("ThermostatWithMinimumRunTime")]
        ThermostatWithMinimumRunTime = 3,
    }
    
    [Description("Overrides fan/pump schedules depending on temperature difference between two node" +
        "s.")]
    [JsonObject("AvailabilityManager:DifferentialThermostat")]
    public class AvailabilityManager_DifferentialThermostat
    {
        
[JsonProperty(@"")]
public System.String HotNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ColdNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single TemperatureDifferenceOnLimit { get; set; } = ;
        
[Description(@"Defaults to Temperature Difference On Limit.")]
[JsonProperty(@"Defaults to Temperature Difference On Limit.")]
public System.Single TemperatureDifferenceOffLimit { get; set; } = ;
    }
    
    [Description("Overrides fan/pump schedules depending on temperature at sensor node.")]
    [JsonObject("AvailabilityManager:HighTemperatureTurnOff")]
    public class AvailabilityManager_HighTemperatureTurnOff
    {
        
[JsonProperty(@"")]
public System.String SensorNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
    }
    
    [Description("Overrides fan/pump schedules depending on temperature at sensor node.")]
    [JsonObject("AvailabilityManager:HighTemperatureTurnOn")]
    public class AvailabilityManager_HighTemperatureTurnOn
    {
        
[JsonProperty(@"")]
public System.String SensorNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
    }
    
    [Description("Overrides fan/pump schedules depending on temperature at sensor node.")]
    [JsonObject("AvailabilityManager:LowTemperatureTurnOff")]
    public class AvailabilityManager_LowTemperatureTurnOff
    {
        
[JsonProperty(@"")]
public System.String SensorNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
        
[Description(@"If blank, defaults to always active")]
[JsonProperty(@"If blank, defaults to always active")]
public System.String ApplicabilityScheduleName { get; set; } = "";
    }
    
    [Description("Overrides fan/pump schedules depending on temperature at sensor node.")]
    [JsonObject("AvailabilityManager:LowTemperatureTurnOn")]
    public class AvailabilityManager_LowTemperatureTurnOn
    {
        
[JsonProperty(@"")]
public System.String SensorNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single Temperature { get; set; } = ;
    }
    
    [Description("depending on zone and outdoor conditions overrides fan schedule to do precooling " +
        "with outdoor air")]
    [JsonObject("AvailabilityManager:NightVentilation")]
    public class AvailabilityManager_NightVentilation
    {
        
[JsonProperty(@"")]
public System.String ApplicabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FanScheduleName { get; set; } = "";
        
[Description(@"One zone temperature must be above this scheduled temperature for night ventilation to be enabled")]
[JsonProperty(@"One zone temperature must be above this scheduled temperature for night ventilation to be enabled")]
public System.String VentilationTemperatureScheduleName { get; set; } = "";
        
[Description(@"The outdoor air temperature minus the control zone temperature must be greater than the ventilation delta T")]
[JsonProperty(@"The outdoor air temperature minus the control zone temperature must be greater than the ventilation delta T")]
public System.Single VentilationTemperatureDifference { get; set; } = 2;
        
[Description(@"Night ventilation is disabled if any conditioned zone served by the system falls below this temperature")]
[JsonProperty(@"Night ventilation is disabled if any conditioned zone served by the system falls below this temperature")]
public System.Single VentilationTemperatureLowLimit { get; set; } = 15;
        
[Description(@"the fraction (could be > 1) of the design system Flow Rate at which night ventilation will be done")]
[JsonProperty(@"the fraction (could be > 1) of the design system Flow Rate at which night ventilation will be done")]
public System.Single NightVentingFlowFraction { get; set; } = 1;
        
[Description(@"When AvailabilityManager:NightVentilation is used in the zone component availability manager assignment list, the Control Zone Name should be the name of the zone in which the zone component is.")]
[JsonProperty(@"When AvailabilityManager:NightVentilation is used in the zone component availability manager assignment list, the Control Zone Name should be the name of the zone in which the zone component is.")]
public System.String ControlZoneName { get; set; } = "";
    }
    
    [Description(@"Depending on zone and outdoor conditions overrides window/door opening controls to maximize natural ventilation and turn off an HVAC system when ventilation control conditions are met. This object (zone ventilation object name) has not been instrumented to work with global Zone or Zone List names option for Ventilation:DesignFlowRate. In order to use, you must enter the single <Ventilation:DesignFlowRate> name in that field. If it is a part of a global ventilation assignment the name will be <Zone Name> <global Ventilation:DesignFlowRate> name. Currently, hybrid ventilation manager is restricted to one per zone. It can either be applied through the air loop or directly to the zone. If hybrid ventilation manager is applied to an air loop and one of the zones served by that air loop also has hybrid ventilation manager, then zone hybrid ventilation manager is disabled.")]
    [JsonObject("AvailabilityManager:HybridVentilation")]
    public class AvailabilityManager_HybridVentilation
    {
        
[Description(@"Enter the name of an AirLoopHVAC or HVACTemplate:System:* object. If this field is left blank, hybrid ventilation managers will be simulated for zone equipment control")]
[JsonProperty(@"Enter the name of an AirLoopHVAC or HVACTemplate:System:* object. If this field is left blank, hybrid ventilation managers will be simulated for zone equipment control")]
public System.String HvacAirLoopName { get; set; } = "";
        
[Description(@"the zone name should be a zone where a thermostat or humidistat is located served by an air primary loop.")]
[JsonProperty(@"the zone name should be a zone where a thermostat or humidistat is located served by an air primary loop.")]
public System.String ControlZoneName { get; set; } = "";
        
[Description(@"The Ventilation control mode contains appropriate integer control types. 0 - uncontrolled (Natural ventilation and HVAC system are controlled by themselves) 1 = Temperature control 2 = Enthalpy control 3 = Dewpoint control 4 = Outdoor ventilation air control 5 = Operative temperature control with 80% adaptive comfort acceptability limits 6 = Operative temperature control with 90% adaptive comfort acceptability limits 7 = Carbon dioxide control")]
[JsonProperty(@"The Ventilation control mode contains appropriate integer control types. 0 - uncontrolled (Natural ventilation and HVAC system are controlled by themselves) 1 = Temperature control 2 = Enthalpy control 3 = Dewpoint control 4 = Outdoor ventilation air control 5 = Operative temperature control with 80% adaptive comfort acceptability limits 6 = Operative temperature control with 90% adaptive comfort acceptability limits 7 = Carbon dioxide control")]
public System.String VentilationControlModeScheduleName { get; set; } = "";
        
[Description(@"If Yes, ventilation is shutoff when there is rain If No, there is no rain control")]
[JsonProperty(@"If Yes, ventilation is shutoff when there is rain If No, there is no rain control")]
public YesNoDefault UseWeatherFileRainIndicators { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
        
[Description(@"this is the wind speed above which ventilation is shutoff")]
[JsonProperty(@"this is the wind speed above which ventilation is shutoff")]
public System.Single MaximumWindSpeed { get; set; } = 40;
        
[Description(@"this is the outdoor temperature below which ventilation is shutoff")]
[JsonProperty(@"this is the outdoor temperature below which ventilation is shutoff")]
public System.Single MinimumOutdoorTemperature { get; set; } = -100;
        
[Description(@"this is the outdoor temperature above which ventilation is shutoff")]
[JsonProperty(@"this is the outdoor temperature above which ventilation is shutoff")]
public System.Single MaximumOutdoorTemperature { get; set; } = 100;
        
[Description(@"this is the outdoor Enthalpy below which ventilation is shutoff")]
[JsonProperty(@"this is the outdoor Enthalpy below which ventilation is shutoff")]
public System.Single MinimumOutdoorEnthalpy { get; set; } = ;
        
[Description(@"this is the outdoor Enthalpy above which ventilation is shutoff")]
[JsonProperty(@"this is the outdoor Enthalpy above which ventilation is shutoff")]
public System.Single MaximumOutdoorEnthalpy { get; set; } = ;
        
[Description(@"this is the outdoor temperature below which ventilation is shutoff Applicable only if Ventilation Control Mode = 3")]
[JsonProperty(@"this is the outdoor temperature below which ventilation is shutoff Applicable only if Ventilation Control Mode = 3")]
public System.Single MinimumOutdoorDewpoint { get; set; } = -100;
        
[Description(@"this is the outdoor dewpoint above which ventilation is shutoff Applicable only if Ventilation Control Mode = 3")]
[JsonProperty(@"this is the outdoor dewpoint above which ventilation is shutoff Applicable only if Ventilation Control Mode = 3")]
public System.Single MaximumOutdoorDewpoint { get; set; } = 100;
        
[Description(@"Used only if Ventilation Control Mode = 4")]
[JsonProperty(@"Used only if Ventilation Control Mode = 4")]
public System.String MinimumOutdoorVentilationAirScheduleName { get; set; } = "";
        
[Description(@"linear curve = a + b*WS quadratic curve = a + b*WS + c*WS**2 WS = wind speed (m/s)")]
[JsonProperty(@"linear curve = a + b*WS quadratic curve = a + b*WS + c*WS**2 WS = wind speed (m/s)")]
public System.String OpeningFactorFunctionOfWindSpeedCurveName { get; set; } = "";
        
[Description(@"The schedule is used to incorporate operation of AirflowNetwork large opening objects and HVAC system operation.")]
[JsonProperty(@"The schedule is used to incorporate operation of AirflowNetwork large opening objects and HVAC system operation.")]
public System.String AirflownetworkControlTypeScheduleName { get; set; } = "";
        
[Description(@"The schedule is used to incorporate operation of simple airflow objects and HVAC system operation. The simple airflow objects are Ventilation and Mixing only")]
[JsonProperty(@"The schedule is used to incorporate operation of simple airflow objects and HVAC system operation. The simple airflow objects are Ventilation and Mixing only")]
public System.String SimpleAirflowControlTypeScheduleName { get; set; } = "";
        
[Description(@"This field has not been instrumented to work with global Zone or Zone List names option for Ventilation:DesignFlowRate. In order to use, you must enter the single <Ventilation:DesignFlowRate> name in this field. If it is a part of a global ventilation assignment the name will be <Zone Name> <global Ventilation:DesignFlowRate> name. The other ZoneVentilation:* and ZoneMixing objects controlled in the same AirLoopHVAC will work in the same way as this ventilation object.")]
[JsonProperty(@"This field has not been instrumented to work with global Zone or Zone List names option for Ventilation:DesignFlowRate. In order to use, you must enter the single <Ventilation:DesignFlowRate> name in this field. If it is a part of a global ventilation assignment the name will be <Zone Name> <global Ventilation:DesignFlowRate> name. The other ZoneVentilation:* and ZoneMixing objects controlled in the same AirLoopHVAC will work in the same way as this ventilation object.")]
public System.String ZoneventilationObjectName { get; set; } = "";
        
[Description(@"Minimum operation time when HVAC system is forced on.")]
[JsonProperty(@"Minimum operation time when HVAC system is forced on.")]
public System.Single MinimumHvacOperationTime { get; set; } = 0;
        
[Description(@"Minimum ventilation time when natural ventilation is forced on.")]
[JsonProperty(@"Minimum ventilation time when natural ventilation is forced on.")]
public System.Single MinimumVentilationTime { get; set; } = 0;
    }
    
    [Description(@"Defines the applicable managers used for an AirLoopHVAC or PlantLoop. The priority of availability managers is based on a set of rules and are specific to the type of loop. The output from each availability manager is an availability status flag: NoAction, ForceOff, CycleOn, or CycleOnZoneFansOnly (used only for air loops).")]
    [JsonObject("AvailabilityManagerAssignmentList")]
    public class AvailabilityManagerAssignmentList
    {
        
[JsonProperty(@"")]
public System.String Managers { get; set; } = "";
    }
}
namespace EnergyPlus.ThermalZonesandSurfaces
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Specifies the geometric rules used to describe the input of surface vertices and " +
        "daylighting reference points.")]
    [JsonObject("GlobalGeometryRules")]
    public class GlobalGeometryRules
    {
        
[Description(@"Specified as entry for a 4 sided surface/rectangle Surfaces are specified as viewed from outside the surface Shading surfaces as viewed from behind. (towards what they are shading)")]
[JsonProperty(@"Specified as entry for a 4 sided surface/rectangle Surfaces are specified as viewed from outside the surface Shading surfaces as viewed from behind. (towards what they are shading)")]
public YesNoDefault StartingVertexPosition { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault VertexEntryDirection { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Relative -- coordinates are entered relative to zone origin World -- all coordinates entered are "absolute" for this facility")]
[JsonProperty(@"Relative -- coordinates are entered relative to zone origin World -- all coordinates entered are "absolute" for this facility")]
public YesNoDefault CoordinateSystem { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Relative -- coordinates are entered relative to zone origin World -- all coordinates entered are "absolute" for this facility")]
[JsonProperty(@"Relative -- coordinates are entered relative to zone origin World -- all coordinates entered are "absolute" for this facility")]
public YesNoDefault DaylightingReferencePointCoordinateSystem { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Relative");
        
[Description(@"Relative -- Starting corner is entered relative to zone origin World -- Starting corner is entered in "absolute"")]
[JsonProperty(@"Relative -- Starting corner is entered relative to zone origin World -- Starting corner is entered in "absolute"")]
public YesNoDefault RectangularSurfaceCoordinateSystem { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Relative");
    }
    
    public enum StartingVertexPositionType
    {
        
        [JsonProperty("LowerLeftCorner")]
        LowerLeftCorner = 0,
        
        [JsonProperty("LowerRightCorner")]
        LowerRightCorner = 1,
        
        [JsonProperty("UpperLeftCorner")]
        UpperLeftCorner = 2,
        
        [JsonProperty("UpperRightCorner")]
        UpperRightCorner = 3,
    }
    
    public enum VertexEntryDirectionType
    {
        
        [JsonProperty("Clockwise")]
        Clockwise = 0,
        
        [JsonProperty("Counterclockwise")]
        Counterclockwise = 1,
    }
    
    public enum CoordinateSystemType
    {
        
        [JsonProperty("Relative")]
        Relative = 0,
        
        [JsonProperty("World")]
        World = 1,
    }
    
    public enum DaylightingReferencePointCoordinateSystemType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Relative")]
        Relative = 1,
        
        [JsonProperty("World")]
        World = 2,
    }
    
    public enum RectangularSurfaceCoordinateSystemType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Relative")]
        Relative = 1,
        
        [JsonProperty("World")]
        World = 2,
    }
    
    [Description("Provides a simple method of altering the footprint geometry of a model. The inten" +
        "t is to provide a single parameter that can be used to reshape the building desc" +
        "ription contained in the rest of the input file.")]
    [JsonObject("GeometryTransform")]
    public class GeometryTransform
    {
        
[Description(@"only current allowed value is "XY"")]
[JsonProperty(@"only current allowed value is "XY"")]
public YesNoDefault PlaneOfTransform { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "XY");
        
[Description(@"Aspect ratio of building as described in idf")]
[JsonProperty(@"Aspect ratio of building as described in idf")]
public System.Single CurrentAspectRatio { get; set; } = ;
        
[Description(@"Aspect ratio to transform to during run")]
[JsonProperty(@"Aspect ratio to transform to during run")]
public System.Single NewAspectRatio { get; set; } = ;
    }
    
    public enum PlaneOfTransformType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("XY")]
        XY = 1,
    }
    
    [Description("Defines a thermal zone of the building.")]
    [JsonObject("Zone")]
    public class Zone
    {
        
[JsonProperty(@"")]
public System.Single DirectionOfRelativeNorth { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single XOrigin { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single YOrigin { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single ZOrigin { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single Type { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single Multiplier { get; set; } = 1;
        
[Description(@"If this field is 0.0, negative or autocalculate, then the average height of the zone is automatically calculated and used in subsequent calculations. If this field is positive, then the number entered here will be used. Note that the Zone Ceiling Height is the distance from the Floor to the Ceiling in the Zone, not an absolute height from the ground.")]
[JsonProperty(@"If this field is 0.0, negative or autocalculate, then the average height of the zone is automatically calculated and used in subsequent calculations. If this field is positive, then the number entered here will be used. Note that the Zone Ceiling Height is the distance from the Floor to the Ceiling in the Zone, not an absolute height from the ground.")]
public System.String CeilingHeight { get; set; } = (System.String)Autocalculate;
        
[Description(@"If this field is 0.0, negative or autocalculate, then the volume of the zone is automatically calculated and used in subsequent calculations. If this field is positive, then the number entered here will be used.")]
[JsonProperty(@"If this field is 0.0, negative or autocalculate, then the volume of the zone is automatically calculated and used in subsequent calculations. If this field is positive, then the number entered here will be used.")]
public System.String Volume { get; set; } = (System.String)Autocalculate;
        
[Description(@"If this field is 0.0, negative or autocalculate, then the floor area of the zone is automatically calculated and used in subsequent calculations. If this field is positive, then the number entered here will be used.")]
[JsonProperty(@"If this field is 0.0, negative or autocalculate, then the floor area of the zone is automatically calculated and used in subsequent calculations. If this field is positive, then the number entered here will be used.")]
public System.String FloorArea { get; set; } = (System.String)Autocalculate;
        
[Description(@"Will default to same value as SurfaceConvectionAlgorithm:Inside object setting this field overrides the default SurfaceConvectionAlgorithm:Inside for this zone Simple = constant natural convection (ASHRAE) TARP = variable natural convection based on temperature difference (ASHRAE) CeilingDiffuser = ACH based forced and mixed convection correlations for ceiling diffuser configuration with simple natural convection limit AdaptiveConvectionAlgorithm = dynamic selection of convection models based on conditions TrombeWall = variable natural convection in an enclosed rectangular cavity ASTMC1340 = mixed convection correlations specified for attic zone")]
[JsonProperty(@"Will default to same value as SurfaceConvectionAlgorithm:Inside object setting this field overrides the default SurfaceConvectionAlgorithm:Inside for this zone Simple = constant natural convection (ASHRAE) TARP = variable natural convection based on temperature difference (ASHRAE) CeilingDiffuser = ACH based forced and mixed convection correlations for ceiling diffuser configuration with simple natural convection limit AdaptiveConvectionAlgorithm = dynamic selection of convection models based on conditions TrombeWall = variable natural convection in an enclosed rectangular cavity ASTMC1340 = mixed convection correlations specified for attic zone")]
public YesNoDefault ZoneInsideConvectionAlgorithm { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Will default to same value as SurfaceConvectionAlgorithm:Outside object setting this field overrides the default SurfaceConvectionAlgorithm:Outside for this zone SimpleCombined = Combined radiation and convection coefficient using simple ASHRAE model TARP = correlation from models developed by ASHRAE, Walton, and Sparrow et. al. MoWiTT = correlation from measurements by Klems and Yazdanian for smooth surfaces DOE-2 = correlation from measurements by Klems and Yazdanian for rough surfaces AdaptiveConvectionAlgorithm = dynamic selection of correlations based on conditions")]
[JsonProperty(@"Will default to same value as SurfaceConvectionAlgorithm:Outside object setting this field overrides the default SurfaceConvectionAlgorithm:Outside for this zone SimpleCombined = Combined radiation and convection coefficient using simple ASHRAE model TARP = correlation from models developed by ASHRAE, Walton, and Sparrow et. al. MoWiTT = correlation from measurements by Klems and Yazdanian for smooth surfaces DOE-2 = correlation from measurements by Klems and Yazdanian for rough surfaces AdaptiveConvectionAlgorithm = dynamic selection of correlations based on conditions")]
public YesNoDefault ZoneOutsideConvectionAlgorithm { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault PartOfTotalFloorArea { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
    }
    
    public enum ZoneInsideConvectionAlgorithmType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ASTMC1340")]
        ASTMC = 1,
        
        [JsonProperty("AdaptiveConvectionAlgorithm")]
        AdaptiveConvectionAlgorithm = 2,
        
        [JsonProperty("CeilingDiffuser")]
        CeilingDiffuser = 3,
        
        [JsonProperty("Simple")]
        Simple = 4,
        
        [JsonProperty("TARP")]
        TARP = 5,
        
        [JsonProperty("TrombeWall")]
        TrombeWall = 6,
    }
    
    public enum ZoneOutsideConvectionAlgorithmType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AdaptiveConvectionAlgorithm")]
        AdaptiveConvectionAlgorithm = 1,
        
        [JsonProperty("DOE-2")]
        DOE = 2,
        
        [JsonProperty("MoWiTT")]
        MoWiTT = 3,
        
        [JsonProperty("SimpleCombined")]
        SimpleCombined = 4,
        
        [JsonProperty("TARP")]
        TARP = 5,
    }
    
    [Description(@"Defines a list of thermal zones which can be referenced as a group. The ZoneList name may be used elsewhere in the input to apply a parameter to all zones in the list. ZoneLists can be used effectively with the following objects: People, Lights, ElectricEquipment, GasEquipment, HotWaterEquipment, ZoneInfiltration:DesignFlowRate, ZoneVentilation:DesignFlowRate, Sizing:Zone, ZoneControl:Thermostat, and others.")]
    [JsonObject("ZoneList")]
    public class ZoneList
    {
        
[JsonProperty(@"")]
public System.String Zones { get; set; } = "";
    }
    
    [Description("Adds a multiplier to a ZoneList. This can be used to reduce the amount of input n" +
        "ecessary for simulating repetitive structures, such as the identical floors of a" +
        " multi-story building.")]
    [JsonObject("ZoneGroup")]
    public class ZoneGroup
    {
        
[JsonProperty(@"")]
public System.String ZoneListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single ZoneListMultiplier { get; set; } = 1;
    }
    
    [Description("Allows for detailed entry of building heat transfer surfaces. Does not include su" +
        "bsurfaces such as windows or doors.")]
    [JsonObject("BuildingSurface:Detailed")]
    public class BuildingSurface_Detailed
    {
        
[JsonProperty(@"")]
public YesNoDefault SurfaceType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"To be matched with a construction in this input file")]
[JsonProperty(@"To be matched with a construction in this input file")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Zone the surface is a part of")]
[JsonProperty(@"Zone the surface is a part of")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault OutsideBoundaryCondition { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Non-blank only if the field Outside Boundary Condition is Surface, Zone, OtherSideCoefficients or OtherSideConditionsModel If Surface, specify name of corresponding surface in adjacent zone or specify current surface name for internal partition separating like zones If Zone, specify the name of the corresponding zone and the program will generate the corresponding interzone surface If Foundation, specify the name of the corresponding Foundation object and the program will calculate the heat transfer appropriately If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients If OtherSideConditionsModel, specify name of SurfaceProperty:OtherSideConditionsModel")]
[JsonProperty(@"Non-blank only if the field Outside Boundary Condition is Surface, Zone, OtherSideCoefficients or OtherSideConditionsModel If Surface, specify name of corresponding surface in adjacent zone or specify current surface name for internal partition separating like zones If Zone, specify the name of the corresponding zone and the program will generate the corresponding interzone surface If Foundation, specify the name of the corresponding Foundation object and the program will calculate the heat transfer appropriately If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients If OtherSideConditionsModel, specify name of SurfaceProperty:OtherSideConditionsModel")]
public System.String OutsideBoundaryConditionObject { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault SunExposure { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SunExposed");
        
[JsonProperty(@"")]
public YesNoDefault WindExposure { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WindExposed");
        
[Description(@"From the exterior of the surface Unused if one uses the "reflections" options in Solar Distribution in Building input unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified. autocalculate will automatically calculate this value from the tilt of the surface")]
[JsonProperty(@"From the exterior of the surface Unused if one uses the "reflections" options in Solar Distribution in Building input unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified. autocalculate will automatically calculate this value from the tilt of the surface")]
public System.String ViewFactorToGround { get; set; } = (System.String)Autocalculate;
        
[Description(@"shown with 120 vertex coordinates -- extensible object "extensible" -- duplicate last set of x,y,z coordinates (last 3 fields), remembering to remove ; from "inner" fields. for clarity in any error messages, renumber the fields as well. (and changing z terminator to a comma "," for all but last one which needs a semi-colon ";") vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates are "relative" to the Zone Origin. If world, then building and zone origins are used for some internal calculations, but all coordinates are given in an "absolute" system.")]
[JsonProperty(@"shown with 120 vertex coordinates -- extensible object "extensible" -- duplicate last set of x,y,z coordinates (last 3 fields), remembering to remove ; from "inner" fields. for clarity in any error messages, renumber the fields as well. (and changing z terminator to a comma "," for all but last one which needs a semi-colon ";") vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates are "relative" to the Zone Origin. If world, then building and zone origins are used for some internal calculations, but all coordinates are given in an "absolute" system.")]
public System.String NumberOfVertices { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.String Vertices { get; set; } = "";
    }
    
    public enum SurfaceTypeType
    {
        
        [JsonProperty("Ceiling")]
        Ceiling = 0,
        
        [JsonProperty("Floor")]
        Floor = 1,
        
        [JsonProperty("Roof")]
        Roof = 2,
        
        [JsonProperty("Wall")]
        Wall = 3,
    }
    
    public enum OutsideBoundaryConditionType
    {
        
        [JsonProperty("Adiabatic")]
        Adiabatic = 0,
        
        [JsonProperty("Foundation")]
        Foundation = 1,
        
        [JsonProperty("Ground")]
        Ground = 2,
        
        [JsonProperty("GroundBasementPreprocessorAverageFloor")]
        GroundBasementPreprocessorAverageFloor = 3,
        
        [JsonProperty("GroundBasementPreprocessorAverageWall")]
        GroundBasementPreprocessorAverageWall = 4,
        
        [JsonProperty("GroundBasementPreprocessorLowerWall")]
        GroundBasementPreprocessorLowerWall = 5,
        
        [JsonProperty("GroundBasementPreprocessorUpperWall")]
        GroundBasementPreprocessorUpperWall = 6,
        
        [JsonProperty("GroundFCfactorMethod")]
        GroundFCfactorMethod = 7,
        
        [JsonProperty("GroundSlabPreprocessorAverage")]
        GroundSlabPreprocessorAverage = 8,
        
        [JsonProperty("GroundSlabPreprocessorCore")]
        GroundSlabPreprocessorCore = 9,
        
        [JsonProperty("GroundSlabPreprocessorPerimeter")]
        GroundSlabPreprocessorPerimeter = 10,
        
        [JsonProperty("OtherSideCoefficients")]
        OtherSideCoefficients = 11,
        
        [JsonProperty("OtherSideConditionsModel")]
        OtherSideConditionsModel = 12,
        
        [JsonProperty("Outdoors")]
        Outdoors = 13,
        
        [JsonProperty("Surface")]
        Surface = 14,
        
        [JsonProperty("Zone")]
        Zone = 15,
    }
    
    public enum SunExposureType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("NoSun")]
        NoSun = 1,
        
        [JsonProperty("SunExposed")]
        SunExposed = 2,
    }
    
    public enum WindExposureType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("NoWind")]
        NoWind = 1,
        
        [JsonProperty("WindExposed")]
        WindExposed = 2,
    }
    
    [Description("Allows for detailed entry of wall heat transfer surfaces.")]
    [JsonObject("Wall:Detailed")]
    public class Wall_Detailed
    {
        
[Description(@"To be matched with a construction in this input file")]
[JsonProperty(@"To be matched with a construction in this input file")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Zone the surface is a part of")]
[JsonProperty(@"Zone the surface is a part of")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault OutsideBoundaryCondition { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Non-blank only if the field Outside Boundary Condition is Surface, Zone, OtherSideCoefficients or OtherSideConditionsModel If Surface, specify name of corresponding surface in adjacent zone or specify current surface name for internal partition separating like zones If Zone, specify the name of the corresponding zone and the program will generate the corresponding interzone surface If Foundation, specify the name of the corresponding Foundation object and If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients If OtherSideConditionsModel, specify name of SurfaceProperty:OtherSideConditionsModel")]
[JsonProperty(@"Non-blank only if the field Outside Boundary Condition is Surface, Zone, OtherSideCoefficients or OtherSideConditionsModel If Surface, specify name of corresponding surface in adjacent zone or specify current surface name for internal partition separating like zones If Zone, specify the name of the corresponding zone and the program will generate the corresponding interzone surface If Foundation, specify the name of the corresponding Foundation object and If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients If OtherSideConditionsModel, specify name of SurfaceProperty:OtherSideConditionsModel")]
public System.String OutsideBoundaryConditionObject { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault SunExposure { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SunExposed");
        
[JsonProperty(@"")]
public YesNoDefault WindExposure { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WindExposed");
        
[Description(@"From the exterior of the surface Unused if one uses the "reflections" options in Solar Distribution in Building input unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified. autocalculate will automatically calculate this value from the tilt of the surface")]
[JsonProperty(@"From the exterior of the surface Unused if one uses the "reflections" options in Solar Distribution in Building input unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified. autocalculate will automatically calculate this value from the tilt of the surface")]
public System.String ViewFactorToGround { get; set; } = (System.String)Autocalculate;
        
[Description(@"shown with 10 vertex coordinates -- extensible object "extensible" -- duplicate last set of x,y,z coordinates, renumbering please (and changing z terminator to a comma "," for all but last one which needs a semi-colon ";") vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates are "relative" to the Zone Origin. If world, then building and zone origins are used for some internal calculations, but all coordinates are given in an "absolute" system.")]
[JsonProperty(@"shown with 10 vertex coordinates -- extensible object "extensible" -- duplicate last set of x,y,z coordinates, renumbering please (and changing z terminator to a comma "," for all but last one which needs a semi-colon ";") vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates are "relative" to the Zone Origin. If world, then building and zone origins are used for some internal calculations, but all coordinates are given in an "absolute" system.")]
public System.String NumberOfVertices { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.String Vertices { get; set; } = "";
    }
    
    public enum OutsideBoundaryConditionType
    {
        
        [JsonProperty("Adiabatic")]
        Adiabatic = 0,
        
        [JsonProperty("Foundation")]
        Foundation = 1,
        
        [JsonProperty("Ground")]
        Ground = 2,
        
        [JsonProperty("GroundBasementPreprocessorAverageFloor")]
        GroundBasementPreprocessorAverageFloor = 3,
        
        [JsonProperty("GroundBasementPreprocessorAverageWall")]
        GroundBasementPreprocessorAverageWall = 4,
        
        [JsonProperty("GroundBasementPreprocessorLowerWall")]
        GroundBasementPreprocessorLowerWall = 5,
        
        [JsonProperty("GroundBasementPreprocessorUpperWall")]
        GroundBasementPreprocessorUpperWall = 6,
        
        [JsonProperty("GroundFCfactorMethod")]
        GroundFCfactorMethod = 7,
        
        [JsonProperty("GroundSlabPreprocessorAverage")]
        GroundSlabPreprocessorAverage = 8,
        
        [JsonProperty("GroundSlabPreprocessorCore")]
        GroundSlabPreprocessorCore = 9,
        
        [JsonProperty("GroundSlabPreprocessorPerimeter")]
        GroundSlabPreprocessorPerimeter = 10,
        
        [JsonProperty("OtherSideCoefficients")]
        OtherSideCoefficients = 11,
        
        [JsonProperty("OtherSideConditionsModel")]
        OtherSideConditionsModel = 12,
        
        [JsonProperty("Outdoors")]
        Outdoors = 13,
        
        [JsonProperty("Surface")]
        Surface = 14,
        
        [JsonProperty("Zone")]
        Zone = 15,
    }
    
    public enum SunExposureType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("NoSun")]
        NoSun = 1,
        
        [JsonProperty("SunExposed")]
        SunExposed = 2,
    }
    
    public enum WindExposureType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("NoWind")]
        NoWind = 1,
        
        [JsonProperty("WindExposed")]
        WindExposed = 2,
    }
    
    [Description("Allows for detailed entry of roof/ceiling heat transfer surfaces.")]
    [JsonObject("RoofCeiling:Detailed")]
    public class RoofCeiling_Detailed
    {
        
[Description(@"To be matched with a construction in this input file")]
[JsonProperty(@"To be matched with a construction in this input file")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Zone the surface is a part of")]
[JsonProperty(@"Zone the surface is a part of")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault OutsideBoundaryCondition { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Non-blank only if the field Outside Boundary Condition is Surface, Zone, OtherSideCoefficients or OtherSideConditionsModel If Surface, specify name of corresponding surface in adjacent zone or specify current surface name for internal partition separating like zones If Zone, specify the name of the corresponding zone and the program will generate the corresponding interzone surface If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients If OtherSideConditionsModel, specify name of SurfaceProperty:OtherSideConditionsModel")]
[JsonProperty(@"Non-blank only if the field Outside Boundary Condition is Surface, Zone, OtherSideCoefficients or OtherSideConditionsModel If Surface, specify name of corresponding surface in adjacent zone or specify current surface name for internal partition separating like zones If Zone, specify the name of the corresponding zone and the program will generate the corresponding interzone surface If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients If OtherSideConditionsModel, specify name of SurfaceProperty:OtherSideConditionsModel")]
public System.String OutsideBoundaryConditionObject { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault SunExposure { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SunExposed");
        
[JsonProperty(@"")]
public YesNoDefault WindExposure { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WindExposed");
        
[Description(@"From the exterior of the surface Unused if one uses the "reflections" options in Solar Distribution in Building input unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified. autocalculate will automatically calculate this value from the tilt of the surface")]
[JsonProperty(@"From the exterior of the surface Unused if one uses the "reflections" options in Solar Distribution in Building input unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified. autocalculate will automatically calculate this value from the tilt of the surface")]
public System.String ViewFactorToGround { get; set; } = (System.String)Autocalculate;
        
[Description(@"shown with 10 vertex coordinates -- extensible object "extensible" -- duplicate last set of x,y,z coordinates, renumbering please (and changing z terminator to a comma "," for all but last one which needs a semi-colon ";") vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates are "relative" to the Zone Origin. If world, then building and zone origins are used for some internal calculations, but all coordinates are given in an "absolute" system.")]
[JsonProperty(@"shown with 10 vertex coordinates -- extensible object "extensible" -- duplicate last set of x,y,z coordinates, renumbering please (and changing z terminator to a comma "," for all but last one which needs a semi-colon ";") vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates are "relative" to the Zone Origin. If world, then building and zone origins are used for some internal calculations, but all coordinates are given in an "absolute" system.")]
public System.String NumberOfVertices { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.String Vertices { get; set; } = "";
    }
    
    public enum OutsideBoundaryConditionType
    {
        
        [JsonProperty("Adiabatic")]
        Adiabatic = 0,
        
        [JsonProperty("Ground")]
        Ground = 1,
        
        [JsonProperty("GroundBasementPreprocessorAverageFloor")]
        GroundBasementPreprocessorAverageFloor = 2,
        
        [JsonProperty("GroundBasementPreprocessorAverageWall")]
        GroundBasementPreprocessorAverageWall = 3,
        
        [JsonProperty("GroundBasementPreprocessorLowerWall")]
        GroundBasementPreprocessorLowerWall = 4,
        
        [JsonProperty("GroundBasementPreprocessorUpperWall")]
        GroundBasementPreprocessorUpperWall = 5,
        
        [JsonProperty("GroundSlabPreprocessorAverage")]
        GroundSlabPreprocessorAverage = 6,
        
        [JsonProperty("GroundSlabPreprocessorCore")]
        GroundSlabPreprocessorCore = 7,
        
        [JsonProperty("GroundSlabPreprocessorPerimeter")]
        GroundSlabPreprocessorPerimeter = 8,
        
        [JsonProperty("OtherSideCoefficients")]
        OtherSideCoefficients = 9,
        
        [JsonProperty("OtherSideConditionsModel")]
        OtherSideConditionsModel = 10,
        
        [JsonProperty("Outdoors")]
        Outdoors = 11,
        
        [JsonProperty("Surface")]
        Surface = 12,
        
        [JsonProperty("Zone")]
        Zone = 13,
    }
    
    public enum SunExposureType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("NoSun")]
        NoSun = 1,
        
        [JsonProperty("SunExposed")]
        SunExposed = 2,
    }
    
    public enum WindExposureType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("NoWind")]
        NoWind = 1,
        
        [JsonProperty("WindExposed")]
        WindExposed = 2,
    }
    
    [Description("Allows for detailed entry of floor heat transfer surfaces.")]
    [JsonObject("Floor:Detailed")]
    public class Floor_Detailed
    {
        
[Description(@"To be matched with a construction in this input file")]
[JsonProperty(@"To be matched with a construction in this input file")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Zone the surface is a part of")]
[JsonProperty(@"Zone the surface is a part of")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault OutsideBoundaryCondition { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Non-blank only if the field Outside Boundary Condition is Surface, Zone, OtherSideCoefficients or OtherSideConditionsModel If Surface, specify name of corresponding surface in adjacent zone or specify current surface name for internal partition separating like zones If Zone, specify the name of the corresponding zone and the program will generate the corresponding interzone surface If Foundation, specify the name of the corresponding Foundation object and If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients If OtherSideConditionsModel, specify name of SurfaceProperty:OtherSideConditionsModel")]
[JsonProperty(@"Non-blank only if the field Outside Boundary Condition is Surface, Zone, OtherSideCoefficients or OtherSideConditionsModel If Surface, specify name of corresponding surface in adjacent zone or specify current surface name for internal partition separating like zones If Zone, specify the name of the corresponding zone and the program will generate the corresponding interzone surface If Foundation, specify the name of the corresponding Foundation object and If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients If OtherSideConditionsModel, specify name of SurfaceProperty:OtherSideConditionsModel")]
public System.String OutsideBoundaryConditionObject { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault SunExposure { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SunExposed");
        
[JsonProperty(@"")]
public YesNoDefault WindExposure { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WindExposed");
        
[Description(@"From the exterior of the surface Unused if one uses the "reflections" options in Solar Distribution in Building input unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified. autocalculate will automatically calculate this value from the tilt of the surface")]
[JsonProperty(@"From the exterior of the surface Unused if one uses the "reflections" options in Solar Distribution in Building input unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified. autocalculate will automatically calculate this value from the tilt of the surface")]
public System.String ViewFactorToGround { get; set; } = (System.String)Autocalculate;
        
[Description(@"shown with 10 vertex coordinates -- extensible object "extensible" -- duplicate last set of x,y,z coordinates, renumbering please (and changing z terminator to a comma "," for all but last one which needs a semi-colon ";") vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates are "relative" to the Zone Origin. If world, then building and zone origins are used for some internal calculations, but all coordinates are given in an "absolute" system.")]
[JsonProperty(@"shown with 10 vertex coordinates -- extensible object "extensible" -- duplicate last set of x,y,z coordinates, renumbering please (and changing z terminator to a comma "," for all but last one which needs a semi-colon ";") vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates are "relative" to the Zone Origin. If world, then building and zone origins are used for some internal calculations, but all coordinates are given in an "absolute" system.")]
public System.String NumberOfVertices { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.String Vertices { get; set; } = "";
    }
    
    public enum OutsideBoundaryConditionType
    {
        
        [JsonProperty("Adiabatic")]
        Adiabatic = 0,
        
        [JsonProperty("Foundation")]
        Foundation = 1,
        
        [JsonProperty("Ground")]
        Ground = 2,
        
        [JsonProperty("GroundBasementPreprocessorAverageFloor")]
        GroundBasementPreprocessorAverageFloor = 3,
        
        [JsonProperty("GroundBasementPreprocessorAverageWall")]
        GroundBasementPreprocessorAverageWall = 4,
        
        [JsonProperty("GroundBasementPreprocessorLowerWall")]
        GroundBasementPreprocessorLowerWall = 5,
        
        [JsonProperty("GroundBasementPreprocessorUpperWall")]
        GroundBasementPreprocessorUpperWall = 6,
        
        [JsonProperty("GroundFCfactorMethod")]
        GroundFCfactorMethod = 7,
        
        [JsonProperty("GroundSlabPreprocessorAverage")]
        GroundSlabPreprocessorAverage = 8,
        
        [JsonProperty("GroundSlabPreprocessorCore")]
        GroundSlabPreprocessorCore = 9,
        
        [JsonProperty("GroundSlabPreprocessorPerimeter")]
        GroundSlabPreprocessorPerimeter = 10,
        
        [JsonProperty("OtherSideCoefficients")]
        OtherSideCoefficients = 11,
        
        [JsonProperty("OtherSideConditionsModel")]
        OtherSideConditionsModel = 12,
        
        [JsonProperty("Outdoors")]
        Outdoors = 13,
        
        [JsonProperty("Surface")]
        Surface = 14,
        
        [JsonProperty("Zone")]
        Zone = 15,
    }
    
    public enum SunExposureType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("NoSun")]
        NoSun = 1,
        
        [JsonProperty("SunExposed")]
        SunExposed = 2,
    }
    
    public enum WindExposureType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("NoWind")]
        NoWind = 1,
        
        [JsonProperty("WindExposed")]
        WindExposed = 2,
    }
    
    [Description("Allows for simplified entry of exterior walls. View Factor to Ground is automatic" +
        "ally calculated.")]
    [JsonObject("Wall:Exterior")]
    public class Wall_Exterior
    {
        
[Description(@"To be matched with a construction in this input file")]
[JsonProperty(@"To be matched with a construction in this input file")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Zone the surface is a part of")]
[JsonProperty(@"Zone the surface is a part of")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Facing direction of outside of wall (S=180,N=0,E=90,W=270)")]
[JsonProperty(@"Facing direction of outside of wall (S=180,N=0,E=90,W=270)")]
public System.Single AzimuthAngle { get; set; } = ;
        
[Description(@"Walls are usually tilted 90 degrees")]
[JsonProperty(@"Walls are usually tilted 90 degrees")]
public System.Single TiltAngle { get; set; } = 90;
        
[Description(@"Starting (x,y,z) coordinate is the Lower Left Corner of the Wall")]
[JsonProperty(@"Starting (x,y,z) coordinate is the Lower Left Corner of the Wall")]
public System.Single StartingXCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingYCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingZCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Length { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Height { get; set; } = ;
    }
    
    [Description("Allows for simplified entry of interior walls.")]
    [JsonObject("Wall:Adiabatic")]
    public class Wall_Adiabatic
    {
        
[Description(@"To be matched with a construction in this input file")]
[JsonProperty(@"To be matched with a construction in this input file")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Zone the surface is a part of")]
[JsonProperty(@"Zone the surface is a part of")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Facing direction of outside of wall (S=180,N=0,E=90,W=270)")]
[JsonProperty(@"Facing direction of outside of wall (S=180,N=0,E=90,W=270)")]
public System.Single AzimuthAngle { get; set; } = ;
        
[Description(@"Walls are usually tilted 90 degrees")]
[JsonProperty(@"Walls are usually tilted 90 degrees")]
public System.Single TiltAngle { get; set; } = 90;
        
[Description(@"Starting (x,y,z) coordinate is the Lower Left Corner of the Wall")]
[JsonProperty(@"Starting (x,y,z) coordinate is the Lower Left Corner of the Wall")]
public System.Single StartingXCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingYCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingZCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Length { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Height { get; set; } = ;
    }
    
    [Description("Allows for simplified entry of underground walls.")]
    [JsonObject("Wall:Underground")]
    public class Wall_Underground
    {
        
[Description(@"To be matched with a construction in this input file. If the construction is type "Construction:CfactorUndergroundWall", then the GroundFCfactorMethod will be used.")]
[JsonProperty(@"To be matched with a construction in this input file. If the construction is type "Construction:CfactorUndergroundWall", then the GroundFCfactorMethod will be used.")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Zone the surface is a part of")]
[JsonProperty(@"Zone the surface is a part of")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Facing direction of outside of wall (S=180,N=0,E=90,W=270)")]
[JsonProperty(@"Facing direction of outside of wall (S=180,N=0,E=90,W=270)")]
public System.Single AzimuthAngle { get; set; } = ;
        
[Description(@"Walls are usually tilted 90 degrees")]
[JsonProperty(@"Walls are usually tilted 90 degrees")]
public System.Single TiltAngle { get; set; } = 90;
        
[Description(@"Starting (x,y,z) coordinate is the Lower Left Corner of the Wall")]
[JsonProperty(@"Starting (x,y,z) coordinate is the Lower Left Corner of the Wall")]
public System.Single StartingXCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingYCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingZCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Length { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Height { get; set; } = ;
    }
    
    [Description("Allows for simplified entry of interzone walls (walls between zones).")]
    [JsonObject("Wall:Interzone")]
    public class Wall_Interzone
    {
        
[Description(@"To be matched with a construction in this input file")]
[JsonProperty(@"To be matched with a construction in this input file")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Zone for the inside of the surface")]
[JsonProperty(@"Zone for the inside of the surface")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Specify a surface name in an adjacent zone for known interior walls. Specify a zone name of an adjacent zone to automatically generate the interior wall in the adjacent zone.")]
[JsonProperty(@"Specify a surface name in an adjacent zone for known interior walls. Specify a zone name of an adjacent zone to automatically generate the interior wall in the adjacent zone.")]
public System.String OutsideBoundaryConditionObject { get; set; } = "";
        
[Description(@"Facing direction of outside of wall (S=180,N=0,E=90,W=270)")]
[JsonProperty(@"Facing direction of outside of wall (S=180,N=0,E=90,W=270)")]
public System.Single AzimuthAngle { get; set; } = ;
        
[Description(@"Walls are usually tilted 90 degrees")]
[JsonProperty(@"Walls are usually tilted 90 degrees")]
public System.Single TiltAngle { get; set; } = 90;
        
[Description(@"Starting (x,y,z) coordinate is the Lower Left Corner of the Wall")]
[JsonProperty(@"Starting (x,y,z) coordinate is the Lower Left Corner of the Wall")]
public System.Single StartingXCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingYCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingZCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Length { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Height { get; set; } = ;
    }
    
    [Description("Allows for simplified entry of roofs (exterior). View Factor to Ground is automat" +
        "ically calculated.")]
    [JsonObject("Roof")]
    public class Roof
    {
        
[Description(@"To be matched with a construction in this input file")]
[JsonProperty(@"To be matched with a construction in this input file")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Zone the surface is a part of")]
[JsonProperty(@"Zone the surface is a part of")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Facing direction of outside of Roof")]
[JsonProperty(@"Facing direction of outside of Roof")]
public System.Single AzimuthAngle { get; set; } = ;
        
[Description(@"Flat Roofs are tilted 0 degrees")]
[JsonProperty(@"Flat Roofs are tilted 0 degrees")]
public System.Single TiltAngle { get; set; } = 0;
        
[Description(@"If not Flat, Starting coordinate is the Lower Left Corner of the Roof")]
[JsonProperty(@"If not Flat, Starting coordinate is the Lower Left Corner of the Roof")]
public System.Single StartingXCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingYCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingZCoordinate { get; set; } = ;
        
[Description(@"Along X Axis")]
[JsonProperty(@"Along X Axis")]
public System.Single Length { get; set; } = ;
        
[Description(@"Along Y Axis")]
[JsonProperty(@"Along Y Axis")]
public System.Single Width { get; set; } = ;
    }
    
    [Description("Allows for simplified entry of interior ceilings.")]
    [JsonObject("Ceiling:Adiabatic")]
    public class Ceiling_Adiabatic
    {
        
[Description(@"To be matched with a construction in this input file")]
[JsonProperty(@"To be matched with a construction in this input file")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Zone the surface is a part of")]
[JsonProperty(@"Zone the surface is a part of")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Facing direction of outside of Ceiling")]
[JsonProperty(@"Facing direction of outside of Ceiling")]
public System.Single AzimuthAngle { get; set; } = ;
        
[Description(@"Ceilings are usually tilted 0 degrees")]
[JsonProperty(@"Ceilings are usually tilted 0 degrees")]
public System.Single TiltAngle { get; set; } = 0;
        
[Description(@"If not Flat, Starting coordinate is the Lower Left Corner of the Ceiling")]
[JsonProperty(@"If not Flat, Starting coordinate is the Lower Left Corner of the Ceiling")]
public System.Single StartingXCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingYCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingZCoordinate { get; set; } = ;
        
[Description(@"Along X Axis")]
[JsonProperty(@"Along X Axis")]
public System.Single Length { get; set; } = ;
        
[Description(@"Along Y Axis")]
[JsonProperty(@"Along Y Axis")]
public System.Single Width { get; set; } = ;
    }
    
    [Description("Allows for simplified entry of ceilings using adjacent zone (interzone) heat tran" +
        "sfer - adjacent surface should be a floor")]
    [JsonObject("Ceiling:Interzone")]
    public class Ceiling_Interzone
    {
        
[Description(@"To be matched with a construction in this input file")]
[JsonProperty(@"To be matched with a construction in this input file")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Zone for the inside of the surface")]
[JsonProperty(@"Zone for the inside of the surface")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Specify a surface name in an adjacent zone for known interior floors Specify a zone name of an adjacent zone to automatically generate the interior floor in the adjacent zone.")]
[JsonProperty(@"Specify a surface name in an adjacent zone for known interior floors Specify a zone name of an adjacent zone to automatically generate the interior floor in the adjacent zone.")]
public System.String OutsideBoundaryConditionObject { get; set; } = "";
        
[Description(@"Facing direction of outside of wall (S=180,N=0,E=90,W=270)")]
[JsonProperty(@"Facing direction of outside of wall (S=180,N=0,E=90,W=270)")]
public System.Single AzimuthAngle { get; set; } = ;
        
[Description(@"Ceilings are usually tilted 0 degrees")]
[JsonProperty(@"Ceilings are usually tilted 0 degrees")]
public System.Single TiltAngle { get; set; } = 0;
        
[Description(@"If not Flat, should be Lower Left Corner (from outside)")]
[JsonProperty(@"If not Flat, should be Lower Left Corner (from outside)")]
public System.Single StartingXCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingYCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingZCoordinate { get; set; } = ;
        
[Description(@"Along X Axis")]
[JsonProperty(@"Along X Axis")]
public System.Single Length { get; set; } = ;
        
[Description(@"Along Y Axis")]
[JsonProperty(@"Along Y Axis")]
public System.Single Width { get; set; } = ;
    }
    
    [Description("Allows for simplified entry of exterior floors with ground contact. View Factors " +
        "to Ground is automatically calculated.")]
    [JsonObject("Floor:GroundContact")]
    public class Floor_GroundContact
    {
        
[Description(@"To be matched with a construction in this input file If the construction is type "Construction:FfactorGroundFloor", then the GroundFCfactorMethod will be used.")]
[JsonProperty(@"To be matched with a construction in this input file If the construction is type "Construction:FfactorGroundFloor", then the GroundFCfactorMethod will be used.")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Zone the surface is a part of")]
[JsonProperty(@"Zone the surface is a part of")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AzimuthAngle { get; set; } = ;
        
[Description(@"Floors are usually tilted 180 degrees")]
[JsonProperty(@"Floors are usually tilted 180 degrees")]
public System.Single TiltAngle { get; set; } = 180;
        
[Description(@"if not flat, should be lower left corner (from outside)")]
[JsonProperty(@"if not flat, should be lower left corner (from outside)")]
public System.Single StartingXCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingYCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingZCoordinate { get; set; } = ;
        
[Description(@"Along X Axis")]
[JsonProperty(@"Along X Axis")]
public System.Single Length { get; set; } = ;
        
[Description(@"Along Y Axis")]
[JsonProperty(@"Along Y Axis")]
public System.Single Width { get; set; } = ;
    }
    
    [Description("Allows for simplified entry of exterior floors ignoring ground contact or interio" +
        "r floors. View Factor to Ground is automatically calculated.")]
    [JsonObject("Floor:Adiabatic")]
    public class Floor_Adiabatic
    {
        
[Description(@"To be matched with a construction in this input file")]
[JsonProperty(@"To be matched with a construction in this input file")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Zone the surface is a part of")]
[JsonProperty(@"Zone the surface is a part of")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AzimuthAngle { get; set; } = ;
        
[Description(@"Floors are usually tilted 180 degrees")]
[JsonProperty(@"Floors are usually tilted 180 degrees")]
public System.Single TiltAngle { get; set; } = 180;
        
[Description(@"if not flat, should be lower left corner (from outside)")]
[JsonProperty(@"if not flat, should be lower left corner (from outside)")]
public System.Single StartingXCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingYCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingZCoordinate { get; set; } = ;
        
[Description(@"Along X Axis")]
[JsonProperty(@"Along X Axis")]
public System.Single Length { get; set; } = ;
        
[Description(@"Along Y Axis")]
[JsonProperty(@"Along Y Axis")]
public System.Single Width { get; set; } = ;
    }
    
    [Description("Allows for simplified entry of floors using adjacent zone (interzone) heat transf" +
        "er - adjacent surface should be a ceiling.")]
    [JsonObject("Floor:Interzone")]
    public class Floor_Interzone
    {
        
[Description(@"To be matched with a construction in this input file")]
[JsonProperty(@"To be matched with a construction in this input file")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Zone for the inside of the surface")]
[JsonProperty(@"Zone for the inside of the surface")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Specify a surface name in an adjacent zone for known interior ceilings. Specify a zone name of an adjacent zone to automatically generate the interior ceiling in the adjacent zone.")]
[JsonProperty(@"Specify a surface name in an adjacent zone for known interior ceilings. Specify a zone name of an adjacent zone to automatically generate the interior ceiling in the adjacent zone.")]
public System.String OutsideBoundaryConditionObject { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single AzimuthAngle { get; set; } = ;
        
[Description(@"Floors are usually tilted 180 degrees")]
[JsonProperty(@"Floors are usually tilted 180 degrees")]
public System.Single TiltAngle { get; set; } = 180;
        
[Description(@"If not Flat, should be Lower Left Corner (from outside)")]
[JsonProperty(@"If not Flat, should be Lower Left Corner (from outside)")]
public System.Single StartingXCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingYCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingZCoordinate { get; set; } = ;
        
[Description(@"Along X Axis")]
[JsonProperty(@"Along X Axis")]
public System.Single Length { get; set; } = ;
        
[Description(@"Along Y Axis")]
[JsonProperty(@"Along Y Axis")]
public System.Single Width { get; set; } = ;
    }
    
    [Description("Allows for detailed entry of subsurfaces (windows, doors, glass doors, tubular da" +
        "ylighting devices).")]
    [JsonObject("FenestrationSurface:Detailed")]
    public class FenestrationSurface_Detailed
    {
        
[JsonProperty(@"")]
public YesNoDefault SurfaceType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"To be matched with a construction in this input file")]
[JsonProperty(@"To be matched with a construction in this input file")]
public System.String ConstructionName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String BuildingSurfaceName { get; set; } = "";
        
[Description(@"Non-blank only if base surface field Outside Boundary Condition is Surface or OtherSideCoefficients If Base Surface's Surface, specify name of corresponding subsurface in adjacent zone or specify current subsurface name for internal partition separating like zones If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients or leave blank to inherit Base Surface's OtherSide Coefficients")]
[JsonProperty(@"Non-blank only if base surface field Outside Boundary Condition is Surface or OtherSideCoefficients If Base Surface's Surface, specify name of corresponding subsurface in adjacent zone or specify current subsurface name for internal partition separating like zones If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients or leave blank to inherit Base Surface's OtherSide Coefficients")]
public System.String OutsideBoundaryConditionObject { get; set; } = "";
        
[Description(@"From the exterior of the surface Unused if one uses the "reflections" options in Solar Distribution in Building input unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified. autocalculate will automatically calculate this value from the tilt of the surface")]
[JsonProperty(@"From the exterior of the surface Unused if one uses the "reflections" options in Solar Distribution in Building input unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified. autocalculate will automatically calculate this value from the tilt of the surface")]
public System.String ViewFactorToGround { get; set; } = (System.String)Autocalculate;
        
[Description(@"Enter the name of a WindowProperty:FrameAndDivider object Used only for exterior windows (rectangular) and glass doors. Unused for triangular windows. If not specified (blank), window or glass door has no frame or divider and no beam solar reflection from reveal surfaces.")]
[JsonProperty(@"Enter the name of a WindowProperty:FrameAndDivider object Used only for exterior windows (rectangular) and glass doors. Unused for triangular windows. If not specified (blank), window or glass door has no frame or divider and no beam solar reflection from reveal surfaces.")]
public System.String FrameAndDividerName { get; set; } = "";
        
[Description(@"Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be truncated to integer")]
[JsonProperty(@"Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be truncated to integer")]
public System.Single Multiplier { get; set; } = 1;
        
[Description(@"vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates are "relative" to the Zone Origin. If world, then building and zone origins are used for some internal calculations, but all coordinates are given in an "absolute" system.")]
[JsonProperty(@"vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates are "relative" to the Zone Origin. If world, then building and zone origins are used for some internal calculations, but all coordinates are given in an "absolute" system.")]
public System.String NumberOfVertices { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.Single VertexXCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single VertexYCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single VertexZCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single VertexXCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single VertexYCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single VertexZCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single VertexXCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single VertexYCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single VertexZCoordinate { get; set; } = ;
        
[Description(@"Not used for triangles")]
[JsonProperty(@"Not used for triangles")]
public System.Single VertexXCoordinate { get; set; } = ;
        
[Description(@"Not used for triangles")]
[JsonProperty(@"Not used for triangles")]
public System.Single VertexYCoordinate { get; set; } = ;
        
[Description(@"Not used for triangles")]
[JsonProperty(@"Not used for triangles")]
public System.Single VertexZCoordinate { get; set; } = ;
    }
    
    public enum SurfaceTypeType
    {
        
        [JsonProperty("Door")]
        Door = 0,
        
        [JsonProperty("GlassDoor")]
        GlassDoor = 1,
        
        [JsonProperty("TubularDaylightDiffuser")]
        TubularDaylightDiffuser = 2,
        
        [JsonProperty("TubularDaylightDome")]
        TubularDaylightDome = 3,
        
        [JsonProperty("Window")]
        Window = 4,
    }
    
    [Description("Allows for simplified entry of Windows.")]
    [JsonObject("Window")]
    public class Window
    {
        
[Description(@"To be matched with a construction in this input file")]
[JsonProperty(@"To be matched with a construction in this input file")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Name of Surface (Wall, usually) the Window is on (i.e., Base Surface) Window assumes the azimuth and tilt angles of the surface it is on.")]
[JsonProperty(@"Name of Surface (Wall, usually) the Window is on (i.e., Base Surface) Window assumes the azimuth and tilt angles of the surface it is on.")]
public System.String BuildingSurfaceName { get; set; } = "";
        
[Description(@"Enter the name of a WindowProperty:FrameAndDivider object Used only for exterior windows (rectangular) and glass doors. Unused for triangular windows. If not specified (blank), window or glass door has no frame or divider and no beam solar reflection from reveal surfaces.")]
[JsonProperty(@"Enter the name of a WindowProperty:FrameAndDivider object Used only for exterior windows (rectangular) and glass doors. Unused for triangular windows. If not specified (blank), window or glass door has no frame or divider and no beam solar reflection from reveal surfaces.")]
public System.String FrameAndDividerName { get; set; } = "";
        
[Description(@"Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be truncated to integer")]
[JsonProperty(@"Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be truncated to integer")]
public System.Single Multiplier { get; set; } = 1;
        
[Description(@"Window starting coordinate is specified relative to the Base Surface origin.")]
[JsonProperty(@"Window starting coordinate is specified relative to the Base Surface origin.")]
public System.Single StartingXCoordinate { get; set; } = ;
        
[Description(@"How far up the wall the Window starts. (in 2-d, this would be a Y Coordinate)")]
[JsonProperty(@"How far up the wall the Window starts. (in 2-d, this would be a Y Coordinate)")]
public System.Single StartingZCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Length { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Height { get; set; } = ;
    }
    
    [Description("Allows for simplified entry of opaque Doors.")]
    [JsonObject("Door")]
    public class Door
    {
        
[Description(@"To be matched with a construction in this input file")]
[JsonProperty(@"To be matched with a construction in this input file")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Name of Surface (Wall, usually) the Door is on (i.e., Base Surface) Door assumes the azimuth and tilt angles of the surface it is on.")]
[JsonProperty(@"Name of Surface (Wall, usually) the Door is on (i.e., Base Surface) Door assumes the azimuth and tilt angles of the surface it is on.")]
public System.String BuildingSurfaceName { get; set; } = "";
        
[Description(@"Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be truncated to integer")]
[JsonProperty(@"Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be truncated to integer")]
public System.Single Multiplier { get; set; } = 1;
        
[Description(@"Door starting coordinate is specified relative to the Base Surface origin.")]
[JsonProperty(@"Door starting coordinate is specified relative to the Base Surface origin.")]
public System.Single StartingXCoordinate { get; set; } = ;
        
[Description(@"How far up the wall the Door starts. (in 2-d, this would be a Y Coordinate)")]
[JsonProperty(@"How far up the wall the Door starts. (in 2-d, this would be a Y Coordinate)")]
public System.Single StartingZCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Length { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Height { get; set; } = ;
    }
    
    [Description("Allows for simplified entry of glass Doors.")]
    [JsonObject("GlazedDoor")]
    public class GlazedDoor
    {
        
[Description(@"To be matched with a construction in this input file")]
[JsonProperty(@"To be matched with a construction in this input file")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Name of Surface (Wall, usually) the Door is on (i.e., Base Surface) Door assumes the azimuth and tilt angles of the surface it is on.")]
[JsonProperty(@"Name of Surface (Wall, usually) the Door is on (i.e., Base Surface) Door assumes the azimuth and tilt angles of the surface it is on.")]
public System.String BuildingSurfaceName { get; set; } = "";
        
[Description(@"Enter the name of a WindowProperty:FrameAndDivider object Used only for exterior windows (rectangular) and glass doors. Unused for triangular windows. If not specified (blank), window or glass door has no frame or divider and no beam solar reflection from reveal surfaces.")]
[JsonProperty(@"Enter the name of a WindowProperty:FrameAndDivider object Used only for exterior windows (rectangular) and glass doors. Unused for triangular windows. If not specified (blank), window or glass door has no frame or divider and no beam solar reflection from reveal surfaces.")]
public System.String FrameAndDividerName { get; set; } = "";
        
[Description(@"Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be truncated to integer")]
[JsonProperty(@"Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be truncated to integer")]
public System.Single Multiplier { get; set; } = 1;
        
[Description(@"Door starting coordinate is specified relative to the Base Surface origin.")]
[JsonProperty(@"Door starting coordinate is specified relative to the Base Surface origin.")]
public System.Single StartingXCoordinate { get; set; } = ;
        
[Description(@"How far up the wall the Door starts. (in 2-d, this would be a Y Coordinate)")]
[JsonProperty(@"How far up the wall the Door starts. (in 2-d, this would be a Y Coordinate)")]
public System.Single StartingZCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Length { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Height { get; set; } = ;
    }
    
    [Description("Allows for simplified entry of interzone windows (adjacent to other zones).")]
    [JsonObject("Window:Interzone")]
    public class Window_Interzone
    {
        
[Description(@"To be matched with a construction in this input file")]
[JsonProperty(@"To be matched with a construction in this input file")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Name of Surface (Wall, usually) the Window is on (i.e., Base Surface) Window assumes the azimuth and tilt angles of the surface it is on.")]
[JsonProperty(@"Name of Surface (Wall, usually) the Window is on (i.e., Base Surface) Window assumes the azimuth and tilt angles of the surface it is on.")]
public System.String BuildingSurfaceName { get; set; } = "";
        
[Description(@"Specify a surface name in an adjacent zone for known interior windows. Specify a zone name of an adjacent zone to automatically generate the interior window in the adjacent zone. a blank field will set up a Window in an adjacent zone (same zone as adjacent to base surface)")]
[JsonProperty(@"Specify a surface name in an adjacent zone for known interior windows. Specify a zone name of an adjacent zone to automatically generate the interior window in the adjacent zone. a blank field will set up a Window in an adjacent zone (same zone as adjacent to base surface)")]
public System.String OutsideBoundaryConditionObject { get; set; } = "";
        
[Description(@"Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be truncated to integer")]
[JsonProperty(@"Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be truncated to integer")]
public System.Single Multiplier { get; set; } = 1;
        
[Description(@"Window starting coordinate is specified relative to the Base Surface origin.")]
[JsonProperty(@"Window starting coordinate is specified relative to the Base Surface origin.")]
public System.Single StartingXCoordinate { get; set; } = ;
        
[Description(@"How far up the wall the Window starts. (in 2-d, this would be a Y Coordinate)")]
[JsonProperty(@"How far up the wall the Window starts. (in 2-d, this would be a Y Coordinate)")]
public System.Single StartingZCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Length { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Height { get; set; } = ;
    }
    
    [Description("Allows for simplified entry of interzone (opaque interior) doors (adjacent to oth" +
        "er zones).")]
    [JsonObject("Door:Interzone")]
    public class Door_Interzone
    {
        
[Description(@"To be matched with a construction in this input file")]
[JsonProperty(@"To be matched with a construction in this input file")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Name of Surface (Wall, usually) the Door is on (i.e., Base Surface) Door assumes the azimuth and tilt angles of the surface it is on.")]
[JsonProperty(@"Name of Surface (Wall, usually) the Door is on (i.e., Base Surface) Door assumes the azimuth and tilt angles of the surface it is on.")]
public System.String BuildingSurfaceName { get; set; } = "";
        
[Description(@"Specify a surface name in an adjacent zone for known interior doors. Specify a zone name of an adjacent zone to automatically generate the interior door in the adjacent zone. a blank field will set up a Window in an adjacent zone (same zone as adjacent to base surface)")]
[JsonProperty(@"Specify a surface name in an adjacent zone for known interior doors. Specify a zone name of an adjacent zone to automatically generate the interior door in the adjacent zone. a blank field will set up a Window in an adjacent zone (same zone as adjacent to base surface)")]
public System.String OutsideBoundaryConditionObject { get; set; } = "";
        
[Description(@"Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be truncated to integer")]
[JsonProperty(@"Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be truncated to integer")]
public System.Single Multiplier { get; set; } = 1;
        
[Description(@"Door starting coordinate is specified relative to the Base Surface origin.")]
[JsonProperty(@"Door starting coordinate is specified relative to the Base Surface origin.")]
public System.Single StartingXCoordinate { get; set; } = ;
        
[Description(@"How far up the wall the Door starts. (in 2-d, this would be a Y Coordinate)")]
[JsonProperty(@"How far up the wall the Door starts. (in 2-d, this would be a Y Coordinate)")]
public System.Single StartingZCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Length { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Height { get; set; } = ;
    }
    
    [Description("Allows for simplified entry of interzone (glass interior) doors (adjacent to othe" +
        "r zones).")]
    [JsonObject("GlazedDoor:Interzone")]
    public class GlazedDoor_Interzone
    {
        
[Description(@"To be matched with a construction in this input file")]
[JsonProperty(@"To be matched with a construction in this input file")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Name of Surface (Wall, usually) the Door is on (i.e., Base Surface) Door assumes the azimuth and tilt angles of the surface it is on.")]
[JsonProperty(@"Name of Surface (Wall, usually) the Door is on (i.e., Base Surface) Door assumes the azimuth and tilt angles of the surface it is on.")]
public System.String BuildingSurfaceName { get; set; } = "";
        
[Description(@"Specify a surface name in an adjacent zone for known interior doors. Specify a zone name of an adjacent zone to automatically generate the interior door in the adjacent zone. a blank field will set up a Window in an adjacent zone (same zone as adjacent to base surface)")]
[JsonProperty(@"Specify a surface name in an adjacent zone for known interior doors. Specify a zone name of an adjacent zone to automatically generate the interior door in the adjacent zone. a blank field will set up a Window in an adjacent zone (same zone as adjacent to base surface)")]
public System.String OutsideBoundaryConditionObject { get; set; } = "";
        
[Description(@"Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be truncated to integer")]
[JsonProperty(@"Used only for Surface Type = WINDOW, GLASSDOOR or DOOR Non-integer values will be truncated to integer")]
public System.Single Multiplier { get; set; } = 1;
        
[Description(@"Door starting coordinate is specified relative to the Base Surface origin.")]
[JsonProperty(@"Door starting coordinate is specified relative to the Base Surface origin.")]
public System.Single StartingXCoordinate { get; set; } = ;
        
[Description(@"How far up the wall the Door starts. (in 2-d, this would be a Y Coordinate)")]
[JsonProperty(@"How far up the wall the Door starts. (in 2-d, this would be a Y Coordinate)")]
public System.Single StartingZCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Length { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Height { get; set; } = ;
    }
    
    [Description("Specifies the type, location, and controls for window shades, window blinds, and " +
        "switchable glazing. Referencing the surface objects for exterior windows and gla" +
        "ss doors (ref: FenestrationSurface:Detailed, Window, and GlazedDoor).")]
    [JsonObject("WindowShadingControl")]
    public class WindowShadingControl
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"If multiple WindowShadingControl objects are used than the order that they deploy the window shades can be set with this field. The first WindowShadingControl should be 1 and subsequent WindowShadingControl should 2 or 3 or higher. This is usually used when the Multiple Surface Control Type field is set to Group and groups of windows are being controlled in a certain order.")]
[JsonProperty(@"If multiple WindowShadingControl objects are used than the order that they deploy the window shades can be set with this field. The first WindowShadingControl should be 1 and subsequent WindowShadingControl should 2 or 3 or higher. This is usually used when the Multiple Surface Control Type field is set to Group and groups of windows are being controlled in a certain order.")]
public System.Single ShadingControlSequenceNumber { get; set; } = 1;
        
[JsonProperty(@"")]
public YesNoDefault ShadingType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Required if Shading Type = SwitchableGlazing Required if Shading Type = interior or exterior shade or blind, or exterior screen, and "Shading Device Material Name" is not specified. If both "Construction with Shading Name" and "Shading Device Material Name" are entered, the former takes precedence.")]
[JsonProperty(@"Required if Shading Type = SwitchableGlazing Required if Shading Type = interior or exterior shade or blind, or exterior screen, and "Shading Device Material Name" is not specified. If both "Construction with Shading Name" and "Shading Device Material Name" are entered, the former takes precedence.")]
public System.String ConstructionWithShadingName { get; set; } = "";
        
[Description(@"OnIfScheduleAllows requires that Schedule Name be specified and Shading Control Is Scheduled = Yes. AlwaysOn, AlwaysOff and OnIfScheduleAllows are the only valid control types for ExteriorScreen. The following six control types are used primarily to reduce zone cooling load due to window solar gain Following entry should be used only if Shading Type = SwitchableGlazing and window is in a daylit zone The following three control types are used to reduce zone Heating load. They can be used with any Shading Type but are most appropriate for opaque interior or exterior shades with high insulating value ("opaque movable insulation") The following two control types are used to reduce zone heating and cooling load. They can be used with any Shading Type but are most appropriate for translucent interior or exterior shades with high insulating value ("translucent movable insulation") The following two control types are used to reduce zone Cooling load. They can be used with any Shading Type but are most appropriate for interior or exterior blinds,interior or exterior shades with low insulating value, or switchable glazing The following four control types require that both Setpoint and Setpoint2 be specified Setpoint will correspond to outdoor air temp or zone air temp (deg C) Setpoint2 will correspond to solar on window or horizontal solar (W/m2)")]
[JsonProperty(@"OnIfScheduleAllows requires that Schedule Name be specified and Shading Control Is Scheduled = Yes. AlwaysOn, AlwaysOff and OnIfScheduleAllows are the only valid control types for ExteriorScreen. The following six control types are used primarily to reduce zone cooling load due to window solar gain Following entry should be used only if Shading Type = SwitchableGlazing and window is in a daylit zone The following three control types are used to reduce zone Heating load. They can be used with any Shading Type but are most appropriate for opaque interior or exterior shades with high insulating value ("opaque movable insulation") The following two control types are used to reduce zone heating and cooling load. They can be used with any Shading Type but are most appropriate for translucent interior or exterior shades with high insulating value ("translucent movable insulation") The following two control types are used to reduce zone Cooling load. They can be used with any Shading Type but are most appropriate for interior or exterior blinds,interior or exterior shades with low insulating value, or switchable glazing The following four control types require that both Setpoint and Setpoint2 be specified Setpoint will correspond to outdoor air temp or zone air temp (deg C) Setpoint2 will correspond to solar on window or horizontal solar (W/m2)")]
public YesNoDefault ShadingControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Required if Shading Control Is Scheduled = Yes. If schedule value = 1, shading control is active, i.e., shading can take place only if the control test passes. If schedule value = 0, shading is off whether or not the control test passes. Schedule Name is required if Shading Control Is Scheduled = Yes. If Schedule Name is not specified, shading control is assumed to be active at all times.")]
[JsonProperty(@"Required if Shading Control Is Scheduled = Yes. If schedule value = 1, shading control is active, i.e., shading can take place only if the control test passes. If schedule value = 0, shading is off whether or not the control test passes. Schedule Name is required if Shading Control Is Scheduled = Yes. If Schedule Name is not specified, shading control is assumed to be active at all times.")]
public System.String ScheduleName { get; set; } = "";
        
[Description(@"W/m2 for solar-based controls, W for cooling- or heating-based controls, deg C for temperature-based controls. Unused for Shading Control Type = AlwaysOn, AlwaysOff, OnIfScheduleAllows, OnIfHighGlare, Glare, and DaylightIlluminance")]
[JsonProperty(@"W/m2 for solar-based controls, W for cooling- or heating-based controls, deg C for temperature-based controls. Unused for Shading Control Type = AlwaysOn, AlwaysOff, OnIfScheduleAllows, OnIfHighGlare, Glare, and DaylightIlluminance")]
public System.Single Setpoint { get; set; } = ;
        
[Description(@"If Yes, Schedule Name is required; if No, Schedule Name is not used. Shading Control Is Scheduled = Yes is required if Shading Control Type = OnIfScheduleAllows.")]
[JsonProperty(@"If Yes, Schedule Name is required; if No, Schedule Name is not used. Shading Control Is Scheduled = Yes is required if Shading Control Type = OnIfScheduleAllows.")]
public YesNoDefault ShadingControlIsScheduled { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"If Yes and window is in a daylit zone, shading is on if zone's discomfort glare index exceeds the maximum discomfort glare index specified in the Daylighting object referenced by the zone. The glare test is OR'ed with the test specified by Shading Control Type. Glare Control Is Active = Yes is required if Shading Control Type = OnIfHighGlare.")]
[JsonProperty(@"If Yes and window is in a daylit zone, shading is on if zone's discomfort glare index exceeds the maximum discomfort glare index specified in the Daylighting object referenced by the zone. The glare test is OR'ed with the test specified by Shading Control Type. Glare Control Is Active = Yes is required if Shading Control Type = OnIfHighGlare.")]
public YesNoDefault GlareControlIsActive { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Enter the name of a WindowMaterial:Shade, WindowMaterial:Screen or WindowMaterial:Blind object. Required if "Construction with Shading Name" is not specified. Not used if Shading Control Type = SwitchableGlazing, BetweenGlassShade, or BetweenGlassBlind. If both "Construction with Shading Name" and "Shading Device Material Name" are entered, the former takes precedence.")]
[JsonProperty(@"Enter the name of a WindowMaterial:Shade, WindowMaterial:Screen or WindowMaterial:Blind object. Required if "Construction with Shading Name" is not specified. Not used if Shading Control Type = SwitchableGlazing, BetweenGlassShade, or BetweenGlassBlind. If both "Construction with Shading Name" and "Shading Device Material Name" are entered, the former takes precedence.")]
public System.String ShadingDeviceMaterialName { get; set; } = "";
        
[Description(@"Used only if Shading Type = InteriorBlind, ExteriorBlind or BetweenGlassBlind. If choice is ScheduledSlatAngle then Slat Angle Schedule Name is required.")]
[JsonProperty(@"Used only if Shading Type = InteriorBlind, ExteriorBlind or BetweenGlassBlind. If choice is ScheduledSlatAngle then Slat Angle Schedule Name is required.")]
public YesNoDefault TypeOfSlatAngleControlForBlinds { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "FixedSlatAngle");
        
[Description(@"Used only if Shading Type = InteriorBlind, ExteriorBlind or BetweenGlassBlind. Required if Type of Slat Angle Control for Blinds = ScheduledSlatAngle Schedule values should be degrees (0 minimum, 180 maximum)")]
[JsonProperty(@"Used only if Shading Type = InteriorBlind, ExteriorBlind or BetweenGlassBlind. Required if Type of Slat Angle Control for Blinds = ScheduledSlatAngle Schedule values should be degrees (0 minimum, 180 maximum)")]
public System.String SlatAngleScheduleName { get; set; } = "";
        
[Description(@"W/m2 for solar-based controls, deg C for temperature-based controls. Used only as the second setpoint for the following two-setpoint control types: OnIfHighOutdoorAirTempAndHighSolarOnWindow, OnIfHighOutdoorAirTempAndHighHorizontalSolar, OnIfHighZoneAirTempAndHighSolarOnWindow, and OnIfHighZoneAirTempAndHighHorizontalSolar")]
[JsonProperty(@"W/m2 for solar-based controls, deg C for temperature-based controls. Used only as the second setpoint for the following two-setpoint control types: OnIfHighOutdoorAirTempAndHighSolarOnWindow, OnIfHighOutdoorAirTempAndHighHorizontalSolar, OnIfHighZoneAirTempAndHighSolarOnWindow, and OnIfHighZoneAirTempAndHighHorizontalSolar")]
public System.Single Setpoint { get; set; } = ;
        
[Description(@"Reference to the Daylighting:Controls object that provides the glare and illuminance control to the zone.")]
[JsonProperty(@"Reference to the Daylighting:Controls object that provides the glare and illuminance control to the zone.")]
public System.String DaylightingControlObjectName { get; set; } = "";
        
[Description(@"When Sequential is used the list of fenestration surfaces are controlled individually in the order specified When Group is used the entire list is controlled simultaneously and if glare control is needed the entire group of window shades are deployed together a the same time")]
[JsonProperty(@"When Sequential is used the list of fenestration surfaces are controlled individually in the order specified When Group is used the entire list is controlled simultaneously and if glare control is needed the entire group of window shades are deployed together a the same time")]
public YesNoDefault MultipleSurfaceControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Sequential");
        
[JsonProperty(@"")]
public System.String FenestrationSurfaces { get; set; } = "";
    }
    
    public enum ShadingTypeType
    {
        
        [JsonProperty("BetweenGlassBlind")]
        BetweenGlassBlind = 0,
        
        [JsonProperty("BetweenGlassShade")]
        BetweenGlassShade = 1,
        
        [JsonProperty("ExteriorBlind")]
        ExteriorBlind = 2,
        
        [JsonProperty("ExteriorScreen")]
        ExteriorScreen = 3,
        
        [JsonProperty("ExteriorShade")]
        ExteriorShade = 4,
        
        [JsonProperty("InteriorBlind")]
        InteriorBlind = 5,
        
        [JsonProperty("InteriorShade")]
        InteriorShade = 6,
        
        [JsonProperty("SwitchableGlazing")]
        SwitchableGlazing = 7,
    }
    
    public enum ShadingControlTypeType
    {
        
        [JsonProperty("AlwaysOff")]
        AlwaysOff = 0,
        
        [JsonProperty("AlwaysOn")]
        AlwaysOn = 1,
        
        [JsonProperty("MeetDaylightIlluminanceSetpoint")]
        MeetDaylightIlluminanceSetpoint = 2,
        
        [JsonProperty("OffNightAndOnDayIfCoolingAndHighSolarOnWindow")]
        OffNightAndOnDayIfCoolingAndHighSolarOnWindow = 3,
        
        [JsonProperty("OnIfHighGlare")]
        OnIfHighGlare = 4,
        
        [JsonProperty("OnIfHighHorizontalSolar")]
        OnIfHighHorizontalSolar = 5,
        
        [JsonProperty("OnIfHighOutdoorAirTempAndHighHorizontalSolar")]
        OnIfHighOutdoorAirTempAndHighHorizontalSolar = 6,
        
        [JsonProperty("OnIfHighOutdoorAirTempAndHighSolarOnWindow")]
        OnIfHighOutdoorAirTempAndHighSolarOnWindow = 7,
        
        [JsonProperty("OnIfHighOutdoorAirTemperature")]
        OnIfHighOutdoorAirTemperature = 8,
        
        [JsonProperty("OnIfHighSolarOnWindow")]
        OnIfHighSolarOnWindow = 9,
        
        [JsonProperty("OnIfHighZoneAirTempAndHighHorizontalSolar")]
        OnIfHighZoneAirTempAndHighHorizontalSolar = 10,
        
        [JsonProperty("OnIfHighZoneAirTempAndHighSolarOnWindow")]
        OnIfHighZoneAirTempAndHighSolarOnWindow = 11,
        
        [JsonProperty("OnIfHighZoneAirTemperature")]
        OnIfHighZoneAirTemperature = 12,
        
        [JsonProperty("OnIfHighZoneCooling")]
        OnIfHighZoneCooling = 13,
        
        [JsonProperty("OnIfScheduleAllows")]
        OnIfScheduleAllows = 14,
        
        [JsonProperty("OnNightAndOnDayIfCoolingAndHighSolarOnWindow")]
        OnNightAndOnDayIfCoolingAndHighSolarOnWindow = 15,
        
        [JsonProperty("OnNightIfHeatingAndOffDay")]
        OnNightIfHeatingAndOffDay = 16,
        
        [JsonProperty("OnNightIfHeatingAndOnDayIfCooling")]
        OnNightIfHeatingAndOnDayIfCooling = 17,
        
        [JsonProperty("OnNightIfLowInsideTempAndOffDay")]
        OnNightIfLowInsideTempAndOffDay = 18,
        
        [JsonProperty("OnNightIfLowOutdoorTempAndOffDay")]
        OnNightIfLowOutdoorTempAndOffDay = 19,
        
        [JsonProperty("OnNightIfLowOutdoorTempAndOnDayIfCooling")]
        OnNightIfLowOutdoorTempAndOnDayIfCooling = 20,
    }
    
    public enum TypeOfSlatAngleControlForBlindsType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlockBeamSolar")]
        BlockBeamSolar = 1,
        
        [JsonProperty("FixedSlatAngle")]
        FixedSlatAngle = 2,
        
        [JsonProperty("ScheduledSlatAngle")]
        ScheduledSlatAngle = 3,
    }
    
    public enum MultipleSurfaceControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Group")]
        Group = 1,
        
        [JsonProperty("Sequential")]
        Sequential = 2,
    }
    
    [Description("Specifies the dimensions of a window frame, dividers, and inside reveal surfaces." +
        " Referenced by the surface objects for exterior windows and glass doors (ref: Fe" +
        "nestrationSurface:Detailed, Window, and GlazedDoor).")]
    [JsonObject("WindowProperty:FrameAndDivider")]
    public class WindowProperty_FrameAndDivider
    {
        
[Description(@"Width of frame in plane of window Frame width assumed the same on all sides of window")]
[JsonProperty(@"Width of frame in plane of window Frame width assumed the same on all sides of window")]
public System.Single FrameWidth { get; set; } = 0;
        
[Description(@"Amount that frame projects outward from the outside face of the glazing")]
[JsonProperty(@"Amount that frame projects outward from the outside face of the glazing")]
public System.Single FrameOutsideProjection { get; set; } = 0;
        
[Description(@"Amount that frame projects inward from the inside face of the glazing")]
[JsonProperty(@"Amount that frame projects inward from the inside face of the glazing")]
public System.Single FrameInsideProjection { get; set; } = 0;
        
[Description(@"Effective conductance of frame Excludes air films Obtained from WINDOW 5 or other 2-D calculation")]
[JsonProperty(@"Effective conductance of frame Excludes air films Obtained from WINDOW 5 or other 2-D calculation")]
public System.Single FrameConductance { get; set; } = ;
        
[Description(@"Excludes air films; applies only to multipane windows Obtained from WINDOW 5 or other 2-D calculation")]
[JsonProperty(@"Excludes air films; applies only to multipane windows Obtained from WINDOW 5 or other 2-D calculation")]
public System.Single RatioOfFrameEdgeGlassConductanceToCenterOfGlassConductance { get; set; } = 1;
        
[Description(@"Assumed same on outside and inside of frame")]
[JsonProperty(@"Assumed same on outside and inside of frame")]
public System.Single FrameSolarAbsorptance { get; set; } = 0.7;
        
[Description(@"Assumed same on outside and inside of frame")]
[JsonProperty(@"Assumed same on outside and inside of frame")]
public System.Single FrameVisibleAbsorptance { get; set; } = 0.7;
        
[Description(@"Assumed same on outside and inside of frame")]
[JsonProperty(@"Assumed same on outside and inside of frame")]
public System.Single FrameThermalHemisphericalEmissivity { get; set; } = 0.9;
        
[JsonProperty(@"")]
public YesNoDefault DividerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DividedLite");
        
[Description(@"Width of dividers in plane of window Width assumed the same for all dividers")]
[JsonProperty(@"Width of dividers in plane of window Width assumed the same for all dividers")]
public System.Single DividerWidth { get; set; } = 0;
        
[Description(@""Horizontal" means parallel to local window X-axis")]
[JsonProperty(@""Horizontal" means parallel to local window X-axis")]
public System.Single NumberOfHorizontalDividers { get; set; } = 0;
        
[Description(@""Vertical" means parallel to local window Y-axis")]
[JsonProperty(@""Vertical" means parallel to local window Y-axis")]
public System.Single NumberOfVerticalDividers { get; set; } = 0;
        
[Description(@"Amount that divider projects outward from the outside face of the glazing Outside projection assumed the same for all divider elements")]
[JsonProperty(@"Amount that divider projects outward from the outside face of the glazing Outside projection assumed the same for all divider elements")]
public System.Single DividerOutsideProjection { get; set; } = 0;
        
[Description(@"Amount that divider projects inward from the inside face of the glazing Inside projection assumed the same for all divider elements")]
[JsonProperty(@"Amount that divider projects inward from the inside face of the glazing Inside projection assumed the same for all divider elements")]
public System.Single DividerInsideProjection { get; set; } = 0;
        
[Description(@"Effective conductance of divider Excludes air films Obtained from WINDOW 5 or other 2-D calculation")]
[JsonProperty(@"Effective conductance of divider Excludes air films Obtained from WINDOW 5 or other 2-D calculation")]
public System.Single DividerConductance { get; set; } = 0;
        
[Description(@"Excludes air films Obtained from WINDOW 5 or other 2-D calculation")]
[JsonProperty(@"Excludes air films Obtained from WINDOW 5 or other 2-D calculation")]
public System.Single RatioOfDividerEdgeGlassConductanceToCenterOfGlassConductance { get; set; } = 1;
        
[Description(@"Assumed same on outside and inside of divider")]
[JsonProperty(@"Assumed same on outside and inside of divider")]
public System.Single DividerSolarAbsorptance { get; set; } = 0;
        
[Description(@"Assumed same on outside and inside of divider")]
[JsonProperty(@"Assumed same on outside and inside of divider")]
public System.Single DividerVisibleAbsorptance { get; set; } = 0;
        
[Description(@"Assumed same on outside and inside of divider")]
[JsonProperty(@"Assumed same on outside and inside of divider")]
public System.Single DividerThermalHemisphericalEmissivity { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single OutsideRevealSolarAbsorptance { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single InsideSillDepth { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single InsideSillSolarAbsorptance { get; set; } = 0;
        
[Description(@"Distance from plane of inside surface of glazing to plane of inside surface of wall. Outside reveal depth is determined from the geometry of the window and the wall it is on; it is non-zero if the plane of the outside surface of the glazing is set back from the plane of the outside surface of the wall.")]
[JsonProperty(@"Distance from plane of inside surface of glazing to plane of inside surface of wall. Outside reveal depth is determined from the geometry of the window and the wall it is on; it is non-zero if the plane of the outside surface of the glazing is set back from the plane of the outside surface of the wall.")]
public System.Single InsideRevealDepth { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single InsideRevealSolarAbsorptance { get; set; } = 0;
    }
    
    public enum DividerTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DividedLite")]
        DividedLite = 1,
        
        [JsonProperty("Suspended")]
        Suspended = 2,
    }
    
    [Description("Used to control forced airflow through a gap between glass layers")]
    [JsonObject("WindowProperty:AirflowControl")]
    public class WindowProperty_AirflowControl
    {
        
[JsonProperty(@"")]
public YesNoDefault AirflowSource { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "IndoorAir");
        
[Description(@"If ReturnAir is selected, the name of the Return Air Node may be specified below.")]
[JsonProperty(@"If ReturnAir is selected, the name of the Return Air Node may be specified below.")]
public YesNoDefault AirflowDestination { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "OutdoorAir");
        
[Description(@"Above is m3/s per m of glazing width")]
[JsonProperty(@"Above is m3/s per m of glazing width")]
public System.Single MaximumFlowRate { get; set; } = 0;
        
[Description(@"ScheduledOnly requires that Airflow Has Multiplier Schedule Name = Yes and that Airflow Multiplier Schedule Name is specified.")]
[JsonProperty(@"ScheduledOnly requires that Airflow Has Multiplier Schedule Name = Yes and that Airflow Multiplier Schedule Name is specified.")]
public YesNoDefault AirflowControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AlwaysOnAtMaximumFlow");
        
[Description(@"If Yes, then Airflow Multiplier Schedule Name must be specified")]
[JsonProperty(@"If Yes, then Airflow Multiplier Schedule Name must be specified")]
public YesNoDefault AirflowIsScheduled { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Required if Airflow Is Scheduled = Yes. Schedule values are 0.0 or 1.0 and multiply Maximum Air Flow.")]
[JsonProperty(@"Required if Airflow Is Scheduled = Yes. Schedule values are 0.0 or 1.0 and multiply Maximum Air Flow.")]
public System.String AirflowMultiplierScheduleName { get; set; } = "";
        
[Description(@"Name of the return air node for this airflow window if the Airflow Destination is ReturnAir. If left blank, defaults to the first return air node for the zone of the window surface.")]
[JsonProperty(@"Name of the return air node for this airflow window if the Airflow Destination is ReturnAir. If left blank, defaults to the first return air node for the zone of the window surface.")]
public System.String AirflowReturnAirNodeName { get; set; } = "";
    }
    
    public enum AirflowSourceType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("IndoorAir")]
        IndoorAir = 1,
        
        [JsonProperty("OutdoorAir")]
        OutdoorAir = 2,
    }
    
    public enum AirflowDestinationType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("IndoorAir")]
        IndoorAir = 1,
        
        [JsonProperty("OutdoorAir")]
        OutdoorAir = 2,
        
        [JsonProperty("ReturnAir")]
        ReturnAir = 3,
    }
    
    public enum AirflowControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AlwaysOff")]
        AlwaysOff = 1,
        
        [JsonProperty("AlwaysOnAtMaximumFlow")]
        AlwaysOnAtMaximumFlow = 2,
        
        [JsonProperty("ScheduledOnly")]
        ScheduledOnly = 3,
    }
    
    [Description("This is a movable exterior glass layer that is usually applied in the winter and " +
        "removed in the summer.")]
    [JsonObject("WindowProperty:StormWindow")]
    public class WindowProperty_StormWindow
    {
        
[Description(@"Must be the name of a FenestrationSurface:Detailed object with Surface Type = WINDOW. The WindowProperty:StormWindow object can only be used with exterior windows.")]
[JsonProperty(@"Must be the name of a FenestrationSurface:Detailed object with Surface Type = WINDOW. The WindowProperty:StormWindow object can only be used with exterior windows.")]
public System.String WindowName { get; set; } = "";
        
[Description(@"Must be a WindowMaterial:Glazing or WindowMaterial:Glazing:RefractionExtinctionMethod Gap between storm glass layer and adjacent glass layer is assumed to be filled with Air")]
[JsonProperty(@"Must be a WindowMaterial:Glazing or WindowMaterial:Glazing:RefractionExtinctionMethod Gap between storm glass layer and adjacent glass layer is assumed to be filled with Air")]
public System.String StormGlassLayerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceBetweenStormGlassLayerAndAdjacentGlass { get; set; } = 0.05;
        
[JsonProperty(@"")]
public System.Single MonthThatStormGlassLayerIsPutOn { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DayOfMonthThatStormGlassLayerIsPutOn { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MonthThatStormGlassLayerIsTakenOff { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DayOfMonthThatStormGlassLayerIsTakenOff { get; set; } = ;
    }
    
    [Description(@"Used to describe internal zone surface area that does not need to be part of geometric representation. This should be the total surface area exposed to the zone air. If you use a ZoneList in the Zone or ZoneList name field then this definition applies to all the zones in the ZoneList.")]
    [JsonObject("InternalMass")]
    public class InternalMass
    {
        
[Description(@"To be matched with a construction in this input file")]
[JsonProperty(@"To be matched with a construction in this input file")]
public System.String ConstructionName { get; set; } = "";
        
[Description(@"Zone the surface is a part of used to be Interior Environment")]
[JsonProperty(@"Zone the surface is a part of used to be Interior Environment")]
public System.String ZoneOrZonelistName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SurfaceArea { get; set; } = ;
    }
    
    [Description("used for shading elements such as trees these items are fixed in space and would " +
        "not move with relative geometry")]
    [JsonObject("Shading:Site")]
    public class Shading_Site
    {
        
[Description(@"Facing direction of outside of shading device (S=180,N=0,E=90,W=270)")]
[JsonProperty(@"Facing direction of outside of shading device (S=180,N=0,E=90,W=270)")]
public System.Single AzimuthAngle { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single TiltAngle { get; set; } = 90;
        
[Description(@"Starting coordinate is the Lower Left Corner of the Shade")]
[JsonProperty(@"Starting coordinate is the Lower Left Corner of the Shade")]
public System.Single StartingXCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingYCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingZCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Length { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Height { get; set; } = ;
    }
    
    [Description("used for shading elements such as trees, other buildings, parts of this building " +
        "not being modeled these items are relative to the current building and would mov" +
        "e with relative geometry")]
    [JsonObject("Shading:Building")]
    public class Shading_Building
    {
        
[Description(@"Facing direction of outside of shading device (S=180,N=0,E=90,W=270)")]
[JsonProperty(@"Facing direction of outside of shading device (S=180,N=0,E=90,W=270)")]
public System.Single AzimuthAngle { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single TiltAngle { get; set; } = 90;
        
[Description(@"Starting coordinate is the Lower Left Corner of the Shade")]
[JsonProperty(@"Starting coordinate is the Lower Left Corner of the Shade")]
public System.Single StartingXCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingYCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single StartingZCoordinate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Length { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Height { get; set; } = ;
    }
    
    [Description("used for shading elements such as trees these items are fixed in space and would " +
        "not move with relative geometry")]
    [JsonObject("Shading:Site:Detailed")]
    public class Shading_Site_Detailed
    {
        
[Description(@"Transmittance schedule for the shading device, defaults to zero (always opaque)")]
[JsonProperty(@"Transmittance schedule for the shading device, defaults to zero (always opaque)")]
public System.String TransmittanceScheduleName { get; set; } = "";
        
[Description(@"shown with 6 vertex coordinates -- extensible object Rules for vertices are given in GlobalGeometryRules coordinates -- For this object all surface coordinates are in world coordinates.")]
[JsonProperty(@"shown with 6 vertex coordinates -- extensible object Rules for vertices are given in GlobalGeometryRules coordinates -- For this object all surface coordinates are in world coordinates.")]
public System.String NumberOfVertices { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.String Vertices { get; set; } = "";
    }
    
    [Description("used for shading elements such as trees, other buildings, parts of this building " +
        "not being modeled these items are relative to the current building and would mov" +
        "e with relative geometry")]
    [JsonObject("Shading:Building:Detailed")]
    public class Shading_Building_Detailed
    {
        
[Description(@"Transmittance schedule for the shading device, defaults to zero (always opaque)")]
[JsonProperty(@"Transmittance schedule for the shading device, defaults to zero (always opaque)")]
public System.String TransmittanceScheduleName { get; set; } = "";
        
[Description(@"shown with 6 vertex coordinates -- extensible object Rules for vertices are given in GlobalGeometryRules coordinates -- For this object all surface coordinates are relative to the building origin (0,0,0) and will rotate with the BUILDING north axis.")]
[JsonProperty(@"shown with 6 vertex coordinates -- extensible object Rules for vertices are given in GlobalGeometryRules coordinates -- For this object all surface coordinates are relative to the building origin (0,0,0) and will rotate with the BUILDING north axis.")]
public System.String NumberOfVertices { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.String Vertices { get; set; } = "";
    }
    
    [Description("Overhangs are usually flat shading surfaces that reference a window or door.")]
    [JsonObject("Shading:Overhang")]
    public class Shading_Overhang
    {
        
[JsonProperty(@"")]
public System.String WindowOrDoorName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single HeightAboveWindowOrDoor { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single TiltAngleFromWindowDoor { get; set; } = 90;
        
[JsonProperty(@"")]
public System.Single LeftExtensionFromWindowDoorWidth { get; set; } = ;
        
[Description(@"N3 + N4 + Window/Door Width is Overhang Length")]
[JsonProperty(@"N3 + N4 + Window/Door Width is Overhang Length")]
public System.Single RightExtensionFromWindowDoorWidth { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single Depth { get; set; } = ;
    }
    
    [Description("Overhangs are typically flat shading surfaces that reference a window or door.")]
    [JsonObject("Shading:Overhang:Projection")]
    public class Shading_Overhang_Projection
    {
        
[JsonProperty(@"")]
public System.String WindowOrDoorName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single HeightAboveWindowOrDoor { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single TiltAngleFromWindowDoor { get; set; } = 90;
        
[JsonProperty(@"")]
public System.Single LeftExtensionFromWindowDoorWidth { get; set; } = ;
        
[Description(@"N3 + N4 + Window/Door Width is Overhang Length")]
[JsonProperty(@"N3 + N4 + Window/Door Width is Overhang Length")]
public System.Single RightExtensionFromWindowDoorWidth { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DepthAsFractionOfWindowDoorHeight { get; set; } = ;
    }
    
    [Description("Fins are usually shading surfaces that are perpendicular to a window or door.")]
    [JsonObject("Shading:Fin")]
    public class Shading_Fin
    {
        
[JsonProperty(@"")]
public System.String WindowOrDoorName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LeftExtensionFromWindowDoor { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LeftDistanceAboveTopOfWindow { get; set; } = ;
        
[Description(@"N2 + N3 + height of Window/Door is height of Fin")]
[JsonProperty(@"N2 + N3 + height of Window/Door is height of Fin")]
public System.Single LeftDistanceBelowBottomOfWindow { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LeftTiltAngleFromWindowDoor { get; set; } = 90;
        
[JsonProperty(@"")]
public System.Single LeftDepth { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RightExtensionFromWindowDoor { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RightDistanceAboveTopOfWindow { get; set; } = ;
        
[Description(@"N7 + N8 + height of Window/Door is height of Fin")]
[JsonProperty(@"N7 + N8 + height of Window/Door is height of Fin")]
public System.Single RightDistanceBelowBottomOfWindow { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RightTiltAngleFromWindowDoor { get; set; } = 90;
        
[JsonProperty(@"")]
public System.Single RightDepth { get; set; } = ;
    }
    
    [Description("Fins are usually shading surfaces that are perpendicular to a window or door.")]
    [JsonObject("Shading:Fin:Projection")]
    public class Shading_Fin_Projection
    {
        
[JsonProperty(@"")]
public System.String WindowOrDoorName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LeftExtensionFromWindowDoor { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LeftDistanceAboveTopOfWindow { get; set; } = ;
        
[Description(@"N2 + N3 + height of Window/Door is height of Fin")]
[JsonProperty(@"N2 + N3 + height of Window/Door is height of Fin")]
public System.Single LeftDistanceBelowBottomOfWindow { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single LeftTiltAngleFromWindowDoor { get; set; } = 90;
        
[JsonProperty(@"")]
public System.Single LeftDepthAsFractionOfWindowDoorWidth { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RightExtensionFromWindowDoor { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RightDistanceAboveTopOfWindow { get; set; } = ;
        
[Description(@"N7 + N8 + height of Window/Door is height of Fin")]
[JsonProperty(@"N7 + N8 + height of Window/Door is height of Fin")]
public System.Single RightDistanceBelowBottomOfWindow { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RightTiltAngleFromWindowDoor { get; set; } = 90;
        
[JsonProperty(@"")]
public System.Single RightDepthAsFractionOfWindowDoorWidth { get; set; } = ;
    }
    
    [Description("used For fins, overhangs, elements that shade the building, are attached to the b" +
        "uilding but are not part of the heat transfer calculations")]
    [JsonObject("Shading:Zone:Detailed")]
    public class Shading_Zone_Detailed
    {
        
[JsonProperty(@"")]
public System.String BaseSurfaceName { get; set; } = "";
        
[Description(@"Transmittance schedule for the shading device, defaults to zero (always opaque)")]
[JsonProperty(@"Transmittance schedule for the shading device, defaults to zero (always opaque)")]
public System.String TransmittanceScheduleName { get; set; } = "";
        
[Description(@"shown with 6 vertex coordinates -- extensible object vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates are "relative" to the Zone Origin. if world, then building and zone origins are used for some internal calculations, but all coordinates are given in an "absolute" system.")]
[JsonProperty(@"shown with 6 vertex coordinates -- extensible object vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates are "relative" to the Zone Origin. if world, then building and zone origins are used for some internal calculations, but all coordinates are given in an "absolute" system.")]
public System.String NumberOfVertices { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.String Vertices { get; set; } = "";
    }
    
    [Description("If this object is not defined for a shading surface the default values listed in " +
        "following fields will be used in the solar reflection calculation.")]
    [JsonObject("ShadingProperty:Reflectance")]
    public class ShadingProperty_Reflectance
    {
        
[JsonProperty(@"")]
public System.String ShadingSurfaceName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DiffuseSolarReflectanceOfUnglazedPartOfShadingSurface { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurface { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single FractionOfShadingSurfaceThatIsGlazed { get; set; } = 0;
        
[Description(@"Required if Fraction of Shading Surface That Is Glazed > 0.0")]
[JsonProperty(@"Required if Fraction of Shading Surface That Is Glazed > 0.0")]
public System.String GlazingConstructionName { get; set; } = "";
    }
}
namespace EnergyPlus.UnitaryEquipment
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"AirloopHVAC:UnitarySystem is a generic HVAC system type that allows any configuration of coils and/or fan. This object is a replacement of other AirloopHVAC objects. This object can be used in outdoor air systems, outdoor air units, air loops, and as zone equipment if desired.")]
    [JsonObject("AirLoopHVAC:UnitarySystem")]
    public class AirLoopHVAC_UnitarySystem
    {
        
[Description(@"Load control requires a Controlling Zone name. SetPoint control requires set points at coil outlet node. SingleZoneVAV also requires a Controlling Zone name and allows load control at low speed fan until the load exceeds capacity or outlet air temperature limits. The fan speed is then increased.")]
[JsonProperty(@"Load control requires a Controlling Zone name. SetPoint control requires set points at coil outlet node. SingleZoneVAV also requires a Controlling Zone name and allows load control at low speed fan until the load exceeds capacity or outlet air temperature limits. The fan speed is then increased.")]
public YesNoDefault ControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Load");
        
[Description(@"Used only for Load based control Zone name where thermostat is located. Required when Control Type = Load.")]
[JsonProperty(@"Used only for Load based control Zone name where thermostat is located. Required when Control Type = Load.")]
public System.String ControllingZoneOrThermostatLocation { get; set; } = "";
        
[Description(@"None = meet sensible load only. Required when Control Type = SingleZoneVAV. Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only with cooling coil type Coil:Cooling:DX:TwoStageWithHumidityControlMode or CoilSystem:Cooling:DX:HeatExchangerAssisted. This control mode either switches the coil mode or allows the heat exchanger to be turned on and off based on the zone dehumidification requirements. A ZoneControl:Humidistat object is also required. CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid with all cooling coil types. When a heat exchanger assisted cooling coil is used, the heat exchanger is locked on at all times. A ZoneControl:Humidistat object is also required.")]
[JsonProperty(@"None = meet sensible load only. Required when Control Type = SingleZoneVAV. Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only with cooling coil type Coil:Cooling:DX:TwoStageWithHumidityControlMode or CoilSystem:Cooling:DX:HeatExchangerAssisted. This control mode either switches the coil mode or allows the heat exchanger to be turned on and off based on the zone dehumidification requirements. A ZoneControl:Humidistat object is also required. CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid with all cooling coil types. When a heat exchanger assisted cooling coil is used, the heat exchanger is locked on at all times. A ZoneControl:Humidistat object is also required.")]
public YesNoDefault DehumidificationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. A schedule value greater than zero (usually 1 is used) indicates that the unit is available to operate as needed. A value less than or equal to zero (usually zero is used) denotes that the unit must be off.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. A schedule value greater than zero (usually 1 is used) indicates that the unit is available to operate as needed. A value less than or equal to zero (usually zero is used) denotes that the unit must be off.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Enter the node name used as the inlet air node for the unitary system.")]
[JsonProperty(@"Enter the node name used as the inlet air node for the unitary system.")]
public System.String AirInletNodeName { get; set; } = "";
        
[Description(@"Enter the node name used as the outlet air node for the unitary system.")]
[JsonProperty(@"Enter the node name used as the outlet air node for the unitary system.")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Enter the type of supply air fan if included in the unitary system. Fan:ConstantVolume only works with continuous fan operating mode (i.e. supply air fan operating mode schedule values greater than 0). Specify a Fan:SystemModel or a Fan:OnOff object when the Supply Air Fan Operating Mode Schedule Name input field above is left blank. Specify a Fan:SystemModel or a Fan:VariableVolume when modeling VAV systems which used setpoint based control if the fan is included in the unitary system object. The ComponentModel fan type may be substituted for the ConstantVolume or VariableVolume fan types when more detailed fan modeling is required. The variable or constant volume fan may be specified on the branch instead of contained within the unitary system object (i.e., this field may be blank for certain configurations).")]
[JsonProperty(@"Enter the type of supply air fan if included in the unitary system. Fan:ConstantVolume only works with continuous fan operating mode (i.e. supply air fan operating mode schedule values greater than 0). Specify a Fan:SystemModel or a Fan:OnOff object when the Supply Air Fan Operating Mode Schedule Name input field above is left blank. Specify a Fan:SystemModel or a Fan:VariableVolume when modeling VAV systems which used setpoint based control if the fan is included in the unitary system object. The ComponentModel fan type may be substituted for the ConstantVolume or VariableVolume fan types when more detailed fan modeling is required. The variable or constant volume fan may be specified on the branch instead of contained within the unitary system object (i.e., this field may be blank for certain configurations).")]
public YesNoDefault SupplyFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of the supply air fan if included in the unitary system.")]
[JsonProperty(@"Enter the name of the supply air fan if included in the unitary system.")]
public System.String SupplyFanName { get; set; } = "";
        
[Description(@"Enter the type of supply air fan if included in the unitary system.")]
[JsonProperty(@"Enter the type of supply air fan if included in the unitary system.")]
public YesNoDefault FanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"A fan operating mode schedule value of 0 indicates cycling fan mode (supply air fan cycles on and off in tandem with the cooling or heating coil). Any other schedule value indicates continuous fan mode (supply air fan operates continuously regardless of cooling or heating coil operation). Provide a schedule with non-zero values when high humidity control is specified. Leaving this schedule name blank will default to constant fan mode for the entire simulation period. This field is not used when set point based control is used where a set point controls the coil. SingleZoneVAV control type is only active when constant fan operating mode is active.")]
[JsonProperty(@"A fan operating mode schedule value of 0 indicates cycling fan mode (supply air fan cycles on and off in tandem with the cooling or heating coil). Any other schedule value indicates continuous fan mode (supply air fan operates continuously regardless of cooling or heating coil operation). Provide a schedule with non-zero values when high humidity control is specified. Leaving this schedule name blank will default to constant fan mode for the entire simulation period. This field is not used when set point based control is used where a set point controls the coil. SingleZoneVAV control type is only active when constant fan operating mode is active.")]
public System.String SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        
[Description(@"Enter the type of heating coil if included in the unitary system.")]
[JsonProperty(@"Enter the type of heating coil if included in the unitary system.")]
public YesNoDefault HeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of the heating coil if included in the unitary system.")]
[JsonProperty(@"Enter the name of the heating coil if included in the unitary system.")]
public System.String HeatingCoilName { get; set; } = "";
        
[Description(@"Used to adjust heat pump heating capacity with respect to DX cooling capacity used only for heat pump configurations (i.e., a DX cooling and DX heating coil is used).")]
[JsonProperty(@"Used to adjust heat pump heating capacity with respect to DX cooling capacity used only for heat pump configurations (i.e., a DX cooling and DX heating coil is used).")]
public System.Single DxHeatingCoilSizingRatio { get; set; } = 1;
        
[Description(@"Enter the type of cooling coil if included in the unitary system.")]
[JsonProperty(@"Enter the type of cooling coil if included in the unitary system.")]
public YesNoDefault CoolingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of the cooling coil if included in the unitary system.")]
[JsonProperty(@"Enter the name of the cooling coil if included in the unitary system.")]
public System.String CoolingCoilName { get; set; } = "";
        
[Description(@"If Yes, the DX cooling coil runs as 100% DOAS DX coil. If No, the DX cooling coil runs as a regular DX coil. If left blank the default is regular dx coil.")]
[JsonProperty(@"If Yes, the DX cooling coil runs as 100% DOAS DX coil. If No, the DX cooling coil runs as a regular DX coil. If left blank the default is regular dx coil.")]
public YesNoDefault UseDoasDxCoolingCoil { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"When Use DOAS DX Cooling Coil is specified as Yes, Minimum Supply Air Temperature defines the minimum DOAS DX cooling coil leaving air temperature that should be maintained to avoid frost formation. This field is not autosizable when the input for Use DOAS DX Cooling Coil = Yes. When Control Type = SingleZoneVAV, enter the minimum air temperature limit for reduced fan speed.")]
[JsonProperty(@"When Use DOAS DX Cooling Coil is specified as Yes, Minimum Supply Air Temperature defines the minimum DOAS DX cooling coil leaving air temperature that should be maintained to avoid frost formation. This field is not autosizable when the input for Use DOAS DX Cooling Coil = Yes. When Control Type = SingleZoneVAV, enter the minimum air temperature limit for reduced fan speed.")]
public System.String MinimumSupplyAirTemperature { get; set; } = (System.String)2;
        
[Description(@"SensibleOnlyLoadControl is selected when thermostat or SingleZoneVAV control is used. LatentOnlyLoadControl is selected when humidistat control is used. LatentWithSensibleLoadControl is selected when thermostat control is used and dehumidification is required only when a sensible load exists. LatentOrSensibleLoadControl is selected when thermostat control is used and dehumidification is required any time the humidistat set point is exceeded.")]
[JsonProperty(@"SensibleOnlyLoadControl is selected when thermostat or SingleZoneVAV control is used. LatentOnlyLoadControl is selected when humidistat control is used. LatentWithSensibleLoadControl is selected when thermostat control is used and dehumidification is required only when a sensible load exists. LatentOrSensibleLoadControl is selected when thermostat control is used and dehumidification is required any time the humidistat set point is exceeded.")]
public YesNoDefault LatentLoadControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SensibleOnlyLoadControl");
        
[Description(@"Enter the type of supplemental heating or reheat coil if included in the unitary system. Only required if dehumidification control type is "CoolReheat". This coil supplements heating mode operation or reheats the supply air during dehumidification mode operation. If set point based control is used the coils operate to meet their respective supply air temperature set point.")]
[JsonProperty(@"Enter the type of supplemental heating or reheat coil if included in the unitary system. Only required if dehumidification control type is "CoolReheat". This coil supplements heating mode operation or reheats the supply air during dehumidification mode operation. If set point based control is used the coils operate to meet their respective supply air temperature set point.")]
public YesNoDefault SupplementalHeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of the supplemental heating coil if included in the unitary system. Only required if dehumidification control type is "CoolReheat".")]
[JsonProperty(@"Enter the name of the supplemental heating coil if included in the unitary system. Only required if dehumidification control type is "CoolReheat".")]
public System.String SupplementalHeatingCoilName { get; set; } = "";
        
[Description(@"Enter the method used to determine the cooling supply air volume flow rate. None is used when a cooling coil is not included in the unitary system or this field may be blank. SupplyAirFlowRate is selected when the magnitude of the supply air volume is used. FlowPerFloorArea is selected when the supply air volume flow rate is based on total floor area served by the unitary system. FractionOfAutosizedCoolingValue is selected when the supply air volume is a fraction of the value determined by the simulation. FlowPerCoolingCapacity is selected when the supply air volume is a fraction of the cooling capacity as determined by the simulation.")]
[JsonProperty(@"Enter the method used to determine the cooling supply air volume flow rate. None is used when a cooling coil is not included in the unitary system or this field may be blank. SupplyAirFlowRate is selected when the magnitude of the supply air volume is used. FlowPerFloorArea is selected when the supply air volume flow rate is based on total floor area served by the unitary system. FractionOfAutosizedCoolingValue is selected when the supply air volume is a fraction of the value determined by the simulation. FlowPerCoolingCapacity is selected when the supply air volume is a fraction of the cooling capacity as determined by the simulation.")]
public YesNoDefault CoolingSupplyAirFlowRateMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the magnitude of the supply air volume flow rate during cooling operation. Required field when Cooling Supply Air Flow Rate Method is SupplyAirFlowRate. This field may be blank if a cooling coil is not included in the unitary system.")]
[JsonProperty(@"Enter the magnitude of the supply air volume flow rate during cooling operation. Required field when Cooling Supply Air Flow Rate Method is SupplyAirFlowRate. This field may be blank if a cooling coil is not included in the unitary system.")]
public System.String CoolingSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Enter the supply air volume flow rate per total floor area fraction. Required field when Cooling Supply Air Flow Rate Method is FlowPerFloorArea. This field may be blank if a cooling coil is not included in the unitary system.")]
[JsonProperty(@"Enter the supply air volume flow rate per total floor area fraction. Required field when Cooling Supply Air Flow Rate Method is FlowPerFloorArea. This field may be blank if a cooling coil is not included in the unitary system.")]
public System.Single CoolingSupplyAirFlowRatePerFloorArea { get; set; } = ;
        
[Description(@"Enter the supply air volume flow rate as a fraction of the cooling supply air flow rate. Required field when Cooling Supply Air Flow Rate Method is FractionOfAutosizedCoolingValue. This field may be blank if a cooling coil is not included in the unitary system.")]
[JsonProperty(@"Enter the supply air volume flow rate as a fraction of the cooling supply air flow rate. Required field when Cooling Supply Air Flow Rate Method is FractionOfAutosizedCoolingValue. This field may be blank if a cooling coil is not included in the unitary system.")]
public System.Single CoolingFractionOfAutosizedCoolingSupplyAirFlowRate { get; set; } = ;
        
[Description(@"Enter the supply air volume flow rate as a fraction of the cooling capacity. Required field when Cooling Supply Air Flow Rate Method is FlowPerCoolingCapacity. This field may be blank if a cooling coil is not included in the unitary system.")]
[JsonProperty(@"Enter the supply air volume flow rate as a fraction of the cooling capacity. Required field when Cooling Supply Air Flow Rate Method is FlowPerCoolingCapacity. This field may be blank if a cooling coil is not included in the unitary system.")]
public System.Single CoolingSupplyAirFlowRatePerUnitOfCapacity { get; set; } = ;
        
[Description(@"Enter the method used to determine the heating supply air volume flow rate. None is used when a heating coil is not included in the unitary system or this field may be blank. SupplyAirFlowRate is selected when the magnitude of the supply air volume is used. FlowPerFloorArea is selected when the supply air volume flow rate is based on total floor area served by the unitary system. FractionOfAutosizedHeatingValue is selected when the supply air volume is a fraction of the value determined by the simulation. FlowPerHeatingCapacity is selected when the supply air volume is a fraction of the heating capacity as determined by the simulation.")]
[JsonProperty(@"Enter the method used to determine the heating supply air volume flow rate. None is used when a heating coil is not included in the unitary system or this field may be blank. SupplyAirFlowRate is selected when the magnitude of the supply air volume is used. FlowPerFloorArea is selected when the supply air volume flow rate is based on total floor area served by the unitary system. FractionOfAutosizedHeatingValue is selected when the supply air volume is a fraction of the value determined by the simulation. FlowPerHeatingCapacity is selected when the supply air volume is a fraction of the heating capacity as determined by the simulation.")]
public YesNoDefault HeatingSupplyAirFlowRateMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the magnitude of the supply air volume flow rate during heating operation. Required field when Heating Supply Air Flow Rate Method is SupplyAirFlowRate. This field may be blank if a heating coil is not included in the unitary system.")]
[JsonProperty(@"Enter the magnitude of the supply air volume flow rate during heating operation. Required field when Heating Supply Air Flow Rate Method is SupplyAirFlowRate. This field may be blank if a heating coil is not included in the unitary system.")]
public System.String HeatingSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Enter the supply air volume flow rate per total floor area fraction. Required field when Heating Supply Air Flow Rate Method is FlowPerFloorArea. This field may be blank if a heating coil is not included in the unitary system.")]
[JsonProperty(@"Enter the supply air volume flow rate per total floor area fraction. Required field when Heating Supply Air Flow Rate Method is FlowPerFloorArea. This field may be blank if a heating coil is not included in the unitary system.")]
public System.Single HeatingSupplyAirFlowRatePerFloorArea { get; set; } = ;
        
[Description(@"Enter the supply air volume flow rate as a fraction of the heating supply air flow rate. Required field when Heating Supply Air Flow Rate Method is FractionOfAutosizedHeatingValue. This field may be blank if a heating coil is not included in the unitary system.")]
[JsonProperty(@"Enter the supply air volume flow rate as a fraction of the heating supply air flow rate. Required field when Heating Supply Air Flow Rate Method is FractionOfAutosizedHeatingValue. This field may be blank if a heating coil is not included in the unitary system.")]
public System.Single HeatingFractionOfAutosizedHeatingSupplyAirFlowRate { get; set; } = ;
        
[Description(@"Enter the supply air volume flow rate as a fraction of the heating capacity. Required field when Heating Supply Air Flow Rate Method is FlowPerHeatingCapacity. This field may be blank if a heating coil is not included in the unitary system.")]
[JsonProperty(@"Enter the supply air volume flow rate as a fraction of the heating capacity. Required field when Heating Supply Air Flow Rate Method is FlowPerHeatingCapacity. This field may be blank if a heating coil is not included in the unitary system.")]
public System.Single HeatingSupplyAirFlowRatePerUnitOfCapacity { get; set; } = ;
        
[Description(@"Enter the method used to determine the supply air volume flow rate when no cooling or heating is required. None is used when a cooling and heating coil is not included in the unitary system or this field may be blank. SupplyAirFlowRate is selected when the magnitude of the supply air volume is used. FlowPerFloorArea is selected when the supply air volume flow rate is based on total floor area served by the unitary system. FractionOfAutosizedCoolingValue is selected when the supply air volume is a fraction of the cooling value determined by the simulation. FractionOfAutosizedHeatingValue is selected when the supply air volume is a fraction of the heating value determined by the simulation. FlowPerCoolingCapacity is selected when the supply air volume is a fraction of the cooling capacity as determined by the simulation. FlowPerHeatingCapacity is selected when the supply air volume is a fraction of the heating capacity as determined by the simulation.")]
[JsonProperty(@"Enter the method used to determine the supply air volume flow rate when no cooling or heating is required. None is used when a cooling and heating coil is not included in the unitary system or this field may be blank. SupplyAirFlowRate is selected when the magnitude of the supply air volume is used. FlowPerFloorArea is selected when the supply air volume flow rate is based on total floor area served by the unitary system. FractionOfAutosizedCoolingValue is selected when the supply air volume is a fraction of the cooling value determined by the simulation. FractionOfAutosizedHeatingValue is selected when the supply air volume is a fraction of the heating value determined by the simulation. FlowPerCoolingCapacity is selected when the supply air volume is a fraction of the cooling capacity as determined by the simulation. FlowPerHeatingCapacity is selected when the supply air volume is a fraction of the heating capacity as determined by the simulation.")]
public YesNoDefault NoLoadSupplyAirFlowRateMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the magnitude of the supply air volume flow rate during when no cooling or heating is required. Required field when No Load Supply Air Flow Rate Method is SupplyAirFlowRate.")]
[JsonProperty(@"Enter the magnitude of the supply air volume flow rate during when no cooling or heating is required. Required field when No Load Supply Air Flow Rate Method is SupplyAirFlowRate.")]
public System.String NoLoadSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Enter the supply air volume flow rate per total floor area fraction. Required field when No Load Supply Air Flow Rate Method is FlowPerFloorArea.")]
[JsonProperty(@"Enter the supply air volume flow rate per total floor area fraction. Required field when No Load Supply Air Flow Rate Method is FlowPerFloorArea.")]
public System.Single NoLoadSupplyAirFlowRatePerFloorArea { get; set; } = ;
        
[Description(@"Enter the supply air volume flow rate as a fraction of the cooling supply air flow rate. Required field when No Load Supply Air Flow Rate Method is FractionOfAutosizedCoolingValue.")]
[JsonProperty(@"Enter the supply air volume flow rate as a fraction of the cooling supply air flow rate. Required field when No Load Supply Air Flow Rate Method is FractionOfAutosizedCoolingValue.")]
public System.Single NoLoadFractionOfAutosizedCoolingSupplyAirFlowRate { get; set; } = ;
        
[Description(@"Enter the supply air volume flow rate as a fraction of the heating supply air flow rate. Required field when No Load Supply Air Flow Rate Method is FractionOfAutosizedHeatingValue.")]
[JsonProperty(@"Enter the supply air volume flow rate as a fraction of the heating supply air flow rate. Required field when No Load Supply Air Flow Rate Method is FractionOfAutosizedHeatingValue.")]
public System.Single NoLoadFractionOfAutosizedHeatingSupplyAirFlowRate { get; set; } = ;
        
[Description(@"Enter the supply air volume flow rate as a fraction of the cooling capacity. Required field when No Load Supply Air Flow Rate Method is FlowPerCoolingCapacity.")]
[JsonProperty(@"Enter the supply air volume flow rate as a fraction of the cooling capacity. Required field when No Load Supply Air Flow Rate Method is FlowPerCoolingCapacity.")]
public System.Single NoLoadSupplyAirFlowRatePerUnitOfCapacityDuringCoolingOperation { get; set; } = ;
        
[Description(@"Enter the supply air volume flow rate as a fraction of the heating capacity. Required field when No Load Supply Air Flow Rate Method is FlowPerHeatingCapacity.")]
[JsonProperty(@"Enter the supply air volume flow rate as a fraction of the heating capacity. Required field when No Load Supply Air Flow Rate Method is FlowPerHeatingCapacity.")]
public System.Single NoLoadSupplyAirFlowRatePerUnitOfCapacityDuringHeatingOperation { get; set; } = ;
        
[Description(@"Enter the maximum supply air temperature leaving the heating coil. When Control Type = SingleZoneVAV, enter the maximum air temperature limit for reduced fan speed.")]
[JsonProperty(@"Enter the maximum supply air temperature leaving the heating coil. When Control Type = SingleZoneVAV, enter the maximum air temperature limit for reduced fan speed.")]
public System.String MaximumSupplyAirTemperature { get; set; } = (System.String)80;
        
[Description(@"Enter the maximum outdoor dry-bulb temperature for supplemental heater operation.")]
[JsonProperty(@"Enter the maximum outdoor dry-bulb temperature for supplemental heater operation.")]
public System.Single MaximumOutdoorDryBulbTemperatureForSupplementalHeaterOperation { get; set; } = 21;
        
[Description(@"If this field is blank, outdoor temperature from the weather file is used. If this field is not blank, the node name specified determines the outdoor temperature used for controlling supplemental heater operation.")]
[JsonProperty(@"If this field is blank, outdoor temperature from the weather file is used. If this field is not blank, the node name specified determines the outdoor temperature used for controlling supplemental heater operation.")]
public System.String OutdoorDryBulbTemperatureSensorNodeName { get; set; } = "";
        
[Description(@"Used only for water source heat pump. The maximum on-off cycling rate for the compressor. Suggested value is 2.5 for a typical heat pump.")]
[JsonProperty(@"Used only for water source heat pump. The maximum on-off cycling rate for the compressor. Suggested value is 2.5 for a typical heat pump.")]
public System.Single MaximumCyclingRate { get; set; } = 2.5;
        
[Description(@"Used only for water source heat pump. Time constant for the cooling coil's capacity to reach steady state after startup. Suggested value is 60 for a typical heat pump.")]
[JsonProperty(@"Used only for water source heat pump. Time constant for the cooling coil's capacity to reach steady state after startup. Suggested value is 60 for a typical heat pump.")]
public System.Single HeatPumpTimeConstant { get; set; } = 60;
        
[Description(@"Used only for water source heat pump. The fraction of on-cycle power use to adjust the part load fraction based on the off-cycle power consumption due to crankcase heaters, controls, fans, and etc. Suggested value is 0.01 for a typical heat pump.")]
[JsonProperty(@"Used only for water source heat pump. The fraction of on-cycle power use to adjust the part load fraction based on the off-cycle power consumption due to crankcase heaters, controls, fans, and etc. Suggested value is 0.01 for a typical heat pump.")]
public System.Single FractionOfOnCyclePowerUse { get; set; } = 0.01;
        
[Description(@"Used only for water source heat pump. Programmed time delay for heat pump fan to shut off after compressor cycle off. Only required when fan operating mode is cycling. Enter 0 when fan operating mode is continuous.")]
[JsonProperty(@"Used only for water source heat pump. Programmed time delay for heat pump fan to shut off after compressor cycle off. Only required when fan operating mode is cycling. Enter 0 when fan operating mode is continuous.")]
public System.Single HeatPumpFanDelayTime { get; set; } = 60;
        
[Description(@"Enter the value of ancillary electric power for controls or other devices consumed during the on cycle.")]
[JsonProperty(@"Enter the value of ancillary electric power for controls or other devices consumed during the on cycle.")]
public System.Single AncillaryOnCycleElectricPower { get; set; } = 0;
        
[Description(@"Enter the value of ancillary electric power for controls or other devices consumed during the off cycle.")]
[JsonProperty(@"Enter the value of ancillary electric power for controls or other devices consumed during the off cycle.")]
public System.Single AncillaryOffCycleElectricPower { get; set; } = 0;
        
[Description(@"If non-zero, then the heat recovery inlet and outlet node names must be entered. Used for heat recovery to an EnergyPlus plant loop.")]
[JsonProperty(@"If non-zero, then the heat recovery inlet and outlet node names must be entered. Used for heat recovery to an EnergyPlus plant loop.")]
public System.Single DesignHeatRecoveryWaterFlowRate { get; set; } = 0;
        
[Description(@"Enter the maximum heat recovery inlet temperature allowed for heat recovery.")]
[JsonProperty(@"Enter the maximum heat recovery inlet temperature allowed for heat recovery.")]
public System.Single MaximumTemperatureForHeatRecovery { get; set; } = 80;
        
[Description(@"Enter the name of the heat recovery water inlet node if plant water loop connections are present.")]
[JsonProperty(@"Enter the name of the heat recovery water inlet node if plant water loop connections are present.")]
public System.String HeatRecoveryWaterInletNodeName { get; set; } = "";
        
[Description(@"Enter the name of the heat recovery water outlet node if plant water loop connections are present.")]
[JsonProperty(@"Enter the name of the heat recovery water outlet node if plant water loop connections are present.")]
public System.String HeatRecoveryWaterOutletNodeName { get; set; } = "";
        
[Description(@"Enter the type of performance specification object used to describe the multispeed coil.")]
[JsonProperty(@"Enter the type of performance specification object used to describe the multispeed coil.")]
public YesNoDefault DesignSpecificationMultispeedObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of the performance specification object used to describe the multispeed coil.")]
[JsonProperty(@"Enter the name of the performance specification object used to describe the multispeed coil.")]
public System.String DesignSpecificationMultispeedObjectName { get; set; } = "";
    }
    
    public enum ControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Load")]
        Load = 1,
        
        [JsonProperty("SetPoint")]
        SetPoint = 2,
        
        [JsonProperty("SingleZoneVAV")]
        SingleZoneVAV = 3,
    }
    
    public enum DehumidificationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("Multimode")]
        Multimode = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum SupplyFanObjectTypeType
    {
        
        [JsonProperty("Fan:ComponentModel")]
        FanComponentModel = 0,
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 1,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 2,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 3,
        
        [JsonProperty("Fan:VariableVolume")]
        FanVariableVolume = 4,
    }
    
    public enum FanPlacementType
    {
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 0,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 1,
    }
    
    public enum HeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:DX:MultiSpeed")]
        CoilHeatingDXMultiSpeed = 0,
        
        [JsonProperty("Coil:Heating:DX:SingleSpeed")]
        CoilHeatingDXSingleSpeed = 1,
        
        [JsonProperty("Coil:Heating:DX:VariableSpeed")]
        CoilHeatingDXVariableSpeed = 2,
        
        [JsonProperty("Coil:Heating:Desuperheater")]
        CoilHeatingDesuperheater = 3,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 4,
        
        [JsonProperty("Coil:Heating:Electric:MultiStage")]
        CoilHeatingElectricMultiStage = 5,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 6,
        
        [JsonProperty("Coil:Heating:Gas:MultiStage")]
        CoilHeatingGasMultiStage = 7,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 8,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 9,
        
        [JsonProperty("Coil:Heating:WaterToAirHeatPump:EquationFit")]
        CoilHeatingWaterToAirHeatPumpEquationFit = 10,
        
        [JsonProperty("Coil:Heating:WaterToAirHeatPump:ParameterEstimation")]
        CoilHeatingWaterToAirHeatPumpParameterEstimation = 11,
        
        [JsonProperty("Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit")]
        CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit = 12,
        
        [JsonProperty("Coil:UserDefined")]
        CoilUserDefined = 13,
    }
    
    public enum CoolingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:DX")]
        CoilCoolingDX = 0,
        
        [JsonProperty("Coil:Cooling:DX:MultiSpeed")]
        CoilCoolingDXMultiSpeed = 1,
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 2,
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed:ThermalStorage")]
        CoilCoolingDXSingleSpeedThermalStorage = 3,
        
        [JsonProperty("Coil:Cooling:DX:TwoSpeed")]
        CoilCoolingDXTwoSpeed = 4,
        
        [JsonProperty("Coil:Cooling:DX:TwoStageWithHumidityControlMode")]
        CoilCoolingDXTwoStageWithHumidityControlMode = 5,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 6,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 7,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 8,
        
        [JsonProperty("Coil:Cooling:WaterToAirHeatPump:EquationFit")]
        CoilCoolingWaterToAirHeatPumpEquationFit = 9,
        
        [JsonProperty("Coil:Cooling:WaterToAirHeatPump:ParameterEstimation")]
        CoilCoolingWaterToAirHeatPumpParameterEstimation = 10,
        
        [JsonProperty("Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit")]
        CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit = 11,
        
        [JsonProperty("Coil:UserDefined")]
        CoilUserDefined = 12,
        
        [JsonProperty("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
        CoilSystemCoolingDXHeatExchangerAssisted = 13,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatExchangerAssisted")]
        CoilSystemCoolingWaterHeatExchangerAssisted = 14,
    }
    
    public enum LatentLoadControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LatentOnlyLoadControl")]
        LatentOnlyLoadControl = 1,
        
        [JsonProperty("LatentOrSensibleLoadControl")]
        LatentOrSensibleLoadControl = 2,
        
        [JsonProperty("LatentWithSensibleLoadControl")]
        LatentWithSensibleLoadControl = 3,
        
        [JsonProperty("SensibleOnlyLoadControl")]
        SensibleOnlyLoadControl = 4,
    }
    
    public enum SupplementalHeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Desuperheater")]
        CoilHeatingDesuperheater = 0,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 1,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 2,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 3,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 4,
        
        [JsonProperty("Coil:UserDefined")]
        CoilUserDefined = 5,
    }
    
    public enum CoolingSupplyAirFlowRateMethodType
    {
        
        [JsonProperty("FlowPerCoolingCapacity")]
        FlowPerCoolingCapacity = 0,
        
        [JsonProperty("FlowPerFloorArea")]
        FlowPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedCoolingValue")]
        FractionOfAutosizedCoolingValue = 2,
        
        [JsonProperty("None")]
        None = 3,
        
        [JsonProperty("SupplyAirFlowRate")]
        SupplyAirFlowRate = 4,
    }
    
    public enum HeatingSupplyAirFlowRateMethodType
    {
        
        [JsonProperty("FlowPerFloorArea")]
        FlowPerFloorArea = 0,
        
        [JsonProperty("FlowPerHeatingCapacity")]
        FlowPerHeatingCapacity = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingValue")]
        FractionOfAutosizedHeatingValue = 2,
        
        [JsonProperty("None")]
        None = 3,
        
        [JsonProperty("SupplyAirFlowRate")]
        SupplyAirFlowRate = 4,
    }
    
    public enum NoLoadSupplyAirFlowRateMethodType
    {
        
        [JsonProperty("FlowPerCoolingCapacity")]
        FlowPerCoolingCapacity = 0,
        
        [JsonProperty("FlowPerFloorArea")]
        FlowPerFloorArea = 1,
        
        [JsonProperty("FlowPerHeatingCapacity")]
        FlowPerHeatingCapacity = 2,
        
        [JsonProperty("FractionOfAutosizedCoolingValue")]
        FractionOfAutosizedCoolingValue = 3,
        
        [JsonProperty("FractionOfAutosizedHeatingValue")]
        FractionOfAutosizedHeatingValue = 4,
        
        [JsonProperty("None")]
        None = 5,
        
        [JsonProperty("SupplyAirFlowRate")]
        SupplyAirFlowRate = 6,
    }
    
    public enum DesignSpecificationMultispeedObjectTypeType
    {
        
        [JsonProperty("UnitarySystemPerformance:Multispeed")]
        UnitarySystemPerformanceMultispeed = 0,
    }
    
    [Description(@"The UnitarySystemPerformance object is used to specify the air flow ratio at each operating speed. This object is primarily used for multispeed DX and water coils to allow operation at alternate flow rates different from those specified in the coil object.")]
    [JsonObject("UnitarySystemPerformance:Multispeed")]
    public class UnitarySystemPerformance_Multispeed
    {
        
[Description(@"Used only for Multi speed coils Enter the number of the following sets of data for air flow rates.")]
[JsonProperty(@"Used only for Multi speed coils Enter the number of the following sets of data for air flow rates.")]
public System.Single NumberOfSpeedsForHeating { get; set; } = ;
        
[Description(@"Used only for Multi speed coils Enter the number of the following sets of data for air flow rates.")]
[JsonProperty(@"Used only for Multi speed coils Enter the number of the following sets of data for air flow rates.")]
public System.Single NumberOfSpeedsForCooling { get; set; } = ;
        
[Description(@"Controls coil operation during each HVAC timestep. This choice does not apply to speed 1 operation. Yes = operate at the highest speed possible without exceeding the current load. No = allow operation at the average of two adjacent speeds to match the current load.")]
[JsonProperty(@"Controls coil operation during each HVAC timestep. This choice does not apply to speed 1 operation. Yes = operate at the highest speed possible without exceeding the current load. No = allow operation at the average of two adjacent speeds to match the current load.")]
public YesNoDefault SingleModeOperation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Used to define the no load operating air flow rate when the system fan is specified to operate continuously.")]
[JsonProperty(@"Used to define the no load operating air flow rate when the system fan is specified to operate continuously.")]
public System.Single NoLoadSupplyAirFlowRateRatio { get; set; } = 1;
        
[JsonProperty(@"")]
public System.String FlowRatios { get; set; } = "";
    }
    
    [Description("Unitary system, heating-only with constant volume supply fan (continuous or cycli" +
        "ng) and heating coil (gas, electric, hot water, or steam). Identical to AirLoopH" +
        "VAC:UnitaryHeatOnly.")]
    [JsonObject("AirLoopHVAC:Unitary:Furnace:HeatOnly")]
    public class AirLoopHVAC_Unitary_Furnace_HeatOnly
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FurnaceAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FurnaceAirOutletNodeName { get; set; } = "";
        
[Description(@"A fan operating mode schedule value of 0 indicates cycling fan mode (supply air fan cycles on and off in tandem with the heating coil). Any other schedule value indicates continuous fan mode (supply air fan operates continuously regardless of heating coil operation). Leaving this schedule name blank will default to cycling fan mode for the entire simulation period.")]
[JsonProperty(@"A fan operating mode schedule value of 0 indicates cycling fan mode (supply air fan cycles on and off in tandem with the heating coil). Any other schedule value indicates continuous fan mode (supply air fan operates continuously regardless of heating coil operation). Leaving this schedule name blank will default to cycling fan mode for the entire simulation period.")]
public System.String SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumSupplyAirTemperature { get; set; } = (System.String)80;
        
[Description(@"This value should be > 0 and <= than the fan air flow rate.")]
[JsonProperty(@"This value should be > 0 and <= than the fan air flow rate.")]
public System.String HeatingSupplyAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControllingZoneOrThermostatLocation { get; set; } = "";
        
[Description(@"Fan:ConstantVolume only works with continuous fan operating mode (i.e. fan operating mode schedule values are greater than 0).")]
[JsonProperty(@"Fan:ConstantVolume only works with continuous fan operating mode (i.e. fan operating mode schedule values are greater than 0).")]
public YesNoDefault SupplyFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String SupplyFanName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BlowThrough");
        
[Description(@"works with gas, electric, hot water and steam heating coils")]
[JsonProperty(@"works with gas, electric, hot water and steam heating coils")]
public YesNoDefault HeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String HeatingCoilName { get; set; } = "";
    }
    
    public enum SupplyFanObjectTypeType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
    }
    
    public enum FanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum HeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    [Description(@"Unitary system, heating and cooling with constant volume supply fan (continuous or cycling), direct expansion (DX) cooling coil, heating coil (gas, electric, hot water, or steam), and optional reheat coil for dehumidification control. Identical to AirLoopHVAC:UnitaryHeatCool.")]
    [JsonObject("AirLoopHVAC:Unitary:Furnace:HeatCool")]
    public class AirLoopHVAC_Unitary_Furnace_HeatCool
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. A schedule value greater than zero (usually 1 is used) indicates that the unit is available to operate as needed. A value less than or equal to zero (usually zero is used) denotes that the unit must be off.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. A schedule value greater than zero (usually 1 is used) indicates that the unit is available to operate as needed. A value less than or equal to zero (usually zero is used) denotes that the unit must be off.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FurnaceAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String FurnaceAirOutletNodeName { get; set; } = "";
        
[Description(@"A fan operating mode schedule value of 0 indicates cycling fan mode (supply air fan cycles on and off in tandem with the cooling or heating coil). Any other schedule value indicates continuous fan mode (supply air fan operates continuously regardless of cooling or heating coil operation). Provide a schedule with non-zero values when high humidity control is specified. Leaving this schedule name blank will default to cycling fan mode for the entire simulation period.")]
[JsonProperty(@"A fan operating mode schedule value of 0 indicates cycling fan mode (supply air fan cycles on and off in tandem with the cooling or heating coil). Any other schedule value indicates continuous fan mode (supply air fan operates continuously regardless of cooling or heating coil operation). Provide a schedule with non-zero values when high humidity control is specified. Leaving this schedule name blank will default to cycling fan mode for the entire simulation period.")]
public System.String SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumSupplyAirTemperature { get; set; } = (System.String)80;
        
[Description(@"Must be less than or equal to the fan's maximum flow rate.")]
[JsonProperty(@"Must be less than or equal to the fan's maximum flow rate.")]
public System.String CoolingSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Must be less than or equal to the fan's maximum flow fate.")]
[JsonProperty(@"Must be less than or equal to the fan's maximum flow fate.")]
public System.String HeatingSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Must be less than or equal to the fan's maximum flow rate. Only used when fan operating mode is continuous (disregarded for cycling fan mode). This air flow rate is used when no heating or cooling is required (i.e., the DX coil compressor and heating coil are off). If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
[JsonProperty(@"Must be less than or equal to the fan's maximum flow rate. Only used when fan operating mode is continuous (disregarded for cycling fan mode). This air flow rate is used when no heating or cooling is required (i.e., the DX coil compressor and heating coil are off). If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
public System.String NoLoadSupplyAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControllingZoneOrThermostatLocation { get; set; } = "";
        
[Description(@"Fan:ConstantVolume only works with continuous fan operating mode (i.e. supply air fan operating mode schedule values not equal to 0).")]
[JsonProperty(@"Fan:ConstantVolume only works with continuous fan operating mode (i.e. supply air fan operating mode schedule values not equal to 0).")]
public YesNoDefault SupplyFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String SupplyFanName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BlowThrough");
        
[Description(@"works with gas, electric, hot water and steam heating coils")]
[JsonProperty(@"works with gas, electric, hot water and steam heating coils")]
public YesNoDefault HeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String HeatingCoilName { get; set; } = "";
        
[Description(@"Only works with DX cooling coil types")]
[JsonProperty(@"Only works with DX cooling coil types")]
public YesNoDefault CoolingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String CoolingCoilName { get; set; } = "";
        
[Description(@"None = meet sensible load only Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only with cooling coil type CoilSystem:Cooling:DX:HeatExchangerAssisted. This control mode allows the heat exchanger to be turned on and off based on the zone dehumidification requirements. A ZoneControl:Humidistat object is also required. CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid with all cooling coil types. When a heat exchanger assisted cooling coil is used, the heat exchanger is locked on at all times. A ZoneControl:Humidistat object is also required.")]
[JsonProperty(@"None = meet sensible load only Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only with cooling coil type CoilSystem:Cooling:DX:HeatExchangerAssisted. This control mode allows the heat exchanger to be turned on and off based on the zone dehumidification requirements. A ZoneControl:Humidistat object is also required. CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid with all cooling coil types. When a heat exchanger assisted cooling coil is used, the heat exchanger is locked on at all times. A ZoneControl:Humidistat object is also required.")]
public YesNoDefault DehumidificationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Only required if dehumidification control type is "CoolReheat" works with gas, electric, hot water and steam heating coils")]
[JsonProperty(@"Only required if dehumidification control type is "CoolReheat" works with gas, electric, hot water and steam heating coils")]
public YesNoDefault ReheatCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Only required if dehumidification control type is "CoolReheat"")]
[JsonProperty(@"Only required if dehumidification control type is "CoolReheat"")]
public System.String ReheatCoilName { get; set; } = "";
    }
    
    public enum SupplyFanObjectTypeType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
    }
    
    public enum FanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum HeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum CoolingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 1,
        
        [JsonProperty("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
        CoilSystemCoolingDXHeatExchangerAssisted = 2,
    }
    
    public enum DehumidificationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("Multimode")]
        Multimode = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum ReheatCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Desuperheater")]
        CoilHeatingDesuperheater = 0,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 1,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 2,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 3,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 4,
    }
    
    [Description("Unitary system, heating-only with constant volume supply fan (continuous or cycli" +
        "ng) and heating coil (gas, electric, hot water, or steam). Identical to AirLoopH" +
        "VAC:Unitary:Furnace:HeatOnly.")]
    [JsonObject("AirLoopHVAC:UnitaryHeatOnly")]
    public class AirLoopHVAC_UnitaryHeatOnly
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String UnitarySystemAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String UnitarySystemAirOutletNodeName { get; set; } = "";
        
[Description(@"A fan operating mode schedule value of 0 indicates cycling fan mode (supply air fan cycles on and off in tandem with the heating coil). Any other schedule value indicates continuous fan mode (supply air fan operates continuously regardless of heating coil operation). Leaving this schedule name blank will default to cycling fan mode for the entire simulation period.")]
[JsonProperty(@"A fan operating mode schedule value of 0 indicates cycling fan mode (supply air fan cycles on and off in tandem with the heating coil). Any other schedule value indicates continuous fan mode (supply air fan operates continuously regardless of heating coil operation). Leaving this schedule name blank will default to cycling fan mode for the entire simulation period.")]
public System.String SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumSupplyAirTemperature { get; set; } = (System.String)80;
        
[Description(@"This value should be > 0 and <= than the fan air flow rate.")]
[JsonProperty(@"This value should be > 0 and <= than the fan air flow rate.")]
public System.String HeatingSupplyAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControllingZoneOrThermostatLocation { get; set; } = "";
        
[Description(@"Fan:ConstantVolume only works with continuous fan operating mode (i.e. fan operating mode schedule values are greater than 0).")]
[JsonProperty(@"Fan:ConstantVolume only works with continuous fan operating mode (i.e. fan operating mode schedule values are greater than 0).")]
public YesNoDefault SupplyFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String SupplyFanName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BlowThrough");
        
[Description(@"works with gas, electric, hot water and steam heating coils")]
[JsonProperty(@"works with gas, electric, hot water and steam heating coils")]
public YesNoDefault HeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String HeatingCoilName { get; set; } = "";
    }
    
    public enum SupplyFanObjectTypeType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
    }
    
    public enum FanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum HeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    [Description(@"Unitary system, heating and cooling with constant volume supply fan (continuous or cycling), direct expansion (DX) cooling coil, heating coil (gas, electric, hot water, or steam), and optional reheat coil for dehumidification control. Identical to AirLoopHVAC:Unitary:Furnace:HeatCool.")]
    [JsonObject("AirLoopHVAC:UnitaryHeatCool")]
    public class AirLoopHVAC_UnitaryHeatCool
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String UnitarySystemAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String UnitarySystemAirOutletNodeName { get; set; } = "";
        
[Description(@"A fan operating mode schedule value of 0 indicates cycling fan mode (supply air fan cycles on and off in tandem with the cooling or heating coil). Any other schedule value indicates continuous fan mode (supply air fan operates continuously regardless of cooling or heating coil operation). Provide a schedule with non-zero values when high humidity control is specified. Leaving this schedule name blank will default to cycling fan mode for the entire simulation period.")]
[JsonProperty(@"A fan operating mode schedule value of 0 indicates cycling fan mode (supply air fan cycles on and off in tandem with the cooling or heating coil). Any other schedule value indicates continuous fan mode (supply air fan operates continuously regardless of cooling or heating coil operation). Provide a schedule with non-zero values when high humidity control is specified. Leaving this schedule name blank will default to cycling fan mode for the entire simulation period.")]
public System.String SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumSupplyAirTemperature { get; set; } = (System.String)80;
        
[Description(@"Must be less than or equal to the fan's maximum flow rate.")]
[JsonProperty(@"Must be less than or equal to the fan's maximum flow rate.")]
public System.String CoolingSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Must be less than or equal to the fan's maximum flow rate.")]
[JsonProperty(@"Must be less than or equal to the fan's maximum flow rate.")]
public System.String HeatingSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Must be less than or equal to the fan's maximum flow rate. Only used when fan operating mode is continuous (disregarded for cycling fan mode). This air flow rate is used when no heating or cooling is required (i.e., the DX coil compressor and heating coil are off). If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
[JsonProperty(@"Must be less than or equal to the fan's maximum flow rate. Only used when fan operating mode is continuous (disregarded for cycling fan mode). This air flow rate is used when no heating or cooling is required (i.e., the DX coil compressor and heating coil are off). If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
public System.String NoLoadSupplyAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControllingZoneOrThermostatLocation { get; set; } = "";
        
[Description(@"Fan:ConstantVolume only works with continuous fan operating mode (i.e. supply air fan operating mode schedule values not equal to 0).")]
[JsonProperty(@"Fan:ConstantVolume only works with continuous fan operating mode (i.e. supply air fan operating mode schedule values not equal to 0).")]
public YesNoDefault SupplyFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String SupplyFanName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BlowThrough");
        
[Description(@"works with gas, electric, hot water and steam heating coils")]
[JsonProperty(@"works with gas, electric, hot water and steam heating coils")]
public YesNoDefault HeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String HeatingCoilName { get; set; } = "";
        
[Description(@"Only works with DX cooling coil types or Coil:Cooling:DX:VariableSpeed.")]
[JsonProperty(@"Only works with DX cooling coil types or Coil:Cooling:DX:VariableSpeed.")]
public YesNoDefault CoolingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String CoolingCoilName { get; set; } = "";
        
[Description(@"None = meet sensible load only Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only with cooling coil type CoilSystem:Cooling:DX:HeatExchangerAssisted. This control mode allows the heat exchanger to be turned on and off based on the zone dehumidification requirements. A ZoneControl:Humidistat object is also required. CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid with all cooling coil types. When a heat exchanger assisted Cooling coil is used, the heat exchanger is locked on at all times. A ZoneControl:Humidistat object is also required.")]
[JsonProperty(@"None = meet sensible load only Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only with cooling coil type CoilSystem:Cooling:DX:HeatExchangerAssisted. This control mode allows the heat exchanger to be turned on and off based on the zone dehumidification requirements. A ZoneControl:Humidistat object is also required. CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid with all cooling coil types. When a heat exchanger assisted Cooling coil is used, the heat exchanger is locked on at all times. A ZoneControl:Humidistat object is also required.")]
public YesNoDefault DehumidificationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Only required if dehumidification control type is "CoolReheat" works with gas, electric, desuperheating, hot water and steam heating coils")]
[JsonProperty(@"Only required if dehumidification control type is "CoolReheat" works with gas, electric, desuperheating, hot water and steam heating coils")]
public YesNoDefault ReheatCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Only required if dehumidification control type is "CoolReheat"")]
[JsonProperty(@"Only required if dehumidification control type is "CoolReheat"")]
public System.String ReheatCoilName { get; set; } = "";
    }
    
    public enum SupplyFanObjectTypeType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
    }
    
    public enum FanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum HeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum CoolingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 1,
        
        [JsonProperty("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
        CoilSystemCoolingDXHeatExchangerAssisted = 2,
    }
    
    public enum DehumidificationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("Multimode")]
        Multimode = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum ReheatCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Desuperheater")]
        CoilHeatingDesuperheater = 0,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 1,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 2,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 3,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 4,
    }
    
    [Description("Unitary heat pump system, heating and cooling, single-speed with supply fan, dire" +
        "ct expansion (DX) cooling coil, DX heating coil (air-to-air heat pump), and supp" +
        "lemental heating coil (gas, electric, hot water, or steam).")]
    [JsonObject("AirLoopHVAC:UnitaryHeatPump:AirToAir")]
    public class AirLoopHVAC_UnitaryHeatPump_AirToAir
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. A schedule value greater than zero (usually 1 is used) indicates that the unit is available to operate as needed. A value less than or equal to zero (usually zero is used) denotes that the unit must be off.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. A schedule value greater than zero (usually 1 is used) indicates that the unit is available to operate as needed. A value less than or equal to zero (usually zero is used) denotes that the unit must be off.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Must be less than or equal to the fan's maximum flow rate.")]
[JsonProperty(@"Must be less than or equal to the fan's maximum flow rate.")]
public System.String CoolingSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Must be less than or equal to the fan's maximum flow rate.")]
[JsonProperty(@"Must be less than or equal to the fan's maximum flow rate.")]
public System.String HeatingSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Must be less than or equal to the fan's maximum flow rate. Only used when fan operating mode is continuous (disregarded for cycling fan mode). This air flow rate is used when no heating or cooling is required (i.e., the DX coil compressor and supplemental heating coil are off). If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
[JsonProperty(@"Must be less than or equal to the fan's maximum flow rate. Only used when fan operating mode is continuous (disregarded for cycling fan mode). This air flow rate is used when no heating or cooling is required (i.e., the DX coil compressor and supplemental heating coil are off). If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
public System.String NoLoadSupplyAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControllingZoneOrThermostatLocation { get; set; } = "";
        
[Description(@"Fan:ConstantVolume only works with continuous fan operating mode (i.e. fan operating mode schedule values are greater than 0 or the fan operating mode schedule name field is left blank).")]
[JsonProperty(@"Fan:ConstantVolume only works with continuous fan operating mode (i.e. fan operating mode schedule values are greater than 0 or the fan operating mode schedule name field is left blank).")]
public YesNoDefault SupplyAirFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match in the fan object")]
[JsonProperty(@"Needs to match in the fan object")]
public System.String SupplyAirFanName { get; set; } = "";
        
[Description(@"Only works with Coil:Heating:DX:SingleSpeed or Coil:Heating:DX:VariableSpeed or CoilSystem:IntegratedHeatPump:AirSource")]
[JsonProperty(@"Only works with Coil:Heating:DX:SingleSpeed or Coil:Heating:DX:VariableSpeed or CoilSystem:IntegratedHeatPump:AirSource")]
public YesNoDefault HeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match in the DX heating coil object")]
[JsonProperty(@"Needs to match in the DX heating coil object")]
public System.String HeatingCoilName { get; set; } = "";
        
[Description(@"Only works with Coil:Cooling:DX:SingleSpeed or CoilSystem:Cooling:DX:HeatExchangerAssisted or Coil:Cooling:DX:VariableSpeed or CoilSystem:IntegratedHeatPump:AirSource")]
[JsonProperty(@"Only works with Coil:Cooling:DX:SingleSpeed or CoilSystem:Cooling:DX:HeatExchangerAssisted or Coil:Cooling:DX:VariableSpeed or CoilSystem:IntegratedHeatPump:AirSource")]
public YesNoDefault CoolingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match in the DX cooling coil object")]
[JsonProperty(@"Needs to match in the DX cooling coil object")]
public System.String CoolingCoilName { get; set; } = "";
        
[Description(@"works with gas, electric, hot water and steam heating coils")]
[JsonProperty(@"works with gas, electric, hot water and steam heating coils")]
public YesNoDefault SupplementalHeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match in the supplemental heating coil object")]
[JsonProperty(@"Needs to match in the supplemental heating coil object")]
public System.String SupplementalHeatingCoilName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumSupplyAirTemperatureFromSupplementalHeater { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MaximumOutdoorDryBulbTemperatureForSupplementalHeaterOperation { get; set; } = 21;
        
[JsonProperty(@"")]
public YesNoDefault FanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BlowThrough");
        
[Description(@"A fan operating mode schedule value of 0 indicates cycling fan mode (supply air fan cycles on and off in tandem with the cooling or heating coil). Any other schedule value indicates continuous fan mode (supply air fan operates continuously regardless of cooling or heating coil operation). Leaving this schedule name blank will default to cycling fan mode for the entire simulation period.")]
[JsonProperty(@"A fan operating mode schedule value of 0 indicates cycling fan mode (supply air fan cycles on and off in tandem with the cooling or heating coil). Any other schedule value indicates continuous fan mode (supply air fan operates continuously regardless of cooling or heating coil operation). Leaving this schedule name blank will default to cycling fan mode for the entire simulation period.")]
public System.String SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        
[Description(@"None = meet sensible load only Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only with cooling coil type CoilSystem:Cooling:DX:HeatExchangerAssisted. This control mode allows the heat exchanger to be turned on and off based on the zone dehumidification requirements. A ZoneControl:Humidistat object is also required. CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid with all cooling coil types. When a heat exchanger assisted Cooling coil is used, the heat exchanger is locked on at all times. A ZoneControl:Humidistat object is also required.")]
[JsonProperty(@"None = meet sensible load only Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only with cooling coil type CoilSystem:Cooling:DX:HeatExchangerAssisted. This control mode allows the heat exchanger to be turned on and off based on the zone dehumidification requirements. A ZoneControl:Humidistat object is also required. CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid with all cooling coil types. When a heat exchanger assisted Cooling coil is used, the heat exchanger is locked on at all times. A ZoneControl:Humidistat object is also required.")]
public YesNoDefault DehumidificationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
    }
    
    public enum SupplyAirFanObjectTypeType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
    }
    
    public enum HeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:DX:SingleSpeed")]
        CoilHeatingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Heating:DX:VariableSpeed")]
        CoilHeatingDXVariableSpeed = 1,
        
        [JsonProperty("CoilSystem:IntegratedHeatPump:AirSource")]
        CoilSystemIntegratedHeatPumpAirSource = 2,
    }
    
    public enum CoolingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 1,
        
        [JsonProperty("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
        CoilSystemCoolingDXHeatExchangerAssisted = 2,
        
        [JsonProperty("CoilSystem:IntegratedHeatPump:AirSource")]
        CoilSystemIntegratedHeatPumpAirSource = 3,
    }
    
    public enum SupplementalHeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum FanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum DehumidificationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("Multimode")]
        Multimode = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    [Description(@"Unitary heat pump system, heating and cooling, single-speed with constant volume supply fan (continuous or cycling), direct expansion (DX) cooling coil, DX heating coil (water-to-air heat pump), and supplemental heating coil (gas, electric, hot water, or steam).")]
    [JsonObject("AirLoopHVAC:UnitaryHeatPump:WaterToAir")]
    public class AirLoopHVAC_UnitaryHeatPump_WaterToAir
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"This value should be > 0 and <= than the fan air flow rate.")]
[JsonProperty(@"This value should be > 0 and <= than the fan air flow rate.")]
public System.String SupplyAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControllingZoneOrThermostatLocation { get; set; } = "";
        
[Description(@"Only works with On/Off Fan")]
[JsonProperty(@"Only works with On/Off Fan")]
public YesNoDefault SupplyAirFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match Fan:OnOff object")]
[JsonProperty(@"Needs to match Fan:OnOff object")]
public System.String SupplyAirFanName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match in the water-to-air heat pump heating coil object")]
[JsonProperty(@"Needs to match in the water-to-air heat pump heating coil object")]
public System.String HeatingCoilName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single HeatingConvergence { get; set; } = 0.001;
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match in the water-to-air heat pump cooling coil object")]
[JsonProperty(@"Needs to match in the water-to-air heat pump cooling coil object")]
public System.String CoolingCoilName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single CoolingConvergence { get; set; } = 0.001;
        
[Description(@"The maximum on-off cycling rate for the compressor Suggested value is 2.5 for a typical heat pump")]
[JsonProperty(@"The maximum on-off cycling rate for the compressor Suggested value is 2.5 for a typical heat pump")]
public System.Single MaximumCyclingRate { get; set; } = 2.5;
        
[Description(@"Time constant for the cooling coil's capacity to reach steady state after startup Suggested value is 60 for a typical heat pump")]
[JsonProperty(@"Time constant for the cooling coil's capacity to reach steady state after startup Suggested value is 60 for a typical heat pump")]
public System.Single HeatPumpTimeConstant { get; set; } = 60;
        
[Description(@"The fraction of on-cycle power use to adjust the part load fraction based on the off-cycle power consumption due to crankcase heaters, controls, fans, and etc. Suggested value is 0.01 for a typical heat pump")]
[JsonProperty(@"The fraction of on-cycle power use to adjust the part load fraction based on the off-cycle power consumption due to crankcase heaters, controls, fans, and etc. Suggested value is 0.01 for a typical heat pump")]
public System.Single FractionOfOnCyclePowerUse { get; set; } = 0.01;
        
[Description(@"Programmed time delay for heat pump fan to shut off after compressor cycle off. Only required when fan operating mode is cycling Enter 0 when fan operating mode is continuous")]
[JsonProperty(@"Programmed time delay for heat pump fan to shut off after compressor cycle off. Only required when fan operating mode is cycling Enter 0 when fan operating mode is continuous")]
public System.Single HeatPumpFanDelayTime { get; set; } = 60;
        
[Description(@"works with gas, electric, hot water and steam heating coils")]
[JsonProperty(@"works with gas, electric, hot water and steam heating coils")]
public YesNoDefault SupplementalHeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match in the supplemental heating coil object")]
[JsonProperty(@"Needs to match in the supplemental heating coil object")]
public System.String SupplementalHeatingCoilName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumSupplyAirTemperatureFromSupplementalHeater { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MaximumOutdoorDryBulbTemperatureForSupplementalHeaterOperation { get; set; } = 21;
        
[JsonProperty(@"")]
public System.String OutdoorDryBulbTemperatureSensorNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BlowThrough");
        
[Description(@"Enter the name of a schedule that controls fan operation. Schedule values of 0 denote cycling fan operation (fan cycles with cooling or heating coil). Schedule values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this field is left blank.")]
[JsonProperty(@"Enter the name of a schedule that controls fan operation. Schedule values of 0 denote cycling fan operation (fan cycles with cooling or heating coil). Schedule values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this field is left blank.")]
public System.String SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        
[Description(@"None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid only with Coil:Cooling:WaterToAirHeatPump:EquationFit or Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit")]
[JsonProperty(@"None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid only with Coil:Cooling:WaterToAirHeatPump:EquationFit or Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit")]
public YesNoDefault DehumidificationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"used only when the heat pump coils are of the type WaterToAirHeatPump:EquationFit Constant results in 100% water flow regardless of compressor PLR Cycling results in water flow that matches compressor PLR ConstantOnDemand results in 100% water flow whenever the coil is on, but is 0% whenever the coil has no load")]
[JsonProperty(@"used only when the heat pump coils are of the type WaterToAirHeatPump:EquationFit Constant results in 100% water flow regardless of compressor PLR Cycling results in water flow that matches compressor PLR ConstantOnDemand results in 100% water flow whenever the coil is on, but is 0% whenever the coil has no load")]
public YesNoDefault HeatPumpCoilWaterFlowMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Cycling");
    }
    
    public enum SupplyAirFanObjectTypeType
    {
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 0,
    }
    
    public enum HeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:WaterToAirHeatPump:EquationFit")]
        CoilHeatingWaterToAirHeatPumpEquationFit = 0,
        
        [JsonProperty("Coil:Heating:WaterToAirHeatPump:ParameterEstimation")]
        CoilHeatingWaterToAirHeatPumpParameterEstimation = 1,
        
        [JsonProperty("Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit")]
        CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit = 2,
    }
    
    public enum CoolingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:WaterToAirHeatPump:EquationFit")]
        CoilCoolingWaterToAirHeatPumpEquationFit = 0,
        
        [JsonProperty("Coil:Cooling:WaterToAirHeatPump:ParameterEstimation")]
        CoilCoolingWaterToAirHeatPumpParameterEstimation = 1,
        
        [JsonProperty("Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit")]
        CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit = 2,
    }
    
    public enum SupplementalHeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum FanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum DehumidificationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("None")]
        None = 2,
    }
    
    public enum HeatPumpCoilWaterFlowModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Constant")]
        Constant = 1,
        
        [JsonProperty("ConstantOnDemand")]
        ConstantOnDemand = 2,
        
        [JsonProperty("Cycling")]
        Cycling = 3,
    }
    
    [Description(@"Unitary system, heating and cooling with constant volume supply fan (continuous or cycling), direct expansion (DX) cooling coil, heating coil (gas, electric, hot water, steam, or DX air-to-air heat pump) and bypass damper for variable volume flow to terminal units. Used with AirTerminal:SingleDuct:VAV:HeatAndCool:Reheat or AirTerminal:SingleDuct:VAV:HeatAndCool:NoReheat.")]
    [JsonObject("AirLoopHVAC:UnitaryHeatCool:VAVChangeoverBypass")]
    public class AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Enter the availability schedule name. Schedule values of zero denote system is Off. Non-zero schedule values denote system is available to operate.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Enter the availability schedule name. Schedule values of zero denote system is Off. Non-zero schedule values denote system is available to operate.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Enter the system air flow rate during cooling operation or specify autosize.")]
[JsonProperty(@"Enter the system air flow rate during cooling operation or specify autosize.")]
public System.String CoolingSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Enter the system air flow rate during heating operation or specify autosize.")]
[JsonProperty(@"Enter the system air flow rate during heating operation or specify autosize.")]
public System.String HeatingSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Only used when the supply air fan operating mode is continuous (see field Supply air fan operating mode schedule name). This system air flow rate is used when no heating or cooling is required and the coils are off. If this field is left blank or zero, the system air flow rate from the previous on cycle (either cooling or heating) is used.")]
[JsonProperty(@"Only used when the supply air fan operating mode is continuous (see field Supply air fan operating mode schedule name). This system air flow rate is used when no heating or cooling is required and the coils are off. If this field is left blank or zero, the system air flow rate from the previous on cycle (either cooling or heating) is used.")]
public System.String NoLoadSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Enter the outdoor air flow rate during cooling operation or specify autosize.")]
[JsonProperty(@"Enter the outdoor air flow rate during cooling operation or specify autosize.")]
public System.String CoolingOutdoorAirFlowRate { get; set; } = "";
        
[Description(@"Enter the outdoor air flow rate during heating operation or specify autosize.")]
[JsonProperty(@"Enter the outdoor air flow rate during heating operation or specify autosize.")]
public System.String HeatingOutdoorAirFlowRate { get; set; } = "";
        
[Description(@"Only used when the supply air fan operating mode is continuous (see field Supply air fan operating mode schedule name). This outdoor air flow rate is used when no heating or cooling is required and the coils are off. If this field is left blank or zero, the outdoor air flow rate from the previous on cycle (either cooling or heating) is used.")]
[JsonProperty(@"Only used when the supply air fan operating mode is continuous (see field Supply air fan operating mode schedule name). This outdoor air flow rate is used when no heating or cooling is required and the coils are off. If this field is left blank or zero, the outdoor air flow rate from the previous on cycle (either cooling or heating) is used.")]
public System.String NoLoadOutdoorAirFlowRate { get; set; } = "";
        
[Description(@"Enter the name of a schedule that contains multipliers for the outdoor air flow rates. Schedule values must be from 0 to 1. If field is left blank, model assumes multiplier is 1 for the entire simulation period.")]
[JsonProperty(@"Enter the name of a schedule that contains multipliers for the outdoor air flow rates. Schedule values must be from 0 to 1. If field is left blank, model assumes multiplier is 1 for the entire simulation period.")]
public System.String OutdoorAirFlowRateMultiplierScheduleName { get; set; } = "";
        
[Description(@"Enter the name of the unitary system's air inlet node.")]
[JsonProperty(@"Enter the name of the unitary system's air inlet node.")]
public System.String AirInletNodeName { get; set; } = "";
        
[Description(@"Enter the name of the bypass duct mixer node. This name should be the name of the return air node for the outdoor air mixer associated with this system. This node name must be different from the air inlet node name.")]
[JsonProperty(@"Enter the name of the bypass duct mixer node. This name should be the name of the return air node for the outdoor air mixer associated with this system. This node name must be different from the air inlet node name.")]
public System.String BypassDuctMixerNodeName { get; set; } = "";
        
[Description(@"Enter the name of the bypass duct splitter node. This splitter air node is the outlet node of the last component in this unitary system. For blow through fan placement, the splitter air node is the outlet node of the heating coil. For draw through fan placement, the splitter node is the outlet node of the supply air fan.")]
[JsonProperty(@"Enter the name of the bypass duct splitter node. This splitter air node is the outlet node of the last component in this unitary system. For blow through fan placement, the splitter air node is the outlet node of the heating coil. For draw through fan placement, the splitter node is the outlet node of the supply air fan.")]
public System.String BypassDuctSplitterNodeName { get; set; } = "";
        
[Description(@"Enter the name of the unitary system's air outlet node.")]
[JsonProperty(@"Enter the name of the unitary system's air outlet node.")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"currently only one type OutdoorAir:Mixer object is available.")]
[JsonProperty(@"currently only one type OutdoorAir:Mixer object is available.")]
public YesNoDefault OutdoorAirMixerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of the outdoor air mixer used with this unitary system.")]
[JsonProperty(@"Enter the name of the outdoor air mixer used with this unitary system.")]
public System.String OutdoorAirMixerName { get; set; } = "";
        
[Description(@"Specify the type of supply air fan used in this unitary system.")]
[JsonProperty(@"Specify the type of supply air fan used in this unitary system.")]
public YesNoDefault SupplyAirFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of the supply air fan used in this unitary system.")]
[JsonProperty(@"Enter the name of the supply air fan used in this unitary system.")]
public System.String SupplyAirFanName { get; set; } = "";
        
[Description(@"Specify supply air fan placement as either blow through or draw through. BlowThrough means the supply air fan is located before the cooling coil. DrawThrough means the supply air fan is located after the heating coil.")]
[JsonProperty(@"Specify supply air fan placement as either blow through or draw through. BlowThrough means the supply air fan is located before the cooling coil. DrawThrough means the supply air fan is located after the heating coil.")]
public YesNoDefault SupplyAirFanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of a schedule to control the supply air fan. Schedule Name values of zero mean that the supply air fan will cycle off if there is no cooling or heating load in any of the zones being served by this system. Non-zero schedule values mean that the supply air fan will operate continuously even if there is no cooling or heating load in any of the zones being served. If this field is left blank, the supply air fan will operate continuously for the entire simulation period.")]
[JsonProperty(@"Enter the name of a schedule to control the supply air fan. Schedule Name values of zero mean that the supply air fan will cycle off if there is no cooling or heating load in any of the zones being served by this system. Non-zero schedule values mean that the supply air fan will operate continuously even if there is no cooling or heating load in any of the zones being served. If this field is left blank, the supply air fan will operate continuously for the entire simulation period.")]
public System.String SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        
[Description(@"Specify the type of cooling coil used in this unitary system.")]
[JsonProperty(@"Specify the type of cooling coil used in this unitary system.")]
public YesNoDefault CoolingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of the cooling coil used in this unitary system.")]
[JsonProperty(@"Enter the name of the cooling coil used in this unitary system.")]
public System.String CoolingCoilName { get; set; } = "";
        
[Description(@"works with DX, gas, electric, hot water and steam heating coils Specify the type of heating coil used in this unitary system.")]
[JsonProperty(@"works with DX, gas, electric, hot water and steam heating coils Specify the type of heating coil used in this unitary system.")]
public YesNoDefault HeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of the heating coil used in this unitary system.")]
[JsonProperty(@"Enter the name of the heating coil used in this unitary system.")]
public System.String HeatingCoilName { get; set; } = "";
        
[Description(@"CoolingPriority = system provides cooling if any zone requires cooling. HeatingPriority = system provides heating if any zone requires heating. ZonePriority = system controlled based on the total number of zones requiring cooling or heating (highest number of zones in cooling or heating determines the system's operating mode). LoadPriority = system provides cooling or heating based on total zone loads.")]
[JsonProperty(@"CoolingPriority = system provides cooling if any zone requires cooling. HeatingPriority = system provides heating if any zone requires heating. ZonePriority = system controlled based on the total number of zones requiring cooling or heating (highest number of zones in cooling or heating determines the system's operating mode). LoadPriority = system provides cooling or heating based on total zone loads.")]
public YesNoDefault PriorityControlMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ZonePriority");
        
[Description(@"Specify the minimum outlet air temperature allowed for this unitary system during cooling operation. This value should be less than the maximum outlet air temperature during heating operation.")]
[JsonProperty(@"Specify the minimum outlet air temperature allowed for this unitary system during cooling operation. This value should be less than the maximum outlet air temperature during heating operation.")]
public System.Single MinimumOutletAirTemperatureDuringCoolingOperation { get; set; } = 8;
        
[Description(@"Specify the maximum outlet air temperature allowed for this unitary system during heating operation. This value should be greater than the minimum outlet air temperature during cooling operation.")]
[JsonProperty(@"Specify the maximum outlet air temperature allowed for this unitary system during heating operation. This value should be greater than the minimum outlet air temperature during cooling operation.")]
public System.Single MaximumOutletAirTemperatureDuringHeatingOperation { get; set; } = 50;
        
[Description(@"None = meet sensible load only. Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only with Coil:Cooling:DX:TwoStageWithHumidityControlMode. CoolReheat = cool beyond the Dry-Bulb temperature setpoint as required to meet the humidity setpoint. Valid only with Coil:Cooling:DX:TwoStageWithHumidityControlMode. For all dehumidification controls, the max humidity setpoint on this unitary system's air outlet node is used. This must be set using ZoneControl:Humidistat and SetpointManager:SingleZone:Humidity:Maximum, SetpointManager:MultiZone:Humidity:Maximum or SetpointManager:MultiZone:MaximumHumidity:Average objects.")]
[JsonProperty(@"None = meet sensible load only. Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only with Coil:Cooling:DX:TwoStageWithHumidityControlMode. CoolReheat = cool beyond the Dry-Bulb temperature setpoint as required to meet the humidity setpoint. Valid only with Coil:Cooling:DX:TwoStageWithHumidityControlMode. For all dehumidification controls, the max humidity setpoint on this unitary system's air outlet node is used. This must be set using ZoneControl:Humidistat and SetpointManager:SingleZone:Humidity:Maximum, SetpointManager:MultiZone:Humidity:Maximum or SetpointManager:MultiZone:MaximumHumidity:Average objects.")]
public YesNoDefault DehumidificationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Enter the name of the bypass duct node connected to a plenum or mixer. This field is required when this HVAC System is connected to a plenum or mixer. This is a different node name than that entered in the Bypass Duct Splitter Node Name field.")]
[JsonProperty(@"Enter the name of the bypass duct node connected to a plenum or mixer. This field is required when this HVAC System is connected to a plenum or mixer. This is a different node name than that entered in the Bypass Duct Splitter Node Name field.")]
public System.String PlenumOrMixerInletNodeName { get; set; } = "";
        
[Description(@"This is the minimum amount of time the unit operates in cooling or heating mode before changing modes.")]
[JsonProperty(@"This is the minimum amount of time the unit operates in cooling or heating mode before changing modes.")]
public System.Single MinimumRuntimeBeforeOperatingModeChange { get; set; } = 0.25;
    }
    
    public enum OutdoorAirMixerObjectTypeType
    {
        
        [JsonProperty("OutdoorAir:Mixer")]
        OutdoorAirMixer = 0,
    }
    
    public enum SupplyAirFanObjectTypeType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 2,
    }
    
    public enum SupplyAirFanPlacementType
    {
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 0,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 1,
    }
    
    public enum CoolingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:TwoStageWithHumidityControlMode")]
        CoilCoolingDXTwoStageWithHumidityControlMode = 1,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 2,
        
        [JsonProperty("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
        CoilSystemCoolingDXHeatExchangerAssisted = 3,
    }
    
    public enum HeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:DX:SingleSpeed")]
        CoilHeatingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Heating:DX:VariableSpeed")]
        CoilHeatingDXVariableSpeed = 1,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 2,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 3,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 4,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 5,
    }
    
    public enum PriorityControlModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CoolingPriority")]
        CoolingPriority = 1,
        
        [JsonProperty("HeatingPriority")]
        HeatingPriority = 2,
        
        [JsonProperty("LoadPriority")]
        LoadPriority = 3,
        
        [JsonProperty("ZonePriority")]
        ZonePriority = 4,
    }
    
    public enum DehumidificationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CoolReheat")]
        CoolReheat = 1,
        
        [JsonProperty("Multimode")]
        Multimode = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    [Description(@"Unitary system, heating and cooling, multi-speed with constant volume supply fan (continuous or cycling), direct expansion (DX) cooling coil, heating coil (DX air-to-air heat pump, gas, electric, hot water, or steam), and supplemental heating coil (gas, electric, hot water, or steam).")]
    [JsonObject("AirLoopHVAC:UnitaryHeatPump:AirToAir:MultiSpeed")]
    public class AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ControllingZoneOrThermostatLocation { get; set; } = "";
        
[Description(@"Select the type of supply air fan used in this unitary system.")]
[JsonProperty(@"Select the type of supply air fan used in this unitary system.")]
public YesNoDefault SupplyAirFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of the supply air fan used in this unitary system.")]
[JsonProperty(@"Enter the name of the supply air fan used in this unitary system.")]
public System.String SupplyAirFanName { get; set; } = "";
        
[Description(@"Select supply air fan placement as either BlowThrough or DrawThrough. BlowThrough means the supply air fan is located before the cooling coil. DrawThrough means the supply air fan is located after the heating coil but before the optional supplemental heating coil.")]
[JsonProperty(@"Select supply air fan placement as either BlowThrough or DrawThrough. BlowThrough means the supply air fan is located before the cooling coil. DrawThrough means the supply air fan is located after the heating coil but before the optional supplemental heating coil.")]
public YesNoDefault SupplyAirFanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of a schedule to control the supply air fan. Schedule values of zero mean that the supply air fan will cycle off if there is no cooling or heating load in the control zone. Non-zero schedule values mean that the supply air fan will operate continuously even if there is no cooling or heating load in the control zone. If this field is left blank, the supply air fan will operate continuously for the entire simulation period.")]
[JsonProperty(@"Enter the name of a schedule to control the supply air fan. Schedule values of zero mean that the supply air fan will cycle off if there is no cooling or heating load in the control zone. Non-zero schedule values mean that the supply air fan will operate continuously even if there is no cooling or heating load in the control zone. If this field is left blank, the supply air fan will operate continuously for the entire simulation period.")]
public System.String SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        
[Description(@"Multi Speed DX, Electric, Gas, and Single speed Water and Steam coils")]
[JsonProperty(@"Multi Speed DX, Electric, Gas, and Single speed Water and Steam coils")]
public YesNoDefault HeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String HeatingCoilName { get; set; } = "";
        
[Description(@"Needs to match the corresponding minimum outdoor temperature defined in the DX heating coil object.")]
[JsonProperty(@"Needs to match the corresponding minimum outdoor temperature defined in the DX heating coil object.")]
public System.Single MinimumOutdoorDryBulbTemperatureForCompressorOperation { get; set; } = -8;
        
[Description(@"Only works with Coil:Cooling:DX:MultiSpeed")]
[JsonProperty(@"Only works with Coil:Cooling:DX:MultiSpeed")]
public YesNoDefault CoolingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match in the DX Cooling Coil object")]
[JsonProperty(@"Needs to match in the DX Cooling Coil object")]
public System.String CoolingCoilName { get; set; } = "";
        
[Description(@"works with gas, electric, hot water and steam heating coils")]
[JsonProperty(@"works with gas, electric, hot water and steam heating coils")]
public YesNoDefault SupplementalHeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match in the supplemental heating coil object")]
[JsonProperty(@"Needs to match in the supplemental heating coil object")]
public System.String SupplementalHeatingCoilName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumSupplyAirTemperatureFromSupplementalHeater { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MaximumOutdoorDryBulbTemperatureForSupplementalHeaterOperation { get; set; } = 21;
        
[JsonProperty(@"")]
public System.Single AuxiliaryOnCycleElectricPower { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single AuxiliaryOffCycleElectricPower { get; set; } = 0;
        
[Description(@"If non-zero, then the heat recovery inlet and outlet node names must be entered. Used for heat recovery to an EnergyPlus plant loop.")]
[JsonProperty(@"If non-zero, then the heat recovery inlet and outlet node names must be entered. Used for heat recovery to an EnergyPlus plant loop.")]
public System.Single DesignHeatRecoveryWaterFlowRate { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single MaximumTemperatureForHeatRecovery { get; set; } = 80;
        
[JsonProperty(@"")]
public System.String HeatRecoveryWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatRecoveryWaterOutletNodeName { get; set; } = "";
        
[Description(@"Only used when the supply air fan operating mode is continuous (see field Supply Air Fan Operating Mode Schedule Name). This air flow rate is used when no heating or cooling is required and the coils are off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
[JsonProperty(@"Only used when the supply air fan operating mode is continuous (see field Supply Air Fan Operating Mode Schedule Name). This air flow rate is used when no heating or cooling is required and the coils are off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
public System.String NoLoadSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Enter the number of the following sets of data for air flow rates. If Heating Coil Object Type is Coil:Heating:Water or Coil:Heating:Steam, this field should be 1.")]
[JsonProperty(@"Enter the number of the following sets of data for air flow rates. If Heating Coil Object Type is Coil:Heating:Water or Coil:Heating:Steam, this field should be 1.")]
public System.Single NumberOfSpeedsForHeating { get; set; } = ;
        
[Description(@"Enter the number of the following sets of data for air flow rates.")]
[JsonProperty(@"Enter the number of the following sets of data for air flow rates.")]
public System.Single NumberOfSpeedsForCooling { get; set; } = ;
        
[Description(@"Enter the operating supply air flow rate during heating operation or specify autosize.")]
[JsonProperty(@"Enter the operating supply air flow rate during heating operation or specify autosize.")]
public System.String HeatingSpeedSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Enter the operating supply air flow rate during heating operation or specify autosize.")]
[JsonProperty(@"Enter the operating supply air flow rate during heating operation or specify autosize.")]
public System.String HeatingSpeedSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Enter the operating supply air flow rate during heating operation or specify autosize.")]
[JsonProperty(@"Enter the operating supply air flow rate during heating operation or specify autosize.")]
public System.String HeatingSpeedSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Enter the operating supply air flow rate during heating operation or specify autosize.")]
[JsonProperty(@"Enter the operating supply air flow rate during heating operation or specify autosize.")]
public System.String HeatingSpeedSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Enter the operating supply air flow rate during cooling operation or specify autosize.")]
[JsonProperty(@"Enter the operating supply air flow rate during cooling operation or specify autosize.")]
public System.String CoolingSpeedSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Enter the operating supply air flow rate during cooling operation or specify autosize.")]
[JsonProperty(@"Enter the operating supply air flow rate during cooling operation or specify autosize.")]
public System.String CoolingSpeedSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Enter the operating supply air flow rate during cooling operation or specify autosize.")]
[JsonProperty(@"Enter the operating supply air flow rate during cooling operation or specify autosize.")]
public System.String CoolingSpeedSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Enter the operating supply air flow rate during cooling operation or specify autosize.")]
[JsonProperty(@"Enter the operating supply air flow rate during cooling operation or specify autosize.")]
public System.String CoolingSpeedSupplyAirFlowRate { get; set; } = "";
    }
    
    public enum SupplyAirFanObjectTypeType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
    }
    
    public enum SupplyAirFanPlacementType
    {
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 0,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 1,
    }
    
    public enum HeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:DX:MultiSpeed")]
        CoilHeatingDXMultiSpeed = 0,
        
        [JsonProperty("Coil:Heating:Electric:MultiStage")]
        CoilHeatingElectricMultiStage = 1,
        
        [JsonProperty("Coil:Heating:Gas:MultiStage")]
        CoilHeatingGasMultiStage = 2,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 3,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 4,
    }
    
    public enum CoolingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:DX:MultiSpeed")]
        CoilCoolingDXMultiSpeed = 0,
    }
    
    public enum SupplementalHeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
}
namespace EnergyPlus.UserDefinedHVACandPlantComponentModels
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Defines a generic zone air unit for custom modeling using Energy Management Syste" +
        "m or External Interface")]
    [JsonObject("ZoneHVAC:ForcedAir:UserDefined")]
    public class ZoneHVAC_ForcedAir_UserDefined
    {
        
[JsonProperty(@"")]
public System.String OverallModelSimulationProgramCallingManagerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ModelSetupAndSizingProgramCallingManagerName { get; set; } = "";
        
[Description(@"Air inlet node for the unit must be a zone air exhaust Node.")]
[JsonProperty(@"Air inlet node for the unit must be a zone air exhaust Node.")]
public System.String PrimaryAirInletNodeName { get; set; } = "";
        
[Description(@"Air outlet node for the unit must be a zone air inlet node.")]
[JsonProperty(@"Air outlet node for the unit must be a zone air inlet node.")]
public System.String PrimaryAirOutletNodeName { get; set; } = "";
        
[Description(@"Inlet air used for heat rejection or air source")]
[JsonProperty(@"Inlet air used for heat rejection or air source")]
public System.String SecondaryAirInletNodeName { get; set; } = "";
        
[Description(@"Outlet air used for heat rejection or air source")]
[JsonProperty(@"Outlet air used for heat rejection or air source")]
public System.String SecondaryAirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfPlantLoopConnections { get; set; } = ;
        
[JsonProperty(@"")]
public System.String PlantConnectionInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantConnectionOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantConnectionInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantConnectionOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantConnectionInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantConnectionOutletNodeName { get; set; } = "";
        
[Description(@"Water use storage tank for alternate source of water consumed by device")]
[JsonProperty(@"Water use storage tank for alternate source of water consumed by device")]
public System.String SupplyInletWaterStorageTankName { get; set; } = "";
        
[Description(@"Water use storage tank for collection of condensate by device")]
[JsonProperty(@"Water use storage tank for collection of condensate by device")]
public System.String CollectionOutletWaterStorageTankName { get; set; } = "";
        
[Description(@"Used for modeling device losses to surrounding zone")]
[JsonProperty(@"Used for modeling device losses to surrounding zone")]
public System.String AmbientZoneName { get; set; } = "";
    }
    
    [Description("Defines a generic single duct air terminal unit for custom modeling using Energy " +
        "Management System or External Interface")]
    [JsonObject("AirTerminal:SingleDuct:UserDefined")]
    public class AirTerminal_SingleDuct_UserDefined
    {
        
[JsonProperty(@"")]
public System.String OverallModelSimulationProgramCallingManagerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ModelSetupAndSizingProgramCallingManagerName { get; set; } = "";
        
[Description(@"Air inlet node for the unit must be a zone splitter outlet.")]
[JsonProperty(@"Air inlet node for the unit must be a zone splitter outlet.")]
public System.String PrimaryAirInletNodeName { get; set; } = "";
        
[Description(@"Air outlet node for the unit must be a zone air inlet node.")]
[JsonProperty(@"Air outlet node for the unit must be a zone air inlet node.")]
public System.String PrimaryAirOutletNodeName { get; set; } = "";
        
[Description(@"Inlet air used for heat rejection or air source")]
[JsonProperty(@"Inlet air used for heat rejection or air source")]
public System.String SecondaryAirInletNodeName { get; set; } = "";
        
[Description(@"Outlet air used for heat rejection or air source")]
[JsonProperty(@"Outlet air used for heat rejection or air source")]
public System.String SecondaryAirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfPlantLoopConnections { get; set; } = ;
        
[JsonProperty(@"")]
public System.String PlantConnectionInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantConnectionOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantConnectionInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantConnectionOutletNodeName { get; set; } = "";
        
[Description(@"Water use storage tank for alternate source of water consumed by device")]
[JsonProperty(@"Water use storage tank for alternate source of water consumed by device")]
public System.String SupplyInletWaterStorageTankName { get; set; } = "";
        
[Description(@"Water use storage tank for collection of condensate by device")]
[JsonProperty(@"Water use storage tank for collection of condensate by device")]
public System.String CollectionOutletWaterStorageTankName { get; set; } = "";
        
[Description(@"Used for modeling device losses to surrounding zone")]
[JsonProperty(@"Used for modeling device losses to surrounding zone")]
public System.String AmbientZoneName { get; set; } = "";
    }
    
    [Description("Defines a generic air system component for custom modeling using Energy Managemen" +
        "t System or External Interface")]
    [JsonObject("Coil:UserDefined")]
    public class Coil_UserDefined
    {
        
[JsonProperty(@"")]
public System.String OverallModelSimulationProgramCallingManagerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ModelSetupAndSizingProgramCallingManagerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfAirConnections { get; set; } = ;
        
[Description(@"Inlet air for primary air stream")]
[JsonProperty(@"Inlet air for primary air stream")]
public System.String AirConnectionInletNodeName { get; set; } = "";
        
[Description(@"Outlet air for primary air stream")]
[JsonProperty(@"Outlet air for primary air stream")]
public System.String AirConnectionOutletNodeName { get; set; } = "";
        
[Description(@"Inlet air for secondary air stream")]
[JsonProperty(@"Inlet air for secondary air stream")]
public System.String AirConnectionInletNodeName { get; set; } = "";
        
[Description(@"Outlet air for secondary air stream")]
[JsonProperty(@"Outlet air for secondary air stream")]
public System.String AirConnectionOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault PlantConnectionIsUsed { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String PlantConnectionInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantConnectionOutletNodeName { get; set; } = "";
        
[Description(@"Water use storage tank for alternate source of water consumed by device")]
[JsonProperty(@"Water use storage tank for alternate source of water consumed by device")]
public System.String SupplyInletWaterStorageTankName { get; set; } = "";
        
[Description(@"Water use storage tank for collection of condensate by device")]
[JsonProperty(@"Water use storage tank for collection of condensate by device")]
public System.String CollectionOutletWaterStorageTankName { get; set; } = "";
        
[Description(@"Used for modeling device losses to surrounding zone")]
[JsonProperty(@"Used for modeling device losses to surrounding zone")]
public System.String AmbientZoneName { get; set; } = "";
    }
    
    public enum PlantConnectionIsUsedType
    {
        
        [JsonProperty("No")]
        No = 0,
        
        [JsonProperty("Yes")]
        Yes = 1,
    }
    
    [Description("Defines a generic plant component for custom modeling using Energy Management Sys" +
        "tem or External Interface")]
    [JsonObject("PlantComponent:UserDefined")]
    public class PlantComponent_UserDefined
    {
        
[JsonProperty(@"")]
public System.String MainModelProgramCallingManagerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single NumberOfPlantLoopConnections { get; set; } = ;
        
[JsonProperty(@"")]
public System.String PlantConnectionInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantConnectionOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault PlantConnectionLoadingMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault PlantConnectionLoopFlowRequestMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String PlantConnectionInitializationProgramCallingManagerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantConnectionSimulationProgramCallingManagerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantConnectionInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantConnectionOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault PlantConnectionLoadingMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault PlantConnectionLoopFlowRequestMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String PlantConnectionInitializationProgramCallingManagerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantConnectionSimulationProgramCallingManagerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantConnectionInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantConnectionOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault PlantConnectionLoadingMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault PlantConnectionLoopFlowRequestMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String PlantConnectionInitializationProgramCallingManagerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantConnectionSimulationProgramCallingManagerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantConnectionInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantConnectionOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault PlantConnectionLoadingMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault PlantConnectionLoopFlowRequestMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String PlantConnectionInitializationProgramCallingManagerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String PlantConnectionSimulationProgramCallingManagerName { get; set; } = "";
        
[Description(@"Inlet air used for heat rejection or air source")]
[JsonProperty(@"Inlet air used for heat rejection or air source")]
public System.String AirConnectionInletNodeName { get; set; } = "";
        
[Description(@"Outlet air used for heat rejection or air source")]
[JsonProperty(@"Outlet air used for heat rejection or air source")]
public System.String AirConnectionOutletNodeName { get; set; } = "";
        
[Description(@"Water use storage tank for alternate source of water consumed by device")]
[JsonProperty(@"Water use storage tank for alternate source of water consumed by device")]
public System.String SupplyInletWaterStorageTankName { get; set; } = "";
        
[Description(@"Water use storage tank for collection of condensate by device")]
[JsonProperty(@"Water use storage tank for collection of condensate by device")]
public System.String CollectionOutletWaterStorageTankName { get; set; } = "";
        
[Description(@"Used for modeling device losses to surrounding zone")]
[JsonProperty(@"Used for modeling device losses to surrounding zone")]
public System.String AmbientZoneName { get; set; } = "";
    }
    
    public enum PlantConnectionLoadingModeType
    {
        
        [JsonProperty("DemandsLoad")]
        DemandsLoad = 0,
        
        [JsonProperty("MeetsLoadWithNominalCapacity")]
        MeetsLoadWithNominalCapacity = 1,
        
        [JsonProperty("MeetsLoadWithNominalCapacityHiOutLimit")]
        MeetsLoadWithNominalCapacityHiOutLimit = 2,
        
        [JsonProperty("MeetsLoadWithNominalCapacityLowOutLimit")]
        MeetsLoadWithNominalCapacityLowOutLimit = 3,
        
        [JsonProperty("MeetsLoadWithPassiveCapacity")]
        MeetsLoadWithPassiveCapacity = 4,
    }
    
    public enum PlantConnectionLoopFlowRequestModeType
    {
        
        [JsonProperty("NeedsFlowAndTurnsLoopOn")]
        NeedsFlowAndTurnsLoopOn = 0,
        
        [JsonProperty("NeedsFlowIfLoopOn")]
        NeedsFlowIfLoopOn = 1,
        
        [JsonProperty("ReceivesWhateverFlowAvailable")]
        ReceivesWhateverFlowAvailable = 2,
    }
    
    public enum PlantConnectionLoadingModeType
    {
        
        [JsonProperty("DemandsLoad")]
        DemandsLoad = 0,
        
        [JsonProperty("MeetLoadWithNominalCapacity")]
        MeetLoadWithNominalCapacity = 1,
        
        [JsonProperty("MeetLoadWithNominalCapacityHiOutLimit")]
        MeetLoadWithNominalCapacityHiOutLimit = 2,
        
        [JsonProperty("MeetLoadWithNominalCapacityLowOutLimit")]
        MeetLoadWithNominalCapacityLowOutLimit = 3,
        
        [JsonProperty("MeetLoadWithPassiveCapacity")]
        MeetLoadWithPassiveCapacity = 4,
    }
    
    public enum PlantConnectionLoopFlowRequestModeType
    {
        
        [JsonProperty("NeedsFlowAndTurnsLoopOn")]
        NeedsFlowAndTurnsLoopOn = 0,
        
        [JsonProperty("NeedsFlowIfLoopOn")]
        NeedsFlowIfLoopOn = 1,
        
        [JsonProperty("ReceivesWhateverFlowAvailable")]
        ReceivesWhateverFlowAvailable = 2,
    }
    
    public enum PlantConnectionLoadingModeType
    {
        
        [JsonProperty("DemandsLoad")]
        DemandsLoad = 0,
        
        [JsonProperty("MeetLoadWithNominalCapacity")]
        MeetLoadWithNominalCapacity = 1,
        
        [JsonProperty("MeetLoadWithNominalCapacityHiOutLimit")]
        MeetLoadWithNominalCapacityHiOutLimit = 2,
        
        [JsonProperty("MeetLoadWithNominalCapacityLowOutLimit")]
        MeetLoadWithNominalCapacityLowOutLimit = 3,
        
        [JsonProperty("MeetLoadWithPassiveCapacity")]
        MeetLoadWithPassiveCapacity = 4,
    }
    
    public enum PlantConnectionLoopFlowRequestModeType
    {
        
        [JsonProperty("NeedsFlowAndTurnsLoopOn")]
        NeedsFlowAndTurnsLoopOn = 0,
        
        [JsonProperty("NeedsFlowIfLoopOn")]
        NeedsFlowIfLoopOn = 1,
        
        [JsonProperty("ReceivesWhateverFlowAvailable")]
        ReceivesWhateverFlowAvailable = 2,
    }
    
    public enum PlantConnectionLoadingModeType
    {
        
        [JsonProperty("DemandsLoad")]
        DemandsLoad = 0,
        
        [JsonProperty("MeetLoadWithNominalCapacity")]
        MeetLoadWithNominalCapacity = 1,
        
        [JsonProperty("MeetLoadWithNominalCapacityHiOutLimit")]
        MeetLoadWithNominalCapacityHiOutLimit = 2,
        
        [JsonProperty("MeetLoadWithNominalCapacityLowOutLimit")]
        MeetLoadWithNominalCapacityLowOutLimit = 3,
        
        [JsonProperty("MeetLoadWithPassiveCapacity")]
        MeetLoadWithPassiveCapacity = 4,
    }
    
    public enum PlantConnectionLoopFlowRequestModeType
    {
        
        [JsonProperty("NeedsFlowAndTurnsLoopOn")]
        NeedsFlowAndTurnsLoopOn = 0,
        
        [JsonProperty("NeedsFlowIfLoopOn")]
        NeedsFlowIfLoopOn = 1,
        
        [JsonProperty("ReceivesWhateverFlowAvailable")]
        ReceivesWhateverFlowAvailable = 2,
    }
    
    [Description("Defines a generic plant operation scheme for custom supervisory control using Ene" +
        "rgy Management System or External Interface to dispatch loads")]
    [JsonObject("PlantEquipmentOperation:UserDefined")]
    public class PlantEquipmentOperation_UserDefined
    {
        
[JsonProperty(@"")]
public System.String MainModelProgramCallingManagerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String InitializationProgramCallingManagerName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentObjectType { get; set; } = "";
        
[JsonProperty(@"")]
public System.String EquipmentName { get; set; } = "";
    }
}
namespace EnergyPlus.VariableRefrigerantFlowEquipment
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Variable refrigerant flow (VRF) air-to-air heat pump condensing unit (includes on" +
        "e or more electric compressors and outdoor fan). Serves one or more VRF zone ter" +
        "minal units. See ZoneHVAC:TerminalUnit:VariableRefrigerantFlow and ZoneTerminalU" +
        "nitList.")]
    [JsonObject("AirConditioner:VariableRefrigerantFlow")]
    public class AirConditioner_VariableRefrigerantFlow
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Enter the name of a schedule that defines the availability of the unit. Schedule values of 0 denote the unit is off. All other values denote the unit is available. If this field is left blank, the unit is available the entire simulation.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Enter the name of a schedule that defines the availability of the unit. Schedule values of 0 denote the unit is off. All other values denote the unit is available. If this field is left blank, the unit is available the entire simulation.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Enter the total cooling capacity in watts at rated conditions or set to autosize. Total cooling capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Enter the total cooling capacity in watts at rated conditions or set to autosize. Total cooling capacity not accounting for the effect of supply air fan heat")]
public System.String GrossRatedTotalCoolingCapacity { get; set; } = "";
        
[Description(@"Enter the coefficient of performance at rated conditions or leave blank to use default. COP includes compressor and condenser fan electrical energy input COP does not include supply fan heat or supply fan electric power input")]
[JsonProperty(@"Enter the coefficient of performance at rated conditions or leave blank to use default. COP includes compressor and condenser fan electrical energy input COP does not include supply fan heat or supply fan electric power input")]
public System.Single GrossRatedCoolingCop { get; set; } = 3.3;
        
[Description(@"Enter the minimum outdoor temperature allowed for cooling operation. Cooling is disabled below this temperature.")]
[JsonProperty(@"Enter the minimum outdoor temperature allowed for cooling operation. Cooling is disabled below this temperature.")]
public System.Single MinimumOutdoorTemperatureInCoolingMode { get; set; } = -6;
        
[Description(@"Enter the maximum outdoor temperature allowed for cooling operation. Cooling is disabled above this temperature.")]
[JsonProperty(@"Enter the maximum outdoor temperature allowed for cooling operation. Cooling is disabled above this temperature.")]
public System.Single MaximumOutdoorTemperatureInCoolingMode { get; set; } = 43;
        
[Description(@"Enter a curve name that represents full load cooling capacity ratio as a function of outdoor dry-bulb temperature and indoor wet-bulb temperature. Up to two curves are allowed if the performance cannot be represented by a single curve. The following two fields are used if two curves are required.")]
[JsonProperty(@"Enter a curve name that represents full load cooling capacity ratio as a function of outdoor dry-bulb temperature and indoor wet-bulb temperature. Up to two curves are allowed if the performance cannot be represented by a single curve. The following two fields are used if two curves are required.")]
public System.String CoolingCapacityRatioModifierFunctionOfLowTemperatureCurveName { get; set; } = "";
        
[Description(@"This curve object is used to allow separate low and high cooling capacity ratio performance curves. This curve represents a line passing through the points where performance changes. The curve calculates outdoor dry-bulb temperature given weighted average indoor wet-bulb temperature. If a single performance curve is used, leave this field blank.")]
[JsonProperty(@"This curve object is used to allow separate low and high cooling capacity ratio performance curves. This curve represents a line passing through the points where performance changes. The curve calculates outdoor dry-bulb temperature given weighted average indoor wet-bulb temperature. If a single performance curve is used, leave this field blank.")]
public System.String CoolingCapacityRatioBoundaryCurveName { get; set; } = "";
        
[Description(@"This curve object is used to describe the high outdoor temperature performance curve used to describe cooling capacity ratio. This curve is used when a single performance curve does not accurately describe cooling capacity ratio as a function of temperature. If a single performance curve is used, leave this field blank.")]
[JsonProperty(@"This curve object is used to describe the high outdoor temperature performance curve used to describe cooling capacity ratio. This curve is used when a single performance curve does not accurately describe cooling capacity ratio as a function of temperature. If a single performance curve is used, leave this field blank.")]
public System.String CoolingCapacityRatioModifierFunctionOfHighTemperatureCurveName { get; set; } = "";
        
[Description(@"Enter a curve name that represents cooling energy ratio as a function of outdoor dry-bulb temperature and indoor wet-bulb temperature")]
[JsonProperty(@"Enter a curve name that represents cooling energy ratio as a function of outdoor dry-bulb temperature and indoor wet-bulb temperature")]
public System.String CoolingEnergyInputRatioModifierFunctionOfLowTemperatureCurveName { get; set; } = "";
        
[Description(@"This curve object is used to allow separate low and high cooling energy input ratio performance curves. This curve represents a line passing through the points where performance changes. The curve calculates outdoor dry-bulb temperature given weighted average indoor wet-bulb temperature. If a single performance curve is used, leave this field blank.")]
[JsonProperty(@"This curve object is used to allow separate low and high cooling energy input ratio performance curves. This curve represents a line passing through the points where performance changes. The curve calculates outdoor dry-bulb temperature given weighted average indoor wet-bulb temperature. If a single performance curve is used, leave this field blank.")]
public System.String CoolingEnergyInputRatioBoundaryCurveName { get; set; } = "";
        
[Description(@"This curve object is used to describe the high outdoor temperature performance curve used to describe cooling energy ratio. This curve is used when a single performance curve does not accurately describe cooling energy ratio as a function of temperature")]
[JsonProperty(@"This curve object is used to describe the high outdoor temperature performance curve used to describe cooling energy ratio. This curve is used when a single performance curve does not accurately describe cooling energy ratio as a function of temperature")]
public System.String CoolingEnergyInputRatioModifierFunctionOfHighTemperatureCurveName { get; set; } = "";
        
[Description(@"Enter a curve name that represents cooling energy ratio as a function of part-load ratio for part-load ratios less than or equal to 1. If this field is left blank, the model assumes energy is proportional to part-load ratio.")]
[JsonProperty(@"Enter a curve name that represents cooling energy ratio as a function of part-load ratio for part-load ratios less than or equal to 1. If this field is left blank, the model assumes energy is proportional to part-load ratio.")]
public System.String CoolingEnergyInputRatioModifierFunctionOfLowPartLoadRatioCurveName { get; set; } = "";
        
[Description(@"Enter a curve name that represents cooling energy ratio as a function of part-load ratio for part-load ratios greater than 1. Part-load ratios can exceed 1 in variable speed compression systems. If this field is left blank, the model assumes energy is proportional to part-load ratio.")]
[JsonProperty(@"Enter a curve name that represents cooling energy ratio as a function of part-load ratio for part-load ratios greater than 1. Part-load ratios can exceed 1 in variable speed compression systems. If this field is left blank, the model assumes energy is proportional to part-load ratio.")]
public System.String CoolingEnergyInputRatioModifierFunctionOfHighPartLoadRatioCurveName { get; set; } = "";
        
[Description(@"This curve defines how rated capacity changes when the total indoor terminal unit cooling capacity is greater than the Gross Rated Total Cooling Capacity defined in this object. If this field is left blank, the model assumes total indoor terminal unit cooling capacity is equal to the Gross Rated Total Cooling Capacity defined above.")]
[JsonProperty(@"This curve defines how rated capacity changes when the total indoor terminal unit cooling capacity is greater than the Gross Rated Total Cooling Capacity defined in this object. If this field is left blank, the model assumes total indoor terminal unit cooling capacity is equal to the Gross Rated Total Cooling Capacity defined above.")]
public System.String CoolingCombinationRatioCorrectionFactorCurveName { get; set; } = "";
        
[Description(@"This curve defines the cycling losses when the heat pump compressor cycles on and off below the Minimum Heat Pump Part-Load Ratio specified in the field below.")]
[JsonProperty(@"This curve defines the cycling losses when the heat pump compressor cycles on and off below the Minimum Heat Pump Part-Load Ratio specified in the field below.")]
public System.String CoolingPartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"Enter the heating capacity in watts at rated conditions or set to autosize. Heating capacity not accounting for the effect of supply air fan heat")]
[JsonProperty(@"Enter the heating capacity in watts at rated conditions or set to autosize. Heating capacity not accounting for the effect of supply air fan heat")]
public System.String GrossRatedHeatingCapacity { get; set; } = "";
        
[Description(@"If the Gross Rated Heating Capacity is autosized, the heating capacity is sized to be equal to the cooling capacity multiplied by this sizing ratio. The zone terminal unit heating coils are also sized using this ratio unless the sizing ratio input in the ZoneHVAC:TerminalUnit:VariableRefrigerantFlow object is entered.")]
[JsonProperty(@"If the Gross Rated Heating Capacity is autosized, the heating capacity is sized to be equal to the cooling capacity multiplied by this sizing ratio. The zone terminal unit heating coils are also sized using this ratio unless the sizing ratio input in the ZoneHVAC:TerminalUnit:VariableRefrigerantFlow object is entered.")]
public System.Single RatedHeatingCapacitySizingRatio { get; set; } = 1;
        
[Description(@"COP includes compressor and condenser fan electrical energy input COP does not include supply fan heat or supply fan electrical energy input")]
[JsonProperty(@"COP includes compressor and condenser fan electrical energy input COP does not include supply fan heat or supply fan electrical energy input")]
public System.Single GrossRatedHeatingCop { get; set; } = 3.4;
        
[Description(@"Enter the minimum outdoor temperature allowed for heating operation.")]
[JsonProperty(@"Enter the minimum outdoor temperature allowed for heating operation.")]
public System.Single MinimumOutdoorTemperatureInHeatingMode { get; set; } = -20;
        
[Description(@"Enter the maximum outdoor temperature allowed for heating operation.")]
[JsonProperty(@"Enter the maximum outdoor temperature allowed for heating operation.")]
public System.Single MaximumOutdoorTemperatureInHeatingMode { get; set; } = 16;
        
[Description(@"Enter a curve name that represents full load heating capacity ratio as a function of outdoor wet-bulb temperature and indoor dry-bulb temperature. Outdoor dry-bulb temperature may be used if wet-bulb temperature data is unavailable. See Heating Performance Curve Outdoor Temperature Type input below to determine which outdoor temperature type to use. Up to two curves are allowed if the performance cannot be represented by a single curve. The following two fields are used if two curves are required.")]
[JsonProperty(@"Enter a curve name that represents full load heating capacity ratio as a function of outdoor wet-bulb temperature and indoor dry-bulb temperature. Outdoor dry-bulb temperature may be used if wet-bulb temperature data is unavailable. See Heating Performance Curve Outdoor Temperature Type input below to determine which outdoor temperature type to use. Up to two curves are allowed if the performance cannot be represented by a single curve. The following two fields are used if two curves are required.")]
public System.String HeatingCapacityRatioModifierFunctionOfLowTemperatureCurveName { get; set; } = "";
        
[Description(@"This curve object is used to allow separate low and high heating capacity ratio performance curves. This curve represents a line passing through the points where performance changes. The curve calculates outdoor dry-bulb or wet-bulb temperature given weighted average indoor dry-bulb temperature. See Heating Performance Curve Outdoor Temperature Type input below to determine which outdoor temperature type to use. If a single performance curve is used, leave this field blank.")]
[JsonProperty(@"This curve object is used to allow separate low and high heating capacity ratio performance curves. This curve represents a line passing through the points where performance changes. The curve calculates outdoor dry-bulb or wet-bulb temperature given weighted average indoor dry-bulb temperature. See Heating Performance Curve Outdoor Temperature Type input below to determine which outdoor temperature type to use. If a single performance curve is used, leave this field blank.")]
public System.String HeatingCapacityRatioBoundaryCurveName { get; set; } = "";
        
[Description(@"This curve object is used to describe the high outdoor temperature performance curve used to describe heating capacity ratio. This curve is used when a single performance curve does not accurately describe heating capacity ratio as a function of temperature. If a single performance curve is used, leave this field blank.")]
[JsonProperty(@"This curve object is used to describe the high outdoor temperature performance curve used to describe heating capacity ratio. This curve is used when a single performance curve does not accurately describe heating capacity ratio as a function of temperature. If a single performance curve is used, leave this field blank.")]
public System.String HeatingCapacityRatioModifierFunctionOfHighTemperatureCurveName { get; set; } = "";
        
[Description(@"Enter a curve name that represents heating energy ratio as a function of outdoor wet-bulb temperature and indoor dry-bulb temperature Outdoor dry-bulb temperature may be used if wet-bulb temperature data is unavailable. See Heating Performance Curve Outdoor Temperature Type input below to determine which outdoor temperature type to use.")]
[JsonProperty(@"Enter a curve name that represents heating energy ratio as a function of outdoor wet-bulb temperature and indoor dry-bulb temperature Outdoor dry-bulb temperature may be used if wet-bulb temperature data is unavailable. See Heating Performance Curve Outdoor Temperature Type input below to determine which outdoor temperature type to use.")]
public System.String HeatingEnergyInputRatioModifierFunctionOfLowTemperatureCurveName { get; set; } = "";
        
[Description(@"This curve object is used to allow separate low and high heating energy input ratio performance curves. This curve represents a line passing through the points where performance changes. The curve calculates outdoor dry-bulb or wet-bulb temperature given weighted average indoor dry-bulb temperature. See Heating Performance Curve Outdoor Temperature Type input below to determine which outdoor temperature type to use. If a single performance curve is used, leave this field blank.")]
[JsonProperty(@"This curve object is used to allow separate low and high heating energy input ratio performance curves. This curve represents a line passing through the points where performance changes. The curve calculates outdoor dry-bulb or wet-bulb temperature given weighted average indoor dry-bulb temperature. See Heating Performance Curve Outdoor Temperature Type input below to determine which outdoor temperature type to use. If a single performance curve is used, leave this field blank.")]
public System.String HeatingEnergyInputRatioBoundaryCurveName { get; set; } = "";
        
[Description(@"This curve object is used to allow separate performance curves for heating energy. If a single performance curve is used, leave this field blank.")]
[JsonProperty(@"This curve object is used to allow separate performance curves for heating energy. If a single performance curve is used, leave this field blank.")]
public System.String HeatingEnergyInputRatioModifierFunctionOfHighTemperatureCurveName { get; set; } = "";
        
[Description(@"Determines temperature type for heating capacity curves and heating energy curves. This input determines whether the outdoor air dry-bulb or wet-bulb temperature is used to evaluate these curves.")]
[JsonProperty(@"Determines temperature type for heating capacity curves and heating energy curves. This input determines whether the outdoor air dry-bulb or wet-bulb temperature is used to evaluate these curves.")]
public YesNoDefault HeatingPerformanceCurveOutdoorTemperatureType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WetBulbTemperature");
        
[Description(@"This curve represents the heating energy input ratio for part-load ratios less than 1.")]
[JsonProperty(@"This curve represents the heating energy input ratio for part-load ratios less than 1.")]
public System.String HeatingEnergyInputRatioModifierFunctionOfLowPartLoadRatioCurveName { get; set; } = "";
        
[Description(@"This curve represents the heating energy input ratio for part-load ratios greater than 1.")]
[JsonProperty(@"This curve represents the heating energy input ratio for part-load ratios greater than 1.")]
public System.String HeatingEnergyInputRatioModifierFunctionOfHighPartLoadRatioCurveName { get; set; } = "";
        
[Description(@"This curve defines how rated capacity changes when the total indoor terminal unit heating capacity is greater than the Gross Rated Heating Capacity defined in this object. If this field is left blank, the model assumes total indoor terminal unit heating capacity is equal to the Gross Rated Heating Capacity defined above.")]
[JsonProperty(@"This curve defines how rated capacity changes when the total indoor terminal unit heating capacity is greater than the Gross Rated Heating Capacity defined in this object. If this field is left blank, the model assumes total indoor terminal unit heating capacity is equal to the Gross Rated Heating Capacity defined above.")]
public System.String HeatingCombinationRatioCorrectionFactorCurveName { get; set; } = "";
        
[Description(@"This curve defines the cycling losses when the heat pump compressor cycles on and off below the Minimum Heat Pump Part-Load Ratio specified in the following field.")]
[JsonProperty(@"This curve defines the cycling losses when the heat pump compressor cycles on and off below the Minimum Heat Pump Part-Load Ratio specified in the following field.")]
public System.String HeatingPartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"Enter the minimum heat pump part-load ratio (PLR). When the cooling or heating PLR is below this value, the heat pump compressor will cycle to meet the cooling or heating demand.")]
[JsonProperty(@"Enter the minimum heat pump part-load ratio (PLR). When the cooling or heating PLR is below this value, the heat pump compressor will cycle to meet the cooling or heating demand.")]
public System.Single MinimumHeatPumpPartLoadRatio { get; set; } = 0.15;
        
[Description(@"Enter the name of the zone where the master thermostat is located.")]
[JsonProperty(@"Enter the name of the zone where the master thermostat is located.")]
public System.String ZoneNameForMasterThermostatLocation { get; set; } = "";
        
[Description(@"Choose a thermostat control logic scheme. If these control types fail to control zone temperature within a reasonable limit, consider using multiple VRF systems. This field is not used when all terminal units are set point controlled.")]
[JsonProperty(@"Choose a thermostat control logic scheme. If these control types fail to control zone temperature within a reasonable limit, consider using multiple VRF systems. This field is not used when all terminal units are set point controlled.")]
public YesNoDefault MasterThermostatPriorityControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "MasterThermostatPriority");
        
[Description(@"this field is required if Master Thermostat Priority Control Type is Scheduled. Schedule values of 0 denote cooling, 1 for heating, and all other values disable the system.")]
[JsonProperty(@"this field is required if Master Thermostat Priority Control Type is Scheduled. Schedule values of 0 denote cooling, 1 for heating, and all other values disable the system.")]
public System.String ThermostatPriorityScheduleName { get; set; } = "";
        
[Description(@"Enter the name of a ZoneTerminalUnitList. This list connects zone terminal units to this heat pump.")]
[JsonProperty(@"Enter the name of a ZoneTerminalUnitList. This list connects zone terminal units to this heat pump.")]
public System.String ZoneTerminalUnitListName { get; set; } = "";
        
[Description(@"This field enables heat recovery operation within this VRF outdoor unit.")]
[JsonProperty(@"This field enables heat recovery operation within this VRF outdoor unit.")]
public YesNoDefault HeatPumpWasteHeatRecovery { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Enter the equivalent length of the farthest terminal unit from the condenser")]
[JsonProperty(@"Enter the equivalent length of the farthest terminal unit from the condenser")]
public System.Single EquivalentPipingLengthUsedForPipingCorrectionFactorInCoolingMode { get; set; } = ;
        
[Description(@"Enter the height difference between the highest and lowest terminal unit")]
[JsonProperty(@"Enter the height difference between the highest and lowest terminal unit")]
public System.Single VerticalHeightUsedForPipingCorrectionFactor { get; set; } = ;
        
[Description(@"PCF = a0 + a1*L + a2*L^2 + a3*L^3 + a4*H PCF = a0 + a1*L + a2*L^2 + a3*CR + a4*CR^2 + a5*(L)(CR) where L = length and CR = combination ratio specifies coefficients for a0, a1, a2, and a3 in the PCF equation")]
[JsonProperty(@"PCF = a0 + a1*L + a2*L^2 + a3*L^3 + a4*H PCF = a0 + a1*L + a2*L^2 + a3*CR + a4*CR^2 + a5*(L)(CR) where L = length and CR = combination ratio specifies coefficients for a0, a1, a2, and a3 in the PCF equation")]
public System.String PipingCorrectionFactorForLengthInCoolingModeCurveName { get; set; } = "";
        
[Description(@"PCF = a0 + a1*L + a2*L^2 + a3*L^3 + a4*H PCF = a0 + a1*L + a2*L^2 + a3*CR + a4*CR^2 + a5*(L)(CR) + a6*H where L = length, H = height, and CR = combination ratio specifies coefficient a4 (or a6 for biquadratic) in the PCF equation")]
[JsonProperty(@"PCF = a0 + a1*L + a2*L^2 + a3*L^3 + a4*H PCF = a0 + a1*L + a2*L^2 + a3*CR + a4*CR^2 + a5*(L)(CR) + a6*H where L = length, H = height, and CR = combination ratio specifies coefficient a4 (or a6 for biquadratic) in the PCF equation")]
public System.Single PipingCorrectionFactorForHeightInCoolingModeCoefficient { get; set; } = 0;
        
[Description(@"Enter the equivalent length of the farthest terminal unit from the condenser")]
[JsonProperty(@"Enter the equivalent length of the farthest terminal unit from the condenser")]
public System.Single EquivalentPipingLengthUsedForPipingCorrectionFactorInHeatingMode { get; set; } = ;
        
[Description(@"PCF = a0 + a1*L + a2*L^2 + a3*L^3 + a4*H PCF = a0 + a1*L + a2*L^2 + a3*CR + a4*CR^2 + a5*(L)(CR) + a6*H where L = length and CR = combination ratio specifies coefficients for a0, a1, a2, and a3 (or a0-a5 for biquadratic) in the PCF equation")]
[JsonProperty(@"PCF = a0 + a1*L + a2*L^2 + a3*L^3 + a4*H PCF = a0 + a1*L + a2*L^2 + a3*CR + a4*CR^2 + a5*(L)(CR) + a6*H where L = length and CR = combination ratio specifies coefficients for a0, a1, a2, and a3 (or a0-a5 for biquadratic) in the PCF equation")]
public System.String PipingCorrectionFactorForLengthInHeatingModeCurveName { get; set; } = "";
        
[Description(@"PCF = a0 + a1*L + a2*L^2 + a3*L^3 + a4*H PCF = a0 + a1*L + a2*L^2 + a3*CR + a4*CR^2 + a5*(L)(CR) + a6*H where L = length, H = height, and CR = combination ratio specifies coefficient a4 (or a6 for biquadratic) in the PCF equation")]
[JsonProperty(@"PCF = a0 + a1*L + a2*L^2 + a3*L^3 + a4*H PCF = a0 + a1*L + a2*L^2 + a3*CR + a4*CR^2 + a5*(L)(CR) + a6*H where L = length, H = height, and CR = combination ratio specifies coefficient a4 (or a6 for biquadratic) in the PCF equation")]
public System.Single PipingCorrectionFactorForHeightInHeatingModeCoefficient { get; set; } = 0;
        
[Description(@"Enter the value of the resistive heater located in the compressor(s). This heater is used to warm the refrigerant and oil when the compressor is off.")]
[JsonProperty(@"Enter the value of the resistive heater located in the compressor(s). This heater is used to warm the refrigerant and oil when the compressor is off.")]
public System.Single CrankcaseHeaterPowerPerCompressor { get; set; } = 33;
        
[Description(@"Enter the total number of compressor. This input is used only for crankcase heater calculations.")]
[JsonProperty(@"Enter the total number of compressor. This input is used only for crankcase heater calculations.")]
public System.Single NumberOfCompressors { get; set; } = 2;
        
[Description(@"Enter the ratio of the first stage compressor to total compressor capacity. All other compressors are assumed to be equally sized. This inputs is used only for crankcase heater calculations.")]
[JsonProperty(@"Enter the ratio of the first stage compressor to total compressor capacity. All other compressors are assumed to be equally sized. This inputs is used only for crankcase heater calculations.")]
public System.Single RatioOfCompressorSizeToTotalCompressorCapacity { get; set; } = 0.5;
        
[Description(@"Enter the maximum outdoor temperature above which the crankcase heaters are disabled.")]
[JsonProperty(@"Enter the maximum outdoor temperature above which the crankcase heaters are disabled.")]
public System.Single MaximumOutdoorDryBulbTemperatureForCrankcaseHeater { get; set; } = 5;
        
[Description(@"Select a defrost strategy. Reverse cycle reverses the operating mode from heating to cooling to melt frost formation on the condenser coil. The resistive strategy uses a resistive heater to melt the frost.")]
[JsonProperty(@"Select a defrost strategy. Reverse cycle reverses the operating mode from heating to cooling to melt frost formation on the condenser coil. The resistive strategy uses a resistive heater to melt the frost.")]
public YesNoDefault DefrostStrategy { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Resistive");
        
[Description(@"Choose a defrost control type. Either use a fixed Timed defrost period or select OnDemand to defrost only when necessary.")]
[JsonProperty(@"Choose a defrost control type. Either use a fixed Timed defrost period or select OnDemand to defrost only when necessary.")]
public YesNoDefault DefrostControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Timed");
        
[Description(@"A valid performance curve must be used if reversecycle defrost strategy is selected.")]
[JsonProperty(@"A valid performance curve must be used if reversecycle defrost strategy is selected.")]
public System.String DefrostEnergyInputRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Fraction of time in defrost mode. Only applicable if timed defrost control is specified.")]
[JsonProperty(@"Fraction of time in defrost mode. Only applicable if timed defrost control is specified.")]
public System.Single DefrostTimePeriodFraction { get; set; } = 0.058333;
        
[Description(@"Enter the size of the resistive defrost heating element. Only applicable if resistive defrost strategy is specified")]
[JsonProperty(@"Enter the size of the resistive defrost heating element. Only applicable if resistive defrost strategy is specified")]
public System.String ResistiveDefrostHeaterCapacity { get; set; } = (System.String)0;
        
[Description(@"Enter the maximum outdoor temperature above which defrost operation is disabled.")]
[JsonProperty(@"Enter the maximum outdoor temperature above which defrost operation is disabled.")]
public System.Single MaximumOutdoorDryBulbTemperatureForDefrostOperation { get; set; } = 5;
        
[Description(@"Select either an air-cooled, evaporatively-cooled or water-cooled condenser.")]
[JsonProperty(@"Select either an air-cooled, evaporatively-cooled or water-cooled condenser.")]
public YesNoDefault CondenserType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "AirCooled");
        
[Description(@"Choose an outside air node name or leave this field blank to use weather data. If this field is blank, the Condenser Type is assumed to be AirCooled. This input must be specified if Condenser Type = WaterCooled.")]
[JsonProperty(@"Choose an outside air node name or leave this field blank to use weather data. If this field is blank, the Condenser Type is assumed to be AirCooled. This input must be specified if Condenser Type = WaterCooled.")]
public System.String CondenserInletNodeName { get; set; } = "";
        
[Description(@"Enter a water outlet node name if Condenser Type = WaterCooled. Leave this field blank if Condenser Type = Air or EvaporativelyCooled.")]
[JsonProperty(@"Enter a water outlet node name if Condenser Type = WaterCooled. Leave this field blank if Condenser Type = Air or EvaporativelyCooled.")]
public System.String CondenserOutletNodeName { get; set; } = "";
        
[Description(@"Only used when Condenser Type = WaterCooled.")]
[JsonProperty(@"Only used when Condenser Type = WaterCooled.")]
public System.String WaterCondenserVolumeFlowRate { get; set; } = "";
        
[Description(@"Enter the effectiveness of the evaporatively cooled condenser. This field is only used when the Condenser Type = EvaporativelyCooled.")]
[JsonProperty(@"Enter the effectiveness of the evaporatively cooled condenser. This field is only used when the Condenser Type = EvaporativelyCooled.")]
public System.Single EvaporativeCondenserEffectiveness { get; set; } = 0.9;
        
[Description(@"Used to calculate evaporative condenser water use. This field is only used when the Condenser Type = EvaporativelyCooled.")]
[JsonProperty(@"Used to calculate evaporative condenser water use. This field is only used when the Condenser Type = EvaporativelyCooled.")]
public System.String EvaporativeCondenserAirFlowRate { get; set; } = "";
        
[Description(@"Rated power consumed by the evaporative condenser's water pump. This field is only used when the Condenser Type = EvaporativelyCooled.")]
[JsonProperty(@"Rated power consumed by the evaporative condenser's water pump. This field is only used when the Condenser Type = EvaporativelyCooled.")]
public System.String EvaporativeCondenserPumpRatedPowerConsumption { get; set; } = (System.String)0;
        
[Description(@"A separate storage tank may be used to supply an evaporatively cooled condenser.")]
[JsonProperty(@"A separate storage tank may be used to supply an evaporatively cooled condenser.")]
public System.String SupplyWaterStorageTankName { get; set; } = "";
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled and for periods when the basin heater is available (field Basin Heater Operating Schedule Name). For this situation, the heater maintains the basin water temperature at the basin heater setpoint temperature when the outdoor air temperature falls below the setpoint temperature. The basin heater only operates when the DX coil is off.")]
public System.Single BasinHeaterCapacity { get; set; } = 0;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Enter the outdoor dry-bulb temperature when the basin heater turns on.")]
public System.Single BasinHeaterSetpointTemperature { get; set; } = 2;
        
[Description(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
[JsonProperty(@"This field is only used for Condenser Type = EvaporativelyCooled. Schedule values greater than 0 allow the basin heater to operate whenever the outdoor air dry-bulb temperature is below the basin heater setpoint temperature. If a schedule name is not entered, the basin heater is allowed to operate throughout the entire simulation.")]
public System.String BasinHeaterOperatingScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Electricity");
        
[Description(@"The minimum outdoor temperature below which heat recovery mode will not operate.")]
[JsonProperty(@"The minimum outdoor temperature below which heat recovery mode will not operate.")]
public System.Single MinimumOutdoorTemperatureInHeatRecoveryMode { get; set; } = ;
        
[Description(@"The maximum outdoor temperature above which heat recovery mode will not operate.")]
[JsonProperty(@"The maximum outdoor temperature above which heat recovery mode will not operate.")]
public System.Single MaximumOutdoorTemperatureInHeatRecoveryMode { get; set; } = ;
        
[Description(@"Enter the name of a performance curve which represents the change in cooling capacity when heat recovery is active A default constant of 0.9 is used if this input is blank")]
[JsonProperty(@"Enter the name of a performance curve which represents the change in cooling capacity when heat recovery is active A default constant of 0.9 is used if this input is blank")]
public System.String HeatRecoveryCoolingCapacityModifierCurveName { get; set; } = "";
        
[Description(@"Enter the fractional capacity available at the start of heat recovery mode. The capacity exponentially approaches the steady-state value according to the inputs for Heat Recovery Cooling Capacity Modifier and Heat Recovery Cooling Capacity Time Constant")]
[JsonProperty(@"Enter the fractional capacity available at the start of heat recovery mode. The capacity exponentially approaches the steady-state value according to the inputs for Heat Recovery Cooling Capacity Modifier and Heat Recovery Cooling Capacity Time Constant")]
public System.Single InitialHeatRecoveryCoolingCapacityFraction { get; set; } = 0.5;
        
[Description(@"Enter the time constant used to model the transition from cooling only mode to heat recovery mode")]
[JsonProperty(@"Enter the time constant used to model the transition from cooling only mode to heat recovery mode")]
public System.Single HeatRecoveryCoolingCapacityTimeConstant { get; set; } = 0.15;
        
[Description(@"Enter the name of a performance curve which represents the change in cooling energy when heat recovery is active A default constant of 1.1 is used if this input is blank")]
[JsonProperty(@"Enter the name of a performance curve which represents the change in cooling energy when heat recovery is active A default constant of 1.1 is used if this input is blank")]
public System.String HeatRecoveryCoolingEnergyModifierCurveName { get; set; } = "";
        
[Description(@"Enter the fractional electric consumption rate at the start of heat recovery mode. The electric consumption rate exponentially approaches the steady-state value according to the inputs for Heat Recovery Cooling Energy Modifier and Heat Recovery Cooling Energy Time Constant")]
[JsonProperty(@"Enter the fractional electric consumption rate at the start of heat recovery mode. The electric consumption rate exponentially approaches the steady-state value according to the inputs for Heat Recovery Cooling Energy Modifier and Heat Recovery Cooling Energy Time Constant")]
public System.Single InitialHeatRecoveryCoolingEnergyFraction { get; set; } = 1;
        
[Description(@"Enter the time constant used to model the transition from cooling only mode to heat recovery mode")]
[JsonProperty(@"Enter the time constant used to model the transition from cooling only mode to heat recovery mode")]
public System.Single HeatRecoveryCoolingEnergyTimeConstant { get; set; } = 0;
        
[Description(@"Enter the name of a performance curve which represents the change in heating capacity when heat recovery is active A default constant of 1.1 is used if this input is blank")]
[JsonProperty(@"Enter the name of a performance curve which represents the change in heating capacity when heat recovery is active A default constant of 1.1 is used if this input is blank")]
public System.String HeatRecoveryHeatingCapacityModifierCurveName { get; set; } = "";
        
[Description(@"Enter the fractional capacity available at the start of heat recovery mode. The capacity exponentially approaches the steady-state value according to the inputs for Heat Recovery Heating Capacity Modifier and Heat Recovery Heating Capacity Time Constant")]
[JsonProperty(@"Enter the fractional capacity available at the start of heat recovery mode. The capacity exponentially approaches the steady-state value according to the inputs for Heat Recovery Heating Capacity Modifier and Heat Recovery Heating Capacity Time Constant")]
public System.Single InitialHeatRecoveryHeatingCapacityFraction { get; set; } = 1;
        
[Description(@"Enter the time constant used to model the transition from cooling only mode to heat recovery mode")]
[JsonProperty(@"Enter the time constant used to model the transition from cooling only mode to heat recovery mode")]
public System.Single HeatRecoveryHeatingCapacityTimeConstant { get; set; } = 0.15;
        
[Description(@"Enter the name of a performance curve which represents the change in heating electric consumption rate when heat recovery is active A default constant of 1.1 is used if this input is blank")]
[JsonProperty(@"Enter the name of a performance curve which represents the change in heating electric consumption rate when heat recovery is active A default constant of 1.1 is used if this input is blank")]
public System.String HeatRecoveryHeatingEnergyModifierCurveName { get; set; } = "";
        
[Description(@"Enter the fractional electric consumption rate at the start of heat recovery mode. The electric consumption rate exponentially approaches the steady-state value according to the inputs for Heat Recovery Cooling Energy Modifier and Heat Recovery Cooling Energy Time Constant")]
[JsonProperty(@"Enter the fractional electric consumption rate at the start of heat recovery mode. The electric consumption rate exponentially approaches the steady-state value according to the inputs for Heat Recovery Cooling Energy Modifier and Heat Recovery Cooling Energy Time Constant")]
public System.Single InitialHeatRecoveryHeatingEnergyFraction { get; set; } = 1;
        
[Description(@"Enter the time constant used to model the transition from cooling only mode to heat recovery mode")]
[JsonProperty(@"Enter the time constant used to model the transition from cooling only mode to heat recovery mode")]
public System.Single HeatRecoveryHeatingEnergyTimeConstant { get; set; } = 0;
    }
    
    public enum HeatingPerformanceCurveOutdoorTemperatureTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DryBulbTemperature")]
        DryBulbTemperature = 1,
        
        [JsonProperty("WetBulbTemperature")]
        WetBulbTemperature = 2,
    }
    
    public enum MasterThermostatPriorityControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LoadPriority")]
        LoadPriority = 1,
        
        [JsonProperty("MasterThermostatPriority")]
        MasterThermostatPriority = 2,
        
        [JsonProperty("Scheduled")]
        Scheduled = 3,
        
        [JsonProperty("ThermostatOffsetPriority")]
        ThermostatOffsetPriority = 4,
        
        [JsonProperty("ZonePriority")]
        ZonePriority = 5,
    }
    
    public enum DefrostStrategyType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Resistive")]
        Resistive = 1,
        
        [JsonProperty("ReverseCycle")]
        ReverseCycle = 2,
    }
    
    public enum DefrostControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("OnDemand")]
        OnDemand = 1,
        
        [JsonProperty("Timed")]
        Timed = 2,
    }
    
    public enum CondenserTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirCooled")]
        AirCooled = 1,
        
        [JsonProperty("EvaporativelyCooled")]
        EvaporativelyCooled = 2,
        
        [JsonProperty("WaterCooled")]
        WaterCooled = 3,
    }
    
    public enum FuelTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("Electricity")]
        Electricity = 2,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 3,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 4,
        
        [JsonProperty("Gasoline")]
        Gasoline = 5,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 6,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 7,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 8,
        
        [JsonProperty("Propane")]
        Propane = 9,
    }
    
    [Description(@"This is a key object in the new physics based VRF model applicable for Fluid Temperature Control It describes the Variable Refrigerant Flow system excluding the performance of indoor units Indoor units are modeled separately, see ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")]
    [JsonObject("AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl")]
    public class AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl
    {
        
[Description(@"Enter a unique name for this variable refrigerant flow heat pump")]
[JsonProperty(@"Enter a unique name for this variable refrigerant flow heat pump")]
public System.String HeatPumpName { get; set; } = "";
        
[Description(@"Enter the name of a schedule that defines the availability of the unit Schedule values of 0 denote the unit is off. All other values denote the unit is available If this field is left blank, the unit is available the entire simulation")]
[JsonProperty(@"Enter the name of a schedule that defines the availability of the unit Schedule values of 0 denote the unit is off. All other values denote the unit is available If this field is left blank, the unit is available the entire simulation")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Enter the name of a ZoneTerminalUnitList. This list connects zone terminal units to this heat pump")]
[JsonProperty(@"Enter the name of a ZoneTerminalUnitList. This list connects zone terminal units to this heat pump")]
public System.String ZoneTerminalUnitListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String RefrigerantType { get; set; } = (System.String)R410A;
        
[Description(@"Enter the total evaporative capacity in watts at rated conditions This is the capacity corresponding to the max compressor speed at rated conditions The actual evaporative capacity is obtained by multiplying the rated capacity with the modification factor calculated by Evaporative Capacity Multiplier Function of Temperature Curve")]
[JsonProperty(@"Enter the total evaporative capacity in watts at rated conditions This is the capacity corresponding to the max compressor speed at rated conditions The actual evaporative capacity is obtained by multiplying the rated capacity with the modification factor calculated by Evaporative Capacity Multiplier Function of Temperature Curve")]
public System.String RatedEvaporativeCapacity { get; set; } = (System.String)40000;
        
[Description(@"Enter the rated compressor power per Watt of rated evaporative capacity [W/W] Rated compressor power corresponds to the max compressor speed at rated conditions The actual compressor power is obtained by multiplying the rated power with the modification factor calculated by Compressor Power Multiplier Function of Temperature Curve")]
[JsonProperty(@"Enter the rated compressor power per Watt of rated evaporative capacity [W/W] Rated compressor power corresponds to the max compressor speed at rated conditions The actual compressor power is obtained by multiplying the rated power with the modification factor calculated by Compressor Power Multiplier Function of Temperature Curve")]
public System.Single RatedCompressorPowerPerUnitOfRatedEvaporativeCapacity { get; set; } = 0.35;
        
[Description(@"Enter the minimum outdoor temperature allowed for cooling operation Cooling is disabled below this temperature")]
[JsonProperty(@"Enter the minimum outdoor temperature allowed for cooling operation Cooling is disabled below this temperature")]
public System.Single MinimumOutdoorAirTemperatureInCoolingMode { get; set; } = -6;
        
[Description(@"Enter the maximum outdoor temperature allowed for cooling operation Cooling is disabled above this temperature")]
[JsonProperty(@"Enter the maximum outdoor temperature allowed for cooling operation Cooling is disabled above this temperature")]
public System.Single MaximumOutdoorAirTemperatureInCoolingMode { get; set; } = 43;
        
[Description(@"Enter the minimum outdoor temperature allowed for heating operation Heating is disabled below this temperature")]
[JsonProperty(@"Enter the minimum outdoor temperature allowed for heating operation Heating is disabled below this temperature")]
public System.Single MinimumOutdoorAirTemperatureInHeatingMode { get; set; } = -20;
        
[Description(@"Enter the maximum outdoor temperature allowed for heating operation Heating is disabled below this temperature")]
[JsonProperty(@"Enter the maximum outdoor temperature allowed for heating operation Heating is disabled below this temperature")]
public System.Single MaximumOutdoorAirTemperatureInHeatingMode { get; set; } = 16;
        
[JsonProperty(@"")]
public System.Single ReferenceOutdoorUnitSuperheating { get; set; } = 3;
        
[JsonProperty(@"")]
public System.Single ReferenceOutdoorUnitSubcooling { get; set; } = 5;
        
[JsonProperty(@"")]
public YesNoDefault RefrigerantTemperatureControlAlgorithmForIndoorUnit { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "VariableTemp");
        
[Description(@"This field is used if Refrigerant Temperature Control Algorithm is ConstantTemp Evaporating temperature is the refrigerant temperature, not air temperature")]
[JsonProperty(@"This field is used if Refrigerant Temperature Control Algorithm is ConstantTemp Evaporating temperature is the refrigerant temperature, not air temperature")]
public System.Single ReferenceEvaporatingTemperatureForIndoorUnit { get; set; } = 6;
        
[Description(@"This field is used if Refrigerant Temperature Control Algorithm is ConstantTemp Condensing temperature is the refrigerant temperature, not air temperature")]
[JsonProperty(@"This field is used if Refrigerant Temperature Control Algorithm is ConstantTemp Condensing temperature is the refrigerant temperature, not air temperature")]
public System.Single ReferenceCondensingTemperatureForIndoorUnit { get; set; } = 44;
        
[Description(@"This field is used if Refrigerant Temperature Control Algorithm is VariableTemp Evaporating temperature is the refrigerant temperature, not air temperature")]
[JsonProperty(@"This field is used if Refrigerant Temperature Control Algorithm is VariableTemp Evaporating temperature is the refrigerant temperature, not air temperature")]
public System.Single VariableEvaporatingTemperatureMinimumForIndoorUnit { get; set; } = 4;
        
[Description(@"This field is used if Refrigerant Temperature Control Algorithm is VariableTemp Evaporating temperature is the refrigerant temperature, not air temperature")]
[JsonProperty(@"This field is used if Refrigerant Temperature Control Algorithm is VariableTemp Evaporating temperature is the refrigerant temperature, not air temperature")]
public System.Single VariableEvaporatingTemperatureMaximumForIndoorUnit { get; set; } = 13;
        
[Description(@"This field is used if Refrigerant Temperature Control Algorithm is VariableTemp Condensing temperature is the refrigerant temperature, not air temperature")]
[JsonProperty(@"This field is used if Refrigerant Temperature Control Algorithm is VariableTemp Condensing temperature is the refrigerant temperature, not air temperature")]
public System.Single VariableCondensingTemperatureMinimumForIndoorUnit { get; set; } = 42;
        
[Description(@"This field is used if Refrigerant Temperature Control Algorithm is VariableTemp Condensing temperature is the refrigerant temperature, not air temperature")]
[JsonProperty(@"This field is used if Refrigerant Temperature Control Algorithm is VariableTemp Condensing temperature is the refrigerant temperature, not air temperature")]
public System.Single VariableCondensingTemperatureMaximumForIndoorUnit { get; set; } = 46;
        
[Description(@"Enter the outdoor unit fan power per Watt of rated evaporative capacity [W/W]")]
[JsonProperty(@"Enter the outdoor unit fan power per Watt of rated evaporative capacity [W/W]")]
public System.Single OutdoorUnitFanPowerPerUnitOfRatedEvaporativeCapacity { get; set; } = 0.00425;
        
[Description(@"This field is only used if the previous is set to autocalculate and performance input method is NominalCapacity")]
[JsonProperty(@"This field is only used if the previous is set to autocalculate and performance input method is NominalCapacity")]
public System.Single OutdoorUnitFanFlowRatePerUnitOfRatedEvaporativeCapacity { get; set; } = 7.5E-05;
        
[JsonProperty(@"")]
public System.String OutdoorUnitEvaporatingTemperatureFunctionOfSuperheatingCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutdoorUnitCondensingTemperatureFunctionOfSubcoolingCurveName { get; set; } = "";
        
[Description(@"used to calculate the piping loss")]
[JsonProperty(@"used to calculate the piping loss")]
public System.Single DiameterOfMainPipeConnectingOutdoorUnitToTheFirstBranchJoint { get; set; } = 0.0762;
        
[Description(@"used to calculate the heat loss of the main pipe")]
[JsonProperty(@"used to calculate the heat loss of the main pipe")]
public System.Single LengthOfMainPipeConnectingOutdoorUnitToTheFirstBranchJoint { get; set; } = 30;
        
[Description(@"used to calculate the refrigerant pressure drop of the main pipe")]
[JsonProperty(@"used to calculate the refrigerant pressure drop of the main pipe")]
public System.Single EquivalentLengthOfMainPipeConnectingOutdoorUnitToTheFirstBranchJoint { get; set; } = 36;
        
[Description(@"Difference between outdoor unit height and indoor unit height Positive means outdoor unit is higher than indoor unit Negative means outdoor unit is lower than indoor unit")]
[JsonProperty(@"Difference between outdoor unit height and indoor unit height Positive means outdoor unit is higher than indoor unit Negative means outdoor unit is lower than indoor unit")]
public System.Single HeightDifferenceBetweenOutdoorUnitAndIndoorUnits { get; set; } = 5;
        
[JsonProperty(@"")]
public System.Single MainPipeInsulationThickness { get; set; } = 0.02;
        
[JsonProperty(@"")]
public System.Single MainPipeInsulationThermalConductivity { get; set; } = 0.032;
        
[Description(@"Enter the value of the resistive heater located in the compressor(s). This heater is used to warm the refrigerant and oil when the compressor is off")]
[JsonProperty(@"Enter the value of the resistive heater located in the compressor(s). This heater is used to warm the refrigerant and oil when the compressor is off")]
public System.Single CrankcaseHeaterPowerPerCompressor { get; set; } = 33;
        
[Description(@"Enter the total number of compressor. This input is used only for crankcase heater calculations.")]
[JsonProperty(@"Enter the total number of compressor. This input is used only for crankcase heater calculations.")]
public System.Single NumberOfCompressors { get; set; } = 2;
        
[Description(@"Enter the ratio of the first stage compressor to total compressor capacity All other compressors are assumed to be equally sized. This inputs is used only for crankcase heater calculations")]
[JsonProperty(@"Enter the ratio of the first stage compressor to total compressor capacity All other compressors are assumed to be equally sized. This inputs is used only for crankcase heater calculations")]
public System.Single RatioOfCompressorSizeToTotalCompressorCapacity { get; set; } = 0.5;
        
[Description(@"Enter the maximum outdoor temperature above which the crankcase heaters are disabled")]
[JsonProperty(@"Enter the maximum outdoor temperature above which the crankcase heaters are disabled")]
public System.Single MaximumOutdoorDryBulbTemperatureForCrankcaseHeater { get; set; } = 5;
        
[Description(@"Select a defrost strategy. Reverse cycle reverses the operating mode from heating to cooling to melt frost formation on the condenser coil The resistive strategy uses a resistive heater to melt the frost.")]
[JsonProperty(@"Select a defrost strategy. Reverse cycle reverses the operating mode from heating to cooling to melt frost formation on the condenser coil The resistive strategy uses a resistive heater to melt the frost.")]
public YesNoDefault DefrostStrategy { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Resistive");
        
[Description(@"Choose a defrost control type Either use a fixed Timed defrost period or select OnDemand to defrost only when necessary")]
[JsonProperty(@"Choose a defrost control type Either use a fixed Timed defrost period or select OnDemand to defrost only when necessary")]
public YesNoDefault DefrostControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Timed");
        
[Description(@"A valid performance curve must be used if ReverseCycle defrost strategy is selected")]
[JsonProperty(@"A valid performance curve must be used if ReverseCycle defrost strategy is selected")]
public System.String DefrostEnergyInputRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Fraction of time in defrost mode Only applicable if timed defrost control is specified")]
[JsonProperty(@"Fraction of time in defrost mode Only applicable if timed defrost control is specified")]
public System.Single DefrostTimePeriodFraction { get; set; } = 0.058333;
        
[Description(@"Enter the size of the resistive defrost heating element Only applicable if resistive defrost strategy is specified")]
[JsonProperty(@"Enter the size of the resistive defrost heating element Only applicable if resistive defrost strategy is specified")]
public System.String ResistiveDefrostHeaterCapacity { get; set; } = (System.String)0;
        
[Description(@"Enter the maximum outdoor temperature above which the defrost operation is disabled")]
[JsonProperty(@"Enter the maximum outdoor temperature above which the defrost operation is disabled")]
public System.Single MaximumOutdoorDryBulbTemperatureForDefrostOperation { get; set; } = 5;
        
[JsonProperty(@"")]
public System.Single CompressorMaximumDeltaPressure { get; set; } = 4500000;
        
[Description(@"First index represents minimal capacity operation Last index represents full capacity operation")]
[JsonProperty(@"First index represents minimal capacity operation Last index represents full capacity operation")]
public System.Single NumberOfCompressorLoadingIndexEntries { get; set; } = 2;
        
[JsonProperty(@"")]
public System.String LoadingIndices { get; set; } = "";
    }
    
    public enum RefrigerantTemperatureControlAlgorithmForIndoorUnitType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantTemp")]
        ConstantTemp = 1,
        
        [JsonProperty("VariableTemp")]
        VariableTemp = 2,
    }
    
    public enum DefrostStrategyType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Resistive")]
        Resistive = 1,
        
        [JsonProperty("ReverseCycle")]
        ReverseCycle = 2,
    }
    
    public enum DefrostControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("OnDemand")]
        OnDemand = 1,
        
        [JsonProperty("Timed")]
        Timed = 2,
    }
    
    [Description(@"This is a key object in the new physics based VRF Heat Recovery (HR) model applicable for Fluid Temperature Control. It describes the VRF HR system excluding the performance of indoor units. Indoor units are modeled separately in the ZoneHVAC:TerminalUnit:VariableRefrigerantFlow object")]
    [JsonObject("AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR")]
    public class AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_HR
    {
        
[Description(@"Enter the name of a schedule that defines the availability of the unit Schedule values of 0 denote the unit is off. All other values denote the unit is available If this field is left blank, the unit is available the entire simulation")]
[JsonProperty(@"Enter the name of a schedule that defines the availability of the unit Schedule values of 0 denote the unit is off. All other values denote the unit is available If this field is left blank, the unit is available the entire simulation")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Enter the name of a ZoneTerminalUnitList. This list connects zone terminal units to this heat pump")]
[JsonProperty(@"Enter the name of a ZoneTerminalUnitList. This list connects zone terminal units to this heat pump")]
public System.String ZoneTerminalUnitListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String RefrigerantType { get; set; } = (System.String)R410A;
        
[Description(@"Enter the total evaporative capacity in watts at rated conditions This is the capacity corresponding to the max compressor speed at rated conditions The actual evaporative capacity is obtained by multiplying the rated capacity with the modification factor calculated by Evaporative Capacity Multiplier Function of Temperature Curve")]
[JsonProperty(@"Enter the total evaporative capacity in watts at rated conditions This is the capacity corresponding to the max compressor speed at rated conditions The actual evaporative capacity is obtained by multiplying the rated capacity with the modification factor calculated by Evaporative Capacity Multiplier Function of Temperature Curve")]
public System.String RatedEvaporativeCapacity { get; set; } = (System.String)40000;
        
[Description(@"Enter the rated compressor power per Watt of rated evaporative capacity [W/W] Rated compressor power corresponds to the max compressor speed at rated conditions The actual compressor power is obtained by multiplying the rated power with the modification factor calculated by Compressor Power Multiplier Function of Temperature Curve")]
[JsonProperty(@"Enter the rated compressor power per Watt of rated evaporative capacity [W/W] Rated compressor power corresponds to the max compressor speed at rated conditions The actual compressor power is obtained by multiplying the rated power with the modification factor calculated by Compressor Power Multiplier Function of Temperature Curve")]
public System.Single RatedCompressorPowerPerUnitOfRatedEvaporativeCapacity { get; set; } = 0.35;
        
[Description(@"Enter the minimum outdoor temperature allowed for cooling operation Cooling is disabled below this temperature")]
[JsonProperty(@"Enter the minimum outdoor temperature allowed for cooling operation Cooling is disabled below this temperature")]
public System.Single MinimumOutdoorAirTemperatureInCoolingOnlyMode { get; set; } = -6;
        
[Description(@"Enter the maximum outdoor temperature allowed for cooling operation Cooling is disabled above this temperature")]
[JsonProperty(@"Enter the maximum outdoor temperature allowed for cooling operation Cooling is disabled above this temperature")]
public System.Single MaximumOutdoorAirTemperatureInCoolingOnlyMode { get; set; } = 43;
        
[Description(@"Enter the minimum outdoor temperature allowed for heating operation Heating is disabled below this temperature")]
[JsonProperty(@"Enter the minimum outdoor temperature allowed for heating operation Heating is disabled below this temperature")]
public System.Single MinimumOutdoorAirTemperatureInHeatingOnlyMode { get; set; } = -20;
        
[Description(@"Enter the maximum outdoor temperature allowed for heating operation Heating is disabled below this temperature")]
[JsonProperty(@"Enter the maximum outdoor temperature allowed for heating operation Heating is disabled below this temperature")]
public System.Single MaximumOutdoorAirTemperatureInHeatingOnlyMode { get; set; } = 16;
        
[Description(@"The minimum outdoor temperature below which heat recovery mode will not operate.")]
[JsonProperty(@"The minimum outdoor temperature below which heat recovery mode will not operate.")]
public System.Single MinimumOutdoorTemperatureInHeatRecoveryMode { get; set; } = -20;
        
[Description(@"The maximum outdoor temperature above which heat recovery mode will not operate.")]
[JsonProperty(@"The maximum outdoor temperature above which heat recovery mode will not operate.")]
public System.Single MaximumOutdoorTemperatureInHeatRecoveryMode { get; set; } = 43;
        
[JsonProperty(@"")]
public YesNoDefault RefrigerantTemperatureControlAlgorithmForIndoorUnit { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "VariableTemp");
        
[Description(@"This field is used if Refrigerant Temperature Control Algorithm is ConstantTemp Evaporating temperature is the refrigerant temperature, not air temperature")]
[JsonProperty(@"This field is used if Refrigerant Temperature Control Algorithm is ConstantTemp Evaporating temperature is the refrigerant temperature, not air temperature")]
public System.Single ReferenceEvaporatingTemperatureForIndoorUnit { get; set; } = 6;
        
[Description(@"This field is used if Refrigerant Temperature Control Algorithm is ConstantTemp Condensing temperature is the refrigerant temperature, not air temperature")]
[JsonProperty(@"This field is used if Refrigerant Temperature Control Algorithm is ConstantTemp Condensing temperature is the refrigerant temperature, not air temperature")]
public System.Single ReferenceCondensingTemperatureForIndoorUnit { get; set; } = 44;
        
[Description(@"This field is used if Refrigerant Temperature Control Algorithm is VariableTemp Evaporating temperature is the refrigerant temperature, not air temperature")]
[JsonProperty(@"This field is used if Refrigerant Temperature Control Algorithm is VariableTemp Evaporating temperature is the refrigerant temperature, not air temperature")]
public System.Single VariableEvaporatingTemperatureMinimumForIndoorUnit { get; set; } = 4;
        
[Description(@"This field is used if Refrigerant Temperature Control Algorithm is VariableTemp Evaporating temperature is the refrigerant temperature, not air temperature")]
[JsonProperty(@"This field is used if Refrigerant Temperature Control Algorithm is VariableTemp Evaporating temperature is the refrigerant temperature, not air temperature")]
public System.Single VariableEvaporatingTemperatureMaximumForIndoorUnit { get; set; } = 13;
        
[Description(@"This field is used if Refrigerant Temperature Control Algorithm is VariableTemp Condensing temperature is the refrigerant temperature, not air temperature")]
[JsonProperty(@"This field is used if Refrigerant Temperature Control Algorithm is VariableTemp Condensing temperature is the refrigerant temperature, not air temperature")]
public System.Single VariableCondensingTemperatureMinimumForIndoorUnit { get; set; } = 42;
        
[Description(@"This field is used if Refrigerant Temperature Control Algorithm is VariableTemp Condensing temperature is the refrigerant temperature, not air temperature")]
[JsonProperty(@"This field is used if Refrigerant Temperature Control Algorithm is VariableTemp Condensing temperature is the refrigerant temperature, not air temperature")]
public System.Single VariableCondensingTemperatureMaximumForIndoorUnit { get; set; } = 46;
        
[JsonProperty(@"")]
public System.Single OutdoorUnitEvaporatorReferenceSuperheating { get; set; } = 3;
        
[JsonProperty(@"")]
public System.Single OutdoorUnitCondenserReferenceSubcooling { get; set; } = 5;
        
[JsonProperty(@"")]
public System.Single OutdoorUnitEvaporatorRatedBypassFactor { get; set; } = 0.4;
        
[JsonProperty(@"")]
public System.Single OutdoorUnitCondenserRatedBypassFactor { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single DifferenceBetweenOutdoorUnitEvaporatingTemperatureAndOutdoorAirTemperatureInHeatRecoveryMode { get; set; } = 5;
        
[Description(@"Enter the rated capacity ratio between the main and supplementary outdoor unit heat exchangers [W/W]")]
[JsonProperty(@"Enter the rated capacity ratio between the main and supplementary outdoor unit heat exchangers [W/W]")]
public System.Single OutdoorUnitHeatExchangerCapacityRatio { get; set; } = 0.3;
        
[Description(@"Enter the outdoor unit fan power per Watt of rated evaporative capacity [W/W]")]
[JsonProperty(@"Enter the outdoor unit fan power per Watt of rated evaporative capacity [W/W]")]
public System.Single OutdoorUnitFanPowerPerUnitOfRatedEvaporativeCapacity { get; set; } = 0.00425;
        
[Description(@"Enter the outdoor unit fan flow rate per Watt of rated evaporative capacity [W/W]")]
[JsonProperty(@"Enter the outdoor unit fan flow rate per Watt of rated evaporative capacity [W/W]")]
public System.Single OutdoorUnitFanFlowRatePerUnitOfRatedEvaporativeCapacity { get; set; } = 7.5E-05;
        
[JsonProperty(@"")]
public System.String OutdoorUnitEvaporatingTemperatureFunctionOfSuperheatingCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutdoorUnitCondensingTemperatureFunctionOfSubcoolingCurveName { get; set; } = "";
        
[Description(@"used to calculate the piping loss")]
[JsonProperty(@"used to calculate the piping loss")]
public System.Single DiameterOfMainPipeForSuctionGas { get; set; } = 0.0762;
        
[Description(@"used to calculate the piping loss")]
[JsonProperty(@"used to calculate the piping loss")]
public System.Single DiameterOfMainPipeForDischargeGas { get; set; } = 0.0762;
        
[Description(@"used to calculate the heat loss of the main pipe")]
[JsonProperty(@"used to calculate the heat loss of the main pipe")]
public System.Single LengthOfMainPipeConnectingOutdoorUnitToTheFirstBranchJoint { get; set; } = 30;
        
[Description(@"used to calculate the refrigerant pressure drop of the main pipe")]
[JsonProperty(@"used to calculate the refrigerant pressure drop of the main pipe")]
public System.Single EquivalentLengthOfMainPipeConnectingOutdoorUnitToTheFirstBranchJoint { get; set; } = 36;
        
[Description(@"Difference between outdoor unit height and indoor unit height Positive means outdoor unit is higher than indoor unit Negative means outdoor unit is lower than indoor unit")]
[JsonProperty(@"Difference between outdoor unit height and indoor unit height Positive means outdoor unit is higher than indoor unit Negative means outdoor unit is lower than indoor unit")]
public System.Single HeightDifferenceBetweenOutdoorUnitAndIndoorUnits { get; set; } = 5;
        
[JsonProperty(@"")]
public System.Single MainPipeInsulationThickness { get; set; } = 0.02;
        
[JsonProperty(@"")]
public System.Single MainPipeInsulationThermalConductivity { get; set; } = 0.032;
        
[Description(@"Enter the value of the resistive heater located in the compressor(s). This heater is used to warm the refrigerant and oil when the compressor is off")]
[JsonProperty(@"Enter the value of the resistive heater located in the compressor(s). This heater is used to warm the refrigerant and oil when the compressor is off")]
public System.Single CrankcaseHeaterPowerPerCompressor { get; set; } = 33;
        
[Description(@"Enter the total number of compressor. This input is used only for crankcase heater calculations.")]
[JsonProperty(@"Enter the total number of compressor. This input is used only for crankcase heater calculations.")]
public System.Single NumberOfCompressors { get; set; } = 2;
        
[Description(@"Enter the ratio of the first stage compressor to total compressor capacity All other compressors are assumed to be equally sized. This inputs is used only for crankcase heater calculations")]
[JsonProperty(@"Enter the ratio of the first stage compressor to total compressor capacity All other compressors are assumed to be equally sized. This inputs is used only for crankcase heater calculations")]
public System.Single RatioOfCompressorSizeToTotalCompressorCapacity { get; set; } = 0.5;
        
[Description(@"Enter the maximum outdoor temperature above which the crankcase heaters are disabled")]
[JsonProperty(@"Enter the maximum outdoor temperature above which the crankcase heaters are disabled")]
public System.Single MaximumOutdoorDryBulbTemperatureForCrankcaseHeater { get; set; } = 5;
        
[Description(@"Select a defrost strategy. Reverse cycle reverses the operating mode from heating to cooling to melt frost formation on the condenser coil The resistive strategy uses a resistive heater to melt the frost.")]
[JsonProperty(@"Select a defrost strategy. Reverse cycle reverses the operating mode from heating to cooling to melt frost formation on the condenser coil The resistive strategy uses a resistive heater to melt the frost.")]
public YesNoDefault DefrostStrategy { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Resistive");
        
[Description(@"Choose a defrost control type Either use a fixed Timed defrost period or select OnDemand to defrost only when necessary")]
[JsonProperty(@"Choose a defrost control type Either use a fixed Timed defrost period or select OnDemand to defrost only when necessary")]
public YesNoDefault DefrostControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Timed");
        
[Description(@"A valid performance curve must be used if ReverseCycle defrost strategy is selected")]
[JsonProperty(@"A valid performance curve must be used if ReverseCycle defrost strategy is selected")]
public System.String DefrostEnergyInputRatioModifierFunctionOfTemperatureCurveName { get; set; } = "";
        
[Description(@"Fraction of time in defrost mode Only applicable if timed defrost control is specified")]
[JsonProperty(@"Fraction of time in defrost mode Only applicable if timed defrost control is specified")]
public System.Single DefrostTimePeriodFraction { get; set; } = 0.058333;
        
[Description(@"Enter the size of the resistive defrost heating element Only applicable if resistive defrost strategy is specified")]
[JsonProperty(@"Enter the size of the resistive defrost heating element Only applicable if resistive defrost strategy is specified")]
public System.String ResistiveDefrostHeaterCapacity { get; set; } = (System.String)0;
        
[Description(@"Enter the maximum outdoor temperature above which the defrost operation is disabled")]
[JsonProperty(@"Enter the maximum outdoor temperature above which the defrost operation is disabled")]
public System.Single MaximumOutdoorDryBulbTemperatureForDefrostOperation { get; set; } = 5;
        
[Description(@"This is used to describe the transition from Cooling Only mode to Heat Recovery mode Enter the fractional capacity available at the start of heat recovery mode. The capacity exponentially approaches the steady-state value according to the inputs for Heat Recovery Cooling Capacity Modifier and Heat Recovery Cooling Capacity Time Constant")]
[JsonProperty(@"This is used to describe the transition from Cooling Only mode to Heat Recovery mode Enter the fractional capacity available at the start of heat recovery mode. The capacity exponentially approaches the steady-state value according to the inputs for Heat Recovery Cooling Capacity Modifier and Heat Recovery Cooling Capacity Time Constant")]
public System.Single InitialHeatRecoveryCoolingCapacityFraction { get; set; } = 1;
        
[Description(@"This is used to describe the transition from Cooling Only mode to Heat Recovery mode Enter the time constant used to model the transition from cooling only mode to heat recovery mode")]
[JsonProperty(@"This is used to describe the transition from Cooling Only mode to Heat Recovery mode Enter the time constant used to model the transition from cooling only mode to heat recovery mode")]
public System.Single HeatRecoveryCoolingCapacityTimeConstant { get; set; } = 0;
        
[Description(@"This is used to describe the transition from Cooling Only mode to Heat Recovery mode Enter the fractional electric consumption rate at the start of heat recovery mode. The electric consumption rate exponentially approaches the steady-state value according to the inputs for Heat Recovery Cooling Energy Modifier and Heat Recovery Cooling Energy Time Constant")]
[JsonProperty(@"This is used to describe the transition from Cooling Only mode to Heat Recovery mode Enter the fractional electric consumption rate at the start of heat recovery mode. The electric consumption rate exponentially approaches the steady-state value according to the inputs for Heat Recovery Cooling Energy Modifier and Heat Recovery Cooling Energy Time Constant")]
public System.Single InitialHeatRecoveryCoolingEnergyFraction { get; set; } = 1;
        
[Description(@"This is used to describe the transition from Cooling Only mode to Heat Recovery mode Enter the time constant used to model the transition from cooling only mode to heat recovery mode")]
[JsonProperty(@"This is used to describe the transition from Cooling Only mode to Heat Recovery mode Enter the time constant used to model the transition from cooling only mode to heat recovery mode")]
public System.Single HeatRecoveryCoolingEnergyTimeConstant { get; set; } = 0;
        
[Description(@"This is used to describe the transition from Heating Only mode to Heat Recovery mode Enter the fractional capacity available at the start of heat recovery mode. The capacity exponentially approaches the steady-state value according to the inputs for Heat Recovery Heating Capacity Modifier and Heat Recovery Heating Capacity Time Constant")]
[JsonProperty(@"This is used to describe the transition from Heating Only mode to Heat Recovery mode Enter the fractional capacity available at the start of heat recovery mode. The capacity exponentially approaches the steady-state value according to the inputs for Heat Recovery Heating Capacity Modifier and Heat Recovery Heating Capacity Time Constant")]
public System.Single InitialHeatRecoveryHeatingCapacityFraction { get; set; } = 1;
        
[Description(@"This is used to describe the transition from Heating Only mode to Heat Recovery mode Enter the time constant used to model the transition from cooling only mode to heat recovery mode")]
[JsonProperty(@"This is used to describe the transition from Heating Only mode to Heat Recovery mode Enter the time constant used to model the transition from cooling only mode to heat recovery mode")]
public System.Single HeatRecoveryHeatingCapacityTimeConstant { get; set; } = 0;
        
[Description(@"This is used to describe the transition from Heating Only mode to Heat Recovery mode Enter the fractional electric consumption rate at the start of heat recovery mode. The electric consumption rate exponentially approaches the steady-state value according to the inputs for Heat Recovery Cooling Energy Modifier and Heat Recovery Cooling Energy Time Constant")]
[JsonProperty(@"This is used to describe the transition from Heating Only mode to Heat Recovery mode Enter the fractional electric consumption rate at the start of heat recovery mode. The electric consumption rate exponentially approaches the steady-state value according to the inputs for Heat Recovery Cooling Energy Modifier and Heat Recovery Cooling Energy Time Constant")]
public System.Single InitialHeatRecoveryHeatingEnergyFraction { get; set; } = 1;
        
[Description(@"This is used to describe the transition from Heating Only mode to Heat Recovery mode Enter the time constant used to model the transition from cooling only mode to heat recovery mode")]
[JsonProperty(@"This is used to describe the transition from Heating Only mode to Heat Recovery mode Enter the time constant used to model the transition from cooling only mode to heat recovery mode")]
public System.Single HeatRecoveryHeatingEnergyTimeConstant { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single CompressorMaximumDeltaPressure { get; set; } = 4500000;
        
[Description(@"Efficiency of the compressor inverter")]
[JsonProperty(@"Efficiency of the compressor inverter")]
public System.Single CompressorInverterEfficiency { get; set; } = 0.95;
        
[Description(@"Describe the evaporative capacity difference because of system configuration difference between test bed and real system.")]
[JsonProperty(@"Describe the evaporative capacity difference because of system configuration difference between test bed and real system.")]
public System.Single CompressorEvaporativeCapacityCorrectionFactor { get; set; } = 1;
        
[Description(@"Load index describe the compressor operational state, either a single compressor or multiple compressors, at different load levels. First index represents minimal capacity operation Last index represents full capacity operation")]
[JsonProperty(@"Load index describe the compressor operational state, either a single compressor or multiple compressors, at different load levels. First index represents minimal capacity operation Last index represents full capacity operation")]
public System.Single NumberOfCompressorLoadingIndexEntries { get; set; } = 2;
        
[JsonProperty(@"")]
public System.String LoadingIndices { get; set; } = "";
    }
    
    public enum RefrigerantTemperatureControlAlgorithmForIndoorUnitType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantTemp")]
        ConstantTemp = 1,
        
        [JsonProperty("VariableTemp")]
        VariableTemp = 2,
    }
    
    public enum DefrostStrategyType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Resistive")]
        Resistive = 1,
        
        [JsonProperty("ReverseCycle")]
        ReverseCycle = 2,
    }
    
    public enum DefrostControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("OnDemand")]
        OnDemand = 1,
        
        [JsonProperty("Timed")]
        Timed = 2,
    }
    
    [Description("List of variable refrigerant flow (VRF) terminal units served by a given VRF cond" +
        "ensing unit. See ZoneHVAC:TerminalUnit:VariableRefrigerantFlow and AirConditione" +
        "r:VariableRefrigerantFlow.")]
    [JsonObject("ZoneTerminalUnitList")]
    public class ZoneTerminalUnitList
    {
        
[JsonProperty(@"")]
public System.String ZoneTerminalUnitListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String TerminalUnits { get; set; } = "";
    }
}
namespace EnergyPlus.WaterHeatersandThermalStorage
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Water heater with well-mixed, single-node water tank. May be used to model a tank" +
        "less water heater (small tank volume), a hot water storage tank (zero heater cap" +
        "acity), or a heat pump water heater (see WaterHeater:HeatPump:PumpedCondenser.)")]
    [JsonObject("WaterHeater:Mixed")]
    public class WaterHeater_Mixed
    {
        
[JsonProperty(@"")]
public System.String TankVolume { get; set; } = (System.String)0;
        
[JsonProperty(@"")]
public System.String SetpointTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DeadbandTemperatureDifference { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single MaximumTemperatureLimit { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault HeaterControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Cycle");
        
[JsonProperty(@"")]
public System.String HeaterMaximumCapacity { get; set; } = "";
        
[Description(@"Only used when Heater Control Type is set to Modulate")]
[JsonProperty(@"Only used when Heater Control Type is set to Modulate")]
public System.Single HeaterMinimumCapacity { get; set; } = ;
        
[Description(@"Not yet implemented")]
[JsonProperty(@"Not yet implemented")]
public System.Single HeaterIgnitionMinimumFlowRate { get; set; } = 0;
        
[Description(@"Not yet implemented")]
[JsonProperty(@"Not yet implemented")]
public System.Single HeaterIgnitionDelay { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault HeaterFuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single HeaterThermalEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.String PartLoadFactorCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single OffCycleParasiticFuelConsumptionRate { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault OffCycleParasiticFuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single OffCycleParasiticHeatFractionToTank { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single OnCycleParasiticFuelConsumptionRate { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault OnCycleParasiticFuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single OnCycleParasiticHeatFractionToTank { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault AmbientTemperatureIndicator { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String AmbientTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AmbientTemperatureZoneName { get; set; } = "";
        
[Description(@"required for Ambient Temperature Indicator=Outdoors")]
[JsonProperty(@"required for Ambient Temperature Indicator=Outdoors")]
public System.String AmbientTemperatureOutdoorAirNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single OffCycleLossCoefficientToAmbientTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single OffCycleLossFractionToZone { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single OnCycleLossCoefficientToAmbientTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single OnCycleLossFractionToZone { get; set; } = 1;
        
[Description(@"Only used if Use Side Node connections are blank")]
[JsonProperty(@"Only used if Use Side Node connections are blank")]
public System.Single PeakUseFlowRate { get; set; } = ;
        
[Description(@"Only used if Use Side Node connections are blank")]
[JsonProperty(@"Only used if Use Side Node connections are blank")]
public System.String UseFlowRateFractionScheduleName { get; set; } = "";
        
[Description(@"Only used if Use Side Node connections are blank Defaults to water temperatures calculated by Site:WaterMainsTemperature object")]
[JsonProperty(@"Only used if Use Side Node connections are blank Defaults to water temperatures calculated by Site:WaterMainsTemperature object")]
public System.String ColdWaterSupplyTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String UseSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String UseSideOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single UseSideEffectiveness { get; set; } = 1;
        
[JsonProperty(@"")]
public System.String SourceSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SourceSideOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SourceSideEffectiveness { get; set; } = 1;
        
[JsonProperty(@"")]
public System.String UseSideDesignFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String SourceSideDesignFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Parameter for autosizing design flow rates for indirectly heated water tanks Time required to raise temperature of entire tank from 14.4C to 57.2C")]
[JsonProperty(@"Parameter for autosizing design flow rates for indirectly heated water tanks Time required to raise temperature of entire tank from 14.4C to 57.2C")]
public System.Single IndirectWaterHeatingRecoveryTime { get; set; } = 1.5;
        
[Description(@"StorageTank mode always requests flow unless tank is at its Maximum Temperature Limit IndirectHeatPrimarySetpoint mode requests flow whenever primary setpoint calls for heat IndirectHeatAlternateSetpoint mode requests flow whenever alternate indirect setpoint calls for heat")]
[JsonProperty(@"StorageTank mode always requests flow unless tank is at its Maximum Temperature Limit IndirectHeatPrimarySetpoint mode requests flow whenever primary setpoint calls for heat IndirectHeatAlternateSetpoint mode requests flow whenever alternate indirect setpoint calls for heat")]
public YesNoDefault SourceSideFlowControlMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "IndirectHeatPrimarySetpoint");
        
[Description(@"This field is only used if the previous is set to IndirectHeatAlternateSetpoint")]
[JsonProperty(@"This field is only used if the previous is set to IndirectHeatAlternateSetpoint")]
public System.String IndirectAlternateSetpointTemperatureScheduleName { get; set; } = "";
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
    }
    
    public enum HeaterControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Cycle")]
        Cycle = 1,
        
        [JsonProperty("Modulate")]
        Modulate = 2,
    }
    
    public enum HeaterFuelTypeType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 2,
        
        [JsonProperty("Electricity")]
        Electricity = 3,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 4,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 5,
        
        [JsonProperty("Gasoline")]
        Gasoline = 6,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 7,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 8,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 9,
        
        [JsonProperty("Propane")]
        Propane = 10,
        
        [JsonProperty("Steam")]
        Steam = 11,
    }
    
    public enum OffCycleParasiticFuelTypeType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 2,
        
        [JsonProperty("Electricity")]
        Electricity = 3,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 4,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 5,
        
        [JsonProperty("Gasoline")]
        Gasoline = 6,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 7,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 8,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 9,
        
        [JsonProperty("Propane")]
        Propane = 10,
        
        [JsonProperty("Steam")]
        Steam = 11,
    }
    
    public enum OnCycleParasiticFuelTypeType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 2,
        
        [JsonProperty("Electricity")]
        Electricity = 3,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 4,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 5,
        
        [JsonProperty("Gasoline")]
        Gasoline = 6,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 7,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 8,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 9,
        
        [JsonProperty("Propane")]
        Propane = 10,
        
        [JsonProperty("Steam")]
        Steam = 11,
    }
    
    public enum AmbientTemperatureIndicatorType
    {
        
        [JsonProperty("Outdoors")]
        Outdoors = 0,
        
        [JsonProperty("Schedule")]
        Schedule = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    public enum SourceSideFlowControlModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("IndirectHeatAlternateSetpoint")]
        IndirectHeatAlternateSetpoint = 1,
        
        [JsonProperty("IndirectHeatPrimarySetpoint")]
        IndirectHeatPrimarySetpoint = 2,
        
        [JsonProperty("StorageTank")]
        StorageTank = 3,
    }
    
    [Description("Water heater with stratified, multi-node water tank. May be used to model a tankl" +
        "ess water heater (small tank volume), a hot water storage tank (zero heater capa" +
        "city), or a heat pump water heater (see WaterHeater:HeatPump:*.)")]
    [JsonObject("WaterHeater:Stratified")]
    public class WaterHeater_Stratified
    {
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
        
[JsonProperty(@"")]
public System.String TankVolume { get; set; } = "";
        
[Description(@"Height is measured in the axial direction for horizontal cylinders")]
[JsonProperty(@"Height is measured in the axial direction for horizontal cylinders")]
public System.String TankHeight { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault TankShape { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "VerticalCylinder");
        
[Description(@"Only used if Tank Shape is Other")]
[JsonProperty(@"Only used if Tank Shape is Other")]
public System.Single TankPerimeter { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumTemperatureLimit { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault HeaterPriorityControl { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "MasterSlave");
        
[JsonProperty(@"")]
public System.String HeaterSetpointTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single HeaterDeadbandTemperatureDifference { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String HeaterCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single HeaterHeight { get; set; } = ;
        
[JsonProperty(@"")]
public System.String HeaterSetpointTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single HeaterDeadbandTemperatureDifference { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single HeaterCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single HeaterHeight { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault HeaterFuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single HeaterThermalEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single OffCycleParasiticFuelConsumptionRate { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault OffCycleParasiticFuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single OffCycleParasiticHeatFractionToTank { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single OffCycleParasiticHeight { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single OnCycleParasiticFuelConsumptionRate { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault OnCycleParasiticFuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single OnCycleParasiticHeatFractionToTank { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single OnCycleParasiticHeight { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault AmbientTemperatureIndicator { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String AmbientTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AmbientTemperatureZoneName { get; set; } = "";
        
[Description(@"required for Ambient Temperature Indicator=Outdoors")]
[JsonProperty(@"required for Ambient Temperature Indicator=Outdoors")]
public System.String AmbientTemperatureOutdoorAirNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single UniformSkinLossCoefficientPerUnitAreaToAmbientTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single SkinLossFractionToZone { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single OffCycleFlueLossCoefficientToAmbientTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single OffCycleFlueLossFractionToZone { get; set; } = 1;
        
[Description(@"Only used if Use Side Node connections are blank")]
[JsonProperty(@"Only used if Use Side Node connections are blank")]
public System.Single PeakUseFlowRate { get; set; } = ;
        
[Description(@"If blank, defaults to 1.0 at all times Only used if use side node connections are blank")]
[JsonProperty(@"If blank, defaults to 1.0 at all times Only used if use side node connections are blank")]
public System.String UseFlowRateFractionScheduleName { get; set; } = "";
        
[Description(@"Only used if use side node connections are blank Defaults to water temperatures calculated by Site:WaterMainsTemperature object")]
[JsonProperty(@"Only used if use side node connections are blank Defaults to water temperatures calculated by Site:WaterMainsTemperature object")]
public System.String ColdWaterSupplyTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String UseSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String UseSideOutletNodeName { get; set; } = "";
        
[Description(@"The use side effectiveness in the stratified tank model is a simplified analogy of a heat exchanger's effectiveness. This effectiveness is equal to the fraction of use mass flow rate that directly mixes with the tank fluid. And one minus the effectiveness is the fraction that bypasses the tank. The use side mass flow rate that bypasses the tank is mixed with the fluid or water leaving the stratified tank.")]
[JsonProperty(@"The use side effectiveness in the stratified tank model is a simplified analogy of a heat exchanger's effectiveness. This effectiveness is equal to the fraction of use mass flow rate that directly mixes with the tank fluid. And one minus the effectiveness is the fraction that bypasses the tank. The use side mass flow rate that bypasses the tank is mixed with the fluid or water leaving the stratified tank.")]
public System.Single UseSideEffectiveness { get; set; } = 1;
        
[Description(@"Defaults to bottom of tank")]
[JsonProperty(@"Defaults to bottom of tank")]
public System.Single UseSideInletHeight { get; set; } = 0;
        
[Description(@"Defaults to top of tank")]
[JsonProperty(@"Defaults to top of tank")]
public System.String UseSideOutletHeight { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.String SourceSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SourceSideOutletNodeName { get; set; } = "";
        
[Description(@"The source side effectiveness in the stratified tank model is a simplified analogy of a heat exchanger's effectiveness. This effectiveness is equal to the fraction of source mass flow rate that directly mixes with the tank fluid. And one minus the effectiveness is the fraction that bypasses the tank. The source side mass flow rate that bypasses the tank is mixed with the fluid or water leaving the stratified tank.")]
[JsonProperty(@"The source side effectiveness in the stratified tank model is a simplified analogy of a heat exchanger's effectiveness. This effectiveness is equal to the fraction of source mass flow rate that directly mixes with the tank fluid. And one minus the effectiveness is the fraction that bypasses the tank. The source side mass flow rate that bypasses the tank is mixed with the fluid or water leaving the stratified tank.")]
public System.Single SourceSideEffectiveness { get; set; } = 1;
        
[Description(@"Defaults to top of tank")]
[JsonProperty(@"Defaults to top of tank")]
public System.String SourceSideInletHeight { get; set; } = (System.String)Autocalculate;
        
[Description(@"Defaults to bottom of tank")]
[JsonProperty(@"Defaults to bottom of tank")]
public System.Single SourceSideOutletHeight { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault InletMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Fixed");
        
[JsonProperty(@"")]
public System.String UseSideDesignFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String SourceSideDesignFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Parameter for autosizing design flow rates for indirectly heated water tanks time required to raise temperature of entire tank from 14.4C to 57.2C")]
[JsonProperty(@"Parameter for autosizing design flow rates for indirectly heated water tanks time required to raise temperature of entire tank from 14.4C to 57.2C")]
public System.Single IndirectWaterHeatingRecoveryTime { get; set; } = 1.5;
        
[JsonProperty(@"")]
public System.Single NumberOfNodes { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single AdditionalDestratificationConductivity { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[Description(@"StorageTank mode always requests flow unless tank is at its Maximum Temperature Limit IndirectHeatPrimarySetpoint mode requests flow whenever primary setpoint for heater 1 calls for heat IndirectHeatAlternateSetpoint mode requests flow whenever alternate indirect setpoint calls for heat")]
[JsonProperty(@"StorageTank mode always requests flow unless tank is at its Maximum Temperature Limit IndirectHeatPrimarySetpoint mode requests flow whenever primary setpoint for heater 1 calls for heat IndirectHeatAlternateSetpoint mode requests flow whenever alternate indirect setpoint calls for heat")]
public YesNoDefault SourceSideFlowControlMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "IndirectHeatPrimarySetpoint");
        
[Description(@"This field is only used if the previous is set to IndirectHeatAlternateSetpoint")]
[JsonProperty(@"This field is only used if the previous is set to IndirectHeatAlternateSetpoint")]
public System.String IndirectAlternateSetpointTemperatureScheduleName { get; set; } = "";
    }
    
    public enum TankShapeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("HorizontalCylinder")]
        HorizontalCylinder = 1,
        
        [JsonProperty("Other")]
        Other = 2,
        
        [JsonProperty("VerticalCylinder")]
        VerticalCylinder = 3,
    }
    
    public enum HeaterPriorityControlType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MasterSlave")]
        MasterSlave = 1,
        
        [JsonProperty("Simultaneous")]
        Simultaneous = 2,
    }
    
    public enum HeaterFuelTypeType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 2,
        
        [JsonProperty("Electricity")]
        Electricity = 3,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 4,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 5,
        
        [JsonProperty("Gasoline")]
        Gasoline = 6,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 7,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 8,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 9,
        
        [JsonProperty("Propane")]
        Propane = 10,
        
        [JsonProperty("Steam")]
        Steam = 11,
    }
    
    public enum OffCycleParasiticFuelTypeType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 2,
        
        [JsonProperty("Electricity")]
        Electricity = 3,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 4,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 5,
        
        [JsonProperty("Gasoline")]
        Gasoline = 6,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 7,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 8,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 9,
        
        [JsonProperty("Propane")]
        Propane = 10,
        
        [JsonProperty("Steam")]
        Steam = 11,
    }
    
    public enum OnCycleParasiticFuelTypeType
    {
        
        [JsonProperty("Coal")]
        Coal = 0,
        
        [JsonProperty("Diesel")]
        Diesel = 1,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 2,
        
        [JsonProperty("Electricity")]
        Electricity = 3,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 4,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 5,
        
        [JsonProperty("Gasoline")]
        Gasoline = 6,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 7,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 8,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 9,
        
        [JsonProperty("Propane")]
        Propane = 10,
        
        [JsonProperty("Steam")]
        Steam = 11,
    }
    
    public enum AmbientTemperatureIndicatorType
    {
        
        [JsonProperty("Outdoors")]
        Outdoors = 0,
        
        [JsonProperty("Schedule")]
        Schedule = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    public enum InletModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Fixed")]
        Fixed = 1,
        
        [JsonProperty("Seeking")]
        Seeking = 2,
    }
    
    public enum SourceSideFlowControlModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("IndirectHeatAlternateSetpoint")]
        IndirectHeatAlternateSetpoint = 1,
        
        [JsonProperty("IndirectHeatPrimarySetpoint")]
        IndirectHeatPrimarySetpoint = 2,
        
        [JsonProperty("StorageTank")]
        StorageTank = 3,
    }
    
    [Description("This input object is used with WaterHeater:Mixed or with WaterHeater:Stratified t" +
        "o autosize tank volume and heater capacity This object is not needed if water he" +
        "aters are not autosized.")]
    [JsonObject("WaterHeater:Sizing")]
    public class WaterHeater_Sizing
    {
        
[JsonProperty(@"")]
public System.String WaterheaterName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault DesignMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Only used for Design Mode = PeakDraw")]
[JsonProperty(@"Only used for Design Mode = PeakDraw")]
public System.Single TimeStorageCanMeetPeakDraw { get; set; } = ;
        
[Description(@"Only used for Design Mode = PeakDraw")]
[JsonProperty(@"Only used for Design Mode = PeakDraw")]
public System.Single TimeForTankRecovery { get; set; } = ;
        
[Description(@"Only used if Design Mode = PeakDraw and the water heater also has autosized flow rates for connections on the demand side of a plant loop")]
[JsonProperty(@"Only used if Design Mode = PeakDraw and the water heater also has autosized flow rates for connections on the demand side of a plant loop")]
public System.Single NominalTankVolumeForAutosizingPlantConnections { get; set; } = ;
        
[Description(@"Only used for Design Mode = ResidentialHUD-FHAMinimum")]
[JsonProperty(@"Only used for Design Mode = ResidentialHUD-FHAMinimum")]
public System.Single NumberOfBedrooms { get; set; } = ;
        
[Description(@"Only used for Design Mode = ResidentialHUD-FHAMinimum")]
[JsonProperty(@"Only used for Design Mode = ResidentialHUD-FHAMinimum")]
public System.Single NumberOfBathrooms { get; set; } = ;
        
[Description(@"Only used for Design Mode = PerPerson")]
[JsonProperty(@"Only used for Design Mode = PerPerson")]
public System.Single StorageCapacityPerPerson { get; set; } = ;
        
[Description(@"Only used for Design Mode = PerPerson")]
[JsonProperty(@"Only used for Design Mode = PerPerson")]
public System.Single RecoveryCapacityPerPerson { get; set; } = ;
        
[Description(@"Only used for Design Mode = PerFloorArea")]
[JsonProperty(@"Only used for Design Mode = PerFloorArea")]
public System.Single StorageCapacityPerFloorArea { get; set; } = ;
        
[Description(@"Only used for Design Mode = PerFloorArea")]
[JsonProperty(@"Only used for Design Mode = PerFloorArea")]
public System.Single RecoveryCapacityPerFloorArea { get; set; } = ;
        
[Description(@"Only used for Design Mode = PerUnit")]
[JsonProperty(@"Only used for Design Mode = PerUnit")]
public System.Single NumberOfUnits { get; set; } = ;
        
[Description(@"Only used for Design Mode = PerUnit")]
[JsonProperty(@"Only used for Design Mode = PerUnit")]
public System.Single StorageCapacityPerUnit { get; set; } = ;
        
[Description(@"Only used for Design Mode = PerUnit")]
[JsonProperty(@"Only used for Design Mode = PerUnit")]
public System.Single RecoveryCapacityPerunit { get; set; } = ;
        
[Description(@"Only used for Design Mode = PerSolarCollectorArea")]
[JsonProperty(@"Only used for Design Mode = PerSolarCollectorArea")]
public System.Single StorageCapacityPerCollectorArea { get; set; } = ;
        
[Description(@"only used if for WaterHeater:Stratified")]
[JsonProperty(@"only used if for WaterHeater:Stratified")]
public System.Single HeightAspectRatio { get; set; } = ;
    }
    
    public enum DesignModeType
    {
        
        [JsonProperty("PeakDraw")]
        PeakDraw = 0,
        
        [JsonProperty("PerFloorArea")]
        PerFloorArea = 1,
        
        [JsonProperty("PerPerson")]
        PerPerson = 2,
        
        [JsonProperty("PerSolarCollectorArea")]
        PerSolarCollectorArea = 3,
        
        [JsonProperty("PerUnit")]
        PerUnit = 4,
        
        [JsonProperty("ResidentialHUD-FHAMinimum")]
        ResidentialHUDFHAMinimum = 5,
    }
    
    [Description(@"This object models an air-source heat pump for water heating where the water is pumped out of the tank, through a heating coil and returned to the tank. For wrapped condenser HPWHs, see WaterHeater:HeatPump:WrappedCondenser. WaterHeater:HeatPump:PumpedCondenser is a compound object that references other component objects - Coil:WaterHeating:AirToWaterHeatPump:*, Fan:OnOff, WaterHeater:Mixed or WaterHeater:Stratified")]
    [JsonObject("WaterHeater:HeatPump:PumpedCondenser")]
    public class WaterHeater_HeatPump_PumpedCondenser
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Schedule values of 0 denote the heat pump compressor is off and the parasitic electric energy is also off.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Schedule values of 0 denote the heat pump compressor is off and the parasitic electric energy is also off.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Defines the cut-out temperature where the heat pump compressor turns off. The heat pump compressor setpoint temperature should always be greater than the water tank's heater (element or burner) setpoint temperature.")]
[JsonProperty(@"Defines the cut-out temperature where the heat pump compressor turns off. The heat pump compressor setpoint temperature should always be greater than the water tank's heater (element or burner) setpoint temperature.")]
public System.String CompressorSetpointTemperatureScheduleName { get; set; } = "";
        
[Description(@"Setpoint temperature minus the dead band temperature difference defines the cut-in temperature where the heat pump compressor turns on. The water tank's heater (element or burner) setpoint temperature should always be less than the heat pump compressor cut-in temperature.")]
[JsonProperty(@"Setpoint temperature minus the dead band temperature difference defines the cut-in temperature where the heat pump compressor turns on. The water tank's heater (element or burner) setpoint temperature should always be less than the heat pump compressor cut-in temperature.")]
public System.Single DeadBandTemperatureDifference { get; set; } = 5;
        
[Description(@"Should match the field Source Outlet Node Name in the water heater tank object. Should also match the Condenser Water Inlet Node Name in the associated DX coil object.")]
[JsonProperty(@"Should match the field Source Outlet Node Name in the water heater tank object. Should also match the Condenser Water Inlet Node Name in the associated DX coil object.")]
public System.String CondenserWaterInletNodeName { get; set; } = "";
        
[Description(@"Should match the field Source Inlet Node Name in water heater tank object. Should also match the Condenser Water Outlet Node Name in the associated DX Coil object.")]
[JsonProperty(@"Should match the field Source Inlet Node Name in water heater tank object. Should also match the Condenser Water Outlet Node Name in the associated DX Coil object.")]
public System.String CondenserWaterOutletNodeName { get; set; } = "";
        
[Description(@"Actual water flow rate through the heat pump's water coil (condenser). If autocalculated, the water flow rate is set equal to 4.487E-8 m3/s/W times the rated heating capacity of the heat pump's DX coil.")]
[JsonProperty(@"Actual water flow rate through the heat pump's water coil (condenser). If autocalculated, the water flow rate is set equal to 4.487E-8 m3/s/W times the rated heating capacity of the heat pump's DX coil.")]
public System.String CondenserWaterFlowRate { get; set; } = "";
        
[Description(@"Actual air flow rate across the heat pump's air coil (evaporator). If autocalculated, the air flow rate is set equal to 5.035E-5 m3/s/W times the rated heating capacity of the heat pump's DX coil.")]
[JsonProperty(@"Actual air flow rate across the heat pump's air coil (evaporator). If autocalculated, the air flow rate is set equal to 5.035E-5 m3/s/W times the rated heating capacity of the heat pump's DX coil.")]
public System.String EvaporatorAirFlowRate { get; set; } = "";
        
[Description(@"Defines the configuration of the airflow path through the air coil and fan section.")]
[JsonProperty(@"Defines the configuration of the airflow path through the air coil and fan section.")]
public YesNoDefault InletAirConfiguration { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Zone air exhaust node name if Inlet Air Configuration is ZoneAirOnly or ZoneAndOutdoorAir. Simply a unique Node Name if Inlet Air Configuration is Schedule. Otherwise, leave field blank.")]
[JsonProperty(@"Zone air exhaust node name if Inlet Air Configuration is ZoneAirOnly or ZoneAndOutdoorAir. Simply a unique Node Name if Inlet Air Configuration is Schedule. Otherwise, leave field blank.")]
public System.String AirInletNodeName { get; set; } = "";
        
[Description(@"Zone Air Inlet Node Name if Inlet Air Configuration is ZoneAirOnly or ZoneAndOutdoorAir. Simply a unique Node Name if Inlet Air Configuration is Schedule. Otherwise, leave field blank.")]
[JsonProperty(@"Zone Air Inlet Node Name if Inlet Air Configuration is ZoneAirOnly or ZoneAndOutdoorAir. Simply a unique Node Name if Inlet Air Configuration is Schedule. Otherwise, leave field blank.")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Outdoor air node name if inlet air configuration is ZoneAndOutdoorAir or OutdoorAirOnly, otherwise leave field blank.")]
[JsonProperty(@"Outdoor air node name if inlet air configuration is ZoneAndOutdoorAir or OutdoorAirOnly, otherwise leave field blank.")]
public System.String OutdoorAirNodeName { get; set; } = "";
        
[Description(@"Simply a unique Node Name if Inlet Air Configuration is ZoneAndOutdoorAir or OutdoorAirOnly, otherwise leave field blank.")]
[JsonProperty(@"Simply a unique Node Name if Inlet Air Configuration is ZoneAndOutdoorAir or OutdoorAirOnly, otherwise leave field blank.")]
public System.String ExhaustAirNodeName { get; set; } = "";
        
[Description(@"Used only if Inlet Air Configuration is Schedule, otherwise leave blank. Schedule values should be degrees C.")]
[JsonProperty(@"Used only if Inlet Air Configuration is Schedule, otherwise leave blank. Schedule values should be degrees C.")]
public System.String InletAirTemperatureScheduleName { get; set; } = "";
        
[Description(@"Used only if Inlet Air Configuration is Schedule, otherwise leave blank. Schedule values are entered as a fraction (e.g. 0.5 is equal to 50%RH)")]
[JsonProperty(@"Used only if Inlet Air Configuration is Schedule, otherwise leave blank. Schedule values are entered as a fraction (e.g. 0.5 is equal to 50%RH)")]
public System.String InletAirHumidityScheduleName { get; set; } = "";
        
[Description(@"Used only if Inlet Air Configuration is ZoneAirOnly or ZoneAndOutdoorAir. Otherwise, leave field blank.")]
[JsonProperty(@"Used only if Inlet Air Configuration is ZoneAirOnly or ZoneAndOutdoorAir. Otherwise, leave field blank.")]
public System.String InletAirZoneName { get; set; } = "";
        
[Description(@"Specify the type of water heater tank used by this heat pump water heater.")]
[JsonProperty(@"Specify the type of water heater tank used by this heat pump water heater.")]
public YesNoDefault TankObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaterHeater:Mixed");
        
[Description(@"Needs to match the name used in the corresponding Water Heater object.")]
[JsonProperty(@"Needs to match the name used in the corresponding Water Heater object.")]
public System.String TankName { get; set; } = "";
        
[Description(@"Used only when the heat pump water heater is connected to a plant loop, otherwise leave blank. Needs to match the name used in the corresponding Water Heater object when connected to a plant loop.")]
[JsonProperty(@"Used only when the heat pump water heater is connected to a plant loop, otherwise leave blank. Needs to match the name used in the corresponding Water Heater object when connected to a plant loop.")]
public System.String TankUseSideInletNodeName { get; set; } = "";
        
[Description(@"Used only when the heat pump water heater is connected to a plant loop, otherwise leave blank. Needs to match the name used in the corresponding Water Heater object when connected to a plant loop.")]
[JsonProperty(@"Used only when the heat pump water heater is connected to a plant loop, otherwise leave blank. Needs to match the name used in the corresponding Water Heater object when connected to a plant loop.")]
public System.String TankUseSideOutletNodeName { get; set; } = "";
        
[Description(@"Specify the type of DX coil used by this heat pump water heater. The only valid choice is Coil:WaterHeating:AirToWaterHeatPump:Pumped and Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed, and CoilSystem:IntegratedHeatPump:AirSource")]
[JsonProperty(@"Specify the type of DX coil used by this heat pump water heater. The only valid choice is Coil:WaterHeating:AirToWaterHeatPump:Pumped and Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed, and CoilSystem:IntegratedHeatPump:AirSource")]
public YesNoDefault DxCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Coil:WaterHeating:AirToWaterHeatPump:Pumped");
        
[Description(@"Must match the name used in the corresponding Coil:WaterHeating:AirToWaterHeatPump:* object, or CoilSystem:IntegratedHeatPump:AirSource")]
[JsonProperty(@"Must match the name used in the corresponding Coil:WaterHeating:AirToWaterHeatPump:* object, or CoilSystem:IntegratedHeatPump:AirSource")]
public System.String DxCoilName { get; set; } = "";
        
[Description(@"Heat pump compressor will not operate when the inlet air dry-bulb temperature is below this value.")]
[JsonProperty(@"Heat pump compressor will not operate when the inlet air dry-bulb temperature is below this value.")]
public System.Single MinimumInletAirTemperatureForCompressorOperation { get; set; } = 10;
        
[Description(@"Heat pump compressor will not operate when the inlet air dry-bulb temperature is above this value.")]
[JsonProperty(@"Heat pump compressor will not operate when the inlet air dry-bulb temperature is above this value.")]
public System.Single MaximumInletAirTemperatureForCompressorOperation { get; set; } = 48.88888888889;
        
[Description(@"If Zone is selected, Inlet Air Configuration must be ZoneAirOnly or ZoneAndOutdoorAir. If Schedule is selected, then you must provide a Compressor Ambient Temperature Schedule Name below.")]
[JsonProperty(@"If Zone is selected, Inlet Air Configuration must be ZoneAirOnly or ZoneAndOutdoorAir. If Schedule is selected, then you must provide a Compressor Ambient Temperature Schedule Name below.")]
public YesNoDefault CompressorLocation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Used only if Compressor Location is Schedule, otherwise leave field blank.")]
[JsonProperty(@"Used only if Compressor Location is Schedule, otherwise leave field blank.")]
public System.String CompressorAmbientTemperatureScheduleName { get; set; } = "";
        
[Description(@"Specify the type of fan used by this heat pump water heater. The only valid choices are Fan:SystemModel or Fan:OnOff.")]
[JsonProperty(@"Specify the type of fan used by this heat pump water heater. The only valid choices are Fan:SystemModel or Fan:OnOff.")]
public YesNoDefault FanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Fan:OnOff");
        
[Description(@"Needs to match the name used in the corresponding Fan:SystemModel or Fan:OnOff object.")]
[JsonProperty(@"Needs to match the name used in the corresponding Fan:SystemModel or Fan:OnOff object.")]
public System.String FanName { get; set; } = "";
        
[Description(@"BlowThrough means the fan is located before the air coil (upstream). DrawThrough means the fan is located after the air coil (downstream).")]
[JsonProperty(@"BlowThrough means the fan is located before the air coil (upstream). DrawThrough means the fan is located after the air coil (downstream).")]
public YesNoDefault FanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DrawThrough");
        
[Description(@"Parasitic electric power consumed when the heat pump compressor operates. Does not contribute to water heating but can impact the zone air heat balance.")]
[JsonProperty(@"Parasitic electric power consumed when the heat pump compressor operates. Does not contribute to water heating but can impact the zone air heat balance.")]
public System.Single OnCycleParasiticElectricLoad { get; set; } = 0;
        
[Description(@"Parasitic electric power consumed when the heat pump compressor is off. Does not contribute to water heating but can impact the zone air heat balance. Off-cycle parasitic power is 0 when the availability schedule is 0.")]
[JsonProperty(@"Parasitic electric power consumed when the heat pump compressor is off. Does not contribute to water heating but can impact the zone air heat balance. Off-cycle parasitic power is 0 when the availability schedule is 0.")]
public System.Single OffCycleParasiticElectricLoad { get; set; } = 0;
        
[Description(@"This field determines if the parasitic electric load impacts the zone air heat balance. If Zone is selected, Inlet Air Configuration must be ZoneAirOnly or ZoneAndOutdoorAir.")]
[JsonProperty(@"This field determines if the parasitic electric load impacts the zone air heat balance. If Zone is selected, Inlet Air Configuration must be ZoneAirOnly or ZoneAndOutdoorAir.")]
public YesNoDefault ParasiticHeatRejectionLocation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Outdoors");
        
[Description(@"Required only if Inlet Air Configuration is ZoneAndOutdoorAir, otherwise leave field blank.")]
[JsonProperty(@"Required only if Inlet Air Configuration is ZoneAndOutdoorAir, otherwise leave field blank.")]
public System.String InletAirMixerNodeName { get; set; } = "";
        
[Description(@"Required only if Inlet Air Configuration is ZoneAndOutdoorAir, otherwise leave field blank.")]
[JsonProperty(@"Required only if Inlet Air Configuration is ZoneAndOutdoorAir, otherwise leave field blank.")]
public System.String OutletAirSplitterNodeName { get; set; } = "";
        
[Description(@"Required only if Inlet Air Configuration is ZoneAndOutdoorAir, otherwise leave field blank. Schedule values define whether the heat pump draws its inlet air from the zone, outdoors or a combination of zone and outdoor air. A schedule value of 0 denotes inlet air is drawn only from the zone. A schedule value of 1 denotes inlet air is drawn only from outdoors. Schedule values between 0 and 1 denote a mixture of zone and outdoor air proportional to the schedule value (i.e. 0.4 = 40% outdoor air, 60% zone air).")]
[JsonProperty(@"Required only if Inlet Air Configuration is ZoneAndOutdoorAir, otherwise leave field blank. Schedule values define whether the heat pump draws its inlet air from the zone, outdoors or a combination of zone and outdoor air. A schedule value of 0 denotes inlet air is drawn only from the zone. A schedule value of 1 denotes inlet air is drawn only from outdoors. Schedule values between 0 and 1 denote a mixture of zone and outdoor air proportional to the schedule value (i.e. 0.4 = 40% outdoor air, 60% zone air).")]
public System.String InletAirMixerScheduleName { get; set; } = "";
        
[Description(@"MutuallyExclusive means that once the tank heating element is active the heat pump is shut down until setpoint is reached. Simultaneous (default) means that both the tank heating element and heat pump are used at the same time recover the tank temperature.")]
[JsonProperty(@"MutuallyExclusive means that once the tank heating element is active the heat pump is shut down until setpoint is reached. Simultaneous (default) means that both the tank heating element and heat pump are used at the same time recover the tank temperature.")]
public YesNoDefault TankElementControlLogic { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Simultaneous");
        
[Description(@"Used to indicate height of control sensor for Tank Object Type = WaterHeater:Stratified If left blank, it will default to the height of Heater1")]
[JsonProperty(@"Used to indicate height of control sensor for Tank Object Type = WaterHeater:Stratified If left blank, it will default to the height of Heater1")]
public System.Single ControlSensorHeightInStratifiedTank { get; set; } = ;
        
[Description(@"Weight to give Control Sensor 1 temperature The weight of Control Sensor 2 will be 1 - (wt. of control sensor 1)")]
[JsonProperty(@"Weight to give Control Sensor 1 temperature The weight of Control Sensor 2 will be 1 - (wt. of control sensor 1)")]
public System.Single ControlSensorWeight { get; set; } = 1;
        
[Description(@"Used to indicate height of control sensor for Tank Object Type = WaterHeater:Stratified If left blank, it will default to the height of Heater2")]
[JsonProperty(@"Used to indicate height of control sensor for Tank Object Type = WaterHeater:Stratified If left blank, it will default to the height of Heater2")]
public System.Single ControlSensorHeightInStratifiedTank { get; set; } = ;
    }
    
    public enum InletAirConfigurationType
    {
        
        [JsonProperty("OutdoorAirOnly")]
        OutdoorAirOnly = 0,
        
        [JsonProperty("Schedule")]
        Schedule = 1,
        
        [JsonProperty("ZoneAirOnly")]
        ZoneAirOnly = 2,
        
        [JsonProperty("ZoneAndOutdoorAir")]
        ZoneAndOutdoorAir = 3,
    }
    
    public enum TankObjectTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("WaterHeater:Mixed")]
        WaterHeaterMixed = 1,
        
        [JsonProperty("WaterHeater:Stratified")]
        WaterHeaterStratified = 2,
    }
    
    public enum DxCoilObjectTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Coil:WaterHeating:AirToWaterHeatPump:Pumped")]
        CoilWaterHeatingAirToWaterHeatPumpPumped = 1,
        
        [JsonProperty("Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed")]
        CoilWaterHeatingAirToWaterHeatPumpVariableSpeed = 2,
        
        [JsonProperty("CoilSystem:IntegratedHeatPump:AirSource")]
        CoilSystemIntegratedHeatPumpAirSource = 3,
    }
    
    public enum CompressorLocationType
    {
        
        [JsonProperty("Outdoors")]
        Outdoors = 0,
        
        [JsonProperty("Schedule")]
        Schedule = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    public enum FanObjectTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 2,
    }
    
    public enum FanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum ParasiticHeatRejectionLocationType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Outdoors")]
        Outdoors = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    public enum TankElementControlLogicType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MutuallyExclusive")]
        MutuallyExclusive = 1,
        
        [JsonProperty("Simultaneous")]
        Simultaneous = 2,
    }
    
    [Description(@"This object models an air-source heat pump for water heating where the heating coil is wrapped around the tank, which is typical of residential HPWHs. For pumped condenser HPWHs, see WaterHeater:HeatPump:PumpedCondenser. WaterHeater:HeatPump:WrappedCondenser is a compound object that references other component objects - Coil:WaterHeating:AirToWaterHeatPump:Pumped, Fan:OnOff, WaterHeater:Mixed")]
    [JsonObject("WaterHeater:HeatPump:WrappedCondenser")]
    public class WaterHeater_HeatPump_WrappedCondenser
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Schedule values of 0 denote the heat pump compressor is off and the parasitic electric energy is also off.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Schedule values of 0 denote the heat pump compressor is off and the parasitic electric energy is also off.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Defines the cut-out temperature where the heat pump compressor turns off. The heat pump compressor setpoint temperature should always be greater than the water tank's heater (element or burner) setpoint temperature.")]
[JsonProperty(@"Defines the cut-out temperature where the heat pump compressor turns off. The heat pump compressor setpoint temperature should always be greater than the water tank's heater (element or burner) setpoint temperature.")]
public System.String CompressorSetpointTemperatureScheduleName { get; set; } = "";
        
[Description(@"Setpoint temperature minus the dead band temperature difference defines the cut-in temperature where the heat pump compressor turns on. The water tank's heater (element or burner) setpoint temperature should always be less than the heat pump compressor cut-in temperature.")]
[JsonProperty(@"Setpoint temperature minus the dead band temperature difference defines the cut-in temperature where the heat pump compressor turns on. The water tank's heater (element or burner) setpoint temperature should always be less than the heat pump compressor cut-in temperature.")]
public System.Single DeadBandTemperatureDifference { get; set; } = 5;
        
[Description(@"Distance from the bottom of the tank to the bottom of the wrapped condenser.")]
[JsonProperty(@"Distance from the bottom of the tank to the bottom of the wrapped condenser.")]
public System.Single CondenserBottomLocation { get; set; } = 0;
        
[Description(@"Distance from the bottom of the tank to the top of the wrapped condenser.")]
[JsonProperty(@"Distance from the bottom of the tank to the top of the wrapped condenser.")]
public System.Single CondenserTopLocation { get; set; } = ;
        
[Description(@"Actual air flow rate across the heat pump's air coil (evaporator). If autocalculated, the air flow rate is set equal to 5.035E-5 m3/s/W times the rated heating capacity of the heat pump's DX coil.")]
[JsonProperty(@"Actual air flow rate across the heat pump's air coil (evaporator). If autocalculated, the air flow rate is set equal to 5.035E-5 m3/s/W times the rated heating capacity of the heat pump's DX coil.")]
public System.String EvaporatorAirFlowRate { get; set; } = "";
        
[Description(@"Defines the configuration of the airflow path through the air coil and fan section.")]
[JsonProperty(@"Defines the configuration of the airflow path through the air coil and fan section.")]
public YesNoDefault InletAirConfiguration { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Zone air exhaust node name if Inlet Air Configuration is ZoneAirOnly or ZoneAndOutdoorAir. Simply a unique Node Name if Inlet Air Configuration is Schedule. Otherwise, leave field blank.")]
[JsonProperty(@"Zone air exhaust node name if Inlet Air Configuration is ZoneAirOnly or ZoneAndOutdoorAir. Simply a unique Node Name if Inlet Air Configuration is Schedule. Otherwise, leave field blank.")]
public System.String AirInletNodeName { get; set; } = "";
        
[Description(@"Zone Air Inlet Node Name if Inlet Air Configuration is ZoneAirOnly or ZoneAndOutdoorAir. Simply a unique Node Name if Inlet Air Configuration is Schedule. Otherwise, leave field blank.")]
[JsonProperty(@"Zone Air Inlet Node Name if Inlet Air Configuration is ZoneAirOnly or ZoneAndOutdoorAir. Simply a unique Node Name if Inlet Air Configuration is Schedule. Otherwise, leave field blank.")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Outdoor air node name if inlet air configuration is ZoneAndOutdoorAir or OutdoorAirOnly, otherwise leave field blank.")]
[JsonProperty(@"Outdoor air node name if inlet air configuration is ZoneAndOutdoorAir or OutdoorAirOnly, otherwise leave field blank.")]
public System.String OutdoorAirNodeName { get; set; } = "";
        
[Description(@"Simply a unique Node Name if Inlet Air Configuration is ZoneAndOutdoorAir or OutdoorAirOnly, otherwise leave field blank.")]
[JsonProperty(@"Simply a unique Node Name if Inlet Air Configuration is ZoneAndOutdoorAir or OutdoorAirOnly, otherwise leave field blank.")]
public System.String ExhaustAirNodeName { get; set; } = "";
        
[Description(@"Used only if Inlet Air Configuration is Schedule, otherwise leave blank. Schedule values should be degrees C.")]
[JsonProperty(@"Used only if Inlet Air Configuration is Schedule, otherwise leave blank. Schedule values should be degrees C.")]
public System.String InletAirTemperatureScheduleName { get; set; } = "";
        
[Description(@"Used only if Inlet Air Configuration is Schedule, otherwise leave blank. Schedule values are entered as a fraction (e.g. 0.5 is equal to 50%RH)")]
[JsonProperty(@"Used only if Inlet Air Configuration is Schedule, otherwise leave blank. Schedule values are entered as a fraction (e.g. 0.5 is equal to 50%RH)")]
public System.String InletAirHumidityScheduleName { get; set; } = "";
        
[Description(@"Used only if Inlet Air Configuration is ZoneAirOnly or ZoneAndOutdoorAir. Otherwise, leave field blank.")]
[JsonProperty(@"Used only if Inlet Air Configuration is ZoneAirOnly or ZoneAndOutdoorAir. Otherwise, leave field blank.")]
public System.String InletAirZoneName { get; set; } = "";
        
[Description(@"Specify the type of water heater tank used by this heat pump water heater.")]
[JsonProperty(@"Specify the type of water heater tank used by this heat pump water heater.")]
public YesNoDefault TankObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WaterHeater:Stratified");
        
[Description(@"Needs to match the name used in the corresponding Water Heater object. Must be a WaterHeater:Stratified tank.")]
[JsonProperty(@"Needs to match the name used in the corresponding Water Heater object. Must be a WaterHeater:Stratified tank.")]
public System.String TankName { get; set; } = "";
        
[Description(@"Used only when the heat pump water heater is connected to a plant loop, otherwise leave blank. Needs to match the name used in the corresponding Water Heater object when connected to a plant loop.")]
[JsonProperty(@"Used only when the heat pump water heater is connected to a plant loop, otherwise leave blank. Needs to match the name used in the corresponding Water Heater object when connected to a plant loop.")]
public System.String TankUseSideInletNodeName { get; set; } = "";
        
[Description(@"Used only when the heat pump water heater is connected to a plant loop, otherwise leave blank. Needs to match the name used in the corresponding Water Heater object when connected to a plant loop.")]
[JsonProperty(@"Used only when the heat pump water heater is connected to a plant loop, otherwise leave blank. Needs to match the name used in the corresponding Water Heater object when connected to a plant loop.")]
public System.String TankUseSideOutletNodeName { get; set; } = "";
        
[Description(@"Specify the type of DX coil used by this heat pump water heater. The only valid choice is Coil:WaterHeating:AirToWaterHeatPump:Wrapped")]
[JsonProperty(@"Specify the type of DX coil used by this heat pump water heater. The only valid choice is Coil:WaterHeating:AirToWaterHeatPump:Wrapped")]
public YesNoDefault DxCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Coil:WaterHeating:AirToWaterHeatPump:Wrapped");
        
[Description(@"Must match the name used in the corresponding Coil:WaterHeating:AirToWaterHeatPump:Wrapped object.")]
[JsonProperty(@"Must match the name used in the corresponding Coil:WaterHeating:AirToWaterHeatPump:Wrapped object.")]
public System.String DxCoilName { get; set; } = "";
        
[Description(@"Heat pump compressor will not operate when the inlet air dry-bulb temperature is below this value.")]
[JsonProperty(@"Heat pump compressor will not operate when the inlet air dry-bulb temperature is below this value.")]
public System.Single MinimumInletAirTemperatureForCompressorOperation { get; set; } = 10;
        
[Description(@"Heat pump compressor will not operate when the inlet air dry-bulb temperature is above this value.")]
[JsonProperty(@"Heat pump compressor will not operate when the inlet air dry-bulb temperature is above this value.")]
public System.Single MaximumInletAirTemperatureForCompressorOperation { get; set; } = 48.88888888889;
        
[Description(@"If Zone is selected, Inlet Air Configuration must be ZoneAirOnly or ZoneAndOutdoorAir. If Schedule is selected, then you must provide a Compressor Ambient Temperature Schedule Name below.")]
[JsonProperty(@"If Zone is selected, Inlet Air Configuration must be ZoneAirOnly or ZoneAndOutdoorAir. If Schedule is selected, then you must provide a Compressor Ambient Temperature Schedule Name below.")]
public YesNoDefault CompressorLocation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Used only if Compressor Location is Schedule, otherwise leave field blank.")]
[JsonProperty(@"Used only if Compressor Location is Schedule, otherwise leave field blank.")]
public System.String CompressorAmbientTemperatureScheduleName { get; set; } = "";
        
[Description(@"Specify the type of fan used by this heat pump water heater. The only valid choices are Fan:SystemModel or Fan:OnOff.")]
[JsonProperty(@"Specify the type of fan used by this heat pump water heater. The only valid choices are Fan:SystemModel or Fan:OnOff.")]
public YesNoDefault FanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Fan:OnOff");
        
[Description(@"Needs to match the name used in the corresponding Fan:SystemModel or Fan:OnOff object.")]
[JsonProperty(@"Needs to match the name used in the corresponding Fan:SystemModel or Fan:OnOff object.")]
public System.String FanName { get; set; } = "";
        
[Description(@"BlowThrough means the fan is located before the air coil (upstream). DrawThrough means the fan is located after the air coil (downstream).")]
[JsonProperty(@"BlowThrough means the fan is located before the air coil (upstream). DrawThrough means the fan is located after the air coil (downstream).")]
public YesNoDefault FanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DrawThrough");
        
[Description(@"Parasitic electric power consumed when the heat pump compressor operates. Does not contribute to water heating but can impact the zone air heat balance.")]
[JsonProperty(@"Parasitic electric power consumed when the heat pump compressor operates. Does not contribute to water heating but can impact the zone air heat balance.")]
public System.Single OnCycleParasiticElectricLoad { get; set; } = 0;
        
[Description(@"Parasitic electric power consumed when the heat pump compressor is off. Does not contribute to water heating but can impact the zone air heat balance. Off-cycle parasitic power is 0 when the availability schedule is 0.")]
[JsonProperty(@"Parasitic electric power consumed when the heat pump compressor is off. Does not contribute to water heating but can impact the zone air heat balance. Off-cycle parasitic power is 0 when the availability schedule is 0.")]
public System.Single OffCycleParasiticElectricLoad { get; set; } = 0;
        
[Description(@"This field determines if the parasitic electric load impacts the zone air heat balance. If Zone is selected, Inlet Air Configuration must be ZoneAirOnly or ZoneAndOutdoorAir.")]
[JsonProperty(@"This field determines if the parasitic electric load impacts the zone air heat balance. If Zone is selected, Inlet Air Configuration must be ZoneAirOnly or ZoneAndOutdoorAir.")]
public YesNoDefault ParasiticHeatRejectionLocation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Outdoors");
        
[Description(@"Required only if Inlet Air Configuration is ZoneAndOutdoorAir, otherwise leave field blank.")]
[JsonProperty(@"Required only if Inlet Air Configuration is ZoneAndOutdoorAir, otherwise leave field blank.")]
public System.String InletAirMixerNodeName { get; set; } = "";
        
[Description(@"Required only if Inlet Air Configuration is ZoneAndOutdoorAir, otherwise leave field blank.")]
[JsonProperty(@"Required only if Inlet Air Configuration is ZoneAndOutdoorAir, otherwise leave field blank.")]
public System.String OutletAirSplitterNodeName { get; set; } = "";
        
[Description(@"Required only if Inlet Air Configuration is ZoneAndOutdoorAir, otherwise leave field blank. Schedule values define whether the heat pump draws its inlet air from the zone, outdoors or a combination of zone and outdoor air. A schedule value of 0 denotes inlet air is drawn only from the zone. A schedule value of 1 denotes inlet air is drawn only from outdoors. Schedule values between 0 and 1 denote a mixture of zone and outdoor air proportional to the schedule value.")]
[JsonProperty(@"Required only if Inlet Air Configuration is ZoneAndOutdoorAir, otherwise leave field blank. Schedule values define whether the heat pump draws its inlet air from the zone, outdoors or a combination of zone and outdoor air. A schedule value of 0 denotes inlet air is drawn only from the zone. A schedule value of 1 denotes inlet air is drawn only from outdoors. Schedule values between 0 and 1 denote a mixture of zone and outdoor air proportional to the schedule value.")]
public System.String InletAirMixerScheduleName { get; set; } = "";
        
[Description(@"MutuallyExclusive means that once the tank heating element is active the heat pump is shut down until setpoint is reached. Simultaneous (default) means that both the tank heating element and heat pump are used at the same time recover the tank temperature.")]
[JsonProperty(@"MutuallyExclusive means that once the tank heating element is active the heat pump is shut down until setpoint is reached. Simultaneous (default) means that both the tank heating element and heat pump are used at the same time recover the tank temperature.")]
public YesNoDefault TankElementControlLogic { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Simultaneous");
        
[Description(@"Used to indicate height of control sensor if Tank Object Type is WaterHeater:Stratified If left blank, it will default to the height of Heater1")]
[JsonProperty(@"Used to indicate height of control sensor if Tank Object Type is WaterHeater:Stratified If left blank, it will default to the height of Heater1")]
public System.Single ControlSensorHeightInStratifiedTank { get; set; } = ;
        
[Description(@"Weight to give Control Sensor 1 temperature")]
[JsonProperty(@"Weight to give Control Sensor 1 temperature")]
public System.Single ControlSensorWeight { get; set; } = 1;
        
[Description(@"Used to indicate height of control sensor if Tank Object Type is WaterHeater:Stratified If left blank, it will default to the height of Heater2 The weight of this control sensor will be 1 - (wt. of control sensor 1)")]
[JsonProperty(@"Used to indicate height of control sensor if Tank Object Type is WaterHeater:Stratified If left blank, it will default to the height of Heater2 The weight of this control sensor will be 1 - (wt. of control sensor 1)")]
public System.Single ControlSensorHeightInStratifiedTank { get; set; } = ;
    }
    
    public enum InletAirConfigurationType
    {
        
        [JsonProperty("OutdoorAirOnly")]
        OutdoorAirOnly = 0,
        
        [JsonProperty("Schedule")]
        Schedule = 1,
        
        [JsonProperty("ZoneAirOnly")]
        ZoneAirOnly = 2,
        
        [JsonProperty("ZoneAndOutdoorAir")]
        ZoneAndOutdoorAir = 3,
    }
    
    public enum TankObjectTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("WaterHeater:Stratified")]
        WaterHeaterStratified = 1,
    }
    
    public enum DxCoilObjectTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Coil:WaterHeating:AirToWaterHeatPump:Wrapped")]
        CoilWaterHeatingAirToWaterHeatPumpWrapped = 1,
    }
    
    public enum CompressorLocationType
    {
        
        [JsonProperty("Outdoors")]
        Outdoors = 0,
        
        [JsonProperty("Schedule")]
        Schedule = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    public enum FanObjectTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 2,
    }
    
    public enum FanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum ParasiticHeatRejectionLocationType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Outdoors")]
        Outdoors = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    public enum TankElementControlLogicType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MutuallyExclusive")]
        MutuallyExclusive = 1,
        
        [JsonProperty("Simultaneous")]
        Simultaneous = 2,
    }
    
    [Description(@"This ice storage model is a simplified model It requires a setpoint placed on the Chilled Water Side Outlet Node It should be placed in the chilled water supply side outlet branch followed by a pipe. Use the PlantEquipmentOperation:ComponentSetpoint plant operation scheme.")]
    [JsonObject("ThermalStorage:Ice:Simple")]
    public class ThermalStorage_Ice_Simple
    {
        
[Description(@"IceOnCoilInternal = Ice-on-Coil, internal melt IceOnCoilExternal = Ice-on-Coil, external melt")]
[JsonProperty(@"IceOnCoilInternal = Ice-on-Coil, internal melt IceOnCoilExternal = Ice-on-Coil, external melt")]
public YesNoDefault IceStorageType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single Capacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
    }
    
    public enum IceStorageTypeType
    {
        
        [JsonProperty("IceOnCoilExternal")]
        IceOnCoilExternal = 0,
        
        [JsonProperty("IceOnCoilInternal")]
        IceOnCoilInternal = 1,
    }
    
    [Description("This input syntax is intended to describe a thermal storage system that includes " +
        "smaller containers filled with water that are placed in a larger tank or series " +
        "of tanks. The model uses polynomial equations to describe the system performance" +
        ".")]
    [JsonObject("ThermalStorage:Ice:Detailed")]
    public class ThermalStorage_Ice_Detailed
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"This includes only the latent storage capacity")]
[JsonProperty(@"This includes only the latent storage capacity")]
public System.Single Capacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault DischargingCurveVariableSpecifications { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String DischargingCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ChargingCurveVariableSpecifications { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ChargingCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single TimestepOfTheCurveData { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ParasiticElectricLoadDuringDischarging { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single ParasiticElectricLoadDuringCharging { get; set; } = ;
        
[Description(@"This is the fraction the total storage capacity that is lost or melts each hour")]
[JsonProperty(@"This is the fraction the total storage capacity that is lost or melts each hour")]
public System.Single TankLossCoefficient { get; set; } = ;
        
[Description(@"This temperature is typically 0C for water. Simply changing this temperature without adjusting the performance parameters input above is inappropriate and not advised.")]
[JsonProperty(@"This temperature is typically 0C for water. Simply changing this temperature without adjusting the performance parameters input above is inappropriate and not advised.")]
public System.Single FreezingTemperatureOfStorageMedium { get; set; } = 0;
        
[Description(@"This field determines whether the system uses internal or external melt during discharging. This will then have an impact on charging performance.")]
[JsonProperty(@"This field determines whether the system uses internal or external melt during discharging. This will then have an impact on charging performance.")]
public YesNoDefault ThawProcessIndicator { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "OutsideMelt");
    }
    
    public enum DischargingCurveVariableSpecificationsType
    {
        
        [JsonProperty("FractionChargedLMTD")]
        FractionChargedLMTD = 0,
        
        [JsonProperty("FractionDischargedLMTD")]
        FractionDischargedLMTD = 1,
        
        [JsonProperty("LMTDFractionCharged")]
        LMTDFractionCharged = 2,
        
        [JsonProperty("LMTDMassFlow")]
        LMTDMassFlow = 3,
    }
    
    public enum ChargingCurveVariableSpecificationsType
    {
        
        [JsonProperty("FractionChargedLMTD")]
        FractionChargedLMTD = 0,
        
        [JsonProperty("FractionDischargedLMTD")]
        FractionDischargedLMTD = 1,
        
        [JsonProperty("LMTDFractionCharged")]
        LMTDFractionCharged = 2,
        
        [JsonProperty("LMTDMassFlow")]
        LMTDMassFlow = 3,
    }
    
    public enum ThawProcessIndicatorType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("InsideMelt")]
        InsideMelt = 1,
        
        [JsonProperty("OutsideMelt")]
        OutsideMelt = 2,
    }
    
    [Description("Chilled water storage with a well-mixed, single-node tank. The chilled water is \"" +
        "used\" by drawing from the \"Use Side\" of the water tank. The tank is indirectly c" +
        "harged by circulating cold water through the \"Source Side\" of the water tank.")]
    [JsonObject("ThermalStorage:ChilledWater:Mixed")]
    public class ThermalStorage_ChilledWater_Mixed
    {
        
[JsonProperty(@"")]
public System.Single TankVolume { get; set; } = 0.1;
        
[JsonProperty(@"")]
public System.String SetpointTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DeadbandTemperatureDifference { get; set; } = 0.5;
        
[JsonProperty(@"")]
public System.Single MinimumTemperatureLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NominalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault AmbientTemperatureIndicator { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String AmbientTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AmbientTemperatureZoneName { get; set; } = "";
        
[Description(@"required when field Ambient Temperature Indicator=Outdoors")]
[JsonProperty(@"required when field Ambient Temperature Indicator=Outdoors")]
public System.String AmbientTemperatureOutdoorAirNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single HeatGainCoefficientFromAmbientTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.String UseSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String UseSideOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single UseSideHeatTransferEffectiveness { get; set; } = 1;
        
[Description(@"Availability schedule name for use side. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for use side. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String UseSideAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String UseSideDesignFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String SourceSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SourceSideOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single SourceSideHeatTransferEffectiveness { get; set; } = 1;
        
[Description(@"Availability schedule name for source side. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for source side. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String SourceSideAvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SourceSideDesignFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Parameter for autosizing design flow rates for indirectly cooled water tanks time required to lower temperature of entire tank from 14.4C to 9.0C")]
[JsonProperty(@"Parameter for autosizing design flow rates for indirectly cooled water tanks time required to lower temperature of entire tank from 14.4C to 9.0C")]
public System.Single TankRecoveryTime { get; set; } = 4;
    }
    
    public enum AmbientTemperatureIndicatorType
    {
        
        [JsonProperty("Outdoors")]
        Outdoors = 0,
        
        [JsonProperty("Schedule")]
        Schedule = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    [Description("Chilled water storage with a stratified, multi-node tank. The chilled water is \"u" +
        "sed\" by drawing from the \"Use Side\" of the water tank. The tank is indirectly ch" +
        "arged by circulating cold water through the \"Source Side\" of the water tank.")]
    [JsonObject("ThermalStorage:ChilledWater:Stratified")]
    public class ThermalStorage_ChilledWater_Stratified
    {
        
[JsonProperty(@"")]
public System.Single TankVolume { get; set; } = ;
        
[Description(@"Height is measured in the axial direction for horizontal cylinders")]
[JsonProperty(@"Height is measured in the axial direction for horizontal cylinders")]
public System.Single TankHeight { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault TankShape { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "VerticalCylinder");
        
[Description(@"Only used if Tank Shape is Other")]
[JsonProperty(@"Only used if Tank Shape is Other")]
public System.Single TankPerimeter { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SetpointTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DeadbandTemperatureDifference { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single TemperatureSensorHeight { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MinimumTemperatureLimit { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NominalCoolingCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault AmbientTemperatureIndicator { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String AmbientTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AmbientTemperatureZoneName { get; set; } = "";
        
[Description(@"required for Ambient Temperature Indicator=Outdoors")]
[JsonProperty(@"required for Ambient Temperature Indicator=Outdoors")]
public System.String AmbientTemperatureOutdoorAirNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single UniformSkinLossCoefficientPerUnitAreaToAmbientTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.String UseSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String UseSideOutletNodeName { get; set; } = "";
        
[Description(@"The use side effectiveness in the stratified tank model is a simplified analogy of a heat exchanger's effectiveness. This effectiveness is equal to the fraction of use mass flow rate that directly mixes with the tank fluid. And one minus the effectiveness is the fraction that bypasses the tank. The use side mass flow rate that bypasses the tank is mixed with the fluid or water leaving the stratified tank.")]
[JsonProperty(@"The use side effectiveness in the stratified tank model is a simplified analogy of a heat exchanger's effectiveness. This effectiveness is equal to the fraction of use mass flow rate that directly mixes with the tank fluid. And one minus the effectiveness is the fraction that bypasses the tank. The use side mass flow rate that bypasses the tank is mixed with the fluid or water leaving the stratified tank.")]
public System.Single UseSideHeatTransferEffectiveness { get; set; } = 1;
        
[Description(@"Availability schedule name for use side. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for use side. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String UseSideAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Defaults to top of tank")]
[JsonProperty(@"Defaults to top of tank")]
public System.String UseSideInletHeight { get; set; } = (System.String)Autocalculate;
        
[Description(@"Defaults to bottom of tank")]
[JsonProperty(@"Defaults to bottom of tank")]
public System.Single UseSideOutletHeight { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String UseSideDesignFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String SourceSideInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SourceSideOutletNodeName { get; set; } = "";
        
[Description(@"The source side effectiveness in the stratified tank model is a simplified analogy of a heat exchanger's effectiveness. This effectiveness is equal to the fraction of source mass flow rate that directly mixes with the tank fluid. And one minus the effectiveness is the fraction that bypasses the tank. The source side mass flow rate that bypasses the tank is mixed with the fluid or water leaving the stratified tank.")]
[JsonProperty(@"The source side effectiveness in the stratified tank model is a simplified analogy of a heat exchanger's effectiveness. This effectiveness is equal to the fraction of source mass flow rate that directly mixes with the tank fluid. And one minus the effectiveness is the fraction that bypasses the tank. The source side mass flow rate that bypasses the tank is mixed with the fluid or water leaving the stratified tank.")]
public System.Single SourceSideHeatTransferEffectiveness { get; set; } = 1;
        
[Description(@"Availability schedule name for use side. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for use side. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String SourceSideAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Defaults to bottom of tank")]
[JsonProperty(@"Defaults to bottom of tank")]
public System.Single SourceSideInletHeight { get; set; } = 0;
        
[Description(@"Defaults to top of tank")]
[JsonProperty(@"Defaults to top of tank")]
public System.String SourceSideOutletHeight { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.String SourceSideDesignFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Parameter for autosizing design flow rates for indirectly cooled water tanks time required to lower temperature of entire tank from 14.4C to 9.0C")]
[JsonProperty(@"Parameter for autosizing design flow rates for indirectly cooled water tanks time required to lower temperature of entire tank from 14.4C to 9.0C")]
public System.Single TankRecoveryTime { get; set; } = 4;
        
[JsonProperty(@"")]
public YesNoDefault InletMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Fixed");
        
[JsonProperty(@"")]
public System.Single NumberOfNodes { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single AdditionalDestratificationConductivity { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single NodeAdditionalLossCoefficient { get; set; } = 0;
    }
    
    public enum TankShapeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("HorizontalCylinder")]
        HorizontalCylinder = 1,
        
        [JsonProperty("Other")]
        Other = 2,
        
        [JsonProperty("VerticalCylinder")]
        VerticalCylinder = 3,
    }
    
    public enum AmbientTemperatureIndicatorType
    {
        
        [JsonProperty("Outdoors")]
        Outdoors = 0,
        
        [JsonProperty("Schedule")]
        Schedule = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    public enum InletModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Fixed")]
        Fixed = 1,
        
        [JsonProperty("Seeking")]
        Seeking = 2,
    }
}
namespace EnergyPlus.WaterSystems
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"A generalized object for simulating all water end uses. Hot and cold water uses are included, as well as controlled mixing of hot and cold water at the tap. The WaterUse:Equipment object can be used stand-alone, or coupled into a plant loop using the WaterUse:Connections object (see below). The WaterUse:Connections object allows water uses to be linked to WaterUse:Storage objects to store and draw reclaimed water. The object can also simulate drainwater heat recovery.")]
    [JsonObject("WaterUse:Equipment")]
    public class WaterUse_Equipment
    {
        
[Description(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
[JsonProperty(@"Any text may be used here to categorize the end-uses in the ABUPS End Uses by Subcategory table.")]
public System.String EndUseSubcategory { get; set; } = (System.String)General;
        
[JsonProperty(@"")]
public System.Single PeakFlowRate { get; set; } = ;
        
[Description(@"Defaults to 1.0 at all times")]
[JsonProperty(@"Defaults to 1.0 at all times")]
public System.String FlowRateFractionScheduleName { get; set; } = "";
        
[Description(@"Defaults to hot water supply temperature")]
[JsonProperty(@"Defaults to hot water supply temperature")]
public System.String TargetTemperatureScheduleName { get; set; } = "";
        
[Description(@"Defaults to cold water supply temperature")]
[JsonProperty(@"Defaults to cold water supply temperature")]
public System.String HotWaterSupplyTemperatureScheduleName { get; set; } = "";
        
[Description(@"Defaults to water temperatures calculated by Site:WaterMainsTemperature object")]
[JsonProperty(@"Defaults to water temperatures calculated by Site:WaterMainsTemperature object")]
public System.String ColdWaterSupplyTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Defaults to 0.0 at all times")]
[JsonProperty(@"Defaults to 0.0 at all times")]
public System.String SensibleFractionScheduleName { get; set; } = "";
        
[Description(@"Defaults to 0.0 at all times")]
[JsonProperty(@"Defaults to 0.0 at all times")]
public System.String LatentFractionScheduleName { get; set; } = "";
    }
    
    [Description(@"A subsystem that groups together multiple WaterUse:Equipment components. As its name suggests, the object provides connections that are shared by these components, including: 1. Inlet node and outlet node connections to a plant loop 2. Connections to WaterUse:Storage objects to store and draw reclaimed water 3. Internal connections to simulate drainwater heat recovery.")]
    [JsonObject("WaterUse:Connections")]
    public class WaterUse_Connections
    {
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[Description(@"If blank, or tank is empty, defaults to fresh water from the mains")]
[JsonProperty(@"If blank, or tank is empty, defaults to fresh water from the mains")]
public System.String SupplyWaterStorageTankName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ReclamationWaterStorageTankName { get; set; } = "";
        
[Description(@"Defaults to cold water supply temperature")]
[JsonProperty(@"Defaults to cold water supply temperature")]
public System.String HotWaterSupplyTemperatureScheduleName { get; set; } = "";
        
[Description(@"Defaults to water temperatures calculated by Site:WaterMainsTemperature object")]
[JsonProperty(@"Defaults to water temperatures calculated by Site:WaterMainsTemperature object")]
public System.String ColdWaterSupplyTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault DrainWaterHeatExchangerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[JsonProperty(@"")]
public YesNoDefault DrainWaterHeatExchangerDestination { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Plant");
        
[JsonProperty(@"")]
public System.Single DrainWaterHeatExchangerUFactorTimesArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.String Connections { get; set; } = "";
    }
    
    public enum DrainWaterHeatExchangerTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CounterFlow")]
        CounterFlow = 1,
        
        [JsonProperty("CrossFlow")]
        CrossFlow = 2,
        
        [JsonProperty("Ideal")]
        Ideal = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum DrainWaterHeatExchangerDestinationType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Equipment")]
        Equipment = 1,
        
        [JsonProperty("Plant")]
        Plant = 2,
        
        [JsonProperty("PlantAndEquipment")]
        PlantAndEquipment = 3,
    }
    
    [Description(@"A water storage tank. If the building model is to include any on-site water collection, wells, or storing and reuse of graywater, then a WaterUse:Storage object is needed. Each WaterUse:Storage can serve as a central node and make connections to numerous sources of supply or numerous components with demand. If a maximum capacity is not specified, the tank is assumed to have unlimited capacity.")]
    [JsonObject("WaterUse:Storage")]
    public class WaterUse_Storage
    {
        
[JsonProperty(@"")]
public System.String WaterQualitySubcategory { get; set; } = "";
        
[Description(@"Defaults to unlimited capacity.")]
[JsonProperty(@"Defaults to unlimited capacity.")]
public System.Single MaximumCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single InitialVolume { get; set; } = ;
        
[Description(@"Defaults to unlimited flow.")]
[JsonProperty(@"Defaults to unlimited flow.")]
public System.Single DesignInFlowRate { get; set; } = ;
        
[Description(@"Defaults to unlimited flow.")]
[JsonProperty(@"Defaults to unlimited flow.")]
public System.Single DesignOutFlowRate { get; set; } = ;
        
[Description(@"If blank, overflow is discarded")]
[JsonProperty(@"If blank, overflow is discarded")]
public System.String OverflowDestination { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault TypeOfSupplyControlledByFloatValve { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Lower range of target storage level e.g. float valve kicks on")]
[JsonProperty(@"Lower range of target storage level e.g. float valve kicks on")]
public System.Single FloatValveOnCapacity { get; set; } = ;
        
[Description(@"Upper range of target storage level e.g. float valve kicks off")]
[JsonProperty(@"Upper range of target storage level e.g. float valve kicks off")]
public System.Single FloatValveOffCapacity { get; set; } = ;
        
[Description(@"Lower range of secondary target storage level used to keep tanks at a minimum level using mains water if well can't keep up")]
[JsonProperty(@"Lower range of secondary target storage level used to keep tanks at a minimum level using mains water if well can't keep up")]
public System.Single BackupMainsCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.String OtherTankName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault WaterThermalMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String WaterTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault AmbientTemperatureIndicator { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String AmbientTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single TankSurfaceArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single TankUValue { get; set; } = ;
        
[JsonProperty(@"")]
public System.String TankOutsideSurfaceMaterialName { get; set; } = "";
    }
    
    public enum TypeOfSupplyControlledByFloatValveType
    {
        
        [JsonProperty("GroundwaterWell")]
        GroundwaterWell = 0,
        
        [JsonProperty("Mains")]
        Mains = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("OtherTank")]
        OtherTank = 3,
    }
    
    public enum WaterThermalModeType
    {
        
        [JsonProperty("ScheduledTemperature")]
        ScheduledTemperature = 0,
        
        [JsonProperty("ThermalModel")]
        ThermalModel = 1,
    }
    
    public enum AmbientTemperatureIndicatorType
    {
        
        [JsonProperty("Outdoors")]
        Outdoors = 0,
        
        [JsonProperty("Schedule")]
        Schedule = 1,
        
        [JsonProperty("Zone")]
        Zone = 2,
    }
    
    [Description(@"Simulates on-site water supply from a well. Well water is pumped out of the ground into a WaterUse:Storage. The operation of the ground water well is controlled by the associated WaterUse:Storage which is assumed to be operated as a vented cistern with no pressure tank.")]
    [JsonObject("WaterUse:Well")]
    public class WaterUse_Well
    {
        
[JsonProperty(@"")]
public System.String StorageTankName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single PumpDepth { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PumpRatedFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PumpRatedHead { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PumpRatedPowerConsumption { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PumpEfficiency { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single WellRecoveryRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single NominalWellStorageVolume { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault WaterTableDepthMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single WaterTableDepth { get; set; } = ;
        
[JsonProperty(@"")]
public System.String WaterTableDepthScheduleName { get; set; } = "";
    }
    
    public enum WaterTableDepthModeType
    {
        
        [JsonProperty("Constant")]
        Constant = 0,
        
        [JsonProperty("Scheduled")]
        Scheduled = 1,
    }
    
    [Description("Used for harvesting rainwater falling on building surfaces. The rainwater is sent" +
        " to a WaterUse:Storage object. In order to use this object it is necessary to al" +
        "so include a Site:Precipitation object to describe the rates of rainfall.")]
    [JsonObject("WaterUse:RainCollector")]
    public class WaterUse_RainCollector
    {
        
[JsonProperty(@"")]
public System.String StorageTankName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault LossFactorMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"this is the portion of rain that is lost in the process of collecting it the rain collected is one minus this factor")]
[JsonProperty(@"this is the portion of rain that is lost in the process of collecting it the rain collected is one minus this factor")]
public System.Single CollectionLossFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.String CollectionLossFactorScheduleName { get; set; } = "";
        
[Description(@"Defaults to unlimited flow.")]
[JsonProperty(@"Defaults to unlimited flow.")]
public System.Single MaximumCollectionRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.String Surfaces { get; set; } = "";
    }
    
    public enum LossFactorModeType
    {
        
        [JsonProperty("Constant")]
        Constant = 0,
        
        [JsonProperty("Scheduled")]
        Scheduled = 1,
    }
}
namespace EnergyPlus.ZoneAirflow
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Infiltration is specified as a design level which is modified by a Schedule fraction, temperature difference and wind speed: Infiltration=Idesign * FSchedule * (A + B*|(Tzone-Todb)| + C*WindSpd + D * WindSpd**2) If you use a ZoneList in the Zone or ZoneList name field then this definition applies to all the zones in the ZoneList.")]
    [JsonObject("ZoneInfiltration:DesignFlowRate")]
    public class ZoneInfiltration_DesignFlowRate
    {
        
[JsonProperty(@"")]
public System.String ZoneOrZonelistName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ScheduleName { get; set; } = "";
        
[Description(@"The entered calculation method is used to create the maximum amount of infiltration for this set of attributes Choices: Flow/Zone => Design Flow Rate -- simply enter Design Flow Rate Flow/Area => Flow per Zone Floor Area - Value * Floor Area (zone) = Design Flow Rate Flow/ExteriorArea => Flow per Exterior Surface Area - Value * Exterior Surface Area (zone) = Design Flow Rate Flow/ExteriorWallArea => Flow per Exterior Surface Area - Value * Exterior Wall Surface Area (zone) = Design Flow Rate AirChanges/Hour => Air Changes per Hour - Value * Floor Volume (zone) adjusted for m3/s = Design Volume Flow Rate "Idesign" in Equation is the result.")]
[JsonProperty(@"The entered calculation method is used to create the maximum amount of infiltration for this set of attributes Choices: Flow/Zone => Design Flow Rate -- simply enter Design Flow Rate Flow/Area => Flow per Zone Floor Area - Value * Floor Area (zone) = Design Flow Rate Flow/ExteriorArea => Flow per Exterior Surface Area - Value * Exterior Surface Area (zone) = Design Flow Rate Flow/ExteriorWallArea => Flow per Exterior Surface Area - Value * Exterior Wall Surface Area (zone) = Design Flow Rate AirChanges/Hour => Air Changes per Hour - Value * Floor Volume (zone) adjusted for m3/s = Design Volume Flow Rate "Idesign" in Equation is the result.")]
public YesNoDefault DesignFlowRateCalculationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Flow/Zone");
        
[JsonProperty(@"")]
public System.Single DesignFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FlowPerZoneFloorArea { get; set; } = ;
        
[Description(@"use key Flow/ExteriorArea for all exterior surface area use key Flow/ExteriorWallArea to include only exterior wall area")]
[JsonProperty(@"use key Flow/ExteriorArea for all exterior surface area use key Flow/ExteriorWallArea to include only exterior wall area")]
public System.Single FlowPerExteriorSurfaceArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single AirChangesPerHour { get; set; } = ;
        
[Description(@""A" in Equation")]
[JsonProperty(@""A" in Equation")]
public System.Single ConstantTermCoefficient { get; set; } = 1;
        
[Description(@""B" in Equation")]
[JsonProperty(@""B" in Equation")]
public System.Single TemperatureTermCoefficient { get; set; } = 0;
        
[Description(@""C" in Equation")]
[JsonProperty(@""C" in Equation")]
public System.Single VelocityTermCoefficient { get; set; } = 0;
        
[Description(@""D" in Equation")]
[JsonProperty(@""D" in Equation")]
public System.Single VelocitySquaredTermCoefficient { get; set; } = 0;
    }
    
    public enum DesignFlowRateCalculationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirChanges/Hour")]
        AirChangesHour = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/ExteriorArea")]
        FlowExteriorArea = 3,
        
        [JsonProperty("Flow/ExteriorWallArea")]
        FlowExteriorWallArea = 4,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 5,
    }
    
    [Description("Infiltration is specified as effective leakage area at 4 Pa, schedule fraction, s" +
        "tack and wind coefficients, and is a function of temperature difference and wind" +
        " speed: Infiltration=FSchedule * (AL /1000) SQRT(Cs*|(Tzone-Todb)| +  Cw*WindSpd" +
        "**2 )")]
    [JsonObject("ZoneInfiltration:EffectiveLeakageArea")]
    public class ZoneInfiltration_EffectiveLeakageArea
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ScheduleName { get; set; } = "";
        
[Description(@""AL" in Equation units are cm2 (square centimeters)")]
[JsonProperty(@""AL" in Equation units are cm2 (square centimeters)")]
public System.Single EffectiveAirLeakageArea { get; set; } = ;
        
[Description(@""Cs" in Equation")]
[JsonProperty(@""Cs" in Equation")]
public System.Single StackCoefficient { get; set; } = ;
        
[Description(@""Cw" in Equation")]
[JsonProperty(@""Cw" in Equation")]
public System.Single WindCoefficient { get; set; } = ;
    }
    
    [Description("Infiltration is specified as flow coefficient, schedule fraction, stack and wind " +
        "coefficients, and is a function of temperature difference and wind speed: Infilt" +
        "ration=FSchedule * SQRT( (c * Cs*|(Tzone-Todb)|**n)**2 + (c* Cw*(s * WindSpd)**2" +
        "n)**2 )")]
    [JsonObject("ZoneInfiltration:FlowCoefficient")]
    public class ZoneInfiltration_FlowCoefficient
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ScheduleName { get; set; } = "";
        
[Description(@""c" in Equation")]
[JsonProperty(@""c" in Equation")]
public System.Single FlowCoefficient { get; set; } = ;
        
[Description(@""Cs" in Equation")]
[JsonProperty(@""Cs" in Equation")]
public System.Single StackCoefficient { get; set; } = ;
        
[Description(@""n" in Equation")]
[JsonProperty(@""n" in Equation")]
public System.Single PressureExponent { get; set; } = 0.67;
        
[Description(@""Cw" in Equation")]
[JsonProperty(@""Cw" in Equation")]
public System.Single WindCoefficient { get; set; } = ;
        
[Description(@""s" in Equation")]
[JsonProperty(@""s" in Equation")]
public System.Single ShelterFactor { get; set; } = ;
    }
    
    [Description(@"Ventilation is specified as a design level which is modified by a schedule fraction, temperature difference and wind speed: Ventilation=Vdesign * Fschedule * (A + B*|(Tzone-Todb)| + C*WindSpd + D * WindSpd**2) If you use a ZoneList in the Zone or ZoneList name field then this definition applies to all the zones in the ZoneList.")]
    [JsonObject("ZoneVentilation:DesignFlowRate")]
    public class ZoneVentilation_DesignFlowRate
    {
        
[JsonProperty(@"")]
public System.String ZoneOrZonelistName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ScheduleName { get; set; } = "";
        
[Description(@"The entered calculation method is used to create the maximum amount of ventilation for this set of attributes Choices: Flow/Zone => Design Flow Rate -- simply enter Design Flow Rate Flow/Area => Flow Rate per Zone Floor Area - Value * Floor Area (zone) = Design Flow Rate Flow/Person => Flow Rate per Person - Value * #people = Design Flow Rate AirChanges/Hour => Air Changes per Hour - Value * Floor Volume (zone) adjusted for m3/s = Design Volume Flow Rate "Vdesign" in Equation is the result.")]
[JsonProperty(@"The entered calculation method is used to create the maximum amount of ventilation for this set of attributes Choices: Flow/Zone => Design Flow Rate -- simply enter Design Flow Rate Flow/Area => Flow Rate per Zone Floor Area - Value * Floor Area (zone) = Design Flow Rate Flow/Person => Flow Rate per Person - Value * #people = Design Flow Rate AirChanges/Hour => Air Changes per Hour - Value * Floor Volume (zone) adjusted for m3/s = Design Volume Flow Rate "Vdesign" in Equation is the result.")]
public YesNoDefault DesignFlowRateCalculationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Flow/Zone");
        
[JsonProperty(@"")]
public System.Single DesignFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FlowRatePerZoneFloorArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FlowRatePerPerson { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single AirChangesPerHour { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault VentilationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Natural");
        
[Description(@"pressure rise across the fan")]
[JsonProperty(@"pressure rise across the fan")]
public System.Single FanPressureRise { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single FanTotalEfficiency { get; set; } = 1;
        
[Description(@""A" in Equation")]
[JsonProperty(@""A" in Equation")]
public System.Single ConstantTermCoefficient { get; set; } = 1;
        
[Description(@""B" in Equation")]
[JsonProperty(@""B" in Equation")]
public System.Single TemperatureTermCoefficient { get; set; } = 0;
        
[Description(@""C" in Equation")]
[JsonProperty(@""C" in Equation")]
public System.Single VelocityTermCoefficient { get; set; } = 0;
        
[Description(@""D" in Equation")]
[JsonProperty(@""D" in Equation")]
public System.Single VelocitySquaredTermCoefficient { get; set; } = 0;
        
[Description(@"this is the indoor temperature below which ventilation is shutoff")]
[JsonProperty(@"this is the indoor temperature below which ventilation is shutoff")]
public System.Single MinimumIndoorTemperature { get; set; } = -100;
        
[Description(@"This schedule contains the indoor temperature versus time below which ventilation is shutoff.")]
[JsonProperty(@"This schedule contains the indoor temperature versus time below which ventilation is shutoff.")]
public System.String MinimumIndoorTemperatureScheduleName { get; set; } = "";
        
[Description(@"this is the indoor temperature above which ventilation is shutoff")]
[JsonProperty(@"this is the indoor temperature above which ventilation is shutoff")]
public System.Single MaximumIndoorTemperature { get; set; } = 100;
        
[Description(@"This schedule contains the indoor temperature versus time above which ventilation is shutoff.")]
[JsonProperty(@"This schedule contains the indoor temperature versus time above which ventilation is shutoff.")]
public System.String MaximumIndoorTemperatureScheduleName { get; set; } = "";
        
[Description(@"This is the temperature differential between indoor and outdoor below which ventilation is shutoff. If ((IndoorTemp - OutdoorTemp) < DeltaTemperature) then ventilation is not allowed. For example, if delta temperature is 2C, ventilation is assumed to be available if the outside air temperature is at least 2C cooler than the zone air temperature. The values for this field can include negative numbers. This allows ventilation to occur even if the outdoor temperature is above the indoor temperature.")]
[JsonProperty(@"This is the temperature differential between indoor and outdoor below which ventilation is shutoff. If ((IndoorTemp - OutdoorTemp) < DeltaTemperature) then ventilation is not allowed. For example, if delta temperature is 2C, ventilation is assumed to be available if the outside air temperature is at least 2C cooler than the zone air temperature. The values for this field can include negative numbers. This allows ventilation to occur even if the outdoor temperature is above the indoor temperature.")]
public System.Single DeltaTemperature { get; set; } = -100;
        
[Description(@"This schedule contains the temperature differential between indoor and outdoor versus time below which ventilation is shutoff.")]
[JsonProperty(@"This schedule contains the temperature differential between indoor and outdoor versus time below which ventilation is shutoff.")]
public System.String DeltaTemperatureScheduleName { get; set; } = "";
        
[Description(@"this is the outdoor temperature below which ventilation is shutoff")]
[JsonProperty(@"this is the outdoor temperature below which ventilation is shutoff")]
public System.Single MinimumOutdoorTemperature { get; set; } = -100;
        
[Description(@"This schedule contains the outdoor temperature versus time below which ventilation is shutoff.")]
[JsonProperty(@"This schedule contains the outdoor temperature versus time below which ventilation is shutoff.")]
public System.String MinimumOutdoorTemperatureScheduleName { get; set; } = "";
        
[Description(@"this is the outdoor temperature above which ventilation is shutoff")]
[JsonProperty(@"this is the outdoor temperature above which ventilation is shutoff")]
public System.Single MaximumOutdoorTemperature { get; set; } = 100;
        
[Description(@"This schedule contains the outdoor temperature versus time above which ventilation is shutoff.")]
[JsonProperty(@"This schedule contains the outdoor temperature versus time above which ventilation is shutoff.")]
public System.String MaximumOutdoorTemperatureScheduleName { get; set; } = "";
        
[Description(@"this is the outdoor wind speed above which ventilation is shutoff")]
[JsonProperty(@"this is the outdoor wind speed above which ventilation is shutoff")]
public System.Single MaximumWindSpeed { get; set; } = 40;
    }
    
    public enum DesignFlowRateCalculationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirChanges/Hour")]
        AirChangesHour = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
    }
    
    public enum VentilationTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Balanced")]
        Balanced = 1,
        
        [JsonProperty("Exhaust")]
        Exhaust = 2,
        
        [JsonProperty("Intake")]
        Intake = 3,
        
        [JsonProperty("Natural")]
        Natural = 4,
    }
    
    [Description(@"This object is specified as natural ventilation driven by wind and stack effect only: Ventilation Wind = Cw * Opening Area * Schedule * WindSpd Ventilation Stack = Cd * Opening Area * Schedule * SQRT(2*g*DH*(|(Tzone-Todb)|/Tzone)) Total Ventilation = SQRT((Ventilation Wind)^2 + (Ventilation Stack)^2)")]
    [JsonObject("ZoneVentilation:WindandStackOpenArea")]
    public class ZoneVentilation_WindandStackOpenArea
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"This is the opening area used to calculate stack effect and wind driven ventilation.")]
[JsonProperty(@"This is the opening area used to calculate stack effect and wind driven ventilation.")]
public System.Single OpeningArea { get; set; } = 0;
        
[Description(@"This schedule contains the fraction values applied to the opening area given in the previous input field (0.0 - 1.0).")]
[JsonProperty(@"This schedule contains the fraction values applied to the opening area given in the previous input field (0.0 - 1.0).")]
public System.String OpeningAreaFractionScheduleName { get; set; } = "";
        
[Description(@"This field is used to calculate wind driven ventilation. "Cw" in the wind-driven equation and the maximum value is 1.0. When the input is Autocalculate, the program calculates Cw based on an angle between wind direction and effective angle Cw = 0.55 at angle = 0, and Cw = 0.3 at angle=180 Linear interpolation is used to calculate Cw based on the above two values.")]
[JsonProperty(@"This field is used to calculate wind driven ventilation. "Cw" in the wind-driven equation and the maximum value is 1.0. When the input is Autocalculate, the program calculates Cw based on an angle between wind direction and effective angle Cw = 0.55 at angle = 0, and Cw = 0.3 at angle=180 Linear interpolation is used to calculate Cw based on the above two values.")]
public System.String OpeningEffectiveness { get; set; } = (System.String)Autocalculate;
        
[Description(@"This field is defined as normal angle of the opening area and is used when input field Opening Effectiveness = Autocalculate.")]
[JsonProperty(@"This field is defined as normal angle of the opening area and is used when input field Opening Effectiveness = Autocalculate.")]
public System.Single EffectiveAngle { get; set; } = 0;
        
[Description(@"This is the height difference between the midpoint of an opening and the neutral pressure level. "DH" in the stack equation.")]
[JsonProperty(@"This is the height difference between the midpoint of an opening and the neutral pressure level. "DH" in the stack equation.")]
public System.Single HeightDifference { get; set; } = 0;
        
[Description(@"This is the discharge coefficient used to calculate stack effect. "Cd" in the stack equation and the maximum value is 1.0. When the input is Autocalculate, the following equation is used to calculate the coefficient: Cd = 0.4 + 0.0045*|(Tzone-Todb)|")]
[JsonProperty(@"This is the discharge coefficient used to calculate stack effect. "Cd" in the stack equation and the maximum value is 1.0. When the input is Autocalculate, the following equation is used to calculate the coefficient: Cd = 0.4 + 0.0045*|(Tzone-Todb)|")]
public System.String DischargeCoefficientForOpening { get; set; } = (System.String)Autocalculate;
        
[Description(@"This is the indoor temperature below which ventilation is shutoff.")]
[JsonProperty(@"This is the indoor temperature below which ventilation is shutoff.")]
public System.Single MinimumIndoorTemperature { get; set; } = -100;
        
[Description(@"This schedule contains the indoor temperature versus time below which ventilation is shutoff.")]
[JsonProperty(@"This schedule contains the indoor temperature versus time below which ventilation is shutoff.")]
public System.String MinimumIndoorTemperatureScheduleName { get; set; } = "";
        
[Description(@"This is the indoor temperature above which ventilation is shutoff.")]
[JsonProperty(@"This is the indoor temperature above which ventilation is shutoff.")]
public System.Single MaximumIndoorTemperature { get; set; } = 100;
        
[Description(@"This schedule contains the indoor temperature versus time above which ventilation is shutoff.")]
[JsonProperty(@"This schedule contains the indoor temperature versus time above which ventilation is shutoff.")]
public System.String MaximumIndoorTemperatureScheduleName { get; set; } = "";
        
[Description(@"This is the temperature differential between indoor and outdoor below which ventilation is shutoff.")]
[JsonProperty(@"This is the temperature differential between indoor and outdoor below which ventilation is shutoff.")]
public System.Single DeltaTemperature { get; set; } = -100;
        
[Description(@"This schedule contains the temperature differential between indoor and outdoor versus time below which ventilation is shutoff.")]
[JsonProperty(@"This schedule contains the temperature differential between indoor and outdoor versus time below which ventilation is shutoff.")]
public System.String DeltaTemperatureScheduleName { get; set; } = "";
        
[Description(@"This is the outdoor temperature below which ventilation is shutoff.")]
[JsonProperty(@"This is the outdoor temperature below which ventilation is shutoff.")]
public System.Single MinimumOutdoorTemperature { get; set; } = -100;
        
[Description(@"This schedule contains the outdoor temperature versus time below which ventilation is shutoff.")]
[JsonProperty(@"This schedule contains the outdoor temperature versus time below which ventilation is shutoff.")]
public System.String MinimumOutdoorTemperatureScheduleName { get; set; } = "";
        
[Description(@"This is the outdoor temperature above which ventilation is shutoff.")]
[JsonProperty(@"This is the outdoor temperature above which ventilation is shutoff.")]
public System.Single MaximumOutdoorTemperature { get; set; } = 100;
        
[Description(@"This schedule contains the outdoor temperature versus time above which ventilation is shutoff.")]
[JsonProperty(@"This schedule contains the outdoor temperature versus time above which ventilation is shutoff.")]
public System.String MaximumOutdoorTemperatureScheduleName { get; set; } = "";
        
[Description(@"This is the outdoor wind speed above which ventilation is shutoff.")]
[JsonProperty(@"This is the outdoor wind speed above which ventilation is shutoff.")]
public System.Single MaximumWindSpeed { get; set; } = 40;
    }
    
    [Description(@"Provide a combined zone outdoor air flow by including interactions between mechanical ventilation, infiltration and duct leakage. This object will combine outdoor flows from all ZoneInfiltration and ZoneVentilation objects in the same zone. Balanced flows will be summed, while unbalanced flows will be added in quadrature.")]
    [JsonObject("ZoneAirBalance:OutdoorAir")]
    public class ZoneAirBalance_OutdoorAir
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"None: Only perform simple calculations without using a combined zone outdoor air. Quadrature: A combined outdoor air is used in the quadrature sum.")]
[JsonProperty(@"None: Only perform simple calculations without using a combined zone outdoor air. Quadrature: A combined outdoor air is used in the quadrature sum.")]
public YesNoDefault AirBalanceMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Quadrature");
        
[JsonProperty(@"")]
public System.Single InducedOutdoorAirDueToUnbalancedDuctLeakage { get; set; } = 0;
        
[Description(@"This schedule contains the fraction values applied to the Induced Outdoor Air given in the previous input field (0.0 - 1.0).")]
[JsonProperty(@"This schedule contains the fraction values applied to the Induced Outdoor Air given in the previous input field (0.0 - 1.0).")]
public System.String InducedOutdoorAirScheduleName { get; set; } = "";
    }
    
    public enum AirBalanceMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("Quadrature")]
        Quadrature = 2,
    }
    
    [Description(@"ZoneMixing is a simple air exchange from one zone to another. Note that this statement only affects the energy balance of the ""receiving"" zone and will not produce any effect on the ""source"" zone. Mixing statements can be complementary and include multiple zones, but the balancing of flows between zones is left to the user's discretion.")]
    [JsonObject("ZoneMixing")]
    public class ZoneMixing
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ScheduleName { get; set; } = "";
        
[Description(@"The entered calculation method is used to create the maximum amount of ventilation for this set of attributes Choices: Flow/Zone => Design Flow Rate -- simply enter Design Flow Rate Flow/Area => Flow Rate per Zone Floor Area - Value * Floor Area (zone) = Design Flow Rate Flow/Person => Flow Rate per Person - Value * #people = Design Flow Rate AirChanges/Hour => Air Changes per Hour - Value * Floor Volume (zone) adjusted for m3/s = Design Volume Flow Rate "Vdesign" in Equation is the result.")]
[JsonProperty(@"The entered calculation method is used to create the maximum amount of ventilation for this set of attributes Choices: Flow/Zone => Design Flow Rate -- simply enter Design Flow Rate Flow/Area => Flow Rate per Zone Floor Area - Value * Floor Area (zone) = Design Flow Rate Flow/Person => Flow Rate per Person - Value * #people = Design Flow Rate AirChanges/Hour => Air Changes per Hour - Value * Floor Volume (zone) adjusted for m3/s = Design Volume Flow Rate "Vdesign" in Equation is the result.")]
public YesNoDefault DesignFlowRateCalculationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Flow/Zone");
        
[JsonProperty(@"")]
public System.Single DesignFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FlowRatePerZoneFloorArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FlowRatePerPerson { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single AirChangesPerHour { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SourceZoneName { get; set; } = "";
        
[Description(@"This field contains the constant temperature differential between source and receiving zones below which mixing is shutoff.")]
[JsonProperty(@"This field contains the constant temperature differential between source and receiving zones below which mixing is shutoff.")]
public System.Single DeltaTemperature { get; set; } = 0;
        
[Description(@"This schedule contains the temperature differential between source and receiving zones versus time below which mixing is shutoff.")]
[JsonProperty(@"This schedule contains the temperature differential between source and receiving zones versus time below which mixing is shutoff.")]
public System.String DeltaTemperatureScheduleName { get; set; } = "";
        
[Description(@"This schedule contains the zone dry-bulb temperature versus time below which mixing is shutoff.")]
[JsonProperty(@"This schedule contains the zone dry-bulb temperature versus time below which mixing is shutoff.")]
public System.String MinimumZoneTemperatureScheduleName { get; set; } = "";
        
[Description(@"This schedule contains the zone dry-bulb temperature versus time above which mixing is shutoff.")]
[JsonProperty(@"This schedule contains the zone dry-bulb temperature versus time above which mixing is shutoff.")]
public System.String MaximumZoneTemperatureScheduleName { get; set; } = "";
        
[Description(@"This schedule contains the source zone dry-bulb temperature versus time below which mixing is shutoff.")]
[JsonProperty(@"This schedule contains the source zone dry-bulb temperature versus time below which mixing is shutoff.")]
public System.String MinimumSourceZoneTemperatureScheduleName { get; set; } = "";
        
[Description(@"This schedule contains the source zone dry-bulb temperature versus time above which mixing is shutoff.")]
[JsonProperty(@"This schedule contains the source zone dry-bulb temperature versus time above which mixing is shutoff.")]
public System.String MaximumSourceZoneTemperatureScheduleName { get; set; } = "";
        
[Description(@"This schedule contains the outdoor temperature versus time below which mixing is shutoff.")]
[JsonProperty(@"This schedule contains the outdoor temperature versus time below which mixing is shutoff.")]
public System.String MinimumOutdoorTemperatureScheduleName { get; set; } = "";
        
[Description(@"This schedule contains the outdoor temperature versus time above which mixing is shutoff.")]
[JsonProperty(@"This schedule contains the outdoor temperature versus time above which mixing is shutoff.")]
public System.String MaximumOutdoorTemperatureScheduleName { get; set; } = "";
    }
    
    public enum DesignFlowRateCalculationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirChanges/Hour")]
        AirChangesHour = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
    }
    
    [Description("ZoneCrossMixing exchanges an equal amount of air between two zones. Note that thi" +
        "s statement affects the energy balance of both zones.")]
    [JsonObject("ZoneCrossMixing")]
    public class ZoneCrossMixing
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ScheduleName { get; set; } = "";
        
[Description(@"The entered calculation method is used to create the maximum amount of ventilation for this set of attributes Choices: Flow/Zone => Design Flow Rate -- simply enter Design Flow Rate Flow/Area => Flow Rate per Zone Floor Area - Value * Floor Area (zone) = Design Flow Rate Flow/Person => Flow Rate per Person - Value * #people = Design Flow Rate AirChanges/Hour => Air Changes per Hour - Value * Floor Volume (zone) adjusted for m3/s = Design Volume Flow Rate "Vdesign" in Equation is the result.")]
[JsonProperty(@"The entered calculation method is used to create the maximum amount of ventilation for this set of attributes Choices: Flow/Zone => Design Flow Rate -- simply enter Design Flow Rate Flow/Area => Flow Rate per Zone Floor Area - Value * Floor Area (zone) = Design Flow Rate Flow/Person => Flow Rate per Person - Value * #people = Design Flow Rate AirChanges/Hour => Air Changes per Hour - Value * Floor Volume (zone) adjusted for m3/s = Design Volume Flow Rate "Vdesign" in Equation is the result.")]
public YesNoDefault DesignFlowRateCalculationMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Flow/Zone");
        
[JsonProperty(@"")]
public System.Single DesignFlowRate { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FlowRatePerZoneFloorArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FlowRatePerPerson { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single AirChangesPerHour { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SourceZoneName { get; set; } = "";
        
[Description(@"This field contains the constant temperature differential between source and receiving zones below which cross mixing is shutoff. This value must be greater than or equal to zero.")]
[JsonProperty(@"This field contains the constant temperature differential between source and receiving zones below which cross mixing is shutoff. This value must be greater than or equal to zero.")]
public System.Single DeltaTemperature { get; set; } = 0;
        
[Description(@"This schedule contains the temperature differential between source and receiving zones versus time below which cross mixing is shutoff.")]
[JsonProperty(@"This schedule contains the temperature differential between source and receiving zones versus time below which cross mixing is shutoff.")]
public System.String DeltaTemperatureScheduleName { get; set; } = "";
        
[Description(@"This schedule contains the indoor temperature versus time below which cross mixing is shutoff.")]
[JsonProperty(@"This schedule contains the indoor temperature versus time below which cross mixing is shutoff.")]
public System.String MinimumZoneTemperatureScheduleName { get; set; } = "";
        
[Description(@"This schedule contains the indoor temperature versus time above which cross mixing is shutoff.")]
[JsonProperty(@"This schedule contains the indoor temperature versus time above which cross mixing is shutoff.")]
public System.String MaximumZoneTemperatureScheduleName { get; set; } = "";
        
[Description(@"This schedule contains the source zone dry-bulb temperature versus time below which cross mixing is shutoff.")]
[JsonProperty(@"This schedule contains the source zone dry-bulb temperature versus time below which cross mixing is shutoff.")]
public System.String MinimumSourceZoneTemperatureScheduleName { get; set; } = "";
        
[Description(@"This schedule contains the source zone dry-bulb temperature versus time above which cross mixing is shutoff.")]
[JsonProperty(@"This schedule contains the source zone dry-bulb temperature versus time above which cross mixing is shutoff.")]
public System.String MaximumSourceZoneTemperatureScheduleName { get; set; } = "";
        
[Description(@"This schedule contains the outdoor temperature versus time below which cross mixing is shutoff.")]
[JsonProperty(@"This schedule contains the outdoor temperature versus time below which cross mixing is shutoff.")]
public System.String MinimumOutdoorTemperatureScheduleName { get; set; } = "";
        
[Description(@"This schedule contains the outdoor temperature versus time above which cross mixing is shutoff.")]
[JsonProperty(@"This schedule contains the outdoor temperature versus time above which cross mixing is shutoff.")]
public System.String MaximumOutdoorTemperatureScheduleName { get; set; } = "";
    }
    
    public enum DesignFlowRateCalculationMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirChanges/Hour")]
        AirChangesHour = 1,
        
        [JsonProperty("Flow/Area")]
        FlowArea = 2,
        
        [JsonProperty("Flow/Person")]
        FlowPerson = 3,
        
        [JsonProperty("Flow/Zone")]
        FlowZone = 4,
    }
    
    [Description(@"Refrigeration Door Mixing is used for an opening between two zones that are at the same elevation but have different air temperatures. In this case, the mixing air flow between the two zones is determined by the density difference between the two zones. This would typically be used between two zones in a refrigerated warehouse that are controlled at different temperatures. It could also be used to model a door to a walk-in refrigerated space if that space were modeled as a zone instead of using the object Refrigeration:WalkIn.")]
    [JsonObject("ZoneRefrigerationDoorMixing")]
    public class ZoneRefrigerationDoorMixing
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"This schedule defines the fraction of the time the refrigeration door is open For example, if the warehouse is closed at night and there are no door openings between two zones, the value for that time period would be 0. If doors were propped open, the value  over that time period would be 1.0 If the doors were open about 20% of the time, the value over that period would be 0.2 Schedule values must lie between 0 and 1.0")]
[JsonProperty(@"This schedule defines the fraction of the time the refrigeration door is open For example, if the warehouse is closed at night and there are no door openings between two zones, the value for that time period would be 0. If doors were propped open, the value  over that time period would be 1.0 If the doors were open about 20% of the time, the value over that period would be 0.2 Schedule values must lie between 0 and 1.0")]
public System.String ScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DoorHeight { get; set; } = 3;
        
[JsonProperty(@"")]
public System.Single DoorArea { get; set; } = 9;
        
[Description(@"Door protection can reduce the air flow through a refrigeration door The default value is "None" Choices: "None", "AirCurtain", and "StripCurtain" A strip curtain reduces the air flow more than an air curtain")]
[JsonProperty(@"Door protection can reduce the air flow through a refrigeration door The default value is "None" Choices: "None", "AirCurtain", and "StripCurtain" A strip curtain reduces the air flow more than an air curtain")]
public YesNoDefault DoorProtectionType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
    }
    
    public enum DoorProtectionTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AirCurtain")]
        AirCurtain = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("StripCurtain")]
        StripCurtain = 3,
    }
    
    [Description("Earth Tube is specified as a design level which is modified by a Schedule fractio" +
        "n, temperature difference and wind speed: Earthtube=Edesign * Fschedule * (A + B" +
        "*|(Tzone-Todb)| + C*WindSpd + D * WindSpd**2)")]
    [JsonObject("ZoneEarthtube")]
    public class ZoneEarthtube
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ScheduleName { get; set; } = "";
        
[Description(@""Edesign" in Equation")]
[JsonProperty(@""Edesign" in Equation")]
public System.Single DesignFlowRate { get; set; } = ;
        
[Description(@"this is the indoor temperature below which the earth tube is shut off")]
[JsonProperty(@"this is the indoor temperature below which the earth tube is shut off")]
public System.Single MinimumZoneTemperatureWhenCooling { get; set; } = ;
        
[Description(@"this is the indoor temperature above which the earth tube is shut off")]
[JsonProperty(@"this is the indoor temperature above which the earth tube is shut off")]
public System.Single MaximumZoneTemperatureWhenHeating { get; set; } = ;
        
[Description(@"This is the temperature difference between indoor and outdoor below which the earth tube is shut off")]
[JsonProperty(@"This is the temperature difference between indoor and outdoor below which the earth tube is shut off")]
public System.Single DeltaTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault EarthtubeType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Natural");
        
[Description(@"pressure rise across the fan")]
[JsonProperty(@"pressure rise across the fan")]
public System.Single FanPressureRise { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single FanTotalEfficiency { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single PipeRadius { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single PipeThickness { get; set; } = 0.2;
        
[JsonProperty(@"")]
public System.Single PipeLength { get; set; } = 15;
        
[JsonProperty(@"")]
public System.Single PipeThermalConductivity { get; set; } = 200;
        
[JsonProperty(@"")]
public System.Single PipeDepthUnderGroundSurface { get; set; } = 3;
        
[JsonProperty(@"")]
public YesNoDefault SoilCondition { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "HeavyAndDamp");
        
[JsonProperty(@"")]
public System.Single AverageSoilSurfaceTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single AmplitudeOfSoilSurfaceTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single PhaseConstantOfSoilSurfaceTemperature { get; set; } = ;
        
[Description(@""A" in Equation")]
[JsonProperty(@""A" in Equation")]
public System.Single ConstantTermFlowCoefficient { get; set; } = 1;
        
[Description(@""B" in Equation")]
[JsonProperty(@""B" in Equation")]
public System.Single TemperatureTermFlowCoefficient { get; set; } = 0;
        
[Description(@""C" in Equation")]
[JsonProperty(@""C" in Equation")]
public System.Single VelocityTermFlowCoefficient { get; set; } = 0;
        
[Description(@""D" in Equation")]
[JsonProperty(@""D" in Equation")]
public System.Single VelocitySquaredTermFlowCoefficient { get; set; } = 0;
    }
    
    public enum EarthtubeTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Exhaust")]
        Exhaust = 1,
        
        [JsonProperty("Intake")]
        Intake = 2,
        
        [JsonProperty("Natural")]
        Natural = 3,
    }
    
    public enum SoilConditionType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("HeavyAndDamp")]
        HeavyAndDamp = 1,
        
        [JsonProperty("HeavyAndDry")]
        HeavyAndDry = 2,
        
        [JsonProperty("HeavyAndSaturated")]
        HeavyAndSaturated = 3,
        
        [JsonProperty("LightAndDry")]
        LightAndDry = 4,
    }
    
    [Description(@"A cooltower (sometimes referred to as a wind tower or a shower cooling tower) models passive downdraught evaporative cooling (PDEC) that is designed to capture the wind at the top of a tower and cool the outdoor air using water evaporation before delivering it to a space.")]
    [JsonObject("ZoneCoolTower:Shower")]
    public class ZoneCoolTower_Shower
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"In case of stand alone tank or underground water, leave this input blank")]
[JsonProperty(@"In case of stand alone tank or underground water, leave this input blank")]
public System.String WaterSupplyStorageTankName { get; set; } = "";
        
[Description(@"Water flow schedule should be selected when the water flow rate is known. Wind-driven flow should be selected when the water flow rate is unknown.")]
[JsonProperty(@"Water flow schedule should be selected when the water flow rate is known. Wind-driven flow should be selected when the water flow rate is unknown.")]
public YesNoDefault FlowControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "WindDrivenFlow");
        
[JsonProperty(@"")]
public System.String PumpFlowRateScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MaximumWaterFlowRate { get; set; } = ;
        
[Description(@"This field is from either the spray or the wet pad to the top of the outlet.")]
[JsonProperty(@"This field is from either the spray or the wet pad to the top of the outlet.")]
public System.Single EffectiveTowerHeight { get; set; } = ;
        
[Description(@"User have to specify effective area when outlet area is relatively bigger than the cross sectional area of cooltower. If the number of outlet is more than one, assume the air passes through only one.")]
[JsonProperty(@"User have to specify effective area when outlet area is relatively bigger than the cross sectional area of cooltower. If the number of outlet is more than one, assume the air passes through only one.")]
public System.Single AirflowOutletArea { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single MaximumAirFlowRate { get; set; } = ;
        
[Description(@"This field is to specify the indoor temperature below which cooltower is shutoff.")]
[JsonProperty(@"This field is to specify the indoor temperature below which cooltower is shutoff.")]
public System.Single MinimumIndoorTemperature { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FractionOfWaterLoss { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FractionOfFlowSchedule { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RatedPowerConsumption { get; set; } = ;
    }
    
    public enum FlowControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("WaterFlowSchedule")]
        WaterFlowSchedule = 1,
        
        [JsonProperty("WindDrivenFlow")]
        WindDrivenFlow = 2,
    }
    
    [Description("A thermal chimney is a vertical shaft utilizing solar radiation to enhance natura" +
        "l ventilation. It consists of an absorber wall, air gap and glass cover with hig" +
        "h solar transmissivity.")]
    [JsonObject("ZoneThermalChimney")]
    public class ZoneThermalChimney
    {
        
[Description(@"Name of zone that is the thermal chimney")]
[JsonProperty(@"Name of zone that is the thermal chimney")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single WidthOfTheAbsorberWall { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreaOfAirChannelOutlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single DischargeCoefficient { get; set; } = 0.8;
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceFromTopOfThermalChimneyToInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeRatiosOfAirFlowRatesPassingThroughZone { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreasOfAirChannelInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceFromTopOfThermalChimneyToInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeRatiosOfAirFlowRatesPassingThroughZone { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreasOfAirChannelInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceFromTopOfThermalChimneyToInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeRatiosOfAirFlowRatesPassingThroughZone { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreasOfAirChannelInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceFromTopOfThermalChimneyToInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeRatiosOfAirFlowRatesPassingThroughZone { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreasOfAirChannelInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceFromTopOfThermalChimneyToInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeRatiosOfAirFlowRatesPassingThroughZone { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreasOfAirChannelInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceFromTopOfThermalChimneyToInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeRatiosOfAirFlowRatesPassingThroughZone { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreasOfAirChannelInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceFromTopOfThermalChimneyToInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeRatiosOfAirFlowRatesPassingThroughZone { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreasOfAirChannelInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceFromTopOfThermalChimneyToInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeRatiosOfAirFlowRatesPassingThroughZone { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreasOfAirChannelInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceFromTopOfThermalChimneyToInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeRatiosOfAirFlowRatesPassingThroughZone { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreasOfAirChannelInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceFromTopOfThermalChimneyToInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeRatiosOfAirFlowRatesPassingThroughZone { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreasOfAirChannelInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceFromTopOfThermalChimneyToInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeRatiosOfAirFlowRatesPassingThroughZone { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreasOfAirChannelInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceFromTopOfThermalChimneyToInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeRatiosOfAirFlowRatesPassingThroughZone { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreasOfAirChannelInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceFromTopOfThermalChimneyToInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeRatiosOfAirFlowRatesPassingThroughZone { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreasOfAirChannelInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceFromTopOfThermalChimneyToInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeRatiosOfAirFlowRatesPassingThroughZone { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreasOfAirChannelInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceFromTopOfThermalChimneyToInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeRatiosOfAirFlowRatesPassingThroughZone { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreasOfAirChannelInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceFromTopOfThermalChimneyToInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeRatiosOfAirFlowRatesPassingThroughZone { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreasOfAirChannelInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceFromTopOfThermalChimneyToInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeRatiosOfAirFlowRatesPassingThroughZone { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreasOfAirChannelInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceFromTopOfThermalChimneyToInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeRatiosOfAirFlowRatesPassingThroughZone { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreasOfAirChannelInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceFromTopOfThermalChimneyToInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeRatiosOfAirFlowRatesPassingThroughZone { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreasOfAirChannelInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single DistanceFromTopOfThermalChimneyToInlet { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RelativeRatiosOfAirFlowRatesPassingThroughZone { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CrossSectionalAreasOfAirChannelInlet { get; set; } = ;
    }
}
namespace EnergyPlus.ZoneHVACAirLoopTerminalUnits
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Central air system terminal unit, single duct, constant volume, with reheat coil " +
        "(hot water, electric, gas, or steam).")]
    [JsonObject("AirTerminal:SingleDuct:ConstantVolume:Reheat")]
    public class AirTerminal_SingleDuct_ConstantVolume_Reheat
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ReheatCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ReheatCoilName { get; set; } = "";
        
[Description(@"Not used when reheat coil type is gas or electric")]
[JsonProperty(@"Not used when reheat coil type is gas or electric")]
public System.String MaximumHotWaterOrSteamFlowRate { get; set; } = "";
        
[Description(@"Not used when reheat coil type is gas or electric")]
[JsonProperty(@"Not used when reheat coil type is gas or electric")]
public System.Single MinimumHotWaterOrSteamFlowRate { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single ConvergenceTolerance { get; set; } = 0.001;
        
[Description(@"Specifies the maximum allowable supply air temperature leaving the reheat coil. If left blank, there is no limit and no default. If unknown, 35C (95F) is recommended.")]
[JsonProperty(@"Specifies the maximum allowable supply air temperature leaving the reheat coil. If left blank, there is no limit and no default. If unknown, 35C (95F) is recommended.")]
public System.Single MaximumReheatAirTemperature { get; set; } = ;
    }
    
    public enum ReheatCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    [Description("Central air system terminal unit, single duct, constant volume, without reheat co" +
        "il")]
    [JsonObject("AirTerminal:SingleDuct:ConstantVolume:NoReheat")]
    public class AirTerminal_SingleDuct_ConstantVolume_NoReheat
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"The air-inlet node name that connects the air splitter to the individual zone air distribution unit. This node should also be one of the outlet air node of an AirLoopHVAC:ZoneSplitter or AirLoopHVAC:SupplyPlenum component.")]
[JsonProperty(@"The air-inlet node name that connects the air splitter to the individual zone air distribution unit. This node should also be one of the outlet air node of an AirLoopHVAC:ZoneSplitter or AirLoopHVAC:SupplyPlenum component.")]
public System.String AirInletNodeName { get; set; } = "";
        
[Description(@"This is an air outlet node from the air distribution unit. This node name should be one of the supply air inlet node names of a zone served by this component.")]
[JsonProperty(@"This is an air outlet node from the air distribution unit. This node name should be one of the supply air inlet node names of a zone served by this component.")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumAirFlowRate { get; set; } = "";
        
[Description(@"This field is used to modulate the terminal unit flow rate based on the specified outdoor air requirement. When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will adjust flow to meet this outdoor air requirement and no more. There is no control for zone load. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on either the current or design occupancy as specified in the Per Person Ventilation Rate Mode field. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate. The requested flow rate may not be fully met if the system is operating with cycling fan. If this field is blank, then the terminal unit will not be controlled for outdoor air flow. This field is optional.")]
[JsonProperty(@"This field is used to modulate the terminal unit flow rate based on the specified outdoor air requirement. When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will adjust flow to meet this outdoor air requirement and no more. There is no control for zone load. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on either the current or design occupancy as specified in the Per Person Ventilation Rate Mode field. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate. The requested flow rate may not be fully met if the system is operating with cycling fan. If this field is blank, then the terminal unit will not be controlled for outdoor air flow. This field is optional.")]
public System.String DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        
[Description(@"CurrentOccupancy uses current number of people in the zone which may vary DesignOccupancy uses the total number of people in the zone and is constant")]
[JsonProperty(@"CurrentOccupancy uses current number of people in the zone which may vary DesignOccupancy uses the total number of people in the zone and is constant")]
public YesNoDefault PerPersonVentilationRateMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "CurrentOccupancy");
    }
    
    public enum PerPersonVentilationRateModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CurrentOccupancy")]
        CurrentOccupancy = 1,
        
        [JsonProperty("DesignOccupancy")]
        DesignOccupancy = 2,
    }
    
    [Description("Central air system terminal unit, single duct, variable volume, with no reheat co" +
        "il.")]
    [JsonObject("AirTerminal:SingleDuct:VAV:NoReheat")]
    public class AirTerminal_SingleDuct_VAV_NoReheat
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumAirFlowRate { get; set; } = "";
        
[Description(@"Constant = Constant Minimum Air Flow Fraction (a fraction of Maximum Air Flow Rate) FixedFlowRate = Fixed Minimum Air Flow Rate (a fixed minimum air volume flow rate) Scheduled = Scheduled Minimum Air Flow Fraction (a fraction of Maximum Air Flow")]
[JsonProperty(@"Constant = Constant Minimum Air Flow Fraction (a fraction of Maximum Air Flow Rate) FixedFlowRate = Fixed Minimum Air Flow Rate (a fixed minimum air volume flow rate) Scheduled = Scheduled Minimum Air Flow Fraction (a fraction of Maximum Air Flow")]
public YesNoDefault ZoneMinimumAirFlowInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Constant");
        
[Description(@"This field is used if the field Zone Minimum Air Flow Input Method is Constant If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional; if a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the following field are entered, the larger result is used. The values for autosizing are picked up from the Sizing:Zone input fields "Cooling Minimum Air Flow per Zone Floor Area", "Cooling Minimum Air Flow", and "Cooling Minimum Air Flow Fraction". If there is no sizing calculation a default of 0.000762 m3/s-m2 (0.15 cfm/ft2) is used.")]
[JsonProperty(@"This field is used if the field Zone Minimum Air Flow Input Method is Constant If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional; if a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the following field are entered, the larger result is used. The values for autosizing are picked up from the Sizing:Zone input fields "Cooling Minimum Air Flow per Zone Floor Area", "Cooling Minimum Air Flow", and "Cooling Minimum Air Flow Fraction". If there is no sizing calculation a default of 0.000762 m3/s-m2 (0.15 cfm/ft2) is used.")]
public System.String ConstantMinimumAirFlowFraction { get; set; } = (System.String)Autosize;
        
[Description(@"This field is used if the field Zone Minimum Air Flow Input Method is FixedFlowRate. If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional; if a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the previous field are entered, the larger result is used. The values for autosizing are picked up from the Sizing:Zone input fields "Cooling Minimum Air Flow per Zone Floor Area", "Cooling Minimum Air Flow", and "Cooling Minimum Air Flow Fraction". If there is no sizing calculation a default of 0.000762 m3/s-m2 (0.15 cfm/ft2) is used.")]
[JsonProperty(@"This field is used if the field Zone Minimum Air Flow Input Method is FixedFlowRate. If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional; if a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the previous field are entered, the larger result is used. The values for autosizing are picked up from the Sizing:Zone input fields "Cooling Minimum Air Flow per Zone Floor Area", "Cooling Minimum Air Flow", and "Cooling Minimum Air Flow Fraction". If there is no sizing calculation a default of 0.000762 m3/s-m2 (0.15 cfm/ft2) is used.")]
public System.String FixedMinimumAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"This field is used if the field Zone Minimum Air Flow Input Method is Scheduled Schedule values are fractions, 0.0 to 1.0. If the field Constant Minimum Air Flow Fraction is blank, then the average of the minimum and maximum schedule values is used for sizing normal-action reheat coils.")]
[JsonProperty(@"This field is used if the field Zone Minimum Air Flow Input Method is Scheduled Schedule values are fractions, 0.0 to 1.0. If the field Constant Minimum Air Flow Fraction is blank, then the average of the minimum and maximum schedule values is used for sizing normal-action reheat coils.")]
public System.String MinimumAirFlowFractionScheduleName { get; set; } = "";
        
[Description(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will increase flow as needed to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on the current number of occupants in the zone. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate. If this field is blank, then the terminal unit will not be controlled for outdoor air flow.")]
[JsonProperty(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will increase flow as needed to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on the current number of occupants in the zone. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate. If this field is blank, then the terminal unit will not be controlled for outdoor air flow.")]
public System.String DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        
[Description(@"This field adjusts the design minimum flow rate by multiplying it using this schedule of fraction values. This field can be used with any of the three "Zone Minimum Air Flow Input Method". Schedule values are fractions, 0.0 to 1.0. This field adjusts the minimum airflow turndown below the design minimum air flow and is intended for use with ASHRAE Standard 170. If this field is left blank, then the turndown minimum air flow fraction value is set to 1.")]
[JsonProperty(@"This field adjusts the design minimum flow rate by multiplying it using this schedule of fraction values. This field can be used with any of the three "Zone Minimum Air Flow Input Method". Schedule values are fractions, 0.0 to 1.0. This field adjusts the minimum airflow turndown below the design minimum air flow and is intended for use with ASHRAE Standard 170. If this field is left blank, then the turndown minimum air flow fraction value is set to 1.")]
public System.String MinimumAirFlowTurndownScheduleName { get; set; } = "";
    }
    
    public enum ZoneMinimumAirFlowInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Constant")]
        Constant = 1,
        
        [JsonProperty("FixedFlowRate")]
        FixedFlowRate = 2,
        
        [JsonProperty("Scheduled")]
        Scheduled = 3,
    }
    
    [Description("Central air system terminal unit, single duct, variable volume, with reheat coil " +
        "(hot water, electric, gas, or steam).")]
    [JsonObject("AirTerminal:SingleDuct:VAV:Reheat")]
    public class AirTerminal_SingleDuct_VAV_Reheat
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"the outlet node of the damper and the inlet node of the reheat coil this is an internal node to the terminal unit and connects the damper and reheat coil")]
[JsonProperty(@"the outlet node of the damper and the inlet node of the reheat coil this is an internal node to the terminal unit and connects the damper and reheat coil")]
public System.String DamperAirOutletNodeName { get; set; } = "";
        
[Description(@"the inlet node to the terminal unit and the damper")]
[JsonProperty(@"the inlet node to the terminal unit and the damper")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumAirFlowRate { get; set; } = "";
        
[Description(@"Constant = Constant Minimum Air Flow Fraction (a fraction of Maximum Air Flow Rate) FixedFlowRate = Fixed Minimum Air Flow Rate (a fixed minimum air volume flow rate) Scheduled = Scheduled Minimum Air Flow Fraction (a fraction of Maximum Air Flow")]
[JsonProperty(@"Constant = Constant Minimum Air Flow Fraction (a fraction of Maximum Air Flow Rate) FixedFlowRate = Fixed Minimum Air Flow Rate (a fixed minimum air volume flow rate) Scheduled = Scheduled Minimum Air Flow Fraction (a fraction of Maximum Air Flow")]
public YesNoDefault ZoneMinimumAirFlowInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Constant");
        
[Description(@"This field is used if the field Zone Minimum Air Flow Input Method is Constant If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional; if a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the following field are entered, the larger result is used. The values for autosizing are picked up from the Sizing:Zone input fields "Cooling Minimum Air Flow per Zone Floor Area", "Cooling Minimum Air Flow", and "Cooling Minimum Air Flow Fraction". If there is no sizing calculation a default of 0.000762 m3/s-m2 (0.15 cfm/ft2) is used.")]
[JsonProperty(@"This field is used if the field Zone Minimum Air Flow Input Method is Constant If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional; if a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the following field are entered, the larger result is used. The values for autosizing are picked up from the Sizing:Zone input fields "Cooling Minimum Air Flow per Zone Floor Area", "Cooling Minimum Air Flow", and "Cooling Minimum Air Flow Fraction". If there is no sizing calculation a default of 0.000762 m3/s-m2 (0.15 cfm/ft2) is used.")]
public System.String ConstantMinimumAirFlowFraction { get; set; } = (System.String)Autosize;
        
[Description(@"This field is used if the field Zone Minimum Air Flow Input Method is FixedFlowRate. If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional; if a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the previous field are entered, the larger result is used. The values for autosizing are picked up from the Sizing:Zone input fields "Cooling Minimum Air Flow per Zone Floor Area", "Cooling Minimum Air Flow", and "Cooling Minimum Air Flow Fraction". If there is no sizing calculation a default of 0.000762 m3/s-m2 (0.15 cfm/ft2) is used.")]
[JsonProperty(@"This field is used if the field Zone Minimum Air Flow Input Method is FixedFlowRate. If the field Zone Minimum Air Flow Input Method is Scheduled, then this field is optional; if a value is entered, then it is used for sizing normal-action reheat coils. If both this field and the previous field are entered, the larger result is used. The values for autosizing are picked up from the Sizing:Zone input fields "Cooling Minimum Air Flow per Zone Floor Area", "Cooling Minimum Air Flow", and "Cooling Minimum Air Flow Fraction". If there is no sizing calculation a default of 0.000762 m3/s-m2 (0.15 cfm/ft2) is used.")]
public System.String FixedMinimumAirFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"This field is used if the field Zone Minimum Air Flow Input Method is Scheduled Schedule values are fractions, 0.0 to 1.0. If the field Constant Minimum Air Flow Fraction is blank, then the average of the minimum and maximum schedule values is used for sizing normal-action reheat coils.")]
[JsonProperty(@"This field is used if the field Zone Minimum Air Flow Input Method is Scheduled Schedule values are fractions, 0.0 to 1.0. If the field Constant Minimum Air Flow Fraction is blank, then the average of the minimum and maximum schedule values is used for sizing normal-action reheat coils.")]
public System.String MinimumAirFlowFractionScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ReheatCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ReheatCoilName { get; set; } = "";
        
[Description(@"Not used when reheat coil type is gas or electric")]
[JsonProperty(@"Not used when reheat coil type is gas or electric")]
public System.String MaximumHotWaterOrSteamFlowRate { get; set; } = "";
        
[Description(@"Not used when reheat coil type is gas or electric")]
[JsonProperty(@"Not used when reheat coil type is gas or electric")]
public System.Single MinimumHotWaterOrSteamFlowRate { get; set; } = 0;
        
[Description(@"The outlet node of the terminal unit and the reheat coil. This is also the zone inlet node.")]
[JsonProperty(@"The outlet node of the terminal unit and the reheat coil. This is also the zone inlet node.")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single ConvergenceTolerance { get; set; } = 0.001;
        
[Description(@"Normal means the damper is fixed at the minimum position in heating mode Reverse means the damper can open fully during reheat ReverseWithLimits means the damper will open partially during reheat as specified in the following 2 fields")]
[JsonProperty(@"Normal means the damper is fixed at the minimum position in heating mode Reverse means the damper can open fully during reheat ReverseWithLimits means the damper will open partially during reheat as specified in the following 2 fields")]
public YesNoDefault DamperHeatingAction { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ReverseWithLimits");
        
[Description(@"Used only when Reheat Coil Object Type = Coil:Heating:Water and Damper Heating Action = ReverseWithLimits When autocalculating, the maximum flow per zone is set to 0.002032 m3/s-m2 (0.4 cfm/sqft) This optional field limits the maximum flow allowed in reheat mode. At no time will the maximum flow rate calculated here exceed the value of Maximum Air Flow Rate.")]
[JsonProperty(@"Used only when Reheat Coil Object Type = Coil:Heating:Water and Damper Heating Action = ReverseWithLimits When autocalculating, the maximum flow per zone is set to 0.002032 m3/s-m2 (0.4 cfm/sqft) This optional field limits the maximum flow allowed in reheat mode. At no time will the maximum flow rate calculated here exceed the value of Maximum Air Flow Rate.")]
public System.String MaximumFlowPerZoneFloorAreaDuringReheat { get; set; } = (System.String)Autosize;
        
[Description(@"Used only when Reheat Coil Object Type = Coil:Heating:Water and Damper Heating Action = ReverseWithLimits When autocalculating, the maximum flow fraction is set to the ratio of 0.002032 m3/s-m2 (0.4 cfm/sqft) multiplied by the zone floor area and the Maximum Air Flow Rate. This optional field limits the maximum flow allowed in reheat mode. At no time will the maximum flow rate calculated here exceed the value of Maximum Air Flow Rate.")]
[JsonProperty(@"Used only when Reheat Coil Object Type = Coil:Heating:Water and Damper Heating Action = ReverseWithLimits When autocalculating, the maximum flow fraction is set to the ratio of 0.002032 m3/s-m2 (0.4 cfm/sqft) multiplied by the zone floor area and the Maximum Air Flow Rate. This optional field limits the maximum flow allowed in reheat mode. At no time will the maximum flow rate calculated here exceed the value of Maximum Air Flow Rate.")]
public System.String MaximumFlowFractionDuringReheat { get; set; } = (System.String)Autosize;
        
[Description(@"Specifies the maximum allowable supply air temperature leaving the reheat coil. If left blank, there is no limit and no default. If unknown, 35C (95F) is recommended.")]
[JsonProperty(@"Specifies the maximum allowable supply air temperature leaving the reheat coil. If left blank, there is no limit and no default. If unknown, 35C (95F) is recommended.")]
public System.Single MaximumReheatAirTemperature { get; set; } = ;
        
[Description(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will increase flow as needed to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on the current number of occupants in the zone. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate. If this field is blank, then the terminal unit will not be controlled for outdoor air flow.")]
[JsonProperty(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will increase flow as needed to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on the current number of occupants in the zone. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate. If this field is blank, then the terminal unit will not be controlled for outdoor air flow.")]
public System.String DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        
[Description(@"This field adjusts the design minimum flow rate by multiplying it using this schedule of fraction values. This field can be used with any of the three "Zone Minimum Air Flow Input Method". Schedule values are fractions, 0.0 to 1.0. This field adjusts the minimum airflow turndown below the design minimum air flow and is intended for use with ASHRAE Standard 170. If this field is left blank, then the turndown minimum air flow fraction value is set to 1.")]
[JsonProperty(@"This field adjusts the design minimum flow rate by multiplying it using this schedule of fraction values. This field can be used with any of the three "Zone Minimum Air Flow Input Method". Schedule values are fractions, 0.0 to 1.0. This field adjusts the minimum airflow turndown below the design minimum air flow and is intended for use with ASHRAE Standard 170. If this field is left blank, then the turndown minimum air flow fraction value is set to 1.")]
public System.String MinimumAirFlowTurndownScheduleName { get; set; } = "";
    }
    
    public enum ZoneMinimumAirFlowInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Constant")]
        Constant = 1,
        
        [JsonProperty("FixedFlowRate")]
        FixedFlowRate = 2,
        
        [JsonProperty("Scheduled")]
        Scheduled = 3,
    }
    
    public enum ReheatCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum DamperHeatingActionType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Normal")]
        Normal = 1,
        
        [JsonProperty("Reverse")]
        Reverse = 2,
        
        [JsonProperty("ReverseWithLimits")]
        ReverseWithLimits = 3,
    }
    
    [Description(@"Central air system terminal unit, single duct, variable volume, with reheat coil (hot water, electric, gas, or steam) and variable-speed fan. These units are usually employed in underfloor air distribution (UFAD) systems where the air is supplied at low static pressure through an underfloor plenum. The fan is used to control the flow of conditioned air that enters the space.")]
    [JsonObject("AirTerminal:SingleDuct:VAV:Reheat:VariableSpeedFan")]
    public class AirTerminal_SingleDuct_VAV_Reheat_VariableSpeedFan
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumCoolingAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumHeatingAirFlowRate { get; set; } = "";
        
[Description(@"fraction of cooling air flow rate")]
[JsonProperty(@"fraction of cooling air flow rate")]
public System.Single ZoneMinimumAirFlowFraction { get; set; } = ;
        
[Description(@"The name of the HVAC system node that is the air inlet node for the terminal unit. This is also the air inlet node for the unit's fan.")]
[JsonProperty(@"The name of the HVAC system node that is the air inlet node for the terminal unit. This is also the air inlet node for the unit's fan.")]
public System.String AirInletNodeName { get; set; } = "";
        
[Description(@"The name of the HVAC system node that is the air outlet node for the terminal unit. This is also the air outlet node for the unit's heating coil's air outlet node. This node is also a zone inlet node.")]
[JsonProperty(@"The name of the HVAC system node that is the air outlet node for the terminal unit. This is also the air outlet node for the unit's heating coil's air outlet node. This node is also a zone inlet node.")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String FanName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String HeatingCoilName { get; set; } = "";
        
[Description(@"Not used when heating coil type is gas or electric")]
[JsonProperty(@"Not used when heating coil type is gas or electric")]
public System.String MaximumHotWaterOrSteamFlowRate { get; set; } = "";
        
[Description(@"Not used when heating coil type is gas or electric")]
[JsonProperty(@"Not used when heating coil type is gas or electric")]
public System.Single MinimumHotWaterOrSteamFlowRate { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single HeatingConvergenceTolerance { get; set; } = 0.001;
        
[Description(@"This field adjusts the fan-off minimum flow rate by multiplying it using this scheduled fraction values. This field is used with "Zone Minimum Air Flow Fraction". Schedule values are fractions 0.0 to 1.0. This field adjusts the minimum airflow turndown below the design minimum air flow and is intended for use with ASHRAE Standard 170. If this field is left blank, then the turndown minimum air flow fraction value is set to 1 and the model uses the fixed fraction specified in in the field "Zone Minimum Air Flow Fraction".")]
[JsonProperty(@"This field adjusts the fan-off minimum flow rate by multiplying it using this scheduled fraction values. This field is used with "Zone Minimum Air Flow Fraction". Schedule values are fractions 0.0 to 1.0. This field adjusts the minimum airflow turndown below the design minimum air flow and is intended for use with ASHRAE Standard 170. If this field is left blank, then the turndown minimum air flow fraction value is set to 1 and the model uses the fixed fraction specified in in the field "Zone Minimum Air Flow Fraction".")]
public System.String MinimumAirFlowTurndownScheduleName { get; set; } = "";
    }
    
    public enum FanObjectTypeType
    {
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 0,
        
        [JsonProperty("Fan:VariableVolume")]
        FanVariableVolume = 1,
    }
    
    public enum HeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    [Description("Central air system terminal unit, single duct, variable volume for both cooling a" +
        "nd heating, with no reheat coil.")]
    [JsonObject("AirTerminal:SingleDuct:VAV:HeatAndCool:NoReheat")]
    public class AirTerminal_SingleDuct_VAV_HeatAndCool_NoReheat
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"The outlet node of the terminal unit. This is also the zone inlet node.")]
[JsonProperty(@"The outlet node of the terminal unit. This is also the zone inlet node.")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumAirFlowRate { get; set; } = "";
        
[Description(@"fraction of maximum air flow")]
[JsonProperty(@"fraction of maximum air flow")]
public System.Single ZoneMinimumAirFlowFraction { get; set; } = ;
        
[Description(@"This field adjusts the design minimum flow rate by multiplying it using this schedule of fraction values. This field is used with "Zone Minimum Air Flow Fraction". Schedule values are fractions 0.0 to 1.0. This field adjusts the minimum airflow turndown below the design minimum air flow and is intended for use with ASHRAE Standard 170. If this field is left blank, then the turndown minimum air flow fraction value is set to 1 and the model uses the fixed fraction specified in in the field "Zone Minimum Air Flow Fraction".")]
[JsonProperty(@"This field adjusts the design minimum flow rate by multiplying it using this schedule of fraction values. This field is used with "Zone Minimum Air Flow Fraction". Schedule values are fractions 0.0 to 1.0. This field adjusts the minimum airflow turndown below the design minimum air flow and is intended for use with ASHRAE Standard 170. If this field is left blank, then the turndown minimum air flow fraction value is set to 1 and the model uses the fixed fraction specified in in the field "Zone Minimum Air Flow Fraction".")]
public System.String MinimumAirFlowTurndownScheduleName { get; set; } = "";
    }
    
    [Description("Central air system terminal unit, single duct, variable volume for both cooling a" +
        "nd heating, with reheat coil (hot water, electric, gas, or steam).")]
    [JsonObject("AirTerminal:SingleDuct:VAV:HeatAndCool:Reheat")]
    public class AirTerminal_SingleDuct_VAV_HeatAndCool_Reheat
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"the outlet node of the damper and the inlet node of the reheat coil this is an internal node to the terminal unit and connects the damper and reheat coil")]
[JsonProperty(@"the outlet node of the damper and the inlet node of the reheat coil this is an internal node to the terminal unit and connects the damper and reheat coil")]
public System.String DamperAirOutletNodeName { get; set; } = "";
        
[Description(@"the inlet node to the terminal unit and the damper")]
[JsonProperty(@"the inlet node to the terminal unit and the damper")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumAirFlowRate { get; set; } = "";
        
[Description(@"fraction of maximum air flow")]
[JsonProperty(@"fraction of maximum air flow")]
public System.Single ZoneMinimumAirFlowFraction { get; set; } = ;
        
[JsonProperty(@"")]
public YesNoDefault ReheatCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ReheatCoilName { get; set; } = "";
        
[Description(@"Not used when reheat coil type is gas or electric")]
[JsonProperty(@"Not used when reheat coil type is gas or electric")]
public System.String MaximumHotWaterOrSteamFlowRate { get; set; } = "";
        
[Description(@"Not used when reheat coil type is gas or electric")]
[JsonProperty(@"Not used when reheat coil type is gas or electric")]
public System.Single MinimumHotWaterOrSteamFlowRate { get; set; } = 0;
        
[Description(@"The outlet node of the terminal unit and the reheat coil. This is also the zone inlet node.")]
[JsonProperty(@"The outlet node of the terminal unit and the reheat coil. This is also the zone inlet node.")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single ConvergenceTolerance { get; set; } = 0.001;
        
[Description(@"Specifies the maximum allowable supply air temperature leaving the reheat coil. If left blank, there is no limit and no default. If unknown, 35C (95F) is recommended.")]
[JsonProperty(@"Specifies the maximum allowable supply air temperature leaving the reheat coil. If left blank, there is no limit and no default. If unknown, 35C (95F) is recommended.")]
public System.Single MaximumReheatAirTemperature { get; set; } = ;
        
[Description(@"This field adjusts the design minimum flow rate by multiplying it using this schedule of fraction values. This field is used with "Zone Minimum Air Flow Fraction". Schedule values are fractions 0.0 to 1.0. This field adjusts the minimum airflow turndown below the design minimum air flow and is intended for use with ASHRAE Standard 170. If this field is left blank, then the turndown minimum air flow fraction value is set to 1 and the model uses the fixed fraction specified in in the field "Zone Minimum Air Flow Fraction".")]
[JsonProperty(@"This field adjusts the design minimum flow rate by multiplying it using this schedule of fraction values. This field is used with "Zone Minimum Air Flow Fraction". Schedule values are fractions 0.0 to 1.0. This field adjusts the minimum airflow turndown below the design minimum air flow and is intended for use with ASHRAE Standard 170. If this field is left blank, then the turndown minimum air flow fraction value is set to 1 and the model uses the fixed fraction specified in in the field "Zone Minimum Air Flow Fraction".")]
public System.String MinimumAirFlowTurndownScheduleName { get; set; } = "";
    }
    
    public enum ReheatCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    [Description("Central air system terminal unit, single duct, variable volume, series powered in" +
        "duction unit (PIU), with reheat coil (hot water, electric, gas, or steam).")]
    [JsonObject("AirTerminal:SingleDuct:SeriesPIU:Reheat")]
    public class AirTerminal_SingleDuct_SeriesPIU_Reheat
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumPrimaryAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MinimumPrimaryAirFlowFraction { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SupplyAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SecondaryAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ReheatCoilAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ZoneMixerName { get; set; } = "";
        
[Description(@"Fan type must be Fan:SystemModel or Fan:ConstantVolume")]
[JsonProperty(@"Fan type must be Fan:SystemModel or Fan:ConstantVolume")]
public System.String FanName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ReheatCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ReheatCoilName { get; set; } = "";
        
[Description(@"Not used when reheat coil type is gas or electric")]
[JsonProperty(@"Not used when reheat coil type is gas or electric")]
public System.String MaximumHotWaterOrSteamFlowRate { get; set; } = "";
        
[Description(@"Not used when reheat coil type is gas or electric")]
[JsonProperty(@"Not used when reheat coil type is gas or electric")]
public System.Single MinimumHotWaterOrSteamFlowRate { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single ConvergenceTolerance { get; set; } = 0.001;
    }
    
    public enum ReheatCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    [Description("Central air system terminal unit, single duct, variable volume, parallel powered " +
        "induction unit (PIU), with reheat coil (hot water, electric, gas, or steam).")]
    [JsonObject("AirTerminal:SingleDuct:ParallelPIU:Reheat")]
    public class AirTerminal_SingleDuct_ParallelPIU_Reheat
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumPrimaryAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumSecondaryAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MinimumPrimaryAirFlowFraction { get; set; } = "";
        
[Description(@"the fraction of the primary air flow at which fan turns on")]
[JsonProperty(@"the fraction of the primary air flow at which fan turns on")]
public System.String FanOnFlowFraction { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SupplyAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SecondaryAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[Description(@"mixer outlet node")]
[JsonProperty(@"mixer outlet node")]
public System.String ReheatCoilAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ZoneMixerName { get; set; } = "";
        
[Description(@"Fan type must be Fan:SystemModel or Fan:ConstantVolume")]
[JsonProperty(@"Fan type must be Fan:SystemModel or Fan:ConstantVolume")]
public System.String FanName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ReheatCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ReheatCoilName { get; set; } = "";
        
[Description(@"Not used when reheat coil type is gas or electric")]
[JsonProperty(@"Not used when reheat coil type is gas or electric")]
public System.String MaximumHotWaterOrSteamFlowRate { get; set; } = "";
        
[Description(@"Not used when reheat coil type is gas or electric")]
[JsonProperty(@"Not used when reheat coil type is gas or electric")]
public System.Single MinimumHotWaterOrSteamFlowRate { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single ConvergenceTolerance { get; set; } = 0.001;
    }
    
    public enum ReheatCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    [Description("Central air system terminal unit, single duct, variable volume, induction unit wi" +
        "th hot water reheat coil and chilled water recool coil.")]
    [JsonObject("AirTerminal:SingleDuct:ConstantVolume:FourPipeInduction")]
    public class AirTerminal_SingleDuct_ConstantVolume_FourPipeInduction
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumTotalAirFlowRate { get; set; } = "";
        
[Description(@"ratio of induced air flow rate to primary air flow rate")]
[JsonProperty(@"ratio of induced air flow rate to primary air flow rate")]
public System.Single InductionRatio { get; set; } = 2.5;
        
[JsonProperty(@"")]
public System.String SupplyAirInletNodeName { get; set; } = "";
        
[Description(@"should be a zone exhaust node, also the heating coil inlet node")]
[JsonProperty(@"should be a zone exhaust node, also the heating coil inlet node")]
public System.String InducedAirInletNodeName { get; set; } = "";
        
[Description(@"should be a zone inlet node")]
[JsonProperty(@"should be a zone inlet node")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String HeatingCoilName { get; set; } = "";
        
[Description(@"Not used when heating coil type is gas or electric")]
[JsonProperty(@"Not used when heating coil type is gas or electric")]
public System.String MaximumHotWaterFlowRate { get; set; } = "";
        
[Description(@"Not used when heating coil type is gas or electric")]
[JsonProperty(@"Not used when heating coil type is gas or electric")]
public System.Single MinimumHotWaterFlowRate { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single HeatingConvergenceTolerance { get; set; } = 0.001;
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String CoolingCoilName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumColdWaterFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumColdWaterFlowRate { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single CoolingConvergenceTolerance { get; set; } = 0.001;
        
[JsonProperty(@"")]
public System.String ZoneMixerName { get; set; } = "";
    }
    
    public enum HeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 0,
    }
    
    public enum CoolingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 0,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 1,
    }
    
    [Description("Central air system terminal unit, single duct, constant volume, with heating and/" +
        "or cooling. Operates as two-pipe unit if heating or cooling water is omitted. He" +
        "ating and/or cooling can be scheduled off for dedicated ventilation.")]
    [JsonObject("AirTerminal:SingleDuct:ConstantVolume:FourPipeBeam")]
    public class AirTerminal_SingleDuct_ConstantVolume_FourPipeBeam
    {
        
[Description(@"Primary air is supplied by central air handling unit and must be on for heating or cooling. Schedule value > 0 means the primary air supply is available. If this field is blank, the primary air supply is always available.")]
[JsonProperty(@"Primary air is supplied by central air handling unit and must be on for heating or cooling. Schedule value > 0 means the primary air supply is available. If this field is blank, the primary air supply is always available.")]
public System.String PrimaryAirAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Cooling operation can be controlled separately using this availability schedule. Schedule value > 0 means beam cooling is available. If this field is blank, the beam cooling is always available (as long as primary air is also available).")]
[JsonProperty(@"Cooling operation can be controlled separately using this availability schedule. Schedule value > 0 means beam cooling is available. If this field is blank, the beam cooling is always available (as long as primary air is also available).")]
public System.String CoolingAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Heating operation can be controlled separately using this availability schedule. Schedule value > 0 means beam heating is available. If this field is blank, the beam heating is always available (as long as primary air is also available).")]
[JsonProperty(@"Heating operation can be controlled separately using this availability schedule. Schedule value > 0 means beam heating is available. If this field is blank, the beam heating is always available (as long as primary air is also available).")]
public System.String HeatingAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Name of the air system node for primary supply air entering the air distribution unit.")]
[JsonProperty(@"Name of the air system node for primary supply air entering the air distribution unit.")]
public System.String PrimaryAirInletNodeName { get; set; } = "";
        
[Description(@"Name of the air system node for primary supply air leaving the air distribution unit and entering the zone.")]
[JsonProperty(@"Name of the air system node for primary supply air leaving the air distribution unit and entering the zone.")]
public System.String PrimaryAirOutletNodeName { get; set; } = "";
        
[Description(@"Name of the plant system node for chilled water entering the beam. The two chilled water nodes can (only) be omitted to model a two-pipe heating only beam.")]
[JsonProperty(@"Name of the plant system node for chilled water entering the beam. The two chilled water nodes can (only) be omitted to model a two-pipe heating only beam.")]
public System.String ChilledWaterInletNodeName { get; set; } = "";
        
[Description(@"Name of the plant system node for chilled water leaving the beam.")]
[JsonProperty(@"Name of the plant system node for chilled water leaving the beam.")]
public System.String ChilledWaterOutletNodeName { get; set; } = "";
        
[Description(@"Name of the plant system node for hot water entering the beam. The two hot water nodes can (only) be omitted to model a two-pipe cooling-only beam.")]
[JsonProperty(@"Name of the plant system node for hot water entering the beam. The two hot water nodes can (only) be omitted to model a two-pipe cooling-only beam.")]
public System.String HotWaterInletNodeName { get; set; } = "";
        
[Description(@"Name of the plant system node for hot water leaving the beam.")]
[JsonProperty(@"Name of the plant system node for hot water leaving the beam.")]
public System.String HotWaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DesignPrimaryAirVolumeFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String DesignChilledWaterVolumeFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String DesignHotWaterVolumeFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Sum of the length of all the beam units in the zone represented by this terminal unit.")]
[JsonProperty(@"Sum of the length of all the beam units in the zone represented by this terminal unit.")]
public System.String ZoneTotalBeamLength { get; set; } = (System.String)Autosize;
        
[Description(@"Primary air supply flow rate normalized by beam length.")]
[JsonProperty(@"Primary air supply flow rate normalized by beam length.")]
public System.Single RatedPrimaryAirFlowRatePerBeamLength { get; set; } = 0.035;
        
[Description(@"Sensible cooling capacity per meter of beam length at the rating point.")]
[JsonProperty(@"Sensible cooling capacity per meter of beam length at the rating point.")]
public System.Single BeamRatedCoolingCapacityPerBeamLength { get; set; } = 600;
        
[Description(@"Difference in temperature between the zone air and the entering chilled water at the rating point.")]
[JsonProperty(@"Difference in temperature between the zone air and the entering chilled water at the rating point.")]
public System.Single BeamRatedCoolingRoomAirChilledWaterTemperatureDifference { get; set; } = 10;
        
[Description(@"The volume flow rate of chilled water per meter of beam length at the rating point.")]
[JsonProperty(@"The volume flow rate of chilled water per meter of beam length at the rating point.")]
public System.Single BeamRatedChilledWaterVolumeFlowRatePerBeamLength { get; set; } = 5E-05;
        
[Description(@"Adjusts beam cooling capacity when the temperature difference between entering water and zone air is different than at the rating point. Single independent variable is the ratio of the current temperature difference divided by the rating point temperature difference. This field is required when beam is connected to a chilled water plant.")]
[JsonProperty(@"Adjusts beam cooling capacity when the temperature difference between entering water and zone air is different than at the rating point. Single independent variable is the ratio of the current temperature difference divided by the rating point temperature difference. This field is required when beam is connected to a chilled water plant.")]
public System.String BeamCoolingCapacityTemperatureDifferenceModificationFactorCurveName { get; set; } = "";
        
[Description(@"Adjusts beam cooling capacity when the primary air supply flow rate is different than at the rating point. The single independent variable is the current normalized air flow rate divided by the normalized air flow rate at the rating point. This field is required when beam is connected to a chilled water plant.")]
[JsonProperty(@"Adjusts beam cooling capacity when the primary air supply flow rate is different than at the rating point. The single independent variable is the current normalized air flow rate divided by the normalized air flow rate at the rating point. This field is required when beam is connected to a chilled water plant.")]
public System.String BeamCoolingCapacityAirFlowModificationFactorCurveName { get; set; } = "";
        
[Description(@"Adjusts beam cooling capacity when the normalized chilled water flow rate is different than at the rating point. The single independent variable is the current normalized chilled water flow rate divided by the normalized chilled water flow rate at the rating point. This field is required when beam is connected to a chilled water plant.")]
[JsonProperty(@"Adjusts beam cooling capacity when the normalized chilled water flow rate is different than at the rating point. The single independent variable is the current normalized chilled water flow rate divided by the normalized chilled water flow rate at the rating point. This field is required when beam is connected to a chilled water plant.")]
public System.String BeamCoolingCapacityChilledWaterFlowModificationFactorCurveName { get; set; } = "";
        
[Description(@"Sensible heating capacity per meter of beam length at the rating point.")]
[JsonProperty(@"Sensible heating capacity per meter of beam length at the rating point.")]
public System.Single BeamRatedHeatingCapacityPerBeamLength { get; set; } = 1500;
        
[Description(@"Difference in temperature between the zone air and the entering hot water at the rating point.")]
[JsonProperty(@"Difference in temperature between the zone air and the entering hot water at the rating point.")]
public System.Single BeamRatedHeatingRoomAirHotWaterTemperatureDifference { get; set; } = 27.8;
        
[Description(@"The volume flow rate of hoy water per meter of beam length at the rating point.")]
[JsonProperty(@"The volume flow rate of hoy water per meter of beam length at the rating point.")]
public System.Single BeamRatedHotWaterVolumeFlowRatePerBeamLength { get; set; } = 5E-05;
        
[Description(@"Adjusts beam heating capacity when the temperature difference between entering water and zone air is different than at the rating point. Single independent variable is the ratio of the current temperature difference divided by the rating point temperature difference. This field is required when beam is connected to a hot water plant.")]
[JsonProperty(@"Adjusts beam heating capacity when the temperature difference between entering water and zone air is different than at the rating point. Single independent variable is the ratio of the current temperature difference divided by the rating point temperature difference. This field is required when beam is connected to a hot water plant.")]
public System.String BeamHeatingCapacityTemperatureDifferenceModificationFactorCurveName { get; set; } = "";
        
[Description(@"Adjusts beam heating capacity when the primary air supply flow rate is different than at the rating point. The single independent variable is the current normalized air flow rate divided by the normalized air flow rate at the rating point. This field is required when beam is connected to a hot water plant.")]
[JsonProperty(@"Adjusts beam heating capacity when the primary air supply flow rate is different than at the rating point. The single independent variable is the current normalized air flow rate divided by the normalized air flow rate at the rating point. This field is required when beam is connected to a hot water plant.")]
public System.String BeamHeatingCapacityAirFlowModificationFactorCurveName { get; set; } = "";
        
[Description(@"Adjusts beam heating capacity when the normalized hot water flow rate is different than at the rating point. The single independent variable is the current normalized hot water flow rate divided by the normalized hot water flow rate at the rating point. This field is required when beam is connected to a hot water plant.")]
[JsonProperty(@"Adjusts beam heating capacity when the normalized hot water flow rate is different than at the rating point. The single independent variable is the current normalized hot water flow rate divided by the normalized hot water flow rate at the rating point. This field is required when beam is connected to a hot water plant.")]
public System.String BeamHeatingCapacityHotWaterFlowModificationFactorCurveName { get; set; } = "";
    }
    
    [Description("Central air system terminal unit, single duct, constant volume, with cooled beam " +
        "(active or passive).")]
    [JsonObject("AirTerminal:SingleDuct:ConstantVolume:CooledBeam")]
    public class AirTerminal_SingleDuct_ConstantVolume_CooledBeam
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CooledBeamType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String SupplyAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SupplyAirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChilledWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ChilledWaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SupplyAirVolumetricFlowRate { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String MaximumTotalChilledWaterVolumetricFlowRate { get; set; } = (System.String)Autosize;
        
[Description(@"Number of individual beam units in the zone")]
[JsonProperty(@"Number of individual beam units in the zone")]
public System.String NumberOfBeams { get; set; } = (System.String)Autosize;
        
[Description(@"Length of an individual beam unit")]
[JsonProperty(@"Length of an individual beam unit")]
public System.String BeamLength { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single DesignInletWaterTemperature { get; set; } = 15;
        
[JsonProperty(@"")]
public System.Single DesignOutletWaterTemperature { get; set; } = 17;
        
[JsonProperty(@"")]
public System.Single CoilSurfaceAreaPerCoilLength { get; set; } = 5.422;
        
[JsonProperty(@"")]
public System.Single ModelParameterA { get; set; } = 15.3;
        
[JsonProperty(@"")]
public System.Single ModelParameterN { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single ModelParameterN { get; set; } = 0.84;
        
[JsonProperty(@"")]
public System.Single ModelParameterN { get; set; } = 0.12;
        
[Description(@"Free area of the coil in plan view per unit beam length")]
[JsonProperty(@"Free area of the coil in plan view per unit beam length")]
public System.Single ModelParameterA { get; set; } = 0.171;
        
[JsonProperty(@"")]
public System.Single ModelParameterK { get; set; } = 0.0057;
        
[JsonProperty(@"")]
public System.Single ModelParameterN { get; set; } = 0.4;
        
[JsonProperty(@"")]
public System.String CoefficientOfInductionKin { get; set; } = (System.String)Autocalculate;
        
[JsonProperty(@"")]
public System.Single LeavingPipeInsideDiameter { get; set; } = 0.0145;
    }
    
    public enum CooledBeamTypeType
    {
        
        [JsonProperty("Active")]
        Active = 0,
        
        [JsonProperty("Passive")]
        Passive = 1,
    }
    
    [Description(@"The mixer air terminal unit provides a means of supplying central system air to the air inlet or outlet side of a zoneHVAC equipment such as a four pipe fan coil unit. Normally the central air would be ventilation air from a dedicated outdoor air system (DOAS).")]
    [JsonObject("AirTerminal:SingleDuct:Mixer")]
    public class AirTerminal_SingleDuct_Mixer
    {
        
[Description(@"The type of ZoneHVAC equipment to which this terminal mixer will be connected.")]
[JsonProperty(@"The type of ZoneHVAC equipment to which this terminal mixer will be connected.")]
public YesNoDefault ZonehvacUnitObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"The name of ZoneHVAC equipment to which this terminal mixer will be connected.")]
[JsonProperty(@"The name of ZoneHVAC equipment to which this terminal mixer will be connected.")]
public System.String ZonehvacUnitObjectName { get; set; } = "";
        
[Description(@"This is the outlet air node name of the mixer. This will be the inlet air node name of the ZoneHVAC equipment if the connection type in the input field Mixer Connection Type below is InletSide, else this will be an inlet air node name of the conditioned zone if the connection type in the input field Mixer Connection Type below is SupplySide.")]
[JsonProperty(@"This is the outlet air node name of the mixer. This will be the inlet air node name of the ZoneHVAC equipment if the connection type in the input field Mixer Connection Type below is InletSide, else this will be an inlet air node name of the conditioned zone if the connection type in the input field Mixer Connection Type below is SupplySide.")]
public System.String MixerOutletNodeName { get; set; } = "";
        
[Description(@"The primary air (treated outdoor air) inlet node name of the mixer. This will be an outlet air node name of an AirLoopHVAC:ZoneSplitter or AirLoopHVAC:SupplyPlenum providing the connection to the DOA system.")]
[JsonProperty(@"The primary air (treated outdoor air) inlet node name of the mixer. This will be an outlet air node name of an AirLoopHVAC:ZoneSplitter or AirLoopHVAC:SupplyPlenum providing the connection to the DOA system.")]
public System.String MixerPrimaryAirInletNodeName { get; set; } = "";
        
[Description(@"The secondary air (recirculating air) inlet node name of the mixer. This will be the outlet air node name of the ZoneHVAC equipment if the connection type in the input field mixer Connection Type below is SupplySide, or else this will be an exhaust air node name of the conditioned zone if the connection type in the input field Mixer Connection Type below is InletSide.")]
[JsonProperty(@"The secondary air (recirculating air) inlet node name of the mixer. This will be the outlet air node name of the ZoneHVAC equipment if the connection type in the input field mixer Connection Type below is SupplySide, or else this will be an exhaust air node name of the conditioned zone if the connection type in the input field Mixer Connection Type below is InletSide.")]
public System.String MixerSecondaryAirInletNodeName { get; set; } = "";
        
[Description(@"This input field allows user to specify the mixer connection type. Valid choices are InletSide or SupplySide. This is a required input field. If the mixer connection type selected is InletSide, then the mixer is connected on the inlet side of the ZoneHVAC equipment, or else if the mixer connection type selected is SupplySide, then the mixer is connected at the outlet side of the ZoneHVAC equipment.")]
[JsonProperty(@"This input field allows user to specify the mixer connection type. Valid choices are InletSide or SupplySide. This is a required input field. If the mixer connection type selected is InletSide, then the mixer is connected on the inlet side of the ZoneHVAC equipment, or else if the mixer connection type selected is SupplySide, then the mixer is connected at the outlet side of the ZoneHVAC equipment.")]
public YesNoDefault MixerConnectionType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will adjust flow to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on the current number of occupants in the zone, as for demand controlled ventilation. If this field is blank, then the terminal unit will be controlled using the DesignSpecification:OutdoorAir objec referenced in the Sizing:Zone object.")]
[JsonProperty(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will adjust flow to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on the current number of occupants in the zone, as for demand controlled ventilation. If this field is blank, then the terminal unit will be controlled using the DesignSpecification:OutdoorAir objec referenced in the Sizing:Zone object.")]
public System.String DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        
[Description(@"CurrentOccupancy models demand controlled ventilation using the current number of people DesignOccupancy uses the total Number of People in the zone and is constant")]
[JsonProperty(@"CurrentOccupancy models demand controlled ventilation using the current number of people DesignOccupancy uses the total Number of People in the zone and is constant")]
public YesNoDefault PerPersonVentilationRateMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "CurrentOccupancy");
    }
    
    public enum ZonehvacUnitObjectTypeType
    {
        
        [JsonProperty("AirLoopHVAC:UnitarySystem")]
        AirLoopHVACUnitarySystem = 0,
        
        [JsonProperty("ZoneHVAC:FourPipeFanCoil")]
        ZoneHVACFourPipeFanCoil = 1,
        
        [JsonProperty("ZoneHVAC:PackagedTerminalAirConditioner")]
        ZoneHVACPackagedTerminalAirConditioner = 2,
        
        [JsonProperty("ZoneHVAC:PackagedTerminalHeatPump")]
        ZoneHVACPackagedTerminalHeatPump = 3,
        
        [JsonProperty("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")]
        ZoneHVACTerminalUnitVariableRefrigerantFlow = 4,
        
        [JsonProperty("ZoneHVAC:UnitVentilator")]
        ZoneHVACUnitVentilator = 5,
        
        [JsonProperty("ZoneHVAC:WaterToAirHeatPump")]
        ZoneHVACWaterToAirHeatPump = 6,
    }
    
    public enum MixerConnectionTypeType
    {
        
        [JsonProperty("InletSide")]
        InletSide = 0,
        
        [JsonProperty("SupplySide")]
        SupplySide = 1,
    }
    
    public enum PerPersonVentilationRateModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CurrentOccupancy")]
        CurrentOccupancy = 1,
        
        [JsonProperty("DesignOccupancy")]
        DesignOccupancy = 2,
    }
    
    [Description("Central air system terminal unit, dual duct, constant volume.")]
    [JsonObject("AirTerminal:DualDuct:ConstantVolume")]
    public class AirTerminal_DualDuct_ConstantVolume
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"The outlet node of the terminal unit. This is also the zone inlet node.")]
[JsonProperty(@"The outlet node of the terminal unit. This is also the zone inlet node.")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HotAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ColdAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumAirFlowRate { get; set; } = "";
    }
    
    [Description("Central air system terminal unit, dual duct, variable volume.")]
    [JsonObject("AirTerminal:DualDuct:VAV")]
    public class AirTerminal_DualDuct_VAV
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"The outlet node of the terminal unit. This is also the zone inlet node.")]
[JsonProperty(@"The outlet node of the terminal unit. This is also the zone inlet node.")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HotAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ColdAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumDamperAirFlowRate { get; set; } = "";
        
[Description(@"fraction of maximum air flow")]
[JsonProperty(@"fraction of maximum air flow")]
public System.Single ZoneMinimumAirFlowFraction { get; set; } = 0.2;
        
[Description(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will increase flow as needed to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on the current number of occupants in the zone. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate. If this field is blank, then the terminal unit will not be controlled for outdoor air flow.")]
[JsonProperty(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will increase flow as needed to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based on the current number of occupants in the zone. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate. If this field is blank, then the terminal unit will not be controlled for outdoor air flow.")]
public System.String DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        
[Description(@"This field adjusts the design minimum flow rate by multiplying it using this schedule of fraction values. This field is used with "Zone Minimum Air Flow Fraction". Schedule values are fractions 0.0 to 1.0. This field adjusts the minimum airflow turndown below the design minimum air flow and is intended for use with ASHRAE Standard 170. If this field is left blank, then the turndown minimum air flow fraction value is set to 1 and the VAV air terminal uses fixed fraction specified in the field "Zone Minimum Air Flow Fraction".")]
[JsonProperty(@"This field adjusts the design minimum flow rate by multiplying it using this schedule of fraction values. This field is used with "Zone Minimum Air Flow Fraction". Schedule values are fractions 0.0 to 1.0. This field adjusts the minimum airflow turndown below the design minimum air flow and is intended for use with ASHRAE Standard 170. If this field is left blank, then the turndown minimum air flow fraction value is set to 1 and the VAV air terminal uses fixed fraction specified in the field "Zone Minimum Air Flow Fraction".")]
public System.String MinimumAirFlowTurndownScheduleName { get; set; } = "";
    }
    
    [Description("Central air system terminal unit, dual duct, variable volume with special control" +
        "s. One VAV duct is controlled to supply ventilation air and the other VAV duct i" +
        "s controlled to meet the zone cooling load.")]
    [JsonObject("AirTerminal:DualDuct:VAV:OutdoorAir")]
    public class AirTerminal_DualDuct_VAV_OutdoorAir
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"The outlet node of the terminal unit. This is also the zone inlet node.")]
[JsonProperty(@"The outlet node of the terminal unit. This is also the zone inlet node.")]
public System.String AirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutdoorAirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String RecirculatedAirInletNodeName { get; set; } = "";
        
[Description(@"If autosized this is the sum of flow needed for cooling and maximum required outdoor air")]
[JsonProperty(@"If autosized this is the sum of flow needed for cooling and maximum required outdoor air")]
public System.String MaximumTerminalAirFlowRate { get; set; } = "";
        
[Description(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will increase flow as needed to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based mode selected in the next field. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate.")]
[JsonProperty(@"When the name of a DesignSpecification:OutdoorAir object is entered, the terminal unit will increase flow as needed to meet this outdoor air requirement. If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will be computed based mode selected in the next field. At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate.")]
public System.String DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        
[Description(@"CurrentOccupancy models demand controlled ventilation using the current number of people DesignOccupancy uses the total Number of People in the zone and is constant")]
[JsonProperty(@"CurrentOccupancy models demand controlled ventilation using the current number of people DesignOccupancy uses the total Number of People in the zone and is constant")]
public YesNoDefault PerPersonVentilationRateMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
    }
    
    public enum PerPersonVentilationRateModeType
    {
        
        [JsonProperty("CurrentOccupancy")]
        CurrentOccupancy = 0,
        
        [JsonProperty("DesignOccupancy")]
        DesignOccupancy = 1,
    }
    
    [Description("Central air system air distribution unit, serves as a wrapper for a specific type" +
        " of air terminal unit. This object is referenced in a ZoneHVAC:EquipmentList.")]
    [JsonObject("ZoneHVAC:AirDistributionUnit")]
    public class ZoneHVAC_AirDistributionUnit
    {
        
[JsonProperty(@"")]
public System.String AirDistributionUnitOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault AirTerminalObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String AirTerminalName { get; set; } = "";
        
[Description(@"fraction at system design Flow; leakage Flow constant, leakage fraction varies with variable system Flow Rate.")]
[JsonProperty(@"fraction at system design Flow; leakage Flow constant, leakage fraction varies with variable system Flow Rate.")]
public System.Single NominalUpstreamLeakageFraction { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single ConstantDownstreamLeakageFraction { get; set; } = 0;
        
[Description(@"This optional field is the name of a DesignSpecification:AirTerminal:Sizing object which specifies sizing adjustments to be made for this terminal unit.")]
[JsonProperty(@"This optional field is the name of a DesignSpecification:AirTerminal:Sizing object which specifies sizing adjustments to be made for this terminal unit.")]
public System.String DesignSpecificationAirTerminalSizingObjectName { get; set; } = "";
    }
    
    public enum AirTerminalObjectTypeType
    {
        
        [JsonProperty("AirTerminal:DualDuct:ConstantVolume")]
        AirTerminalDualDuctConstantVolume = 0,
        
        [JsonProperty("AirTerminal:DualDuct:VAV")]
        AirTerminalDualDuctVAV = 1,
        
        [JsonProperty("AirTerminal:DualDuct:VAV:OutdoorAir")]
        AirTerminalDualDuctVAVOutdoorAir = 2,
        
        [JsonProperty("AirTerminal:SingleDuct:ConstantVolume:CooledBeam")]
        AirTerminalSingleDuctConstantVolumeCooledBeam = 3,
        
        [JsonProperty("AirTerminal:SingleDuct:ConstantVolume:FourPipeBeam")]
        AirTerminalSingleDuctConstantVolumeFourPipeBeam = 4,
        
        [JsonProperty("AirTerminal:SingleDuct:ConstantVolume:FourPipeInduction")]
        AirTerminalSingleDuctConstantVolumeFourPipeInduction = 5,
        
        [JsonProperty("AirTerminal:SingleDuct:ConstantVolume:NoReheat")]
        AirTerminalSingleDuctConstantVolumeNoReheat = 6,
        
        [JsonProperty("AirTerminal:SingleDuct:ConstantVolume:Reheat")]
        AirTerminalSingleDuctConstantVolumeReheat = 7,
        
        [JsonProperty("AirTerminal:SingleDuct:Mixer")]
        AirTerminalSingleDuctMixer = 8,
        
        [JsonProperty("AirTerminal:SingleDuct:ParallelPIU:Reheat")]
        AirTerminalSingleDuctParallelPIUReheat = 9,
        
        [JsonProperty("AirTerminal:SingleDuct:SeriesPIU:Reheat")]
        AirTerminalSingleDuctSeriesPIUReheat = 10,
        
        [JsonProperty("AirTerminal:SingleDuct:UserDefined")]
        AirTerminalSingleDuctUserDefined = 11,
        
        [JsonProperty("AirTerminal:SingleDuct:VAV:HeatAndCool:NoReheat")]
        AirTerminalSingleDuctVAVHeatAndCoolNoReheat = 12,
        
        [JsonProperty("AirTerminal:SingleDuct:VAV:HeatAndCool:Reheat")]
        AirTerminalSingleDuctVAVHeatAndCoolReheat = 13,
        
        [JsonProperty("AirTerminal:SingleDuct:VAV:NoReheat")]
        AirTerminalSingleDuctVAVNoReheat = 14,
        
        [JsonProperty("AirTerminal:SingleDuct:VAV:Reheat")]
        AirTerminalSingleDuctVAVReheat = 15,
        
        [JsonProperty("AirTerminal:SingleDuct:VAV:Reheat:VariableSpeedFan")]
        AirTerminalSingleDuctVAVReheatVariableSpeedFan = 16,
    }
}
namespace EnergyPlus.ZoneHVACControlsandThermostats
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("Specifies zone relative humidity setpoint schedules for humidifying and dehumidif" +
        "ying.")]
    [JsonObject("ZoneControl:Humidistat")]
    public class ZoneControl_Humidistat
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"hourly schedule values should be in Relative Humidity (percent)")]
[JsonProperty(@"hourly schedule values should be in Relative Humidity (percent)")]
public System.String HumidifyingRelativeHumiditySetpointScheduleName { get; set; } = "";
        
[Description(@"hourly schedule values should be in Relative Humidity (percent)")]
[JsonProperty(@"hourly schedule values should be in Relative Humidity (percent)")]
public System.String DehumidifyingRelativeHumiditySetpointScheduleName { get; set; } = "";
    }
    
    [Description("Define the Thermostat settings for a zone or list of zones. If you use a ZoneList" +
        " in the Zone or ZoneList name field then this definition applies to all the zone" +
        "s in the ZoneList.")]
    [JsonObject("ZoneControl:Thermostat")]
    public class ZoneControl_Thermostat
    {
        
[JsonProperty(@"")]
public System.String ZoneOrZonelistName { get; set; } = "";
        
[Description(@"This schedule contains appropriate control types for thermostat. Control types are integers: 0 - Uncontrolled (floating, no thermostat), 1 = ThermostatSetpoint:SingleHeating, 2 = ThermostatSetpoint:SingleCooling, 3 = ThermostatSetpoint:SingleHeatingOrCooling, 4 = ThermostatSetpoint:DualSetpoint")]
[JsonProperty(@"This schedule contains appropriate control types for thermostat. Control types are integers: 0 - Uncontrolled (floating, no thermostat), 1 = ThermostatSetpoint:SingleHeating, 2 = ThermostatSetpoint:SingleCooling, 3 = ThermostatSetpoint:SingleHeatingOrCooling, 4 = ThermostatSetpoint:DualSetpoint")]
public System.String ControlTypeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControlObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Control names are names of individual control objects (e.g. ThermostatSetpoint:SingleHeating) Schedule values in these objects list actual setpoint temperatures for the control types")]
[JsonProperty(@"Control names are names of individual control objects (e.g. ThermostatSetpoint:SingleHeating) Schedule values in these objects list actual setpoint temperatures for the control types")]
public System.String ControlName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControlObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Control names are names of individual control objects (e.g. ThermostatSetpoint:SingleHeating) Schedule values in these objects list actual setpoint temperatures for the control types")]
[JsonProperty(@"Control names are names of individual control objects (e.g. ThermostatSetpoint:SingleHeating) Schedule values in these objects list actual setpoint temperatures for the control types")]
public System.String ControlName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControlObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Control names are names of individual control objects (e.g. ThermostatSetpoint:SingleHeating) Schedule values in these objects list actual setpoint temperatures for the control types")]
[JsonProperty(@"Control names are names of individual control objects (e.g. ThermostatSetpoint:SingleHeating) Schedule values in these objects list actual setpoint temperatures for the control types")]
public System.String ControlName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ControlObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Control names are names of individual control objects (e.g. ThermostatSetpoint:SingleHeating) Schedule values in these objects list actual setpoint temperatures for the control types")]
[JsonProperty(@"Control names are names of individual control objects (e.g. ThermostatSetpoint:SingleHeating) Schedule values in these objects list actual setpoint temperatures for the control types")]
public System.String ControlName { get; set; } = "";
        
[Description(@"This optional choice field provides a temperature difference between cut-out temperature and setpoint. The difference is used to adjust to heating or cooling setpoint based on control types.")]
[JsonProperty(@"This optional choice field provides a temperature difference between cut-out temperature and setpoint. The difference is used to adjust to heating or cooling setpoint based on control types.")]
public System.Single TemperatureDifferenceBetweenCutoutAndSetpoint { get; set; } = 0;
    }
    
    public enum ControlObjectTypeType
    {
        
        [JsonProperty("ThermostatSetpoint:DualSetpoint")]
        ThermostatSetpointDualSetpoint = 0,
        
        [JsonProperty("ThermostatSetpoint:SingleCooling")]
        ThermostatSetpointSingleCooling = 1,
        
        [JsonProperty("ThermostatSetpoint:SingleHeating")]
        ThermostatSetpointSingleHeating = 2,
        
        [JsonProperty("ThermostatSetpoint:SingleHeatingOrCooling")]
        ThermostatSetpointSingleHeatingOrCooling = 3,
    }
    
    public enum ControlObjectTypeType
    {
        
        [JsonProperty("ThermostatSetpoint:DualSetpoint")]
        ThermostatSetpointDualSetpoint = 0,
        
        [JsonProperty("ThermostatSetpoint:SingleCooling")]
        ThermostatSetpointSingleCooling = 1,
        
        [JsonProperty("ThermostatSetpoint:SingleHeating")]
        ThermostatSetpointSingleHeating = 2,
        
        [JsonProperty("ThermostatSetpoint:SingleHeatingOrCooling")]
        ThermostatSetpointSingleHeatingOrCooling = 3,
    }
    
    public enum ControlObjectTypeType
    {
        
        [JsonProperty("ThermostatSetpoint:DualSetpoint")]
        ThermostatSetpointDualSetpoint = 0,
        
        [JsonProperty("ThermostatSetpoint:SingleCooling")]
        ThermostatSetpointSingleCooling = 1,
        
        [JsonProperty("ThermostatSetpoint:SingleHeating")]
        ThermostatSetpointSingleHeating = 2,
        
        [JsonProperty("ThermostatSetpoint:SingleHeatingOrCooling")]
        ThermostatSetpointSingleHeatingOrCooling = 3,
    }
    
    public enum ControlObjectTypeType
    {
        
        [JsonProperty("ThermostatSetpoint:DualSetpoint")]
        ThermostatSetpointDualSetpoint = 0,
        
        [JsonProperty("ThermostatSetpoint:SingleCooling")]
        ThermostatSetpointSingleCooling = 1,
        
        [JsonProperty("ThermostatSetpoint:SingleHeating")]
        ThermostatSetpointSingleHeating = 2,
        
        [JsonProperty("ThermostatSetpoint:SingleHeatingOrCooling")]
        ThermostatSetpointSingleHeatingOrCooling = 3,
    }
    
    [Description("This object can be used with the ZoneList option on a thermostat or with one of t" +
        "he zones on that list (but you won\'t be able to use the object list to pick only" +
        " one of those zones. Thermostat names are <Zone Name> <global Thermostat name> i" +
        "nternally.")]
    [JsonObject("ZoneControl:Thermostat:OperativeTemperature")]
    public class ZoneControl_Thermostat_OperativeTemperature
    {
        
[Description(@"Enter the name of a ZoneControl:Thermostat object. This object modifies a ZoneControl:Thermostat object to add a radiative fraction.")]
[JsonProperty(@"Enter the name of a ZoneControl:Thermostat object. This object modifies a ZoneControl:Thermostat object to add a radiative fraction.")]
public System.String ThermostatName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault RadiativeFractionInputMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single FixedRadiativeFraction { get; set; } = ;
        
[Description(@"Schedule values of 0.0 indicate no operative temperature control")]
[JsonProperty(@"Schedule values of 0.0 indicate no operative temperature control")]
public System.String RadiativeFractionScheduleName { get; set; } = "";
        
[Description(@"the cooling setpoint temperature schedule of the referenced thermostat will be adjusted based on the selected adaptive comfort model type")]
[JsonProperty(@"the cooling setpoint temperature schedule of the referenced thermostat will be adjusted based on the selected adaptive comfort model type")]
public YesNoDefault AdaptiveComfortModelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
    }
    
    public enum RadiativeFractionInputModeType
    {
        
        [JsonProperty("Constant")]
        Constant = 0,
        
        [JsonProperty("Scheduled")]
        Scheduled = 1,
    }
    
    public enum AdaptiveComfortModelTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("AdaptiveASH5580PercentUpperLine")]
        AdaptiveASHPercentUpperLine = 1,
        
        [JsonProperty("AdaptiveASH5590PercentUpperLine")]
        AdaptiveASHPercentUpperLine = 2,
        
        [JsonProperty("AdaptiveASH55CentralLine")]
        AdaptiveASHCentralLine = 3,
        
        [JsonProperty("AdaptiveCEN15251CategoryIIIUpperLine")]
        AdaptiveCENCategoryIIIUpperLine = 4,
        
        [JsonProperty("AdaptiveCEN15251CategoryIIUpperLine")]
        AdaptiveCENCategoryIIUpperLine = 5,
        
        [JsonProperty("AdaptiveCEN15251CategoryIUpperLine")]
        AdaptiveCENCategoryIUpperLine = 6,
        
        [JsonProperty("AdaptiveCEN15251CentralLine")]
        AdaptiveCENCentralLine = 7,
        
        [JsonProperty("None")]
        None = 8,
    }
    
    [Description("If you use a ZoneList in the Zone or ZoneList name field then this definition app" +
        "lies to all the zones in the ZoneList.")]
    [JsonObject("ZoneControl:Thermostat:ThermalComfort")]
    public class ZoneControl_Thermostat_ThermalComfort
    {
        
[JsonProperty(@"")]
public System.String ZoneOrZonelistName { get; set; } = "";
        
[Description(@"The method used to calculate thermal comfort dry-bulb temperature setpoint for multiple people objects in a zone")]
[JsonProperty(@"The method used to calculate thermal comfort dry-bulb temperature setpoint for multiple people objects in a zone")]
public YesNoDefault AveragingMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "PeopleAverage");
        
[Description(@"Used only when Averaging Method = SpecificObject in the previous field.")]
[JsonProperty(@"Used only when Averaging Method = SpecificObject in the previous field.")]
public System.String SpecificPeopleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumDryBulbTemperatureSetpoint { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single MaximumDryBulbTemperatureSetpoint { get; set; } = 50;
        
[Description(@"The Thermal Comfort Control Type Schedule contains values that are appropriate control types. Thermal Comfort Control types are integers: 0 - Uncontrolled (floating), 1 = ThermostatSetpoint:ThermalComfort:Fanger:SingleHeating 2 = ThermostatSetpoint:ThermalComfort:Fanger:SingleCooling 3 = ThermostatSetpoint:ThermalComfort:Fanger:SingleHeatingOrCooling 4 = ThermostatSetpoint:ThermalComfort:Fanger:DualSetpoint")]
[JsonProperty(@"The Thermal Comfort Control Type Schedule contains values that are appropriate control types. Thermal Comfort Control types are integers: 0 - Uncontrolled (floating), 1 = ThermostatSetpoint:ThermalComfort:Fanger:SingleHeating 2 = ThermostatSetpoint:ThermalComfort:Fanger:SingleCooling 3 = ThermostatSetpoint:ThermalComfort:Fanger:SingleHeatingOrCooling 4 = ThermostatSetpoint:ThermalComfort:Fanger:DualSetpoint")]
public System.String ThermalComfortControlTypeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ThermalComfortControlObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Control type names are names for individual control type objects. Schedule values in these objects list actual setpoint temperatures for the control types")]
[JsonProperty(@"Control type names are names for individual control type objects. Schedule values in these objects list actual setpoint temperatures for the control types")]
public System.String ThermalComfortControlName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ThermalComfortControlObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Control Type names are names for individual control type objects. Schedule values in these objects list actual setpoint temperatures for the control types")]
[JsonProperty(@"Control Type names are names for individual control type objects. Schedule values in these objects list actual setpoint temperatures for the control types")]
public System.String ThermalComfortControlName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ThermalComfortControlObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Control type names are names for individual control type objects. Schedule values in these objects list actual setpoint temperatures for the control types")]
[JsonProperty(@"Control type names are names for individual control type objects. Schedule values in these objects list actual setpoint temperatures for the control types")]
public System.String ThermalComfortControlName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ThermalComfortControlObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Control type names are names for individual control type objects. Schedule values in these objects list actual setpoint temperatures for the control types")]
[JsonProperty(@"Control type names are names for individual control type objects. Schedule values in these objects list actual setpoint temperatures for the control types")]
public System.String ThermalComfortControlName { get; set; } = "";
    }
    
    public enum AveragingMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ObjectAverage")]
        ObjectAverage = 1,
        
        [JsonProperty("PeopleAverage")]
        PeopleAverage = 2,
        
        [JsonProperty("SpecificObject")]
        SpecificObject = 3,
    }
    
    public enum ThermalComfortControlObjectTypeType
    {
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:DualSetpoint")]
        ThermostatSetpointThermalComfortFangerDualSetpoint = 0,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleCooling")]
        ThermostatSetpointThermalComfortFangerSingleCooling = 1,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeating")]
        ThermostatSetpointThermalComfortFangerSingleHeating = 2,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeatingOrCooling")]
        ThermostatSetpointThermalComfortFangerSingleHeatingOrCooling = 3,
    }
    
    public enum ThermalComfortControlObjectTypeType
    {
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:DualSetpoint")]
        ThermostatSetpointThermalComfortFangerDualSetpoint = 0,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleCooling")]
        ThermostatSetpointThermalComfortFangerSingleCooling = 1,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeating")]
        ThermostatSetpointThermalComfortFangerSingleHeating = 2,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeatingOrCooling")]
        ThermostatSetpointThermalComfortFangerSingleHeatingOrCooling = 3,
    }
    
    public enum ThermalComfortControlObjectTypeType
    {
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:DualSetpoint")]
        ThermostatSetpointThermalComfortFangerDualSetpoint = 0,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleCooling")]
        ThermostatSetpointThermalComfortFangerSingleCooling = 1,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeating")]
        ThermostatSetpointThermalComfortFangerSingleHeating = 2,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeatingOrCooling")]
        ThermostatSetpointThermalComfortFangerSingleHeatingOrCooling = 3,
    }
    
    public enum ThermalComfortControlObjectTypeType
    {
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:DualSetpoint")]
        ThermostatSetpointThermalComfortFangerDualSetpoint = 0,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleCooling")]
        ThermostatSetpointThermalComfortFangerSingleCooling = 1,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeating")]
        ThermostatSetpointThermalComfortFangerSingleHeating = 2,
        
        [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeatingOrCooling")]
        ThermostatSetpointThermalComfortFangerSingleHeatingOrCooling = 3,
    }
    
    [Description("This object modifies a ZoneControl:Thermostat object to effect temperature contro" +
        "l based on zone air humidity conditions.")]
    [JsonObject("ZoneControl:Thermostat:TemperatureAndHumidity")]
    public class ZoneControl_Thermostat_TemperatureAndHumidity
    {
        
[Description(@"Enter the name of a ZoneControl:Thermostat object whose operation is to be modified to effect temperature control based on zone air humidity conditions. If the ZoneControl: Thermostat object references a ZoneList, simply enter the name of the ZoneControl:Thermostat object and this temperature and humidity thermostat control will be applied to all zones in the ZoneList. If the ZoneControl:Thermostat object references a ZoneList but it is desired that only a single zone within the ZoneList be controlled based on temperature and humidity control, then the name to be put here is <Zone Name> <Thermostat Name> where the Thermostat Name is the the name of the ZoneControl:Thermostat object.")]
[JsonProperty(@"Enter the name of a ZoneControl:Thermostat object whose operation is to be modified to effect temperature control based on zone air humidity conditions. If the ZoneControl: Thermostat object references a ZoneList, simply enter the name of the ZoneControl:Thermostat object and this temperature and humidity thermostat control will be applied to all zones in the ZoneList. If the ZoneControl:Thermostat object references a ZoneList but it is desired that only a single zone within the ZoneList be controlled based on temperature and humidity control, then the name to be put here is <Zone Name> <Thermostat Name> where the Thermostat Name is the the name of the ZoneControl:Thermostat object.")]
public System.String ThermostatName { get; set; } = "";
        
[Description(@"Schedule values should be in Relative Humidity (percent)")]
[JsonProperty(@"Schedule values should be in Relative Humidity (percent)")]
public System.String DehumidifyingRelativeHumiditySetpointScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault DehumidificationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Overcool");
        
[JsonProperty(@"")]
public YesNoDefault OvercoolRangeInputMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Constant");
        
[Description(@"Maximum Overcool temperature range for cooling setpoint reduction. Used with Dehumidification Control Type = Overcool. A value of 0.0 indicates no zone temperature overcooling will be provided to gain additional dehumidification.")]
[JsonProperty(@"Maximum Overcool temperature range for cooling setpoint reduction. Used with Dehumidification Control Type = Overcool. A value of 0.0 indicates no zone temperature overcooling will be provided to gain additional dehumidification.")]
public System.Single OvercoolConstantRange { get; set; } = 1.7;
        
[Description(@"Schedule values of 0.0 indicates no zone temperature overcooling will be provided to gain additional dehumidification. Schedule values should be >= 0 and <= 3 (deltaC).")]
[JsonProperty(@"Schedule values of 0.0 indicates no zone temperature overcooling will be provided to gain additional dehumidification. Schedule values should be >= 0 and <= 3 (deltaC).")]
public System.String OvercoolRangeScheduleName { get; set; } = "";
        
[Description(@"The value of this input field is used to adjust the cooling setpoint temperature (established by the associated ZoneControl:Thermostat object) downward based on the difference between the zone air relative humidity level and the dehumidifying relative humidity setpoint.")]
[JsonProperty(@"The value of this input field is used to adjust the cooling setpoint temperature (established by the associated ZoneControl:Thermostat object) downward based on the difference between the zone air relative humidity level and the dehumidifying relative humidity setpoint.")]
public System.Single OvercoolControlRatio { get; set; } = 3.6;
    }
    
    public enum DehumidificationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("Overcool")]
        Overcool = 2,
    }
    
    public enum OvercoolRangeInputMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Constant")]
        Constant = 1,
        
        [JsonProperty("Scheduled")]
        Scheduled = 2,
    }
    
    [Description("Used for a heating only thermostat. The setpoint can be scheduled and varied thro" +
        "ughout the simulation but only heating is allowed with this control type.")]
    [JsonObject("ThermostatSetpoint:SingleHeating")]
    public class ThermostatSetpoint_SingleHeating
    {
        
[JsonProperty(@"")]
public System.String SetpointTemperatureScheduleName { get; set; } = "";
    }
    
    [Description("Used for a cooling only thermostat. The setpoint can be scheduled and varied thro" +
        "ughout the simulation but only cooling is allowed.")]
    [JsonObject("ThermostatSetpoint:SingleCooling")]
    public class ThermostatSetpoint_SingleCooling
    {
        
[JsonProperty(@"")]
public System.String SetpointTemperatureScheduleName { get; set; } = "";
    }
    
    [Description("Used for a heating and cooling thermostat with a single setpoint. The setpoint ca" +
        "n be scheduled and varied throughout the simulation for both heating and cooling" +
        ".")]
    [JsonObject("ThermostatSetpoint:SingleHeatingOrCooling")]
    public class ThermostatSetpoint_SingleHeatingOrCooling
    {
        
[JsonProperty(@"")]
public System.String SetpointTemperatureScheduleName { get; set; } = "";
    }
    
    [Description("Used for a heating and cooling thermostat with dual setpoints. The setpoints can " +
        "be scheduled and varied throughout the simulation for both heating and cooling.")]
    [JsonObject("ThermostatSetpoint:DualSetpoint")]
    public class ThermostatSetpoint_DualSetpoint
    {
        
[JsonProperty(@"")]
public System.String HeatingSetpointTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoolingSetpointTemperatureScheduleName { get; set; } = "";
    }
    
    [Description("Used for heating only thermal comfort control. The PMV setpoint can be scheduled " +
        "and varied throughout the simulation but only heating is allowed with this contr" +
        "ol type.")]
    [JsonObject("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeating")]
    public class ThermostatSetpoint_ThermalComfort_Fanger_SingleHeating
    {
        
[Description(@"Schedule values should be Predicted Mean Vote (PMV)")]
[JsonProperty(@"Schedule values should be Predicted Mean Vote (PMV)")]
public System.String FangerThermalComfortScheduleName { get; set; } = "";
    }
    
    [Description("Used for cooling only thermal comfort control. The PMV setpoint can be scheduled " +
        "and varied throughout the simulation but only cooling is allowed with this contr" +
        "ol type.")]
    [JsonObject("ThermostatSetpoint:ThermalComfort:Fanger:SingleCooling")]
    public class ThermostatSetpoint_ThermalComfort_Fanger_SingleCooling
    {
        
[Description(@"Schedule values should be Predicted Mean Vote (PMV)")]
[JsonProperty(@"Schedule values should be Predicted Mean Vote (PMV)")]
public System.String FangerThermalComfortScheduleName { get; set; } = "";
    }
    
    [Description("Used for heating and cooling thermal comfort control with a single setpoint. The " +
        "PMV setpoint can be scheduled and varied throughout the simulation for both heat" +
        "ing and cooling.")]
    [JsonObject("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeatingOrCooling")]
    public class ThermostatSetpoint_ThermalComfort_Fanger_SingleHeatingOrCooling
    {
        
[Description(@"Schedule values should be Predicted Mean Vote (PMV)")]
[JsonProperty(@"Schedule values should be Predicted Mean Vote (PMV)")]
public System.String FangerThermalComfortScheduleName { get; set; } = "";
    }
    
    [Description("Used for heating and cooling thermal comfort control with dual setpoints. The PMV" +
        " setpoints can be scheduled and varied throughout the simulation for both heatin" +
        "g and cooling.")]
    [JsonObject("ThermostatSetpoint:ThermalComfort:Fanger:DualSetpoint")]
    public class ThermostatSetpoint_ThermalComfort_Fanger_DualSetpoint
    {
        
[Description(@"Schedule values should be Predicted Mean Vote (PMV)")]
[JsonProperty(@"Schedule values should be Predicted Mean Vote (PMV)")]
public System.String FangerThermalComfortHeatingScheduleName { get; set; } = "";
        
[Description(@"Schedule values should be Predicted Mean Vote (PMV)")]
[JsonProperty(@"Schedule values should be Predicted Mean Vote (PMV)")]
public System.String FangerThermalComfortCoolingScheduleName { get; set; } = "";
    }
    
    [Description("Define the Thermostat StagedDualSetpoint settings for a zone or list of zones. If" +
        " you use a ZoneList in the Zone or ZoneList name field then this definition appl" +
        "ies to all the zones in the ZoneList.")]
    [JsonObject("ZoneControl:Thermostat:StagedDualSetpoint")]
    public class ZoneControl_Thermostat_StagedDualSetpoint
    {
        
[JsonProperty(@"")]
public System.String ZoneOrZonelistName { get; set; } = "";
        
[Description(@"Enter the number of the following sets of data for heating temperature offset")]
[JsonProperty(@"Enter the number of the following sets of data for heating temperature offset")]
public System.Single NumberOfHeatingStages { get; set; } = ;
        
[JsonProperty(@"")]
public System.String HeatingTemperatureSetpointScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single HeatingThrottlingTemperatureRange { get; set; } = 1.1;
        
[Description(@"The heating temperature offset is used to determine heating stage number for multi stage equipment. When the temperature difference of the heating setpoint and the controlled zone temperature at previous time step is less than Stage 1 value and greater than Stage 2 value, the stage number is 1.")]
[JsonProperty(@"The heating temperature offset is used to determine heating stage number for multi stage equipment. When the temperature difference of the heating setpoint and the controlled zone temperature at previous time step is less than Stage 1 value and greater than Stage 2 value, the stage number is 1.")]
public System.Single StageHeatingTemperatureOffset { get; set; } = ;
        
[Description(@"The heating temperature offset is used to determine heating stage number for multi stage equipment. When the temperature difference of the heating setpoint and the controlled zone temperature at previous time step is less than Stage 2 value and greater than Stage 3 value, the stage number is 2. The value of this field has to be less the value at the previous field.")]
[JsonProperty(@"The heating temperature offset is used to determine heating stage number for multi stage equipment. When the temperature difference of the heating setpoint and the controlled zone temperature at previous time step is less than Stage 2 value and greater than Stage 3 value, the stage number is 2. The value of this field has to be less the value at the previous field.")]
public System.Single StageHeatingTemperatureOffset { get; set; } = ;
        
[Description(@"The heating temperature offset is used to determine heating stage number for multi stage equipment. When the temperature difference of the heating setpoint and the controlled zone temperature at previous time step is less than Stage 3 value and greater than Stage 4 value, the stage number is 3. The value of this field has to be less the value at the previous field.")]
[JsonProperty(@"The heating temperature offset is used to determine heating stage number for multi stage equipment. When the temperature difference of the heating setpoint and the controlled zone temperature at previous time step is less than Stage 3 value and greater than Stage 4 value, the stage number is 3. The value of this field has to be less the value at the previous field.")]
public System.Single StageHeatingTemperatureOffset { get; set; } = ;
        
[Description(@"The heating temperature offset is used to determine heating stage number for multi stage equipment. When the temperature difference of the heating setpoint and the controlled zone temperature at previous time step is less than Stage 4 value, the stage number is 4. The value of this field has to be less the value at the previous field.")]
[JsonProperty(@"The heating temperature offset is used to determine heating stage number for multi stage equipment. When the temperature difference of the heating setpoint and the controlled zone temperature at previous time step is less than Stage 4 value, the stage number is 4. The value of this field has to be less the value at the previous field.")]
public System.Single StageHeatingTemperatureOffset { get; set; } = ;
        
[Description(@"Enter the number of the following sets of data for cooling temperature offset")]
[JsonProperty(@"Enter the number of the following sets of data for cooling temperature offset")]
public System.Single NumberOfCoolingStages { get; set; } = ;
        
[JsonProperty(@"")]
public System.String CoolingTemperatureSetpointBaseScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single CoolingThrottlingTemperatureRange { get; set; } = 1.1;
        
[Description(@"The cooling temperature offset is used to determine cooling stage number for multi stage equipment. When the temperature difference of the cooling setpoint and the controlled zone temperature at previous time step is greater than Stage 1 value and less than Stage 2 value, the stage number is 1.")]
[JsonProperty(@"The cooling temperature offset is used to determine cooling stage number for multi stage equipment. When the temperature difference of the cooling setpoint and the controlled zone temperature at previous time step is greater than Stage 1 value and less than Stage 2 value, the stage number is 1.")]
public System.Single StageCoolingTemperatureOffset { get; set; } = ;
        
[Description(@"The cooling temperature offset is used to determine cooling stage number for multi stage equipment. When the temperature difference of the cooling setpoint and the controlled zone temperature at previous time step is greater than Stage 2 value and less than Stage 3 value, the stage number is 2. The value of this field has to be greater than the value at the previous field.")]
[JsonProperty(@"The cooling temperature offset is used to determine cooling stage number for multi stage equipment. When the temperature difference of the cooling setpoint and the controlled zone temperature at previous time step is greater than Stage 2 value and less than Stage 3 value, the stage number is 2. The value of this field has to be greater than the value at the previous field.")]
public System.Single StageCoolingTemperatureOffset { get; set; } = ;
        
[Description(@"The cooling temperature offset is used to determine cooling stage number for multi stage equipment. When the temperature difference of the cooling setpoint and the controlled zone temperature at previous time step is greater than Stage 3 value and less than Stage 4 value, the stage number is 3. The value of this field has to be greater than the value at the previous field.")]
[JsonProperty(@"The cooling temperature offset is used to determine cooling stage number for multi stage equipment. When the temperature difference of the cooling setpoint and the controlled zone temperature at previous time step is greater than Stage 3 value and less than Stage 4 value, the stage number is 3. The value of this field has to be greater than the value at the previous field.")]
public System.Single StageCoolingTemperatureOffset { get; set; } = ;
        
[Description(@"The cooling temperature offset is used to determine cooling stage number for multi stage equipment. When the temperature difference of the cooling setpoint and the controlled zone temperature at previous time step is greater than Stage 4 value, the stage number is 4. The value of this field has to be greater than the value at the previous field.")]
[JsonProperty(@"The cooling temperature offset is used to determine cooling stage number for multi stage equipment. When the temperature difference of the cooling setpoint and the controlled zone temperature at previous time step is greater than Stage 4 value, the stage number is 4. The value of this field has to be greater than the value at the previous field.")]
public System.Single StageCoolingTemperatureOffset { get; set; } = ;
    }
    
    [Description("Used to control a zone to a specified indoor level of CO2 or generic contaminants" +
        ", or to specify minimum CO2 concentration schedule name for a zone.")]
    [JsonObject("ZoneControl:ContaminantController")]
    public class ZoneControl_ContaminantController
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Availability schedule name for CO2 controller. Schedule value > 0 means the CO2 controller is enabled. If this field is blank, then CO2 controller is always enabled.")]
[JsonProperty(@"Availability schedule name for CO2 controller. Schedule value > 0 means the CO2 controller is enabled. If this field is blank, then CO2 controller is always enabled.")]
public System.String CarbonDioxideControlAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Schedule values should be carbon dioxide concentration in parts per million (ppm)")]
[JsonProperty(@"Schedule values should be carbon dioxide concentration in parts per million (ppm)")]
public System.String CarbonDioxideSetpointScheduleName { get; set; } = "";
        
[Description(@"Schedule values should be carbon dioxide concentration in parts per million (ppm) This field is used when the field System Outdoor Air Method = ProportionalControlBasedOnOccupancySchedule or ProportionalControlBasedOnDesignOccupancy, or ProportionalControlBasedOnDesignOARate in Controller:MechanicalVentilation")]
[JsonProperty(@"Schedule values should be carbon dioxide concentration in parts per million (ppm) This field is used when the field System Outdoor Air Method = ProportionalControlBasedOnOccupancySchedule or ProportionalControlBasedOnDesignOccupancy, or ProportionalControlBasedOnDesignOARate in Controller:MechanicalVentilation")]
public System.String MinimumCarbonDioxideConcentrationScheduleName { get; set; } = "";
        
[Description(@"Schedule values should be carbon dioxide concentration in parts per million (ppm) This field is used when the field System Outdoor Air Method = ProportionalControlBasedOnOccupancySchedule or ProportionalControlBasedOnDesignOccupancy or ProportionalControlBasedOnDesignOARate.")]
[JsonProperty(@"Schedule values should be carbon dioxide concentration in parts per million (ppm) This field is used when the field System Outdoor Air Method = ProportionalControlBasedOnOccupancySchedule or ProportionalControlBasedOnDesignOccupancy or ProportionalControlBasedOnDesignOARate.")]
public System.String MaximumCarbonDioxideConcentrationScheduleName { get; set; } = "";
        
[Description(@"Availability schedule name for generic contaminant controller. Schedule value > 0 means the generic contaminant controller is enabled. If this field is blank, then generic contaminant controller is always enabled.")]
[JsonProperty(@"Availability schedule name for generic contaminant controller. Schedule value > 0 means the generic contaminant controller is enabled. If this field is blank, then generic contaminant controller is always enabled.")]
public System.String GenericContaminantControlAvailabilityScheduleName { get; set; } = "";
        
[Description(@"Schedule values should be generic contaminant concentration in parts per million (ppm) This field is used when the field System Outdoor Air Method = IndoorAirQualityProcedureGenericContaminant in Controller:MechanicalVentilation")]
[JsonProperty(@"Schedule values should be generic contaminant concentration in parts per million (ppm) This field is used when the field System Outdoor Air Method = IndoorAirQualityProcedureGenericContaminant in Controller:MechanicalVentilation")]
public System.String GenericContaminantSetpointScheduleName { get; set; } = "";
    }
}
namespace EnergyPlus.ZoneHVACEquipmentConnections
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"List equipment in simulation order. Note that an ZoneHVAC:AirDistributionUnit object must be listed in this statement if there is a forced air system serving the zone from the air loop. Equipment is simulated in the order specified by Zone Equipment Cooling Sequence and Zone Equipment Heating or No-Load Sequence, depending on the thermostat request. For equipment of similar type, assign sequence 1 to the first system intended to serve that type of load. For situations where one or more equipment types has limited capacity or limited control, order the sequence so that the most controllable piece of equipment runs last. For example, with a dedicated outdoor air system (DOAS), the air terminal for the DOAS should be assigned Heating Sequence = 1 and Cooling Sequence = 1. Any other equipment should be assigned sequence 2 or higher so that it will see the net load after the DOAS air is added to the zone.")]
    [JsonObject("ZoneHVAC:EquipmentList")]
    public class ZoneHVAC_EquipmentList
    {
        
[JsonProperty(@"")]
public YesNoDefault LoadDistributionScheme { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SequentialLoad");
        
[JsonProperty(@"")]
public System.String Equipment { get; set; } = "";
    }
    
    public enum LoadDistributionSchemeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SequentialLoad")]
        SequentialLoad = 1,
        
        [JsonProperty("SequentialUniformPLR")]
        SequentialUniformPLR = 2,
        
        [JsonProperty("UniformLoad")]
        UniformLoad = 3,
        
        [JsonProperty("UniformPLR")]
        UniformPLR = 4,
    }
    
    [Description("Specifies the HVAC equipment connections for a zone. Node names are specified for" +
        " the zone air node, air inlet nodes, air exhaust nodes, and the air return node." +
        " A zone equipment list is referenced which lists all HVAC equipment connected to" +
        " the zone.")]
    [JsonObject("ZoneHVAC:EquipmentConnections")]
    public class ZoneHVAC_EquipmentConnections
    {
        
[JsonProperty(@"")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Enter the name of a ZoneHVAC:EquipmentList object.")]
[JsonProperty(@"Enter the name of a ZoneHVAC:EquipmentList object.")]
public System.String ZoneConditioningEquipmentListName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ZoneAirInletNodeOrNodelistName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ZoneAirExhaustNodeOrNodelistName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ZoneAirNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ZoneReturnAirNodeOrNodelistName { get; set; } = "";
        
[Description(@"This schedule is multiplied times the base return air flow rate. If this field is left blank, the schedule defaults to 1.0 at all times.")]
[JsonProperty(@"This schedule is multiplied times the base return air flow rate. If this field is left blank, the schedule defaults to 1.0 at all times.")]
public System.String ZoneReturnAirNodeFlowRateFractionScheduleName { get; set; } = "";
        
[Description(@"The optional basis node(s) used to calculate the base return air flow rate for the first return air node in this zone. The return air flow rate is the sum of the flow rates at the basis node(s) multiplied by the Zone Return Air Flow Rate Fraction Schedule. If this  field is blank, then the base return air flow rate is the total supply inlet flow rate to the zone less the total exhaust node flow rate from the zone.")]
[JsonProperty(@"The optional basis node(s) used to calculate the base return air flow rate for the first return air node in this zone. The return air flow rate is the sum of the flow rates at the basis node(s) multiplied by the Zone Return Air Flow Rate Fraction Schedule. If this  field is blank, then the base return air flow rate is the total supply inlet flow rate to the zone less the total exhaust node flow rate from the zone.")]
public System.String ZoneReturnAirNodeFlowRateBasisNodeOrNodelistName { get; set; } = "";
    }
}
namespace EnergyPlus.ZoneHVACForcedAirUnits
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description(@"Ideal system used to calculate loads without modeling a full HVAC system. All that is required for the ideal system are zone controls, zone equipment configurations, and the ideal loads system component. This component can be thought of as an ideal unit that mixes zone air with the specified amount of outdoor air and then adds or removes heat and moisture at 100% efficiency in order to meet the specified controls. Energy use is reported as DistrictHeating and DistrictCooling.")]
    [JsonObject("ZoneHVAC:IdealLoadsAirSystem")]
    public class ZoneHVAC_IdealLoadsAirSystem
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Must match a zone air inlet node name.")]
[JsonProperty(@"Must match a zone air inlet node name.")]
public System.String ZoneSupplyAirNodeName { get; set; } = "";
        
[Description(@"Should match a zone air exhaust node name. This field is optional, but is required if this this object is used with other forced air equipment.")]
[JsonProperty(@"Should match a zone air exhaust node name. This field is optional, but is required if this this object is used with other forced air equipment.")]
public System.String ZoneExhaustAirNodeName { get; set; } = "";
        
[Description(@"This field is only required when the Ideal Loads Air System is connected to an AirloopHVAC:ZoneReturnPlenum, otherwise leave this field blank. When connected to a plenum the return plenum Outlet Node Name (or Induced Air Outlet Node Name when connecting multiple ideal loads air sytems) is entered here. The two ideal loads air system node name fields described above, the Zone Supply Air Node Name and the Zone Exhaust Air Node Name must also be entered. The Zone Supply Air Node Name must match a zone inlet air node name for the zone where this Ideal Loads Air System is connected. The Zone Exhaust Air Node Name must match an inlet air node name of an AirloopHVAC:ReturnAirPlenum object.")]
[JsonProperty(@"This field is only required when the Ideal Loads Air System is connected to an AirloopHVAC:ZoneReturnPlenum, otherwise leave this field blank. When connected to a plenum the return plenum Outlet Node Name (or Induced Air Outlet Node Name when connecting multiple ideal loads air sytems) is entered here. The two ideal loads air system node name fields described above, the Zone Supply Air Node Name and the Zone Exhaust Air Node Name must also be entered. The Zone Supply Air Node Name must match a zone inlet air node name for the zone where this Ideal Loads Air System is connected. The Zone Exhaust Air Node Name must match an inlet air node name of an AirloopHVAC:ReturnAirPlenum object.")]
public System.String SystemInletAirNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MaximumHeatingSupplyAirTemperature { get; set; } = 50;
        
[JsonProperty(@"")]
public System.Single MinimumCoolingSupplyAirTemperature { get; set; } = 13;
        
[JsonProperty(@"")]
public System.Single MaximumHeatingSupplyAirHumidityRatio { get; set; } = 0.0156;
        
[JsonProperty(@"")]
public System.Single MinimumCoolingSupplyAirHumidityRatio { get; set; } = 0.0077;
        
[JsonProperty(@"")]
public YesNoDefault HeatingLimit { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoLimit");
        
[Description(@"This field is ignored if Heating Limit = NoLimit If this field is blank, there is no limit.")]
[JsonProperty(@"This field is ignored if Heating Limit = NoLimit If this field is blank, there is no limit.")]
public System.String MaximumHeatingAirFlowRate { get; set; } = "";
        
[Description(@"This field is ignored if Heating Limit = NoLimit If this field is blank, there is no limit.")]
[JsonProperty(@"This field is ignored if Heating Limit = NoLimit If this field is blank, there is no limit.")]
public System.String MaximumSensibleHeatingCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CoolingLimit { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoLimit");
        
[Description(@"This field is ignored if Cooling Limit = NoLimit This field is required if Outdoor Air Economizer Type is anything other than NoEconomizer.")]
[JsonProperty(@"This field is ignored if Cooling Limit = NoLimit This field is required if Outdoor Air Economizer Type is anything other than NoEconomizer.")]
public System.String MaximumCoolingAirFlowRate { get; set; } = "";
        
[Description(@"This field is ignored if Cooling Limit = NoLimit")]
[JsonProperty(@"This field is ignored if Cooling Limit = NoLimit")]
public System.String MaximumTotalCoolingCapacity { get; set; } = "";
        
[Description(@"If blank, heating is always available.")]
[JsonProperty(@"If blank, heating is always available.")]
public System.String HeatingAvailabilityScheduleName { get; set; } = "";
        
[Description(@"If blank, cooling is always available.")]
[JsonProperty(@"If blank, cooling is always available.")]
public System.String CoolingAvailabilityScheduleName { get; set; } = "";
        
[Description(@"ConstantSensibleHeatRatio means that the ideal loads system will be controlled to meet the sensible cooling load, and the latent cooling rate will be computed using a constant sensible heat ratio (SHR) Humidistat means that there is a ZoneControl:Humidistat for this zone and the ideal loads system will attempt to satisfy the humidistat. None means that there is no dehumidification. ConstantSupplyHumidityRatio means that during cooling the supply air will always be at the Minimum Cooling Supply Humidity Ratio.")]
[JsonProperty(@"ConstantSensibleHeatRatio means that the ideal loads system will be controlled to meet the sensible cooling load, and the latent cooling rate will be computed using a constant sensible heat ratio (SHR) Humidistat means that there is a ZoneControl:Humidistat for this zone and the ideal loads system will attempt to satisfy the humidistat. None means that there is no dehumidification. ConstantSupplyHumidityRatio means that during cooling the supply air will always be at the Minimum Cooling Supply Humidity Ratio.")]
public YesNoDefault DehumidificationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ConstantSensibleHeatRatio");
        
[Description(@"This field is applicable only when Dehumidification Control Type is ConstantSensibleHeatRatio")]
[JsonProperty(@"This field is applicable only when Dehumidification Control Type is ConstantSensibleHeatRatio")]
public System.Single CoolingSensibleHeatRatio { get; set; } = 0.7;
        
[Description(@"None means that there is no humidification. Humidistat means that there is a ZoneControl:Humidistat for this zone and the ideal loads system will attempt to satisfy the humidistat. ConstantSupplyHumidityRatio means that during heating the supply air will always be at the Maximum Heating Supply Humidity Ratio.")]
[JsonProperty(@"None means that there is no humidification. Humidistat means that there is a ZoneControl:Humidistat for this zone and the ideal loads system will attempt to satisfy the humidistat. ConstantSupplyHumidityRatio means that during heating the supply air will always be at the Maximum Heating Supply Humidity Ratio.")]
public YesNoDefault HumidificationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"When the name of a DesignSpecification:OutdoorAir object is entered, the minimum outdoor air flow rate will be computed using these specifications. The outdoor air flow rate will also be affected by the next two fields. If this field is blank, there will be no outdoor air and the remaining fields will be ignored.")]
[JsonProperty(@"When the name of a DesignSpecification:OutdoorAir object is entered, the minimum outdoor air flow rate will be computed using these specifications. The outdoor air flow rate will also be affected by the next two fields. If this field is blank, there will be no outdoor air and the remaining fields will be ignored.")]
public System.String DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        
[Description(@"This field is required if the system provides outdoor air Enter the name of an outdoor air node. This node name is also specified in an OutdoorAir:Node or OutdoorAir:NodeList object.")]
[JsonProperty(@"This field is required if the system provides outdoor air Enter the name of an outdoor air node. This node name is also specified in an OutdoorAir:Node or OutdoorAir:NodeList object.")]
public System.String OutdoorAirInletNodeName { get; set; } = "";
        
[Description(@"This field controls how the minimum outdoor air flow rate is calculated. None means that design occupancy will be used to compute the minimum outdoor air flow rate OccupancySchedule means that current occupancy level will be used. CO2Setpoint means that the design occupancy will be used to compute the minimum outdoor air flow rate and the outdoor air flow rate may be increased if necessary to maintain the indoor air carbon dioxide setpoint defined in a ZoneControl:ContaminantController object.")]
[JsonProperty(@"This field controls how the minimum outdoor air flow rate is calculated. None means that design occupancy will be used to compute the minimum outdoor air flow rate OccupancySchedule means that current occupancy level will be used. CO2Setpoint means that the design occupancy will be used to compute the minimum outdoor air flow rate and the outdoor air flow rate may be increased if necessary to maintain the indoor air carbon dioxide setpoint defined in a ZoneControl:ContaminantController object.")]
public YesNoDefault DemandControlledVentilationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"DifferentialDryBulb and DifferentialEnthalpy will increase the outdoor air flow rate when there is a cooling load and the outdoor air temperature or enthalpy is below the zone exhaust air temperature or enthalpy.")]
[JsonProperty(@"DifferentialDryBulb and DifferentialEnthalpy will increase the outdoor air flow rate when there is a cooling load and the outdoor air temperature or enthalpy is below the zone exhaust air temperature or enthalpy.")]
public YesNoDefault OutdoorAirEconomizerType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoEconomizer");
        
[JsonProperty(@"")]
public YesNoDefault HeatRecoveryType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[JsonProperty(@"")]
public System.Single SensibleHeatRecoveryEffectiveness { get; set; } = 0.7;
        
[Description(@"Applicable only if Heat Recovery Type is Enthalpy.")]
[JsonProperty(@"Applicable only if Heat Recovery Type is Enthalpy.")]
public System.Single LatentHeatRecoveryEffectiveness { get; set; } = 0.65;
        
[Description(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
public System.String DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
    }
    
    public enum HeatingLimitType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LimitCapacity")]
        LimitCapacity = 1,
        
        [JsonProperty("LimitFlowRate")]
        LimitFlowRate = 2,
        
        [JsonProperty("LimitFlowRateAndCapacity")]
        LimitFlowRateAndCapacity = 3,
        
        [JsonProperty("NoLimit")]
        NoLimit = 4,
    }
    
    public enum CoolingLimitType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("LimitCapacity")]
        LimitCapacity = 1,
        
        [JsonProperty("LimitFlowRate")]
        LimitFlowRate = 2,
        
        [JsonProperty("LimitFlowRateAndCapacity")]
        LimitFlowRateAndCapacity = 3,
        
        [JsonProperty("NoLimit")]
        NoLimit = 4,
    }
    
    public enum DehumidificationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantSensibleHeatRatio")]
        ConstantSensibleHeatRatio = 1,
        
        [JsonProperty("ConstantSupplyHumidityRatio")]
        ConstantSupplyHumidityRatio = 2,
        
        [JsonProperty("Humidistat")]
        Humidistat = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum HumidificationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConstantSupplyHumidityRatio")]
        ConstantSupplyHumidityRatio = 1,
        
        [JsonProperty("Humidistat")]
        Humidistat = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum DemandControlledVentilationTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CO2Setpoint")]
        COSetpoint = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("OccupancySchedule")]
        OccupancySchedule = 3,
    }
    
    public enum OutdoorAirEconomizerTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("DifferentialDryBulb")]
        DifferentialDryBulb = 1,
        
        [JsonProperty("DifferentialEnthalpy")]
        DifferentialEnthalpy = 2,
        
        [JsonProperty("NoEconomizer")]
        NoEconomizer = 3,
    }
    
    public enum HeatRecoveryTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Enthalpy")]
        Enthalpy = 1,
        
        [JsonProperty("None")]
        None = 2,
        
        [JsonProperty("Sensible")]
        Sensible = 3,
    }
    
    [Description("Four pipe fan coil system. Forced-convection hydronic heating-cooling unit with s" +
        "upply fan, hot water heating coil, chilled water cooling coil, and fixed-positio" +
        "n outdoor air mixer.")]
    [JsonObject("ZoneHVAC:FourPipeFanCoil")]
    public class ZoneHVAC_FourPipeFanCoil
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CapacityControlMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String MaximumSupplyAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single LowSpeedSupplyAirFlowRatio { get; set; } = 0.33;
        
[Description(@"Medium Speed Supply Air Flow Ratio should be greater than Low Speed Supply Air Flow Ratio")]
[JsonProperty(@"Medium Speed Supply Air Flow Ratio should be greater than Low Speed Supply Air Flow Ratio")]
public System.Single MediumSpeedSupplyAirFlowRatio { get; set; } = 0.66;
        
[JsonProperty(@"")]
public System.String MaximumOutdoorAirFlowRate { get; set; } = "";
        
[Description(@"Value of schedule multiplies maximum outdoor air flow rate")]
[JsonProperty(@"Value of schedule multiplies maximum outdoor air flow rate")]
public System.String OutdoorAirScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Currently only one type OutdoorAir:Mixer object is available. This field should be left blank if the FanCoil is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object.")]
[JsonProperty(@"Currently only one type OutdoorAir:Mixer object is available. This field should be left blank if the FanCoil is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object.")]
public YesNoDefault OutdoorAirMixerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"If this field is blank, the OutdoorAir:Mixer is not used. This optional field specifies the name of the OutdoorAir:Mixer object. When used, this name needs to match name of the OutdoorAir:Mixer object. This field should be left blank if the FanCoil is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object.")]
[JsonProperty(@"If this field is blank, the OutdoorAir:Mixer is not used. This optional field specifies the name of the OutdoorAir:Mixer object. When used, this name needs to match name of the OutdoorAir:Mixer object. This field should be left blank if the FanCoil is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object.")]
public System.String OutdoorAirMixerName { get; set; } = "";
        
[Description(@"Fan type must be according to capacity control method (see I/O) For ConstantFanVariableFlow a Fan:OnOff or Fan:ConstantVolume is valid. For CyclingFan a Fan:OnOff is valid. For VariableFanVariableFlow or VariableFanConstantFlow a Fan:VariableVolume is valid. For ASHRAE90.1 a Fan:OnOff or Fan:VariableVolume is valid. Fan:SystemModel is valid for all capacity control methods. The fan's inlet node should be the same as the outdoor air mixer's mixed air node.")]
[JsonProperty(@"Fan type must be according to capacity control method (see I/O) For ConstantFanVariableFlow a Fan:OnOff or Fan:ConstantVolume is valid. For CyclingFan a Fan:OnOff is valid. For VariableFanVariableFlow or VariableFanConstantFlow a Fan:VariableVolume is valid. For ASHRAE90.1 a Fan:OnOff or Fan:VariableVolume is valid. Fan:SystemModel is valid for all capacity control methods. The fan's inlet node should be the same as the outdoor air mixer's mixed air node.")]
public YesNoDefault SupplyAirFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String SupplyAirFanName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String CoolingCoilName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumColdWaterFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumColdWaterFlowRate { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single CoolingConvergenceTolerance { get; set; } = 0.001;
        
[JsonProperty(@"")]
public YesNoDefault HeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String HeatingCoilName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumHotWaterFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single MinimumHotWaterFlowRate { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single HeatingConvergenceTolerance { get; set; } = 0.001;
        
[Description(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
public System.String AvailabilityManagerListName { get; set; } = "";
        
[Description(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
public System.String DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
        
[Description(@"Enter the name of a schedule that controls fan operation. Schedule Name values of 0 denote cycling fan operation (fan cycles with cooling coil). Schedule values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this field is left blank. This input field is currently used with MultiStageFan capacity control method")]
[JsonProperty(@"Enter the name of a schedule that controls fan operation. Schedule Name values of 0 denote cycling fan operation (fan cycles with cooling coil). Schedule values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this field is left blank. This input field is currently used with MultiStageFan capacity control method")]
public System.String SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        
[Description(@"For Capacity Control Method = ASHRAE90VariableFan, enter the minimum air temperature in cooling mode. Leave this field blank or enter 0 to control to the zone load per ASHRAE 90.1. In this case, a zone sizing simulation is required.")]
[JsonProperty(@"For Capacity Control Method = ASHRAE90VariableFan, enter the minimum air temperature in cooling mode. Leave this field blank or enter 0 to control to the zone load per ASHRAE 90.1. In this case, a zone sizing simulation is required.")]
public System.String MinimumSupplyAirTemperatureInCoolingMode { get; set; } = (System.String)Autosize;
        
[Description(@"For Capacity Control Method = ASHRAE90VariableFan, enter the maximum air temperature in heating mode. Leave this field blank or enter 0 to control to the zone load per ASHRAE 90.1. In this case, a zone sizing simulation is required.")]
[JsonProperty(@"For Capacity Control Method = ASHRAE90VariableFan, enter the maximum air temperature in heating mode. Leave this field blank or enter 0 to control to the zone load per ASHRAE 90.1. In this case, a zone sizing simulation is required.")]
public System.String MaximumSupplyAirTemperatureInHeatingMode { get; set; } = (System.String)Autosize;
    }
    
    public enum CapacityControlMethodType
    {
        
        [JsonProperty("ASHRAE90VariableFan")]
        ASHRAEVariableFan = 0,
        
        [JsonProperty("ConstantFanVariableFlow")]
        ConstantFanVariableFlow = 1,
        
        [JsonProperty("CyclingFan")]
        CyclingFan = 2,
        
        [JsonProperty("MultiSpeedFan")]
        MultiSpeedFan = 3,
        
        [JsonProperty("VariableFanConstantFlow")]
        VariableFanConstantFlow = 4,
        
        [JsonProperty("VariableFanVariableFlow")]
        VariableFanVariableFlow = 5,
    }
    
    public enum OutdoorAirMixerObjectTypeType
    {
        
        [JsonProperty("OutdoorAir:Mixer")]
        OutdoorAirMixer = 0,
    }
    
    public enum SupplyAirFanObjectTypeType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 2,
        
        [JsonProperty("Fan:VariableVolume")]
        FanVariableVolume = 3,
    }
    
    public enum CoolingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 0,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 1,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatExchangerAssisted")]
        CoilSystemCoolingWaterHeatExchangerAssisted = 2,
    }
    
    public enum HeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 1,
    }
    
    [Description("Window air conditioner. Forced-convection cooling-only unit with supply fan, dire" +
        "ct expansion (DX) cooling coil, and fixed-position outdoor air mixer.")]
    [JsonObject("ZoneHVAC:WindowAirConditioner")]
    public class ZoneHVAC_WindowAirConditioner
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumSupplyAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumOutdoorAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"currently only one OutdoorAir:Mixer object type is available.")]
[JsonProperty(@"currently only one OutdoorAir:Mixer object type is available.")]
public YesNoDefault OutdoorAirMixerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String OutdoorAirMixerName { get; set; } = "";
        
[Description(@"Fan:ConstantVolume only works when continuous fan operation is used the entire simulation (all supply air fan operating mode schedule values are greater than 0). If any fan operating mode schedule values are 0 a Fan:SystemModel or Fan:OnOff object must be used.")]
[JsonProperty(@"Fan:ConstantVolume only works when continuous fan operation is used the entire simulation (all supply air fan operating mode schedule values are greater than 0). If any fan operating mode schedule values are 0 a Fan:SystemModel or Fan:OnOff object must be used.")]
public YesNoDefault SupplyAirFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Fan type Fan:ConstantVolume is used with continuous fan and fan type Fan:OnOff is used with cycling Fan.")]
[JsonProperty(@"Fan type Fan:ConstantVolume is used with continuous fan and fan type Fan:OnOff is used with cycling Fan.")]
public System.String SupplyAirFanName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String DxCoolingCoilName { get; set; } = "";
        
[Description(@"Enter the name of a schedule that controls fan operation. Schedule Name values of 0 denote cycling fan operation (fan cycles with cooling coil). Schedule values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this field is left blank.")]
[JsonProperty(@"Enter the name of a schedule that controls fan operation. Schedule Name values of 0 denote cycling fan operation (fan cycles with cooling coil). Schedule values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this field is left blank.")]
public System.String SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.Single CoolingConvergenceTolerance { get; set; } = 0.001;
        
[Description(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
public System.String AvailabilityManagerListName { get; set; } = "";
        
[Description(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
public System.String DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
    }
    
    public enum OutdoorAirMixerObjectTypeType
    {
        
        [JsonProperty("OutdoorAir:Mixer")]
        OutdoorAirMixer = 0,
    }
    
    public enum SupplyAirFanObjectTypeType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 2,
    }
    
    public enum CoolingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 1,
        
        [JsonProperty("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
        CoilSystemCoolingDXHeatExchangerAssisted = 2,
    }
    
    public enum FanPlacementType
    {
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 0,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 1,
    }
    
    [Description("Packaged terminal air conditioner (PTAC). Forced-convection heating-cooling unit " +
        "with supply fan, direct expansion (DX) cooling coil, heating coil (gas, electric" +
        ", hot water, or steam) and fixed-position outdoor air mixer.")]
    [JsonObject("ZoneHVAC:PackagedTerminalAirConditioner")]
    public class ZoneHVAC_PackagedTerminalAirConditioner
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Schedule values of 0 denote the unit is off.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Schedule values of 0 denote the unit is off.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Air inlet node for the PTAC must be a zone air exhaust Node.")]
[JsonProperty(@"Air inlet node for the PTAC must be a zone air exhaust Node.")]
public System.String AirInletNodeName { get; set; } = "";
        
[Description(@"Air outlet node for the PTAC must be a zone air inlet node.")]
[JsonProperty(@"Air outlet node for the PTAC must be a zone air inlet node.")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Currently only one OutdoorAir:Mixer object type is available. This field should be left blank if the PTAC is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object.")]
[JsonProperty(@"Currently only one OutdoorAir:Mixer object type is available. This field should be left blank if the PTAC is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object.")]
public YesNoDefault OutdoorAirMixerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"If this field is blank, the OutdoorAir:Mixer is not used. This optional field specifies the name of the OutdoorAir:Mixer object. When used, this name needs to match name of the OutdoorAir:Mixer object. This field should be left blank if the PTAC is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object.")]
[JsonProperty(@"If this field is blank, the OutdoorAir:Mixer is not used. This optional field specifies the name of the OutdoorAir:Mixer object. When used, this name needs to match name of the OutdoorAir:Mixer object. This field should be left blank if the PTAC is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object.")]
public System.String OutdoorAirMixerName { get; set; } = "";
        
[Description(@"Must be less than or equal to fan size.")]
[JsonProperty(@"Must be less than or equal to fan size.")]
public System.String CoolingSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Must be less than or equal to fan size.")]
[JsonProperty(@"Must be less than or equal to fan size.")]
public System.String HeatingSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Must be less than or equal to fan size. Only used when supply air fan operating mode schedule values specify continuous fan (schedule values greater than 0 specify continuous fan operation). This air flow rate is used when no heating or cooling is required and the cooling or heating coil is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
[JsonProperty(@"Must be less than or equal to fan size. Only used when supply air fan operating mode schedule values specify continuous fan (schedule values greater than 0 specify continuous fan operation). This air flow rate is used when no heating or cooling is required and the cooling or heating coil is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
public System.String NoLoadSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Must be less than or equal to supply air flow rate during cooling operation. This field is set to zero flow when the PTAC is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
[JsonProperty(@"Must be less than or equal to supply air flow rate during cooling operation. This field is set to zero flow when the PTAC is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
public System.String CoolingOutdoorAirFlowRate { get; set; } = "";
        
[Description(@"Must be less than or equal to supply air flow rate during heating operation. This field is set to zero flow when the PTAC is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
[JsonProperty(@"Must be less than or equal to supply air flow rate during heating operation. This field is set to zero flow when the PTAC is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
public System.String HeatingOutdoorAirFlowRate { get; set; } = "";
        
[Description(@"Only used when supply air fan operating mode schedule values specify continuous fan (schedule values greater than 0 specify continuous fan operation). This air flow rate is used when no heating or cooling is required and the cooling or heating coil is off. If this field is left blank or zero, the outdoor air flow rate from the previous on cycle (either cooling or heating) is used. This field is set to zero flow when the PTAC is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
[JsonProperty(@"Only used when supply air fan operating mode schedule values specify continuous fan (schedule values greater than 0 specify continuous fan operation). This air flow rate is used when no heating or cooling is required and the cooling or heating coil is off. If this field is left blank or zero, the outdoor air flow rate from the previous on cycle (either cooling or heating) is used. This field is set to zero flow when the PTAC is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
public System.String NoLoadOutdoorAirFlowRate { get; set; } = "";
        
[Description(@"Fan:ConstantVolume only works when continuous fan operation is used the entire simulation (all supply air fan operating mode schedule values are greater than 0). If any fan operating mode schedule values are 0 a Fan:SystemModel or Fan:OnOff object must be used.")]
[JsonProperty(@"Fan:ConstantVolume only works when continuous fan operation is used the entire simulation (all supply air fan operating mode schedule values are greater than 0). If any fan operating mode schedule values are 0 a Fan:SystemModel or Fan:OnOff object must be used.")]
public YesNoDefault SupplyAirFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match in the fan object.")]
[JsonProperty(@"Needs to match in the fan object.")]
public System.String SupplyAirFanName { get; set; } = "";
        
[Description(@"Select the type of heating coil.")]
[JsonProperty(@"Select the type of heating coil.")]
public YesNoDefault HeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match in the heating coil object.")]
[JsonProperty(@"Needs to match in the heating coil object.")]
public System.String HeatingCoilName { get; set; } = "";
        
[Description(@"Select the type of Cooling Coil. Only works with Coil:Cooling:DX:SingleSpeed or CoilSystem:Cooling:DX:HeatExchangerAssisted or Coil:Cooling:DX:VariableSpeed.")]
[JsonProperty(@"Select the type of Cooling Coil. Only works with Coil:Cooling:DX:SingleSpeed or CoilSystem:Cooling:DX:HeatExchangerAssisted or Coil:Cooling:DX:VariableSpeed.")]
public YesNoDefault CoolingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match a DX cooling coil object.")]
[JsonProperty(@"Needs to match a DX cooling coil object.")]
public System.String CoolingCoilName { get; set; } = "";
        
[Description(@"Select fan placement as either blow through or draw through.")]
[JsonProperty(@"Select fan placement as either blow through or draw through.")]
public YesNoDefault FanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DrawThrough");
        
[Description(@"Enter the name of a schedule that controls fan operation. Schedule Name values of 0 denote cycling fan operation (fan cycles with cooling or heating coil). Schedule Name values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation).")]
[JsonProperty(@"Enter the name of a schedule that controls fan operation. Schedule Name values of 0 denote cycling fan operation (fan cycles with cooling or heating coil). Schedule Name values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation).")]
public System.String SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        
[Description(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
public System.String AvailabilityManagerListName { get; set; } = "";
        
[Description(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
public System.String DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CapacityControlMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"For Capacity Control Method = SingleZoneVAV, enter the minimum air temperature limit for reduced fan speed.")]
[JsonProperty(@"For Capacity Control Method = SingleZoneVAV, enter the minimum air temperature limit for reduced fan speed.")]
public System.String MinimumSupplyAirTemperatureInCoolingMode { get; set; } = (System.String)Autosize;
        
[Description(@"For Capacity Control Method = SingleZoneVAV, enter the maximum air temperature limit for reduced fan speed.")]
[JsonProperty(@"For Capacity Control Method = SingleZoneVAV, enter the maximum air temperature limit for reduced fan speed.")]
public System.String MaximumSupplyAirTemperatureInHeatingMode { get; set; } = (System.String)Autosize;
    }
    
    public enum OutdoorAirMixerObjectTypeType
    {
        
        [JsonProperty("OutdoorAir:Mixer")]
        OutdoorAirMixer = 0,
    }
    
    public enum SupplyAirFanObjectTypeType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 2,
    }
    
    public enum HeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum CoolingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 1,
        
        [JsonProperty("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
        CoilSystemCoolingDXHeatExchangerAssisted = 2,
    }
    
    public enum FanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum CapacityControlMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("SingleZoneVAV")]
        SingleZoneVAV = 2,
    }
    
    [Description(@"Packaged terminal heat pump (PTHP). Forced-convection heating-cooling unit with supply fan, direct expansion (DX) cooling coil, DX heating coil (air-to-air heat pump), supplemental heating coil (gas, electric, hot water, or steam), and fixed-position outdoor air mixer.")]
    [JsonObject("ZoneHVAC:PackagedTerminalHeatPump")]
    public class ZoneHVAC_PackagedTerminalHeatPump
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Schedule values of 0 denote the unit is off.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Schedule values of 0 denote the unit is off.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Air inlet node for the PTHP must be a zone air exhaust node.")]
[JsonProperty(@"Air inlet node for the PTHP must be a zone air exhaust node.")]
public System.String AirInletNodeName { get; set; } = "";
        
[Description(@"Air outlet node for the PTHP must be a zone air inlet node.")]
[JsonProperty(@"Air outlet node for the PTHP must be a zone air inlet node.")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Currently only one OutdoorAir:Mixer object type is available. This field should be left blank if the PTHP is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object.")]
[JsonProperty(@"Currently only one OutdoorAir:Mixer object type is available. This field should be left blank if the PTHP is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object.")]
public YesNoDefault OutdoorAirMixerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"If this field is blank, the OutdoorAir:Mixer is not used. This optional field specifies the name of the OutdoorAir:Mixer object. When used, this name needs to match name of the OutdoorAir:Mixer object. This field should be left blank if the PTHP is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object.")]
[JsonProperty(@"If this field is blank, the OutdoorAir:Mixer is not used. This optional field specifies the name of the OutdoorAir:Mixer object. When used, this name needs to match name of the OutdoorAir:Mixer object. This field should be left blank if the PTHP is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object.")]
public System.String OutdoorAirMixerName { get; set; } = "";
        
[Description(@"Must be less than or equal to fan size.")]
[JsonProperty(@"Must be less than or equal to fan size.")]
public System.String CoolingSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Must be less than or equal to fan size.")]
[JsonProperty(@"Must be less than or equal to fan size.")]
public System.String HeatingSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Must be less than or equal to fan size. Only used when heat pump fan operating mode is continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
[JsonProperty(@"Must be less than or equal to fan size. Only used when heat pump fan operating mode is continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
public System.String NoLoadSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Must be less than or equal to supply air flow rate during cooling operation. This field is set to zero flow when the PTHP is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
[JsonProperty(@"Must be less than or equal to supply air flow rate during cooling operation. This field is set to zero flow when the PTHP is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
public System.String CoolingOutdoorAirFlowRate { get; set; } = "";
        
[Description(@"Must be less than or equal to supply air flow rate during heating operation. This field is set to zero flow when the PTHP is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
[JsonProperty(@"Must be less than or equal to supply air flow rate during heating operation. This field is set to zero flow when the PTHP is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
public System.String HeatingOutdoorAirFlowRate { get; set; } = "";
        
[Description(@"Only used when heat pump Fan operating mode is continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the outdoor air flow rate from the previous on cycle (either cooling or heating) is used. This field is set to zero flow when the PTHP is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
[JsonProperty(@"Only used when heat pump Fan operating mode is continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the outdoor air flow rate from the previous on cycle (either cooling or heating) is used. This field is set to zero flow when the PTHP is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
public System.String NoLoadOutdoorAirFlowRate { get; set; } = "";
        
[Description(@"Fan:ConstantVolume only works with fan operating mode is continuous.")]
[JsonProperty(@"Fan:ConstantVolume only works with fan operating mode is continuous.")]
public YesNoDefault SupplyAirFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match a fan object.")]
[JsonProperty(@"Needs to match a fan object.")]
public System.String SupplyAirFanName { get; set; } = "";
        
[Description(@"Only works with Coil:Heating:DX:SingleSpeed or Coil:Heating:DX:VariableSpeed.")]
[JsonProperty(@"Only works with Coil:Heating:DX:SingleSpeed or Coil:Heating:DX:VariableSpeed.")]
public YesNoDefault HeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match in the DX Heating Coil object.")]
[JsonProperty(@"Needs to match in the DX Heating Coil object.")]
public System.String HeatingCoilName { get; set; } = "";
        
[Description(@"Defines Heating convergence tolerance as a fraction of Heating load to be met.")]
[JsonProperty(@"Defines Heating convergence tolerance as a fraction of Heating load to be met.")]
public System.Single HeatingConvergenceTolerance { get; set; } = 0.001;
        
[Description(@"Only works with Coil:Cooling:DX:SingleSpeed or CoilSystem:Cooling:DX:HeatExchangerAssisted or Coil:Cooling:DX:VariableSpeed.")]
[JsonProperty(@"Only works with Coil:Cooling:DX:SingleSpeed or CoilSystem:Cooling:DX:HeatExchangerAssisted or Coil:Cooling:DX:VariableSpeed.")]
public YesNoDefault CoolingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match in the DX Cooling Coil object.")]
[JsonProperty(@"Needs to match in the DX Cooling Coil object.")]
public System.String CoolingCoilName { get; set; } = "";
        
[Description(@"Defines Cooling convergence tolerance as a fraction of the Cooling load to be met.")]
[JsonProperty(@"Defines Cooling convergence tolerance as a fraction of the Cooling load to be met.")]
public System.Single CoolingConvergenceTolerance { get; set; } = 0.001;
        
[Description(@"works with gas, electric, hot water and steam heating coil.")]
[JsonProperty(@"works with gas, electric, hot water and steam heating coil.")]
public YesNoDefault SupplementalHeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match in the supplemental heating coil object.")]
[JsonProperty(@"Needs to match in the supplemental heating coil object.")]
public System.String SupplementalHeatingCoilName { get; set; } = "";
        
[Description(@"Supply air temperature from the supplemental heater will not exceed this value.")]
[JsonProperty(@"Supply air temperature from the supplemental heater will not exceed this value.")]
public System.String MaximumSupplyAirTemperatureFromSupplementalHeater { get; set; } = "";
        
[Description(@"Supplemental heater will not operate when outdoor temperature exceeds this value.")]
[JsonProperty(@"Supplemental heater will not operate when outdoor temperature exceeds this value.")]
public System.Single MaximumOutdoorDryBulbTemperatureForSupplementalHeaterOperation { get; set; } = 21;
        
[Description(@"Select fan placement as either blow through or draw through.")]
[JsonProperty(@"Select fan placement as either blow through or draw through.")]
public YesNoDefault FanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DrawThrough");
        
[Description(@"Enter the name of a schedule that controls fan operation. Schedule values of 0 denote cycling fan operation (fan cycles with cooling or heating coil). Schedule Name values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this field is left blank.")]
[JsonProperty(@"Enter the name of a schedule that controls fan operation. Schedule values of 0 denote cycling fan operation (fan cycles with cooling or heating coil). Schedule Name values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this field is left blank.")]
public System.String SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        
[Description(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
public System.String AvailabilityManagerListName { get; set; } = "";
        
[Description(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
public System.String DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CapacityControlMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"For Capacity Control Method = SingleZoneVAV, enter the minimum air temperature limit for reduced fan speed.")]
[JsonProperty(@"For Capacity Control Method = SingleZoneVAV, enter the minimum air temperature limit for reduced fan speed.")]
public System.String MinimumSupplyAirTemperatureInCoolingMode { get; set; } = (System.String)Autosize;
        
[Description(@"For Capacity Control Method = SingleZoneVAV, enter the maximum air temperature limit for reduced fan speed.")]
[JsonProperty(@"For Capacity Control Method = SingleZoneVAV, enter the maximum air temperature limit for reduced fan speed.")]
public System.String MaximumSupplyAirTemperatureInHeatingMode { get; set; } = (System.String)Autosize;
    }
    
    public enum OutdoorAirMixerObjectTypeType
    {
        
        [JsonProperty("OutdoorAir:Mixer")]
        OutdoorAirMixer = 0,
    }
    
    public enum SupplyAirFanObjectTypeType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 2,
    }
    
    public enum HeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:DX:SingleSpeed")]
        CoilHeatingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Heating:DX:VariableSpeed")]
        CoilHeatingDXVariableSpeed = 1,
    }
    
    public enum CoolingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
        CoilCoolingDXSingleSpeed = 0,
        
        [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
        CoilCoolingDXVariableSpeed = 1,
        
        [JsonProperty("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
        CoilSystemCoolingDXHeatExchangerAssisted = 2,
    }
    
    public enum SupplementalHeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum FanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum CapacityControlMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("None")]
        None = 1,
        
        [JsonProperty("SingleZoneVAV")]
        SingleZoneVAV = 2,
    }
    
    [Description("Water-to-air heat pump. Forced-convection heating-cooling unit with supply fan, w" +
        "ater-to-air cooling and heating coils, supplemental heating coil (gas, electric," +
        " hot water, or steam), and fixed-position outdoor air mixer.")]
    [JsonObject("ZoneHVAC:WaterToAirHeatPump")]
    public class ZoneHVAC_WaterToAirHeatPump
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Currently only one OutdoorAir:Mixer object type is available. This field should be left blank if the WSHP is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object.")]
[JsonProperty(@"Currently only one OutdoorAir:Mixer object type is available. This field should be left blank if the WSHP is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object.")]
public YesNoDefault OutdoorAirMixerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"If this field is blank, the OutdoorAir:Mixer is not used. This optional field specifies the name of the OutdoorAir:Mixer object. When used, this name needs to match name of the OutdoorAir:Mixer object. This field should be left blank if the WSHP is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object.")]
[JsonProperty(@"If this field is blank, the OutdoorAir:Mixer is not used. This optional field specifies the name of the OutdoorAir:Mixer object. When used, this name needs to match name of the OutdoorAir:Mixer object. This field should be left blank if the WSHP is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object.")]
public System.String OutdoorAirMixerName { get; set; } = "";
        
[Description(@"Must be less than or equal to fan size.")]
[JsonProperty(@"Must be less than or equal to fan size.")]
public System.String CoolingSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Must be less than or equal to fan size.")]
[JsonProperty(@"Must be less than or equal to fan size.")]
public System.String HeatingSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Must be less than or equal to fan size. Only used when heat pump fan operating mode is continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
[JsonProperty(@"Must be less than or equal to fan size. Only used when heat pump fan operating mode is continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the supply air flow rate from the previous on cycle (either cooling or heating) is used.")]
public System.String NoLoadSupplyAirFlowRate { get; set; } = "";
        
[Description(@"Must be less than or equal to supply air flow rate during cooling operation. This field is set to zero flow when the WSHP is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
[JsonProperty(@"Must be less than or equal to supply air flow rate during cooling operation. This field is set to zero flow when the WSHP is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
public System.String CoolingOutdoorAirFlowRate { get; set; } = "";
        
[Description(@"Must be less than or equal to supply air flow rate during heating operation. This field is set to zero flow when the WSHP is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
[JsonProperty(@"Must be less than or equal to supply air flow rate during heating operation. This field is set to zero flow when the WSHP is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
public System.String HeatingOutdoorAirFlowRate { get; set; } = "";
        
[Description(@"Only used when heat pump Fan operating mode is continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the outdoor air flow rate from the previous on cycle (either cooling or heating) is used. This field is set to zero flow when the PTHP is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
[JsonProperty(@"Only used when heat pump Fan operating mode is continuous. This air flow rate is used when no heating or cooling is required and the DX coil compressor is off. If this field is left blank or zero, the outdoor air flow rate from the previous on cycle (either cooling or heating) is used. This field is set to zero flow when the PTHP is connected to central dedicated outdoor air through air terminal single duct mixer object.")]
public System.String NoLoadOutdoorAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault SupplyAirFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match Fan:SystemModel or Fan:OnOff object")]
[JsonProperty(@"Needs to match Fan:SystemModel or Fan:OnOff object")]
public System.String SupplyAirFanName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match in the water-to-air heat pump heating coil object")]
[JsonProperty(@"Needs to match in the water-to-air heat pump heating coil object")]
public System.String HeatingCoilName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match in the water-to-air heat pump cooling coil object")]
[JsonProperty(@"Needs to match in the water-to-air heat pump cooling coil object")]
public System.String CoolingCoilName { get; set; } = "";
        
[Description(@"The maximum on-off cycling rate for the compressor Suggested value is 2.5 for a typical heat pump")]
[JsonProperty(@"The maximum on-off cycling rate for the compressor Suggested value is 2.5 for a typical heat pump")]
public System.Single MaximumCyclingRate { get; set; } = 2.5;
        
[Description(@"Time constant for the cooling coil's capacity to reach steady state after startup Suggested value is 60 for a typical heat pump")]
[JsonProperty(@"Time constant for the cooling coil's capacity to reach steady state after startup Suggested value is 60 for a typical heat pump")]
public System.Single HeatPumpTimeConstant { get; set; } = 60;
        
[Description(@"The fraction of on-cycle power use to adjust the part load fraction based on the off-cycle power consumption due to crankcase heaters, controls, fans, and etc. Suggested value is 0.01 for a typical heat pump")]
[JsonProperty(@"The fraction of on-cycle power use to adjust the part load fraction based on the off-cycle power consumption due to crankcase heaters, controls, fans, and etc. Suggested value is 0.01 for a typical heat pump")]
public System.Single FractionOfOnCyclePowerUse { get; set; } = 0.01;
        
[Description(@"Programmed time delay for heat pump fan to shut off after compressor cycle off. Only required when fan operating mode is cycling Enter 0 when fan operating mode is continuous")]
[JsonProperty(@"Programmed time delay for heat pump fan to shut off after compressor cycle off. Only required when fan operating mode is cycling Enter 0 when fan operating mode is continuous")]
public System.Single HeatPumpFanDelayTime { get; set; } = 60;
        
[Description(@"works with gas, electric, hot water and steam heating coils")]
[JsonProperty(@"works with gas, electric, hot water and steam heating coils")]
public YesNoDefault SupplementalHeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match in the supplemental heating coil object")]
[JsonProperty(@"Needs to match in the supplemental heating coil object")]
public System.String SupplementalHeatingCoilName { get; set; } = "";
        
[Description(@"Supply air temperature from the supplemental heater will not exceed this value.")]
[JsonProperty(@"Supply air temperature from the supplemental heater will not exceed this value.")]
public System.String MaximumSupplyAirTemperatureFromSupplementalHeater { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single MaximumOutdoorDryBulbTemperatureForSupplementalHeaterOperation { get; set; } = 21;
        
[JsonProperty(@"")]
public System.String OutdoorDryBulbTemperatureSensorNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BlowThrough");
        
[Description(@"Enter the name of a schedule that controls fan operation. Schedule values of 0 denote cycling fan operation (fan cycles with cooling or heating coil). Schedule values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this field is left blank.")]
[JsonProperty(@"Enter the name of a schedule that controls fan operation. Schedule values of 0 denote cycling fan operation (fan cycles with cooling or heating coil). Schedule values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this field is left blank.")]
public System.String SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        
[Description(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
public System.String AvailabilityManagerListName { get; set; } = "";
        
[Description(@"used only when the heat pump coils are of the type WaterToAirHeatPump:EquationFit Constant results in 100% water flow regardless of compressor PLR Cycling results in water flow that matches compressor PLR ConstantOnDemand results in 100% water flow whenever the coil is on, but is 0% whenever the coil has no load")]
[JsonProperty(@"used only when the heat pump coils are of the type WaterToAirHeatPump:EquationFit Constant results in 100% water flow regardless of compressor PLR Cycling results in water flow that matches compressor PLR ConstantOnDemand results in 100% water flow whenever the coil is on, but is 0% whenever the coil has no load")]
public YesNoDefault HeatPumpCoilWaterFlowMode { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Cycling");
        
[Description(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
public System.String DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
    }
    
    public enum OutdoorAirMixerObjectTypeType
    {
        
        [JsonProperty("OutdoorAir:Mixer")]
        OutdoorAirMixer = 0,
    }
    
    public enum SupplyAirFanObjectTypeType
    {
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 0,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 1,
    }
    
    public enum HeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:WaterToAirHeatPump:EquationFit")]
        CoilHeatingWaterToAirHeatPumpEquationFit = 0,
        
        [JsonProperty("Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit")]
        CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit = 1,
    }
    
    public enum CoolingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:WaterToAirHeatPump:EquationFit")]
        CoilCoolingWaterToAirHeatPumpEquationFit = 0,
        
        [JsonProperty("Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit")]
        CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit = 1,
    }
    
    public enum SupplementalHeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum FanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum HeatPumpCoilWaterFlowModeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Constant")]
        Constant = 1,
        
        [JsonProperty("ConstantOnDemand")]
        ConstantOnDemand = 2,
        
        [JsonProperty("Cycling")]
        Cycling = 3,
    }
    
    [Description(@"This object calculates the performance of zone (room) air dehumidifiers. Meant to model conventional direct expansion (DX) cooling-based room air dehumidifiers (reject 100% of condenser heat to the zone air), but this object might be able to be used to model other room air dehumidifier types.")]
    [JsonObject("ZoneHVAC:Dehumidifier:DX")]
    public class ZoneHVAC_Dehumidifier_DX
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Schedule values of 0 denote the unit is off. Schedule values >0.0 (usually 1.0) indicate that the dehumidifier is available to operate.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available. Schedule values of 0 denote the unit is off. Schedule values >0.0 (usually 1.0) indicate that the dehumidifier is available to operate.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Air inlet node for the dehumidifier must be a zone air exhaust node.")]
[JsonProperty(@"Air inlet node for the dehumidifier must be a zone air exhaust node.")]
public System.String AirInletNodeName { get; set; } = "";
        
[Description(@"Air outlet node for the dehumidifier must be a zone air inlet node.")]
[JsonProperty(@"Air outlet node for the dehumidifier must be a zone air inlet node.")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Rating point: air entering dehumidifier at 26.7 C (80 F) dry-bulb and 60% relative humidity.")]
[JsonProperty(@"Rating point: air entering dehumidifier at 26.7 C (80 F) dry-bulb and 60% relative humidity.")]
public System.Single RatedWaterRemoval { get; set; } = ;
        
[Description(@"Rating point: air entering dehumidifier at 26.7 C (80 F) dry-bulb and 60% relative humidity.")]
[JsonProperty(@"Rating point: air entering dehumidifier at 26.7 C (80 F) dry-bulb and 60% relative humidity.")]
public System.Single RatedEnergyFactor { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single RatedAirFlowRate { get; set; } = ;
        
[Description(@"Name of a curve that describes the water removal rate (normalized to rated conditions) as a function of the dry-bulb temperature and relative humidity of the air entering the dehumidifier. Curve output = (actual water removal/rated water removal) = a + b*T + c*T**2 + d*RH + e*RH**2 + f*T*RH T = inlet air dry-bulb temperature (C) RH = inlet air RH (%)")]
[JsonProperty(@"Name of a curve that describes the water removal rate (normalized to rated conditions) as a function of the dry-bulb temperature and relative humidity of the air entering the dehumidifier. Curve output = (actual water removal/rated water removal) = a + b*T + c*T**2 + d*RH + e*RH**2 + f*T*RH T = inlet air dry-bulb temperature (C) RH = inlet air RH (%)")]
public System.String WaterRemovalCurveName { get; set; } = "";
        
[Description(@"Name of a curve that describes the energy factor (normalized to rated conditions) as a function of the dry-bulb temperature and relative humidity of the air entering the dehumidifier. Curve output = (actual energy factor/rated energy factor) = a + b*T + c*T**2 + d*RH + e*RH**2 + f*T*RH T = inlet air dry-bulb temperature (C) RH = inlet air RH (%)")]
[JsonProperty(@"Name of a curve that describes the energy factor (normalized to rated conditions) as a function of the dry-bulb temperature and relative humidity of the air entering the dehumidifier. Curve output = (actual energy factor/rated energy factor) = a + b*T + c*T**2 + d*RH + e*RH**2 + f*T*RH T = inlet air dry-bulb temperature (C) RH = inlet air RH (%)")]
public System.String EnergyFactorCurveName { get; set; } = "";
        
[Description(@"Name of a curve that describes the part load fraction (PLF) of the system as a function of the part load ratio. Used to calculate dehumidifier run time fraction and electric power. quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (dehumidification load/steady state water removal capacity)")]
[JsonProperty(@"Name of a curve that describes the part load fraction (PLF) of the system as a function of the part load ratio. Used to calculate dehumidifier run time fraction and electric power. quadratic curve = a + b*PLR + c*PLR**2 cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3 PLR = part load ratio (dehumidification load/steady state water removal capacity)")]
public System.String PartLoadFractionCorrelationCurveName { get; set; } = "";
        
[Description(@"Dehumidifier shut off if inlet air (zone) temperature is below this value. This value must be less than the Maximum Dry-Bulb Temperature for Dehumidifier Operation.")]
[JsonProperty(@"Dehumidifier shut off if inlet air (zone) temperature is below this value. This value must be less than the Maximum Dry-Bulb Temperature for Dehumidifier Operation.")]
public System.Single MinimumDryBulbTemperatureForDehumidifierOperation { get; set; } = 10;
        
[Description(@"Dehumidifier shut off if inlet air (zone) temperature is above this value. This value must be greater than the Minimum Dry-Bulb Temperature for Dehumidifier Operation.")]
[JsonProperty(@"Dehumidifier shut off if inlet air (zone) temperature is above this value. This value must be greater than the Minimum Dry-Bulb Temperature for Dehumidifier Operation.")]
public System.Single MaximumDryBulbTemperatureForDehumidifierOperation { get; set; } = 35;
        
[Description(@"Parasitic electric power consumed when the dehumidifier is available to operate, but does not operate (i.e., no high humidity load to be met). Off cycle parasitic power is 0 when the availability schedule is 0. This electric load is considered as a heat gain to the zone air.")]
[JsonProperty(@"Parasitic electric power consumed when the dehumidifier is available to operate, but does not operate (i.e., no high humidity load to be met). Off cycle parasitic power is 0 when the availability schedule is 0. This electric load is considered as a heat gain to the zone air.")]
public System.Single OffCycleParasiticElectricLoad { get; set; } = 0;
        
[Description(@"Name of storage tank used to collect water removed by the dehumidifier.")]
[JsonProperty(@"Name of storage tank used to collect water removed by the dehumidifier.")]
public System.String CondensateCollectionWaterStorageTankName { get; set; } = "";
    }
    
    [Description(@"This compound component models a stand-alone energy recovery ventilator (ERV) that conditions outdoor ventilation air and supplies that air directly to a zone. The ERV unit is modeled as a collection of components: air-to-air heat exchanger, supply air fan, exhaust air fan and an optional controller to avoid overheating of the supply air (economizer or free cooling operation).")]
    [JsonObject("ZoneHVAC:EnergyRecoveryVentilator")]
    public class ZoneHVAC_EnergyRecoveryVentilator
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Heat exchanger type must be HeatExchanger:AirToAir:SensibleAndLatent")]
[JsonProperty(@"Heat exchanger type must be HeatExchanger:AirToAir:SensibleAndLatent")]
public System.String HeatExchangerName { get; set; } = "";
        
[Description(@"This flow rate must match the supply fan's air flow rate.")]
[JsonProperty(@"This flow rate must match the supply fan's air flow rate.")]
public System.String SupplyAirFlowRate { get; set; } = "";
        
[Description(@"This flow rate must match the supply fan air flow rate.")]
[JsonProperty(@"This flow rate must match the supply fan air flow rate.")]
public System.String ExhaustAirFlowRate { get; set; } = "";
        
[Description(@"Fan type must be Fan:OnOff or Fan:SystemModel")]
[JsonProperty(@"Fan type must be Fan:OnOff or Fan:SystemModel")]
public System.String SupplyAirFanName { get; set; } = "";
        
[Description(@"Fan type must be Fan:OnOff or Fan:SystemModel")]
[JsonProperty(@"Fan type must be Fan:OnOff or Fan:SystemModel")]
public System.String ExhaustAirFanName { get; set; } = "";
        
[Description(@"Enter the name of a ZoneHVAC:EnergyRecoveryVentilator:Controller object.")]
[JsonProperty(@"Enter the name of a ZoneHVAC:EnergyRecoveryVentilator:Controller object.")]
public System.String ControllerName { get; set; } = "";
        
[Description(@"0.000508 m3/s-m2 corresponds to 0.1 ft3/min-ft2 Used only when supply and exhaust air flow rates are autosized.")]
[JsonProperty(@"0.000508 m3/s-m2 corresponds to 0.1 ft3/min-ft2 Used only when supply and exhaust air flow rates are autosized.")]
public System.Single VentilationRatePerUnitFloorArea { get; set; } = ;
        
[Description(@"0.00236 m3/s-person corresponds to 5 ft3/min-person Used only when supply and exhaust air flow rates are autosized.")]
[JsonProperty(@"0.00236 m3/s-person corresponds to 5 ft3/min-person Used only when supply and exhaust air flow rates are autosized.")]
public System.Single VentilationRatePerOccupant { get; set; } = ;
        
[Description(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
public System.String AvailabilityManagerListName { get; set; } = "";
    }
    
    [Description("This controller is used exclusively by the ZoneHVAC:EnergyRecoveryVentilator obje" +
        "ct to allow economizer (free cooling) operation when possible.")]
    [JsonObject("ZoneHVAC:EnergyRecoveryVentilator:Controller")]
    public class ZoneHVAC_EnergyRecoveryVentilator_Controller
    {
        
[Description(@"Enter the maximum outdoor dry-bulb temperature limit for economizer operation. No input or blank input means this limit is not operative")]
[JsonProperty(@"Enter the maximum outdoor dry-bulb temperature limit for economizer operation. No input or blank input means this limit is not operative")]
public System.Single TemperatureHighLimit { get; set; } = ;
        
[Description(@"Enter the minimum outdoor dry-bulb temperature limit for economizer operation. No input or blank input means this limit is not operative")]
[JsonProperty(@"Enter the minimum outdoor dry-bulb temperature limit for economizer operation. No input or blank input means this limit is not operative")]
public System.Single TemperatureLowLimit { get; set; } = ;
        
[Description(@"Enter the maximum outdoor enthalpy limit for economizer operation. No input or blank input means this limit is not operative")]
[JsonProperty(@"Enter the maximum outdoor enthalpy limit for economizer operation. No input or blank input means this limit is not operative")]
public System.Single EnthalpyHighLimit { get; set; } = ;
        
[Description(@"Enter the maximum outdoor dew point temperature limit for economizer operation. No input or blank input means this limit is not operative")]
[JsonProperty(@"Enter the maximum outdoor dew point temperature limit for economizer operation. No input or blank input means this limit is not operative")]
public System.Single DewpointTemperatureLimit { get; set; } = ;
        
[Description(@"Enter the name of a quadratic or cubic curve which defines the maximum outdoor humidity ratio (function of outdoor dry-bulb temperature) for economizer operation. No input or blank input means this limit is not operative")]
[JsonProperty(@"Enter the name of a quadratic or cubic curve which defines the maximum outdoor humidity ratio (function of outdoor dry-bulb temperature) for economizer operation. No input or blank input means this limit is not operative")]
public System.String ElectronicEnthalpyLimitCurveName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ExhaustAirTemperatureLimit { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoExhaustAirTemperatureLimit");
        
[JsonProperty(@"")]
public YesNoDefault ExhaustAirEnthalpyLimit { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NoExhaustAirEnthalpyLimit");
        
[Description(@"Schedule values greater than 0 indicate economizer operation is active. This schedule may be used with or without the High Humidity Control option. When used together, high humidity control has priority over economizer control.")]
[JsonProperty(@"Schedule values greater than 0 indicate economizer operation is active. This schedule may be used with or without the High Humidity Control option. When used together, high humidity control has priority over economizer control.")]
public System.String TimeOfDayEconomizerFlowControlScheduleName { get; set; } = "";
        
[Description(@"Select Yes to modify air flow rates based on a zone humidistat. Select No to disable this feature.")]
[JsonProperty(@"Select Yes to modify air flow rates based on a zone humidistat. Select No to disable this feature.")]
public YesNoDefault HighHumidityControlFlag { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"Enter the name of the zone where the humidistat is located.")]
[JsonProperty(@"Enter the name of the zone where the humidistat is located.")]
public System.String HumidistatControlZoneName { get; set; } = "";
        
[Description(@"Enter the ratio of supply (outdoor) air to the maximum supply air flow rate when modified air flow rates are active based on high indoor humidity.")]
[JsonProperty(@"Enter the ratio of supply (outdoor) air to the maximum supply air flow rate when modified air flow rates are active based on high indoor humidity.")]
public System.Single HighHumidityOutdoorAirFlowRatio { get; set; } = 1;
        
[Description(@"If NO is selected, the air flow rate is modified any time indoor relative humidity is above humidistat setpoint. If YES is selected, outdoor air flow rate is modified any time indoor relative humidity is above the humidistat setpoint AND the outdoor humidity ratio is less than the indoor humidity ratio.")]
[JsonProperty(@"If NO is selected, the air flow rate is modified any time indoor relative humidity is above humidistat setpoint. If YES is selected, outdoor air flow rate is modified any time indoor relative humidity is above the humidistat setpoint AND the outdoor humidity ratio is less than the indoor humidity ratio.")]
public YesNoDefault ControlHighIndoorHumidityBasedOnOutdoorHumidityRatio { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Yes");
    }
    
    public enum ExhaustAirTemperatureLimitType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ExhaustAirTemperatureLimit")]
        ExhaustAirTemperatureLimit = 1,
        
        [JsonProperty("NoExhaustAirTemperatureLimit")]
        NoExhaustAirTemperatureLimit = 2,
    }
    
    public enum ExhaustAirEnthalpyLimitType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ExhaustAirEnthalpyLimit")]
        ExhaustAirEnthalpyLimit = 1,
        
        [JsonProperty("NoExhaustAirEnthalpyLimit")]
        NoExhaustAirEnthalpyLimit = 2,
    }
    
    [Description("Unit ventilator. Forced-convection ventilation unit with supply fan (constant-vol" +
        "ume or variable-volume), optional chilled water cooling coil, optional heating c" +
        "oil (gas, electric, hot water, or steam) and controllable outdoor air mixer.")]
    [JsonObject("ZoneHVAC:UnitVentilator")]
    public class ZoneHVAC_UnitVentilator
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumSupplyAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault OutdoorAirControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String MinimumOutdoorAirFlowRate { get; set; } = "";
        
[Description(@"schedule values multiply the minimum outdoor air flow rate")]
[JsonProperty(@"schedule values multiply the minimum outdoor air flow rate")]
public System.String MinimumOutdoorAirScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumOutdoorAirFlowRate { get; set; } = "";
        
[Description(@"that this depends on the control type as to whether it is a fraction or temperature")]
[JsonProperty(@"that this depends on the control type as to whether it is a fraction or temperature")]
public System.String MaximumOutdoorAirFractionOrTemperatureScheduleName { get; set; } = "";
        
[Description(@"Inlet node name must be zone exhaust node name if there is no DOA Mixer, or if the unit ventilator is connected DOA, then the air inlet node name must be the mixer outlet air node name for InletSide mixer connection.")]
[JsonProperty(@"Inlet node name must be zone exhaust node name if there is no DOA Mixer, or if the unit ventilator is connected DOA, then the air inlet node name must be the mixer outlet air node name for InletSide mixer connection.")]
public System.String AirInletNodeName { get; set; } = "";
        
[Description(@"Outlet node name must be zone inlet node name if there is no DOA Mixer, or if the unit ventilator is connected DOA, then the air outlet node name must be the mixer secondary air inlet node name for SupplySide mixer connection.")]
[JsonProperty(@"Outlet node name must be zone inlet node name if there is no DOA Mixer, or if the unit ventilator is connected DOA, then the air outlet node name must be the mixer secondary air inlet node name for SupplySide mixer connection.")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"this field is left blank only if the Unit Ventilator is connected to a central dedicated outdoor air (DOA) via AirTerminal:SingleDuct:Mixer object")]
[JsonProperty(@"this field is left blank only if the Unit Ventilator is connected to a central dedicated outdoor air (DOA) via AirTerminal:SingleDuct:Mixer object")]
public System.String OutdoorAirNodeName { get; set; } = "";
        
[Description(@"this field is left blank only if the Unit Ventilator is connected to a central dedicated outdoor air (DOA) via AirTerminal:SingleDuct:Mixer object")]
[JsonProperty(@"this field is left blank only if the Unit Ventilator is connected to a central dedicated outdoor air (DOA) via AirTerminal:SingleDuct:Mixer object")]
public System.String ExhaustAirNodeName { get; set; } = "";
        
[Description(@"inlet to coils this field is left blank only if the Unit Ventilator is connected to a central dedicated outdoor air (DOA) via AirTerminal:SingleDuct:Mixer object")]
[JsonProperty(@"inlet to coils this field is left blank only if the Unit Ventilator is connected to a central dedicated outdoor air (DOA) via AirTerminal:SingleDuct:Mixer object")]
public System.String MixedAirNodeName { get; set; } = "";
        
[Description(@"Allowable fan types are Fan:ConstantVolume, Fan:OnOff, Fan:VariableVolume, and Fan:SystemModel")]
[JsonProperty(@"Allowable fan types are Fan:ConstantVolume, Fan:OnOff, Fan:VariableVolume, and Fan:SystemModel")]
public YesNoDefault SupplyAirFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String SupplyAirFanName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CoilOption { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Enter the name of a schedule that controls fan operation. Schedule name values of 0 denote cycling fan operation (fan cycles with cooling/heating coil). Schedule values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this input field is left blank.")]
[JsonProperty(@"Enter the name of a schedule that controls fan operation. Schedule name values of 0 denote cycling fan operation (fan cycles with cooling/heating coil). Schedule values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this input field is left blank.")]
public System.String SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String HeatingCoilName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single HeatingConvergenceTolerance { get; set; } = 0.001;
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String CoolingCoilName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single CoolingConvergenceTolerance { get; set; } = 0.001;
        
[Description(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
public System.String AvailabilityManagerListName { get; set; } = "";
        
[Description(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
public System.String DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
    }
    
    public enum OutdoorAirControlTypeType
    {
        
        [JsonProperty("FixedAmount")]
        FixedAmount = 0,
        
        [JsonProperty("FixedTemperature")]
        FixedTemperature = 1,
        
        [JsonProperty("VariablePercent")]
        VariablePercent = 2,
    }
    
    public enum SupplyAirFanObjectTypeType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 2,
        
        [JsonProperty("Fan:VariableVolume")]
        FanVariableVolume = 3,
    }
    
    public enum CoilOptionType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Heating")]
        Heating = 1,
        
        [JsonProperty("HeatingAndCooling")]
        HeatingAndCooling = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum HeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum CoolingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 0,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 1,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatExchangerAssisted")]
        CoilSystemCoolingWaterHeatExchangerAssisted = 2,
    }
    
    [Description("Unit heater. Forced-convection heating-only unit with supply fan, heating coil (g" +
        "as, electric, hot water, or steam) and fixed-position outdoor air mixer.")]
    [JsonObject("ZoneHVAC:UnitHeater")]
    public class ZoneHVAC_UnitHeater
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AirOutletNodeName { get; set; } = "";
        
[Description(@"Allowable fan types are Fan:ConstantVolume, Fan:OnOff, Fan:VariableVolume and Fan:SystemModel")]
[JsonProperty(@"Allowable fan types are Fan:ConstantVolume, Fan:OnOff, Fan:VariableVolume and Fan:SystemModel")]
public YesNoDefault SupplyAirFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String SupplyAirFanName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumSupplyAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault HeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String HeatingCoilName { get; set; } = "";
        
[Description(@"Enter the name of a schedule that controls fan operation. Schedule name values of 0 denote cycling fan operation (fan cycles with the heating coil). Schedule values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this input field is left blank.")]
[JsonProperty(@"Enter the name of a schedule that controls fan operation. Schedule name values of 0 denote cycling fan operation (fan cycles with the heating coil). Schedule values greater than 0 denote constant fan operation (fan runs continually regardless of coil operation). The fan operating mode defaults to cycling fan operation if this input field is left blank.")]
public System.String SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        
[Description(@"This choice field allows the user to define how the unit heater will operate under "no heating load" or cooling conditions. If the "No" is selected, then the fan will not run unless there is a heating load. If the fan does not run, this effectively shuts the unit heater system off when there is no heating load. If the "Yes" is selected, the unit heater is available and has a ConstantVolume fan, or has an OnOff fan with "Supply Air Fan Operating Mode Schedule" value greater than zero, then the fan will always run regardless of the zone load.")]
[JsonProperty(@"This choice field allows the user to define how the unit heater will operate under "no heating load" or cooling conditions. If the "No" is selected, then the fan will not run unless there is a heating load. If the fan does not run, this effectively shuts the unit heater system off when there is no heating load. If the "Yes" is selected, the unit heater is available and has a ConstantVolume fan, or has an OnOff fan with "Supply Air Fan Operating Mode Schedule" value greater than zero, then the fan will always run regardless of the zone load.")]
public YesNoDefault SupplyAirFanOperationDuringNoHeating { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Not used when heating coil is gas or electric")]
[JsonProperty(@"Not used when heating coil is gas or electric")]
public System.String MaximumHotWaterOrSteamFlowRate { get; set; } = "";
        
[Description(@"Not used when heating coil is gas or electric")]
[JsonProperty(@"Not used when heating coil is gas or electric")]
public System.Single MinimumHotWaterOrSteamFlowRate { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single HeatingConvergenceTolerance { get; set; } = 0.001;
        
[Description(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
public System.String AvailabilityManagerListName { get; set; } = "";
        
[Description(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
public System.String DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
    }
    
    public enum SupplyAirFanObjectTypeType
    {
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 0,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 1,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 2,
        
        [JsonProperty("Fan:VariableVolume")]
        FanVariableVolume = 3,
    }
    
    public enum HeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum SupplyAirFanOperationDuringNoHeatingType
    {
        
        [JsonProperty("No")]
        No = 0,
        
        [JsonProperty("Yes")]
        Yes = 1,
    }
    
    [Description("Zone evaporative cooler. Forced-convection cooling-only unit with supply fan, 100" +
        "% outdoor air supply. Optional relief exhaust node")]
    [JsonObject("ZoneHVAC:EvaporativeCoolerUnit")]
    public class ZoneHVAC_EvaporativeCoolerUnit
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
public System.String AvailabilityManagerListName { get; set; } = "";
        
[Description(@"this is an outdoor air node")]
[JsonProperty(@"this is an outdoor air node")]
public System.String OutdoorAirInletNodeName { get; set; } = "";
        
[Description(@"this is a zone inlet node")]
[JsonProperty(@"this is a zone inlet node")]
public System.String CoolerOutletNodeName { get; set; } = "";
        
[Description(@"this is a zone exhaust node, optional if flow is being balanced elsewhere")]
[JsonProperty(@"this is a zone exhaust node, optional if flow is being balanced elsewhere")]
public System.String ZoneReliefAirNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault SupplyAirFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String SupplyAirFanName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String DesignSupplyAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault FanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault CoolerUnitControlMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"used for ZoneTemperatureDeadbandOnOffCycling hystersis range for thermostatic control")]
[JsonProperty(@"used for ZoneTemperatureDeadbandOnOffCycling hystersis range for thermostatic control")]
public System.Single ThrottlingRangeTemperatureDifference { get; set; } = 1;
        
[Description(@"Sign convention is that positive values indicate a cooling load")]
[JsonProperty(@"Sign convention is that positive values indicate a cooling load")]
public System.Single CoolingLoadControlThresholdHeatTransferRate { get; set; } = 100;
        
[JsonProperty(@"")]
public YesNoDefault FirstEvaporativeCoolerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String FirstEvaporativeCoolerObjectName { get; set; } = "";
        
[Description(@"optional, used for direct/indirect configurations second cooler must be immediately downstream of first cooler, if present")]
[JsonProperty(@"optional, used for direct/indirect configurations second cooler must be immediately downstream of first cooler, if present")]
public YesNoDefault SecondEvaporativeCoolerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"optional, used for direct/indirect configurations")]
[JsonProperty(@"optional, used for direct/indirect configurations")]
public System.String SecondEvaporativeCoolerName { get; set; } = "";
        
[Description(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
public System.String DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
    }
    
    public enum SupplyAirFanObjectTypeType
    {
        
        [JsonProperty("Fan:ComponentModel")]
        FanComponentModel = 0,
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 1,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 2,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 3,
        
        [JsonProperty("Fan:VariableVolume")]
        FanVariableVolume = 4,
    }
    
    public enum FanPlacementType
    {
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 0,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 1,
    }
    
    public enum CoolerUnitControlMethodType
    {
        
        [JsonProperty("ZoneCoolingLoadOnOffCycling")]
        ZoneCoolingLoadOnOffCycling = 0,
        
        [JsonProperty("ZoneCoolingLoadVariableSpeedFan")]
        ZoneCoolingLoadVariableSpeedFan = 1,
        
        [JsonProperty("ZoneTemperatureDeadbandOnOffCycling")]
        ZoneTemperatureDeadbandOnOffCycling = 2,
    }
    
    public enum FirstEvaporativeCoolerObjectTypeType
    {
        
        [JsonProperty("EvaporativeCooler:Direct:CelDekPad")]
        EvaporativeCoolerDirectCelDekPad = 0,
        
        [JsonProperty("EvaporativeCooler:Direct:ResearchSpecial")]
        EvaporativeCoolerDirectResearchSpecial = 1,
        
        [JsonProperty("EvaporativeCooler:Indirect:CelDekPad")]
        EvaporativeCoolerIndirectCelDekPad = 2,
        
        [JsonProperty("EvaporativeCooler:Indirect:ResearchSpecial")]
        EvaporativeCoolerIndirectResearchSpecial = 3,
        
        [JsonProperty("EvaporativeCooler:Indirect:WetCoil")]
        EvaporativeCoolerIndirectWetCoil = 4,
    }
    
    public enum SecondEvaporativeCoolerObjectTypeType
    {
        
        [JsonProperty("EvaporativeCooler:Direct:CelDekPad")]
        EvaporativeCoolerDirectCelDekPad = 0,
        
        [JsonProperty("EvaporativeCooler:Direct:ResearchSpecial")]
        EvaporativeCoolerDirectResearchSpecial = 1,
        
        [JsonProperty("EvaporativeCooler:Indirect:CelDekPad")]
        EvaporativeCoolerIndirectCelDekPad = 2,
        
        [JsonProperty("EvaporativeCooler:Indirect:ResearchSpecial")]
        EvaporativeCoolerIndirectResearchSpecial = 3,
        
        [JsonProperty("EvaporativeCooler:Indirect:WetCoil")]
        EvaporativeCoolerIndirectWetCoil = 4,
    }
    
    [Description(@"Hybrid Unitary HVAC. A black box model for multi-mode packaged forced air equipment. Independent variables include outdoor air conditions and indoor air conditions. Controlled inputs include operating mode, supply air flow rate, and outdoor air faction. Emperical lookup tables are required to map supply air temperature supply air humidity, electricity use, fuel uses, water use, fan electricity use, and external static pressure as a function of each indpednent varaible and each controlled input. In each timestep the model will choose one or more combinations of settings for mode, supply air flow rate, outdoor air faction, and part runtime fraction so as to satisfy zone requests for sensible cooling, heating, ventilation, and/or dehumidification with the least resource consumption. Equipment in this class may consume electricity, water, and up to two additional fuel types.")]
    [JsonObject("ZoneHVAC:HybridUnitaryHVAC")]
    public class ZoneHVAC_HybridUnitaryHVAC
    {
        
[Description(@"Enter the availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Enter the availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
public System.String AvailabilityManagerListName { get; set; } = "";
        
[Description(@"Values in this schedule are used as a constraint in choosing the feasible settings for supply air flow rate and ouside air fraction in each operating mode. If this field is blank, no minimum is imposed.")]
[JsonProperty(@"Values in this schedule are used as a constraint in choosing the feasible settings for supply air flow rate and ouside air fraction in each operating mode. If this field is blank, no minimum is imposed.")]
public System.String MinimumSupplyAirTemperatureScheduleName { get; set; } = "";
        
[Description(@"Values in this schedule are used as a constraint in choosing the feasible settings for supply air flow rate and outdoor air fraction in each operating mode. If this field is blank, no maximum is imposed.")]
[JsonProperty(@"Values in this schedule are used as a constraint in choosing the feasible settings for supply air flow rate and outdoor air fraction in each operating mode. If this field is blank, no maximum is imposed.")]
public System.String MaximumSupplyAirTemperatureScheduleName { get; set; } = "";
        
[Description(@"Values in this schedule are used as a constraint in choosing the feasible settings for supply air flow rate and outdoor air fraction in each operating mode. If this field is blank, no minimum is imposed.")]
[JsonProperty(@"Values in this schedule are used as a constraint in choosing the feasible settings for supply air flow rate and outdoor air fraction in each operating mode. If this field is blank, no minimum is imposed.")]
public System.String MinimumSupplyAirHumidityRatioScheduleName { get; set; } = "";
        
[Description(@"Values in this schedule are used as a constraint in choosing the feasible settings for supply air flow rate and outdoor air fraction in each operating mode. If this field is blank, no maximum is imposed.")]
[JsonProperty(@"Values in this schedule are used as a constraint in choosing the feasible settings for supply air flow rate and outdoor air fraction in each operating mode. If this field is blank, no maximum is imposed.")]
public System.String MaximumSupplyAirHumidityRatioScheduleName { get; set; } = "";
        
[Description(@"Select the method that will be used to choose operating mode(s), supply air flow rate(s), outdoor air fraction(s) and part runtime fraction(s) in each time step. "Automatic" = chooses controlled inputs and part runtime fraction(s) to minimize resource use within each time step while best satisfying requested sensible cooling, dehumidification and ventilation, and subject to constraints. "User Defined" = EMS will be used to choose controlled inputs and part runtime fraction(s) in each time step. If this field is blank, default to "Automatic".")]
[JsonProperty(@"Select the method that will be used to choose operating mode(s), supply air flow rate(s), outdoor air fraction(s) and part runtime fraction(s) in each time step. "Automatic" = chooses controlled inputs and part runtime fraction(s) to minimize resource use within each time step while best satisfying requested sensible cooling, dehumidification and ventilation, and subject to constraints. "User Defined" = EMS will be used to choose controlled inputs and part runtime fraction(s) in each time step. If this field is blank, default to "Automatic".")]
public YesNoDefault MethodToChooseControlledInputsAndPartRuntimeFraction { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Automatic");
        
[Description(@"Return air node for the hybrid unit must be a zone exhaust node.")]
[JsonProperty(@"Return air node for the hybrid unit must be a zone exhaust node.")]
public System.String ReturnAirNodeName { get; set; } = "";
        
[Description(@"Outdoor air node for the hybrid unit must be an outdoor air node.")]
[JsonProperty(@"Outdoor air node for the hybrid unit must be an outdoor air node.")]
public System.String OutdoorAirNodeName { get; set; } = "";
        
[Description(@"Supply air node for the hybrid unit must be a zone air inlet node.")]
[JsonProperty(@"Supply air node for the hybrid unit must be a zone air inlet node.")]
public System.String SupplyAirNodeName { get; set; } = "";
        
[Description(@"Relief node for the hybrid unit must be a zone exhaust node, unless flow is being balanced elsewhere.")]
[JsonProperty(@"Relief node for the hybrid unit must be a zone exhaust node, unless flow is being balanced elsewhere.")]
public System.String ReliefNodeName { get; set; } = "";
        
[Description(@"The value in this field represents the maximum supply air volume flow rate among all operating modes. Values of extensive variables in lookup tables are normalized by the system maximum supply air mass flow rate that was used to build performance curves. The value in this field is used to rescale the output from exenstive variables to a desired system size.")]
[JsonProperty(@"The value in this field represents the maximum supply air volume flow rate among all operating modes. Values of extensive variables in lookup tables are normalized by the system maximum supply air mass flow rate that was used to build performance curves. The value in this field is used to rescale the output from exenstive variables to a desired system size.")]
public System.Single SystemMaximumSupplyAirFlowRate { get; set; } = ;
        
[Description(@"Input the external static pressure when the system operates at maximum supply air flow rate. Fan affinity laws are used to scale supply fan power from the values tabulated in lookup tables, to values that match the external static pressure input to this field. If this field is blank, the supply fan power is not scaled from the values tabulated in lookup tables.")]
[JsonProperty(@"Input the external static pressure when the system operates at maximum supply air flow rate. Fan affinity laws are used to scale supply fan power from the values tabulated in lookup tables, to values that match the external static pressure input to this field. If this field is blank, the supply fan power is not scaled from the values tabulated in lookup tables.")]
public System.Single ExternalStaticPressureAtSystemMaximumSupplyAirFlowRate { get; set; } = ;
        
[Description(@"This field specifies if the fan heat is accounted for in the lookup tables.")]
[JsonProperty(@"This field specifies if the fan heat is accounted for in the lookup tables.")]
public YesNoDefault FanHeatIncludedInLookupTables { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "No");
        
[Description(@"This field specifies where to add the fan heat in the air stream.")]
[JsonProperty(@"This field specifies where to add the fan heat in the air stream.")]
public YesNoDefault FanHeatGainLocation { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SupplyAirStream");
        
[Description(@"0.0 means no fan heat is added to the air stream, 1.0 means all fan heat is added to the air stream.")]
[JsonProperty(@"0.0 means no fan heat is added to the air stream, 1.0 means all fan heat is added to the air stream.")]
public System.Single FanHeatInAirStreamFraction { get; set; } = 1;
        
[Description(@"The value in this field scales all extensive performance variables including: supply air mass flow rate, fuel uses, and water use. If this field is blank, the default scaling factor is 1.")]
[JsonProperty(@"The value in this field scales all extensive performance variables including: supply air mass flow rate, fuel uses, and water use. If this field is blank, the default scaling factor is 1.")]
public System.Single ScalingFactor { get; set; } = 1;
        
[Description(@"Any mode selected will not operate for less time than the value input in this field. If the value in this field is larger than each timestep, the mode selected in one time step will persist in later time steps until the minimum time between mode change is satisfied. Supply air mass flow rate and outdoor air fraction within a mode are not subject to minimum runtime and may change in every time step. Mode 0 does not have a minimum time. If this field is blank, the default minimum time between mode change is 10 minutes.")]
[JsonProperty(@"Any mode selected will not operate for less time than the value input in this field. If the value in this field is larger than each timestep, the mode selected in one time step will persist in later time steps until the minimum time between mode change is satisfied. Supply air mass flow rate and outdoor air fraction within a mode are not subject to minimum runtime and may change in every time step. Mode 0 does not have a minimum time. If this field is blank, the default minimum time between mode change is 10 minutes.")]
public System.Single MinimumTimeBetweenModeChange { get; set; } = 10;
        
[Description(@"Select the fuel type associated with field: "System Electric Power Lookup Table" in each mode. If this field is blank, default first fuel type = Electricity.")]
[JsonProperty(@"Select the fuel type associated with field: "System Electric Power Lookup Table" in each mode. If this field is blank, default first fuel type = Electricity.")]
public YesNoDefault FirstFuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Electricity");
        
[Description(@"Select the fuel type associated with field: "System Second Fuel Consumption Lookup Table" in each mode. If this field is blank, default second fuel type = None.")]
[JsonProperty(@"Select the fuel type associated with field: "System Second Fuel Consumption Lookup Table" in each mode. If this field is blank, default second fuel type = None.")]
public YesNoDefault SecondFuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"Select the fuel type associated with field: "System Third Fuel Consumption Lookup Table" in each mode. If this field is blank, default third fuel type = None.")]
[JsonProperty(@"Select the fuel type associated with field: "System Third Fuel Consumption Lookup Table" in each mode. If this field is blank, default third fuel type = None.")]
public YesNoDefault ThirdFuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "None");
        
[Description(@"In each time step, controlled variables will be chosen to minimize the selection in this field, subject to constraints. If this field is blank, the objective function will minimize electricity use.")]
[JsonProperty(@"In each time step, controlled variables will be chosen to minimize the selection in this field, subject to constraints. If this field is blank, the objective function will minimize electricity use.")]
public YesNoDefault ObjectiveFunctionToMinimize { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Electricity Use");
        
[Description(@"Enter the name of a DesignSpecification:OutdoorAir object. Information in that object will be used to compute the minimum outdoor air flow rate in each time step. If this field is blank, the system may still supply outdoor air, if it is capable as described by lookup tables, when doing so is the most efficient way to satisfy other constraints.")]
[JsonProperty(@"Enter the name of a DesignSpecification:OutdoorAir object. Information in that object will be used to compute the minimum outdoor air flow rate in each time step. If this field is blank, the system may still supply outdoor air, if it is capable as described by lookup tables, when doing so is the most efficient way to satisfy other constraints.")]
public System.String DesignSpecificationOutdoorAirObjectName { get; set; } = "";
        
[Description(@"Enter a name for Mode 0. Mode 0 describes equipment performance in standby. Mode 0 is usually characterized by electricity use for controls and crankcase heaters, or other standby resouce consumption. Mode 0 will be chosen for any timestep, or portion of timestep, when no ventilation, cooling, humidification, or dehumidification is required. Mode 0 is available at any environmental condition.")]
[JsonProperty(@"Enter a name for Mode 0. Mode 0 describes equipment performance in standby. Mode 0 is usually characterized by electricity use for controls and crankcase heaters, or other standby resouce consumption. Mode 0 will be chosen for any timestep, or portion of timestep, when no ventilation, cooling, humidification, or dehumidification is required. Mode 0 is available at any environmental condition.")]
public System.String ModeName { get; set; } = "";
        
[Description(@"Enter the name of the Supply Air Temperature Lookup Table for Mode 0. Units for lookup table values should be in C. If this field is blank, Mode 0 will not be considered for any period that requires ventilation, heating, cooling, humidification, or dehumidification. If this field is blank, when Mode 0 is chosen (during standby periods) the supply air temperature will equal the return air temperature.")]
[JsonProperty(@"Enter the name of the Supply Air Temperature Lookup Table for Mode 0. Units for lookup table values should be in C. If this field is blank, Mode 0 will not be considered for any period that requires ventilation, heating, cooling, humidification, or dehumidification. If this field is blank, when Mode 0 is chosen (during standby periods) the supply air temperature will equal the return air temperature.")]
public System.String ModeSupplyAirTemperatureLookupTableName { get; set; } = "";
        
[Description(@"Enter the name of the Supply Air Humidity Ratio Lookup Table for Mode 0. Units for lookup table values should be in kgWater/kgDryAir. If this field is blank, Mode 0 will not be considered for any period that requires ventilation, heating, cooling, humidification, or dehumidification. If this field is blank, when Mode 0 is chosen (during standby periods) the supply air humidty ratio will equal the return air humidity ratio.")]
[JsonProperty(@"Enter the name of the Supply Air Humidity Ratio Lookup Table for Mode 0. Units for lookup table values should be in kgWater/kgDryAir. If this field is blank, Mode 0 will not be considered for any period that requires ventilation, heating, cooling, humidification, or dehumidification. If this field is blank, when Mode 0 is chosen (during standby periods) the supply air humidty ratio will equal the return air humidity ratio.")]
public System.String ModeSupplyAirHumidityRatioLookupTableName { get; set; } = "";
        
[Description(@"Enter the name of the Electric Power Lookup Table for Mode 0. Units for lookup table values should be in W. If this field is blank, Mode 0 does not consume electricity.")]
[JsonProperty(@"Enter the name of the Electric Power Lookup Table for Mode 0. Units for lookup table values should be in W. If this field is blank, Mode 0 does not consume electricity.")]
public System.String ModeSystemElectricPowerLookupTableName { get; set; } = "";
        
[Description(@"Enter the name of the Supply Fan Electric Power Lookup Table for Mode 0. Units for lookup table values should be in W. If this field is blank, Mode 0 does not consume electricity for supply fan.")]
[JsonProperty(@"Enter the name of the Supply Fan Electric Power Lookup Table for Mode 0. Units for lookup table values should be in W. If this field is blank, Mode 0 does not consume electricity for supply fan.")]
public System.String ModeSupplyFanElectricPowerLookupTableName { get; set; } = "";
        
[Description(@"Enter the name of the External Static Pressure Lookup Table for Mode 0. Units for lookup table values should be in Pa. If this field is blank, external static pressure will not be reported.")]
[JsonProperty(@"Enter the name of the External Static Pressure Lookup Table for Mode 0. Units for lookup table values should be in Pa. If this field is blank, external static pressure will not be reported.")]
public System.String ModeExternalStaticPressureLookupTableName { get; set; } = "";
        
[Description(@"Enter the name of the System Second Fuel Consumption Lookup Table for Mode 0. Units for lookup table values should be in W. If this field is blank, Mode 0 does not consume a second fuel.")]
[JsonProperty(@"Enter the name of the System Second Fuel Consumption Lookup Table for Mode 0. Units for lookup table values should be in W. If this field is blank, Mode 0 does not consume a second fuel.")]
public System.String ModeSystemSecondFuelConsumptionLookupTableName { get; set; } = "";
        
[Description(@"Enter the name of the System Third Fuel Consumption Lookup Table for Mode 0. Units for lookup table values should be in W. If this field is blank, Mode 0 does not consume a third fuel.")]
[JsonProperty(@"Enter the name of the System Third Fuel Consumption Lookup Table for Mode 0. Units for lookup table values should be in W. If this field is blank, Mode 0 does not consume a third fuel.")]
public System.String ModeSystemThirdFuelConsumptionLookupTableName { get; set; } = "";
        
[Description(@"Enter the name of the System Water Use Lookup Table for Mode 0. Units for lookup table values should be in kg/s. If this field is blank, Mode 0 does not consume water.")]
[JsonProperty(@"Enter the name of the System Water Use Lookup Table for Mode 0. Units for lookup table values should be in kg/s. If this field is blank, Mode 0 does not consume water.")]
public System.String ModeSystemWaterUseLookupTableName { get; set; } = "";
        
[Description(@"Enter the outdoor air fraction for Mode 0. If this field is blank, the outdoor air fraction for Mode 0 will be 0.00.")]
[JsonProperty(@"Enter the outdoor air fraction for Mode 0. If this field is blank, the outdoor air fraction for Mode 0 will be 0.00.")]
public System.Single ModeOutdoorAirFraction { get; set; } = 0;
        
[Description(@"Enter the supply air mass flow rate ratio for Mode 0. The value in this field will be used to determine the supply air mass flow rate in Mode 0. Supply air mass flow rate ratio describes supply air mass flow rate as a fraction of mass flow rate associated with the value in field: "System Maximum Supply Air Flow Rate". If this field is blank, the supply air mass flow rate ratio for Mode 0 will be 0.")]
[JsonProperty(@"Enter the supply air mass flow rate ratio for Mode 0. The value in this field will be used to determine the supply air mass flow rate in Mode 0. Supply air mass flow rate ratio describes supply air mass flow rate as a fraction of mass flow rate associated with the value in field: "System Maximum Supply Air Flow Rate". If this field is blank, the supply air mass flow rate ratio for Mode 0 will be 0.")]
public System.Single ModeSupplyAirMassFlowRateRatio { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String Modes { get; set; } = "";
    }
    
    public enum MethodToChooseControlledInputsAndPartRuntimeFractionType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Automatic")]
        Automatic = 1,
        
        [JsonProperty("User Defined")]
        UserDefined = 2,
    }
    
    public enum FanHeatGainLocationType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MixedAirStream")]
        MixedAirStream = 1,
        
        [JsonProperty("SupplyAirStream")]
        SupplyAirStream = 2,
    }
    
    public enum FirstFuelTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Coal")]
        Coal = 1,
        
        [JsonProperty("Diesel")]
        Diesel = 2,
        
        [JsonProperty("DistrictCooling")]
        DistrictCooling = 3,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 4,
        
        [JsonProperty("Electricity")]
        Electricity = 5,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 6,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 7,
        
        [JsonProperty("Gasoline")]
        Gasoline = 8,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 9,
        
        [JsonProperty("None")]
        None = 10,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 11,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 12,
        
        [JsonProperty("Propane")]
        Propane = 13,
        
        [JsonProperty("Steam")]
        Steam = 14,
    }
    
    public enum SecondFuelTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Coal")]
        Coal = 1,
        
        [JsonProperty("Diesel")]
        Diesel = 2,
        
        [JsonProperty("DistrictCooling")]
        DistrictCooling = 3,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 4,
        
        [JsonProperty("Electricity")]
        Electricity = 5,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 6,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 7,
        
        [JsonProperty("Gasoline")]
        Gasoline = 8,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 9,
        
        [JsonProperty("None")]
        None = 10,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 11,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 12,
        
        [JsonProperty("Propane")]
        Propane = 13,
        
        [JsonProperty("Steam")]
        Steam = 14,
    }
    
    public enum ThirdFuelTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Coal")]
        Coal = 1,
        
        [JsonProperty("Diesel")]
        Diesel = 2,
        
        [JsonProperty("DistrictCooling")]
        DistrictCooling = 3,
        
        [JsonProperty("DistrictHeating")]
        DistrictHeating = 4,
        
        [JsonProperty("Electricity")]
        Electricity = 5,
        
        [JsonProperty("FuelOilNo1")]
        FuelOilNo = 6,
        
        [JsonProperty("FuelOilNo2")]
        FuelOilNo = 7,
        
        [JsonProperty("Gasoline")]
        Gasoline = 8,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 9,
        
        [JsonProperty("None")]
        None = 10,
        
        [JsonProperty("OtherFuel1")]
        OtherFuel = 11,
        
        [JsonProperty("OtherFuel2")]
        OtherFuel = 12,
        
        [JsonProperty("Propane")]
        Propane = 13,
        
        [JsonProperty("Steam")]
        Steam = 14,
    }
    
    public enum ObjectiveFunctionToMinimizeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Electricity Use")]
        ElectricityUse = 1,
        
        [JsonProperty("Second Fuel Use")]
        SecondFuelUse = 2,
        
        [JsonProperty("Third Fuel Use")]
        ThirdFuelUse = 3,
        
        [JsonProperty("Water Use")]
        WaterUse = 4,
    }
    
    [Description("The zone outdoor air unit models a single-zone dedicated outdoor air system (DOAS" +
        "). Forced-convection 100% outdoor air unit with supply fan and optional equipmen" +
        "t including exhaust fan, heating coil, cooling coil, and heat recovery.")]
    [JsonObject("ZoneHVAC:OutdoorAirUnit")]
    public class ZoneHVAC_OutdoorAirUnit
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"(name of zone system is serving)")]
[JsonProperty(@"(name of zone system is serving)")]
public System.String ZoneName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutdoorAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutdoorAirScheduleName { get; set; } = "";
        
[Description(@"Allowable fan types are Fan:SystemModel and Fan:ConstantVolume and Fan:VariableVolume")]
[JsonProperty(@"Allowable fan types are Fan:SystemModel and Fan:ConstantVolume and Fan:VariableVolume")]
public System.String SupplyFanName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault SupplyFanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "DrawThrough");
        
[Description(@"Allowable fan types are Fan:SystemModel and Fan:ConstantVolume and Fan:VariableVolume Fan:VariableVolume")]
[JsonProperty(@"Allowable fan types are Fan:SystemModel and Fan:ConstantVolume and Fan:VariableVolume Fan:VariableVolume")]
public System.String ExhaustFanName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ExhaustAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ExhaustAirScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault UnitControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "NeutralControl");
        
[Description(@"Air and control temperatures for cooling. If outdoor air temperature is above the high air control temperature, then the zone inlet air temperature is set to the high air control temperature. If the outdoor air is between high and low air control temperature, then there is no cooling/heating requirements.")]
[JsonProperty(@"Air and control temperatures for cooling. If outdoor air temperature is above the high air control temperature, then the zone inlet air temperature is set to the high air control temperature. If the outdoor air is between high and low air control temperature, then there is no cooling/heating requirements.")]
public System.String HighAirControlTemperatureScheduleName { get; set; } = "";
        
[Description(@"Air and control temperatures for Heating. If outdoor air temperature is below the low air control temperature, then the zone inlet air temperature is set to the low air control temperature. If the outdoor air is between high and low air control temperature, then there is no cooling/heating requirements.")]
[JsonProperty(@"Air and control temperatures for Heating. If outdoor air temperature is below the low air control temperature, then the zone inlet air temperature is set to the low air control temperature. If the outdoor air is between high and low air control temperature, then there is no cooling/heating requirements.")]
public System.String LowAirControlTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutdoorAirNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String AiroutletNodeName { get; set; } = "";
        
[Description(@"air leaves zone")]
[JsonProperty(@"air leaves zone")]
public System.String AirinletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SupplyFanoutletNodeName { get; set; } = "";
        
[Description(@"Enter the name of an ZoneHVAC:OutdoorAirUnit:EquipmentList object.")]
[JsonProperty(@"Enter the name of an ZoneHVAC:OutdoorAirUnit:EquipmentList object.")]
public System.String OutdoorAirUnitListName { get; set; } = "";
        
[Description(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
public System.String AvailabilityManagerListName { get; set; } = "";
    }
    
    public enum SupplyFanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum UnitControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("NeutralControl")]
        NeutralControl = 1,
        
        [JsonProperty("TemperatureControl")]
        TemperatureControl = 2,
    }
    
    [Description("Equipment list for components in a ZoneHVAC:OutdoorAirUnit. Components are simula" +
        "ted sequentially in the order given in the equipment list.")]
    [JsonObject("ZoneHVAC:OutdoorAirUnit:EquipmentList")]
    public class ZoneHVAC_OutdoorAirUnit_EquipmentList
    {
        
[JsonProperty(@"")]
public YesNoDefault ComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault ComponentObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String ComponentName { get; set; } = "";
    }
    
    public enum ComponentObjectTypeType
    {
        
        [JsonProperty("AirLoopHVAC:UnitarySystem")]
        AirLoopHVACUnitarySystem = 0,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 1,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 2,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 3,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 4,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 5,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 6,
        
        [JsonProperty("CoilSystem:Cooling:DX")]
        CoilSystemCoolingDX = 7,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatexchangerAssisted")]
        CoilSystemCoolingWaterHeatexchangerAssisted = 8,
        
        [JsonProperty("CoilSystem:Heating:DX")]
        CoilSystemHeatingDX = 9,
        
        [JsonProperty("Dehumidifier:Desiccant:NoFans")]
        DehumidifierDesiccantNoFans = 10,
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 11,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 12,
    }
    
    public enum ComponentObjectTypeType
    {
        
        [JsonProperty("AirLoopHVAC:UnitarySystem")]
        AirLoopHVACUnitarySystem = 0,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 1,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 2,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 3,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 4,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 5,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 6,
        
        [JsonProperty("CoilSystem:Cooling:DX")]
        CoilSystemCoolingDX = 7,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatexchangerAssisted")]
        CoilSystemCoolingWaterHeatexchangerAssisted = 8,
        
        [JsonProperty("CoilSystem:Heating:DX")]
        CoilSystemHeatingDX = 9,
        
        [JsonProperty("Dehumidifier:Desiccant:NoFans")]
        DehumidifierDesiccantNoFans = 10,
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 11,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 12,
    }
    
    public enum ComponentObjectTypeType
    {
        
        [JsonProperty("AirLoopHVAC:UnitarySystem")]
        AirLoopHVACUnitarySystem = 0,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 1,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 2,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 3,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 4,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 5,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 6,
        
        [JsonProperty("CoilSystem:Cooling:DX")]
        CoilSystemCoolingDX = 7,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatexchangerAssisted")]
        CoilSystemCoolingWaterHeatexchangerAssisted = 8,
        
        [JsonProperty("CoilSystem:Heating:DX")]
        CoilSystemHeatingDX = 9,
        
        [JsonProperty("Dehumidifier:Desiccant:NoFans")]
        DehumidifierDesiccantNoFans = 10,
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 11,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 12,
    }
    
    public enum ComponentObjectTypeType
    {
        
        [JsonProperty("AirLoopHVAC:UnitarySystem")]
        AirLoopHVACUnitarySystem = 0,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 1,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 2,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 3,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 4,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 5,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 6,
        
        [JsonProperty("CoilSystem:Cooling:DX")]
        CoilSystemCoolingDX = 7,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatexchangerAssisted")]
        CoilSystemCoolingWaterHeatexchangerAssisted = 8,
        
        [JsonProperty("CoilSystem:Heating:DX")]
        CoilSystemHeatingDX = 9,
        
        [JsonProperty("Dehumidifier:Desiccant:NoFans")]
        DehumidifierDesiccantNoFans = 10,
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 11,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 12,
    }
    
    public enum ComponentObjectTypeType
    {
        
        [JsonProperty("AirLoopHVAC:UnitarySystem")]
        AirLoopHVACUnitarySystem = 0,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 1,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 2,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 3,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 4,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 5,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 6,
        
        [JsonProperty("CoilSystem:Cooling:DX")]
        CoilSystemCoolingDX = 7,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatexchangerAssisted")]
        CoilSystemCoolingWaterHeatexchangerAssisted = 8,
        
        [JsonProperty("CoilSystem:Heating:DX")]
        CoilSystemHeatingDX = 9,
        
        [JsonProperty("Dehumidifier:Desiccant:NoFans")]
        DehumidifierDesiccantNoFans = 10,
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 11,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 12,
    }
    
    public enum ComponentObjectTypeType
    {
        
        [JsonProperty("AirLoopHVAC:UnitarySystem")]
        AirLoopHVACUnitarySystem = 0,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 1,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 2,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 3,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 4,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 5,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 6,
        
        [JsonProperty("CoilSystem:Cooling:DX")]
        CoilSystemCoolingDX = 7,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatexchangerAssisted")]
        CoilSystemCoolingWaterHeatexchangerAssisted = 8,
        
        [JsonProperty("CoilSystem:Heating:DX")]
        CoilSystemHeatingDX = 9,
        
        [JsonProperty("Dehumidifier:Desiccant:NoFans")]
        DehumidifierDesiccantNoFans = 10,
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 11,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 12,
    }
    
    public enum ComponentObjectTypeType
    {
        
        [JsonProperty("AirLoopHVAC:UnitarySystem")]
        AirLoopHVACUnitarySystem = 0,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 1,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 2,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 3,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 4,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 5,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 6,
        
        [JsonProperty("CoilSystem:Cooling:DX")]
        CoilSystemCoolingDX = 7,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatexchangerAssisted")]
        CoilSystemCoolingWaterHeatexchangerAssisted = 8,
        
        [JsonProperty("CoilSystem:Heating:DX")]
        CoilSystemHeatingDX = 9,
        
        [JsonProperty("Dehumidifier:Desiccant:NoFans")]
        DehumidifierDesiccantNoFans = 10,
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 11,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 12,
    }
    
    public enum ComponentObjectTypeType
    {
        
        [JsonProperty("AirLoopHVAC:UnitarySystem")]
        AirLoopHVACUnitarySystem = 0,
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 1,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 2,
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 3,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 4,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 5,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 6,
        
        [JsonProperty("CoilSystem:Cooling:DX")]
        CoilSystemCoolingDX = 7,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatexchangerAssisted")]
        CoilSystemCoolingWaterHeatexchangerAssisted = 8,
        
        [JsonProperty("CoilSystem:Heating:DX")]
        CoilSystemHeatingDX = 9,
        
        [JsonProperty("Dehumidifier:Desiccant:NoFans")]
        DehumidifierDesiccantNoFans = 10,
        
        [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
        HeatExchangerAirToAirFlatPlate = 11,
        
        [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
        HeatExchangerAirToAirSensibleAndLatent = 12,
    }
    
    [Description(@"A terminal unit with variable refrigerant flow (VRF) DX cooling and heating coils (air-to-air heat pump). The VRF terminal units are served by an AirConditioner:VariableRefrigerantFlow or AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:* system. Terminal units can be configured as zone, air loop or outside air system equipment.")]
    [JsonObject("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")]
    public class ZoneHVAC_TerminalUnit_VariableRefrigerantFlow
    {
        
[Description(@"The unit is available the entire simulation if this field is left blank Schedule values of 0 denote the unit is off.")]
[JsonProperty(@"The unit is available the entire simulation if this field is left blank Schedule values of 0 denote the unit is off.")]
public System.String TerminalUnitAvailabilitySchedule { get; set; } = "";
        
[Description(@"the inlet node to the terminal unit")]
[JsonProperty(@"the inlet node to the terminal unit")]
public System.String TerminalUnitAirInletNodeName { get; set; } = "";
        
[Description(@"the outlet node of the terminal unit")]
[JsonProperty(@"the outlet node of the terminal unit")]
public System.String TerminalUnitAirOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoolingSupplyAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String NoCoolingSupplyAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatingSupplyAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String NoHeatingSupplyAirFlowRate { get; set; } = "";
        
[Description(@"This field is used only when an oudoor air mixer is included. This field is set to zero flow when the VRF terminal unit is connected to central dedicated outdoor air through air terminal single duct mixer object. When this VRF terminal is used as air loop equipment the autosized flow rate will be set to 0 when an outdoor air system is connected to this air loop, otherwise the outdoor air flow rate will equal the maximum outdoor air flow rate.")]
[JsonProperty(@"This field is used only when an oudoor air mixer is included. This field is set to zero flow when the VRF terminal unit is connected to central dedicated outdoor air through air terminal single duct mixer object. When this VRF terminal is used as air loop equipment the autosized flow rate will be set to 0 when an outdoor air system is connected to this air loop, otherwise the outdoor air flow rate will equal the maximum outdoor air flow rate.")]
public System.String CoolingOutdoorAirFlowRate { get; set; } = "";
        
[Description(@"This field is used only when an oudoor air mixer is included. This field is set to zero flow when the VRF terminal unit is connected to central dedicated outdoor air through air terminal single duct mixer object. When this VRF terminal is used as air loop equipment the autosized flow rate will be set to 0 when an outdoor air system is connected to this air loop, otherwise the outdoor air flow rate will equal the maximum outdoor air flow rate.")]
[JsonProperty(@"This field is used only when an oudoor air mixer is included. This field is set to zero flow when the VRF terminal unit is connected to central dedicated outdoor air through air terminal single duct mixer object. When this VRF terminal is used as air loop equipment the autosized flow rate will be set to 0 when an outdoor air system is connected to this air loop, otherwise the outdoor air flow rate will equal the maximum outdoor air flow rate.")]
public System.String HeatingOutdoorAirFlowRate { get; set; } = "";
        
[Description(@"This field is used only when an oudoor air mixer is included. This field is set to zero flow when the VRF terminal unit is connected to central dedicated outdoor air through air terminal single duct mixer object. When this VRF terminal is used as air loop equipment the autosized flow rate will be set to 0 when an outdoor air system is connected to this air loop, otherwise the outdoor air flow rate will equal the maximum outdoor air flow rate.")]
[JsonProperty(@"This field is used only when an oudoor air mixer is included. This field is set to zero flow when the VRF terminal unit is connected to central dedicated outdoor air through air terminal single duct mixer object. When this VRF terminal is used as air loop equipment the autosized flow rate will be set to 0 when an outdoor air system is connected to this air loop, otherwise the outdoor air flow rate will equal the maximum outdoor air flow rate.")]
public System.String NoLoadOutdoorAirFlowRate { get; set; } = "";
        
[Description(@"Required for zone equipment. Leave blank if terminal unit is used in AirLoopHVAC:OutdoorAirSystem:EquipmentList. Also leave blank if terminal unit is used on main AirloopHVAC branch and terminal unit has no fan.")]
[JsonProperty(@"Required for zone equipment. Leave blank if terminal unit is used in AirLoopHVAC:OutdoorAirSystem:EquipmentList. Also leave blank if terminal unit is used on main AirloopHVAC branch and terminal unit has no fan.")]
public System.String SupplyAirFanOperatingModeScheduleName { get; set; } = "";
        
[Description(@"Select fan placement as either blow through or draw through. Required for zone equipment. This field is ignored if the VRF terminal unit is used in AirLoopHVAC:OutdoorAirSystem:EquipmentList. This field is also ignored if VRF terminal unit is used on main AirloopHVAC branch and terminal unit has no fan.")]
[JsonProperty(@"Select fan placement as either blow through or draw through. Required for zone equipment. This field is ignored if the VRF terminal unit is used in AirLoopHVAC:OutdoorAirSystem:EquipmentList. This field is also ignored if VRF terminal unit is used on main AirloopHVAC branch and terminal unit has no fan.")]
public YesNoDefault SupplyAirFanPlacement { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "BlowThrough");
        
[Description(@"Supply Air Fan Object Type must be Fan:SystemModel, Fan:OnOff, or Fan:ConstantVolume if AirConditioner:VariableRefrigerantFlow is used to model VRF outdoor unit Supply Air Fan Object Type must be Fan:SystemModel or Fan:VariableVolume if AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl or AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR is used to model VRF outdoor unit Required for zone equipment. Leave blank if terminal unit is used in AirLoopHVAC:OutdoorAirSystem:EquipmentList. Also leave blank if terminal unit is used on main AirloopHVAC branch and terminal unit has no fan.")]
[JsonProperty(@"Supply Air Fan Object Type must be Fan:SystemModel, Fan:OnOff, or Fan:ConstantVolume if AirConditioner:VariableRefrigerantFlow is used to model VRF outdoor unit Supply Air Fan Object Type must be Fan:SystemModel or Fan:VariableVolume if AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl or AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR is used to model VRF outdoor unit Required for zone equipment. Leave blank if terminal unit is used in AirLoopHVAC:OutdoorAirSystem:EquipmentList. Also leave blank if terminal unit is used on main AirloopHVAC branch and terminal unit has no fan.")]
public YesNoDefault SupplyAirFanObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Fan:ConstantVolume");
        
[JsonProperty(@"")]
public System.String SupplyAirFanObjectName { get; set; } = "";
        
[Description(@"Currently only one type OutdoorAir:Mixer object is available. If this field is blank, and outside air mixer is not used. This field should be left blank if the VRF terminal unit is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object. This field may also be left blank when the VRF terminal is used in the air loop or outdoor air system.")]
[JsonProperty(@"Currently only one type OutdoorAir:Mixer object is available. If this field is blank, and outside air mixer is not used. This field should be left blank if the VRF terminal unit is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object. This field may also be left blank when the VRF terminal is used in the air loop or outdoor air system.")]
public YesNoDefault OutsideAirMixerObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"If this field is blank, the OutdoorAir:Mixer is not used. This optional field specifies the name of the OutdoorAir:Mixer object. When used, this name needs to match name of the OutdoorAir:Mixer object. This field should be left blank if the VRF terminal unit is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object. This field may also be left blank when the VRF terminal is used in the air loop or outdoor air system.")]
[JsonProperty(@"If this field is blank, the OutdoorAir:Mixer is not used. This optional field specifies the name of the OutdoorAir:Mixer object. When used, this name needs to match name of the OutdoorAir:Mixer object. This field should be left blank if the VRF terminal unit is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object. This field may also be left blank when the VRF terminal is used in the air loop or outdoor air system.")]
public System.String OutsideAirMixerObjectName { get; set; } = "";
        
[Description(@"Cooling Coil Type must be Coil:Cooling:DX:VariableRefrigerantFlow if AirConditioner:VariableRefrigerantFlow is used to model VRF outdoor unit Cooling Coil Type must be Coil:Cooling:DX:VariableRefrigerantFlow:FluidTemperatureControl if AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl or if AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR is used to model VRF outdoor unit This field may be left blank if heating-only mode is used")]
[JsonProperty(@"Cooling Coil Type must be Coil:Cooling:DX:VariableRefrigerantFlow if AirConditioner:VariableRefrigerantFlow is used to model VRF outdoor unit Cooling Coil Type must be Coil:Cooling:DX:VariableRefrigerantFlow:FluidTemperatureControl if AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl or if AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR is used to model VRF outdoor unit This field may be left blank if heating-only mode is used")]
public YesNoDefault CoolingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Cooling Coil Type must be Coil:Cooling:DX:VariableRefrigerantFlow This field may be left blank if heating-only mode is used")]
[JsonProperty(@"Cooling Coil Type must be Coil:Cooling:DX:VariableRefrigerantFlow This field may be left blank if heating-only mode is used")]
public System.String CoolingCoilObjectName { get; set; } = "";
        
[Description(@"Heating Coil Type must be Coil:Heating:DX:VariableRefrigerantFlow if AirConditioner:VariableRefrigerantFlow is used to model VRF outdoor unit Heating Coil Type must be Coil:Heating:DX:VariableRefrigerantFlow:FluidTemperatureControl if AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl or if AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR is used to model VRF outdoor unit This field may be left blank if cooling-only mode is used")]
[JsonProperty(@"Heating Coil Type must be Coil:Heating:DX:VariableRefrigerantFlow if AirConditioner:VariableRefrigerantFlow is used to model VRF outdoor unit Heating Coil Type must be Coil:Heating:DX:VariableRefrigerantFlow:FluidTemperatureControl if AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl or if AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR is used to model VRF outdoor unit This field may be left blank if cooling-only mode is used")]
public YesNoDefault HeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Heating Coil Type must be Coil:Heating:DX:VariableRefrigerantFlow This field may be left blank if cooling-only mode is used")]
[JsonProperty(@"Heating Coil Type must be Coil:Heating:DX:VariableRefrigerantFlow This field may be left blank if cooling-only mode is used")]
public System.String HeatingCoilObjectName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single ZoneTerminalUnitOnParasiticElectricEnergyUse { get; set; } = 0;
        
[JsonProperty(@"")]
public System.Single ZoneTerminalUnitOffParasiticElectricEnergyUse { get; set; } = 0;
        
[Description(@"If this terminal unit's heating coil is autosized, the heating capacity is sized to be equal to the cooling capacity multiplied by this sizing ratio. This input applies to the terminal unit heating coil and overrides the sizing ratio entered in the AirConditioner:VariableRefrigerantFlow object.")]
[JsonProperty(@"If this terminal unit's heating coil is autosized, the heating capacity is sized to be equal to the cooling capacity multiplied by this sizing ratio. This input applies to the terminal unit heating coil and overrides the sizing ratio entered in the AirConditioner:VariableRefrigerantFlow object.")]
public System.Single RatedHeatingCapacitySizingRatio { get; set; } = 1;
        
[Description(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
public System.String AvailabilityManagerListName { get; set; } = "";
        
[Description(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
public System.String DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
        
[Description(@"works with gas, electric, hot water and steam heating coil.")]
[JsonProperty(@"works with gas, electric, hot water and steam heating coil.")]
public YesNoDefault SupplementalHeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Needs to match in the supplemental heating coil object.")]
[JsonProperty(@"Needs to match in the supplemental heating coil object.")]
public System.String SupplementalHeatingCoilName { get; set; } = "";
        
[Description(@"Supply air temperature from the supplemental heater will not exceed this value.")]
[JsonProperty(@"Supply air temperature from the supplemental heater will not exceed this value.")]
public System.String MaximumSupplyAirTemperatureFromSupplementalHeater { get; set; } = (System.String)Autosize;
        
[Description(@"Supplemental heater will not operate when outdoor temperature exceeds this value.")]
[JsonProperty(@"Supplemental heater will not operate when outdoor temperature exceeds this value.")]
public System.Single MaximumOutdoorDryBulbTemperatureForSupplementalHeaterOperation { get; set; } = 21;
        
[Description(@"Used only for AirloopHVAC equipment on a main branch and defines zone name where thermostat is located. Not required for zone equipment. Leave blank if terminal unit is used in AirLoopHVAC:OutdoorAirSystem:EquipmentList. Required when terminal unit is used on main AirloopHVAC branch and coils are not set point controlled. When terminal unit is used in air loop and is load controlled, this zone's thermostat will control operation.")]
[JsonProperty(@"Used only for AirloopHVAC equipment on a main branch and defines zone name where thermostat is located. Not required for zone equipment. Leave blank if terminal unit is used in AirLoopHVAC:OutdoorAirSystem:EquipmentList. Required when terminal unit is used on main AirloopHVAC branch and coils are not set point controlled. When terminal unit is used in air loop and is load controlled, this zone's thermostat will control operation.")]
public System.String ControllingZoneOrThermostatLocation { get; set; } = "";
    }
    
    public enum SupplyAirFanPlacementType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("BlowThrough")]
        BlowThrough = 1,
        
        [JsonProperty("DrawThrough")]
        DrawThrough = 2,
    }
    
    public enum SupplyAirFanObjectTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Fan:ConstantVolume")]
        FanConstantVolume = 1,
        
        [JsonProperty("Fan:OnOff")]
        FanOnOff = 2,
        
        [JsonProperty("Fan:SystemModel")]
        FanSystemModel = 3,
        
        [JsonProperty("Fan:VariableVolume")]
        FanVariableVolume = 4,
    }
    
    public enum OutsideAirMixerObjectTypeType
    {
        
        [JsonProperty("OutdoorAir:Mixer")]
        OutdoorAirMixer = 0,
    }
    
    public enum CoolingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:DX:VariableRefrigerantFlow")]
        CoilCoolingDXVariableRefrigerantFlow = 0,
        
        [JsonProperty("Coil:Cooling:DX:VariableRefrigerantFlow:FluidTemperatureControl")]
        CoilCoolingDXVariableRefrigerantFlowFluidTemperatureControl = 1,
    }
    
    public enum HeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:DX:VariableRefrigerantFlow")]
        CoilHeatingDXVariableRefrigerantFlow = 0,
        
        [JsonProperty("Coil:Heating:DX:VariableRefrigerantFlow:FluidTemperatureControl")]
        CoilHeatingDXVariableRefrigerantFlowFluidTemperatureControl = 1,
    }
    
    public enum SupplementalHeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
}
namespace EnergyPlus.ZoneHVACRadiativeConvectiveUnits
{
    using System.ComponentModel;
    using EnergyPlus;
    using System;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    
    
    [Description(null)]
    [JsonObject("ZoneHVAC:Baseboard:RadiantConvective:Water:Design")]
    public class ZoneHVAC_Baseboard_RadiantConvective_Water_Design
    {
        
[Description(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
[JsonProperty(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
public YesNoDefault HeatingDesignCapacityMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "HeatingDesignCapacity");
        
[Description(@"Enter the heating design capacity per zone floor area. Required field when the heating design capacity method field is CapacityPerFloorArea.")]
[JsonProperty(@"Enter the heating design capacity per zone floor area. Required field when the heating design capacity method field is CapacityPerFloorArea.")]
public System.Single HeatingDesignCapacityPerFloorArea { get; set; } = ;
        
[Description(@"Enter the fraction of autosized heating design capacity. Required field when capacity the heating design capacity method field is FractionOfAutosizedHeatingCapacity.")]
[JsonProperty(@"Enter the fraction of autosized heating design capacity. Required field when capacity the heating design capacity method field is FractionOfAutosizedHeatingCapacity.")]
public System.Single FractionOfAutosizedHeatingDesignCapacity { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single ConvergenceTolerance { get; set; } = 0.001;
        
[JsonProperty(@"")]
public System.Single FractionRadiant { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FractionOfRadiantEnergyIncidentOnPeople { get; set; } = ;
    }
    
    public enum HeatingDesignCapacityMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingCapacity")]
        FractionOfAutosizedHeatingCapacity = 2,
        
        [JsonProperty("HeatingDesignCapacity")]
        HeatingDesignCapacity = 3,
    }
    
    [Description("The number of surfaces can be expanded beyond 100, if necessary, by adding more g" +
        "roups to the end of the list")]
    [JsonObject("ZoneHVAC:Baseboard:RadiantConvective:Water")]
    public class ZoneHVAC_Baseboard_RadiantConvective_Water
    {
        
[JsonProperty(@"")]
public System.String DesignObject { get; set; } = "";
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[Description(@"Rated average water temperature is the average of the inlet and outlet water temperatures at rated conditions.")]
[JsonProperty(@"Rated average water temperature is the average of the inlet and outlet water temperatures at rated conditions.")]
public System.Single RatedAverageWaterTemperature { get; set; } = 87.78;
        
[Description(@"Standard is I=B=R Rating document where all baseboards are rated at either 0.063 kg/s (1 gpm) or 0.252 kg/s (4 gpm). It is recommended that users find data for the baseboard heater that corresponds to performance at 0.063 kg/s unless the flow rate is expected to be above 0.252 kg/s. If the flow rate is expected to be above 0.252 kg/s, this field should be 0.252 kg/s.")]
[JsonProperty(@"Standard is I=B=R Rating document where all baseboards are rated at either 0.063 kg/s (1 gpm) or 0.252 kg/s (4 gpm). It is recommended that users find data for the baseboard heater that corresponds to performance at 0.063 kg/s unless the flow rate is expected to be above 0.252 kg/s. If the flow rate is expected to be above 0.252 kg/s, this field should be 0.252 kg/s.")]
public System.Single RatedWaterMassFlowRate { get; set; } = 0.063;
        
[Description(@"Enter the design heating capacity. Required field when the heating design capacity method HeatingDesignCapacity. This input field is rated heating capacity. Users must multiply the actual finned length published in the literature to determine the rated capacity. Rated Capacity is for an inlet air dry-bulb temperature of 18.0C, the Rated Water Mass Flow Rate of 0.063kg/s or 0.252kg/s, and the Rated Average Water Temperature between 32.2C and 115.6C.")]
[JsonProperty(@"Enter the design heating capacity. Required field when the heating design capacity method HeatingDesignCapacity. This input field is rated heating capacity. Users must multiply the actual finned length published in the literature to determine the rated capacity. Rated Capacity is for an inlet air dry-bulb temperature of 18.0C, the Rated Water Mass Flow Rate of 0.063kg/s or 0.252kg/s, and the Rated Average Water Temperature between 32.2C and 115.6C.")]
public System.String HeatingDesignCapacity { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String MaximumWaterFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceFractions { get; set; } = "";
    }
    
    [Description(null)]
    [JsonObject("ZoneHVAC:Baseboard:RadiantConvective:Steam:Design")]
    public class ZoneHVAC_Baseboard_RadiantConvective_Steam_Design
    {
        
[Description(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity is selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea is selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
[JsonProperty(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity is selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea is selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
public YesNoDefault HeatingDesignCapacityMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "HeatingDesignCapacity");
        
[Description(@"Enter the heating design capacity per zone floor area. Required field when the heating design capacity method field is CapacityPerFloorArea.")]
[JsonProperty(@"Enter the heating design capacity per zone floor area. Required field when the heating design capacity method field is CapacityPerFloorArea.")]
public System.Single HeatingDesignCapacityPerFloorArea { get; set; } = ;
        
[Description(@"Enter the fraction of autosized heating design capacity. Required field when capacity the heating design capacity method field is FractionOfAutosizedHeatingCapacity.")]
[JsonProperty(@"Enter the fraction of autosized heating design capacity. Required field when capacity the heating design capacity method field is FractionOfAutosizedHeatingCapacity.")]
public System.Single FractionOfAutosizedHeatingDesignCapacity { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single ConvergenceTolerance { get; set; } = 0.001;
        
[JsonProperty(@"")]
public System.Single FractionRadiant { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FractionOfRadiantEnergyIncidentOnPeople { get; set; } = ;
    }
    
    public enum HeatingDesignCapacityMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingCapacity")]
        FractionOfAutosizedHeatingCapacity = 2,
        
        [JsonProperty("HeatingDesignCapacity")]
        HeatingDesignCapacity = 3,
    }
    
    [Description("The number of surfaces can be expanded beyond 100, if necessary, by adding more g" +
        "roups to the end of the list.")]
    [JsonObject("ZoneHVAC:Baseboard:RadiantConvective:Steam")]
    public class ZoneHVAC_Baseboard_RadiantConvective_Steam
    {
        
[JsonProperty(@"")]
public System.String DesignObject { get; set; } = "";
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[Description(@"Enter the design heating capacity. Required field when the heating design capacity method HeatingDesignCapacity.")]
[JsonProperty(@"Enter the design heating capacity. Required field when the heating design capacity method HeatingDesignCapacity.")]
public System.String HeatingDesignCapacity { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.Single DegreeOfSubcooling { get; set; } = 5;
        
[JsonProperty(@"")]
public System.String MaximumSteamFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String SurfaceFractions { get; set; } = "";
    }
    
    [Description("The number of surfaces can be expanded beyond 100, if necessary, by adding more g" +
        "roups to the end of the list")]
    [JsonObject("ZoneHVAC:Baseboard:RadiantConvective:Electric")]
    public class ZoneHVAC_Baseboard_RadiantConvective_Electric
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
[JsonProperty(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
public YesNoDefault HeatingDesignCapacityMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "HeatingDesignCapacity");
        
[Description(@"Enter the design heating capacity. Required field when the heating design capacity method HeatingDesignCapacity.")]
[JsonProperty(@"Enter the design heating capacity. Required field when the heating design capacity method HeatingDesignCapacity.")]
public System.String HeatingDesignCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Enter the heating design capacity per zone floor area. Required field when the heating design capacity method field is CapacityPerFloorArea.")]
[JsonProperty(@"Enter the heating design capacity per zone floor area. Required field when the heating design capacity method field is CapacityPerFloorArea.")]
public System.Single HeatingDesignCapacityPerFloorArea { get; set; } = ;
        
[Description(@"Enter the fraction of autosized heating design capacity. Required field when capacity the heating design capacity method field is FractionOfAutosizedHeatingCapacity.")]
[JsonProperty(@"Enter the fraction of autosized heating design capacity. Required field when capacity the heating design capacity method field is FractionOfAutosizedHeatingCapacity.")]
public System.Single FractionOfAutosizedHeatingDesignCapacity { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single Efficiency { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single FractionRadiant { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FractionOfRadiantEnergyIncidentOnPeople { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceFractions { get; set; } = "";
    }
    
    public enum HeatingDesignCapacityMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingCapacity")]
        FractionOfAutosizedHeatingCapacity = 2,
        
        [JsonProperty("HeatingDesignCapacity")]
        HeatingDesignCapacity = 3,
    }
    
    [Description("The number of surfaces can be expanded beyond 100, if necessary, by adding more g" +
        "roups to the end of the list")]
    [JsonObject("ZoneHVAC:CoolingPanel:RadiantConvective:Water")]
    public class ZoneHVAC_CoolingPanel_RadiantConvective_Water
    {
        
[JsonProperty(@"")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String WaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single RatedInletWaterTemperature { get; set; } = 5;
        
[JsonProperty(@"")]
public System.Single RatedInletSpaceTemperature { get; set; } = 24;
        
[JsonProperty(@"")]
public System.Single RatedWaterMassFlowRate { get; set; } = 0.063;
        
[Description(@"Enter the method used to determine the cooling design capacity for scalable sizing. CoolingDesignCapacity => selected when the design cooling capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determined from user specified cooling capacity per floor area and total floor area of cooled zone served by the hydrolic unit. FractionOfAutosizedCoolingCapacity => is selected when the design cooling capacity is determined from a user specified fraction and the auto-sized design cooling capacity of the system.")]
[JsonProperty(@"Enter the method used to determine the cooling design capacity for scalable sizing. CoolingDesignCapacity => selected when the design cooling capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determined from user specified cooling capacity per floor area and total floor area of cooled zone served by the hydrolic unit. FractionOfAutosizedCoolingCapacity => is selected when the design cooling capacity is determined from a user specified fraction and the auto-sized design cooling capacity of the system.")]
public YesNoDefault CoolingDesignCapacityMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "CoolingDesignCapacity");
        
[Description(@"Enter the design cooling capacity. Required field when the cooling design capacity method CoolingDesignCapacity.")]
[JsonProperty(@"Enter the design cooling capacity. Required field when the cooling design capacity method CoolingDesignCapacity.")]
public System.String CoolingDesignCapacity { get; set; } = "";
        
[Description(@"Enter the cooling design capacity per total floor area of cooled zones served by the unit. Required field when the cooling design capacity method field is CapacityPerFloorArea.")]
[JsonProperty(@"Enter the cooling design capacity per total floor area of cooled zones served by the unit. Required field when the cooling design capacity method field is CapacityPerFloorArea.")]
public System.Single CoolingDesignCapacityPerFloorArea { get; set; } = ;
        
[Description(@"Enter the fraction of auto-sized cooling design capacity. Required field when the cooling design capacity method field is FractionOfAutosizedCoolingCapacity.")]
[JsonProperty(@"Enter the fraction of auto-sized cooling design capacity. Required field when the cooling design capacity method field is FractionOfAutosizedCoolingCapacity.")]
public System.Single FractionOfAutosizedCoolingDesignCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.String MaximumChilledWaterFlowRate { get; set; } = "";
        
[Description(@"Temperature on which unit is controlled")]
[JsonProperty(@"Temperature on which unit is controlled")]
public YesNoDefault ControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "MeanAirTemperature");
        
[JsonProperty(@"")]
public System.Single CoolingControlThrottlingRange { get; set; } = 0.5;
        
[JsonProperty(@"")]
public System.String CoolingControlTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CondensationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SimpleOff");
        
[JsonProperty(@"")]
public System.Single CondensationControlDewpointOffset { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single FractionRadiant { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single FractionOfRadiantEnergyIncidentOnPeople { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceFractions { get; set; } = "";
    }
    
    public enum CoolingDesignCapacityMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("CoolingDesignCapacity")]
        CoolingDesignCapacity = 2,
        
        [JsonProperty("FractionOfAutosizedCoolingCapacity")]
        FractionOfAutosizedCoolingCapacity = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum ControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MeanAirTemperature")]
        MeanAirTemperature = 1,
        
        [JsonProperty("MeanRadiantTemperature")]
        MeanRadiantTemperature = 2,
        
        [JsonProperty("OperativeTemperature")]
        OperativeTemperature = 3,
        
        [JsonProperty("OutdoorDryBulbTemperature")]
        OutdoorDryBulbTemperature = 4,
        
        [JsonProperty("OutdoorWetBulbTemperature")]
        OutdoorWetBulbTemperature = 5,
        
        [JsonProperty("ZoneConvectiveLoad")]
        ZoneConvectiveLoad = 6,
        
        [JsonProperty("ZoneTotalLoad")]
        ZoneTotalLoad = 7,
    }
    
    public enum CondensationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Off")]
        Off = 1,
        
        [JsonProperty("SimpleOff")]
        SimpleOff = 2,
        
        [JsonProperty("VariableOff")]
        VariableOff = 3,
    }
    
    [Description("Hot water baseboard heater, convection-only. Natural convection hydronic heating " +
        "unit.")]
    [JsonObject("ZoneHVAC:Baseboard:Convective:Water")]
    public class ZoneHVAC_Baseboard_Convective_Water
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String InletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String OutletNodeName { get; set; } = "";
        
[Description(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
[JsonProperty(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
public YesNoDefault HeatingDesignCapacityMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "HeatingDesignCapacity");
        
[Description(@"Enter the design heating capacity. Required field when the heating design capacity method HeatingDesignCapacity.")]
[JsonProperty(@"Enter the design heating capacity. Required field when the heating design capacity method HeatingDesignCapacity.")]
public System.String HeatingDesignCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Enter the heating design capacity per zone floor area. Required field when the heating design capacity method field is CapacityPerFloorArea.")]
[JsonProperty(@"Enter the heating design capacity per zone floor area. Required field when the heating design capacity method field is CapacityPerFloorArea.")]
public System.Single HeatingDesignCapacityPerFloorArea { get; set; } = ;
        
[Description(@"Enter the fraction of autosized heating design capacity. Required field when capacity the heating design capacity method field is FractionOfAutosizedHeatingCapacity.")]
[JsonProperty(@"Enter the fraction of autosized heating design capacity. Required field when capacity the heating design capacity method field is FractionOfAutosizedHeatingCapacity.")]
public System.Single FractionOfAutosizedHeatingDesignCapacity { get; set; } = 1;
        
[JsonProperty(@"")]
public System.String UFactorTimesAreaValue { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumWaterFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.Single ConvergenceTolerance { get; set; } = 0.001;
    }
    
    public enum HeatingDesignCapacityMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingCapacity")]
        FractionOfAutosizedHeatingCapacity = 2,
        
        [JsonProperty("HeatingDesignCapacity")]
        HeatingDesignCapacity = 3,
    }
    
    [Description("Electric baseboard heater, convection-only. Natural convection electric heating u" +
        "nit.")]
    [JsonObject("ZoneHVAC:Baseboard:Convective:Electric")]
    public class ZoneHVAC_Baseboard_Convective_Electric
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
[JsonProperty(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
public YesNoDefault HeatingDesignCapacityMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "HeatingDesignCapacity");
        
[Description(@"Enter the design heating capacity. Required field when the heating design capacity method HeatingDesignCapacity.")]
[JsonProperty(@"Enter the design heating capacity. Required field when the heating design capacity method HeatingDesignCapacity.")]
public System.String HeatingDesignCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Enter the heating design capacity per zone floor area. Required field when the heating design capacity method field is CapacityPerFloorArea.")]
[JsonProperty(@"Enter the heating design capacity per zone floor area. Required field when the heating design capacity method field is CapacityPerFloorArea.")]
public System.Single HeatingDesignCapacityPerFloorArea { get; set; } = ;
        
[Description(@"Enter the fraction of autosized heating design capacity. Required field when capacity the heating design capacity method field is FractionOfAutosizedHeatingCapacity.")]
[JsonProperty(@"Enter the fraction of autosized heating design capacity. Required field when capacity the heating design capacity method field is FractionOfAutosizedHeatingCapacity.")]
public System.Single FractionOfAutosizedHeatingDesignCapacity { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single Efficiency { get; set; } = 1;
    }
    
    public enum HeatingDesignCapacityMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingCapacity")]
        FractionOfAutosizedHeatingCapacity = 2,
        
        [JsonProperty("HeatingDesignCapacity")]
        HeatingDesignCapacity = 3,
    }
    
    [Description("Low temperature hydronic radiant heating and/or cooling system embedded in a buil" +
        "ding surface (wall, ceiling, or floor). Controlled by varying the hot or chilled" +
        " water flow to the unit.")]
    [JsonObject("ZoneHVAC:LowTemperatureRadiant:VariableFlow")]
    public class ZoneHVAC_LowTemperatureRadiant_VariableFlow
    {
        
[JsonProperty(@"")]
public System.String DesignObject { get; set; } = "";
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Name of zone system is serving")]
[JsonProperty(@"Name of zone system is serving")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Identifies surfaces that radiant system is embedded in. For a system with multiple surfaces, enter the name of a ZoneHVAC:LowTemperatureRadiant:SurfaceGroup object.")]
[JsonProperty(@"Identifies surfaces that radiant system is embedded in. For a system with multiple surfaces, enter the name of a ZoneHVAC:LowTemperatureRadiant:SurfaceGroup object.")]
public System.String SurfaceNameOrRadiantSurfaceGroupName { get; set; } = "";
        
[Description(@"(total length of pipe embedded in surface)")]
[JsonProperty(@"(total length of pipe embedded in surface)")]
public System.String HydronicTubingLength { get; set; } = (System.String)Autosize;
        
[Description(@"Enter the design heating capacity. Required field when the heating design capacity method HeatingDesignCapacity.")]
[JsonProperty(@"Enter the design heating capacity. Required field when the heating design capacity method HeatingDesignCapacity.")]
public System.String HeatingDesignCapacity { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String MaximumHotWaterFlow { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatingWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatingWaterOutletNodeName { get; set; } = "";
        
[Description(@"Enter the design cooling capacity. Required field when the cooling design capacity method CoolingDesignCapacity.")]
[JsonProperty(@"Enter the design cooling capacity. Required field when the cooling design capacity method CoolingDesignCapacity.")]
public System.String CoolingDesignCapacity { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumColdWaterFlow { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoolingWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoolingWaterOutletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault NumberOfCircuits { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "OnePerSurface");
        
[JsonProperty(@"")]
public System.Single CircuitLength { get; set; } = 106.7;
    }
    
    public enum NumberOfCircuitsType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CalculateFromCircuitLength")]
        CalculateFromCircuitLength = 1,
        
        [JsonProperty("OnePerSurface")]
        OnePerSurface = 2,
    }
    
    [Description(null)]
    [JsonObject("ZoneHVAC:LowTemperatureRadiant:VariableFlow:Design")]
    public class ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design
    {
        
[Description(@"This parameter identifies how the heat transfer between fluid being circulated through the radiant system and the radiant system (slab) is modeled. ConvectionOnly means that only convection between the fluid and the inside surface of the pipe is modeled using a conventional equation for flow inside a pipe. ISOStandard models convection between the fluid and the inside of of the pipe and conduction through the pipe material using equations specific to ISO Standard 11855-2.")]
[JsonProperty(@"This parameter identifies how the heat transfer between fluid being circulated through the radiant system and the radiant system (slab) is modeled. ConvectionOnly means that only convection between the fluid and the inside surface of the pipe is modeled using a conventional equation for flow inside a pipe. ISOStandard models convection between the fluid and the inside of of the pipe and conduction through the pipe material using equations specific to ISO Standard 11855-2.")]
public YesNoDefault FluidToRadiantSurfaceHeatTransferModel { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ConvectionOnly");
        
[JsonProperty(@"")]
public System.Single HydronicTubingInsideDiameter { get; set; } = 0.013;
        
[JsonProperty(@"")]
public System.Single HydronicTubingOutsideDiameter { get; set; } = 0.016;
        
[Description(@"Conductivity of the tubing/piping material")]
[JsonProperty(@"Conductivity of the tubing/piping material")]
public System.Single HydronicTubingConductivity { get; set; } = 0.35;
        
[Description(@"(Temperature on which unit is controlled)")]
[JsonProperty(@"(Temperature on which unit is controlled)")]
public YesNoDefault TemperatureControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "MeanAirTemperature");
        
[Description(@"How setpoint temperature is defined")]
[JsonProperty(@"How setpoint temperature is defined")]
public YesNoDefault SetpointControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "HalfFlowPower");
        
[Description(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
[JsonProperty(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
public YesNoDefault HeatingDesignCapacityMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "HeatingDesignCapacity");
        
[Description(@"Enter the heating design capacity per zone floor area. Required field when the heating design capacity method field is CapacityPerFloorArea.")]
[JsonProperty(@"Enter the heating design capacity per zone floor area. Required field when the heating design capacity method field is CapacityPerFloorArea.")]
public System.Single HeatingDesignCapacityPerFloorArea { get; set; } = ;
        
[Description(@"Enter the fraction of autosized heating design capacity. Required field when capacity the heating design capacity method field is FractionOfAutosizedHeatingCapacity.")]
[JsonProperty(@"Enter the fraction of autosized heating design capacity. Required field when capacity the heating design capacity method field is FractionOfAutosizedHeatingCapacity.")]
public System.Single FractionOfAutosizedHeatingDesignCapacity { get; set; } = 1;
        
[JsonProperty(@"")]
public System.Single HeatingControlThrottlingRange { get; set; } = 0.5;
        
[JsonProperty(@"")]
public System.String HeatingControlTemperatureScheduleName { get; set; } = "";
        
[Description(@"Enter the method used to determine the cooling design capacity for scalable sizing. CoolingDesignCapacity => selected when the design cooling capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determined from user specified cooling capacity per floor area and total floor area of cooled zone served by the hydrolic unit. FractionOfAutosizedCoolingCapacity => is selected when the design cooling capacity is determined from a user specified fraction and the auto-sized design cooling capacity of the system.")]
[JsonProperty(@"Enter the method used to determine the cooling design capacity for scalable sizing. CoolingDesignCapacity => selected when the design cooling capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determined from user specified cooling capacity per floor area and total floor area of cooled zone served by the hydrolic unit. FractionOfAutosizedCoolingCapacity => is selected when the design cooling capacity is determined from a user specified fraction and the auto-sized design cooling capacity of the system.")]
public YesNoDefault CoolingDesignCapacityMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "CoolingDesignCapacity");
        
[Description(@"Enter the cooling design capacity per total floor area of cooled zones served by the unit. Required field when the cooling design capacity method field is CapacityPerFloorArea.")]
[JsonProperty(@"Enter the cooling design capacity per total floor area of cooled zones served by the unit. Required field when the cooling design capacity method field is CapacityPerFloorArea.")]
public System.Single CoolingDesignCapacityPerFloorArea { get; set; } = ;
        
[Description(@"Enter the fraction of auto-sized cooling design capacity. Required field when the cooling design capacity method field is FractionOfAutosizedCoolingCapacity.")]
[JsonProperty(@"Enter the fraction of auto-sized cooling design capacity. Required field when the cooling design capacity method field is FractionOfAutosizedCoolingCapacity.")]
public System.Single FractionOfAutosizedCoolingDesignCapacity { get; set; } = ;
        
[JsonProperty(@"")]
public System.Single CoolingControlThrottlingRange { get; set; } = 0.5;
        
[JsonProperty(@"")]
public System.String CoolingControlTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CondensationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SimpleOff");
        
[JsonProperty(@"")]
public System.Single CondensationControlDewpointOffset { get; set; } = 1;
        
[Description(@"Changeover delay schedule name for this system. Schedule value <= 0 allows changeover with no delay The schedule values are interpretted as hours. If this field is blank, the system allows changeover with no delay")]
[JsonProperty(@"Changeover delay schedule name for this system. Schedule value <= 0 allows changeover with no delay The schedule values are interpretted as hours. If this field is blank, the system allows changeover with no delay")]
public System.String ChangeoverDelayTimePeriodSchedule { get; set; } = "";
    }
    
    public enum FluidToRadiantSurfaceHeatTransferModelType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConvectionOnly")]
        ConvectionOnly = 1,
        
        [JsonProperty("ISOStandard")]
        ISOStandard = 2,
    }
    
    public enum TemperatureControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MeanAirTemperature")]
        MeanAirTemperature = 1,
        
        [JsonProperty("MeanRadiantTemperature")]
        MeanRadiantTemperature = 2,
        
        [JsonProperty("OperativeTemperature")]
        OperativeTemperature = 3,
        
        [JsonProperty("OutdoorDryBulbTemperature")]
        OutdoorDryBulbTemperature = 4,
        
        [JsonProperty("OutdoorWetBulbTemperature")]
        OutdoorWetBulbTemperature = 5,
        
        [JsonProperty("SurfaceFaceTemperature")]
        SurfaceFaceTemperature = 6,
        
        [JsonProperty("SurfaceInteriorTemperature")]
        SurfaceInteriorTemperature = 7,
    }
    
    public enum SetpointControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("HalfFlowPower")]
        HalfFlowPower = 1,
        
        [JsonProperty("ZeroFlowPower")]
        ZeroFlowPower = 2,
    }
    
    public enum HeatingDesignCapacityMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingCapacity")]
        FractionOfAutosizedHeatingCapacity = 2,
        
        [JsonProperty("HeatingDesignCapacity")]
        HeatingDesignCapacity = 3,
    }
    
    public enum CoolingDesignCapacityMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("CoolingDesignCapacity")]
        CoolingDesignCapacity = 2,
        
        [JsonProperty("FractionOfAutosizedCoolingCapacity")]
        FractionOfAutosizedCoolingCapacity = 3,
        
        [JsonProperty("None")]
        None = 4,
    }
    
    public enum CondensationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Off")]
        Off = 1,
        
        [JsonProperty("SimpleOff")]
        SimpleOff = 2,
        
        [JsonProperty("VariableOff")]
        VariableOff = 3,
    }
    
    [Description("Low temperature hydronic radiant heating and/or cooling system embedded in a buil" +
        "ding surface (wall, ceiling, or floor). Controlled by varying the hot or chilled" +
        " water temperature circulating through the unit.")]
    [JsonObject("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")]
    public class ZoneHVAC_LowTemperatureRadiant_ConstantFlow
    {
        
[JsonProperty(@"")]
public System.String DesignObject { get; set; } = "";
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Name of zone system is serving")]
[JsonProperty(@"Name of zone system is serving")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Identifies surfaces that radiant system is embedded in. For a system with multiple surfaces, enter the name of a ZoneHVAC:LowTemperatureRadiant:SurfaceGroup object.")]
[JsonProperty(@"Identifies surfaces that radiant system is embedded in. For a system with multiple surfaces, enter the name of a ZoneHVAC:LowTemperatureRadiant:SurfaceGroup object.")]
public System.String SurfaceNameOrRadiantSurfaceGroupName { get; set; } = "";
        
[Description(@"(total length of pipe embedded in surface)")]
[JsonProperty(@"(total length of pipe embedded in surface)")]
public System.String HydronicTubingLength { get; set; } = (System.String)Autosize;
        
[JsonProperty(@"")]
public System.String RatedFlowRate { get; set; } = "";
        
[Description(@"Modifies the Rated Flow Rate of the pump on a time basis the default is that the pump is ON and runs according to its other operational requirements specified above. The schedule is for special pump operations. Values here are between 0 and 1 and are multipliers on the previous field (Rated Flow Rate).")]
[JsonProperty(@"Modifies the Rated Flow Rate of the pump on a time basis the default is that the pump is ON and runs according to its other operational requirements specified above. The schedule is for special pump operations. Values here are between 0 and 1 and are multipliers on the previous field (Rated Flow Rate).")]
public System.String PumpFlowRateScheduleName { get; set; } = "";
        
[Description(@"default head is 60 feet")]
[JsonProperty(@"default head is 60 feet")]
public System.Single RatedPumpHead { get; set; } = 179352;
        
[JsonProperty(@"")]
public System.Single RatedPowerConsumption { get; set; } = ;
        
[JsonProperty(@"")]
public System.String HeatingWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatingWaterOutletNodeName { get; set; } = "";
        
[Description(@"Water and control temperatures for heating work together to provide a linear function that determines the water temperature sent to the radiant system. The current control temperature (see Temperature Control Type above) is compared to the high and low control temperatures at the current time. If the control temperature is above the high temperature, then the inlet water temperature is set to the low water temperature. If the control temperature is below the low temperature, then the inlet water temperature is set to the high water temperature. If the control temperature is between the high and low value, then the inlet water temperature is linearly interpolated between the low and high water temperature values.")]
[JsonProperty(@"Water and control temperatures for heating work together to provide a linear function that determines the water temperature sent to the radiant system. The current control temperature (see Temperature Control Type above) is compared to the high and low control temperatures at the current time. If the control temperature is above the high temperature, then the inlet water temperature is set to the low water temperature. If the control temperature is below the low temperature, then the inlet water temperature is set to the high water temperature. If the control temperature is between the high and low value, then the inlet water temperature is linearly interpolated between the low and high water temperature values.")]
public System.String HeatingHighWaterTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatingLowWaterTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatingHighControlTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatingLowControlTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoolingWaterInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoolingWaterOutletNodeName { get; set; } = "";
        
[Description(@"See note for Heating High Water Temperature Schedule above for interpretation information (or see the Input/Output Reference).")]
[JsonProperty(@"See note for Heating High Water Temperature Schedule above for interpretation information (or see the Input/Output Reference).")]
public System.String CoolingHighWaterTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoolingLowWaterTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoolingHighControlTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoolingLowControlTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault NumberOfCircuits { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "OnePerSurface");
        
[JsonProperty(@"")]
public System.Single CircuitLength { get; set; } = 106.7;
    }
    
    public enum NumberOfCircuitsType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CalculateFromCircuitLength")]
        CalculateFromCircuitLength = 1,
        
        [JsonProperty("OnePerSurface")]
        OnePerSurface = 2,
    }
    
    [Description(null)]
    [JsonObject("ZoneHVAC:LowTemperatureRadiant:ConstantFlow:Design")]
    public class ZoneHVAC_LowTemperatureRadiant_ConstantFlow_Design
    {
        
[Description(@"This parameter identifies how the heat transfer between fluid being circulated through the radiant system and the radiant system (slab) is modeled. ConvectionOnly means that only convection between the fluid and the inside surface of the pipe is modeled using a conventional equation for flow inside a pipe. ISOStandard models convection between the fluid and the inside of of the pipe and conduction through the pipe material using equations specific to ISO Standard 11855-2.")]
[JsonProperty(@"This parameter identifies how the heat transfer between fluid being circulated through the radiant system and the radiant system (slab) is modeled. ConvectionOnly means that only convection between the fluid and the inside surface of the pipe is modeled using a conventional equation for flow inside a pipe. ISOStandard models convection between the fluid and the inside of of the pipe and conduction through the pipe material using equations specific to ISO Standard 11855-2.")]
public YesNoDefault FluidToRadiantSurfaceHeatTransferModel { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "ConvectionOnly");
        
[JsonProperty(@"")]
public System.Single HydronicTubingInsideDiameter { get; set; } = 0.013;
        
[JsonProperty(@"")]
public System.Single HydronicTubingOutsideDiameter { get; set; } = 0.016;
        
[Description(@"Conductivity of the tubing/piping material")]
[JsonProperty(@"Conductivity of the tubing/piping material")]
public System.Single HydronicTubingConductivity { get; set; } = 0.35;
        
[Description(@"Temperature used to control system")]
[JsonProperty(@"Temperature used to control system")]
public YesNoDefault TemperatureControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "MeanAirTemperature");
        
[Description(@"this is the weighting factor in the equation that calculate the running mean outdoor dry-bulb temperature as a weighted average of the previous dayâ€™s running mean outdoor dry-bulb temperature and the previous dayâ€™s average outdoor dry-bulb temperature this value is only used by EnergyPlus when the user elects to use the RunningMeanOutdoorDryBulbTemperature control type")]
[JsonProperty(@"this is the weighting factor in the equation that calculate the running mean outdoor dry-bulb temperature as a weighted average of the previous dayâ€™s running mean outdoor dry-bulb temperature and the previous dayâ€™s average outdoor dry-bulb temperature this value is only used by EnergyPlus when the user elects to use the RunningMeanOutdoorDryBulbTemperature control type")]
public System.Single RunningMeanOutdoorDryBulbTemperatureWeightingFactor { get; set; } = 0.8;
        
[JsonProperty(@"")]
public System.Single MotorEfficiency { get; set; } = 0.9;
        
[JsonProperty(@"")]
public System.Single FractionOfMotorInefficienciesToFluidStream { get; set; } = 0;
        
[JsonProperty(@"")]
public YesNoDefault CondensationControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SimpleOff");
        
[JsonProperty(@"")]
public System.Single CondensationControlDewpointOffset { get; set; } = 1;
        
[Description(@"Changeover delay schedule name for this system. Schedule value <= 0 allows changeover with no delay The schedule values are interpretted as hours. If this field is blank, the system allows changeover with no delay")]
[JsonProperty(@"Changeover delay schedule name for this system. Schedule value <= 0 allows changeover with no delay The schedule values are interpretted as hours. If this field is blank, the system allows changeover with no delay")]
public System.String ChangeoverDelayTimePeriodSchedule { get; set; } = "";
    }
    
    public enum FluidToRadiantSurfaceHeatTransferModelType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("ConvectionOnly")]
        ConvectionOnly = 1,
        
        [JsonProperty("ISOStandard")]
        ISOStandard = 2,
    }
    
    public enum TemperatureControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MeanAirTemperature")]
        MeanAirTemperature = 1,
        
        [JsonProperty("MeanRadiantTemperature")]
        MeanRadiantTemperature = 2,
        
        [JsonProperty("OperativeTemperature")]
        OperativeTemperature = 3,
        
        [JsonProperty("OutdoorDryBulbTemperature")]
        OutdoorDryBulbTemperature = 4,
        
        [JsonProperty("OutdoorWetBulbTemperature")]
        OutdoorWetBulbTemperature = 5,
        
        [JsonProperty("RunningMeanOutdoorDryBulbTemperature")]
        RunningMeanOutdoorDryBulbTemperature = 6,
        
        [JsonProperty("SurfaceFaceTemperature")]
        SurfaceFaceTemperature = 7,
        
        [JsonProperty("SurfaceInteriorTemperature")]
        SurfaceInteriorTemperature = 8,
    }
    
    public enum CondensationControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("Off")]
        Off = 1,
        
        [JsonProperty("SimpleOff")]
        SimpleOff = 2,
        
        [JsonProperty("VariableOff")]
        VariableOff = 3,
    }
    
    [Description("Electric resistance low temperature radiant system")]
    [JsonObject("ZoneHVAC:LowTemperatureRadiant:Electric")]
    public class ZoneHVAC_LowTemperatureRadiant_Electric
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Name of zone system is serving")]
[JsonProperty(@"Name of zone system is serving")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Identifies surfaces that radiant system is embedded in. For a system with multiple surfaces, enter the name of a ZoneHVAC:LowTemperatureRadiant:SurfaceGroup object.")]
[JsonProperty(@"Identifies surfaces that radiant system is embedded in. For a system with multiple surfaces, enter the name of a ZoneHVAC:LowTemperatureRadiant:SurfaceGroup object.")]
public System.String SurfaceNameOrRadiantSurfaceGroupName { get; set; } = "";
        
[Description(@"Enter the method used to determine the maximum electrical heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
[JsonProperty(@"Enter the method used to determine the maximum electrical heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
public YesNoDefault HeatingDesignCapacityMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "HeatingDesignCapacity");
        
[Description(@"Enter the design heating capacity. Required field when the heating design capacity method HeatingDesignCapacity.")]
[JsonProperty(@"Enter the design heating capacity. Required field when the heating design capacity method HeatingDesignCapacity.")]
public System.String HeatingDesignCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Enter the heating design capacity per zone floor area. Required field when the heating design capacity method field is CapacityPerFloorArea.")]
[JsonProperty(@"Enter the heating design capacity per zone floor area. Required field when the heating design capacity method field is CapacityPerFloorArea.")]
public System.Single HeatingDesignCapacityPerFloorArea { get; set; } = ;
        
[Description(@"Enter the fraction of autosized heating design capacity. Required field when capacity the heating design capacity method field is FractionOfAutosizedHeatingCapacity.")]
[JsonProperty(@"Enter the fraction of autosized heating design capacity. Required field when capacity the heating design capacity method field is FractionOfAutosizedHeatingCapacity.")]
public System.Single FractionOfAutosizedHeatingDesignCapacity { get; set; } = 1;
        
[Description(@"Temperature used to control unit")]
[JsonProperty(@"Temperature used to control unit")]
public YesNoDefault TemperatureControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "MeanAirTemperature");
        
[Description(@"How setpoint temperature is defined")]
[JsonProperty(@"How setpoint temperature is defined")]
public YesNoDefault SetpointControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "HalfFlowPower");
        
[JsonProperty(@"")]
public System.Single HeatingThrottlingRange { get; set; } = 0;
        
[JsonProperty(@"")]
public System.String HeatingSetpointTemperatureScheduleName { get; set; } = "";
    }
    
    public enum HeatingDesignCapacityMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingCapacity")]
        FractionOfAutosizedHeatingCapacity = 2,
        
        [JsonProperty("HeatingDesignCapacity")]
        HeatingDesignCapacity = 3,
    }
    
    public enum TemperatureControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MeanAirTemperature")]
        MeanAirTemperature = 1,
        
        [JsonProperty("MeanRadiantTemperature")]
        MeanRadiantTemperature = 2,
        
        [JsonProperty("OperativeTemperature")]
        OperativeTemperature = 3,
        
        [JsonProperty("OutdoorDryBulbTemperature")]
        OutdoorDryBulbTemperature = 4,
        
        [JsonProperty("OutdoorWetBulbTemperature")]
        OutdoorWetBulbTemperature = 5,
        
        [JsonProperty("SurfaceFaceTemperature")]
        SurfaceFaceTemperature = 6,
        
        [JsonProperty("SurfaceInteriorTemperature")]
        SurfaceInteriorTemperature = 7,
    }
    
    public enum SetpointControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("HalfFlowPower")]
        HalfFlowPower = 1,
        
        [JsonProperty("ZeroFlowPower")]
        ZeroFlowPower = 2,
    }
    
    [Description("This is used to allow the coordinate control of several radiant system surfaces. " +
        "Note that the following flow fractions must sum up to 1.0 The number of surfaces" +
        " can be expanded beyond 100, if necessary, by adding more groups to the end of t" +
        "he list")]
    [JsonObject("ZoneHVAC:LowTemperatureRadiant:SurfaceGroup")]
    public class ZoneHVAC_LowTemperatureRadiant_SurfaceGroup
    {
        
[JsonProperty(@"")]
public System.String SurfaceFractions { get; set; } = "";
    }
    
    [Description("The number of surfaces can be expanded beyond 100, if necessary, by adding more g" +
        "roups to the end of the list")]
    [JsonObject("ZoneHVAC:HighTemperatureRadiant")]
    public class ZoneHVAC_HighTemperatureRadiant
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"Name of zone system is serving")]
[JsonProperty(@"Name of zone system is serving")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"Enter the method used to determine the maximum heating power input capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
[JsonProperty(@"Enter the method used to determine the maximum heating power input capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
public YesNoDefault HeatingDesignCapacityMethod { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "HeatingDesignCapacity");
        
[Description(@"Enter the design heating capacity. Required field when the heating design capacity method HeatingDesignCapacity.")]
[JsonProperty(@"Enter the design heating capacity. Required field when the heating design capacity method HeatingDesignCapacity.")]
public System.String HeatingDesignCapacity { get; set; } = (System.String)Autosize;
        
[Description(@"Enter the heating design capacity per zone floor area. Required field when the heating design capacity method field is CapacityPerFloorArea.")]
[JsonProperty(@"Enter the heating design capacity per zone floor area. Required field when the heating design capacity method field is CapacityPerFloorArea.")]
public System.Single HeatingDesignCapacityPerFloorArea { get; set; } = ;
        
[Description(@"Enter the fraction of autosized heating design capacity. Required field when capacity the heating design capacity method field is FractionOfAutosizedHeatingCapacity.")]
[JsonProperty(@"Enter the fraction of autosized heating design capacity. Required field when capacity the heating design capacity method field is FractionOfAutosizedHeatingCapacity.")]
public System.Single FractionOfAutosizedHeatingDesignCapacity { get; set; } = 1;
        
[Description(@"Natural gas or electricity")]
[JsonProperty(@"Natural gas or electricity")]
public YesNoDefault FuelType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[Description(@"Not used for non-gas radiant heaters")]
[JsonProperty(@"Not used for non-gas radiant heaters")]
public System.Single CombustionEfficiency { get; set; } = 0.9;
        
[Description(@"Radiant+latent+lost fractions must sum to 1 or less, remainder is considered convective heat")]
[JsonProperty(@"Radiant+latent+lost fractions must sum to 1 or less, remainder is considered convective heat")]
public System.Single FractionOfInputConvertedToRadiantEnergy { get; set; } = 0.7;
        
[JsonProperty(@"")]
public System.Single FractionOfInputConvertedToLatentEnergy { get; set; } = 0;
        
[Description(@"Fraction of input vented to outdoor environment")]
[JsonProperty(@"Fraction of input vented to outdoor environment")]
public System.Single FractionOfInputThatIsLost { get; set; } = 0;
        
[Description(@"Temperature type used to control unit")]
[JsonProperty(@"Temperature type used to control unit")]
public YesNoDefault TemperatureControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "OperativeTemperature");
        
[JsonProperty(@"")]
public System.Single HeatingThrottlingRange { get; set; } = 2;
        
[Description(@"This setpoint is an "operative temperature" setpoint")]
[JsonProperty(@"This setpoint is an "operative temperature" setpoint")]
public System.String HeatingSetpointTemperatureScheduleName { get; set; } = "";
        
[Description(@"This will affect thermal comfort but from an energy balance standpoint this value gets added to the convective gains from the radiant heater")]
[JsonProperty(@"This will affect thermal comfort but from an energy balance standpoint this value gets added to the convective gains from the radiant heater")]
public System.Single FractionOfRadiantEnergyIncidentOnPeople { get; set; } = ;
        
[JsonProperty(@"")]
public System.String SurfaceFractions { get; set; } = "";
    }
    
    public enum HeatingDesignCapacityMethodType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("CapacityPerFloorArea")]
        CapacityPerFloorArea = 1,
        
        [JsonProperty("FractionOfAutosizedHeatingCapacity")]
        FractionOfAutosizedHeatingCapacity = 2,
        
        [JsonProperty("HeatingDesignCapacity")]
        HeatingDesignCapacity = 3,
    }
    
    public enum FuelTypeType
    {
        
        [JsonProperty("Electricity")]
        Electricity = 0,
        
        [JsonProperty("NaturalGas")]
        NaturalGas = 1,
    }
    
    public enum TemperatureControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MeanAirTemperature")]
        MeanAirTemperature = 1,
        
        [JsonProperty("MeanAirTemperatureSetpoint")]
        MeanAirTemperatureSetpoint = 2,
        
        [JsonProperty("MeanRadiantTemperature")]
        MeanRadiantTemperature = 3,
        
        [JsonProperty("MeanRadiantTemperatureSetpoint")]
        MeanRadiantTemperatureSetpoint = 4,
        
        [JsonProperty("OperativeTemperature")]
        OperativeTemperature = 5,
        
        [JsonProperty("OperativeTemperatureSetpoint")]
        OperativeTemperatureSetpoint = 6,
    }
    
    [Description("Ventilated slab system where outdoor air flows through hollow cores in a building" +
        " surface (wall, ceiling, or floor).")]
    [JsonObject("ZoneHVAC:VentilatedSlab")]
    public class ZoneHVAC_VentilatedSlab
    {
        
[Description(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
[JsonProperty(@"Availability schedule name for this system. Schedule value > 0 means the system is available. If this field is blank, the system is always available.")]
public System.String AvailabilityScheduleName { get; set; } = "";
        
[Description(@"(name of zone system is serving)")]
[JsonProperty(@"(name of zone system is serving)")]
public System.String ZoneName { get; set; } = "";
        
[Description(@"(name of surface system is embedded in) or list of surfaces")]
[JsonProperty(@"(name of surface system is embedded in) or list of surfaces")]
public System.String SurfaceNameOrRadiantSurfaceGroupName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MaximumAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault OutdoorAirControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String MinimumOutdoorAirFlowRate { get; set; } = "";
        
[JsonProperty(@"")]
public System.String MinimumOutdoorAirScheduleName { get; set; } = "";
        
[Description(@"schedule values multiply the minimum outdoor air flow rate")]
[JsonProperty(@"schedule values multiply the minimum outdoor air flow rate")]
public System.String MaximumOutdoorAirFlowRate { get; set; } = "";
        
[Description(@"Note that this depends on the control type as to whether schedule values are a fraction or temperature")]
[JsonProperty(@"Note that this depends on the control type as to whether schedule values are a fraction or temperature")]
public System.String MaximumOutdoorAirFractionOrTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault SystemConfigurationType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "SlabOnly");
        
[JsonProperty(@"")]
public System.Single HollowCoreInsideDiameter { get; set; } = 0.05;
        
[Description(@"(length of core cavity embedded in surface)")]
[JsonProperty(@"(length of core cavity embedded in surface)")]
public System.Single HollowCoreLength { get; set; } = ;
        
[Description(@"flow will be divided evenly among the cores")]
[JsonProperty(@"flow will be divided evenly among the cores")]
public System.Single NumberOfCores { get; set; } = ;
        
[Description(@"(temperature on which unit is controlled)")]
[JsonProperty(@"(temperature on which unit is controlled)")]
public YesNoDefault TemperatureControlType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "OutdoorDryBulbTemperature");
        
[Description(@"Air and control temperatures for heating work together to provide a linear function that determines the air temperature sent to the radiant system. The current control temperature (see A14) is compared to the high and low control temperatures at the current time. If the control temperature is above the high temperature, then the inlet air temperature is set to the low air temperature. If the control temperature is below the low temperature, then the inlet air temperature is set to the high air temperature. If the control temperature is between the high and low value, then the inlet air temperature is linearly interpolated between the low and high air temperature values.")]
[JsonProperty(@"Air and control temperatures for heating work together to provide a linear function that determines the air temperature sent to the radiant system. The current control temperature (see A14) is compared to the high and low control temperatures at the current time. If the control temperature is above the high temperature, then the inlet air temperature is set to the low air temperature. If the control temperature is below the low temperature, then the inlet air temperature is set to the high air temperature. If the control temperature is between the high and low value, then the inlet air temperature is linearly interpolated between the low and high air temperature values.")]
public System.String HeatingHighAirTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatingLowAirTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatingHighControlTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HeatingLowControlTemperatureScheduleName { get; set; } = "";
        
[Description(@"See note for heating high air temperature schedule above for interpretation information (or see the Input/Output Reference).")]
[JsonProperty(@"See note for heating high air temperature schedule above for interpretation information (or see the Input/Output Reference).")]
public System.String CoolingHighAirTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoolingLowAirTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoolingHighControlTemperatureScheduleName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String CoolingLowControlTemperatureScheduleName { get; set; } = "";
        
[Description(@"This is the zone return air inlet to the ventilated slab system outdoor air mixer. This node is typically a zone exhaust node (do not connect to "Zone Return Air Node").")]
[JsonProperty(@"This is the zone return air inlet to the ventilated slab system outdoor air mixer. This node is typically a zone exhaust node (do not connect to "Zone Return Air Node").")]
public System.String ReturnAirNodeName { get; set; } = "";
        
[Description(@"This is the node entering the slab or series of slabs after the fan and coil(s).")]
[JsonProperty(@"This is the node entering the slab or series of slabs after the fan and coil(s).")]
public System.String SlabInNodeName { get; set; } = "";
        
[Description(@"This is the node name exiting the slab. This node is typically a zone inlet node. Leave blank when the system configuration is SlabOnly or SeriesSlabs.")]
[JsonProperty(@"This is the node name exiting the slab. This node is typically a zone inlet node. Leave blank when the system configuration is SlabOnly or SeriesSlabs.")]
public System.String ZoneSupplyAirNodeName { get; set; } = "";
        
[Description(@"This node is the outdoor air inlet to the ventilated slab oa mixer. This node should also be specified in an OutdoorAir:Node or OutdoorAir:NodeList object.")]
[JsonProperty(@"This node is the outdoor air inlet to the ventilated slab oa mixer. This node should also be specified in an OutdoorAir:Node or OutdoorAir:NodeList object.")]
public System.String OutdoorAirNodeName { get; set; } = "";
        
[Description(@"This node is the relief air node from the ventilated slab outdoor air mixer.")]
[JsonProperty(@"This node is the relief air node from the ventilated slab outdoor air mixer.")]
public System.String ReliefAirNodeName { get; set; } = "";
        
[Description(@"This is the node name leaving the outdoor air mixer and entering the fan and coil(s).")]
[JsonProperty(@"This is the node name leaving the outdoor air mixer and entering the fan and coil(s).")]
public System.String OutdoorAirMixerOutletNodeName { get; set; } = "";
        
[Description(@"This is the node name of the fan outlet.")]
[JsonProperty(@"This is the node name of the fan outlet.")]
public System.String FanOutletNodeName { get; set; } = "";
        
[Description(@"Allowable fan types are Fan:SystemModel and Fan:ConstantVolume")]
[JsonProperty(@"Allowable fan types are Fan:SystemModel and Fan:ConstantVolume")]
public System.String FanName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CoilOptionType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public YesNoDefault HeatingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String HeatingCoilName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String HotWaterOrSteamInletNodeName { get; set; } = "";
        
[JsonProperty(@"")]
public YesNoDefault CoolingCoilObjectType { get; set; } = (YesNoDefault)Enum.Parse(typeof(YesNoDefault), "Default");
        
[JsonProperty(@"")]
public System.String CoolingCoilName { get; set; } = "";
        
[JsonProperty(@"")]
public System.String ColdWaterInletNodeName { get; set; } = "";
        
[Description(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
[JsonProperty(@"Enter the name of an AvailabilityManagerAssignmentList object.")]
public System.String AvailabilityManagerListName { get; set; } = "";
        
[Description(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
[JsonProperty(@"Enter the name of a DesignSpecificationZoneHVACSizing object.")]
public System.String DesignSpecificationZonehvacSizingObjectName { get; set; } = "";
    }
    
    public enum OutdoorAirControlTypeType
    {
        
        [JsonProperty("FixedAmount")]
        FixedAmount = 0,
        
        [JsonProperty("FixedTemperature")]
        FixedTemperature = 1,
        
        [JsonProperty("VariablePercent")]
        VariablePercent = 2,
    }
    
    public enum SystemConfigurationTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("SeriesSlabs")]
        SeriesSlabs = 1,
        
        [JsonProperty("SlabAndZone")]
        SlabAndZone = 2,
        
        [JsonProperty("SlabOnly")]
        SlabOnly = 3,
    }
    
    public enum TemperatureControlTypeType
    {
        
        [JsonProperty("")]
        Default = 0,
        
        [JsonProperty("MeanAirTemperature")]
        MeanAirTemperature = 1,
        
        [JsonProperty("MeanRadiantTemperature")]
        MeanRadiantTemperature = 2,
        
        [JsonProperty("OperativeTemperature")]
        OperativeTemperature = 3,
        
        [JsonProperty("OutdoorDryBulbTemperature")]
        OutdoorDryBulbTemperature = 4,
        
        [JsonProperty("OutdoorWetBulbTemperature")]
        OutdoorWetBulbTemperature = 5,
        
        [JsonProperty("SurfaceTemperature")]
        SurfaceTemperature = 6,
        
        [JsonProperty("ZoneAirDewPointTemperature")]
        ZoneAirDewPointTemperature = 7,
    }
    
    public enum CoilOptionTypeType
    {
        
        [JsonProperty("Cooling")]
        Cooling = 0,
        
        [JsonProperty("Heating")]
        Heating = 1,
        
        [JsonProperty("HeatingAndCooling")]
        HeatingAndCooling = 2,
        
        [JsonProperty("None")]
        None = 3,
    }
    
    public enum HeatingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Heating:Electric")]
        CoilHeatingElectric = 0,
        
        [JsonProperty("Coil:Heating:Fuel")]
        CoilHeatingFuel = 1,
        
        [JsonProperty("Coil:Heating:Steam")]
        CoilHeatingSteam = 2,
        
        [JsonProperty("Coil:Heating:Water")]
        CoilHeatingWater = 3,
    }
    
    public enum CoolingCoilObjectTypeType
    {
        
        [JsonProperty("Coil:Cooling:Water")]
        CoilCoolingWater = 0,
        
        [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
        CoilCoolingWaterDetailedGeometry = 1,
        
        [JsonProperty("CoilSystem:Cooling:Water:HeatExchangerAssisted")]
        CoilSystemCoolingWaterHeatExchangerAssisted = 2,
    }
    
    [Description("This is used to allow the coordinate control of several ventilated slab system su" +
        "rfaces. Note that the flow fractions must sum up to 1.0. The number of surfaces " +
        "can be expanded beyond 10, if necessary, by adding more groups to the end of the" +
        " list")]
    [JsonObject("ZoneHVAC:VentilatedSlab:SlabGroup")]
    public class ZoneHVAC_VentilatedSlab_SlabGroup
    {
        
[JsonProperty(@"")]
public System.String Data { get; set; } = "";
    }
}
